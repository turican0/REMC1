#include "sub_main.h"

#define debug1
#define autostart

#define MODIFY_SETTINGS
int modset_used_precount = 0;
int modset_used_count = 0;
int modset_key = 0x0;

bool modset_key_alt = false;
//#define COMPARE_WITH

#define FIX_MOUSE

#define MAX_HEIGHT 1080 //for initialize
#define ACT_MAX_HEIGHT 640 //for_real_use, for 320 is 640 too

bool IsHiddenWord = false;

//fix dword_96902
//info
/*

0x26C450
code DOSBOX 234585
code 63585
sub_634E0_639F0

26C3F4->061220 *search

26C430->062220 build00.dat
26C440->066B70 build00.tab
26C378->066D10 font0.dat
26C3B8->068D10 font0.tab
26C37C->069310 font1.dat
26C3BC->06A280 font1.tab
2EB744->06A8F0 tmaps00.tab
26C448->06C5B0 *PalData *
26C450->06CD40 *PalMem
26C428->06CD80 Pointers.dat
26C444->08F770 Pointers.tab
26C42C->094C40 Pal00.dat

2ECFF4->06D080 *Wscreen
26C3FC->07E600 *Bscreen
26C444->08F770 mspr00.dat
26C42C->094C40 mspr00.tab

__int16 sub_51650(int a1, int a2, __int16 a3, int a4)//222650_
-problem

test sub_519E0_51D20

begSFont0Tab_12CB28_2EAB28_2EAB18 0x9baaa

dword_4A620

void sub_50350()

begBscreen_AE3FC_AE3EC_26C3FC_26C3EC

&str_AE400_AE3F0->str_29795[7] + 72 00 fd 00 fb
0x26f13 00 41 00 34 a0
0x26ecb
0x26c400 +0x7507

off_987DE

&buffer[0x3807] 802e
&adress[0x3807] 7f2e
((uint8_t*)str_AE400_AE3F0)+0x3807

&a2x->var_u32_29867_72

&word_AE454_AE444 0x26C454
sub_196E0
sub_41EC0_42200

addprocedurestop(0x205367, 0x0, true, true, 0x26C454, 0x12345678);

after sub_455D0 !!!

diff 30D90 DrawWorld_30D90_30DD0
DrawGameFrame_20FB0

beginFrame_93ACC 251ACC

24a4b1 794B1(setViewPort2_79495_799A5)
201b18 30B18(setViewPort_30A70_30AB0)

PrepRot_29C30_29C70

  for ( result = (uint32*)&unk_B3EA0; v101 >= 0; --v101 )
  {
    v83 = result[1];
    v84 = *(result - 2);
    result += 3;
    *(result - 3) = v83 - v84;
  }
  return result;

unk_B3EA0 271EA0

1FB6DC 2A6DC sub_29C30

0x1FBB02

*/
//info
//fix

std::string gameDataPath = "c:/prenos/magic1/cd2/CARPET";
std::string gameDataPath2 = "c:/prenos/magic1/data";

//bool inline __CFADD__16(uint16 x, uint16 y) { return ((x + y) > 0xffff); };
//bool inline __CFADD__32(uint32 x, uint32 y) { return ((x + y) > 0xffffffff); };

bool inline __CFADD__16(uint16 x, uint16 y) { return uint16(x) > uint16(x + y); };
bool inline __CFADD__32(uint32 x, uint32 y) { return uint32(x) > uint32(x + y); };

int unk_A9998_A99B0;
int loc_24080;
int unk_110003;
int unk_B0004;
int loc_50005;
int loc_70000;
int _no_support_loaded;
int unk_A7325;
//uint8_t* unk_AC2B8[0x300];
typedef struct {
    int16 x;
    int16 y;
} Type_9AD90;
Type_9AD90 mouse_9AD90 = { 320, 200};
//int16 mouse_9AD90.x;
//int16 mouse_9AD90.y;
//int16 word_12CADC;
//int16 mouse_12CADC.y;
Type_9AD90 mouse_12CADC = { 320, 200 };
//int unk_12C9A0;
//int unk_12CA00;
int16 word_9ADA0;
int _ZF;
int __DS__;

void FixPerifery(char* text = nullptr,int a = 0, int b = 0, int c = 0) {
    if (text)
    {
        if (!strcmp(text, "cpuid"))
            printf("external pefifery - CPU identification!!!! - Fix It\n");
        else if (!strcmp(text, "fninit"))
            printf("external pefifery - CPU FPU unit turn on!!!! - Fix It\n");
        else if (!strcmp(text, "port0x3C7"))
            printf("external pefifery - Read VGA palette!!!! - Fix It\n");
        else if (!strcmp(text, "port0x3C8"))
            printf("external pefifery - Write VGA palette!!!! - Fix It\n");
        else if (!strcmp(text, "initVga320"))
            printf("external pefifery - Init VGA - resolution 320x200!!!! - Fix It\n");
        else if (!strcmp(text, "initVga640"))
            printf("external pefifery - Init VGA - resolution 640x480!!!! - Fix It\n");
        else if (!strcmp(text, "chRes"))
            printf("external pefifery - Change resolution type:%d!!!! - Fix It\n", a);
        else if (!strcmp(text, "mouseRes"))
            printf("external pefifery - Mouse Reset!!!! - Fix It\n");
        else if (!strcmp(text, "mouseSubr"))
            printf("external pefifery - Mouse Install subroutine!!!! - Fix It\n");
        else if (!strcmp(text, "mouseHide"))
            printf("external pefifery - Mouse hide cursor!!!! - Fix It\n");
        else if (!strcmp(text, "mouseSetPix"))
            printf("external pefifery - Mouse set pixel ratio!!!! - Fix It\n");
        else if (!strcmp(text, "blit320"))
            ;// printf("external pefifery - Blit320\n");
        else if (!strcmp(text, "blit640"))
            printf("external pefifery - Blit640\n");
        else if (!strcmp(text, "VSYNC"))
            printf("external pefifery - VSYNC\n");
        else if (!strcmp(text, "CLEAN_KEYS"))
            printf("external pefifery - clean pressed keys\n");
        else if (!strcmp(text, "START_TIMER"))
            printf("external pefifery - start timer\n");
        else if (!strcmp(text, "COMPUTE_TIMER"))
            ;// printf("external pefifery - compute timer\n");
        else if (!strcmp(text, "MOUSE SET POS"))
            printf("external pefifery - set mouse pos\n");
        else if (!strcmp(text, "MOUSE RESET"))
            printf("external pefifery - reset mouse\n");
        else if (!strcmp(text, "GET VIDEOMODES"))
            printf("external pefifery - Get VGA video modes\n");
        else if (!strcmp(text, "SET VIDEOMOD"))
            printf("external pefifery - Set VGA resolution and colors\n");
        else if (!strcmp(text, "GET MORE GRAPHICS INFO"))
            printf("More detailed information about individual graphics modes\n");
        else if (!strcmp(text, "port0x3C8 2"))
            printf("external pefifery - Blit part of screen - not use this, rewrite to standard Blit!!!! - Fix It\n");
        else
            printf("unknown external pefifery!!!! - Fix It\n");
    }
    else
        printf("unknown external pefifery!!!! - Fix It\n");
};//for devices comutications

char dataPath[MAX_PATH];
char* FixPath(char* inPath)
{
    if (strlen(inPath) >= 12)
    {
        if (!memcmp(inPath, "C:\\carpet.cd", 12))
        {
            sprintf(dataPath, "%s/%s", gameDataPath2.c_str(), &inPath[3]);
            return dataPath;
        }
        if (!memcmp(inPath, "c:/CARPET.CD", 12))
        {
            sprintf(dataPath, "%s/%s", gameDataPath2.c_str(), &inPath[3]);
            return dataPath;
        }
    }
    sprintf(dataPath, "%s/%s", gameDataPath.c_str(), inPath);
    return dataPath;
}

//fix
//-------------------------------------------------------------------------
// Function declarations

//!!!!!!!!!!!!!! all arrays with 9999 size is stub !!!!!!!!!!!!!!!!

//void sub_10000(); // weak
void sub_10010(__int16 a1, __int16 a2);
uint8_t* sub_1002D(uint8_t* a1, uint8_t* a2);
__int16 sub_100B8();
__int16 sub_10166();
int sub_10190();
__int16 sub_101A1();
int sub_10254();
void sub_10300();
void sub_103C0(void *a1, unsigned int a2);
int sub_103F0();
void sub_104D0();
void PlayInfoFmv_107C0(__int16 a1, __int16 a2, int a3);
void sub_108C0();
void sub_10960();
void sub_10AB0();
__int16 sub_10BD0();
Type_AE3E0* sub_10CB0(unsigned __int16 a1);
void sub_10D40(Type_AE3E0* a1, Type_sub168_2* a2, __int16 a3);
void sub_10EB0(Type_sub_AE3E0* a1);
void sub_10F10(Type_sub_AE3E0* a1);
Type_sub_AE3E0* sub_10FD0(Type_AE3E0* a1, __int16 a2);
void sub_11010(Type_AE3E0* a1);
bool sub_11050();
void sub_111B0(int a1, int a2);
int sub_11410(int a1, int a2);
void sub_11490(int a1);
int sub_114B0(int a1, _DWORD *a2, _DWORD *a3);
void sub_11540();
int sub_11640(Type_AE400_29795* a1, axis_3d* a2, char a3);
int sub_11760(axis_3d* a1);
int sub_11810(axis_3d* a1);
bool sub_118C0(axis_3d* a1, axis_4d* a2, axis_3d* a3, axis_4d* a4);
bool sub_11950(Type_AE400_29795* a1, Type_AE400_29795* a2);
int sub_11980(int a1);
int sub_11AC0(_WORD *a1);
int sub_11C00(__int16 *a1);
Type_AE400_29795* sub_11D10(Type_AE400_29795* event);
int sub_11E50(__int16 *a1, char a2, char a3);
int sub_11F50(axis_3d* position);
void sub_120B0(Type_AE400_29795* a1x, unsigned __int8 a2, unsigned __int16 a3);
int sub_124F0(int a1, char a2, unsigned __int16 a3);
int sub_127E0(Type_AE400_29795* a1, char a2, unsigned __int16 a3);
int sub_12B50(Type_AE400_29795* a1, int a2, unsigned __int8 a3, unsigned __int16 a4);
void sub_12C50(_WORD *a1);
char sub_12D10(_WORD *a1);
_BOOL1 sub_12F70(_WORD *a1);
int sub_13170(int a1);
int sub_132B0(int a1);
int sub_136C0(int a1);
bool sub_13800(int a1);
int sub_138E0();
int sub_138F0(int a1);
bool sub_13990(_WORD *a1);
int sub_13A10(int a1);
bool sub_13A70(int a1);
bool sub_13BA0(int a1);
bool sub_13CA0(int a1);
bool sub_13DC0(int a1);
bool sub_13DD0(int a1);
int sub_13F00(int a1);
int sub_14120(int a1);
unsigned int sub_14230(int a1);
int sub_14310(int a1);
int sub_143A0(int a1);
int sub_145B0(int a1);
int sub_147E0(int a1);
int sub_14B10(int a1);
int sub_14C40(int a1);
int sub_14C80(int a1);
int sub_14CE0(int a1);
int sub_14D00(int a1);
int sub_14D20(int a1);
int sub_14D40(int a1);
int sub_14D60(int a1);
int sub_14DA0(int a1);
int sub_14DC0(int a1);
unsigned int sub_14E60(int a1, unsigned __int8 a2);
int sub_14EB0(int a1);
unsigned int sub_15080(int a1);
unsigned int sub_15260(int a1, unsigned __int8 a2);
unsigned int sub_15340(int a1, int a2);
unsigned int sub_153B0(int a1, int a2);
__int16 sub_15420(int a1);
bool sub_15440(int a1, int a2);
int sub_15470(int a1, int a2, signed int a3, signed int a4);
int sub_155F0(int a1, unsigned __int8 a2);
int sub_15A00(int a1, unsigned __int8 a2);
bool sub_15E60(int a1, unsigned __int8 a2);
bool sub_15E90(int a1, unsigned __int8 a2);
void sub_15EC0(int a1);
unsigned int sub_16000(int a1, unsigned __int8 a2);
char sub_16030(int a1);
char sub_16310(_DWORD *a1);
void sub_16540();
unsigned int sub_16800(unsigned int a1, int a2);
int sub_16870(int a1);
char sub_16890(int a1, int a2);
_BOOL1 sub_16920(int a1);
char sub_16990();
void sub_169E0();
void ProcessKeys_16B00();
// char sub_17C20(__int16 a1, __int16 a2, __int16 a3);
void MakeControlCommand_188A0(char a1, char a2);
// void sub_192D8(char a1, _BOOL1 a2, char a3, char a4, __int16 a5);
int sub_192F3();
void sub_193EE(__int16 a1);
// int sub_19470(__int16 a1);
int sub_194F0();
__int16 sub_19550(int a1);
signed int sub_19650(axis_3d* a1);
void sub_196E0(Type_AE400_29795* a1);
void sub_19B10(Type_AE400_29795* a1, char a2);
void sub_19D70(Type_AE400_29795* a1, char a2);
int sub_1A120(Type_AE400_29795* a1, char a2, unsigned __int16 (*a3)(Type_AE400_29795*, int));
void sub_1A390(Type_AE400_29795* a1, unsigned __int16 a2);
void sub_1A6C0(Type_AE400_29795* a1, char a2);
void sub_1A800(Type_AE400_29795* a1);
int sub_1A8E0(Type_AE400_29795* a1, Type_AE400_29795* a2);
int sub_1A990(Type_AE400_29795* a1, Type_AE400_29795* a2);
void sub_1AA40(Type_AE400_29795* a1, int a2);
int sub_1AB10(Type_AE400_29795* a1, int a2);
int sub_1AB70(Type_AE400_29795* a1, Type_AE400_29795* a2);
int sub_1AE30(Type_AE400_29795* a1, Type_AE400_29795* a2);
int sub_1AEE0(Type_AE400_29795* a1, Type_AE400_29795* a2);
void sub_1B060(Type_AE400_29795* a1);
void sub_1B070(Type_AE400_29795* a1);
void sub_1B090(Type_AE400_29795* a1);
void sub_1B0E0(Type_AE400_29795* a1);
void sub_1B100(Type_AE400_29795* a1);
void sub_1B110(Type_AE400_29795* a1);
void sub_1B120(Type_AE400_29795* a1);
void sub_1B160(Type_AE400_29795* a1);
void sub_1B200(Type_AE400_29795* a1);
void sub_1B2D0(Type_AE400_29795* a1);
void sub_1B320(Type_AE400_29795* a1);
void sub_1B330(Type_AE400_29795* a1);
void sub_1B340(Type_AE400_29795* a1);
void sub_1B350(Type_AE400_29795* a1);
void sub_1B370(Type_AE400_29795* a1);
void sub_1B3C0(Type_AE400_29795* a1);
void sub_1B4C0(Type_AE400_29795* a1);
void sub_1B4E0(Type_AE400_29795* a1);
void sub_1B4F0(Type_AE400_29795* a1);
void sub_1B500(Type_AE400_29795* a1);
void sub_1B510(Type_AE400_29795* a1);
void sub_1B520(Type_AE400_29795* a1);
void sub_1B570(Type_AE400_29795* a1);
void sub_1B580(Type_AE400_29795* a1);
void sub_1B590(Type_AE400_29795* a1);
void sub_1B5A0(Type_AE400_29795* a1);
void sub_1B5D0(Type_AE400_29795* a1);
void sub_1BB20(Type_AE400_29795* a1);
void sub_1BBE0(Type_AE400_29795* a1);
void sub_1BC10(Type_AE400_29795* a1);
void sub_1BC40(Type_AE400_29795* a1);
void sub_1BC50(Type_AE400_29795* a1);
void sub_1BCE0(Type_AE400_29795* a1);
void sub_1BD10(Type_AE400_29795* a1);
void sub_1BD20(Type_AE400_29795* a1);
void sub_1C110(Type_AE400_29795* a1);
void sub_1C170(Type_AE400_29795* a1);
void sub_1C3C0(Type_AE400_29795* a1);
void sub_1C3D0(Type_AE400_29795* a1);
void sub_1C490(Type_AE400_29795* a1);
void sub_1C4A0(Type_AE400_29795* a1);
void sub_1C4F0(Type_AE400_29795* a1);
void sub_1C880(Type_AE400_29795* a1);
void sub_1C8D0(Type_AE400_29795* a1);
void sub_1C8E0(Type_AE400_29795* a1);
void sub_1C8F0(Type_AE400_29795* a1);
void sub_1C900(Type_AE400_29795* a1);
void sub_1C960(Type_AE400_29795* a1);
void sub_1CA00(Type_AE400_29795* a1);
void sub_1CA20(Type_AE400_29795* a1);
void sub_1CA30(Type_AE400_29795* a1);
void sub_1CA40(Type_AE400_29795* a1);
void sub_1CA50(Type_AE400_29795* a1);
void sub_1CE30(Type_AE400_29795* a1);
void sub_1CF50(Type_AE400_29795* a1);
void sub_1CF60(Type_AE400_29795* a1);
void sub_1CFE0(Type_AE400_29795* a1);
void sub_1CFF0(Type_AE400_29795* a1);
void sub_1D060(Type_AE400_29795* a1);
void sub_1D6D0(Type_AE400_29795* a1);
void sub_1DA60(Type_AE400_29795* a1);
void sub_1DC80(Type_AE400_29795* a1);
void sub_1DCB0(Type_AE400_29795* a1);
void sub_1DCC0(Type_AE400_29795* a1);
void sub_1DCD0(Type_AE400_29795* a1);
void sub_1DD50(Type_AE400_29795* a1);
void sub_1DD90(Type_AE400_29795* a1);
void sub_1DDB0(Type_AE400_29795* a1);
void sub_1DDD0(Type_AE400_29795* a1);
void sub_1DDE0(Type_AE400_29795* a1);
int sub_1DDF0(Type_AE400_29795* a1);
void sub_1DE10(Type_AE400_29795* a1);
void sub_1DE20(Type_AE400_29795* a1);
void sub_1DE30(Type_AE400_29795* a1);
void sub_1DE40(Type_AE400_29795* a1);
void sub_1DFE0(Type_AE400_29795* a1);
void sub_1E380(Type_AE400_29795* a1);
void sub_1E6F0(Type_AE400_29795* a1);
void sub_1E700(Type_AE400_29795* a1);
void sub_1E710(Type_AE400_29795* a1);
void sub_1E720(Type_AE400_29795* a1);
void sub_1E770(Type_AE400_29795* a1);
void sub_1E810(Type_AE400_29795* a1);
_BOOL1 sub_1E920(_WORD *a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4);
_WORD *sub_1E9B0(unsigned __int16 a1, _WORD *a2, _WORD *a3);
void sub_1EA40(Type_AE400_29795* a1);
void sub_1EED0(Type_AE400_29795* a1);
void sub_1F120(Type_AE400_29795* a1);
void sub_1F390(Type_AE400_29795* a1);
void sub_1F5A0(Type_AE400_29795* a1);
void sub_1F5B0(Type_AE400_29795* a1);
void sub_1F640(Type_AE400_29795* a1);
void sub_1FA00(Type_AE400_29795* a1);
void sub_1FAA0(Type_AE400_29795* a1);
void sub_1FAC0(Type_AE400_29795* a1);
void sub_1FE90(Type_AE400_29795* a1);
void sub_1FEC0(Type_AE400_29795* a1);
// void sub_1FF40(char a1, int a2, char a3, int a4, int a5);
void sub_1FF60(Type_AE400_29795* a1);
void sub_201D0(Type_AE400_29795* a1);
void sub_203E0(Type_AE400_29795* a1);
void sub_203F0(Type_AE400_29795* a1);
void sub_20400(Type_AE400_29795* a1);
void sub_20410(Type_AE400_29795* a1);
void sub_20450(Type_AE400_29795* a1);
void sub_20480(Type_AE400_29795* a1);
void sub_20700(Type_AE400_29795* a1);
void sub_20710(Type_AE400_29795* a1);
void sub_207E0(Type_AE400_29795* a1);
void sub_20B60(Type_AE400_29795* a1);
void sub_20B70(Type_AE400_29795* a1);
void sub_20B80(Type_AE400_29795* a1);
int sub_20BD0();
void sub_20D00(char a1);
void sub_20E60_20E60();
int nullsub_1(_DWORD, _DWORD); // weak
void DrawGameFrame_20FB0();
void sub_22810(int a1, int a2, int a3, int a4, int a5, unsigned __int8 a6);
int sub_22880();
void sub_22E50(Type_AE400_29795* a1x);
void sub_23940(__int16 a1, __int16 a2, TypeTab* a3);
void sub_23AE0(__int16 a1, __int16 a2, TypeTab* a3, unsigned __int8 a4);
void sub_23CF0(__int16 a1, __int16 a2, int a3);
void sub_23D40(int a1, int a2, Type_AE400_29795* a3x, char a4);
void sub_24230(__int16 a1, __int16 a2, unsigned int a3, char a4);
void sub_247C0(int result, int a2, __int16 a3, __int16 a4, int a5, unsigned __int8 a6);
void sub_24AB0();
void sub_24B50(char* a1);
int sub_24B80();
void sub_24BB0();
void sub_24BF0(unsigned __int8 a1);
void sub_24C20(int a1, int a2, int a3, int a4, unsigned __int16 a5);
void sub_24CA0(int a1, int a2, int a3, int a4, unsigned __int16 a5);
void sub_24D20(int a1, int a2, int a3, int a4, unsigned __int16 a5);
void sub_24DA0(int a1, int a2, int a3, int a4, unsigned __int16 a5);
int nullsub_2(void); // weak
void sub_24F60(Type_AE400_29795* a1x);
void sub_25130(int a1);
void sub_252B0(int a1);
int sub_252D0(int a1);
void sub_253E0(int a1);
void sub_253F0(int a1);
void sub_25410(Type_AE400_29795* a1);
void sub_25470(Type_AE400_29795* a1);
void sub_25570(Type_AE400_29795* a1);
void sub_255D0(Type_AE400_29795* a1, __int16 a2, __int16 a3);
void sub_25670(Type_AE400_29795* a1);
void sub_25760(Type_AE400_29795* a1);
int sub_257B0(int a1);
void sub_258A0(int a1);
int nullsub_19(_DWORD); // weak
void sub_25990(Type_AE400_29795* a1);
void sub_25A60(int a1);
void sub_25CE0(Type_AE400_29795* a1);
void sub_25EC0(int a1);
void sub_26140(Type_AE400_29795* a1);
void sub_262D0(Type_AE400_29795* a1);
void sub_26360(Type_AE400_29795* a1);
void sub_263C0(Type_AE400_29795* a1);
_BOOL1 sub_264D0(unsigned __int16 a1);
void sub_26560(int a1, int a2);
void sub_26670(int a1, _WORD *a2);
void sub_26760(int a1, _WORD *a2);
void sub_26890(Type_AE400_29795* event);
void sub_26920(Type_AE400_29795* a1);
void sub_269A0(Type_AE400_29795* a1);
void sub_26A60(int a1);
void sub_26C00(int a1);
void sub_26CE0(int a1);
void sub_26D20(int a1);
void sub_26E90(int a1);
void sub_27030(Type_AE400_29795* event);
void sub_274D0(Type_AE400_29795* event);
void sub_275C0(__int16 *a1);
_WORD * sub_27690(_WORD *result, Type_AE400_29795* a2x);
void sub_277D0(Type_AE400_29795* ev1, Type_AE400_29795* ev2);
char sub_279D0(int a1);
void sub_27D30(Type_AE400_29795* event);
void sub_28200(int a1);
char sub_285C0(int a1);
// int sub_28D10(int a1, int a2);
void sub_28DC0(Type_AE400_29795* event);
void sub_28FE0(int a1);
void sub_293D0(Type_AE400_29795* a1);
void sub_29540(Type_AE400_29795* a1);
int sub_29640(Type_AE400_29795* event);
void sub_296A0(Type_AE400_29795* a1);
void sub_29700(int a1);
void sub_29780(Type_AE400_29795* a1);

void sub_29920_29960(int a1);
void sub_299D0_29A10(Type_AE400_29795* a1);
void sub_29BA0_29BE0(int a1);
void PrepRot_29C30_29C70(__int16 roll);
// char sub_2A700_2A740(int a1, __int16 a2, __int16 a3, __int16 a4, int a5, int a6, __int16 a7, int a8);
void sub_2C410_2C450(unsigned int a1);
void DrawSprite_2DCB0_2DCF0(Type_BegBscreen* a2);
void DrawSprite3D_2F170_2F1B0(Type_BegBscreen* a2);
void DrawSprite_2FC50_2FC90(Type_BegBscreen* a2);
void DrawSky_30730_30770(int16_t roll);
void sub_309D0_30A10(int a1);
void setViewPort_30A70_30AB0(int a1);
void sub_30B30_30B70();
int sub_30D30_30D70(__int16 a1);
void DrawWorld_30D90_30DD0(int a2, int a3, __int16 a4, int a5, int a6, int a7, int a8);
void sub_315C0_31600();
void sub_31600_31640();
void SetPalette_319A0_319E0(TColor* palette);
void sub_31A00_31A40();
void sub_31A60_31AA0();
void sub_31AA0(int a1);
unsigned __int16 sub_31BB0();
unsigned __int16 sub_31D40();
unsigned __int16 sub_31EC0();
unsigned __int16 sub_31FA0();
unsigned __int16 sub_320A0(unsigned __int16 a1);
unsigned __int16 sub_32300();
char sub_32560();
void sub_329C0();
int sub_32A50();
unsigned __int16 sub_32AE0(int a1, unsigned __int8 a2);
unsigned __int16 sub_32B90_sub_32F80(int a1, int a2);
unsigned __int8 sub_32D00(unsigned __int8 a1, unsigned __int8 a2);
char sub_32EB0(unsigned __int8 a1, unsigned __int8 a2);
unsigned __int16 sub_33180(unsigned __int8 a1);
unsigned __int16 sub_33500();
// char sub_33640(char a1, char a2, unsigned __int16 a3);
void sub_33800_33BF0(char a1, char a2, unsigned __int16 a3, unsigned __int8 a4);
unsigned __int16 sub_33AE0(unsigned __int16 a1, char a2);
void sub_33B90(uaxis_2d a1, uaxis_2d a2);
char sub_33E10(unsigned __int16 a1, __int16 a2);
unsigned __int16 sub_34070();
// int TopProcedure_340B0_34470(int a1, __int16 a2, __int16 a3, unsigned __int16 a4, int a5);
int sub_34460_34820();
void sub_344F0();
// void DrawAndEventsInGame_34530_348F0(__int16 a1, __int16 a2, __int16 a3);
void GameLoop_34610_349D0();
void sub_34690_34A50();
void sub_34B00_34EC0();
void sub_34B40_34F00();
void sub_34C60_35020();
void sub_34C80_35040();
int ProcessCommandLine_34DD0_35190(int argc, char** argv);
int FlvInitSet_356E0_35AA0();
int sub_35710();
int sub_357A0(); // weak
// void sub_357C0_35B80(__int16 a1, int a2, unsigned __int16 a3, unsigned __int16 a4);
void sub_358A0_35C60();
int sub_358D0(__int16 a1, __int16 a2, __int16 a3);
int sub_35900(__int16 a1, int a2, char a3, char a4);
int sub_35960(__int16 a1, unsigned __int16 a2, __int16 a3, __int16 a4);
_WORD *sub_35BF0(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
int sub_35D30(unsigned __int16 a1, unsigned __int16 a2, __int16 a3, __int16 a4);
int sub_35DE0(unsigned __int16 a1, unsigned __int16 a2, __int16 a3, __int16 a4);
unsigned int sub_35EA0(char a1, char a2, char a3, char a4);
char sub_35F30_362F0(int a1, char a2, char a3, int a4, int a5, unsigned __int8 a6);
void sub_36080(unsigned __int8 a1, char a2, int a3, int a4);
int sub_360C0(int a1);
uint16_t sub_361C0(uint8_t a1, uint8_t a2, uint8_t a3, uint8_t a4);
void sub_362C0(Type_AE400_193795* a1, Type_1090* a2);
void GenerateFeatures_36430(Type_AE400_193795* a1);
void sub_36480(Type_AE400_193795* a1, Type_1090* a2);
_WORD *sub_365C0(int a1);
void sub_36620();
Type_sub168* sub_36700_36AC0(int a1, unsigned __int16 a2, Type_168* a3);
int sub_36850_36C10(Type_sub168* a1);
// _DWORD ios::failure::cause(_DWORD); weak
Type_sub168_2* sub_369E0_36DA0(Type_sub168* a1, unsigned int a2, __int16 a3);
void sub_36A90_36E50(Type_sub168* a1, Type_sub168_2* a2);
void sub_36C10_36FD0(Type_sub168* a1);
// void sub_36C65(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
void cleanPressedKeys_36D83();
int sub_36DC2_37182();
void RefillLife_36DE0(Type_AE400_29795* event);
void sub_36DF0(Type_AE400_29795* event, unsigned __int16 a2);
int sub_36F90(int a1);
void sub_36FA0(Type_AE400_29795* event, __int16 a2);
void sub_37030(Type_AE400_29795* a1, __int16 a2);
void sub_370A0(Type_AE400_29795* a1, __int16 a2);
void sub_370E0(Type_AE400_29795* a1, __int16 a2);
void sub_37130(Type_AE400_29795* a1, __int16 a2, __int16 a3);
void sub_37150(Type_AE400_29795* event, __int16 a2);
void sub_371C0();
void sub_37220_375E0();
Type_AE400_29795* NewEvent_372C0();
Type_AE400_29795* sub_373F0(axis_3d* a1, int a2, int a3);
void sub_37440(int a1, char a2);
void sub_37560(Type_1090* type1090);
int sub_37710();
int sub_37720(int a1);
int sub_37740(int a1);
int sub_37760(int a1);
int sub_37780(int a1);
int sub_377A0(int a1);
int sub_377C0(int a1);
int sub_377E0(int a1);
int sub_37800(int a1);
Type_AE400_29795* sub_37820(axis_3d* position);
int sub_378A0(int a1);
int sub_37920(int a1);
int sub_37A00(int a1);
int sub_37A80(int a1);
int sub_37AA0(int a1);
int sub_37AC0(int a1);
int sub_37AE0(int a1);
int sub_37B00(int a1);
int sub_37B20(int a1);
int sub_37B40(int a1);
int sub_37B60(int a1);
int sub_37B80(int a1);
int sub_37BA0(int a1);
int sub_37BC0(int a1);
int sub_37CF0(int a1);
int sub_37D70(int a1);
int sub_37E00(int a1);
int sub_37E80(int a1);
int sub_37EF0(int a1);
int sub_38030(int a1);
int sub_38270(int a1);
int sub_38370(int a1);
void sub_38820(Type_AE400_29795* a1);
int sub_38890(int a1);
int sub_389E0(int a1);
int sub_38C00(int a1);
int sub_38D09(); // weak
int sub_38D60(int a1);
int sub_38E70(int a1);
int sub_38FC0(int a1);
int sub_390D0(int a1);
int sub_39200(int a1);
int sub_39490(int a1);
int sub_395B0(int a1);
int sub_396E0(int a1);
int sub_39800(int a1);
int sub_39820(int a1);
int sub_39840(int a1);
int sub_39860(int a1);
int sub_39880(int a1);
int sub_398A0(int a1);
int sub_398C0(int a1);
int sub_39940(int a1);
int sub_39960(int a1);
int sub_39980(int a1);
int sub_399A0(int a1);
int sub_399C0(int a1);
int sub_399E0(int a1);
int sub_39A10(int a1);
int sub_39A90(int a1);
int sub_39B40(int a1);
int sub_39BC0(int a1);
int sub_39C40(int a1);
int sub_39CC0(int a1);
int sub_39D40(int a1);
int sub_39DC0(int a1);
int sub_39E40(int a1);
int sub_39EC0(int a1);
int sub_39F40(int a1);
int sub_39FC0(int a1);
int sub_3A040(int a1);
int sub_3A0C0(int a1);
int sub_3A1A0(int a1);
int sub_3A210(int a1);
int sub_3A270(int a1);
int sub_3A2F0(int a1);
int sub_3A390(int a1);
int sub_3A410(int a1);
int sub_3A490(uint16_t* a1);
int sub_3A510(uint16_t* a1);
int sub_3A570(uint16_t* a1);
int sub_3A5D0(uint16_t* a1);
int sub_3A640(uint16_t* a1);
int sub_3A6B0(uint16_t* a1);
int sub_3A730(uint16_t* a1);
int sub_3A7D0(uint16_t* a1);
int sub_3A870(uint16_t* a1);
int sub_3A8D0(uint16_t* a1);
int sub_3A930(uint16_t* a1);
int sub_3A9A0(uint16_t* a1);
int sub_3AA10(uint16_t* a1);
int sub_3AAA0(uint16_t* a1);
int sub_3AB40(uint16_t* a1);
int sub_3ABE0(uint16_t* a1);
int sub_3AC70(uint16_t* a1);
int sub_3ACC0(uint16_t* a1);
int sub_3ADB0(uint16_t* a1);
int sub_3AE00(uint16_t* a1);
int sub_3AE80(uint16_t* a1);
int sub_3AF00(uint16_t* a1);
int sub_3AF80(uint16_t* a1);
int sub_3B000(uint16_t* a1);
int sub_3B060(uint16_t* a1);
Type_AE400_29795* sub_3B0C0(axis_3d* position);
int sub_3B120(uint16_t* a1);
int sub_3B180(uint16_t* a1);
int sub_3B1D0(uint16_t* a1);
int sub_3B230(uint16_t* a1);
int sub_3B2A0(uint16_t* a1);
int sub_3B300(uint16_t* a1);
int sub_3B3D0(uint16_t* a1);
int sub_3B3E0(uint16_t* a1);
int sub_3B460(uint16_t* a1);
int sub_3B4D0(uint16_t* a1);
int sub_3B5A0(uint16_t* a1);
int sub_3B620(uint16_t* a1);
Type_AE400_29795* sub_3B690(axis_3d* a1);
int sub_3B6F0(uint16_t* a1);
int sub_3B760(uint16_t* a1);
int sub_3B7B0(uint16_t* a1);
int sub_3B800(uint16_t* a1);
int sub_3B860(uint16_t* a1);
int sub_3B8E0(uint16_t* a1);
int sub_3B970(uint16_t* a1);
int sub_3BA00(uint16_t* a1);
int sub_3BA90(uint16_t* a1);
Type_AE400_29795* sub_3BB20(axis_3d* position, char a2, char a3);

Type_AE400_29795* sub_3BB70(axis_3d* position);
Type_AE400_29795* sub_3BB90(axis_3d* position);
Type_AE400_29795* sub_3BBB0(axis_3d* position);
Type_AE400_29795* sub_3BBD0(axis_3d* position);
Type_AE400_29795* sub_3BBF0(axis_3d* position);
Type_AE400_29795* sub_3BC10(axis_3d* position);
Type_AE400_29795* sub_3BC30(axis_3d* position);
Type_AE400_29795* sub_3BC50(axis_3d* position);
Type_AE400_29795* sub_3BC70(axis_3d* position);
Type_AE400_29795* sub_3BC90(axis_3d* position);
Type_AE400_29795* sub_3BCB0(axis_3d* position);
Type_AE400_29795* sub_3BCD0(axis_3d* position);
Type_AE400_29795* sub_3BCF0(axis_3d* position);
Type_AE400_29795* sub_3BD10(axis_3d* position);
Type_AE400_29795* sub_3BD30(axis_3d* position);
Type_AE400_29795* sub_3BD50(axis_3d* position);
Type_AE400_29795* sub_3BD70(axis_3d* position);
Type_AE400_29795* sub_3BD90(axis_3d* position);
Type_AE400_29795* sub_3BDB0(axis_3d* position);
Type_AE400_29795* sub_3BDD0(axis_3d* position);
Type_AE400_29795* sub_3BDF0(axis_3d* position);
Type_AE400_29795* sub_3BE10(axis_3d* position);
Type_AE400_29795* sub_3BE30(axis_3d* position);
Type_AE400_29795* sub_3BE50(axis_3d* position);
Type_AE400_29795* sub_3BE70(axis_3d* position);
Type_AE400_29795* sub_3BE90(axis_3d* position);
Type_AE400_29795* sub_3BEB0(axis_3d* position);
Type_AE400_29795* sub_3BED0(axis_3d* position);
Type_AE400_29795* sub_3BEF0(axis_3d* position);
Type_AE400_29795* sub_3BF10(axis_3d* position);
Type_AE400_29795* sub_3BF30(axis_3d* position);
Type_AE400_29795* sub_3BF50(axis_3d* position);

int sub_3BF70(int a1, char a2, char a3, int a4, __int16 a5, char a6, char a7, int a8, __int16 a9);
int sub_3C040(int a1);
int sub_3C060(int a1);
int sub_3C090(int a1);
int sub_3C0C0(int a1);
int sub_3C0F0(int a1);
int sub_3C120(int a1);
int sub_3C150(int a1);
int sub_3C180(int a1);
int sub_3C1B0(int a1);
int sub_3C1E0(int a1);
int sub_3C210(int a1);
int sub_3C240(int a1);
int sub_3C270(int a1);
int sub_3C2A0(int a1);
int sub_3C2D0(int a1);
int sub_3C300(int a1);
int sub_3C330(int a1);
int sub_3C360(int a1);
int sub_3C390(int a1);
int sub_3C3C0(int a1);
int sub_3C3F0(int a1);
int sub_3C420(int a1);
int sub_3C450(int a1);
int sub_3C480(int a1);
int sub_3C4B0(int a1);
int sub_3C4E0(int a1);
int sub_3C510(int a1);
int sub_3C540(int a1);
void sub_3C570();
void sub_3C800_sub_3CB40();
void sub_3C9D0_3CD10();
void sub_3DC90(TypeStrAE400_13323* a1, char a2);
void sub_3DD10();
void sub_3DD50();
void LoadLevel_3E100(int level, void* buffer);
char sub_3E350(__int16 a1);
void sub_3E410_3E750(__int16 a1);
char sub_3E460(__int16 a1);
char sub_3E4B0(__int16 a1);
char sub_3E580(__int16 a1);
char sub_3E640(__int16 a1);
char sub_3E690_3E9D0(__int16 a1);
void sub_3E750_3EA90(__int16 a1);
char sub_3E7A0(__int16 a1);
char sub_3E7F0_3EB30(__int16 a1);
char sub_3E8C0_3EC00(__int16 a1);
char sub_3E980(__int16 a1);
void sub_3E9D0(char a1[10]);
_BYTE *sub_3EC50();
int access_3EC80_3EFC0(char* a1);
void CreateGameDir_3EC90_3EFD0(uint8_t diskChar, char* dir1, char* dir2);
int sub_3EEA0_3F1E0(char* path, uint8_t* buffer);
int sub_3EF20_3F260();
bool access_3EF30_3F270(char* a1);
char sub_3EF50_3F290(char *a1, char *a2, const char *a3);
void sub_3F1D0_3F510();
void sub_3F370_3F6B0();
void sub_3F398_3F6D8();
void sub_3F413(unsigned __int8 a1);
void sub_3F54D_3F88D(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
// void sub_3F587(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
unsigned __int8 sub_3F76D_3FAAD(int a1);
void InitDigijoy_3F7D0_3FB10(char* textBuffer);
void InitAnojoy_3F820_sub_3FB60(__int16 a2, int a3, int a4, int a5, char a6);
void sub_3FB30_3FE70(__int16 a1, __int16 a2, char* a3);
char sub_3FCA0_3FFE0(char a5, __int16 a6, __int16 a7, __int16 a8, __int16 a9, __int16 a10, __int16 a11);
void sub_40440_40780(Pathstruct* pathstruct);
void sub_40550();
void sub_407A0_40AE0();
void sub_408D0_40C10();
_BOOL1 sub_409E0(unsigned __int16 a1);
char sub_40A10(__int16 a1, __int16 a2, __int16 a3, char a4);
int sub_40D30(Type_AE400_29795* a1, __int16 a2, __int16 a3, __int16 a4, char a5);
int nullsub_3(_DWORD); // weak
int sub_40E20(unsigned __int16 a1, unsigned __int16 a2);
char sub_40EDC_4121C(_BYTE *a1, _BYTE *a2, char a3, char a4, char a5, __int16 a6, __int16 a7, __int16 a8);
__int16 sub_40F87_412C7(__int16 a1, __int16 a2);
unsigned int Distance_410CE_4140E(unsigned int a1);
void sub_41144(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4);
int sub_411D7_41517(void *a2, unsigned __int16 a3, char a4);
int sub_411FD_4153D(void *a2, unsigned __int16 a3, char a4);
void sub_41230_41570();
void sub_41490_417D0();
void sub_41540_41880();
unsigned __int16 sub_415C0_41900();
void sub_416B0();
void sub_41780_41AC0();
void sub_41B20(TypeStrAE400_13323* a1, Type_AE400_29795* a2);
int sub_41C70_41FB0(Type_AE400_29795* event, axis_3d* position);
// int sub_41CC0(__int16 a1, int a2, int a3);
void sub_41CF0_42030(Type_AE400_29795* event, axis_3d* position);
void sub_41DD0_42110(Type_AE400_29795* event);
void sub_41E80(Type_AE400_29795* event);
void sub_41E90_421D0(Type_AE400_29795* event);
void sub_41EC0_42200(axis_3d* a1, unsigned __int16 a2, __int16 a3, __int16 a4);
void sub_41F50_42290(axis_3d* pos1, axis_3d* pos2);
int sub_42000(axis_3d* a1, int a2, int a3, int a4, int a5);
int sub_42090(axis_3d* a1, int a2, int a3, int a4, int a5);
__int16 sub_42150_42490(axis_3d* a1, axis_3d* a2);
__int16 sub_42180(axis_3d* a1, axis_3d* a2);
int sub_42210(__int16 a1, __int16 a2);
int sub_42240(int a1, __int16 a2);
int sub_422A0(unsigned __int16 a1, __int16 a2, int a3, unsigned __int16 a4);
int sub_42300(_WORD *a1, _WORD *a2);
unsigned int sub_42340(axis_3d* a1, axis_3d* a2);
int sub_42390(_WORD *a1, _WORD *a2);
unsigned int sub_423D0_42710(axis_3d* a1, axis_3d* a2);
int sub_42410(_WORD *a1, _WORD *a2);
void sub_424F0(Type_AE400_29795* a1, unsigned __int8 a2);
int sub_42510(Type_AE400_29795* a1);
void sub_42530_42870(char a1);
void* malloc_42540_42880(size_t size);
void* malloc_425C0_42900(size_t size);
char sub_42650(int a1, int a2);
void free_426E0_42A20(void* buffer);
int sub_42730_42A70(int a1, int a2);
int sub_427A0(int a1, int a2);
int sub_42860(int a1);
void sub_428B0_42BF0();
int sub_42930(_BYTE *a1, char *a2, unsigned __int8 a3);
int sub_42A00_42D40(__int16 a1);
int sub_42C70_42FB0(__int16 a1);
int NetworkInit_42CF0_43030();
int sub_42D40(_BYTE *a1, char *a2);
int sub_42DE0(_BYTE *a1);
int sub_42E10(__int16 a1);
int sub_42F30(unsigned int a1, void *a2);
int sub_42FB0(unsigned int a1, char *a2, unsigned int a3);
int sub_43010(unsigned int a1, int a2, unsigned __int16 a3);
int sub_43080(unsigned int a1, const void *a2, unsigned int a3);
int sub_430F0(unsigned int a1, char *a2, unsigned int a3);
int sub_43150();
int sub_43170_434B0(__int16 a1);
int SetNetbios_431A0_434E0(myNCB* connection);
void InitNetwork_43270_435B0();
void sub_433C0_43700();
int sub_43430_43770(char *a1, __int16 a2);
int sub_43760(__int16 a1);
void sub_43870(unsigned __int16 a1, char *a2, unsigned int a3);
void sub_438D0(unsigned __int16 a1, char *a2, unsigned int a3);
void sub_43930(uint8* a1[8], unsigned int size);
void sub_43B20_sub_43E60(unsigned int a2);
char *sub_43E50(const char *a1);
void sub_43EC0_44200();
void sub_44470_447B0();
void sub_44700_44A40(char* a1, char** a2, int a3);
void sub_44730_44A70();
void sub_44840_44B80();
int sub_448E0_44C20();
void sub_44BE0(Type_AE400_29795* a1, char a2);
signed int sub_44C10(int a1);
void sub_44C90(Type_AE400_29795* event);
void sub_44D30(TypeStrAE400_13323* a1, Type_AE400_29795* event);
int sub_45410(Type_AE400_29795* a1);
void sub_455D0(Type_AE400_29795* a1);
void sub_45C10(Type_AE400_29795* a1);
void sub_45C90(Type_AE400_29795* a1);
int sub_45FC0(int a1);
void sub_463B0(int a1);
void sub_46480(int a1);
void sub_46520(Type_AE400_29795* a1);
int sub_46540(Type_AE400_29795* a1);
void sub_46840(Type_AE400_29795* a1);
void sub_46B00(Type_AE400_29795* a1, Type_AE400_29795* a2, int a3, int a4);
unsigned int sub_46CA0(int a1, int a2, int a3);
int sub_46D20(Type_AE400_29795* a1, __int16 a2);
__int16 sub_46DB0(int a1);
char sub_46F10(int a1);
int sub_47020(int a1);
int sub_47080(int a1);
int sub_470E0(int a1);
int sub_47130(int a1);
int sub_47400(int a1);
char sub_47960(int a1);
void sub_47A70(int a1);
int sub_47BD0(_DWORD *a1, int a2, int a3, int a4);
int sub_47C60(int a1);
void sub_47DD0(Type_AE400_29795* a1);
int sub_47EC0(int a1);
int sub_47F90(int a1);
int sub_481D0(int a1);
void sub_48230(Type_AE400_29795* a1);
int sub_48340(int a1);
void sub_483C0(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
void sub_48470(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
int sub_48520(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
bool sub_48570(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
char sub_48710_48A50(int a1, int a2, __int16 a3, __int16 a4, int a5, int a6, __int16 a7, int a8);
int DrawMinimap_49300_49640(int a1, int a2, int a3, int a4, int a5, int a6, __int16 a7, int a8, int a9, int a10);
void sub_49890(int a1);
int sub_499C0(int a1);
void sub_49A50(_WORD *a1);
int sub_49AA0(int a1);
int sub_49AD0(int a1);
int sub_49B50(int a1);
void sub_4A980_4ACC0();
void sub_4AB20_4AE60();
void sub_4AC70_4AFB0();
int sub_4B430();
int sub_4B480(int (*a1)(void), int a2);
int sub_4B520();
void sub_4B560_4B8A0();
char **sub_4B6A0();
void sub_4B6F0(char** texts);
void sub_4B8D0_4BC10(__int16 a1);
void sub_4BB20_4BE60();
void sub_4BC90_4BFD0();
void sub_4BD60();
int sub_4C580();
bool sub_4C640();
bool sub_4C670();
bool sub_4C6A0();
void sub_4C6F0_4CA30();
void sub_4C7E0();
void sub_4CAC0_4CE00();
void sub_4CB70();
void sub_4CC00(); // weak
int sub_4CCA0_4CFE0(int a1);
bool sub_4D0F0();
void sub_4D190();
void sub_4D300();
void sub_4D3B0();
void sub_4D560();
void sub_4D680();
char sub_4DCC0();
char sub_4E0E0();
void sub_4E270();
void sub_4E320();
void sub_4E3D0_4E710(unsigned __int8 a1);
void sub_4E470_4E7B0(unsigned __int8 a1);
void sub_4E510(unsigned __int8 a1);
int sub_4E5B0();
void sub_4EE70();
void sub_4EFC0_4F300();
void sub_4F120_4F460();
void sub_4F1E0();
void sub_4F3F0_4F730();
int sub_4F8D0_sub_4FC10(int a1, void (*a2)());
// int sub_4FD20(int a1);
void sub_4FE00();
// void sub_4FF30(int a1);
void sub_4FFE0();
void sub_50030();
void sub_50350();
void sub_503E0();
_BYTE *sub_50470();
int sub_504A0();
bool sub_505A0_508E0();
void sub_50770_50AB0();
bool sub_50D40(int a1, __int16 a2, __int16 a3, char *a4, char *a5, char a6, int a7, void (*a8)(void), char a9, int a10);
char *sub_512D0(char *a1, const char *a2);
int sub_51330(int a1, __int16 a2);
void sub_51360(int a1, int a2, int a3, int a4);
_DWORD *sub_513A0(_DWORD *a1);
void sub_513E0();
void sub_51400();
int sub_51420(_DWORD *a1, char *a2);
void sub_51480_517C0(Type_dword_96884* a1, TypeStrFont* a2, TColor* colorBuffer);
void DrawText_51560(_BYTE *a1, int a2, __int16 a3, char* text);
__int16 sub_51650(int a1, int a2, __int16 a3, int a4);
void sub_519E0_51D20(TypeStrFont* a1);
void sub_51A10();
int sub_51AF0(char a1);
int sub_51C90(char a1);
void sub_51DF0(char a1);
void sub_51E84(_BYTE *a1, _BYTE *a2, _BYTE *a3, int a4, char a5);
int sub_51ECC(int a1, int a2, int a3, int a4, char a5, char a6);
void sub_51FC0();
void sub_520F0(__int16 a1, __int16 a2, char a3, __int16 a4);
void sub_52120(__int16 a1, __int16 a2);
void sub_522E0();
void sub_52400(__int16 a1, __int16 a2, __int16 a3);
int sub_524C0(int a1);
int sub_524E0(int a1);
int sub_52500(_WORD *a1, int a2);
int sub_52550(int a1, int a2);
__int16 sub_52610(int a1, int a2);
char sub_526C0(int a1, unsigned int a2, unsigned int a3);
char sub_52770(int a1);
void sub_52B30(int a1);
char sub_52ED0(int a1);
char sub_53060(int a1);
char sub_53070(int a1);
char sub_530B0(int a1);
char sub_530C0(int a1);
char sub_534C0(int a1);
__int16 sub_535E0(unsigned int a1);
void sub_53980(int a1);
char sub_53B50(int a1);
char sub_53DC0(int a1);
void sub_54180(int a1);
void sub_54290(int a1);
char sub_542B0(int a1);
void sub_54480(int a1);
int sub_54520(int a1);
int sub_54A90(__int16 *a1, int a2, unsigned __int16 a3, unsigned __int16 a4);
int sub_54BD0(__int16 *a1, int a2, unsigned __int16 a3, unsigned __int16 a4);
void sub_54F00();
int sub_54F80(int a1);
void sub_55100_55630();
void sub_55370_558A0(__int16 a1, __int16 a2, __int16 a3);
bool sub_55870(int a1, int a2);
void sub_55890(int a1, __int16 a2, __int16 a3);
int sub_558F0();
int sub_55960();
int sub_559A0();
int sub_55A40(Type_AE400_29795* a1x, char a2, char a3);
void sub_55D30(Type_AE400_29795* a1x);
int sub_55DB0(Type_AE400_29795* a1x);
int sub_55DD0(int a1, int *a2);
int sub_55E80(int a1, int a2);
// int sub_55EF0(__int16 a1, int a2, int a3);
int sub_56090(int a1);
void sub_56270(int a1);
void sub_56380(int a1);
int sub_56510(int a1);
int sub_566C0(int a1);
void sub_56730(int a1);
int sub_567A0(int a1);
int sub_56950(int a1);
int sub_56AF0(int a1);
int sub_56CA0(int a1);
void sub_56E50(int a1);
int sub_57040(int a1);
void sub_571B0(int a1);
int sub_57250(int a1);
int sub_573F0(int a1);
int sub_57470(int a1);
void sub_57610(int a1);
void sub_57800(int a1);
int sub_579D0(int a1);
int sub_57B80(int a1);
int sub_57D40(int a1);
void sub_57F00(int a1);
int sub_580A0(int a1);
int sub_58240(int a1);
void DrawBitmap_58768_58C78(__int16 a1, __int16 a2, TypeTab* a3, unsigned __int8 a4);
void sub_587E0_58CF0();
int sub_58860_58D70(unsigned __int16 a1, uint8_t* a2);
char sub_58910_58E20(unsigned __int16 a1);
char sub_58A00_58F10(unsigned __int16 a1);
int GetSumaSpriteSizes_58AD0_58FE0(unsigned __int16 a1);
void sub_58B30_59040(unsigned __int16 a1);
int GetAllSumaSpriteSizes_58C30_59140(unsigned int a1);
void sub_58E70_59380();
void sub_58F00_59410();
void sub_58F70_59480();
void sub_58F90_594A0();
bool sub_59050_59560(unsigned __int16 a1);
void sub_590D0_595E0();
void sub_59140_59650();
void sub_59160(unsigned __int16 a1, unsigned __int16 a2, signed __int16 a3);
void sub_591E0(unsigned __int16 a1);
char sub_59230();
void sub_59320_59830();
void sub_59370_59880();
void sub_593B0_598C0();
void sub_59420_59930();
void sub_59500_59A10(Type_99974* a1);
void sub_59560_59A70(Type_99974* a1);
void sub_59720_59C30();
void sub_59750(int16 a1, int16 a2);
void Blit_599B0_59EC0(__int16 a1);
void sub_59A80(uint16_t* a1);
void sub_59AB0(uint16_t* a1);
void sub_59AE0(uint16_t* a1);
void sub_59B30(uint16_t* a1);
int sub_59B80(uint16_t* a1);
void sub_59C40(uint16_t* a1);
int sub_59C70(uint16_t* a1);
void sub_59CA0(uint16_t* a1);
void sub_59CF0(uint16_t* a1);
void sub_59D40(uint16_t* a1);
int sub_59D70(uint16_t* a1);
void sub_59DA0(uint16_t* a1);
void sub_59DF0(uint16_t* a1);
void sub_59E40(int a1, int a2);
void sub_59F60(uint16_t* a1);
void sub_59F70(uint16_t* a1);
void sub_59F80(uint16_t* a1);
void sub_59F90(uint16_t* a1);
void sub_59FA0(uint16_t* a1);
void sub_59FB0(uint16_t* a1);
void sub_59FC0(uint16_t* a1);
void sub_59FD0(uint16_t* a1);
void sub_59FE0(uint16_t* a1);
void sub_59FF0(uint16_t* a1);
void sub_5A000(uint16_t* a1);
void sub_5A010(uint16_t* a1);
void sub_5A020(uint16_t* a1);
void sub_5A030(uint16_t* a1);
void sub_5A040(uint16_t* a1);
void sub_5A050(uint16_t* a1);
void sub_5A060(uint16_t* a1);
void sub_5A070(uint16_t* a1);
int sub_5A080(uint16_t* a1);
int sub_5A090(int a1, int a2);
int sub_5A120(int a1, int a2);
void DrawText_5A180_5A690(char* text, int posX, int posY, uint8 color);
__int16 GetLetterX_5A3A0_5A8B0();
__int16 GetLetterY_5A3B0_5A8C0();
void sub_5A3C0_5A8D0(int fontIndex);
// void sub_5A3E3(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
void sub_5A459_5A969();
void sub_5A4EA_5A9FA();
void sub_5A560_5AA70();
void DrawStartGameTexts_5ACA0_5B1B0();
void DrawTextLine_5AD10_5B220(char* text);
int sub_5AD30_5B240();
int sub_5ADB0_5B2C0(int a1, int32_t* a2, char* a3);
int sub_5AE30_5B340(int a1, char *a2);
int sub_5AEB0_5B3C0(int a1, int32_t* a2, char* a3);
int InitVfx_5AF50_5B460();
int sub_5B210();
int sub_5B2B0();
unsigned __int8 sub_5B310_5B820(int a1, unsigned __int8 *a2);
int sub_5B3B0_5B8C0();
int sub_5B3E0(int a1);
int sub_5B450(__int16 a1);
int sub_5B480_5B990(int a1, int16_t* a2, int16_t* a3);
void ClearScr_5B500_5BA10();
void ClearScr_5B560();
int nullsub_11(_DWORD); // weak
void sub_5B5E0();
void sub_5B5F4_5BB04();
void sub_5B650_5BB60();
void sub_5B95C_5BE6C();
void sub_5BB60_5C070();
int sub_5BD40();
void sub_5BDF8_5C308();
void sub_5BE50_5C360();
void sub_5C05C_5C56C(TypeTab* a1);
int sub_5C214_5C724();
void ResizeScr_5C468_5C978();
__int16 sub_5C76B();
__int16 sub_5C82E();
int sub_5C891();
int sub_5C8AF();
int sub_5C8CD();
void sub_5C8F4();
__int16 sub_5C969();
int sub_5CA40();
char sub_5CAE7();
void sub_5CB73(int a1, __int16 a2);
// _DWORD printf(const char *, ...); weak
// _DWORD memset(_DWORD, _DWORD, _DWORD); weak
void WaitForBeam_5CC54_5D164();
uint8_t sub_5CC70_5D180(TColor* colors, uint8_t colR, uint8_t colG, uint8_t colB);
int sub_5CD70_5D280();
void Blit_5CDA0_5D2B0();
// _DWORD dos_getdrive(_DWORD); weak
// _DWORD dos_getdiskfree(_DWORD, _DWORD); weak
int sub_5CEF0_5D400(unsigned __int16 a1);
unsigned int sub_5CFA4();
void sub_5D010_5D520();
int sub_5D070_5D580(unsigned __int8 a1);
unsigned int sub_5D138();
int sub_5D1A0(int a1, int a2, unsigned int a3);
int sub_5D230(int a1, int a2, int a3);
void sub_5D290_5D7A0(__int16 a1);
void sub_5D460(__int16 a1, __int16 a2, __int16 a3);
void sub_5D610(__int16 a1, __int16 a2);
void sub_5D750(__int16 a1, __int16 a2);
void sub_5D7DF();
bool sub_5D7F0(int a1);
void sub_5D829();
// int rand(void); weak
void sub_5D872();
int sub_5D883_5DD93(unsigned int a2, char a3);
int sub_5D948();
int sub_5D97B(unsigned int a1, int a2, __int16 a3, unsigned int a4);
int sub_5DB1D(unsigned int a1, unsigned int a2);
int sub_5DC91(int a1);
int sub_5DE40(int a1);
int sub_5DE63(int a1);
int sub_5DE91(int a1, int a2, int a3);
int sub_5DF4B(int a1, int a2, int a3);
void sub_5DF61();
void sub_5DF72();
int sub_5DF83(int a1, unsigned int a2, unsigned __int16 a3, int a4, int a5);
int sub_5E9C1(int a1);
int sub_5EDA0(int a1, int a2, unsigned __int16 a3, int a4);
int sub_5EDD6(int a1);
void sub_5EE00();
void sub_5EE11();
int sub_5EE22(unsigned int a1, int a2, int a3, __int16 a4, unsigned int a5);
int sub_5F355(unsigned int a1);
int sub_5F398(int a1);
int sub_5F420(unsigned int a1);
int sub_5F529(int a1, unsigned int a2);
int sub_5F7C7(unsigned int a1, int a2, unsigned int a3);
int sub_5F83E(char a1);
void sub_5F913();
void sub_5F924();
void sub_5F935();
void sub_5FD67();
int sub_60199(int a1, unsigned __int16 a2);
int sub_60335();
int sub_6035F(unsigned int a1, unsigned int a2, int a3, int a4, int a5, unsigned int a6);
int sub_6080C(unsigned int a1, int a2);
int sub_6091D(int a1);
void sub_609F4();
unsigned __int64 sub_60BDC(int a1);
// _DWORD sprintf(_DWORD, _DWORD, ...); weak
void DrawBitmap_60CE0_611F0(__int16 a1, __int16 a2, TypeTab* a3);
void DrawBitmap_60D18_61228(__int16 a1, __int16 a2, TypeTab* a3);
void sub_60D50_61260(TypeTabDimm a1, int a2, int a3, uint8_t* sprite, unsigned __int8 a5, char a6);
void DrawBitmap_60D65_61275(TypeTabDimm a1, int a2, int a3, uint8_t* sprite, unsigned __int8 a5, char a6);
int sub_61594(unsigned __int16 a1, unsigned __int16 a2, __int16 a3);
int sub_615D4(unsigned __int16 a1, unsigned __int16 a2, __int16 a3);
void sub_61610_61B20(Pathstruct* pathstruct);
void sub_61640(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4, unsigned __int16 a5);
void sub_616C0(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3, __int16 a4, unsigned __int16 a5);
int sub_61740(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5);
int sub_61810(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5);
int sub_618E0(__int16 a1);
int sub_619B8_61EC8(__int16 a1);
void sub_61A1C_61F2C(__int16 a1);
int sub_61AB0_61FC0();
void sub_61B90_620A0(TColor* a1);
void sub_61C30_62140(TColor* a1);
void FadeInOut_61CC0_621D0(TColor* palette, unsigned __int8 a2, char a3);
void sub_61EC8();
// _DWORD stricmp(_DWORD, _DWORD); weak
// _DWORD StrToInt(_DWORD); weak
void sub_61F90();
void sub_62020();
void free_62128_62638(void* buffer);
// void exit(int status); idb
// _DWORD inp(_DWORD); weak
// _DWORD outp(_DWORD, char); weak
// _DWORD chain_intr(_DWORD); weak
// _DWORD dos_getvect(_DWORD); weak
// _DWORD dos_setvect(_DWORD, _DWORD, _DWORD); weak
// __int64 fopen(_DWORD, _DWORD); weak
// _DWORD fprintf(_DWORD, _DWORD, ...); weak
// _DWORD fclose(_DWORD); weak
// _DWORD fscanf(_DWORD, _DWORD, ...); weak
// _DWORD getenv(_DWORD); weak
// _DWORD sscanf(_DWORD, _DWORD, ...); weak
// _DWORD DataFileIO::FileLengthBytes(_DWORD); weak
//int DataFileIO::Seek(int a1, int a2, char a3);
int RncUnpack_62B60_63070(uint8_t* input, uint8_t* output);
uint32 sub_62CF4_63204(uint8_t** a1);
__int16 HufRead_62CFD_6320D(uint16* a0, __int16 *a1, uint8_t** a2);
__int16 BitRead_62D40_63250(uint16* a0, uint8 a1, uint8** a2);
void ReadHuftable_62DC3_632D3(uint16* a0x, __int16* a0, uint8_t** a1);
void sub_62E60_63370(char* name, uint8* buffer, int size);
size_t FileWrite_62ED0_633E0(FILE* descriptor, uint8_t* buffer, uint32_t count);
// _DWORD access(_DWORD, _DWORD); weak
// _DWORD mkdir(_DWORD); weak
// _DWORD int386(_DWORD, _DWORD, _DWORD); weak
void CopyScreen_62FA8_634B8(uint8_t* src, uint8_t* dst, size_t size);
void CopyScreen_62FC4_634D4(uint8_t* src, uint8_t* dst, size_t size);
int sub_62FF0(int a1);
void sub_63010_63520();
void sub_63338_63848();
int sub_6342C_6393C(unsigned int a1);
void sub_634A0_639B0(Pathstruct* pathstruct);
int sub_634E0_639F0(Pathstruct* pathstruct);
// _DWORD gets(_DWORD); weak
// _DWORD segread(_DWORD); weak
// _DWORD int386x(_DWORD, _DWORD, _DWORD, _DWORD); weak
// _DWORD system(_DWORD); weak
void sub_6377B();
char *sub_6378C(int a1);
void sub_637AF();
void sub_637C0();
int sub_637D1(int a1, int a2, unsigned __int16 a3, int a4);
int sub_638E0(int a1, int a2, int a3);
void sub_638F8();
int GetRNCFilesize_63910_63E20(Pathstruct* pathstruct);
// _DWORD strcmp(_DWORD, _DWORD); weak
void sub_63A8C();
int sub_63A9D_63FAD(int a3, __int16 a4);
int sub_63C06();
// int sub_63C5A_6416A(const void *a1, unsigned int a2, char *a3, __int16 a4, unsigned int a5);
int sub_64248(unsigned int a1, __int16 a2);
void sub_64414();
void sub_64425();
void sub_64436();
void sub_645FB();
int sub_647C0(int a1, unsigned __int16 a2);
int sub_6481C();
// int sub_64846_64D56(int a1, int a2, unsigned int a3, unsigned int a4, int a5, unsigned int a6, int a7, unsigned int a8);
int sub_64F78(unsigned int a1, int a2, int a3);
int sub_650FF_6560F(__int16 a1, int a2, unsigned int a3, _DWORD *a4);
void sub_651D6();
void sub_651E7();
bool sub_651F8(int a1, int a2);
void sub_6533A();
void sub_6534B();
int sub_6535C(int a1, unsigned int a2);
int sub_65965(int a1, int a2);
void sub_65D57();
void sub_65D70_66280(TypeTab* a1, TypeTab* a2, uint8_t* a3);
void sub_65DC0_662D0(TypeTab* a1, TypeTab* a2, uint8_t* a3);
void sub_65E00();
// _DWORD strncmp(_DWORD, _DWORD, _DWORD); weak
void ViewportResize_65EB0_663C0(__int16 a1, __int16 a2, __int16 a3, __int16 a4);
void sub_65F10(__int16 a1, __int16 a2);
// _DWORD memmove(_DWORD, _DWORD, _DWORD); weak
void sub_66107();
int sub_66118(int a1, int a2, unsigned __int16 a3);
int sub_661A4(int a1, int a2);
void sub_6623A();
void sub_66250(__int16 a1, __int16 a2, unsigned __int16 a3);
void sub_66313();
int sub_66324(int a1);
void sub_6637C();
void sub_66390(TypeTab* a1, TypeTab* a2, uint8_t* a3);
void sub_66410(TypeTab* a1, TypeTab* a2, uint8_t* a3);
int sub_664AB_669BB(char* vipEnv, char** a2, int a3, int a4);
int sub_6660D_66B1D(char* vipEnv, char** a2, int a3);
int sub_66612(unsigned __int8 a1);
__int16 sub_6666C(__int16 result);
// _DWORD open(_DWORD, _DWORD);
// _DWORD sopen(_DWORD, _DWORD, char);
// _DWORD close(_DWORD); weak
// _DWORD read(_DWORD, _DWORD, _DWORD); weak
// _DWORD creat(_DWORD, _DWORD); weak
// _DWORD setmode(_DWORD, _DWORD); weak
// _DWORD _set_errno(_DWORD); weak
void sub_66CAD(); // weak
unsigned __int8 sub_66D24(__int16 a1);
// unsigned __int8 sub_66D6A_6727A(int a1, __int16 a2, int a3, __int16 a4);
unsigned __int8 sub_66DF5();
unsigned __int8 sub_66E21();
unsigned __int8 sub_66E4D();
int sub_66EA2();
void sub_66EE5();
unsigned __int64 sub_66EF6(unsigned int a1, __int16 a2);
void sub_66F1A();
void sub_66F2B();
int sub_66F3C();
void sub_67464();
void sub_67475();
bool sub_67486(int a1);
void sub_674B9();
void sub_674CD();
void sub_674FA();
void sub_67527(int a1, int a2, __int16 a3);
int sub_67557_67A67(__int16 a1, int a2, int a3);
int sub_67582();
__int16 sub_675C8(int a1, _DWORD *a2);
int sub_6765C_67B6C(const void *a1, int (*a2)(_DWORD), char a3, __int16 a4, char *a5, __int16 a6);
// int sub_676B0(int a1, int (*a2)(_DWORD), char a3, __int16 a4, int a5, __int16 a6);
int sub_676E5(int (*a1)(_DWORD));
int sub_67710(int (*a1)(_DWORD));
__int16 sub_6773B(int (*a1)(_DWORD));
int sub_67780(int (*a1)(_DWORD));
int sub_677B8(int (*a1)(_DWORD));
__int16 sub_677E3_67CF3(int a1, void (*a2)(_DWORD), char a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int sub_67845(int (*a1)(_DWORD));
int sub_6787E(int (*a1)(_DWORD));
int sub_678AF(int (*a1)(_DWORD));
int sub_678DE(int (*a1)(_DWORD));
__int16 sub_6790D();
__int16 sub_67944();
void sub_6797C();
int *sub_6798D();
int sub_679AE(int a1, unsigned __int16 a2, int a3, int a4);
int sub_679DE();
int sub_679F7();
int sub_67A10();
int sub_67A29(int (*a1)(_DWORD, _DWORD, _DWORD, _DWORD), __int16 a2);
void sub_67A53();
void sub_67A64();
int *sub_67A75();
int sub_67A96(unsigned int a1, int a2, int a3, int a4);
// int sub_67D9D(int a1, int a2, unsigned int a3, int a4, int a5);
int sub_67F1C(int a1, int a2, int a3);
int sub_67F9A();
int sub_67FB3(int a1, __int16 a2, int a3, int a4);
int sub_6813F(int a1, int a2, int a3);
void sub_6815E();
void sub_6816F();
int sub_68180(int a1, int a2);
void sub_681F6();
int sub_68207(int a1, int a2, __int16 a3);
int sub_682CB(int a1);
int sub_68365(int a1, int a2);
int sub_68491(int a1, int a2);
void sub_68600();
void sub_68611();
int sub_68622_68B32(__int16 a1, int a2, unsigned int a3, unsigned int a4, int *a5, unsigned int a6);
int sub_68813(unsigned int a1);
void sub_6887D();
void sub_6888E();
void sub_688F5();
void sub_68906();
void sub_689D1();
void sub_689E2();
int *sub_689F3();
// int sub_68A14(int a1, int a2, int a3, unsigned int a4);
int sub_68BDA(int a1, int a2, int a3, __int16 a4);
int sub_68C4B();
int sub_68C69();
int sub_68C82();
void sub_68C9B();
void sub_68CAC();
char sub_68CBD(int a1, int a2, unsigned int a3);
unsigned int sub_68D7F(unsigned int a1, int a2, int a3);
void sub_68F15();
void sub_68F26();
char sub_68F37(int a1, int a2, unsigned int a3);
void sub_6905C();
void sub_6906D();
void sub_6907E(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3);
void sub_6954C();
void sub_6955D();
char sub_6956E(int a1, int a2, unsigned int a3);
int sub_6966D(unsigned int a1);
int sub_69716(unsigned int a1);
void sub_6979E();
void sub_697AF();
void sub_697C0(int a1, int a2, unsigned int a3);
void sub_6999B();
void sub_699AC();
char sub_699BD();
void sub_69A83();
void sub_69A94();
int sub_69AA5(int a1, int a2, int a3, __int16 a4);
int sub_69BFE(int a1);
void sub_69DFE();
void sub_69E0F();
char sub_69E20();
void sub_69E63();
void sub_69E74();
char sub_69E85(int a1, int a2, unsigned int a3);
void sub_69ECB();
void sub_69EDC();
int sub_69EED(unsigned int a1, __int16 a2, int a3, int a4);
int sub_69F1C(int a1, int a2, int a3, int a4);
int sub_69F57();
int sub_69F75();
int sub_69F93(int a1, __int16 a2, int a3, int a4);
void sub_69FC2();
void sub_69FD3();
char sub_69FE4(unsigned int a1);
void sub_6A063();
void sub_6A074();
char sub_6A085(unsigned __int8 a1, __int16 a2);
void sub_6A0F9();
void sub_6A10A();
char sub_6A11B();
void sub_6A1B3();
void sub_6A1C4();
char sub_6A1D5(unsigned __int8 a1, __int16 a2);
void sub_6A275();
void sub_6A286();
char sub_6A297(unsigned __int8 a1);
void sub_6A2F5();
void sub_6A306();
char sub_6A317();
void sub_6A3E3();
void sub_6A3F4();
char sub_6A405(int a1, int a2, unsigned __int8 a3);
void sub_6A5EC();
void sub_6A5FD();
char sub_6A60E();
void sub_6A62D();
unsigned __int8 sub_6A640(unsigned __int8 a1, unsigned __int8 a2);
// _DWORD fstrcpy(_DWORD, _DWORD, _DWORD, _DWORD); weak
__int16 sub_6A737(void (*a1)(_DWORD), unsigned int a2, int a3, int a4, __int16 a5);
int sub_6B260(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6);
int sub_6B378(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6);
void sub_6B47C_6B98C(TColor* palette);
// _DWORD tolower(_DWORD); weak
int sub_6B87A();
// _DWORD lseek(_DWORD, _DWORD, char); weak
// _DWORD free(_DWORD); weak
int sub_6BCA3(int a1, unsigned __int8 *a2, int *a3);
unsigned __int8 *sub_6BEBB(unsigned __int8 *a1, int a2);
int sub_6BF98(int a1);
int sub_6BFCF_6C4DF(_WORD *a1, int a2, int *a3);
void sub_6C05C_6C56C(_BYTE *a1, int a2, int *a3);
int *sub_6C175(int a1, int *a2, int a3);
_BYTE *sub_6C1E0(_BYTE *a1, int a2);
void sub_6C224_6C734(_BYTE *a1, int a2, int *a3, _BYTE **a4);
void sub_6C32A(int a1, int *a2);
void sub_6C66D(int a1, int *a2, int a3, int a4);
int sub_6C896(int a1);
int sub_6C8C5(int a1);
// _DWORD write(_DWORD, _DWORD, _DWORD); weak
// _DWORD malloc(_DWORD); weak
// _DWORD expand(_DWORD, _DWORD); weak
// _DWORD qsort(_DWORD, _DWORD, _DWORD, _DWORD); weak
int sub_6D35C_6D86C(unsigned __int16 a1);
int sub_6D5EC(int a1, int a2);
// _DWORD strcpy(_DWORD, _DWORD); weak
// _DWORD strcat(_DWORD, _DWORD); weak
void sub_6DD6C();
int sub_6DD7D(int a1, int a2, __int16 a3);
void sub_6DE12();
void sub_6DE23();
int sub_6DE34_6E344(__int16 a1, int a2, unsigned int a3, unsigned int a4, int *a5, unsigned int a6);
int sub_6E030(unsigned int a1);
int sub_6E09A_6E5AA(__int16 a1, int a2, unsigned int a3, int *a4, unsigned int a5);
int sub_6E23C(int a1, __int16 a2);
void sub_6E295();
void sub_6E2A6();
void sub_6E33D();
void sub_6E34E();
void sub_6E3B9();
void *sub_6E5A0();
void *sub_6E5A6();
int sub_6E5B2();
unsigned int __stdcall sub_6E65B(unsigned __int16 a1, unsigned __int16 a2);
int __stdcall sub_6E6BF(unsigned __int16 a1);
void __stdcall sub_6E727(unsigned __int16 a1, unsigned __int16 a2);
int __stdcall sub_6E7A0(unsigned __int16 a1);
void __stdcall sub_6E822(int a1, __int16 a2, __int16 a3);
int __stdcall sub_6E976(unsigned __int16 a1, unsigned __int16 a2);
int __stdcall sub_6E9A4(int a1, unsigned __int16 a2, unsigned __int16 a3);
int __stdcall sub_6EA0F(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4);
int __stdcall sub_6ED47(unsigned __int16 a1);
int __stdcall sub_6ED75(__int16 a1);
int sub_6EDD0(int a1, int a2, int a3, int a4, unsigned __int16 a5, int a6, int a7);
void __stdcall sub_6F3B3(int a1, __int16 a2, unsigned __int16 a3);
void sub_6F4CB(int a1, int a2, int a3, int a4, unsigned __int16 a5, unsigned __int16 a6, unsigned __int16 a7);
void __stdcall sub_6F502(__int16 a1, unsigned __int16 a2);
void __stdcall sub_6F536(__int16 a1, unsigned __int16 a2);
void __stdcall sub_6F55F(__int16 a1, unsigned __int16 a2);
void __stdcall sub_6F588(char a1, unsigned __int16 a2);
int __stdcall sub_6F5A8(unsigned __int8 a1, unsigned __int16 a2);
int __stdcall sub_6F6AF(char a1, unsigned __int16 a2);
int __stdcall sub_6F6D8(unsigned __int16 a1, unsigned __int16 a2);
void __stdcall sub_6F77A(unsigned __int16 a1, unsigned __int16 a2);
int __stdcall sub_6F824(unsigned __int8 a1, unsigned __int16 a2);
void __stdcall sub_6F850(int a1, unsigned __int16 a2);
int __stdcall sub_6F872(__int16 a1, unsigned __int16 a2);
int __stdcall sub_6F8F1(__int16 a1, unsigned __int16 a2);
void __stdcall sub_6F963(int a1, __int16 a2);
void __stdcall sub_6F9F9(int a1, __int16 a2);
int __stdcall sub_6FA53(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3);
void __stdcall sub_6FC44(unsigned __int16 a1, __int16 a2);
void __stdcall sub_6FDA4(int a1, int a2, int a3);
void __stdcall sub_6FDAC(unsigned __int16 a1, __int16 a2);
int __stdcall sub_6FDEC(unsigned __int8 a1, unsigned __int8 a2, __int16 a3);
int __stdcall sub_6FEBF(unsigned __int16 a1);
int __stdcall sub_6FF53(unsigned __int16 a1);
char __stdcall sub_70044(__int16 a1);
_BOOL1 sub_7008A();
unsigned int __stdcall sub_70113(__int16 a1);
unsigned int sub_70148();
void sub_7024E();
unsigned int sub_702F6();
void sub_706CC();
void sub_70812();
int sub_70AA0();
int sub_70B3E();
char sub_70B8B(unsigned int a1, unsigned __int8 a2);
unsigned __int8 sub_70D55(unsigned __int8 a1);
int sub_70E1C(int a1, int a2, unsigned int a3);
char *sub_71012();
void sub_7101B();
// int _FDFS(void); weak
void sub_71524();
int sub_71B53();
void sub_71BC9(int a1, const void *a2, void *a3);
int sub_724C0_729D0(uint16_t a1, uint16_t a2);
void sub_725C8(__int16 a1, unsigned __int16 a2, __int16 a3);
void sub_72652_72B62(__int16 a1, uint16_t* a2, int a3, uint16_t* a4);
void sub_726E7_72BF7(__int16 a1, uint16_t* a2, int a3, uint16_t* a4);
char sub_72807_72D17(unsigned __int8 *a1, _BYTE *a2);
void DrawTriangle_729A3_72EB3_old(_DWORD* a1, _DWORD* a2, _DWORD* a3);
void DrawTriangle_729A3_72EB3(Type_RenderPoint* pnt1, Type_RenderPoint* pnt2, Type_RenderPoint* pnt3);
void SetViewPort2_79495_799A5(uint8* a1, uint8* a2, int a3, int a4, int a5);
void sub_79906(uint16 a1[2][256]);
void sub_79A1B(uint16 a1[2][256]);
void sub_79A70_79F80(uint8* a2, uint8* a3, uint16 a6[2][256], int scrSize);//24AA70
int sub_79A70_79F80(int result, _BYTE *a2, _BYTE *a3, /*int a4, int a5,*/ uint16 a6[2][256]);
void sub_79B2D();
// int gettextposition(_DWORD); weak
// _DWORD settextposition(_DWORD, _DWORD); weak
// _DWORD outtext(_DWORD); weak
int sub_7B444();

//-------------------------------------------------------------------------
// Data declarations

//_UNKNOWN loc_10080; // weak
_UNKNOWN loc_13880; // weak
_UNKNOWN loc_1FFFE; // weak
_UNKNOWN loc_270FA; // weak
_UNKNOWN loc_27FFC; // weak
_UNKNOWN loc_2809F; // weak
_UNKNOWN loc_2F945; // weak
_UNKNOWN loc_30D40; // weak
char byte_385D3[] = { '\x80' }; // weak
char byte_385D7[] = { '\0' }; // weak
char algn_385D8[8] = { '\x8D', '\x92', '\0', '\0', '\0', '\0', '\x8B', '\xC0' }; // weak
/*char byte_385E3[28] =
{
  '\xFF',
  '\xFF',
  '\x89',
  '\xC3',
  '\x89',
  '\x04',
  '$',
  '\x85',
  '\xC0',
  '\x0F',
  '\x84',
  '\x9E',
  '\0',
  '\0',
  '\0',
  '\xB9',
  ')',
  '\0',
  '\0',
  '\0',
  '\x89',
  '\xC7',
  '\x89',
  '\xEE',
  '\xF3',
  '\xA5',
  '\x8B',
  '\r'
}; // weak*/
//char byte_38647[] = { '\xC1' }; // weak
/* 0x38647 230983
0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFA,0x00,
0x00,0x00,0x00,0xBA,0x02,0x00,0xFF,0xFF,0x0A,0x00,0x00,0x00,0x78,0x8F,0x97,0x1B,
0x00,0x0C,0x96,0x00,0xB1,0x00,0xB1,0x00,0x96,0x00,0x53,0x00,0x00,0x01,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x38,0x6F,0x25,0x00,0x30,0x53,0x27,0x00,0x00,0x00,0x00,0x00,0xF7,0x3D,0x82,0xA5,
*/
char byte_38C93[] = { '\0' }; // weak
char byte_38C95[] = { '\0' }; // weak
char byte_38C97[8] = { 'S', '\x04', 'f', '\x89', 'C', '~', 'i', '\xC2' }; // 232599
int dword_38C9F = 9377; // weak
int dword_38CA3[] = { 2416389 }; // weak
//__int16 word_38D03 = 21642; // weak
//int dword_38D05 = -695727103; // weak
//_UNKNOWN loc_3FFFE; // weak
_UNKNOWN loc_40000; // weak
uint16 bitSqrt_41104[224] = { 
0x0001,0x0002,0x0002,0x0004,0x0005,0x0008,0x000B,0x0010,
0x0016,0x0020,0x002D,0x0040,0x005A,0x0080,0x00B5,0x0100,
0x016A,0x0200,0x02D4,0x0400,0x05A8,0x0800,0x0B50,0x1000,
0x16A0,0x2000,0x2D41,0x4000,0x5A82,0x8000,0xB504,0xFFFF,
0x8B55,0x50EC,0x5251,0xBA66,0x03C8,0x0F66,0x45B6,0xEE08,
0xC9B2,0x458A,0xEE0C,0x458A,0xEE10,0x458A,0xEE14,0x595A,
0xC958,0x55C3,0xEC8B,0x5350,0x5251,0x5756,0x7D8B,0x8A08,
0x0C45,0x658A,0xC10C,0x10E0,0x458A,0x8A0C,0x0C65,0x4D8B,
0x8B10,0x83D9,0x03E3,0xE9C1,0x8302,0x00F9,0x0B74,0xABF3,
0xFB83,0x7400,0x8B04,0xF3CB,0x5FAA,0x5A5E,0x5B59,0xC958,
0x55C3,0xEC8B,0x5350,0x5251,0x5756,0x758B,0x8B0C,0x087D,
0x4D8B,0x8B10,0x83D9,0x03E3,0xE9C1,0x8302,0x00F9,0x0B74,
0xA5F3,0xFB83,0x7400,0x8B04,0xF3CB,0x5FA4,0x5A5E,0x5B59,
0xC958,0x55C3,0xEC8B,0x5157,0x8B50,0x087D,0xB70F,0x0C4D,
0xC96B,0x8A50,0x1045,0x658A,0xC110,0x10E0,0x458A,0x8A10,
0x1065,0xABF3,0x5958,0xC95F,0x55C3,0xEC8B,0x5157,0x8B50,
0x087D,0xB70F,0x0C4D,0xC969,0x00A0,0x0000,0x458A,0x8A10,
0x1065,0xE0C1,0x8A10,0x1045,0x658A,0xF310,0x58AB,0x5F59,
0xC3C9,0x0000,0x0000,0x0000,0x0000,0x0000,0x5753,0x8355,
0x28EC,0x08A1,0x26C4,0x8300,0xA8B8,0x0000,0x0000,0x850F,
0x0240,0x0000,0x6068,0x00EA,0xE800,0x12EE,0x0000,0xC483,
0xB204,0x8901,0x2404,0x00A1,0x26C4,0x8B00,0xAC1D,0x2EF4,
0x8800,0xF015,0x2548,0xC600,0xA080,0x0021,0x2000,0xFB81,
0x0000,0x0080,0x1A76,0x08A1,0x26C4,0x8800,0xEC15,0x2519,
0xC700,0xAC80,0x0000,0x0000,0x4000,0xE900,0x0173,0x0000,
0xFB81,0x0000,0x0070,0x1E76,0x938D,0x2450,0xFFCC,0x08A1,
0x26C4,0xB700,0x8901,0xAC90,0x0000,0x8800,0xEC3D,0x2519,
0xE900,0x014D,0x0000,0x938D,0x6690,0xFFDB,0xFB81,0x0000
};
_UNKNOWN locret_455C0; // weak
typedef struct {
    void (*fnc)();
    uint16_t var;
} TypeVoidF;
TypeVoidF dword_4A12C[] = {
{nullptr,0},
{sub_4FF30,0},
{sub_50030,0},
{sub_4FEB0,0},
{sub_4FD20,0},
{nullptr,1},
{nullptr,2},
{nullptr,3},
{nullptr,4},
{nullptr,5},
{nullptr,6}
};
/*
__int16 word_4A130[] = {
0x0000,0x0F30,0x0022,
0x0000,0x1030,0x0022,
0x0000,0x0EB0,0x0022,
0x0000,0x0D20,0x0022,
0x0000,0x0000,0x0000
}; //fix it!!!*/
int dword_4A17C[6] = { 21037056, -16777216, 255, 1912602624, 138477568, 0 }; // weak
int dword_4A1C0[2] = { 172032000, 0 }; // weak
int dword_4A1E4[2] = { 172032000, 0 }; // weak

uint8_t dword_4A1FC[] = {
0x00, 0x00, 0x4F, 0x05, 0x00, 0x00, 0x00,
0x00, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x42, 0x01, 0x00, 0x00, 0x00,
0x01, 0x00, 0x4D, 0x01, 0x00, 0x00, 0x00,
0x01, 0x00, 0x41, 0x2C, 0x01, 0x00, 0x00,
0x04, 0x00, 0x41, 0x0A, 0x00, 0x00, 0x00,
0x14, 0x00, 0x53, 0x01, 0x00, 0x00, 0x00,
0x14, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00,
0x36, 0x00, 0x41, 0x90, 0x01, 0x00, 0x00,
0x37, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0x38, 0x00, 0x53, 0x02, 0x00, 0x00, 0x00,
0x38, 0x00, 0x51, 0x01, 0x00, 0x00, 0x00,
0x41, 0x00, 0x41, 0x5A, 0x00, 0x00, 0x00,
0x42, 0x00, 0x51, 0x02, 0x00, 0x00, 0x00,
0x42, 0x00, 0x41, 0x90, 0x01, 0x00, 0x00,
0x44, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0x4C, 0x00, 0x53, 0x03, 0x00, 0x00, 0x00,
0x4C, 0x00, 0x51, 0x03, 0x00, 0x00, 0x00,
0x50, 0x00, 0x41, 0x58, 0x02, 0x00, 0x00,
0x51, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0x54, 0x00, 0x51, 0x04, 0x00, 0x00, 0x00,
0x54, 0x00, 0x53, 0x04, 0x00, 0x00, 0x00,
0x5D, 0x00, 0x41, 0xBC, 0x02, 0x00, 0x00,
0x5E, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0x62, 0x00, 0x53, 0x05, 0x00, 0x00, 0x00,
0x62, 0x00, 0x51, 0x05, 0x00, 0x00, 0x00,
0x6A, 0x00, 0x41, 0xC8, 0x00, 0x00, 0x00,
0x6B, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0x6E, 0x00, 0x51, 0x06, 0x00, 0x00, 0x00,
0x76, 0x00, 0x41, 0x96, 0x00, 0x00, 0x00,
0x77, 0x00, 0x45, 0x02, 0x00, 0x00, 0x00,
0x78, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0x81, 0x00, 0x53, 0x01, 0x00, 0x00, 0x00,
0x81, 0x00, 0x51, 0x07, 0x00, 0x00, 0x00,
0x84, 0x00, 0x41, 0x90, 0x01, 0x00, 0x00,
0x85, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0x88, 0x00, 0x51, 0x08, 0x00, 0x00, 0x00,
0x91, 0x00, 0x41, 0xF4, 0x01, 0x00, 0x00,
0x92, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0x98, 0x00, 0x53, 0x02, 0x00, 0x00, 0x00,
0x98, 0x00, 0x51, 0x09, 0x00, 0x00, 0x00,
0x9C, 0x00, 0x41, 0xFA, 0x00, 0x00, 0x00,
0x9D, 0x00, 0x51, 0x0A, 0x00, 0x00, 0x00,
0x9F, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0xA5, 0x00, 0x53, 0x03, 0x00, 0x00, 0x00,
0xA5, 0x00, 0x51, 0x0B, 0x00, 0x00, 0x00,
0xA9, 0x00, 0x41, 0x2C, 0x01, 0x00, 0x00,
0xAA, 0x00, 0x51, 0x0C, 0x00, 0x00, 0x00,
0xAC, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0xB3, 0x00, 0x53, 0x04, 0x00, 0x00, 0x00,
0xB3, 0x00, 0x51, 0x0D, 0x00, 0x00, 0x00,
0xB8, 0x00, 0x41, 0xF4, 0x01, 0x00, 0x00,
0xB9, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0xBC, 0x00, 0x53, 0x05, 0x00, 0x00, 0x00,
0xBC, 0x00, 0x51, 0x0E, 0x00, 0x00, 0x00,
0xC5, 0x00, 0x41, 0xC8, 0x00, 0x00, 0x00,
0xC6, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0xD2, 0x00, 0x41, 0x64, 0x00, 0x00, 0x00,
0xD3, 0x00, 0x41, 0x14, 0x00, 0x00, 0x00,
0xD3, 0x00, 0x51, 0x0F, 0x00, 0x00, 0x00,
0xD4, 0x00, 0x53, 0x06, 0x00, 0x00, 0x00,
0xDD, 0x00, 0x41, 0x05, 0x00, 0x00, 0x00,
0x22, 0x01, 0x4D, 0x02, 0x00, 0x00, 0x00,
0x2C,0x01,0x41,0x05,0x00,0x00,0x00,
0x34,0x01,0x45,0x03,0x00,0x00,0x00,
0x3E,0x01,0x53,0x03,0x00,0x00,0x00,
0x57,0x01,0x52,0x02,0x00,0x00,0x00,
0x73,0x01,0x41,0x0A,0x00,0x00,0x00,
0x73,0x01,0x51,0x10,0x00,0x00,0x00,
0x74,0x01,0x53,0x01,0x00,0x00,0x00,
0xA4,0x01,0x41,0x02,0x00,0x00,0x00,
0xA5,0x01,0x49,0x00,0x00,0x00,0x00,
0xA9,0x01,0x50,0x05,0x00,0x00,0x00,
0x82,
0x02,0x54,0x02,0x00,0x00,0x00,0x83,0x02,0x53,0x04,0x00,0x00,0x00,0xAD,0x02,0x41,
0x50,0x00,0x00,0x00,0xAE,0x02,0x41,0x02,0x00,0x00,0x00,0xAE,0x02,0x45,0x04,0x00,
0x00,0x00,0xB6,0x03,0x53,0x01,0x00,0x00,0x00,0xE4,0x03,0x5A,0x03,0x00,0x00,0x00,
0x23,0x04,0x53,0x02,0x00,0x00,0x00,0x38,0x04,0x53,0x0B,0x00,0x00,0x00,0xBE,0x04,
0x53,0x03,0x00,0x00,0x00,0xD2,0x04,0x53,0x04,0x00,0x00,0x00,0x26,0x05,0x52,0x05,
0x00,0x00,0x00,0xFE,0x05,0x54,0x05,0x00,0x00,0x00,0xFE,0x05,0x53,0x0C,0x00,0x00,
0x00,0x09,0x06,0x53,0x02,0x00,0x00,0x00,0x77,0x06,0x53,0x0E,0x00,0x00,0x00,0x83,
0x06,0x53,0x06,0x00,0x00,0x00,0xB8,0x06,0x53,0x07,0x00,0x00,0x00,0x08,0x07,0x53,
0x0B,0x00,0x00,0x00,0x65,0x07,0x53,0x08,0x00,0x00,0x00,0x9E,0x07,0x53,0x0D,0x00,
0x00,0x00,0xEB,0x07,0x53,0x02,0x00,0x00,0x00,0x0E,0x08,0x53,0x09,0x00,0x00,0x00,
0x27,0x08,0x53,0x06,0x00,0x00,0x00,0x4D,0x08,0x53,0x07,0x00,0x00,0x00,0x84,0x08,
0x53,0x0F,0x00,0x00,0x00,0xBA,0x08,0x53,0x06,0x00,0x00,0x00,0xEA,0x08,0x53,0x0A,
0x00,0x00,0x00,0x06,0x09,0x53,0x09,0x00,0x00,0x00,0x44,0x09,0x41,0x64,0x00,0x00,
0x00,0x45,0x09,0x45,0x0C,0x00,0x00,0x00,0x46,0x09,0x41,0x02,0x00,0x00,0x00,0x46,
0x09,0x53,0x04,0x00,0x00,0x00,0x5B,0x09,0x53,0x05,0x00,0x00,0x00,0xB4,0x09,0x52,
0x02,0x00,0x00,0x00,0xE9,0x09,0x53,0x01,0x00,0x00,0x00,0x22,0x0A,0x54,0x02,0x00,
0x00,0x00,0x22,0x0A,0x52,0x03,0x00,0x00,0x00,0x72,0x0A,0x54,0x03,0x00,0x00,0x00,
0x89,0x0A,0x53,0x09,0x00,0x00,0x00,0xA5,0x0A,0x52,0x03,0x00,0x00,0x00,0xE8,0x0A,
0x54,0x03,0x00,0x00,0x00,0xEC,0x0A,0x53,0x07,0x00,0x00,0x00,0x02,0x0B,0x53,0x0A,
0x00,0x00,0x00,0x06,0x0B,0x53,0x08,0x00,0x00,0x00,0x0F,0x0B,0x53,0x06,0x00,0x00,
0x00,0x1C,0x0B,0x53,0x08,0x00,0x00,0x00,0x1C,0x0B,0x53,0x0B,0x00,0x00,0x00,0x6D,
0x0B,0x53,0x05,0x00,0x00,0x00,0x72,0x0B,0x4D,0x02,0x00,0x00,0x00,0x7F,0x0B,0x41,
0xC8,0x00,0x00,0x00,0x80,0x0B,0x41,0x05,0x00,0x00,0x00,0xEA,0x00,0x00,0x41,0x05,
0x00,0x00,0x00,0x00,0x00,0x45,0x0A,0x00,0x00,0x00,0x02,0x00,0x53,0x01,0x00,0x00,
0x00,0x0C,0x00,0x53,0x02,0x00,0x00,0x00,0x12,0x00,0x53,0x02,0x00,0x00,0x00,0x18,
0x00,0x53,0x01,0x00,0x00,0x00,0x22,0x00,0x53,0x02,0x00,0x00,0x00,0x28,0x00,0x53,
0x01,0x00,0x00,0x00,0x30,0x00,0x53,0x01,0x00,0x00,0x00,0x38,0x00,0x53,0x02,0x00,
0x00,0x00,0x3E,0x00,0x53,0x01,0x00,0x00,0x00,0x50,0x00,0x53,0x02,0x00,0x00,0x00,
0x56,0x00,0x53,0x01,0x00,0x00,0x00,0x5C,0x00,0x53,0x01,0x00,0x00,0x00,0x64,0x00,
0x53,0x02,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x0A,
0x00,0x00,0x00,0x00,0x00,0x42,0x01,0x00,0x00,0x00,0x00,0x00,0x45,0x06,0x00,0x00,
0x00,0x01,0x00,0x4D,0x02,0x00,0x00,0x00,0xC8,0x00,0x53,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x41,0x0A,0x00,0x00,0x00,0x00,0x00,0x42,0x01,0x00,0x00,0x00,0x00,0x00,
0x45,0x07,0x00,0x00,0x00,0x01,0x00,0x4D,0x02,0x00,0x00,0x00,0xB4,0x00,0x53,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x0A,0x00,0x00,0x00,0x00,0x00,0x45,0x0B,0x00,
0x00,0x00,0x01,0x00,0x53,0x01,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x41,0x08,
0x00,0x00,0x00,0x00,0x00,0x45,0x09,0x00,0x00,0x00,0x00,0x00,0x42,0x01,0x00,0x00,
0x00,0x01,0x00,0x4D,0x02,0x00,0x00,0x00,0x1E,0x00,0x53,0x01,0x00,0x00,0x00,0x2B,
0x00,0x53,0x02,0x00,0x00,0x00,0x82,0x00,0x53,0x03,0x00,0x00,0x00,0x00,0x53,0x01,
0x54,0x77,0x26,0x00,0x60,0x77,0x26,0x00,0x68,0x77,0x26,0x00,0x78,0x77,0x26,0x00,
0x80,0x77,0x26,0x00,0x94,0x77,0x26,0x00,0x9C,0x77,0x26,0x00,0xAC,0x77,0x26,0x00,
0xB4,0x77,0x26,0x00,0xC0,0x77,0x26,0x00,0xC8,0x77,0x26,0x00,0xD4,0x77,0x26,0x00,
0xE0,0x77,0x26,0x00,0xF0,0x77,0x26,0x00,0xFC,0x77,0x26,0x00,0x14,0x78,0x26,0x00,
0x1C,0x78,0x26,0x00,0x34,0x78,0x26,0x00,0x3C,0x78,0x26,0x00,0x4C,0x78,0x26,0x00,
0x5C,0x78,0x26,0x00,0x74,0x78,0x26,0x00,0x80,0x78,0x26,0x00,0x80,0x78,0x26,0x00,
0x84,0x78,0x26,0x00,0x60,0x77,0x26,0x00,0x90,0x78,0x26,0x00,0x9C,0x78,0x26,0x00,
0xA4,0x78,0x26,0x00,0xC0,0x77,0x26,0x00,0xB4,0x78,0x26,0x00,0x78,0x77,0x26,0x00,
0xC4,0x78,0x26,0x00,0x94,0x77,0x26,0x00,0xD8,0x78,0x26,0x00,0xEC,0x78,0x26,0x00


};


int dword_4A568[2] = { 88145920, 0 }; // weak
int dword_4A5D8[2] = { 172032000, 0 }; // weak
//int dword_4A620[2] = { 172032000, 0 }; // weak
uint8_t dword_4A620[] =
{
0x00, 0x00, 0x41, 0x0A, 0x00, 0x00, 0x00,
0x00, 0x00, 0x45, 0x0B, 0x00, 0x00, 0x00,
0x01, 0x00, 0x53, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x18, 0x00, 0x00, 0x41, 0x08
};

int dword_4A638[2] = { 138477568, 0 }; // weak
char *off_4A66C[] =
{
  (char*)"No sound",
  (char*)"NONE",
  (char*)"Soundblaster",
  (char*)"SBLAST",
  (char*)"Soundblaster pro",
  (char*)"SBPRO",
  (char*)"Soundblaster 16",
  (char*)"SB16",
  (char*)"Adlib gold",
  (char*)"ADLIBG",
  (char*)"Microsoft 8",
  (char*)"MICROSOFT8",
  (char*)"Microsoft 16",
  (char*)"MICROSOFT16",
  (char*)"Pro audio spectrum 8",
  (char*)"PAS8",
  (char*)"Pro audio spectrum 16",
  (char*)"PAS16",
  (char*)"Sound master II",
  (char*)"SOUNDMASTERII",
  (char*)"Soundblaster compatible",
  (char*)"COMPATIBLE",
  (char*)"!",
  (char*)"!"
}; // weak
/*char* off_4A670[] =
{
  (char*)"NONE",
  (char*)"Soundblaster",
  (char*)"SBLAST",
  (char*)"Soundblaster pro",
  (char*)"SBPRO",
  (char*)"Soundblaster 16",
  (char*)"SB16",
  (char*)"Adlib gold",
  (char*)"ADLIBG",
  (char*)"Microsoft 8",
  (char*)"MICROSOFT8",
  (char*)"Microsoft 16",
  (char*)"MICROSOFT16",
  (char*)"Pro audio spectrum 8",
  (char*)"PAS8",
  (char*)"Pro audio spectrum 16",
  (char*)"PAS16",
  (char*)"Sound master II",
  (char*)"SOUNDMASTERII",
  (char*)"Soundblaster compatible",
  (char*)"COMPATIBLE",
  (char*)"!",
  (char*)"!"
}; // weak*/
char *off_4A6CC[] =
{
  (char*)"No music",
  (char*)"NONE",
  (char*)"Adlib fm",
  (char*)"ADLIB",
  (char*)"Adlib gold fm",
  (char*)"ADLIBG",
  (char*)"Soundblaster fm",
  (char*)"SBLAST",
  (char*)"Soundblaster pro fm",
  (char*)"SBPRO",
  (char*)"Soundblaster 16 fm",
  (char*)"SB16FM",
  (char*)"Soundblaster AWE 32",
  (char*)"SBAWE32",
  (char*)"Wave blaster",
  (char*)"WBLAST",
  (char*)"Roland mt32",
  (char*)"ROLAND",
  (char*)"General midi",
  (char*)"GENERAL",
  (char*)"Pro audio spectrum fm",
  (char*)"PASFM",
  (char*)"Soundblaster compatible",
  (char*)"COMPATIBLE",
  (char*)"!",
  (char*)"!"
}; // weak
/*char* off_4A6D0[] =
{
  (char*)"NONE",
  (char*)"Adlib fm",
  (char*)"ADLIB",
  (char*)"Adlib gold fm",
  (char*)"ADLIBG",
  (char*)"Soundblaster fm",
  (char*)"SBLAST",
  (char*)"Soundblaster pro fm",
  (char*)"SBPRO",
  (char*)"Soundblaster 16 fm",
  (char*)"SB16FM",
  (char*)"Soundblaster AWE 32",
  (char*)"SBAWE32",
  (char*)"Wave blaster",
  (char*)"WBLAST",
  (char*)"Roland mt32",
  (char*)"ROLAND",
  (char*)"General midi",
  (char*)"GENERAL",
  (char*)"Pro audio spectrum fm",
  (char*)"PASFM",
  (char*)"Soundblaster compatible",
  (char*)"COMPATIBLE",
  (char*)"!",
  (char*)"!"
}; // weak*/

char zeroChar_A9990_A99A8 = '0'; // weak

char* off_4A734[] = { (char*)"220", (char*)"220", (char*)"240", (char*)"240",  (char*)"!",  (char*)"!" }; // weak
//char *off_4A738[3] = { (char*)"220", (char*)"240", (char*)"240" }; // weak
char* off_4A74C[] = { (char*)"2", (char*)"2", (char*)"3", (char*)"3", (char*)"5", (char*)"5", (char*)"7", (char*)"7", (char*)"10", (char*)"10", (char*)"!", (char*)"!" }; // weak
//char *off_4A750 = (char*)"2"; // weak
char* off_4A77C[] = { (char*)"0", (char*)"0", (char*)"1", (char*)"1", (char*)"3", (char*)"3", (char*)"!" , (char*)"!"}; // weak
//__int16 *off_4A780 = (__int16*)&zeroChar_A9990_A99A8; // weak
char* off_4A79C[] = { (char*)"300", (char*)"300",(char*)"330", (char*)"330", (char*)"!", (char*)"!" }; // weak
//void *off_4A7A0 = &unk_A9998_A99B0; // weak
char* off_4A7B4[] = { (char*)"YES", (char*)"YES", (char*)"NO", (char*)"NO", (char*)"!", (char*)"!" }; // weak
//int *off_4A7B8 = &dword_A99A0_A99B8; // weak
__int16 word_4A7CC[] = { 51 }; // weak
__int16 word_4A7CE[] = { 47 }; // weak

uint32 dword_4A7EC[6][4] = {
{0x000000AA, 0x00000000, 0x00000096, 0x00000024},
{0x000000A1, 0x00000025, 0x0000009F, 0x00000023},
{0x000000BF, 0x00000049, 0x00000081, 0x00000020},
{0x000000AC, 0x00000068, 0x00000094, 0x0000001B},
{0x000000BA, 0x00000085, 0x00000086, 0x0000001F},
{0x000000AD, 0x000000A5, 0x00000093, 0x0000001C}
};

//int dword_4A7EC[] = { 170 }; // weak
//int dword_4A7F0[] = { 0 }; // weak
//int dword_4A7F4[] = { 150 }; // weak
//int dword_4A7F8[] = { 36 }; // weak
char byte_4A84B[] = {
0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x01,0x00,
0x00,0x00,0x00,0xB1,0x00,0x30,0x00,0x09,0x00,0x04,0x00,0xB4,0x00,0x31,0x00,0x07
}; // weak
char byte_4A884[] = {
0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0xB1,0x00,0x30,0x00,0x09,0x00,
0x04,0x00,0xB4,0x00,0x31,0x00,0x07,0x00,0x02,0x00,0xBA,0x00,0x31,0x00,0x02,0x00,
0x05,0x00,0xC0,0x00,0x2D,0x00,0x03,0x00,0x20,0x00,0xB1,0x00,0x31,0x00,0x01,0x00,
0x0D,0x00,0xB7,0x00,0x2A,0x00,0x04,0x00,0x28,0x00,0xB4,0x00,0x27,0x00,0x08,0x00,
0x0A,0x00,0x3D,0x00,0x2D,0x00,0x3D,0x00,0x5F,0x00,0xB3,0x00,0x2D,0x00,0xB3,0x00,
}; // weak
__int16 word_4A8BE[] = {
    0x00B1,0x0030,0x0009,0x0004,
    0x00B4,0x0031,0x0007,0x0002,
    0x00BA,0x0031,0x0002,0x0005,
    0x00C0,0x002D,0x0003,0x0020,
    0x00B1,0x0031,0x0001,0x000D,
    0x00B7,0x002A,0x0004,0x0028,
    0x00B4,0x0027,0x0008,0x000A,
    0x003D,0x002D,0x003D,0x005F,
    0x00B3,0x002D,0x00B3,0x005F
}; // weak
//__int16 word_4A8C0[] = { 48 }; // weak
//__int16 word_4A8C2[] = { 9 }; // weak
//__int16 word_4A8C4[] = { 4 }; // weak
//wchar_t asc_4A8F4_4AC34[5] = L"\n=-=_"; // weak
uint16_t asc_4A8F4_4AC34[] = { 0x000A, 0x003D, 0x002D, 0x003D, 0x005F, 0x00B3,
                        0x002D, 0x0B3, 0x005F};// 21B8F4_
char byte_4A905[58] = {
0x00,0x00,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x2D,0x3D,0x00,0x00,
0x71,0x77,0x65,0x72,0x74,0x79,0x75,0x69,0x6F,0x70,0x5B,0x5D,0x00,0x00,0x61,0x73,
0x64,0x66,0x67,0x68,0x6A,0x6B,0x6C,0x3B,0x27,0x60,0x00,0x23,0x7A,0x78,0x63,0x76,
0x62,0x6E,0x6D,0x2C,0x2E,0x2F,0x00,0x00,0x00,0x20
}; // 21b905
char byte_4A93E[58] = {
0x20,0x00,0x21,0x22,0x5C,0x24,0x25,0x5E,0x26,0x2A,0x28,0x29,0x5F,0x2B,0x00,0x00,
0x51,0x57,0x45,0x52,0x54,0x59,0x55,0x49,0x4F,0x50,0x7B,0x7D,0x00,0x00,0x41,0x53,
0x44,0x46,0x47,0x48,0x4A,0x4B,0x4C,0x3A,0x40,0x7E,0x00,0x7C,0x5A,0x58,0x43,0x56,
0x42,0x4E,0x4D,0x3C,0x3E,0x3F,0x00,0x00,0x00,0x20
}; // 21b93e
_UNKNOWN loc_4AFFD; // weak
_UNKNOWN loc_4E200; // weak
_UNKNOWN sub_5BE6C; // weak
// extern _UNKNOWN _GETDS; weak
int dword_74F95_754A5[] = { 0, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1 };
int dword_80000; // weak
int dword_80010; // weak
int dword_80120; // weak
char byte_90000[4] = { '\x01', '\x01', '\x01', '\0' }; // weak
uint8_t* dword_90004 = nullptr; // weak
uint8_t* dword_90008 = nullptr; // weak
__int16 word_9000C = 0; // weak
__int16 word_9000E = 0; // weak
__int16 word_90010 = 0; // weak
__int32 dword_90012 = 0; // weak
__int16 word_90016 = 0; // weak
uint8_t* tempReadBuffer_9001C = nullptr; // weak
__int16 word_90024 = 1; // weak
__int16 word_90026 = 0; // weak
int dword_90028 = 0; // weak
char byte_9002C = '\0'; // weak
__int16 word_90030 = 0; // weak
__int16 word_90034[24] =
{
  2,
  1,
  32,
  10,
  1,
  0,
  0,
  4,
  400,
  0,
  1,
  0,
  1,
  0,
  1,
  1,
  40,
  600,
  0,
  1,
  4,
  2,
  3,
  4
}; // weak

__int16 cpuVar_90064 = 0; // weak
int cpuVar_90066 = 0; // weak
int cpuVar_9006A = 0; // weak
int cpuVar_9006E = 0; // weak
int cpuVar_90072 = 0; // weak
char cpuVar_90076 = '\0'; // weak
_UNKNOWN cpuVar_90078; // weak
char cpuVar_90084 = '\0'; // weak
char cpuVar_90085 = '\0'; // weak
char cpuVar_90086 = '\0'; // weak

char cpuVar_90087 = '\0'; // weak
char byte_90088 = '\0'; // weak
char byte_90089 = '\0'; // weak
char byte_9008C = '\0'; // weak
char byte_9008D = '\x01'; // weak
char byte_9008E = '\0'; // weak
char byte_9008F = '\xFE'; // weak
char byte_90090 = '\0'; // weak
char byte_90091 = '\0'; // weak
char byte_90094 = 'c'; // weak
int8 byte_90096 = 40; // weak
int dword_90098 = 0; // weak
char byte_9009E = '\0'; // weak
char* dword_900A0 = 0; // weak
int dword_900A4[8] = { 256, 512, 1024, 2048, 4096, 9192, 18384, 36768 }; // weak
char byte_900C4[164] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_90168[164] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00
}; // weak
char byte_9020C[164] =
{
0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00
}; // weak
int dword_902B0 = 0; // weak
uint8 yawQuartal_902B4[4][10] = {
    {0xED, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xD8, 0xFF, 0x01, 0x00},
    {0x00, 0xED, 0xFF, 0x00, 0x01, 0x00, 0x01, 0xD8, 0x00, 0x01},
    {0x13, 0x00, 0xFF, 0xFF, 0x00, 0x01, 0x28, 0x01, 0xFF, 0x00},
    {0x01, 0x13, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x28, 0x00, 0xFF}
};


uint32_t unk_902DC[32][8] = {//fix size
    {0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF},
    {0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000},
    {0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000},
    {0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF},
    {0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF},
    {0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000},
    {0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000},
    {0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF},

    {0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000},
    {0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF},
    {0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF},
    {0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000},
    {0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000},
    {0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF},
    {0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF},
    {0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000},

    {0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000},
    {0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000},
    {0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF},
    {0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF},
    {0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF},
    {0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF},
    {0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000},
    {0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000},

    {0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000},
    {0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000},
    {0x00000000,0x001FFFFF,0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF},
    {0x00000000,0x00000000,0x001FFFFF,0x00000000,0x001FFFFF,0x001FFFFF,0x00000000,0x001FFFFF},
    {0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF},
    {0x001FFFFF,0x00000000,0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF},
    {0x00000000,0x00000000,0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000},
    {0x00000000,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x001FFFFF,0x00000000,0x00000000,0x00000000}
};
char byte_906DC[] = { '\0' }; // weak
char byte_906E2[] = { '\x01' }; // weak
uint8 byte_906E8[16] = { 0,1,1,2,2,3,3,4,4,3,3,2,2,1,1,0};
/* {
  '\0',
  '\x01',
  '\x01',
  '\x02',
  '\x02',
  '\x03',
  '\x03',
  '\x04',
  '\x04',
  '\x03',
  '\x03',
  '\x02',
  '\x02',
  '\x01',
  '\x01',
  '\0'
}; // weak*/
uint8 byte_906F8[16] = { 0,0,0,1,1,1,2,2,2,2,2,1,1,1,0,0 };
/* {
  '\0',
  '\0',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0'
}; // weak*/
char byte_90708 = '\0'; // weak
int dword_9070C = 20; // weak
int fixPosX_90710 = 0; // weak
int fixPosY_90714 = 0; // weak
uint32 dword_9074C[] = {
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x01010101,0x02020202,0x03030303,
0x04040404,0x05050505,0x06060606,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,
0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0x04010006,
0x00000101,0x00000001,0x00010001,0x01010100,
0x04040606,0x04060406,0x06060406,0x04040604,
0x00000404,0x00000004,0x04040400,0x04000400,
0x03030301,0x03010301,0x01010103,0x03030101,
0x01010105,0x05050101,0x05010501,0x05050501,
0x05020502,0x02020205,0x05050502,0x02020505,
0x03030404,0x03030304,0x04030403,0x04040403,
0x05050504,0x04040405,0x04050405,0x05050404,
0x02010201,0x01010102,0x02020201,0x02020101,
0x01010104,0x04010401,0x04040401,0x04040101,
0x01010601,0x01010606,0x01060106,0x06060106,
0x00000606,0x00060006,0x06060006,0x00000600,
0x01050102,0x02050101,0x02050105,0x05020102,
0x05010202,0x02010505,0x01040303,0x01040304,
0x03040101,0x03040401,0x01030403,0x04010301,
0x06040601,0x04010601,0x04060601,0x04060401,
0x01040601,0x04040601,0x04000406,0x06060400,
0x06000400,0x06040000,0x04040600,0x04060006,
0x01060006,0x00060001,0x00000601,0x00060601,
0x00010601,0x06000101,0x00040001,0x04000401,
0x00000401,0x00040101,0x04000104,0x00010401,
0x04050501,0x01040504,0x05040101,0x05040501,
0x05010401,0x05040401,0x04000601,0x04000106,
0x05050606,0x05060506,0x06060506,0x05050605,
0x03030606,0x03060306,0x06060306,0x03030603,
0x06050501,0x01060506,0x05060101,0x05060501,
0x05010601,0x05060601,0x06030301,0x01060306,
0x03060101,0x03060301,0x03010601,0x03060601,
0x501B001B,0x601B301B,0x501A001A,0x601A301A,
0x500A000A,0x600A300A,0x500A000A,0x600A300A,
0x500B000B,0x600B300B,0x500B000B,0x600B300B,
0x500C000C,0x600C300C,0x500C000C,0x600C300C,
0x50150015,0x60153015,0x50160016,0x60163016,
0x00000000,0x00000000,0x50180018,0x60183018,
0x00000000,0x00000000,0x50170017,0x60173017,
0x00000000,0x00000000,0x50190019,0x60193019,
0x50100010,0x60103010,0x500F000F,0x600F300F,
0x50100010,0x60103010,0x500F000F,0x600F300F,
0x501E001E,0x601D301E,0x501D001F,0x601D301D,
0x501E001E,0x601E301E,0x501D001D,0x601D301D,
0x50210021,0x60213021,0x50200022,0x60203020,
0x50210021,0x60213021,0x50200020,0x60203020,
0x50130013,0x60133013,0x50120014,0x60123012,
0x50130013,0x60133013,0x50120012,0x60123012,
0x50130013,0x60133013,0x50120014,0x60123012,
0x50210021,0x60213021,0x50200020,0x60203020,
0xFC010300,0x00000000,0x00000001,0x03020101,
0x07060504,0x0B0A0908,0x0F0E0D0C,0x01010110,
0x03020101,0x07060504,0x0B0A0908,0x0F0E0D0C,
0x00000010,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00E2018A,0x0000000A,
0x00E0018A,0x00000005,0x00E4018A,0x00000006,
0x00000BB8,0x00000F3C,0x00C80140,0x00000000,
0x00000000,0x000000C9,0x00000192,0x0000025B,
0x00000324,0x000003ED,0x000004B6,0x0000057F,
0x00000648,0x00000711,0x000007DA,0x000008A3,
0x0000096C,0x00000A35,0x00000AFE,0x00000BC7,
0x00000C90,0x00000D59,0x00000E21,0x00000EEA,
0x00000FB3,0x0000107B,0x00001144,0x0000120D,
0x000012D5,0x0000139E,0x00001466,0x0000152E,
0x000015F7,0x000016BF,0x00001787,0x00001850,
0x00001918,0x000019E0,0x00001AA8,0x00001B70,
0x00001C38,0x00001CFF,0x00001DC7,0x00001E8F,
0x00001F56,0x0000201E,0x000020E5,0x000021AD,
0x00002274,0x0000233B,0x00002402,0x000024C9,
0x00002590,0x00002657,0x0000271E,0x000027E4,
0x000028AB,0x00002971,0x00002A38,0x00002AFE,
0x00002BC4,0x00002C8A,0x00002D50,0x00002E16,
0x00002EDC,0x00002FA1,0x00003067,0x0000312C,
0x000031F1,0x000032B7,0x0000337C,0x00003440,
0x00003505,0x000035CA,0x0000368E,0x00003753,
0x00003817,0x000038DB,0x0000399F,0x00003A63,
0x00003B27,0x00003BEA,0x00003CAE,0x00003D71,
0x00003E34,0x00003EF7,0x00003FBA,0x0000407C,
0x0000413F,0x00004201,0x000042C3,0x00004385,
0x00004447,0x00004509,0x000045CB,0x0000468C,
0x0000474D,0x0000480E,0x000048CF,0x00004990,
0x00004A50,0x00004B10,0x00004BD1,0x00004C90,
0x00004D50,0x00004E10,0x00004ECF,0x00004F8E,
0x0000504D,0x0000510C,0x000051CB,0x00005289,
0x00005348,0x00005406,0x000054C3,0x00005581,
0x0000563E,0x000056FC,0x000057B9,0x00005875,
0x00005932,0x000059EE,0x00005AAA,0x00005B66,
0x00005C22,0x00005CDE,0x00005D99,0x00005E54,
0x00005F0F,0x00005FC9,0x00006084,0x0000613E,
0x000061F8,0x000062B1,0x0000636B,0x00006424,
0x000064DD,0x00006595,0x0000664E,0x00006706,
0x000067BE,0x00006876,0x0000692D,0x000069E4,
0x00006A9B,0x00006B52,0x00006C08,0x00006CBE,
0x00006D74,0x00006E2A,0x00006EDF,0x00006F94,
0x00007049,0x000070FE,0x000071B2,0x00007266,
0x0000731A,0x000073CD,0x00007480,0x00007533,
0x000075E6,0x00007698,0x0000774A,0x000077FC,
0x000078AD,0x0000795F,0x00007A10,0x00007AC0,
0x00007B70,0x00007C20,0x00007CD0,0x00007D7F,
0x00007E2F,0x00007EDD,0x00007F8C,0x0000803A,
0x000080E8,0x00008195,0x00008243,0x000082F0,
0x0000839C,0x00008449,0x000084F5,0x000085A0,
0x0000864C,0x000086F7,0x000087A1,0x0000884C,
0x000088F6,0x0000899F,0x00008A49,0x00008AF2,
0x00008B9A,0x00008C43,0x00008CEB,0x00008D93,
0x00008E3A,0x00008EE1,0x00008F88,0x0000902E,
0x000090D4,0x00009179,0x0000921F,0x000092C4,
0x00009368,0x0000940C,0x000094B0,0x00009554,
0x000095F7,0x0000969A,0x0000973C,0x000097DE,
0x00009880,0x00009921,0x000099C2,0x00009A63,
0x00009B03,0x00009BA3,0x00009C42,0x00009CE1,
0x00009D80,0x00009E1E,0x00009EBC,0x00009F5A,
0x00009FF7,0x0000A094,0x0000A130,0x0000A1CC,
0x0000A268,0x0000A303,0x0000A39E,0x0000A438,
0x0000A4D2,0x0000A56C,0x0000A605,0x0000A69E,
0x0000A736,0x0000A7CE,0x0000A866,0x0000A8FD,
0x0000A994,0x0000AA2A,0x0000AAC1,0x0000AB56,
0x0000ABEB,0x0000AC80,0x0000AD14,0x0000ADA8,
0x0000AE3C,0x0000AECF,0x0000AF62,0x0000AFF4,
0x0000B086,0x0000B117,0x0000B1A8,0x0000B239,
0x0000B2C9,0x0000B358,0x0000B3E8,0x0000B477,
0x0000B505,0x0000B593,0x0000B620,0x0000B6AD,
0x0000B73A,0x0000B7C6,0x0000B852,0x0000B8DD,
0x0000B968,0x0000B9F3,0x0000BA7D,0x0000BB06,
0x0000BB8F,0x0000BC18,0x0000BCA0,0x0000BD28,
0x0000BDAF,0x0000BE36,0x0000BEBC,0x0000BF42,
0x0000BFC7,0x0000C04C,0x0000C0D1,0x0000C155,
0x0000C1D8,0x0000C25C,0x0000C2DE,0x0000C360,
0x0000C3E2,0x0000C463,0x0000C4E4,0x0000C564,
0x0000C5E4,0x0000C663,0x0000C6E2,0x0000C761,
0x0000C7DE,0x0000C85C,0x0000C8D9,0x0000C955,
0x0000C9D1,0x0000CA4D,0x0000CAC7,0x0000CB42,
0x0000CBBC,0x0000CC35,0x0000CCAE,0x0000CD27,
0x0000CD9F,0x0000CE17,0x0000CE8E,0x0000CF04,
0x0000CF7A,0x0000CFF0,0x0000D065,0x0000D0D9,
0x0000D14D,0x0000D1C1,0x0000D234,0x0000D2A6,
0x0000D318,0x0000D38A,0x0000D3FB,0x0000D46B
}; // weak
char byte_90754 = '\0'; // weak
int dword_90758 = 1; // weak
char unk_9075C[0x94u * 4] = {
0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x03,0x03,0x03,0x03,
0x04,0x04,0x04,0x04,0x05,0x05,0x05,0x05,0x06,0x06,0x06,0x06,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x06,0x00,0x01,0x04,
0x01,0x01,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x01,0x01,0x01,
0x06,0x06,0x04,0x04,0x06,0x04,0x06,0x04,0x06,0x04,0x06,0x06,0x04,0x06,0x04,0x04,
0x04,0x04,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x00,0x04,0x00,0x04,
0x01,0x03,0x03,0x03,0x01,0x03,0x01,0x03,0x03,0x01,0x01,0x01,0x01,0x01,0x03,0x03,
0x05,0x01,0x01,0x01,0x01,0x01,0x05,0x05,0x01,0x05,0x01,0x05,0x01,0x05,0x05,0x05,
0x02,0x05,0x02,0x05,0x05,0x02,0x02,0x02,0x02,0x05,0x05,0x05,0x05,0x05,0x02,0x02,
0x04,0x04,0x03,0x03,0x04,0x03,0x03,0x03,0x03,0x04,0x03,0x04,0x03,0x04,0x04,0x04,
0x04,0x05,0x05,0x05,0x05,0x04,0x04,0x04,0x05,0x04,0x05,0x04,0x04,0x04,0x05,0x05,
0x01,0x02,0x01,0x02,0x02,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x01,0x01,0x02,0x02,
0x04,0x01,0x01,0x01,0x01,0x04,0x01,0x04,0x01,0x04,0x04,0x04,0x01,0x01,0x04,0x04,
0x01,0x06,0x01,0x01,0x06,0x06,0x01,0x01,0x06,0x01,0x06,0x01,0x06,0x01,0x06,0x06,
0x06,0x06,0x00,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x06,0x00,0x06,0x00,0x00,
0x02,0x01,0x05,0x01,0x01,0x01,0x05,0x02,0x05,0x01,0x05,0x02,0x02,0x01,0x02,0x05,
0x02,0x02,0x01,0x05,0x05,0x05,0x01,0x02,0x03,0x03,0x04,0x01,0x04,0x03,0x04,0x01,
0x01,0x01,0x04,0x03,0x01,0x04,0x04,0x03,0x03,0x04,0x03,0x01,0x01,0x03,0x01,0x04,
0x01,0x06,0x04,0x06,0x01,0x06,0x01,0x04,0x01,0x06,0x06,0x04,0x01,0x04,0x06,0x04,
0x01,0x06,0x04,0x01,0x01,0x06,0x04,0x04,0x06,0x04,0x00,0x04,0x00,0x04,0x06,0x06,
0x00,0x04,0x00,0x06,0x00,0x00,0x04,0x06,0x00,0x06,0x04,0x04,0x06,0x00,0x06,0x04,
0x06,0x00,0x06,0x01,0x01,0x00,0x06,0x00,0x01,0x06,0x00,0x00,0x01,0x06,0x06,0x00,
0x01,0x06,0x01,0x00,0x01,0x01,0x00,0x06,0x01,0x00,0x04,0x00,0x01,0x04,0x00,0x04,
0x01,0x04,0x00,0x00,0x01,0x01,0x04,0x00,0x04,0x01,0x00,0x04,0x01,0x04,0x01,0x00,
0x01,0x05,0x05,0x04,0x04,0x05,0x04,0x01,0x01,0x01,0x04,0x05,0x01,0x05,0x04,0x05,
0x01,0x04,0x01,0x05,0x01,0x04,0x04,0x05,0x01,0x06,0x00,0x04,0x06,0x01,0x00,0x04,
0x06,0x06,0x05,0x05,0x06,0x05,0x06,0x05,0x06,0x05,0x06,0x06,0x05,0x06,0x05,0x05,
0x06,0x06,0x03,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x06,0x03,0x06,0x03,0x03,
0x01,0x05,0x05,0x06,0x06,0x05,0x06,0x01,0x01,0x01,0x06,0x05,0x01,0x05,0x06,0x05,
0x01,0x06,0x01,0x05,0x01,0x06,0x06,0x05,0x01,0x03,0x03,0x06,0x06,0x03,0x06,0x01,
0x01,0x01,0x06,0x03,0x01,0x03,0x06,0x03,0x01,0x06,0x01,0x03,0x01,0x06,0x06,0x03
}; // 24e75c
uint8 unk_909ACx[1][8][2] = {
{{0x1B,0x00},{0x1B,0x50},{0x1B,0x30},{0x1B,0x60},{0x1A,0x00},{0x1A,0x50},{0x1A,0x30},{0x1A,0x60}}
};
uint8 unk_909BCx[3][8][2] = {
{{0x0A,0x00},{0x0A,0x50},{0x0A,0x30},{0x0A,0x60},{0x0A,0x00},{0x0A,0x50},{0x0A,0x30},{0x0A,0x60}},
{{0x0B,0x00},{0x0B,0x50},{0x0B,0x30},{0x0B,0x60},{0x0B,0x00},{0x0B,0x50},{0x0B,0x30},{0x0B,0x60}},
{{0x0C,0x00},{0x0C,0x50},{0x0C,0x30},{0x0C,0x60},{0x0C,0x00},{0x0C,0x50},{0x0C,0x30},{0x0C,0x60}}
};
uint8 unk_909ECx[1][8][2] = {
{{0x15,0x00},{0x15,0x50},{0x15,0x30},{0x15,0x60},{0x16,0x00},{0x16,0x50},{0x16,0x30},{0x16,0x60}}
};
uint8 unk_909FCx[13][8][2] = {
{{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x18,0x00},{0x18,0x50},{0x18,0x30},{0x18,0x60}},
{{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x17,0x00},{0x17,0x50},{0x17,0x30},{0x17,0x60}},
{{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x00,0x00},{0x19,0x00},{0x19,0x50},{0x19,0x30},{0x19,0x60}},
{{0x10,0x00},{0x10,0x50},{0x10,0x30},{0x10,0x60},{0x0F,0x00},{0x0F,0x50},{0x0F,0x30},{0x0F,0x60}},
{{0x10,0x00},{0x10,0x50},{0x10,0x30},{0x10,0x60},{0x0F,0x00},{0x0F,0x50},{0x0F,0x30},{0x0F,0x60}},
{{0x1E,0x00},{0x1E,0x50},{0x1E,0x30},{0x1D,0x60},{0x1F,0x00},{0x1D,0x50},{0x1D,0x30},{0x1D,0x60}},
{{0x1E,0x00},{0x1E,0x50},{0x1E,0x30},{0x1E,0x60},{0x1D,0x00},{0x1D,0x50},{0x1D,0x30},{0x1D,0x60}},
{{0x21,0x00},{0x21,0x50},{0x21,0x30},{0x21,0x60},{0x22,0x00},{0x20,0x50},{0x20,0x30},{0x20,0x60}},
{{0x21,0x00},{0x21,0x50},{0x21,0x30},{0x21,0x60},{0x20,0x00},{0x20,0x50},{0x20,0x30},{0x20,0x60}},
{{0x13,0x00},{0x13,0x50},{0x13,0x30},{0x13,0x60},{0x14,0x00},{0x12,0x50},{0x12,0x30},{0x12,0x60}},
{{0x13,0x00},{0x13,0x50},{0x13,0x30},{0x13,0x60},{0x12,0x00},{0x12,0x50},{0x12,0x30},{0x12,0x60}},
{{0x13,0x00},{0x13,0x50},{0x13,0x30},{0x13,0x60},{0x14,0x00},{0x12,0x50},{0x12,0x30},{0x12,0x60}},
{{0x21,0x00},{0x21,0x50},{0x21,0x30},{0x21,0x60},{0x20,0x00},{0x20,0x50},{0x20,0x30},{0x20,0x60}}
};
//_UNKNOWN unk_90A2C; // weak
char byte_90AD4 = '\0'; // weak
char byte_90AD5 = '\0'; // weak
char byte_90AD8[]/*[42]*/ =//fix size may by 42
{
  0x01,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,
  0x01,0x01,0x01,0x01,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
}; // weak
__int16 word_90B02[] = { 0 }; // weak
_UNKNOWN unk_90B04; // weak
__int16 word_90B0C[4] = { 0, 0, 0, 0 }; // weak
int dword_90B14 = 0; // weak
int dword_90B18 = 0; // weak
__int16 word_90B1C = 0; // weak
__int16 word_90B1E = 0; // weak
char byte_90B20 = '\0'; // weak
char byte_90B21 = '\0'; // weak
char byte_90B22 = '\0'; // weak
char byte_90B23 = '\0'; // weak
__int16 word_90B24 = 394; // weak
__int16 word_90B26 = 226; // weak
__int16 word_90B2C = 394; // weak
__int16 word_90B2E = 224; // weak
__int16 word_90B34 = 394; // weak
__int16 word_90B36 = 228; // weak
char byte_90B48 = '\0'; // weak
int32 sin_90B4C[(256 + 256 + 256 + 256) * 2] = {
0x00000000,0x000000C9,0x00000192,0x0000025B,
0x00000324,0x000003ED,0x000004B6,0x0000057F,
0x00000648,0x00000711,0x000007DA,0x000008A3,
0x0000096C,0x00000A35,0x00000AFE,0x00000BC7,
0x00000C90,0x00000D59,0x00000E21,0x00000EEA,
0x00000FB3,0x0000107B,0x00001144,0x0000120D,
0x000012D5,0x0000139E,0x00001466,0x0000152E,
0x000015F7,0x000016BF,0x00001787,0x00001850,
0x00001918,0x000019E0,0x00001AA8,0x00001B70,
0x00001C38,0x00001CFF,0x00001DC7,0x00001E8F,
0x00001F56,0x0000201E,0x000020E5,0x000021AD,
0x00002274,0x0000233B,0x00002402,0x000024C9,
0x00002590,0x00002657,0x0000271E,0x000027E4,
0x000028AB,0x00002971,0x00002A38,0x00002AFE,
0x00002BC4,0x00002C8A,0x00002D50,0x00002E16,
0x00002EDC,0x00002FA1,0x00003067,0x0000312C,
0x000031F1,0x000032B7,0x0000337C,0x00003440,
0x00003505,0x000035CA,0x0000368E,0x00003753,
0x00003817,0x000038DB,0x0000399F,0x00003A63,
0x00003B27,0x00003BEA,0x00003CAE,0x00003D71,
0x00003E34,0x00003EF7,0x00003FBA,0x0000407C,
0x0000413F,0x00004201,0x000042C3,0x00004385,
0x00004447,0x00004509,0x000045CB,0x0000468C,
0x0000474D,0x0000480E,0x000048CF,0x00004990,
0x00004A50,0x00004B10,0x00004BD1,0x00004C90,
0x00004D50,0x00004E10,0x00004ECF,0x00004F8E,
0x0000504D,0x0000510C,0x000051CB,0x00005289,
0x00005348,0x00005406,0x000054C3,0x00005581,
0x0000563E,0x000056FC,0x000057B9,0x00005875,
0x00005932,0x000059EE,0x00005AAA,0x00005B66,
0x00005C22,0x00005CDE,0x00005D99,0x00005E54,
0x00005F0F,0x00005FC9,0x00006084,0x0000613E,
0x000061F8,0x000062B1,0x0000636B,0x00006424,
0x000064DD,0x00006595,0x0000664E,0x00006706,
0x000067BE,0x00006876,0x0000692D,0x000069E4,
0x00006A9B,0x00006B52,0x00006C08,0x00006CBE,
0x00006D74,0x00006E2A,0x00006EDF,0x00006F94,
0x00007049,0x000070FE,0x000071B2,0x00007266,
0x0000731A,0x000073CD,0x00007480,0x00007533,
0x000075E6,0x00007698,0x0000774A,0x000077FC,
0x000078AD,0x0000795F,0x00007A10,0x00007AC0,
0x00007B70,0x00007C20,0x00007CD0,0x00007D7F,
0x00007E2F,0x00007EDD,0x00007F8C,0x0000803A,
0x000080E8,0x00008195,0x00008243,0x000082F0,
0x0000839C,0x00008449,0x000084F5,0x000085A0,
0x0000864C,0x000086F7,0x000087A1,0x0000884C,
0x000088F6,0x0000899F,0x00008A49,0x00008AF2,
0x00008B9A,0x00008C43,0x00008CEB,0x00008D93,
0x00008E3A,0x00008EE1,0x00008F88,0x0000902E,
0x000090D4,0x00009179,0x0000921F,0x000092C4,
0x00009368,0x0000940C,0x000094B0,0x00009554,
0x000095F7,0x0000969A,0x0000973C,0x000097DE,
0x00009880,0x00009921,0x000099C2,0x00009A63,
0x00009B03,0x00009BA3,0x00009C42,0x00009CE1,
0x00009D80,0x00009E1E,0x00009EBC,0x00009F5A,
0x00009FF7,0x0000A094,0x0000A130,0x0000A1CC,
0x0000A268,0x0000A303,0x0000A39E,0x0000A438,
0x0000A4D2,0x0000A56C,0x0000A605,0x0000A69E,
0x0000A736,0x0000A7CE,0x0000A866,0x0000A8FD,
0x0000A994,0x0000AA2A,0x0000AAC1,0x0000AB56,
0x0000ABEB,0x0000AC80,0x0000AD14,0x0000ADA8,
0x0000AE3C,0x0000AECF,0x0000AF62,0x0000AFF4,
0x0000B086,0x0000B117,0x0000B1A8,0x0000B239,
0x0000B2C9,0x0000B358,0x0000B3E8,0x0000B477,
0x0000B505,0x0000B593,0x0000B620,0x0000B6AD,
0x0000B73A,0x0000B7C6,0x0000B852,0x0000B8DD,
0x0000B968,0x0000B9F3,0x0000BA7D,0x0000BB06,
0x0000BB8F,0x0000BC18,0x0000BCA0,0x0000BD28,
0x0000BDAF,0x0000BE36,0x0000BEBC,0x0000BF42,
0x0000BFC7,0x0000C04C,0x0000C0D1,0x0000C155,
0x0000C1D8,0x0000C25C,0x0000C2DE,0x0000C360,
0x0000C3E2,0x0000C463,0x0000C4E4,0x0000C564,
0x0000C5E4,0x0000C663,0x0000C6E2,0x0000C761,
0x0000C7DE,0x0000C85C,0x0000C8D9,0x0000C955,
0x0000C9D1,0x0000CA4D,0x0000CAC7,0x0000CB42,
0x0000CBBC,0x0000CC35,0x0000CCAE,0x0000CD27,
0x0000CD9F,0x0000CE17,0x0000CE8E,0x0000CF04,
0x0000CF7A,0x0000CFF0,0x0000D065,0x0000D0D9,
0x0000D14D,0x0000D1C1,0x0000D234,0x0000D2A6,
0x0000D318,0x0000D38A,0x0000D3FB,0x0000D46B,
0x0000D4DB,0x0000D54B,0x0000D5BA,0x0000D628,
0x0000D696,0x0000D703,0x0000D770,0x0000D7DC,
0x0000D848,0x0000D8B4,0x0000D91E,0x0000D989,
0x0000D9F2,0x0000DA5C,0x0000DAC4,0x0000DB2C,
0x0000DB94,0x0000DBFB,0x0000DC62,0x0000DCC8,
0x0000DD2D,0x0000DD92,0x0000DDF7,0x0000DE5B,
0x0000DEBE,0x0000DF21,0x0000DF83,0x0000DFE5,
0x0000E046,0x0000E0A7,0x0000E107,0x0000E167,
0x0000E1C6,0x0000E224,0x0000E282,0x0000E2DF,
0x0000E33C,0x0000E399,0x0000E3F4,0x0000E450,
0x0000E4AA,0x0000E504,0x0000E55E,0x0000E5B7,
0x0000E610,0x0000E667,0x0000E6BF,0x0000E716,
0x0000E76C,0x0000E7C2,0x0000E817,0x0000E86B,
0x0000E8BF,0x0000E913,0x0000E966,0x0000E9B8,
0x0000EA0A,0x0000EA5B,0x0000EAAB,0x0000EAFC,
0x0000EB4B,0x0000EB9A,0x0000EBE8,0x0000EC36,
0x0000EC83,0x0000ECD0,0x0000ED1C,0x0000ED68,
0x0000EDB3,0x0000EDFD,0x0000EE47,0x0000EE90,
0x0000EED9,0x0000EF21,0x0000EF68,0x0000EFAF,
0x0000EFF5,0x0000F03B,0x0000F080,0x0000F0C5,
0x0000F109,0x0000F14C,0x0000F18F,0x0000F1D2,
0x0000F213,0x0000F254,0x0000F295,0x0000F2D5,
0x0000F314,0x0000F353,0x0000F391,0x0000F3CF,
0x0000F40C,0x0000F448,0x0000F484,0x0000F4BF,
0x0000F4FA,0x0000F534,0x0000F56E,0x0000F5A6,
0x0000F5DF,0x0000F616,0x0000F64E,0x0000F684,
0x0000F6BA,0x0000F6EF,0x0000F724,0x0000F758,
0x0000F78C,0x0000F7BF,0x0000F7F1,0x0000F823,
0x0000F854,0x0000F885,0x0000F8B4,0x0000F8E4,
0x0000F913,0x0000F941,0x0000F96E,0x0000F99B,
0x0000F9C8,0x0000F9F3,0x0000FA1F,0x0000FA49,
0x0000FA73,0x0000FA9C,0x0000FAC5,0x0000FAED,
0x0000FB15,0x0000FB3C,0x0000FB62,0x0000FB88,
0x0000FBAD,0x0000FBD1,0x0000FBF5,0x0000FC18,
0x0000FC3B,0x0000FC5D,0x0000FC7F,0x0000FCA0,
0x0000FCC0,0x0000FCDF,0x0000FCFE,0x0000FD1D,
0x0000FD3B,0x0000FD58,0x0000FD74,0x0000FD90,
0x0000FDAC,0x0000FDC7,0x0000FDE1,0x0000FDFA,
0x0000FE13,0x0000FE2B,0x0000FE43,0x0000FE5A,
0x0000FE71,0x0000FE87,0x0000FE9C,0x0000FEB0,
0x0000FEC4,0x0000FED8,0x0000FEEB,0x0000FEFD,
0x0000FF0E,0x0000FF1F,0x0000FF30,0x0000FF3F,
0x0000FF4E,0x0000FF5D,0x0000FF6B,0x0000FF78,
0x0000FF85,0x0000FF91,0x0000FF9C,0x0000FFA7,
0x0000FFB1,0x0000FFBB,0x0000FFC4,0x0000FFCC,
0x0000FFD4,0x0000FFDB,0x0000FFE1,0x0000FFE7,
0x0000FFEC,0x0000FFF1,0x0000FFF5,0x0000FFF8,
0x0000FFFB,0x0000FFFD,0x0000FFFF,0x00010000,
0x00010000,0x00010000,0x0000FFFF,0x0000FFFD,
0x0000FFFB,0x0000FFF8,0x0000FFF5,0x0000FFF1,
0x0000FFEC,0x0000FFE7,0x0000FFE1,0x0000FFDB,
0x0000FFD4,0x0000FFCC,0x0000FFC4,0x0000FFBB,
0x0000FFB1,0x0000FFA7,0x0000FF9C,0x0000FF91,
0x0000FF85,0x0000FF78,0x0000FF6B,0x0000FF5D,
0x0000FF4E,0x0000FF3F,0x0000FF30,0x0000FF1F,
0x0000FF0E,0x0000FEFD,0x0000FEEB,0x0000FED8,
0x0000FEC4,0x0000FEB0,0x0000FE9C,0x0000FE87,
0x0000FE71,0x0000FE5A,0x0000FE43,0x0000FE2B,
0x0000FE13,0x0000FDFA,0x0000FDE1,0x0000FDC7,
0x0000FDAC,0x0000FD90,0x0000FD74,0x0000FD58,
0x0000FD3B,0x0000FD1D,0x0000FCFE,0x0000FCDF,
0x0000FCC0,0x0000FCA0,0x0000FC7F,0x0000FC5D,
0x0000FC3B,0x0000FC18,0x0000FBF5,0x0000FBD1,
0x0000FBAD,0x0000FB88,0x0000FB62,0x0000FB3C,
0x0000FB15,0x0000FAED,0x0000FAC5,0x0000FA9C,
0x0000FA73,0x0000FA49,0x0000FA1F,0x0000F9F3,
0x0000F9C8,0x0000F99B,0x0000F96E,0x0000F941,
0x0000F913,0x0000F8E4,0x0000F8B4,0x0000F885,
0x0000F854,0x0000F823,0x0000F7F1,0x0000F7BF,
0x0000F78C,0x0000F758,0x0000F724,0x0000F6EF,
0x0000F6BA,0x0000F684,0x0000F64E,0x0000F616,
0x0000F5DF,0x0000F5A6,0x0000F56E,0x0000F534,
0x0000F4FA,0x0000F4BF,0x0000F484,0x0000F448,
0x0000F40C,0x0000F3CF,0x0000F391,0x0000F353,
0x0000F314,0x0000F2D5,0x0000F295,0x0000F254,
0x0000F213,0x0000F1D2,0x0000F18F,0x0000F14C,
0x0000F109,0x0000F0C5,0x0000F080,0x0000F03B,
0x0000EFF5,0x0000EFAF,0x0000EF68,0x0000EF21,
0x0000EED9,0x0000EE90,0x0000EE47,0x0000EDFD,
0x0000EDB3,0x0000ED68,0x0000ED1C,0x0000ECD0,
0x0000EC83,0x0000EC36,0x0000EBE8,0x0000EB9A,
0x0000EB4B,0x0000EAFC,0x0000EAAB,0x0000EA5B,
0x0000EA0A,0x0000E9B8,0x0000E966,0x0000E913,
0x0000E8BF,0x0000E86B,0x0000E817,0x0000E7C2,
0x0000E76C,0x0000E716,0x0000E6BF,0x0000E667,
0x0000E610,0x0000E5B7,0x0000E55E,0x0000E504,
0x0000E4AA,0x0000E450,0x0000E3F4,0x0000E399,
0x0000E33C,0x0000E2DF,0x0000E282,0x0000E224,
0x0000E1C6,0x0000E167,0x0000E107,0x0000E0A7,
0x0000E046,0x0000DFE5,0x0000DF83,0x0000DF21,
0x0000DEBE,0x0000DE5B,0x0000DDF7,0x0000DD92,
0x0000DD2D,0x0000DCC8,0x0000DC62,0x0000DBFB,
0x0000DB94,0x0000DB2C,0x0000DAC4,0x0000DA5C,
0x0000D9F2,0x0000D989,0x0000D91E,0x0000D8B4,
0x0000D848,0x0000D7DC,0x0000D770,0x0000D703,
0x0000D696,0x0000D628,0x0000D5BA,0x0000D54B,
0x0000D4DB,0x0000D46B,0x0000D3FB,0x0000D38A,
0x0000D318,0x0000D2A6,0x0000D234,0x0000D1C1,
0x0000D14D,0x0000D0D9,0x0000D065,0x0000CFF0,
0x0000CF7A,0x0000CF04,0x0000CE8E,0x0000CE17,
0x0000CD9F,0x0000CD27,0x0000CCAE,0x0000CC35,
0x0000CBBC,0x0000CB42,0x0000CAC7,0x0000CA4D,
0x0000C9D1,0x0000C955,0x0000C8D9,0x0000C85C,
0x0000C7DE,0x0000C761,0x0000C6E2,0x0000C663,
0x0000C5E4,0x0000C564,0x0000C4E4,0x0000C463,
0x0000C3E2,0x0000C360,0x0000C2DE,0x0000C25C,
0x0000C1D8,0x0000C155,0x0000C0D1,0x0000C04C,
0x0000BFC7,0x0000BF42,0x0000BEBC,0x0000BE36,
0x0000BDAF,0x0000BD28,0x0000BCA0,0x0000BC18,
0x0000BB8F,0x0000BB06,0x0000BA7D,0x0000B9F3,
0x0000B968,0x0000B8DD,0x0000B852,0x0000B7C6,
0x0000B73A,0x0000B6AD,0x0000B620,0x0000B593,
0x0000B505,0x0000B477,0x0000B3E8,0x0000B358,
0x0000B2C9,0x0000B239,0x0000B1A8,0x0000B117,
0x0000B086,0x0000AFF4,0x0000AF62,0x0000AECF,
0x0000AE3C,0x0000ADA8,0x0000AD14,0x0000AC80,
0x0000ABEB,0x0000AB56,0x0000AAC1,0x0000AA2A,
0x0000A994,0x0000A8FD,0x0000A866,0x0000A7CE,
0x0000A736,0x0000A69E,0x0000A605,0x0000A56C,
0x0000A4D2,0x0000A438,0x0000A39E,0x0000A303,
0x0000A268,0x0000A1CC,0x0000A130,0x0000A094,
0x00009FF7,0x00009F5A,0x00009EBC,0x00009E1E,
0x00009D80,0x00009CE1,0x00009C42,0x00009BA3,
0x00009B03,0x00009A63,0x000099C2,0x00009921,
0x00009880,0x000097DE,0x0000973C,0x0000969A,
0x000095F7,0x00009554,0x000094B0,0x0000940C,
0x00009368,0x000092C4,0x0000921F,0x00009179,
0x000090D4,0x0000902E,0x00008F88,0x00008EE1,
0x00008E3A,0x00008D93,0x00008CEB,0x00008C43,
0x00008B9A,0x00008AF2,0x00008A49,0x0000899F,
0x000088F6,0x0000884C,0x000087A1,0x000086F7,
0x0000864C,0x000085A0,0x000084F5,0x00008449,
0x0000839C,0x000082F0,0x00008243,0x00008195,
0x000080E8,0x0000803A,0x00007F8C,0x00007EDD,
0x00007E2F,0x00007D7F,0x00007CD0,0x00007C20,
0x00007B70,0x00007AC0,0x00007A10,0x0000795F,
0x000078AD,0x000077FC,0x0000774A,0x00007698,
0x000075E6,0x00007533,0x00007480,0x000073CD,
0x0000731A,0x00007266,0x000071B2,0x000070FE,
0x00007049,0x00006F94,0x00006EDF,0x00006E2A,
0x00006D74,0x00006CBE,0x00006C08,0x00006B52,
0x00006A9B,0x000069E4,0x0000692D,0x00006876,
0x000067BE,0x00006706,0x0000664E,0x00006595,
0x000064DD,0x00006424,0x0000636B,0x000062B1,
0x000061F8,0x0000613E,0x00006084,0x00005FC9,
0x00005F0F,0x00005E54,0x00005D99,0x00005CDE,
0x00005C22,0x00005B66,0x00005AAA,0x000059EE,
0x00005932,0x00005875,0x000057B9,0x000056FC,
0x0000563E,0x00005581,0x000054C3,0x00005406,
0x00005348,0x00005289,0x000051CB,0x0000510C,
0x0000504D,0x00004F8E,0x00004ECF,0x00004E10,
0x00004D50,0x00004C90,0x00004BD1,0x00004B10,
0x00004A50,0x00004990,0x000048CF,0x0000480E,
0x0000474D,0x0000468C,0x000045CB,0x00004509,
0x00004447,0x00004385,0x000042C3,0x00004201,
0x0000413F,0x0000407C,0x00003FBA,0x00003EF7,
0x00003E34,0x00003D71,0x00003CAE,0x00003BEA,
0x00003B27,0x00003A63,0x0000399F,0x000038DB,
0x00003817,0x00003753,0x0000368E,0x000035CA,
0x00003505,0x00003440,0x0000337C,0x000032B7,
0x000031F1,0x0000312C,0x00003067,0x00002FA1,
0x00002EDC,0x00002E16,0x00002D50,0x00002C8A,
0x00002BC4,0x00002AFE,0x00002A38,0x00002971,
0x000028AB,0x000027E4,0x0000271E,0x00002657,
0x00002590,0x000024C9,0x00002402,0x0000233B,
0x00002274,0x000021AD,0x000020E5,0x0000201E,
0x00001F56,0x00001E8F,0x00001DC7,0x00001CFF,
0x00001C38,0x00001B70,0x00001AA8,0x000019E0,
0x00001918,0x00001850,0x00001787,0x000016BF,
0x000015F7,0x0000152E,0x00001466,0x0000139E,
0x000012D5,0x0000120D,0x00001144,0x0000107B,
0x00000FB3,0x00000EEA,0x00000E21,0x00000D59,
0x00000C90,0x00000BC7,0x00000AFE,0x00000A35,
0x0000096C,0x000008A3,0x000007DA,0x00000711,
0x00000648,0x0000057F,0x000004B6,0x000003ED,
0x00000324, 0x0000025B, 0x00000192, 0x000000C9,

0x00000000,0xFFFFFF37,0xFFFFFE6E,0xFFFFFDA5,
0xFFFFFCDC,0xFFFFFC13,0xFFFFFB4A,0xFFFFFA81,
0xFFFFF9B8,0xFFFFF8EF,0xFFFFF826,0xFFFFF75D,
0xFFFFF694,0xFFFFF5CB,0xFFFFF502,0xFFFFF439,
0xFFFFF370,0xFFFFF2A7,0xFFFFF1DF,0xFFFFF116,
0xFFFFF04D,0xFFFFEF85,0xFFFFEEBC,0xFFFFEDF3,
0xFFFFED2B,0xFFFFEC62,0xFFFFEB9A,0xFFFFEAD2,
0xFFFFEA09,0xFFFFE941,0xFFFFE879,0xFFFFE7B0,
0xFFFFE6E8,0xFFFFE620,0xFFFFE558,0xFFFFE490,
0xFFFFE3C8,0xFFFFE301,0xFFFFE239,0xFFFFE171,
0xFFFFE0AA,0xFFFFDFE2,0xFFFFDF1B,0xFFFFDE53,
0xFFFFDD8C,0xFFFFDCC5,0xFFFFDBFE,0xFFFFDB37,
0xFFFFDA70,0xFFFFD9A9,0xFFFFD8E2,0xFFFFD81C,
0xFFFFD755,0xFFFFD68F,0xFFFFD5C8,0xFFFFD502,
0xFFFFD43C,0xFFFFD376,0xFFFFD2B0,0xFFFFD1EA,
0xFFFFD124,0xFFFFD05F,0xFFFFCF99,0xFFFFCED4,
0xFFFFCE0F,0xFFFFCD49,0xFFFFCC84,0xFFFFCBC0,
0xFFFFCAFB,0xFFFFCA36,0xFFFFC972,0xFFFFC8AD,
0xFFFFC7E9,0xFFFFC725,0xFFFFC661,0xFFFFC59D,
0xFFFFC4D9,0xFFFFC416,0xFFFFC352,0xFFFFC28F,
0xFFFFC1CC,0xFFFFC109,0xFFFFC046,0xFFFFBF84,
0xFFFFBEC1,0xFFFFBDFF,0xFFFFBD3D,0xFFFFBC7B,
0xFFFFBBB9,0xFFFFBAF7,0xFFFFBA35,0xFFFFB974,
0xFFFFB8B3,0xFFFFB7F2,0xFFFFB731,0xFFFFB670,
0xFFFFB5B0,0xFFFFB4F0,0xFFFFB42F,0xFFFFB370,
0xFFFFB2B0,0xFFFFB1F0,0xFFFFB131,0xFFFFB072,
0xFFFFAFB3,0xFFFFAEF4,0xFFFFAE35,0xFFFFAD77,
0xFFFFACB8,0xFFFFABFA,0xFFFFAB3D,0xFFFFAA7F,
0xFFFFA9C2,0xFFFFA904,0xFFFFA847,0xFFFFA78B,
0xFFFFA6CE,0xFFFFA612,0xFFFFA556,0xFFFFA49A,
0xFFFFA3DE,0xFFFFA322,0xFFFFA267,0xFFFFA1AC,
0xFFFFA0F1,0xFFFFA037,0xFFFF9F7C,0xFFFF9EC2,
0xFFFF9E08,0xFFFF9D4F,0xFFFF9C95,0xFFFF9BDC,
0xFFFF9B23,0xFFFF9A6B,0xFFFF99B2,0xFFFF98FA,
0xFFFF9842,0xFFFF978A,0xFFFF96D3,0xFFFF961C,
0xFFFF9565,0xFFFF94AE,0xFFFF93F8,0xFFFF9342,
0xFFFF928C,0xFFFF91D6,0xFFFF9121,0xFFFF906C,
0xFFFF8FB7,0xFFFF8F02,0xFFFF8E4E,0xFFFF8D9A,
0xFFFF8CE6,0xFFFF8C33,0xFFFF8B80,0xFFFF8ACD,
0xFFFF8A1A,0xFFFF8968,0xFFFF88B6,0xFFFF8804,
0xFFFF8753,0xFFFF86A1,0xFFFF85F0,0xFFFF8540,
0xFFFF8490,0xFFFF83E0,0xFFFF8330,0xFFFF8281,
0xFFFF81D1,0xFFFF8123,0xFFFF8074,0xFFFF7FC6,
0xFFFF7F18,0xFFFF7E6B,0xFFFF7DBD,0xFFFF7D10,
0xFFFF7C64,0xFFFF7BB7,0xFFFF7B0B,0xFFFF7A60,
0xFFFF79B4,0xFFFF7909,0xFFFF785F,0xFFFF77B4,
0xFFFF770A,0xFFFF7661,0xFFFF75B7,0xFFFF750E,
0xFFFF7466,0xFFFF73BD,0xFFFF7315,0xFFFF726D,
0xFFFF71C6,0xFFFF711F,0xFFFF7078,0xFFFF6FD2,
0xFFFF6F2C,0xFFFF6E87,0xFFFF6DE1,0xFFFF6D3C,
0xFFFF6C98,0xFFFF6BF4,0xFFFF6B50,0xFFFF6AAC,
0xFFFF6A09,0xFFFF6966,0xFFFF68C4,0xFFFF6822,
0xFFFF6780,0xFFFF66DF,0xFFFF663E,0xFFFF659D,
0xFFFF64FD,0xFFFF645D,0xFFFF63BE,0xFFFF631F,
0xFFFF6280,0xFFFF61E2,0xFFFF6144,0xFFFF60A6,
0xFFFF6009,0xFFFF5F6C,0xFFFF5ED0,0xFFFF5E34,
0xFFFF5D98,0xFFFF5CFD,0xFFFF5C62,0xFFFF5BC8,
0xFFFF5B2E,0xFFFF5A94,0xFFFF59FB,0xFFFF5962,
0xFFFF58CA,0xFFFF5832,0xFFFF579A,0xFFFF5703,
0xFFFF566C,0xFFFF55D6,0xFFFF553F,0xFFFF54AA,
0xFFFF5415,0xFFFF5380,0xFFFF52EC,0xFFFF5258,
0xFFFF51C4,0xFFFF5131,0xFFFF509E,0xFFFF500C,
0xFFFF4F7A,0xFFFF4EE9,0xFFFF4E58,0xFFFF4DC7,
0xFFFF4D37,0xFFFF4CA8,0xFFFF4C18,0xFFFF4B89,
0xFFFF4AFB,0xFFFF4A6D,0xFFFF49E0,0xFFFF4953,
0xFFFF48C6,0xFFFF483A,0xFFFF47AE,0xFFFF4723,
0xFFFF4698,0xFFFF460D,0xFFFF4583,0xFFFF44FA,
0xFFFF4471,0xFFFF43E8,0xFFFF4360,0xFFFF42D8,
0xFFFF4251,0xFFFF41CA,0xFFFF4144,0xFFFF40BE,
0xFFFF4039,0xFFFF3FB4,0xFFFF3F2F,0xFFFF3EAB,
0xFFFF3E28,0xFFFF3DA4,0xFFFF3D22,0xFFFF3CA0,
0xFFFF3C1E,0xFFFF3B9D,0xFFFF3B1C,0xFFFF3A9C,
0xFFFF3A1C,0xFFFF399D,0xFFFF391E,0xFFFF389F,
0xFFFF3822,0xFFFF37A4,0xFFFF3727,0xFFFF36AB,
0xFFFF362F,0xFFFF35B3,0xFFFF3539,0xFFFF34BE,
0xFFFF3444,0xFFFF33CB,0xFFFF3352,0xFFFF32D9,
0xFFFF3261,0xFFFF31E9,0xFFFF3172,0xFFFF30FC,
0xFFFF3086,0xFFFF3010,0xFFFF2F9B,0xFFFF2F27,
0xFFFF2EB3,0xFFFF2E3F,0xFFFF2DCC,0xFFFF2D5A,
0xFFFF2CE8,0xFFFF2C76,0xFFFF2C05,0xFFFF2B95,
0xFFFF2B25,0xFFFF2AB5,0xFFFF2A46,0xFFFF29D8,
0xFFFF296A,0xFFFF28FD,0xFFFF2890,0xFFFF2824,
0xFFFF27B8,0xFFFF274C,0xFFFF26E2,0xFFFF2677,
0xFFFF260E,0xFFFF25A4,0xFFFF253C,0xFFFF24D4,
0xFFFF246C,0xFFFF2405,0xFFFF239E,0xFFFF2338,
0xFFFF22D3,0xFFFF226E,0xFFFF2209,0xFFFF21A5,
0xFFFF2142,0xFFFF20DF,0xFFFF207D,0xFFFF201B,
0xFFFF1FBA,0xFFFF1F59,0xFFFF1EF9,0xFFFF1E99,
0xFFFF1E3A,0xFFFF1DDC,0xFFFF1D7E,0xFFFF1D21,
0xFFFF1CC4,0xFFFF1C67,0xFFFF1C0C,0xFFFF1BB0,
0xFFFF1B56,0xFFFF1AFC,0xFFFF1AA2,0xFFFF1A49,
0xFFFF19F0,0xFFFF1999,0xFFFF1941,0xFFFF18EA,
0xFFFF1894,0xFFFF183E,0xFFFF17E9,0xFFFF1795,
0xFFFF1741,0xFFFF16ED,0xFFFF169A,0xFFFF1648,
0xFFFF15F6,0xFFFF15A5,0xFFFF1555,0xFFFF1504,
0xFFFF14B5,0xFFFF1466,0xFFFF1418,0xFFFF13CA,
0xFFFF137D,0xFFFF1330,0xFFFF12E4,0xFFFF1298,
0xFFFF124D,0xFFFF1203,0xFFFF11B9,0xFFFF1170,
0xFFFF1127,0xFFFF10DF,0xFFFF1098,0xFFFF1051,
0xFFFF100B,0xFFFF0FC5,0xFFFF0F80,0xFFFF0F3B,
0xFFFF0EF7,0xFFFF0EB4,0xFFFF0E71,0xFFFF0E2E,
0xFFFF0DED,0xFFFF0DAC,0xFFFF0D6B,0xFFFF0D2B,
0xFFFF0CEC,0xFFFF0CAD,0xFFFF0C6F,0xFFFF0C31,
0xFFFF0BF4,0xFFFF0BB8,0xFFFF0B7C,0xFFFF0B41,
0xFFFF0B06,0xFFFF0ACC,0xFFFF0A92,0xFFFF0A5A,
0xFFFF0A21,0xFFFF09EA,0xFFFF09B2,0xFFFF097C,
0xFFFF0946,0xFFFF0911,0xFFFF08DC,0xFFFF08A8,
0xFFFF0874,0xFFFF0841,0xFFFF080F,0xFFFF07DD,
0xFFFF07AC,0xFFFF077B,0xFFFF074C,0xFFFF071C,
0xFFFF06ED,0xFFFF06BF,0xFFFF0692,0xFFFF0665,
0xFFFF0638,0xFFFF060D,0xFFFF05E1,0xFFFF05B7,
0xFFFF058D,0xFFFF0564,0xFFFF053B,0xFFFF0513,
0xFFFF04EB,0xFFFF04C4,0xFFFF049E,0xFFFF0478,
0xFFFF0453,0xFFFF042F,0xFFFF040B,0xFFFF03E8,
0xFFFF03C5,0xFFFF03A3,0xFFFF0381,0xFFFF0360,
0xFFFF0340,0xFFFF0321,0xFFFF0302,0xFFFF02E3,
0xFFFF02C5,0xFFFF02A8,0xFFFF028C,0xFFFF0270,
0xFFFF0254,0xFFFF0239,0xFFFF021F,0xFFFF0206,
0xFFFF01ED,0xFFFF01D5,0xFFFF01BD,0xFFFF01A6,
0xFFFF018F,0xFFFF0179,0xFFFF0164,0xFFFF0150,
0xFFFF013C,0xFFFF0128,0xFFFF0115,0xFFFF0103,
0xFFFF00F2,0xFFFF00E1,0xFFFF00D0,0xFFFF00C1,
0xFFFF00B2,0xFFFF00A3,0xFFFF0095,0xFFFF0088,
0xFFFF007B,0xFFFF006F,0xFFFF0064,0xFFFF0059,
0xFFFF004F,0xFFFF0045,0xFFFF003C,0xFFFF0034,
0xFFFF002C,0xFFFF0025,0xFFFF001F,0xFFFF0019,
0xFFFF0014,0xFFFF000F,0xFFFF000B,0xFFFF0008,
0xFFFF0005,0xFFFF0003,0xFFFF0001,0xFFFF0000,
0xFFFF0000,0xFFFF0000,0xFFFF0001,0xFFFF0003,
0xFFFF0005,0xFFFF0008,0xFFFF000B,0xFFFF000F,
0xFFFF0014,0xFFFF0019,0xFFFF001F,0xFFFF0025,
0xFFFF002C,0xFFFF0034,0xFFFF003C,0xFFFF0045,
0xFFFF004F,0xFFFF0059,0xFFFF0064,0xFFFF006F,
0xFFFF007B,0xFFFF0088,0xFFFF0095,0xFFFF00A3,
0xFFFF00B2,0xFFFF00C1,0xFFFF00D0,0xFFFF00E1,
0xFFFF00F2,0xFFFF0103,0xFFFF0115,0xFFFF0128,
0xFFFF013C,0xFFFF0150,0xFFFF0164,0xFFFF0179,
0xFFFF018F,0xFFFF01A6,0xFFFF01BD,0xFFFF01D5,
0xFFFF01ED,0xFFFF0206,0xFFFF021F,0xFFFF0239,
0xFFFF0254,0xFFFF0270,0xFFFF028C,0xFFFF02A8,
0xFFFF02C5,0xFFFF02E3,0xFFFF0302,0xFFFF0321,
0xFFFF0340,0xFFFF0360,0xFFFF0381,0xFFFF03A3,
0xFFFF03C5,0xFFFF03E8,0xFFFF040B,0xFFFF042F,
0xFFFF0453,0xFFFF0478,0xFFFF049E,0xFFFF04C4,
0xFFFF04EB,0xFFFF0513,0xFFFF053B,0xFFFF0564,
0xFFFF058D,0xFFFF05B7,0xFFFF05E1,0xFFFF060D,
0xFFFF0638,0xFFFF0665,0xFFFF0692,0xFFFF06BF,
0xFFFF06ED,0xFFFF071C,0xFFFF074C,0xFFFF077B,
0xFFFF07AC,0xFFFF07DD,0xFFFF080F,0xFFFF0841,
0xFFFF0874,0xFFFF08A8,0xFFFF08DC,0xFFFF0911,
0xFFFF0946,0xFFFF097C,0xFFFF09B2,0xFFFF09EA,
0xFFFF0A21,0xFFFF0A5A,0xFFFF0A92,0xFFFF0ACC,
0xFFFF0B06,0xFFFF0B41,0xFFFF0B7C,0xFFFF0BB8,
0xFFFF0BF4,0xFFFF0C31,0xFFFF0C6F,0xFFFF0CAD,
0xFFFF0CEC,0xFFFF0D2B,0xFFFF0D6B,0xFFFF0DAC,
0xFFFF0DED,0xFFFF0E2E,0xFFFF0E71,0xFFFF0EB4,
0xFFFF0EF7,0xFFFF0F3B,0xFFFF0F80,0xFFFF0FC5,
0xFFFF100B,0xFFFF1051,0xFFFF1098,0xFFFF10DF,
0xFFFF1127,0xFFFF1170,0xFFFF11B9,0xFFFF1203,
0xFFFF124D,0xFFFF1298,0xFFFF12E4,0xFFFF1330,
0xFFFF137D,0xFFFF13CA,0xFFFF1418,0xFFFF1466,
0xFFFF14B5,0xFFFF1504,0xFFFF1555,0xFFFF15A5,
0xFFFF15F6,0xFFFF1648,0xFFFF169A,0xFFFF16ED,
0xFFFF1741,0xFFFF1795,0xFFFF17E9,0xFFFF183E,
0xFFFF1894,0xFFFF18EA,0xFFFF1941,0xFFFF1999,
0xFFFF19F0,0xFFFF1A49,0xFFFF1AA2,0xFFFF1AFC,
0xFFFF1B56,0xFFFF1BB0,0xFFFF1C0C,0xFFFF1C67,
0xFFFF1CC4,0xFFFF1D21,0xFFFF1D7E,0xFFFF1DDC,
0xFFFF1E3A,0xFFFF1E99,0xFFFF1EF9,0xFFFF1F59,
0xFFFF1FBA,0xFFFF201B,0xFFFF207D,0xFFFF20DF,
0xFFFF2142,0xFFFF21A5,0xFFFF2209,0xFFFF226E,
0xFFFF22D3,0xFFFF2338,0xFFFF239E,0xFFFF2405,
0xFFFF246C,0xFFFF24D4,0xFFFF253C,0xFFFF25A4,
0xFFFF260E,0xFFFF2677,0xFFFF26E2,0xFFFF274C,
0xFFFF27B8,0xFFFF2824,0xFFFF2890,0xFFFF28FD,
0xFFFF296A,0xFFFF29D8,0xFFFF2A46,0xFFFF2AB5,
0xFFFF2B25,0xFFFF2B95,0xFFFF2C05,0xFFFF2C76,
0xFFFF2CE8,0xFFFF2D5A,0xFFFF2DCC,0xFFFF2E3F,
0xFFFF2EB3,0xFFFF2F27,0xFFFF2F9B,0xFFFF3010,
0xFFFF3086,0xFFFF30FC,0xFFFF3172,0xFFFF31E9,
0xFFFF3261,0xFFFF32D9,0xFFFF3352,0xFFFF33CB,
0xFFFF3444,0xFFFF34BE,0xFFFF3539,0xFFFF35B3,
0xFFFF362F,0xFFFF36AB,0xFFFF3727,0xFFFF37A4,
0xFFFF3822,0xFFFF389F,0xFFFF391E,0xFFFF399D,
0xFFFF3A1C,0xFFFF3A9C,0xFFFF3B1C,0xFFFF3B9D,
0xFFFF3C1E,0xFFFF3CA0,0xFFFF3D22,0xFFFF3DA4,
0xFFFF3E28,0xFFFF3EAB,0xFFFF3F2F,0xFFFF3FB4,
0xFFFF4039,0xFFFF40BE,0xFFFF4144,0xFFFF41CA,
0xFFFF4251,0xFFFF42D8,0xFFFF4360,0xFFFF43E8,
0xFFFF4471,0xFFFF44FA,0xFFFF4583,0xFFFF460D,
0xFFFF4698,0xFFFF4723,0xFFFF47AE,0xFFFF483A,
0xFFFF48C6,0xFFFF4953,0xFFFF49E0,0xFFFF4A6D,
0xFFFF4AFB,0xFFFF4B89,0xFFFF4C18,0xFFFF4CA8,
0xFFFF4D37,0xFFFF4DC7,0xFFFF4E58,0xFFFF4EE9,
0xFFFF4F7A,0xFFFF500C,0xFFFF509E,0xFFFF5131,
0xFFFF51C4,0xFFFF5258,0xFFFF52EC,0xFFFF5380,
0xFFFF5415,0xFFFF54AA,0xFFFF553F,0xFFFF55D6,
0xFFFF566C,0xFFFF5703,0xFFFF579A,0xFFFF5832,
0xFFFF58CA,0xFFFF5962,0xFFFF59FB,0xFFFF5A94,
0xFFFF5B2E,0xFFFF5BC8,0xFFFF5C62,0xFFFF5CFD,
0xFFFF5D98,0xFFFF5E34,0xFFFF5ED0,0xFFFF5F6C,
0xFFFF6009,0xFFFF60A6,0xFFFF6144,0xFFFF61E2,
0xFFFF6280,0xFFFF631F,0xFFFF63BE,0xFFFF645D,
0xFFFF64FD,0xFFFF659D,0xFFFF663E,0xFFFF66DF,
0xFFFF6780,0xFFFF6822,0xFFFF68C4,0xFFFF6966,
0xFFFF6A09,0xFFFF6AAC,0xFFFF6B50,0xFFFF6BF4,
0xFFFF6C98,0xFFFF6D3C,0xFFFF6DE1,0xFFFF6E87,
0xFFFF6F2C,0xFFFF6FD2,0xFFFF7078,0xFFFF711F,
0xFFFF71C6,0xFFFF726D,0xFFFF7315,0xFFFF73BD,
0xFFFF7466,0xFFFF750E,0xFFFF75B7,0xFFFF7661,
0xFFFF770A,0xFFFF77B4,0xFFFF785F,0xFFFF7909,
0xFFFF79B4,0xFFFF7A60,0xFFFF7B0B,0xFFFF7BB7,
0xFFFF7C64,0xFFFF7D10,0xFFFF7DBD,0xFFFF7E6B,
0xFFFF7F18,0xFFFF7FC6,0xFFFF8074,0xFFFF8123,
0xFFFF81D1,0xFFFF8281,0xFFFF8330,0xFFFF83E0,
0xFFFF8490,0xFFFF8540,0xFFFF85F0,0xFFFF86A1,
0xFFFF8753,0xFFFF8804,0xFFFF88B6,0xFFFF8968,
0xFFFF8A1A,0xFFFF8ACD,0xFFFF8B80,0xFFFF8C33,
0xFFFF8CE6,0xFFFF8D9A,0xFFFF8E4E,0xFFFF8F02,
0xFFFF8FB7,0xFFFF906C,0xFFFF9121,0xFFFF91D6,
0xFFFF928C,0xFFFF9342,0xFFFF93F8,0xFFFF94AE,
0xFFFF9565,0xFFFF961C,0xFFFF96D3,0xFFFF978A,
0xFFFF9842,0xFFFF98FA,0xFFFF99B2,0xFFFF9A6B,
0xFFFF9B23,0xFFFF9BDC,0xFFFF9C95,0xFFFF9D4F,
0xFFFF9E08,0xFFFF9EC2,0xFFFF9F7C,0xFFFFA037,
0xFFFFA0F1,0xFFFFA1AC,0xFFFFA267,0xFFFFA322,
0xFFFFA3DE,0xFFFFA49A,0xFFFFA556,0xFFFFA612,
0xFFFFA6CE,0xFFFFA78B,0xFFFFA847,0xFFFFA904,
0xFFFFA9C2,0xFFFFAA7F,0xFFFFAB3D,0xFFFFABFA,
0xFFFFACB8,0xFFFFAD77,0xFFFFAE35,0xFFFFAEF4,
0xFFFFAFB3,0xFFFFB072,0xFFFFB131,0xFFFFB1F0,
0xFFFFB2B0,0xFFFFB370,0xFFFFB42F,0xFFFFB4F0,
0xFFFFB5B0,0xFFFFB670,0xFFFFB731,0xFFFFB7F2,
0xFFFFB8B3,0xFFFFB974,0xFFFFBA35,0xFFFFBAF7,
0xFFFFBBB9,0xFFFFBC7B,0xFFFFBD3D,0xFFFFBDFF,
0xFFFFBEC1,0xFFFFBF84,0xFFFFC046,0xFFFFC109,
0xFFFFC1CC,0xFFFFC28F,0xFFFFC352,0xFFFFC416,
0xFFFFC4D9,0xFFFFC59D,0xFFFFC661,0xFFFFC725,
0xFFFFC7E9,0xFFFFC8AD,0xFFFFC972,0xFFFFCA36,
0xFFFFCAFB,0xFFFFCBC0,0xFFFFCC84,0xFFFFCD49,
0xFFFFCE0F,0xFFFFCED4,0xFFFFCF99,0xFFFFD05F,
0xFFFFD124,0xFFFFD1EA,0xFFFFD2B0,0xFFFFD376,
0xFFFFD43C,0xFFFFD502,0xFFFFD5C8,0xFFFFD68F,
0xFFFFD755,0xFFFFD81C,0xFFFFD8E2,0xFFFFD9A9,
0xFFFFDA70,0xFFFFDB37,0xFFFFDBFE,0xFFFFDCC5,
0xFFFFDD8C,0xFFFFDE53,0xFFFFDF1B,0xFFFFDFE2,
0xFFFFE0AA,0xFFFFE171,0xFFFFE239,0xFFFFE301,
0xFFFFE3C8,0xFFFFE490,0xFFFFE558,0xFFFFE620,
0xFFFFE6E8,0xFFFFE7B0,0xFFFFE879,0xFFFFE941,
0xFFFFEA09,0xFFFFEAD2,0xFFFFEB9A,0xFFFFEC62,
0xFFFFED2B,0xFFFFEDF3,0xFFFFEEBC,0xFFFFEF85,
0xFFFFF04D,0xFFFFF116,0xFFFFF1DF,0xFFFFF2A7,
0xFFFFF370,0xFFFFF439,0xFFFFF502,0xFFFFF5CB,
0xFFFFF694,0xFFFFF75D,0xFFFFF826,0xFFFFF8EF,
0xFFFFF9B8,0xFFFFFA81,0xFFFFFB4A,0xFFFFFC13,
0xFFFFFCDC, 0xFFFFFDA5, 0xFFFFFE6E, 0xFFFFFF37 };

int32 cos_9134C[(256 + 256 + 256 + 256) * 2] = {
0x00010000,0x00010000,0x0000FFFF,0x0000FFFD,
0x0000FFFB,0x0000FFF8,0x0000FFF5,0x0000FFF1,
0x0000FFEC,0x0000FFE7,0x0000FFE1,0x0000FFDB,
0x0000FFD4,0x0000FFCC,0x0000FFC4,0x0000FFBB,
0x0000FFB1,0x0000FFA7,0x0000FF9C,0x0000FF91,
0x0000FF85,0x0000FF78,0x0000FF6B,0x0000FF5D,
0x0000FF4E,0x0000FF3F,0x0000FF30,0x0000FF1F,
0x0000FF0E,0x0000FEFD,0x0000FEEB,0x0000FED8,
0x0000FEC4,0x0000FEB0,0x0000FE9C,0x0000FE87,
0x0000FE71,0x0000FE5A,0x0000FE43,0x0000FE2B,
0x0000FE13,0x0000FDFA,0x0000FDE1,0x0000FDC7,
0x0000FDAC,0x0000FD90,0x0000FD74,0x0000FD58,
0x0000FD3B,0x0000FD1D,0x0000FCFE,0x0000FCDF,
0x0000FCC0,0x0000FCA0,0x0000FC7F,0x0000FC5D,
0x0000FC3B,0x0000FC18,0x0000FBF5,0x0000FBD1,
0x0000FBAD,0x0000FB88,0x0000FB62,0x0000FB3C,
0x0000FB15,0x0000FAED,0x0000FAC5,0x0000FA9C,
0x0000FA73,0x0000FA49,0x0000FA1F,0x0000F9F3,
0x0000F9C8,0x0000F99B,0x0000F96E,0x0000F941,
0x0000F913,0x0000F8E4,0x0000F8B4,0x0000F885,
0x0000F854,0x0000F823,0x0000F7F1,0x0000F7BF,
0x0000F78C,0x0000F758,0x0000F724,0x0000F6EF,
0x0000F6BA,0x0000F684,0x0000F64E,0x0000F616,
0x0000F5DF,0x0000F5A6,0x0000F56E,0x0000F534,
0x0000F4FA,0x0000F4BF,0x0000F484,0x0000F448,
0x0000F40C,0x0000F3CF,0x0000F391,0x0000F353,
0x0000F314,0x0000F2D5,0x0000F295,0x0000F254,
0x0000F213,0x0000F1D2,0x0000F18F,0x0000F14C,
0x0000F109,0x0000F0C5,0x0000F080,0x0000F03B,
0x0000EFF5,0x0000EFAF,0x0000EF68,0x0000EF21,
0x0000EED9,0x0000EE90,0x0000EE47,0x0000EDFD,
0x0000EDB3,0x0000ED68,0x0000ED1C,0x0000ECD0,
0x0000EC83,0x0000EC36,0x0000EBE8,0x0000EB9A,
0x0000EB4B,0x0000EAFC,0x0000EAAB,0x0000EA5B,
0x0000EA0A,0x0000E9B8,0x0000E966,0x0000E913,
0x0000E8BF,0x0000E86B,0x0000E817,0x0000E7C2,
0x0000E76C,0x0000E716,0x0000E6BF,0x0000E667,
0x0000E610,0x0000E5B7,0x0000E55E,0x0000E504,
0x0000E4AA,0x0000E450,0x0000E3F4,0x0000E399,
0x0000E33C,0x0000E2DF,0x0000E282,0x0000E224,
0x0000E1C6,0x0000E167,0x0000E107,0x0000E0A7,
0x0000E046,0x0000DFE5,0x0000DF83,0x0000DF21,
0x0000DEBE,0x0000DE5B,0x0000DDF7,0x0000DD92,
0x0000DD2D,0x0000DCC8,0x0000DC62,0x0000DBFB,
0x0000DB94,0x0000DB2C,0x0000DAC4,0x0000DA5C,
0x0000D9F2,0x0000D989,0x0000D91E,0x0000D8B4,
0x0000D848,0x0000D7DC,0x0000D770,0x0000D703,
0x0000D696,0x0000D628,0x0000D5BA,0x0000D54B,
0x0000D4DB,0x0000D46B,0x0000D3FB,0x0000D38A,
0x0000D318,0x0000D2A6,0x0000D234,0x0000D1C1,
0x0000D14D,0x0000D0D9,0x0000D065,0x0000CFF0,
0x0000CF7A,0x0000CF04,0x0000CE8E,0x0000CE17,
0x0000CD9F,0x0000CD27,0x0000CCAE,0x0000CC35,
0x0000CBBC,0x0000CB42,0x0000CAC7,0x0000CA4D,
0x0000C9D1,0x0000C955,0x0000C8D9,0x0000C85C,
0x0000C7DE,0x0000C761,0x0000C6E2,0x0000C663,
0x0000C5E4,0x0000C564,0x0000C4E4,0x0000C463,
0x0000C3E2,0x0000C360,0x0000C2DE,0x0000C25C,
0x0000C1D8,0x0000C155,0x0000C0D1,0x0000C04C,
0x0000BFC7,0x0000BF42,0x0000BEBC,0x0000BE36,
0x0000BDAF,0x0000BD28,0x0000BCA0,0x0000BC18,
0x0000BB8F,0x0000BB06,0x0000BA7D,0x0000B9F3,
0x0000B968,0x0000B8DD,0x0000B852,0x0000B7C6,
0x0000B73A,0x0000B6AD,0x0000B620,0x0000B593,
0x0000B505,0x0000B477,0x0000B3E8,0x0000B358,
0x0000B2C9,0x0000B239,0x0000B1A8,0x0000B117,
0x0000B086,0x0000AFF4,0x0000AF62,0x0000AECF,
0x0000AE3C,0x0000ADA8,0x0000AD14,0x0000AC80,
0x0000ABEB,0x0000AB56,0x0000AAC1,0x0000AA2A,
0x0000A994,0x0000A8FD,0x0000A866,0x0000A7CE,
0x0000A736,0x0000A69E,0x0000A605,0x0000A56C,
0x0000A4D2,0x0000A438,0x0000A39E,0x0000A303,
0x0000A268,0x0000A1CC,0x0000A130,0x0000A094,
0x00009FF7,0x00009F5A,0x00009EBC,0x00009E1E,
0x00009D80,0x00009CE1,0x00009C42,0x00009BA3,
0x00009B03,0x00009A63,0x000099C2,0x00009921,
0x00009880,0x000097DE,0x0000973C,0x0000969A,
0x000095F7,0x00009554,0x000094B0,0x0000940C,
0x00009368,0x000092C4,0x0000921F,0x00009179,
0x000090D4,0x0000902E,0x00008F88,0x00008EE1,
0x00008E3A,0x00008D93,0x00008CEB,0x00008C43,
0x00008B9A,0x00008AF2,0x00008A49,0x0000899F,
0x000088F6,0x0000884C,0x000087A1,0x000086F7,
0x0000864C,0x000085A0,0x000084F5,0x00008449,
0x0000839C,0x000082F0,0x00008243,0x00008195,
0x000080E8,0x0000803A,0x00007F8C,0x00007EDD,
0x00007E2F,0x00007D7F,0x00007CD0,0x00007C20,
0x00007B70,0x00007AC0,0x00007A10,0x0000795F,
0x000078AD,0x000077FC,0x0000774A,0x00007698,
0x000075E6,0x00007533,0x00007480,0x000073CD,
0x0000731A,0x00007266,0x000071B2,0x000070FE,
0x00007049,0x00006F94,0x00006EDF,0x00006E2A,
0x00006D74,0x00006CBE,0x00006C08,0x00006B52,
0x00006A9B,0x000069E4,0x0000692D,0x00006876,
0x000067BE,0x00006706,0x0000664E,0x00006595,
0x000064DD,0x00006424,0x0000636B,0x000062B1,
0x000061F8,0x0000613E,0x00006084,0x00005FC9,
0x00005F0F,0x00005E54,0x00005D99,0x00005CDE,
0x00005C22,0x00005B66,0x00005AAA,0x000059EE,
0x00005932,0x00005875,0x000057B9,0x000056FC,
0x0000563E,0x00005581,0x000054C3,0x00005406,
0x00005348,0x00005289,0x000051CB,0x0000510C,
0x0000504D,0x00004F8E,0x00004ECF,0x00004E10,
0x00004D50,0x00004C90,0x00004BD1,0x00004B10,
0x00004A50,0x00004990,0x000048CF,0x0000480E,
0x0000474D,0x0000468C,0x000045CB,0x00004509,
0x00004447,0x00004385,0x000042C3,0x00004201,
0x0000413F,0x0000407C,0x00003FBA,0x00003EF7,
0x00003E34,0x00003D71,0x00003CAE,0x00003BEA,
0x00003B27,0x00003A63,0x0000399F,0x000038DB,
0x00003817,0x00003753,0x0000368E,0x000035CA,
0x00003505,0x00003440,0x0000337C,0x000032B7,
0x000031F1,0x0000312C,0x00003067,0x00002FA1,
0x00002EDC,0x00002E16,0x00002D50,0x00002C8A,
0x00002BC4,0x00002AFE,0x00002A38,0x00002971,
0x000028AB,0x000027E4,0x0000271E,0x00002657,
0x00002590,0x000024C9,0x00002402,0x0000233B,
0x00002274,0x000021AD,0x000020E5,0x0000201E,
0x00001F56,0x00001E8F,0x00001DC7,0x00001CFF,
0x00001C38,0x00001B70,0x00001AA8,0x000019E0,
0x00001918,0x00001850,0x00001787,0x000016BF,
0x000015F7,0x0000152E,0x00001466,0x0000139E,
0x000012D5,0x0000120D,0x00001144,0x0000107B,
0x00000FB3,0x00000EEA,0x00000E21,0x00000D59,
0x00000C90,0x00000BC7,0x00000AFE,0x00000A35,
0x0000096C,0x000008A3,0x000007DA,0x00000711,
0x00000648,0x0000057F,0x000004B6,0x000003ED,
0x00000324,0x0000025B,0x00000192,0x000000C9,
0x00000000,0xFFFFFF37,0xFFFFFE6E,0xFFFFFDA5,
0xFFFFFCDC,0xFFFFFC13,0xFFFFFB4A,0xFFFFFA81,
0xFFFFF9B8,0xFFFFF8EF,0xFFFFF826,0xFFFFF75D,
0xFFFFF694,0xFFFFF5CB,0xFFFFF502,0xFFFFF439,
0xFFFFF370,0xFFFFF2A7,0xFFFFF1DF,0xFFFFF116,
0xFFFFF04D,0xFFFFEF85,0xFFFFEEBC,0xFFFFEDF3,
0xFFFFED2B,0xFFFFEC62,0xFFFFEB9A,0xFFFFEAD2,
0xFFFFEA09,0xFFFFE941,0xFFFFE879,0xFFFFE7B0,
0xFFFFE6E8,0xFFFFE620,0xFFFFE558,0xFFFFE490,
0xFFFFE3C8,0xFFFFE301,0xFFFFE239,0xFFFFE171,
0xFFFFE0AA,0xFFFFDFE2,0xFFFFDF1B,0xFFFFDE53,
0xFFFFDD8C,0xFFFFDCC5,0xFFFFDBFE,0xFFFFDB37,
0xFFFFDA70,0xFFFFD9A9,0xFFFFD8E2,0xFFFFD81C,
0xFFFFD755,0xFFFFD68F,0xFFFFD5C8,0xFFFFD502,
0xFFFFD43C,0xFFFFD376,0xFFFFD2B0,0xFFFFD1EA,
0xFFFFD124,0xFFFFD05F,0xFFFFCF99,0xFFFFCED4,
0xFFFFCE0F,0xFFFFCD49,0xFFFFCC84,0xFFFFCBC0,
0xFFFFCAFB,0xFFFFCA36,0xFFFFC972,0xFFFFC8AD,
0xFFFFC7E9,0xFFFFC725,0xFFFFC661,0xFFFFC59D,
0xFFFFC4D9,0xFFFFC416,0xFFFFC352,0xFFFFC28F,
0xFFFFC1CC,0xFFFFC109,0xFFFFC046,0xFFFFBF84,
0xFFFFBEC1,0xFFFFBDFF,0xFFFFBD3D,0xFFFFBC7B,
0xFFFFBBB9,0xFFFFBAF7,0xFFFFBA35,0xFFFFB974,
0xFFFFB8B3,0xFFFFB7F2,0xFFFFB731,0xFFFFB670,
0xFFFFB5B0,0xFFFFB4F0,0xFFFFB42F,0xFFFFB370,
0xFFFFB2B0,0xFFFFB1F0,0xFFFFB131,0xFFFFB072,
0xFFFFAFB3,0xFFFFAEF4,0xFFFFAE35,0xFFFFAD77,
0xFFFFACB8,0xFFFFABFA,0xFFFFAB3D,0xFFFFAA7F,
0xFFFFA9C2,0xFFFFA904,0xFFFFA847,0xFFFFA78B,
0xFFFFA6CE,0xFFFFA612,0xFFFFA556,0xFFFFA49A,
0xFFFFA3DE,0xFFFFA322,0xFFFFA267,0xFFFFA1AC,
0xFFFFA0F1,0xFFFFA037,0xFFFF9F7C,0xFFFF9EC2,
0xFFFF9E08,0xFFFF9D4F,0xFFFF9C95,0xFFFF9BDC,
0xFFFF9B23,0xFFFF9A6B,0xFFFF99B2,0xFFFF98FA,
0xFFFF9842,0xFFFF978A,0xFFFF96D3,0xFFFF961C,
0xFFFF9565,0xFFFF94AE,0xFFFF93F8,0xFFFF9342,
0xFFFF928C,0xFFFF91D6,0xFFFF9121,0xFFFF906C,
0xFFFF8FB7,0xFFFF8F02,0xFFFF8E4E,0xFFFF8D9A,
0xFFFF8CE6,0xFFFF8C33,0xFFFF8B80,0xFFFF8ACD,
0xFFFF8A1A,0xFFFF8968,0xFFFF88B6,0xFFFF8804,
0xFFFF8753,0xFFFF86A1,0xFFFF85F0,0xFFFF8540,
0xFFFF8490,0xFFFF83E0,0xFFFF8330,0xFFFF8281,
0xFFFF81D1,0xFFFF8123,0xFFFF8074,0xFFFF7FC6,
0xFFFF7F18,0xFFFF7E6B,0xFFFF7DBD,0xFFFF7D10,
0xFFFF7C64,0xFFFF7BB7,0xFFFF7B0B,0xFFFF7A60,
0xFFFF79B4,0xFFFF7909,0xFFFF785F,0xFFFF77B4,
0xFFFF770A,0xFFFF7661,0xFFFF75B7,0xFFFF750E,
0xFFFF7466,0xFFFF73BD,0xFFFF7315,0xFFFF726D,
0xFFFF71C6,0xFFFF711F,0xFFFF7078,0xFFFF6FD2,
0xFFFF6F2C,0xFFFF6E87,0xFFFF6DE1,0xFFFF6D3C,
0xFFFF6C98,0xFFFF6BF4,0xFFFF6B50,0xFFFF6AAC,
0xFFFF6A09,0xFFFF6966,0xFFFF68C4,0xFFFF6822,
0xFFFF6780,0xFFFF66DF,0xFFFF663E,0xFFFF659D,
0xFFFF64FD,0xFFFF645D,0xFFFF63BE,0xFFFF631F,
0xFFFF6280,0xFFFF61E2,0xFFFF6144,0xFFFF60A6,
0xFFFF6009,0xFFFF5F6C,0xFFFF5ED0,0xFFFF5E34,
0xFFFF5D98,0xFFFF5CFD,0xFFFF5C62,0xFFFF5BC8,
0xFFFF5B2E,0xFFFF5A94,0xFFFF59FB,0xFFFF5962,
0xFFFF58CA,0xFFFF5832,0xFFFF579A,0xFFFF5703,
0xFFFF566C,0xFFFF55D6,0xFFFF553F,0xFFFF54AA,
0xFFFF5415,0xFFFF5380,0xFFFF52EC,0xFFFF5258,
0xFFFF51C4,0xFFFF5131,0xFFFF509E,0xFFFF500C,
0xFFFF4F7A,0xFFFF4EE9,0xFFFF4E58,0xFFFF4DC7,
0xFFFF4D37,0xFFFF4CA8,0xFFFF4C18,0xFFFF4B89,
0xFFFF4AFB,0xFFFF4A6D,0xFFFF49E0,0xFFFF4953,
0xFFFF48C6,0xFFFF483A,0xFFFF47AE,0xFFFF4723,
0xFFFF4698,0xFFFF460D,0xFFFF4583,0xFFFF44FA,
0xFFFF4471,0xFFFF43E8,0xFFFF4360,0xFFFF42D8,
0xFFFF4251,0xFFFF41CA,0xFFFF4144,0xFFFF40BE,
0xFFFF4039,0xFFFF3FB4,0xFFFF3F2F,0xFFFF3EAB,
0xFFFF3E28,0xFFFF3DA4,0xFFFF3D22,0xFFFF3CA0,
0xFFFF3C1E,0xFFFF3B9D,0xFFFF3B1C,0xFFFF3A9C,
0xFFFF3A1C,0xFFFF399D,0xFFFF391E,0xFFFF389F,
0xFFFF3822,0xFFFF37A4,0xFFFF3727,0xFFFF36AB,
0xFFFF362F,0xFFFF35B3,0xFFFF3539,0xFFFF34BE,
0xFFFF3444,0xFFFF33CB,0xFFFF3352,0xFFFF32D9,
0xFFFF3261,0xFFFF31E9,0xFFFF3172,0xFFFF30FC,
0xFFFF3086,0xFFFF3010,0xFFFF2F9B,0xFFFF2F27,
0xFFFF2EB3,0xFFFF2E3F,0xFFFF2DCC,0xFFFF2D5A,
0xFFFF2CE8,0xFFFF2C76,0xFFFF2C05,0xFFFF2B95,
0xFFFF2B25,0xFFFF2AB5,0xFFFF2A46,0xFFFF29D8,
0xFFFF296A,0xFFFF28FD,0xFFFF2890,0xFFFF2824,
0xFFFF27B8,0xFFFF274C,0xFFFF26E2,0xFFFF2677,
0xFFFF260E,0xFFFF25A4,0xFFFF253C,0xFFFF24D4,
0xFFFF246C,0xFFFF2405,0xFFFF239E,0xFFFF2338,
0xFFFF22D3,0xFFFF226E,0xFFFF2209,0xFFFF21A5,
0xFFFF2142,0xFFFF20DF,0xFFFF207D,0xFFFF201B,
0xFFFF1FBA,0xFFFF1F59,0xFFFF1EF9,0xFFFF1E99,
0xFFFF1E3A,0xFFFF1DDC,0xFFFF1D7E,0xFFFF1D21,
0xFFFF1CC4,0xFFFF1C67,0xFFFF1C0C,0xFFFF1BB0,
0xFFFF1B56,0xFFFF1AFC,0xFFFF1AA2,0xFFFF1A49,
0xFFFF19F0,0xFFFF1999,0xFFFF1941,0xFFFF18EA,
0xFFFF1894,0xFFFF183E,0xFFFF17E9,0xFFFF1795,
0xFFFF1741,0xFFFF16ED,0xFFFF169A,0xFFFF1648,
0xFFFF15F6,0xFFFF15A5,0xFFFF1555,0xFFFF1504,
0xFFFF14B5,0xFFFF1466,0xFFFF1418,0xFFFF13CA,
0xFFFF137D,0xFFFF1330,0xFFFF12E4,0xFFFF1298,
0xFFFF124D,0xFFFF1203,0xFFFF11B9,0xFFFF1170,
0xFFFF1127,0xFFFF10DF,0xFFFF1098,0xFFFF1051,
0xFFFF100B,0xFFFF0FC5,0xFFFF0F80,0xFFFF0F3B,
0xFFFF0EF7,0xFFFF0EB4,0xFFFF0E71,0xFFFF0E2E,
0xFFFF0DED,0xFFFF0DAC,0xFFFF0D6B,0xFFFF0D2B,
0xFFFF0CEC,0xFFFF0CAD,0xFFFF0C6F,0xFFFF0C31,
0xFFFF0BF4,0xFFFF0BB8,0xFFFF0B7C,0xFFFF0B41,
0xFFFF0B06,0xFFFF0ACC,0xFFFF0A92,0xFFFF0A5A,
0xFFFF0A21,0xFFFF09EA,0xFFFF09B2,0xFFFF097C,
0xFFFF0946,0xFFFF0911,0xFFFF08DC,0xFFFF08A8,
0xFFFF0874,0xFFFF0841,0xFFFF080F,0xFFFF07DD,
0xFFFF07AC,0xFFFF077B,0xFFFF074C,0xFFFF071C,
0xFFFF06ED,0xFFFF06BF,0xFFFF0692,0xFFFF0665,
0xFFFF0638,0xFFFF060D,0xFFFF05E1,0xFFFF05B7,
0xFFFF058D,0xFFFF0564,0xFFFF053B,0xFFFF0513,
0xFFFF04EB,0xFFFF04C4,0xFFFF049E,0xFFFF0478,
0xFFFF0453,0xFFFF042F,0xFFFF040B,0xFFFF03E8,
0xFFFF03C5,0xFFFF03A3,0xFFFF0381,0xFFFF0360,
0xFFFF0340,0xFFFF0321,0xFFFF0302,0xFFFF02E3,
0xFFFF02C5,0xFFFF02A8,0xFFFF028C,0xFFFF0270,
0xFFFF0254,0xFFFF0239,0xFFFF021F,0xFFFF0206,
0xFFFF01ED,0xFFFF01D5,0xFFFF01BD,0xFFFF01A6,
0xFFFF018F,0xFFFF0179,0xFFFF0164,0xFFFF0150,
0xFFFF013C,0xFFFF0128,0xFFFF0115,0xFFFF0103,
0xFFFF00F2,0xFFFF00E1,0xFFFF00D0,0xFFFF00C1,
0xFFFF00B2,0xFFFF00A3,0xFFFF0095,0xFFFF0088,
0xFFFF007B,0xFFFF006F,0xFFFF0064,0xFFFF0059,
0xFFFF004F,0xFFFF0045,0xFFFF003C,0xFFFF0034,
0xFFFF002C,0xFFFF0025,0xFFFF001F,0xFFFF0019,
0xFFFF0014,0xFFFF000F,0xFFFF000B,0xFFFF0008,
0xFFFF0005,0xFFFF0003,0xFFFF0001,0xFFFF0000,
0xFFFF0000,0xFFFF0000,0xFFFF0001,0xFFFF0003,
0xFFFF0005,0xFFFF0008,0xFFFF000B,0xFFFF000F,
0xFFFF0014,0xFFFF0019,0xFFFF001F,0xFFFF0025,
0xFFFF002C,0xFFFF0034,0xFFFF003C,0xFFFF0045,
0xFFFF004F,0xFFFF0059,0xFFFF0064,0xFFFF006F,
0xFFFF007B,0xFFFF0088,0xFFFF0095,0xFFFF00A3,
0xFFFF00B2,0xFFFF00C1,0xFFFF00D0,0xFFFF00E1,
0xFFFF00F2,0xFFFF0103,0xFFFF0115,0xFFFF0128,
0xFFFF013C,0xFFFF0150,0xFFFF0164,0xFFFF0179,
0xFFFF018F,0xFFFF01A6,0xFFFF01BD,0xFFFF01D5,
0xFFFF01ED,0xFFFF0206,0xFFFF021F,0xFFFF0239,
0xFFFF0254,0xFFFF0270,0xFFFF028C,0xFFFF02A8,
0xFFFF02C5,0xFFFF02E3,0xFFFF0302,0xFFFF0321,
0xFFFF0340,0xFFFF0360,0xFFFF0381,0xFFFF03A3,
0xFFFF03C5,0xFFFF03E8,0xFFFF040B,0xFFFF042F,
0xFFFF0453,0xFFFF0478,0xFFFF049E,0xFFFF04C4,
0xFFFF04EB,0xFFFF0513,0xFFFF053B,0xFFFF0564,
0xFFFF058D,0xFFFF05B7,0xFFFF05E1,0xFFFF060D,
0xFFFF0638,0xFFFF0665,0xFFFF0692,0xFFFF06BF,
0xFFFF06ED,0xFFFF071C,0xFFFF074C,0xFFFF077B,
0xFFFF07AC,0xFFFF07DD,0xFFFF080F,0xFFFF0841,
0xFFFF0874,0xFFFF08A8,0xFFFF08DC,0xFFFF0911,
0xFFFF0946,0xFFFF097C,0xFFFF09B2,0xFFFF09EA,
0xFFFF0A21,0xFFFF0A5A,0xFFFF0A92,0xFFFF0ACC,
0xFFFF0B06,0xFFFF0B41,0xFFFF0B7C,0xFFFF0BB8,
0xFFFF0BF4,0xFFFF0C31,0xFFFF0C6F,0xFFFF0CAD,
0xFFFF0CEC,0xFFFF0D2B,0xFFFF0D6B,0xFFFF0DAC,
0xFFFF0DED,0xFFFF0E2E,0xFFFF0E71,0xFFFF0EB4,
0xFFFF0EF7,0xFFFF0F3B,0xFFFF0F80,0xFFFF0FC5,
0xFFFF100B,0xFFFF1051,0xFFFF1098,0xFFFF10DF,
0xFFFF1127,0xFFFF1170,0xFFFF11B9,0xFFFF1203,
0xFFFF124D,0xFFFF1298,0xFFFF12E4,0xFFFF1330,
0xFFFF137D,0xFFFF13CA,0xFFFF1418,0xFFFF1466,
0xFFFF14B5,0xFFFF1504,0xFFFF1555,0xFFFF15A5,
0xFFFF15F6,0xFFFF1648,0xFFFF169A,0xFFFF16ED,
0xFFFF1741,0xFFFF1795,0xFFFF17E9,0xFFFF183E,
0xFFFF1894,0xFFFF18EA,0xFFFF1941,0xFFFF1999,
0xFFFF19F0,0xFFFF1A49,0xFFFF1AA2,0xFFFF1AFC,
0xFFFF1B56,0xFFFF1BB0,0xFFFF1C0C,0xFFFF1C67,
0xFFFF1CC4,0xFFFF1D21,0xFFFF1D7E,0xFFFF1DDC,
0xFFFF1E3A,0xFFFF1E99,0xFFFF1EF9,0xFFFF1F59,
0xFFFF1FBA,0xFFFF201B,0xFFFF207D,0xFFFF20DF,
0xFFFF2142,0xFFFF21A5,0xFFFF2209,0xFFFF226E,
0xFFFF22D3,0xFFFF2338,0xFFFF239E,0xFFFF2405,
0xFFFF246C,0xFFFF24D4,0xFFFF253C,0xFFFF25A4,
0xFFFF260E,0xFFFF2677,0xFFFF26E2,0xFFFF274C,
0xFFFF27B8,0xFFFF2824,0xFFFF2890,0xFFFF28FD,
0xFFFF296A,0xFFFF29D8,0xFFFF2A46,0xFFFF2AB5,
0xFFFF2B25,0xFFFF2B95,0xFFFF2C05,0xFFFF2C76,
0xFFFF2CE8,0xFFFF2D5A,0xFFFF2DCC,0xFFFF2E3F,
0xFFFF2EB3,0xFFFF2F27,0xFFFF2F9B,0xFFFF3010,
0xFFFF3086,0xFFFF30FC,0xFFFF3172,0xFFFF31E9,
0xFFFF3261,0xFFFF32D9,0xFFFF3352,0xFFFF33CB,
0xFFFF3444,0xFFFF34BE,0xFFFF3539,0xFFFF35B3,
0xFFFF362F,0xFFFF36AB,0xFFFF3727,0xFFFF37A4,
0xFFFF3822,0xFFFF389F,0xFFFF391E,0xFFFF399D,
0xFFFF3A1C,0xFFFF3A9C,0xFFFF3B1C,0xFFFF3B9D,
0xFFFF3C1E,0xFFFF3CA0,0xFFFF3D22,0xFFFF3DA4,
0xFFFF3E28,0xFFFF3EAB,0xFFFF3F2F,0xFFFF3FB4,
0xFFFF4039,0xFFFF40BE,0xFFFF4144,0xFFFF41CA,
0xFFFF4251,0xFFFF42D8,0xFFFF4360,0xFFFF43E8,
0xFFFF4471,0xFFFF44FA,0xFFFF4583,0xFFFF460D,
0xFFFF4698,0xFFFF4723,0xFFFF47AE,0xFFFF483A,
0xFFFF48C6,0xFFFF4953,0xFFFF49E0,0xFFFF4A6D,
0xFFFF4AFB,0xFFFF4B89,0xFFFF4C18,0xFFFF4CA8,
0xFFFF4D37,0xFFFF4DC7,0xFFFF4E58,0xFFFF4EE9,
0xFFFF4F7A,0xFFFF500C,0xFFFF509E,0xFFFF5131,
0xFFFF51C4,0xFFFF5258,0xFFFF52EC,0xFFFF5380,
0xFFFF5415,0xFFFF54AA,0xFFFF553F,0xFFFF55D6,
0xFFFF566C,0xFFFF5703,0xFFFF579A,0xFFFF5832,
0xFFFF58CA,0xFFFF5962,0xFFFF59FB,0xFFFF5A94,
0xFFFF5B2E,0xFFFF5BC8,0xFFFF5C62,0xFFFF5CFD,
0xFFFF5D98,0xFFFF5E34,0xFFFF5ED0,0xFFFF5F6C,
0xFFFF6009,0xFFFF60A6,0xFFFF6144,0xFFFF61E2,
0xFFFF6280,0xFFFF631F,0xFFFF63BE,0xFFFF645D,
0xFFFF64FD,0xFFFF659D,0xFFFF663E,0xFFFF66DF,
0xFFFF6780,0xFFFF6822,0xFFFF68C4,0xFFFF6966,
0xFFFF6A09,0xFFFF6AAC,0xFFFF6B50,0xFFFF6BF4,
0xFFFF6C98,0xFFFF6D3C,0xFFFF6DE1,0xFFFF6E87,
0xFFFF6F2C,0xFFFF6FD2,0xFFFF7078,0xFFFF711F,
0xFFFF71C6,0xFFFF726D,0xFFFF7315,0xFFFF73BD,
0xFFFF7466,0xFFFF750E,0xFFFF75B7,0xFFFF7661,
0xFFFF770A,0xFFFF77B4,0xFFFF785F,0xFFFF7909,
0xFFFF79B4,0xFFFF7A60,0xFFFF7B0B,0xFFFF7BB7,
0xFFFF7C64,0xFFFF7D10,0xFFFF7DBD,0xFFFF7E6B,
0xFFFF7F18,0xFFFF7FC6,0xFFFF8074,0xFFFF8123,
0xFFFF81D1,0xFFFF8281,0xFFFF8330,0xFFFF83E0,
0xFFFF8490,0xFFFF8540,0xFFFF85F0,0xFFFF86A1,
0xFFFF8753,0xFFFF8804,0xFFFF88B6,0xFFFF8968,
0xFFFF8A1A,0xFFFF8ACD,0xFFFF8B80,0xFFFF8C33,
0xFFFF8CE6,0xFFFF8D9A,0xFFFF8E4E,0xFFFF8F02,
0xFFFF8FB7,0xFFFF906C,0xFFFF9121,0xFFFF91D6,
0xFFFF928C,0xFFFF9342,0xFFFF93F8,0xFFFF94AE,
0xFFFF9565,0xFFFF961C,0xFFFF96D3,0xFFFF978A,
0xFFFF9842,0xFFFF98FA,0xFFFF99B2,0xFFFF9A6B,
0xFFFF9B23,0xFFFF9BDC,0xFFFF9C95,0xFFFF9D4F,
0xFFFF9E08,0xFFFF9EC2,0xFFFF9F7C,0xFFFFA037,
0xFFFFA0F1,0xFFFFA1AC,0xFFFFA267,0xFFFFA322,
0xFFFFA3DE,0xFFFFA49A,0xFFFFA556,0xFFFFA612,
0xFFFFA6CE,0xFFFFA78B,0xFFFFA847,0xFFFFA904,
0xFFFFA9C2,0xFFFFAA7F,0xFFFFAB3D,0xFFFFABFA,
0xFFFFACB8,0xFFFFAD77,0xFFFFAE35,0xFFFFAEF4,
0xFFFFAFB3,0xFFFFB072,0xFFFFB131,0xFFFFB1F0,
0xFFFFB2B0,0xFFFFB370,0xFFFFB42F,0xFFFFB4F0,
0xFFFFB5B0,0xFFFFB670,0xFFFFB731,0xFFFFB7F2,
0xFFFFB8B3,0xFFFFB974,0xFFFFBA35,0xFFFFBAF7,
0xFFFFBBB9,0xFFFFBC7B,0xFFFFBD3D,0xFFFFBDFF,
0xFFFFBEC1,0xFFFFBF84,0xFFFFC046,0xFFFFC109,
0xFFFFC1CC,0xFFFFC28F,0xFFFFC352,0xFFFFC416,
0xFFFFC4D9,0xFFFFC59D,0xFFFFC661,0xFFFFC725,
0xFFFFC7E9,0xFFFFC8AD,0xFFFFC972,0xFFFFCA36,
0xFFFFCAFB,0xFFFFCBC0,0xFFFFCC84,0xFFFFCD49,
0xFFFFCE0F,0xFFFFCED4,0xFFFFCF99,0xFFFFD05F,
0xFFFFD124,0xFFFFD1EA,0xFFFFD2B0,0xFFFFD376,
0xFFFFD43C,0xFFFFD502,0xFFFFD5C8,0xFFFFD68F,
0xFFFFD755,0xFFFFD81C,0xFFFFD8E2,0xFFFFD9A9,
0xFFFFDA70,0xFFFFDB37,0xFFFFDBFE,0xFFFFDCC5,
0xFFFFDD8C,0xFFFFDE53,0xFFFFDF1B,0xFFFFDFE2,
0xFFFFE0AA,0xFFFFE171,0xFFFFE239,0xFFFFE301,
0xFFFFE3C8,0xFFFFE490,0xFFFFE558,0xFFFFE620,
0xFFFFE6E8,0xFFFFE7B0,0xFFFFE879,0xFFFFE941,
0xFFFFEA09,0xFFFFEAD2,0xFFFFEB9A,0xFFFFEC62,
0xFFFFED2B,0xFFFFEDF3,0xFFFFEEBC,0xFFFFEF85,
0xFFFFF04D,0xFFFFF116,0xFFFFF1DF,0xFFFFF2A7,
0xFFFFF370,0xFFFFF439,0xFFFFF502,0xFFFFF5CB,
0xFFFFF694,0xFFFFF75D,0xFFFFF826,0xFFFFF8EF,
0xFFFFF9B8,0xFFFFFA81,0xFFFFFB4A,0xFFFFFC13,
0xFFFFFCDC,0xFFFFFDA5,0xFFFFFE6E,0xFFFFFF37,
0x00000000,0x000000C9,0x00000192,0x0000025B,
0x00000324,0x000003ED,0x000004B6,0x0000057F,
0x00000648,0x00000711,0x000007DA,0x000008A3,
0x0000096C,0x00000A35,0x00000AFE,0x00000BC7,
0x00000C90,0x00000D59,0x00000E21,0x00000EEA,
0x00000FB3,0x0000107B,0x00001144,0x0000120D,
0x000012D5,0x0000139E,0x00001466,0x0000152E,
0x000015F7,0x000016BF,0x00001787,0x00001850,
0x00001918,0x000019E0,0x00001AA8,0x00001B70,
0x00001C38,0x00001CFF,0x00001DC7,0x00001E8F,
0x00001F56,0x0000201E,0x000020E5,0x000021AD,
0x00002274,0x0000233B,0x00002402,0x000024C9,
0x00002590,0x00002657,0x0000271E,0x000027E4,
0x000028AB,0x00002971,0x00002A38,0x00002AFE,
0x00002BC4,0x00002C8A,0x00002D50,0x00002E16,
0x00002EDC,0x00002FA1,0x00003067,0x0000312C,
0x000031F1,0x000032B7,0x0000337C,0x00003440,
0x00003505,0x000035CA,0x0000368E,0x00003753,
0x00003817,0x000038DB,0x0000399F,0x00003A63,
0x00003B27,0x00003BEA,0x00003CAE,0x00003D71,
0x00003E34,0x00003EF7,0x00003FBA,0x0000407C,
0x0000413F,0x00004201,0x000042C3,0x00004385,
0x00004447,0x00004509,0x000045CB,0x0000468C,
0x0000474D,0x0000480E,0x000048CF,0x00004990,
0x00004A50,0x00004B10,0x00004BD1,0x00004C90,
0x00004D50,0x00004E10,0x00004ECF,0x00004F8E,
0x0000504D,0x0000510C,0x000051CB,0x00005289,
0x00005348,0x00005406,0x000054C3,0x00005581,
0x0000563E,0x000056FC,0x000057B9,0x00005875,
0x00005932,0x000059EE,0x00005AAA,0x00005B66,
0x00005C22,0x00005CDE,0x00005D99,0x00005E54,
0x00005F0F,0x00005FC9,0x00006084,0x0000613E,
0x000061F8,0x000062B1,0x0000636B,0x00006424,
0x000064DD,0x00006595,0x0000664E,0x00006706,
0x000067BE,0x00006876,0x0000692D,0x000069E4,
0x00006A9B,0x00006B52,0x00006C08,0x00006CBE,
0x00006D74,0x00006E2A,0x00006EDF,0x00006F94,
0x00007049,0x000070FE,0x000071B2,0x00007266,
0x0000731A,0x000073CD,0x00007480,0x00007533,
0x000075E6,0x00007698,0x0000774A,0x000077FC,
0x000078AD,0x0000795F,0x00007A10,0x00007AC0,
0x00007B70,0x00007C20,0x00007CD0,0x00007D7F,
0x00007E2F,0x00007EDD,0x00007F8C,0x0000803A,
0x000080E8,0x00008195,0x00008243,0x000082F0,
0x0000839C,0x00008449,0x000084F5,0x000085A0,
0x0000864C,0x000086F7,0x000087A1,0x0000884C,
0x000088F6,0x0000899F,0x00008A49,0x00008AF2,
0x00008B9A,0x00008C43,0x00008CEB,0x00008D93,
0x00008E3A,0x00008EE1,0x00008F88,0x0000902E,
0x000090D4,0x00009179,0x0000921F,0x000092C4,
0x00009368,0x0000940C,0x000094B0,0x00009554,
0x000095F7,0x0000969A,0x0000973C,0x000097DE,
0x00009880,0x00009921,0x000099C2,0x00009A63,
0x00009B03,0x00009BA3,0x00009C42,0x00009CE1,
0x00009D80,0x00009E1E,0x00009EBC,0x00009F5A,
0x00009FF7,0x0000A094,0x0000A130,0x0000A1CC,
0x0000A268,0x0000A303,0x0000A39E,0x0000A438,
0x0000A4D2,0x0000A56C,0x0000A605,0x0000A69E,
0x0000A736,0x0000A7CE,0x0000A866,0x0000A8FD,
0x0000A994,0x0000AA2A,0x0000AAC1,0x0000AB56,
0x0000ABEB,0x0000AC80,0x0000AD14,0x0000ADA8,
0x0000AE3C,0x0000AECF,0x0000AF62,0x0000AFF4,
0x0000B086,0x0000B117,0x0000B1A8,0x0000B239,
0x0000B2C9,0x0000B358,0x0000B3E8,0x0000B477,
0x0000B505,0x0000B593,0x0000B620,0x0000B6AD,
0x0000B73A,0x0000B7C6,0x0000B852,0x0000B8DD,
0x0000B968,0x0000B9F3,0x0000BA7D,0x0000BB06,
0x0000BB8F,0x0000BC18,0x0000BCA0,0x0000BD28,
0x0000BDAF,0x0000BE36,0x0000BEBC,0x0000BF42,
0x0000BFC7,0x0000C04C,0x0000C0D1,0x0000C155,
0x0000C1D8,0x0000C25C,0x0000C2DE,0x0000C360,
0x0000C3E2,0x0000C463,0x0000C4E4,0x0000C564,
0x0000C5E4,0x0000C663,0x0000C6E2,0x0000C761,
0x0000C7DE,0x0000C85C,0x0000C8D9,0x0000C955,
0x0000C9D1,0x0000CA4D,0x0000CAC7,0x0000CB42,
0x0000CBBC,0x0000CC35,0x0000CCAE,0x0000CD27,
0x0000CD9F,0x0000CE17,0x0000CE8E,0x0000CF04,
0x0000CF7A,0x0000CFF0,0x0000D065,0x0000D0D9,
0x0000D14D,0x0000D1C1,0x0000D234,0x0000D2A6,
0x0000D318,0x0000D38A,0x0000D3FB,0x0000D46B,
0x0000D4DB,0x0000D54B,0x0000D5BA,0x0000D628,
0x0000D696,0x0000D703,0x0000D770,0x0000D7DC,
0x0000D848,0x0000D8B4,0x0000D91E,0x0000D989,
0x0000D9F2,0x0000DA5C,0x0000DAC4,0x0000DB2C,
0x0000DB94,0x0000DBFB,0x0000DC62,0x0000DCC8,
0x0000DD2D,0x0000DD92,0x0000DDF7,0x0000DE5B,
0x0000DEBE,0x0000DF21,0x0000DF83,0x0000DFE5,
0x0000E046,0x0000E0A7,0x0000E107,0x0000E167,
0x0000E1C6,0x0000E224,0x0000E282,0x0000E2DF,
0x0000E33C,0x0000E399,0x0000E3F4,0x0000E450,
0x0000E4AA,0x0000E504,0x0000E55E,0x0000E5B7,
0x0000E610,0x0000E667,0x0000E6BF,0x0000E716,
0x0000E76C,0x0000E7C2,0x0000E817,0x0000E86B,
0x0000E8BF,0x0000E913,0x0000E966,0x0000E9B8,
0x0000EA0A,0x0000EA5B,0x0000EAAB,0x0000EAFC,
0x0000EB4B,0x0000EB9A,0x0000EBE8,0x0000EC36,
0x0000EC83,0x0000ECD0,0x0000ED1C,0x0000ED68,
0x0000EDB3,0x0000EDFD,0x0000EE47,0x0000EE90,
0x0000EED9,0x0000EF21,0x0000EF68,0x0000EFAF,
0x0000EFF5,0x0000F03B,0x0000F080,0x0000F0C5,
0x0000F109,0x0000F14C,0x0000F18F,0x0000F1D2,
0x0000F213,0x0000F254,0x0000F295,0x0000F2D5,
0x0000F314,0x0000F353,0x0000F391,0x0000F3CF,
0x0000F40C,0x0000F448,0x0000F484,0x0000F4BF,
0x0000F4FA,0x0000F534,0x0000F56E,0x0000F5A6,
0x0000F5DF,0x0000F616,0x0000F64E,0x0000F684,
0x0000F6BA,0x0000F6EF,0x0000F724,0x0000F758,
0x0000F78C,0x0000F7BF,0x0000F7F1,0x0000F823,
0x0000F854,0x0000F885,0x0000F8B4,0x0000F8E4,
0x0000F913,0x0000F941,0x0000F96E,0x0000F99B,
0x0000F9C8,0x0000F9F3,0x0000FA1F,0x0000FA49,
0x0000FA73,0x0000FA9C,0x0000FAC5,0x0000FAED,
0x0000FB15,0x0000FB3C,0x0000FB62,0x0000FB88,
0x0000FBAD,0x0000FBD1,0x0000FBF5,0x0000FC18,
0x0000FC3B,0x0000FC5D,0x0000FC7F,0x0000FCA0,
0x0000FCC0,0x0000FCDF,0x0000FCFE,0x0000FD1D,
0x0000FD3B,0x0000FD58,0x0000FD74,0x0000FD90,
0x0000FDAC,0x0000FDC7,0x0000FDE1,0x0000FDFA,
0x0000FE13,0x0000FE2B,0x0000FE43,0x0000FE5A,
0x0000FE71,0x0000FE87,0x0000FE9C,0x0000FEB0,
0x0000FEC4,0x0000FED8,0x0000FEEB,0x0000FEFD,
0x0000FF0E,0x0000FF1F,0x0000FF30,0x0000FF3F,
0x0000FF4E,0x0000FF5D,0x0000FF6B,0x0000FF78,
0x0000FF85,0x0000FF91,0x0000FF9C,0x0000FFA7,
0x0000FFB1,0x0000FFBB,0x0000FFC4,0x0000FFCC,
0x0000FFD4,0x0000FFDB,0x0000FFE1,0x0000FFE7,
0x0000FFEC,0x0000FFF1,0x0000FFF5,0x0000FFF8,
0x0000FFFB,0x0000FFFD,0x0000FFFF,0x00010000
};
//void (*off_9134C[2])() = { &sub_10000, &sub_10000 }; // weak

Type_IntPointer dword_9334C[256 + 256] = //0x25134C
{
0x00000000,0x00000020,0x00000040,0x00000060,
0x00000080,0x000000A0,0x000000C0,0x000000E0,
0x00002000,0x00002020,0x00002040,0x00002060,
0x00002080,0x000020A0,0x000020C0,0x000020E0,
0x00004000,0x00004020,0x00004040,0x00004060,
0x00004080,0x000040A0,0x000040C0,0x000040E0,
0x00006000,0x00006020,0x00006040,0x00006060,
0x00006080,0x000060A0,0x000060C0,0x000060E0,
0x00008000,0x00008020,0x00008040,0x00008060,
0x00008080,0x000080A0,0x000080C0,0x000080E0,
0x0000A000,0x0000A020,0x0000A040,0x0000A060,
0x0000A080,0x0000A0A0,0x0000A0C0,0x0000A0E0,
0x0000C000,0x0000C020,0x0000C040,0x0000C060,
0x0000C080,0x0000C0A0,0x0000C0C0,0x0000C0E0,
0x0000E000,0x0000E020,0x0000E040,0x0000E060,
0x0000E080,0x0000E0A0,0x0000E0C0,0x0000E0E0,
0x00010000,0x00010020,0x00010040,0x00010060,
0x00010080,0x000100A0,0x000100C0,0x000100E0,
0x00012000,0x00012020,0x00012040,0x00012060,
0x00012080,0x000120A0,0x000120C0,0x000120E0,
0x00014000,0x00014020,0x00014040,0x00014060,
0x00014080,0x000140A0,0x000140C0,0x000140E0,
0x00016000,0x00016020,0x00016040,0x00016060,
0x00016080,0x000160A0,0x000160C0,0x000160E0,
0x00018000,0x00018020,0x00018040,0x00018060,
0x00018080,0x000180A0,0x000180C0,0x000180E0,
0x0001A000,0x0001A020,0x0001A040,0x0001A060,
0x0001A080,0x0001A0A0,0x0001A0C0,0x0001A0E0,
0x0001C000,0x0001C020,0x0001C040,0x0001C060,
0x0001C080,0x0001C0A0,0x0001C0C0,0x0001C0E0,
0x0001E000,0x0001E020,0x0001E040,0x0001E060,
0x0001E080,0x0001E0A0,0x0001E0C0,0x0001E0E0,
0x00020000,0x00020020,0x00020040,0x00020060,
0x00020080,0x000200A0,0x000200C0,0x000200E0,
0x00022000,0x00022020,0x00022040,0x00022060,
0x00022080,0x000220A0,0x000220C0,0x000220E0,
0x00024000,0x00024020,0x00024040,0x00024060,
0x00024080,0x000240A0,0x000240C0,0x000240E0,
0x00026000,0x00026020,0x00026040,0x00026060,
0x00026080,0x000260A0,0x000260C0,0x000260E0,
0x00028000,0x00028020,0x00028040,0x00028060,
0x00028080,0x000280A0,0x000280C0,0x000280E0,
0x0002A000,0x0002A020,0x0002A040,0x0002A060,
0x0002A080,0x0002A0A0,0x0002A0C0,0x0002A0E0,
0x0002C000,0x0002C020,0x0002C040,0x0002C060,
0x0002C080,0x0002C0A0,0x0002C0C0,0x0002C0E0,
0x0002E000,0x0002E020,0x0002E040,0x0002E060,
0x0002E080,0x0002E0A0,0x0002E0C0,0x0002E0E0,
0x00030000,0x00030020,0x00030040,0x00030060,
0x00030080,0x000300A0,0x000300C0,0x000300E0,
0x00032000,0x00032020,0x00032040,0x00032060,
0x00032080,0x000320A0,0x000320C0,0x000320E0,
0x00034000,0x00034020,0x00034040,0x00034060,
0x00034080,0x000340A0,0x000340C0,0x000340E0,
0x00036000,0x00036020,0x00036040,0x00036060,
0x00036080,0x000360A0,0x000360C0,0x000360E0,
0x00038000,0x00038020,0x00038040,0x00038060,
0x00038080,0x000380A0,0x000380C0,0x000380E0,
0x0003A000,0x0003A020,0x0003A040,0x0003A060,
0x0003A080,0x0003A0A0,0x0003A0C0,0x0003A0E0,
0x0003C000,0x0003C020,0x0003C040,0x0003C060,
0x0003C080,0x0003C0A0,0x0003C0C0,0x0003C0E0,
0x0003E000,0x0003E020,0x0003E040,0x0003E060,
0x0003E080,0x0003E0A0,0x0003E0C0,0x0003E0E0,
0x00030000,0x00030020,0x00030040,0x00030060,
0x00030080,0x000300A0,0x000300C0,0x000300E0,
0x00032000,0x00032020,0x00032040,0x00032060,
0x00032080,0x000320A0,0x000320C0,0x000320E0,
0x00034000,0x00034020,0x00034040,0x00034060,
0x00034080,0x000340A0,0x000340C0,0x000340E0,
0x00036000,0x00036020,0x00036040,0x00036060,
0x00036080,0x000360A0,0x000360C0,0x000360E0,
0x00038000,0x00038020,0x00038040,0x00038060,
0x00038080,0x000380A0,0x000380C0,0x000380E0,
0x0003A000,0x0003A020,0x0003A040,0x0003A060,
0x0003A080,0x0003A0A0,0x0003A0C0,0x0003A0E0,
0x0003C000,0x0003C020,0x0003C040,0x0003C060,
0x0003C080,0x0003C0A0,0x0003C0C0,0x0003C0E0,
0x0003E000,0x0003E020,0x0003E040,0x0003E060,
0x0003E080,0x0003E0A0,0x0003E0C0,0x0003E0E0,
0x00010000,0x00030002,0x00060005,0x00080007,
0x000B000A,0x000D000C,0x0010000F,0x00130011,
0x00150014,0x00180016,0x001A0019,0x001D001B,
0x001F001E,0x00220020,0x00240023,0x00270026,
0x00290028,0x002C002B,0x002E002D,0x00310030,
0x00330032,0x00360035,0x00380037,0x003B0039,
0x003D003C,0x0040003E,0x00420041,0x00440043,
0x00470046,0x00490048,0x004C004B,0x004E004D,
0x0051004F,0x00530052,0x00550054,0x00580057,
0x005A0059,0x005C005B,0x005F005E,0x00610060,
0x00630062,0x00660065,0x00680067,0x006A0069,
0x006D006B,0x006F006E,0x00710070,0x00730072,
0x00760074,0x00780077,0x007A0079,0x007C007B,
0x007E007D,0x0081007F,0x00830082,0x00850084,
0x00870086,0x00890088,0x008B008A,0x008D008C,
0x008F008E,0x00910090,0x00940093,0x00960095,
0x00980097,0x009A0099,0x009C009B,0x009E009D,
0x00A0009F,0x00A200A1,0x00A400A3,0x00A600A5,
0x00A700A7,0x00A900A8,0x00AB00AA,0x00AD00AC,
0x00AF00AE,0x00B100B0,0x00B300B2,0x00B500B4,
0x00B600B6,0x00B800B7,0x00BA00B9,0x00BC00BB,
0x00BE00BD,0x00BF00BF,0x00C100C0,0x00C300C2,
0x00C500C4,0x00C600C6,0x00C800C7,0x00CA00C9,
0x00CB00CB,0x00CD00CC,0x00CF00CE,0x00D000D0,
0x00D200D1,0x00D400D3,0x00D500D4,0x00D700D6,
0x00D800D8,0x00DA00D9,0x00DC00DB,0x00DD00DC,
0x00DF00DE,0x00E000DF,0x00E200E1,0x00E300E2,
0x00E500E4,0x00E600E5,0x00E800E7,0x00E900E8,
0x00EB00EA,0x00EC00EB,0x00ED00ED,0x00EF00EE,
0x00F000EF,0x00F200F1,0x00F300F2,0x00F400F4,
0x00F600F5,0x00F700F6,0x00F800F8,0x00FA00F9,
0x00FB00FA,0x00FC00FC,0x00FE00FD,0x00FF00FE,
0x00000100,0x00000000,0x00000001,0xFFFF0000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x54534554,
0x00005245,0x00000000,0x00000000,0x00000000,
0x00000101,0x00000000,0x00000900,0x00000000,
0x00000000,0x00000000,0xFC010101,0x00000000,
0xFC000000,0x00000000,0x00000000,0x00000000,
0x00020000,0x10007FFF,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00001F40,0x00000000
};

//void *off_9359C = &dword_9334C[132]; // weak
__int16 word_9374C[258] =
{
  0,
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  10,
  11,
  12,
  13,
  15,
  16,
  17,
  19,
  20,
  21,
  22,
  24,
  25,
  26,
  27,
  29,
  30,
  31,
  32,
  34,
  35,
  36,
  38,
  39,
  40,
  41,
  43,
  44,
  45,
  46,
  48,
  49,
  50,
  51,
  53,
  54,
  55,
  56,
  57,
  59,
  60,
  61,
  62,
  64,
  65,
  66,
  67,
  68,
  70,
  71,
  72,
  73,
  75,
  76,
  77,
  78,
  79,
  81,
  82,
  83,
  84,
  85,
  87,
  88,
  89,
  90,
  91,
  92,
  94,
  95,
  96,
  97,
  98,
  99,
  101,
  102,
  103,
  104,
  105,
  106,
  107,
  109,
  110,
  111,
  112,
  113,
  114,
  115,
  116,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  127,
  129,
  130,
  131,
  132,
  133,
  134,
  135,
  136,
  137,
  138,
  139,
  140,
  141,
  142,
  143,
  144,
  145,
  147,
  148,
  149,
  150,
  151,
  152,
  153,
  154,
  155,
  156,
  157,
  158,
  159,
  160,
  161,
  162,
  163,
  164,
  165,
  166,
  167,
  167,
  168,
  169,
  170,
  171,
  172,
  173,
  174,
  175,
  176,
  177,
  178,
  179,
  180,
  181,
  182,
  182,
  183,
  184,
  185,
  186,
  187,
  188,
  189,
  190,
  191,
  191,
  192,
  193,
  194,
  195,
  196,
  197,
  198,
  198,
  199,
  200,
  201,
  202,
  203,
  203,
  204,
  205,
  206,
  207,
  208,
  208,
  209,
  210,
  211,
  212,
  212,
  213,
  214,
  215,
  216,
  216,
  217,
  218,
  219,
  220,
  220,
  221,
  222,
  223,
  223,
  224,
  225,
  226,
  226,
  227,
  228,
  229,
  229,
  230,
  231,
  232,
  232,
  233,
  234,
  235,
  235,
  236,
  237,
  237,
  238,
  239,
  239,
  240,
  241,
  242,
  242,
  243,
  244,
  244,
  245,
  246,
  246,
  247,
  248,
  248,
  249,
  250,
  250,
  251,
  252,
  252,
  253,
  254,
  254,
  255,
  256,
  0
}; // weak
char byte_93950 = '\0'; // weak
char byte_93954 = '\x01'; // weak
char byte_93958 = '\0'; // weak
char byte_93959 = '\0'; // weak
int16 word_9395A = -1; // weak
__int16 word_9395C = 0; // weak
uint8_t* packet_93960 = 0; // weak
uint8_t* packet_93964 = 0; // weak
uint8_t* packet_93968[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
__int16 word_93988 = 0; // weak
int16 word_9398A = 0; // weak
myNCB* mainconnection_9398C;
myNCB* connection_93990[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
char byte_939AF[] = { '\0' }; // weak
char byte_939B0[] = { '\0' }; // weak
//char aTester[7] = "TESTER"; // weak
char byte_939CC = '\x01'; // weak
char byte_939CD = '\x01'; // weak
__int16 word_939D0 = 0; // weak
__int16 word_939D2 = 0; // weak
char byte_939D4 = '\0'; // weak
__int16 word_939D6 = 0; // weak
char byte_939E4 = '\x01'; // weak
char byte_939E5 = '\x01'; // weak
char byte_939E6 = '\x01'; // weak
char byte_939EC = '\0'; // weak
char byte_939ED = '\0'; // weak
int dword_939F0 = 0; // weak
__int16 word_939F4 = 0; // weak
int dword_939F8 = 0; // weak
__int16 word_939FC = 0; // weak
__int16 word_93A00 = 32767; // weak
__int16 word_93A02 = 4096; // weak
__int16 word_93A0C = 0; // weak
__int16 word_93A22 = 0; // weak
_UNKNOWN unk_93A44; // weak
int dword_93A54 = 0; // weak
int dword_93A60 = 0; // weak
__int16 word_93A64 = 0; // weak
char byte_93A84 = '\0'; // weak
int dword_93A88 = 16; // weak
int dword_93A8C = -80; // weak
int dword_93A90 = 80; // weak
int dword_93A94 = -4; // weak
__int16 word_93AA8 = 16; // weak
int dword_93AAC = -80; // weak
int dword_93AB0 = 80; // weak
__int16 word_93AB4 = -4; // weak
uint8* beginPrevLineFrame_93AC8 = nullptr; // weak
uint8* beginFrame_93ACC = nullptr; // weak //0x251ACC
uint8* actTexture_93AD0 = nullptr; // weak
int pitchViewPort_93AD4 = 0; // weak
uint16 widthViewPort_93AD8 = 0; // weak
uint16 heightViewPort_93ADC = 0; // weak

Type_RenderPoint2 unk_93AE0[MAX_HEIGHT]; // weak 5 * max width?
//_UNKNOWN unk_96000; // weak
char byte_967E0 = 'p'; // weak
uint8 byte_967E1 = 0; // weak
char byte_967E4 = '\0'; // weak
//char dword_96860[7][21] = { (char*)83894304 }; // weak
char off_96864[6][21] =
{
  (char*)"Game One            ",
  (char*)"Game Two            ",
  (char*)"Game Three          ",
  (char*)"Game Four           ",
  (char*)"Game Five           ",
  (char*)"Game Six            "
}; // weak
char byte_9687C = '\x01'; // weak
bool bool_96880 = false; // weak

/*
typedef struct {
    uint32_t var32_0;//stub
    uint8_t var8_4;//stub
    uint8_t var8_5;
    uint8_t var8_6;//stub
    uint8_t var8_7;//stub
} Type_sub_96884;*/

Type_dword_96884 str_96884 = {0,1,0,0,0};//254884_
//int dword_96884 = 0; // weak //254884_
//char byte_96888 = '\x01'; // weak
//char byte_9688A = '\0'; // weak

Type_dword_96884 str_9688C = { 0,1,0,0,0 };//25488C_
//int dword_9688C = 0; // weak
//char byte_96890 = '\x01'; // weak
//char byte_96892 = '\0'; // weak

int dword_96894 = 0; // weak
__int16 word_96898 = 16; // weak
char byte_9689C[] = { '\x01' }; // weak
char byte_9689D[] = { '\0' }; // weak
char byte_9689E[22] =
{
  '\x03',
  '\x01',
  '\0',
  '\x03',
  '\0',
  '\0',
  '\x03',
  '\0',
  '\0',
  '\x03',
  '\0',
  '\0',
  '\x03',
  '\0',
  '\0',
  '\x03',
  '\0',
  '\0',
  '\x03',
  '\0',
  '\0',
  '\x03'
}; // weak
__int16 word_968B4[8] = { 17, 18, 23, 24, 25, 26, 28, 25970 }; // weak
int dword_968C4 = 0; // weak
int dword_968C8 = 0; // weak
int dword_968CC = 0; // weak
int dword_968D0 = 0; // weak
int dword_968D4 = 0; // weak
__int16 word_968D8 = 0; // weak
char byte_968E0 = '\x7F'; // weak
char byte_968E1 = '\0'; // weak
char byte_968E4 = '\0'; // weak
char byte_968E8 = '\0'; // weak
FILE* dword_968EC = nullptr; // weak
char byte_968F0 = '\x01'; // weak
//int dword_96902 = 0; // weak

#pragma pack (1)
typedef struct {//size 14
    uint32_t data0;
    uint16_t data4;
    //uint32_t data6;
    //int (*data6)(int);
    void (*data6)(Type_AE400_29795*);
    //*(int (**)(int))(v3 + 6))
    uint16_t data10;
    uint16_t data12;
}
Type_254A34x;
typedef struct {//size 14
    uint32_t data0;
    uint16_t data4;
    //uint32_t data6;
    //int (*data6)(int);
    Type_AE400_29795* (*data6)(axis_3d*);
    //*(int (**)(int))(v3 + 6))
    uint16_t data10;
    uint16_t data12;
}
Type_254A34;

typedef struct {//size 18
    Type_254A34x* str_0;//0
    Type_254A34* str_4;//4
    uint32_t data4x;//4
    uint16_t data8x;//8
    uint32_t data14x;//14
}
Type_96902;

#pragma pack (16)

int sub_39A00(uint16_t* a1);
int sub_39340(uint16_t* a1);
int sub_38C60(uint16_t* a1);
int sub_386DE(uint16_t* a1);
int sub_384B0(uint16_t* a1);

Type_254A34 str_254A34[] = {
{ 0x002548F4, 0x0000, nullptr, 0x0000, 0x0000 },
{ 0x002548F4, 0x0001, (Type_AE400_29795* (*)(axis_3d*))sub_37A80, 0x0001, 0x0000 },
{ 0x002548F4, 0x0002, (Type_AE400_29795* (*)(axis_3d*))sub_37AA0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0003, (Type_AE400_29795* (*)(axis_3d*))sub_37AC0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0004, (Type_AE400_29795* (*)(axis_3d*))sub_37AE0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0005, (Type_AE400_29795* (*)(axis_3d*))sub_37B00, 0x0001, 0x0000 },
{ 0x002548F4, 0x0006, (Type_AE400_29795* (*)(axis_3d*))sub_37B20, 0x0001, 0x0000 },
{ 0x002548F4, 0x0007, (Type_AE400_29795* (*)(axis_3d*))sub_37B40, 0x0001, 0x0000 },
{ 0x002548F4, 0x0008, (Type_AE400_29795* (*)(axis_3d*))sub_37B60, 0x0001, 0x0000 },
{ 0x002548F4, 0x0009, (Type_AE400_29795* (*)(axis_3d*))sub_37B80, 0x0001, 0x0000 },
{ 0x002548F4, 0x000A, (Type_AE400_29795* (*)(axis_3d*))sub_37BA0, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };

Type_254A34 str_254D48[] = {
{ 0x002548F4, 0x0000, (Type_AE400_29795* (*)(axis_3d*))sub_37BC0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0001, (Type_AE400_29795* (*)(axis_3d*))sub_37CF0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0002, (Type_AE400_29795* (*)(axis_3d*))sub_37D70, 0x0001, 0x0000 },
{ 0x002548F4, 0x0003, (Type_AE400_29795* (*)(axis_3d*))sub_37E00, 0x0001, 0x0000 },
{ 0x002548F4, 0x0004, (Type_AE400_29795* (*)(axis_3d*))sub_37E80, 0x0001, 0x0000 },
{ 0x002548F4, 0x0005, (Type_AE400_29795* (*)(axis_3d*))sub_37EF0, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };

Type_254A34 str_254B84[] = {
{ 0x002548F4, 0x0000, sub_37820, 0x0001, 0x0000 },
{ 0x002548F4, 0x0001, (Type_AE400_29795* (*)(axis_3d*))sub_378A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0002, (Type_AE400_29795* (*)(axis_3d*))sub_37920, 0x0001, 0x0000 },
{ 0x002548F4, 0x0003, (Type_AE400_29795* (*)(axis_3d*))sub_37A00, 0x0001, 0x0000 },
{ 0x002548F4, 0x0004, (Type_AE400_29795* (*)(axis_3d*))sub_37720, 0x0001, 0x0000 },
{ 0x002548F4, 0x0005, (Type_AE400_29795* (*)(axis_3d*))sub_37740, 0x0001, 0x0000 },
{ 0x002548F4, 0x0006, (Type_AE400_29795* (*)(axis_3d*))sub_37760, 0x0001, 0x0000 },
{ 0x002548F4, 0x0007, (Type_AE400_29795* (*)(axis_3d*))sub_37780, 0x0001, 0x0000 },
{ 0x002548F4, 0x0008, (Type_AE400_29795* (*)(axis_3d*))sub_377A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0009, (Type_AE400_29795* (*)(axis_3d*))sub_377C0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000A, (Type_AE400_29795* (*)(axis_3d*))sub_377E0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000B, (Type_AE400_29795* (*)(axis_3d*))sub_37800, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };

Type_254A34 str_254DBC[] = {//broken data in original
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x001E, 0x0001 },
{ 0x48F40000, 0x0025, nullptr, 0x0000, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };

Type_254A34 str_255478[] = {
{ 0x002548F4, 0x0000, (Type_AE400_29795* (*)(axis_3d*))sub_38030, 0x0001, 0x0000 },
{ 0x002548F4, 0x0001, (Type_AE400_29795* (*)(axis_3d*))sub_38270, 0x0001, 0x0000 },
{ 0x002548F4, 0x0002, (Type_AE400_29795* (*)(axis_3d*))sub_38370, 0x0001, 0x0000 },
{ 0x002548F4, 0x0003, (Type_AE400_29795* (*)(axis_3d*))sub_384B0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0004, (Type_AE400_29795* (*)(axis_3d*))sub_386DE/*(Type_AE400_29795* (*)(axis_3d*))sub_386E0*/, 0x0001, 0x0000},
{ 0x002548F4, 0x0005, (Type_AE400_29795* (*)(axis_3d*))sub_38890, 0x0001, 0x0000 },
{ 0x002548F4, 0x0006, (Type_AE400_29795* (*)(axis_3d*))sub_389E0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0007, (Type_AE400_29795* (*)(axis_3d*))sub_38C60, 0x0001, 0x0000 },
{ 0x002548F4, 0x0008, (Type_AE400_29795* (*)(axis_3d*))sub_38D60, 0x0001, 0x0000 },
{ 0x002548F4, 0x0009, (Type_AE400_29795* (*)(axis_3d*))sub_38E70, 0x0001, 0x0000 },
{ 0x002548F4, 0x000A, (Type_AE400_29795* (*)(axis_3d*))sub_38FC0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000B, (Type_AE400_29795* (*)(axis_3d*))sub_390D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000C, (Type_AE400_29795* (*)(axis_3d*))sub_39200, 0x0001, 0x0000 },
{ 0x002548F4, 0x000D, (Type_AE400_29795* (*)(axis_3d*))sub_39340, 0x0001, 0x0000 },
{ 0x002548F4, 0x000E, (Type_AE400_29795* (*)(axis_3d*))sub_39490, 0x0001, 0x0000 },
{ 0x002548F4, 0x000F, (Type_AE400_29795* (*)(axis_3d*))sub_395B0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0010, (Type_AE400_29795* (*)(axis_3d*))sub_396E0, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };

Type_254A34 str_2555A0[] = {
{ 0x002548F4, 0x0000, (Type_AE400_29795* (*)(axis_3d*))sub_39800, 0x0001, 0x0000 },
{ 0x002548F4, 0x0001, (Type_AE400_29795* (*)(axis_3d*))sub_39820, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };

Type_254A34 str_255620[] = {
{ 0x002548F4, 0x0000, (Type_AE400_29795* (*)(axis_3d*))sub_39840, 0x0001, 0x0000 },
{ 0x002548F4, 0x0001, (Type_AE400_29795* (*)(axis_3d*))sub_39860, 0x0001, 0x0000 },
{ 0x002548F4, 0x0002, (Type_AE400_29795* (*)(axis_3d*))sub_39880, 0x0001, 0x0000 },
{ 0x002548F4, 0x0003, (Type_AE400_29795* (*)(axis_3d*))sub_398A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0004, (Type_AE400_29795* (*)(axis_3d*))sub_398C0, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };

Type_254A34 str_2556D8[] = {
{ 0x002548F4, 0x0000, (Type_AE400_29795* (*)(axis_3d*))sub_39940, 0x0001, 0x0000 },
{ 0x002548F4, 0x0001, (Type_AE400_29795* (*)(axis_3d*))sub_39960, 0x0001, 0x0000 },
{ 0x002548F4, 0x0002, (Type_AE400_29795* (*)(axis_3d*))sub_39980, 0x0001, 0x0000 },
{ 0x002548F4, 0x0003, (Type_AE400_29795* (*)(axis_3d*))sub_399A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0004, (Type_AE400_29795* (*)(axis_3d*))sub_399C0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0005, (Type_AE400_29795* (*)(axis_3d*))sub_399E0, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };

Type_254A34 str_255870[] = {
{ 0x002548F4, 0x0000, (Type_AE400_29795* (*)(axis_3d*))sub_39A10, 0x0001, 0x0000 },
{ 0x002548F4, 0x0001, (Type_AE400_29795* (*)(axis_3d*))sub_39A90, 0x0001, 0x0000 },
{ 0x002548F4, 0x0002, (Type_AE400_29795* (*)(axis_3d*))sub_39B40, 0x0001, 0x0000 },
{ 0x002548F4, 0x0003, (Type_AE400_29795* (*)(axis_3d*))sub_39BC0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0004, (Type_AE400_29795* (*)(axis_3d*))sub_39C40, 0x0001, 0x0000 },
{ 0x002548F4, 0x0005, (Type_AE400_29795* (*)(axis_3d*))sub_39CC0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0006, (Type_AE400_29795* (*)(axis_3d*))sub_39D40, 0x0001, 0x0000 },
{ 0x002548F4, 0x0007, (Type_AE400_29795* (*)(axis_3d*))sub_39DC0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0008, (Type_AE400_29795* (*)(axis_3d*))sub_39E40, 0x0001, 0x0000 },
{ 0x002548F4, 0x0009, (Type_AE400_29795* (*)(axis_3d*))sub_39EC0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000A, (Type_AE400_29795* (*)(axis_3d*))sub_39F40, 0x0001, 0x0000 },
{ 0x002548F4, 0x000B, (Type_AE400_29795* (*)(axis_3d*))sub_39FC0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000C, (Type_AE400_29795* (*)(axis_3d*))sub_3A040, 0x0001, 0x0000 },
{ 0x002548F4, 0x000D, (Type_AE400_29795* (*)(axis_3d*))sub_3A0C0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000E, (Type_AE400_29795* (*)(axis_3d*))sub_3A1A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000F, (Type_AE400_29795* (*)(axis_3d*))sub_3A210, 0x0001, 0x0000 },
{ 0x002548F4, 0x0010, (Type_AE400_29795* (*)(axis_3d*))sub_3A270, 0x0001, 0x0000 },
{ 0x002548F4, 0x0011, (Type_AE400_29795* (*)(axis_3d*))sub_3A2F0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0012, (Type_AE400_29795* (*)(axis_3d*))sub_3A390, 0x0001, 0x0000 },
{ 0x002548F4, 0x0013, (Type_AE400_29795* (*)(axis_3d*))sub_3A410, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };

Type_254A34 str_255D0C[] = {
{ 0x002548F4, 0x0000, (Type_AE400_29795 * (*)(axis_3d*))sub_3A490, 0x0001, 0x0000 },
{ 0x002548F4, 0x0001, (Type_AE400_29795 * (*)(axis_3d*))sub_3A510, 0x0001, 0x0000 },
{ 0x002548F4, 0x0002, (Type_AE400_29795 * (*)(axis_3d*))sub_3A570, 0x0001, 0x0000 },
{ 0x002548F4, 0x0003, (Type_AE400_29795 * (*)(axis_3d*))sub_3A5D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0004, (Type_AE400_29795 * (*)(axis_3d*))sub_3A640, 0x0001, 0x0000 },
{ 0x002548F4, 0x0005, (Type_AE400_29795 * (*)(axis_3d*))sub_3A6B0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0006, (Type_AE400_29795 * (*)(axis_3d*))sub_3A730, 0x0001, 0x0000 },
{ 0x002548F4, 0x0007, (Type_AE400_29795 * (*)(axis_3d*))sub_3A7D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0008, (Type_AE400_29795 * (*)(axis_3d*))sub_3A870, 0x0001, 0x0000 },
{ 0x002548F4, 0x0009, (Type_AE400_29795 * (*)(axis_3d*))sub_3A8D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000A, (Type_AE400_29795 * (*)(axis_3d*))sub_3A930, 0x0001, 0x0000 },
{ 0x002548F4, 0x000B, (Type_AE400_29795 * (*)(axis_3d*))sub_3A9A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000C, (Type_AE400_29795 * (*)(axis_3d*))sub_3AA10, 0x0001, 0x0000 },
{ 0x002548F4, 0x000D, (Type_AE400_29795 * (*)(axis_3d*))sub_3AAA0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000E, (Type_AE400_29795 * (*)(axis_3d*))sub_3AB40, 0x0001, 0x0000 },
{ 0x002548F4, 0x000F, (Type_AE400_29795 * (*)(axis_3d*))sub_3ABE0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0010, (Type_AE400_29795 * (*)(axis_3d*))sub_3ACC0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0011, (Type_AE400_29795 * (*)(axis_3d*))sub_3AC70, 0x0001, 0x0000 },
{ 0x002548F4, 0x0012, (Type_AE400_29795 * (*)(axis_3d*))sub_3ADB0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0013, (Type_AE400_29795 * (*)(axis_3d*))sub_3AE00, 0x0001, 0x0000 },
{ 0x002548F4, 0x0014, (Type_AE400_29795 * (*)(axis_3d*))sub_39A00, 0x0001, 0x0000 },
{ 0x002548F4, 0x0015, (Type_AE400_29795 * (*)(axis_3d*))sub_39A00, 0x0001, 0x0000 },
{ 0x002548F4, 0x0016, (Type_AE400_29795 * (*)(axis_3d*))sub_39A00, 0x0001, 0x0000 },
{ 0x002548F4, 0x0017, (Type_AE400_29795 * (*)(axis_3d*))sub_3AE80, 0x0001, 0x0000 },
{ 0x002548F4, 0x0018, (Type_AE400_29795 * (*)(axis_3d*))sub_39A00, 0x0001, 0x0000 },
{ 0x002548F4, 0x0019, (Type_AE400_29795 * (*)(axis_3d*))sub_3AF00, 0x0001, 0x0000 },
{ 0x002548F4, 0x001A, (Type_AE400_29795 * (*)(axis_3d*))sub_3AF80, 0x0001, 0x0000 },
{ 0x002548F4, 0x001B, (Type_AE400_29795 * (*)(axis_3d*))sub_3B000, 0x0001, 0x0000 },
{ 0x002548F4, 0x001C, (Type_AE400_29795 * (*)(axis_3d*))sub_3B060, 0x0001, 0x0000 },
{ 0x002548F4, 0x001D, (Type_AE400_29795 * (*)(axis_3d*))sub_3B120, 0x0001, 0x0000 },
{ 0x002548F4, 0x001E, (Type_AE400_29795 * (*)(axis_3d*))sub_3B0C0, 0x0001, 0x0000 },
{ 0x002548F4, 0x001F, (Type_AE400_29795 * (*)(axis_3d*))sub_3B1D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0020, (Type_AE400_29795 * (*)(axis_3d*))sub_3B180, 0x0001, 0x0000 },
{ 0x002548F4, 0x0021, (Type_AE400_29795 * (*)(axis_3d*))sub_3B4D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0022, (Type_AE400_29795 * (*)(axis_3d*))sub_3B300, 0x0001, 0x0000 },
{ 0x002548F4, 0x0023, (Type_AE400_29795 * (*)(axis_3d*))sub_3B3D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0024, (Type_AE400_29795 * (*)(axis_3d*))sub_3B3E0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0000, nullptr, 0x0000, 0x0000 },
{ 0x002548F4, 0x0026, (Type_AE400_29795 * (*)(axis_3d*))sub_3B460, 0x0001, 0x0000 },
{ 0x002548F4, 0x0027, (Type_AE400_29795 * (*)(axis_3d*))sub_3B5A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0028, (Type_AE400_29795 * (*)(axis_3d*))sub_3B620, 0x0001, 0x0000 },
{ 0x002548F4, 0x0029, (Type_AE400_29795 * (*)(axis_3d*))sub_3B760, 0x0001, 0x0000 },
{ 0x002548F4, 0x002A, (Type_AE400_29795 * (*)(axis_3d*))sub_3B7B0, 0x0001, 0x0000 },
{ 0x002548F4, 0x002B, (Type_AE400_29795 * (*)(axis_3d*))sub_3B6F0, 0x0001, 0x0000 },
{ 0x002548F4, 0x002C, (Type_AE400_29795 * (*)(axis_3d*))sub_3B800, 0x0001, 0x0000 },
{ 0x002548F4, 0x002D, (Type_AE400_29795 * (*)(axis_3d*))sub_3B690, 0x0001, 0x0000 },
{ 0x002548F4, 0x0000, nullptr, 0x0000, 0x0000 },
{ 0x002548F4, 0x0000, nullptr, 0x0000, 0x0000 },
{ 0x002548F4, 0x0000, nullptr, 0x0000, 0x0000 },
{ 0x002548F4, 0x0000, nullptr, 0x0000, 0x0000 },
{ 0x002548F4, 0x0032, (Type_AE400_29795 * (*)(axis_3d*))sub_3B2A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0033, (Type_AE400_29795 * (*)(axis_3d*))sub_3B230, 0x0001, 0x0000 },
{ 0x002548F4, 0x0034, (Type_AE400_29795 * (*)(axis_3d*))sub_3B860, 0x0001, 0x0000 },
{ 0x002548F4, 0x0035, (Type_AE400_29795 * (*)(axis_3d*))sub_3B8E0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0036, (Type_AE400_29795 * (*)(axis_3d*))sub_3B970, 0x0001, 0x0000 },
{ 0x002548F4, 0x0037, (Type_AE400_29795 * (*)(axis_3d*))sub_3BA00, 0x0001, 0x0000 },
{ 0x002548F4, 0x0038, (Type_AE400_29795 * (*)(axis_3d*))sub_3BA90, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };


Type_254A34 str_256208[] = {
{ 0x002548F4, 0x0000, sub_3BB70, 0x0001, 0x0000 },
{ 0x002548F4, 0x0001, sub_3BB90, 0x0001, 0x0000 },
{ 0x002548F4, 0x0002, sub_3BBB0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0003, sub_3BBD0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0004, sub_3BBF0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0005, sub_3BC10, 0x0001, 0x0000 },
{ 0x002548F4, 0x0006, sub_3BC30, 0x0001, 0x0000 },
{ 0x002548F4, 0x0007, sub_3BC50, 0x0001, 0x0000 },
{ 0x002548F4, 0x0008, sub_3BC70, 0x0001, 0x0000 },
{ 0x002548F4, 0x0009, sub_3BC90, 0x0001, 0x0000 },
{ 0x002548F4, 0x000A, sub_3BCB0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000B, sub_3BCD0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000C, sub_3BCF0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000D, sub_3BD10, 0x0001, 0x0000 },
{ 0x002548F4, 0x000E, sub_3BD30, 0x0001, 0x0000 },
{ 0x002548F4, 0x000F, sub_3BD50, 0x0001, 0x0000 },
{ 0x002548F4, 0x0010, sub_3BD70, 0x0001, 0x0000 },
{ 0x002548F4, 0x0011, sub_3BD90, 0x0001, 0x0000 },
{ 0x002548F4, 0x0012, sub_3BDB0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0013, sub_3BDD0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0014, sub_3BDF0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0015, sub_3BE10, 0x0001, 0x0000 },
{ 0x002548F4, 0x0016, sub_3BE30, 0x0001, 0x0000 },
{ 0x002548F4, 0x0017, sub_3BE50, 0x0001, 0x0000 },
{ 0x002548F4, 0x0018, sub_3BE70, 0x0001, 0x0000 },
{ 0x002548F4, 0x0019, sub_3BE90, 0x0001, 0x0000 },
{ 0x002548F4, 0x001A, sub_3BEB0, 0x0001, 0x0000 },
{ 0x002548F4, 0x001B, sub_3BED0, 0x0001, 0x0000 },
{ 0x002548F4, 0x001C, sub_3BEF0, 0x0001, 0x0000 },
{ 0x002548F4, 0x001D, sub_3BF10, 0x0001, 0x0000 },
{ 0x002548F4, 0x001E, sub_3BF30, 0x0001, 0x0000 },
{ 0x002548F4, 0x001F, sub_3BF50, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };

Type_254A34 str_2567D8[] = {
{ 0x002548F4, 0x0000, (Type_AE400_29795* (*)(axis_3d*))sub_3C090, 0x0001, 0x0000 },
{ 0x002548F4, 0x0001, (Type_AE400_29795* (*)(axis_3d*))sub_3C0F0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0002, (Type_AE400_29795* (*)(axis_3d*))sub_3C0C0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0003, (Type_AE400_29795* (*)(axis_3d*))sub_3C040, 0x0001, 0x0000 },
{ 0x002548F4, 0x0004, (Type_AE400_29795* (*)(axis_3d*))sub_3C1B0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0005, (Type_AE400_29795* (*)(axis_3d*))sub_3C330, 0x0001, 0x0000 },
{ 0x002548F4, 0x0006, (Type_AE400_29795* (*)(axis_3d*))sub_3C150, 0x0001, 0x0000 },
{ 0x002548F4, 0x0007, (Type_AE400_29795* (*)(axis_3d*))sub_3C1E0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0008, (Type_AE400_29795* (*)(axis_3d*))sub_3C390, 0x0001, 0x0000 },
{ 0x002548F4, 0x0009, (Type_AE400_29795* (*)(axis_3d*))sub_3C300, 0x0001, 0x0000 },
{ 0x002548F4, 0x000A, (Type_AE400_29795* (*)(axis_3d*))sub_3C120, 0x0001, 0x0000 },
{ 0x002548F4, 0x000B, (Type_AE400_29795* (*)(axis_3d*))sub_3C270, 0x0001, 0x0000 },
{ 0x002548F4, 0x000C, (Type_AE400_29795* (*)(axis_3d*))sub_3C2D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000D, (Type_AE400_29795* (*)(axis_3d*))sub_3C2A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000E, (Type_AE400_29795* (*)(axis_3d*))sub_3C210, 0x0001, 0x0000 },
{ 0x002548F4, 0x000F, (Type_AE400_29795* (*)(axis_3d*))sub_3C240, 0x0001, 0x0000 },
{ 0x002548F4, 0x0010, (Type_AE400_29795* (*)(axis_3d*))sub_3C060, 0x0001, 0x0000 },
{ 0x002548F4, 0x0011, (Type_AE400_29795* (*)(axis_3d*))sub_3C3C0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0012, (Type_AE400_29795* (*)(axis_3d*))sub_3C360, 0x0001, 0x0000 },
{ 0x002548F4, 0x0013, (Type_AE400_29795* (*)(axis_3d*))sub_3C180, 0x0001, 0x0000 },
{ 0x002548F4, 0x0014, (Type_AE400_29795* (*)(axis_3d*))sub_3C3F0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0015, (Type_AE400_29795* (*)(axis_3d*))sub_3C420, 0x0001, 0x0000 },
{ 0x002548F4, 0x0016, (Type_AE400_29795* (*)(axis_3d*))sub_3C450, 0x0001, 0x0000 },
{ 0x002548F4, 0x0017, (Type_AE400_29795* (*)(axis_3d*))sub_3C480, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };

Type_254A34 str_256980[] = {
{ 0x002548F4, 0x0000, (Type_AE400_29795* (*)(axis_3d*))sub_3C4B0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0001, (Type_AE400_29795* (*)(axis_3d*))sub_3C4E0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0002, (Type_AE400_29795* (*)(axis_3d*))sub_3C510, 0x0001, 0x0000 },
{ 0x002548F4, 0x0003, (Type_AE400_29795* (*)(axis_3d*))sub_3C540, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 } };

int sub_25980() { return 0; };
int sub_49AC0() { return 0; };
int sub_49B40() { return 0; };
int sub_49B70() { return 0; };
int sub_47F80() { return 0; };
int sub_481C0() { return 0; };
int sub_31A90() { return 0; };
int sub_5B5D0() { return 0; };
int sub_48650() { return 0; };
void sub_56250(Type_AE400_29795* a1x) {
    sub_55DB0(a1x);
};
void sub_56260(Type_AE400_29795* a1x) {
    sub_55D30(a1x);
};
int sub_43AF0() { return 0; };
int sub_262C0() { return 0; };
int sub_26350() { return 0; };
int sub_29B70() { return 0; };

int sub_1F630() { return 0; };
int sub_1F9F0() { return 0; };
int sub_1FAB0() { return 0; };
int sub_1FE80() { return 0; };
int sub_1FF50() { return 0; };//?
int sub_20B90() { return 0; };
int sub_20BA0() { return 0; };
int sub_20BB0() { return 0; };


Type_254A34x str_254A08[] = {
{ 0x002548F4, 0x0000, nullptr, 0x0000, 0x0000 }
};

Type_254A34x str_254C3C[] = {
{ 0x002548F4,0x0000,(void (*)(Type_AE400_29795*))sub_49890, 0x0001, 0x0000 },
{ 0x002548F4,0x0001,(void (*)(Type_AE400_29795*))sub_499C0,0x0001,0x0000 },
{ 0x002548F4,0x0002,(void (*)(Type_AE400_29795*))sub_49A50,0x0001,0x0000 },
{ 0x002548F4,0x0003,(void (*)(Type_AE400_29795*))sub_49AA0,0x0001,0x0000 },
{ 0x002548F4,0x0004,(void (*)(Type_AE400_29795*))sub_49AC0,0x0001,0x0000 },
{ 0x002548F4,0x0005,(void (*)(Type_AE400_29795*))sub_49AC0,0x0001,0x0000 },
{ 0x002548F4,0x0006,(void (*)(Type_AE400_29795*))sub_49AD0,0x0001,0x0000 },
{ 0x002548F4,0x0007,(void (*)(Type_AE400_29795*))sub_49B40,0x0001,0x0000 },
{ 0x002548F4,0x0008,(void (*)(Type_AE400_29795*))sub_49B40,0x0001,0x0000 },
{ 0x002548F4,0x0009,(void (*)(Type_AE400_29795*))sub_49B50,0x0001,0x0000 },
{ 0x002548F4,0x000A,(void (*)(Type_AE400_29795*))sub_49B70,0x0001,0x0000 },
{ 0x002548F4,0x000B,(void (*)(Type_AE400_29795*))sub_49B70,0x0001,0x0000 },
{ 0x002548F4,0x000C,(void (*)(Type_AE400_29795*))sub_49B70,0x0001,0x0000 },
{ 0x002548F4,0x000D,(void (*)(Type_AE400_29795*))sub_49B70,0x0001,0x0000 },
{ 0x002548F4,0x0000,nullptr,0x0000,0x0000 }
};

Type_254A34x str_254ADC[] = {
{ 0x002548F4,0x0000,sub_45C90, 0x0001, 0x0000 },
{ 0x002548F4,0x0001,(void (*)(Type_AE400_29795*))sub_13170,0x0001,0x0000 },
{ 0x002548F4,0x0002,(void (*)(Type_AE400_29795*))sub_45FC0,0x0001,0x0000 },
{ 0x002548F4,0x0003,(void (*)(Type_AE400_29795*))sub_46480,0x0001,0x0000 },
{ 0x002548F4,0x0004,(void (*)(Type_AE400_29795*))sub_46DB0,0x0001,0x0000 },
{ 0x002548F4,0x0005,(void (*)(Type_AE400_29795*))sub_46F10,0x0001,0x0000 },
{ 0x002548F4,0x0006,(void (*)(Type_AE400_29795*))sub_470E0,0x0001,0x0000 },
{ 0x002548F4,0x0007,(void (*)(Type_AE400_29795*))sub_47F80,0x0001,0x0000 },
{ 0x002548F4,0x0008,(void (*)(Type_AE400_29795*))sub_47F80,0x0001,0x0000 },
{ 0x002548F4,0x0009,(void (*)(Type_AE400_29795*))sub_47F90,0x0001,0x0000 },
{ 0x002548F4,0x000A,(void (*)(Type_AE400_29795*))sub_481C0,0x0001,0x0000 },
{ 0x00000000,0x0000,(void (*)(Type_AE400_29795*))nullptr,0x0000,0x0000 }
};

Type_254A34x str_254DAC[] = {
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 }
};

Type_254A34x str_254DCC[] = {//254DCC
{ 0x002548F4,0x0000,(void (*)(Type_AE400_29795*))sub_1B060, 0x0001, 0x0000 },
{ 0x002548F4,0x0001,(void (*)(Type_AE400_29795*))sub_1B070,0x0001,0x0000 },
{ 0x002548F4,0x0002,(void (*)(Type_AE400_29795*))sub_1B090,0x0001,0x0000 },
{ 0x002548F4,0x0003,(void (*)(Type_AE400_29795*))sub_1B0E0,0x0001,0x0000 },
{ 0x002548F4,0x0004,(void (*)(Type_AE400_29795*))sub_1B100,0x0001,0x0000 },
{ 0x002548F4,0x0005,(void (*)(Type_AE400_29795*))sub_1B110,0x0001,0x0000 },
{ 0x002548F4,0x0006,(void (*)(Type_AE400_29795*))sub_1B160,0x0001,0x0000 },
{ 0x002548F4,0x0007,(void (*)(Type_AE400_29795*))sub_1B200,0x0001,0x0000 },
{ 0x002548F4,0x0008,(void (*)(Type_AE400_29795*))sub_1B2D0,0x0001,0x0000 },
{ 0x002548F4,0x0009,(void (*)(Type_AE400_29795*))sub_1B320,0x0001,0x0000 },
{ 0x002548F4,0x000A,(void (*)(Type_AE400_29795*))sub_1B330,0x0001,0x0000 },
{ 0x002548F4,0x000B,(void (*)(Type_AE400_29795*))sub_1B340,0x0001,0x0000 },
{ 0x002548F4,0x000C,(void (*)(Type_AE400_29795*))sub_1B350,0x0001,0x0000 },
{ 0x002548F4,0x000D,(void (*)(Type_AE400_29795*))sub_1B370,0x0001,0x0000 },
{ 0x002548F4, 0x000E, (void (*)(Type_AE400_29795*))sub_1B3C0, 0x0001, 0x0000 },
{ 0x002548F4, 0x000F, (void (*)(Type_AE400_29795*))sub_1B4C0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0010, (void (*)(Type_AE400_29795*))sub_1B4E0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0011, (void (*)(Type_AE400_29795*))sub_1B4F0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0012, (void (*)(Type_AE400_29795*))sub_1B500, 0x0001, 0x0000 },
{ 0x002548F4, 0x0013, (void (*)(Type_AE400_29795*))sub_1B510, 0x0001, 0x0000 },
{ 0x002548F4, 0x0014, (void (*)(Type_AE400_29795*))sub_1B520, 0x0001, 0x0000 },
{ 0x002548F4, 0x0015, (void (*)(Type_AE400_29795*))sub_1B570, 0x0001, 0x0000 },
{ 0x002548F4, 0x0016, (void (*)(Type_AE400_29795*))sub_1B580, 0x0001, 0x0000 },
{ 0x002548F4, 0x0017, (void (*)(Type_AE400_29795*))sub_1B590, 0x0001, 0x0000 },
{ 0x002548F4, 0x0018, (void (*)(Type_AE400_29795*))sub_1B5A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0019, (void (*)(Type_AE400_29795*))sub_1B5D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x001A, (void (*)(Type_AE400_29795*))sub_1BB20, 0x0001, 0x0000 },
{ 0x002548F4, 0x001B, (void (*)(Type_AE400_29795*))sub_1BBE0, 0x0001, 0x0000 },
{ 0x002548F4, 0x001C, (void (*)(Type_AE400_29795*))sub_1BC10, 0x0001, 0x0000 },
{ 0x002548F4, 0x001D, (void (*)(Type_AE400_29795*))sub_1BC40, 0x0001, 0x0000 },
{ 0x002548F4, 0x001E, (void (*)(Type_AE400_29795*))sub_1BD10, 0x0001, 0x0000 },
{ 0x002548F4, 0x001F, (void (*)(Type_AE400_29795*))sub_1BD20, 0x0001, 0x0000 },
{ 0x002548F4, 0x0020, (void (*)(Type_AE400_29795*))sub_1C110, 0x0001, 0x0000 },
{ 0x002548F4, 0x0021, (void (*)(Type_AE400_29795*))sub_1C170, 0x0001, 0x0000 },
{ 0x002548F4, 0x0022, (void (*)(Type_AE400_29795*))sub_1C3C0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0023, (void (*)(Type_AE400_29795*))sub_1C3D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0024, (void (*)(Type_AE400_29795*))sub_1C490, 0x0001, 0x0000 },
{ 0x002548F4, 0x0025, (void (*)(Type_AE400_29795*))sub_1C4A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0026, (void (*)(Type_AE400_29795*))sub_1C4F0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0027, (void (*)(Type_AE400_29795*))sub_1C880, 0x0001, 0x0000 },
{ 0x002548F4, 0x0028, (void (*)(Type_AE400_29795*))sub_1C8D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0029, (void (*)(Type_AE400_29795*))sub_1C8E0, 0x0001, 0x0000 },
{ 0x002548F4, 0x002A, (void (*)(Type_AE400_29795*))sub_1C8F0, 0x0001, 0x0000 },
{ 0x002548F4, 0x002B, (void (*)(Type_AE400_29795*))sub_1C900, 0x0001, 0x0000 },
{ 0x002548F4, 0x002C, (void (*)(Type_AE400_29795*))sub_1C960, 0x0001, 0x0000 },
{ 0x002548F4, 0x002D, (void (*)(Type_AE400_29795*))sub_1CA00, 0x0001, 0x0000 },
{ 0x002548F4, 0x002E, (void (*)(Type_AE400_29795*))sub_1CA20, 0x0001, 0x0000 },
{ 0x002548F4, 0x002F, (void (*)(Type_AE400_29795*))sub_1CA30, 0x0001, 0x0000 },
{ 0x002548F4, 0x0030, (void (*)(Type_AE400_29795*))sub_1CA40, 0x0001, 0x0000 },
{ 0x002548F4, 0x0031, (void (*)(Type_AE400_29795*))sub_1CA50, 0x0001, 0x0000 },
{ 0x002548F4, 0x0032, (void (*)(Type_AE400_29795*))sub_1CE30, 0x0001, 0x0000 },
{ 0x002548F4, 0x0033, (void (*)(Type_AE400_29795*))sub_1CF50, 0x0001, 0x0000 },
{ 0x002548F4, 0x0034, (void (*)(Type_AE400_29795*))sub_1CF60, 0x0001, 0x0000 },
{ 0x002548F4, 0x0035, (void (*)(Type_AE400_29795*))sub_1CFE0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0036, (void (*)(Type_AE400_29795*))sub_1CFF0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0037, (void (*)(Type_AE400_29795*))sub_1D060, 0x0001, 0x0000 },
{ 0x002548F4, 0x0038, (void (*)(Type_AE400_29795*))sub_1DA60, 0x0001, 0x0000 },
{ 0x002548F4, 0x0039, (void (*)(Type_AE400_29795*))sub_1DC80, 0x0001, 0x0000 },
{ 0x002548F4, 0x003A, (void (*)(Type_AE400_29795*))sub_1DCB0, 0x0001, 0x0000 },
{ 0x002548F4, 0x003B, (void (*)(Type_AE400_29795*))sub_1DCC0, 0x0001, 0x0000 },
{ 0x002548F4, 0x003C, (void (*)(Type_AE400_29795*))sub_1DDD0, 0x0001, 0x0000 },
{ 0x002548F4, 0x003D, (void (*)(Type_AE400_29795*))sub_1DDE0, 0x0001, 0x0000 },
{ 0x002548F4, 0x003E, (void (*)(Type_AE400_29795*))sub_1DDF0, 0x0001, 0x0000 },
{ 0x002548F4, 0x003F, (void (*)(Type_AE400_29795*))sub_1DE10, 0x0001, 0x0000 },
{ 0x002548F4, 0x0040, (void (*)(Type_AE400_29795*))sub_1DE20, 0x0001, 0x0000 },
{ 0x002548F4, 0x0041, (void (*)(Type_AE400_29795*))sub_1DE30, 0x0001, 0x0000 },
{ 0x002548F4, 0x0042, (void (*)(Type_AE400_29795*))sub_1DE40, 0x0001, 0x0000 },
{ 0x002548F4, 0x0043, (void (*)(Type_AE400_29795*))sub_1DFE0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0044, (void (*)(Type_AE400_29795*))sub_1E380, 0x0001, 0x0000 },
{ 0x002548F4, 0x0045, (void (*)(Type_AE400_29795*))sub_1E6F0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0046, (void (*)(Type_AE400_29795*))sub_1E700, 0x0001, 0x0000 },
{ 0x002548F4, 0x0047, (void (*)(Type_AE400_29795*))sub_1E710, 0x0001, 0x0000 },
{ 0x002548F4, 0x0048, (void (*)(Type_AE400_29795*))sub_1EA40, 0x0001, 0x0000 },
{ 0x002548F4, 0x0049, (void (*)(Type_AE400_29795*))sub_1EED0, 0x0001, 0x0000 },
{ 0x002548F4, 0x004A, (void (*)(Type_AE400_29795*))sub_1F120, 0x0001, 0x0000 },
{ 0x002548F4, 0x004B, (void (*)(Type_AE400_29795*))sub_1F390, 0x0001, 0x0000 },
{ 0x002548F4, 0x004C, (void (*)(Type_AE400_29795*))sub_1F5A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x004D, (void (*)(Type_AE400_29795*))sub_1F5B0, 0x0001, 0x0000 },
{ 0x002548F4, 0x004E, (void (*)(Type_AE400_29795*))sub_1F630, 0x0001, 0x0000 },
{ 0x002548F4, 0x004F, (void (*)(Type_AE400_29795*))sub_1F640, 0x0001, 0x0000 },
{ 0x002548F4, 0x0050, (void (*)(Type_AE400_29795*))sub_1F9F0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0051, (void (*)(Type_AE400_29795*))sub_1F9F0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0052, (void (*)(Type_AE400_29795*))sub_1FA00, 0x0001, 0x0000 },
{ 0x002548F4, 0x0053, (void (*)(Type_AE400_29795*))sub_1FAA0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0054, (void (*)(Type_AE400_29795*))sub_1FAB0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0055, (void (*)(Type_AE400_29795*))sub_1FAC0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0056, (void (*)(Type_AE400_29795*))sub_1FE80, 0x0001, 0x0000 },
{ 0x002548F4, 0x0057, (void (*)(Type_AE400_29795*))sub_1FE80, 0x0001, 0x0000 },
{ 0x002548F4, 0x0058, (void (*)(Type_AE400_29795*))sub_1FE90, 0x0001, 0x0000 },
{ 0x002548F4, 0x0059, (void (*)(Type_AE400_29795*))sub_1FEC0, 0x0001, 0x0000 },
{ 0x002548F4, 0x005A, (void (*)(Type_AE400_29795*))sub_1FF50, 0x0001, 0x0000 },
{ 0x002548F4, 0x005B, (void (*)(Type_AE400_29795*))sub_1FF60, 0x0001, 0x0000 },
{ 0x002548F4, 0x005C, (void (*)(Type_AE400_29795*))sub_201D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x005D, (void (*)(Type_AE400_29795*))sub_203E0, 0x0001, 0x0000 },
{ 0x002548F4, 0x005E, (void (*)(Type_AE400_29795*))sub_203F0, 0x0001, 0x0000 },
{ 0x002548F4, 0x005F, (void (*)(Type_AE400_29795*))sub_20400, 0x0001, 0x0000 },
{ 0x002548F4, 0x0060, (void (*)(Type_AE400_29795*))sub_20700, 0x0001, 0x0000 },
{ 0x002548F4, 0x0061, (void (*)(Type_AE400_29795*))sub_20710, 0x0001, 0x0000 },
{ 0x002548F4, 0x0062, (void (*)(Type_AE400_29795*))sub_207E0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0063, (void (*)(Type_AE400_29795*))sub_20B60, 0x0001, 0x0000 },
{ 0x002548F4, 0x0064, (void (*)(Type_AE400_29795*))sub_20B70, 0x0001, 0x0000 },
{ 0x002548F4, 0x0065, (void (*)(Type_AE400_29795*))sub_20B80, 0x0001, 0x0000 },
{ 0x002548F4, 0x0066, (void (*)(Type_AE400_29795*))sub_20B90, 0x0000, 0x0000 },
{ 0x002548F4, 0x0067, (void (*)(Type_AE400_29795*))sub_20B90, 0x0000, 0x0000 },
{ 0x002548F4, 0x0068, (void (*)(Type_AE400_29795*))sub_20B90, 0x0000, 0x0000 },
{ 0x002548F4, 0x0069, (void (*)(Type_AE400_29795*))sub_20B90, 0x0000, 0x0000 },
{ 0x002548F4, 0x006A, (void (*)(Type_AE400_29795*))sub_20B90, 0x0000, 0x0000 },
{ 0x002548F4, 0x006B, (void (*)(Type_AE400_29795*))sub_20B90, 0x0000, 0x0000 },
{ 0x002548F4, 0x006C, (void (*)(Type_AE400_29795*))sub_20BA0, 0x0000, 0x0000 },
{ 0x002548F4, 0x006D, (void (*)(Type_AE400_29795*))sub_20BA0, 0x0000, 0x0000 },
{ 0x002548F4, 0x006E, (void (*)(Type_AE400_29795*))sub_20BA0, 0x0000, 0x0000 },
{ 0x002548F4, 0x006F, (void (*)(Type_AE400_29795*))sub_20BA0, 0x0000, 0x0000 },
{ 0x002548F4, 0x0070, (void (*)(Type_AE400_29795*))sub_20BA0, 0x0000, 0x0000 },
{ 0x002548F4, 0x0071, (void (*)(Type_AE400_29795*))sub_20BA0, 0x0000, 0x0000 },
{ 0x002548F4, 0x0072, (void (*)(Type_AE400_29795*))sub_20BB0, 0x0000, 0x0000 },
{ 0x002548F4, 0x0073, (void (*)(Type_AE400_29795*))sub_20BB0, 0x0000, 0x0000 },
{ 0x002548F4, 0x0074, (void (*)(Type_AE400_29795*))sub_20BB0, 0x0000, 0x0000 },
{ 0x002548F4, 0x0075, (void (*)(Type_AE400_29795*))sub_20BB0, 0x0000, 0x0000 },
{ 0x002548F4, 0x0076, (void (*)(Type_AE400_29795*))sub_20BB0, 0x0000, 0x0000 },
{ 0x002548F4, 0x0077, (void (*)(Type_AE400_29795*))sub_20BB0, 0x0000, 0x0000 },
{ 0x002548F4, 0x0078, (void (*)(Type_AE400_29795*))sub_19550, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 }

};

Type_254A34x str_255574[] = {
{ 0x002548F4,0x0000,(void (*)(Type_AE400_29795*))sub_31A90, 0x0001, 0x0000 },
{ 0x002548F4,0x0001,(void (*)(Type_AE400_29795*))sub_31A90,0x0001,0x0000 },
{ 0x00000000,0x0000,nullptr,0x0000,0x0000 }
};

Type_254A34x str_2555CC[] = {
{ 0x002548F4,0x0000,(void (*)(Type_AE400_29795*))sub_5B5D0, 0x0001, 0x0000 },
{ 0x002548F4,0x0001,(void (*)(Type_AE400_29795*))sub_5B5D0,0x0001,0x0000 },
{ 0x002548F4,0x0002,(void (*)(Type_AE400_29795*))sub_5B5D0,0x0001,0x0000 },
{ 0x002548F4,0x0003,(void (*)(Type_AE400_29795*))sub_5B5D0,0x0001,0x0000 },
{ 0x002548F4,0x0004,(void (*)(Type_AE400_29795*))sub_5B5D0,0x0001,0x0000 },
{ 0x00000000,0x0000,nullptr,0x0000,0x0000 }
};

Type_254A34x str_255674[] = {
{ 0x002548F4, 0x0000, (void (*)(Type_AE400_29795*))sub_48650, 0x0001, 0x0000 },
{ 0x002548F4,0x0001,(void (*)(Type_AE400_29795*))sub_48650,0x0001,0x0000 },
{ 0x002548F4,0x0002,(void (*)(Type_AE400_29795*))sub_48650,0x0001,0x0000 },
{ 0x002548F4,0x0003,(void (*)(Type_AE400_29795*))sub_48650,0x0001,0x0000 },
{ 0x002548F4,0x0004,(void (*)(Type_AE400_29795*))sub_48650,0x0001,0x0000 },
{ 0x002548F4,0x0005,(void (*)(Type_AE400_29795*))sub_48650,0x0001,0x0000 },
{ 0x00000000,0x0000,(void (*)(Type_AE400_29795*))nullptr,0x0000,0x0000 }
};

Type_254A34x str_25573C[] = {
{ 0x002548F4,0x0000,(void (*)(Type_AE400_29795*))sub_52B30, 0x0001, 0x0000 },
{ 0x002548F4,0x0001,(void (*)(Type_AE400_29795*))sub_52ED0,0x0001,0x0000 },
{ 0x002548F4,0x0002,(void (*)(Type_AE400_29795*))sub_53060,0x0001,0x0000 },
{ 0x002548F4,0x0003,(void (*)(Type_AE400_29795*))sub_53070,0x0001,0x0000 },
{ 0x002548F4,0x0004,(void (*)(Type_AE400_29795*))sub_53060,0x0001,0x0000 },
{ 0x002548F4,0x0005,(void (*)(Type_AE400_29795*))sub_53060,0x0001,0x0000 },
{ 0x002548F4,0x0006,(void (*)(Type_AE400_29795*))sub_53060,0x0001,0x0000 },
{ 0x002548F4,0x0007,(void (*)(Type_AE400_29795*))sub_530B0,0x0001,0x0000 },
{ 0x002548F4,0x0008,(void (*)(Type_AE400_29795*))sub_530C0,0x0001,0x0000 },
{ 0x002548F4,0x0009,(void (*)(Type_AE400_29795*))sub_535E0,0x0001,0x0000 },
{ 0x002548F4,0x000A,(void (*)(Type_AE400_29795*))sub_53980,0x0001,0x0000 },
{ 0x002548F4,0x000B,(void (*)(Type_AE400_29795*))sub_53060,0x0001,0x0000 },
{ 0x002548F4,0x000C,(void (*)(Type_AE400_29795*))sub_53DC0,0x0001,0x0000 },
{ 0x002548F4,0x000D,(void (*)(Type_AE400_29795*))sub_54180,0x0001,0x0000 },
{ 0x002548F4,0x0000,nullptr,0x0000,0x0000 }
};

Type_254A34x str_255998[] = {
{ 0x002548F4,0x0000,(void (*)(Type_AE400_29795*))sub_24F60,0x0001,0x0000 },
{ 0x002548F4,0x0001,(void (*)(Type_AE400_29795*))sub_25130,0x0001,0x0000 },
{ 0x002548F4,0x0002,(void (*)(Type_AE400_29795*))sub_252B0,0x0001,0x0000 },
{ 0x002548F4,0x0003,(void (*)(Type_AE400_29795*))sub_253F0,0x0001,0x0000 },
{ 0x002548F4,0x0004,(void (*)(Type_AE400_29795*))sub_25980,0x0001,0x0000 },
{ 0x002548F4,0x0005,(void (*)(Type_AE400_29795*))sub_25410,0x0001,0x0000 },
{ 0x002548F4,0x0006,(void (*)(Type_AE400_29795*))sub_252D0,0x0001,0x0000 },
{ 0x002548F4,0x0007,(void (*)(Type_AE400_29795*))sub_253E0,0x0001,0x0000 },
{ 0x002548F4,0x0008,(void (*)(Type_AE400_29795*))sub_253E0,0x0001,0x0000 },
{ 0x002548F4,0x0009,(void (*)(Type_AE400_29795*))sub_25470,0x0001,0x0000 },
{ 0x002548F4,0x000A,(void (*)(Type_AE400_29795*))sub_25570,0x0001,0x0000 },
{ 0x002548F4,0x000B,(void (*)(Type_AE400_29795*))sub_25670,0x0001,0x0000 },
{ 0x002548F4,0x000C,(void (*)(Type_AE400_29795*))sub_25760,0x0001,0x0000 },
{ 0x002548F4,0x000D,(void (*)(Type_AE400_29795*))sub_257B0,0x0001,0x0000 },
{ 0x002548F4,0x000E,(void (*)(Type_AE400_29795*))sub_258A0,0x0001,0x0000 },
{ 0x002548F4,0x000F,(void (*)(Type_AE400_29795*))sub_25990,0x0001,0x0000 },
{ 0x002548F4,0x0010,(void (*)(Type_AE400_29795*))sub_25A60,0x0001,0x0000 },
{ 0x002548F4,0x0011,(void (*)(Type_AE400_29795*))sub_25CE0,0x0001,0x0000 },
{ 0x002548F4,0x0012,(void (*)(Type_AE400_29795*))sub_25EC0,0x0001,0x0000 },
{ 0x002548F4,0x0013,(void (*)(Type_AE400_29795*))sub_26140,0x0001,0x0000 },
{ 0x002548F4,0x0014,(void (*)(Type_AE400_29795*))sub_262C0,0x0001,0x0000 },
{ 0x002548F4,0x0015,(void (*)(Type_AE400_29795*))sub_262C0,0x0001,0x0000 },
{ 0x002548F4,0x0016,(void (*)(Type_AE400_29795*))sub_262C0,0x0001,0x0000 },
{ 0x002548F4,0x0017,(void (*)(Type_AE400_29795*))sub_262D0,0x0001,0x0000 },
{ 0x002548F4,0x0018,(void (*)(Type_AE400_29795*))sub_26350,0x0001,0x0000 },
{ 0x002548F4,0x0019,(void (*)(Type_AE400_29795*))sub_26360,0x0001,0x0000 },
{ 0x002548F4,0x001A,(void (*)(Type_AE400_29795*))sub_263C0,0x0001,0x0000 },
{ 0x002548F4,0x001B,(void (*)(Type_AE400_29795*))sub_26670,0x0001,0x0000 },
{ 0x002548F4,0x001C,(void (*)(Type_AE400_29795*))sub_26560,0x0001,0x0000 },
{ 0x002548F4,0x001D,(void (*)(Type_AE400_29795*))sub_26760,0x0001,0x0000 },
{ 0x002548F4,0x001E,(void (*)(Type_AE400_29795*))sub_253E0,0x0001,0x0000 },
{ 0x002548F4,0x001F,(void (*)(Type_AE400_29795*))sub_253E0,0x0001,0x0000 },
{ 0x002548F4,0x0020,(void (*)(Type_AE400_29795*))sub_26890,0x0001,0x0000 },
{ 0x002548F4,0x0021,(void (*)(Type_AE400_29795*))sub_253E0,0x0001,0x0000 },
{ 0x002548F4,0x0022,(void (*)(Type_AE400_29795*))sub_26920,0x0001,0x0000 },
{ 0x002548F4,0x0023,(void (*)(Type_AE400_29795*))sub_26CE0,0x0001,0x0000 },
{ 0x002548F4,0x0024,(void (*)(Type_AE400_29795*))sub_26A60,0x0001,0x0000 },
{ 0x002548F4,0x0025,(void (*)(Type_AE400_29795*))sub_26C00,0x0001,0x0000 },
{ 0x002548F4,0x0026,(void (*)(Type_AE400_29795*))sub_26E90,0x0001,0x0000 },
{ 0x002548F4,0x0000,nullptr,0x0000,0x0000 },
{ 0x002548F4,0x0028,(void (*)(Type_AE400_29795*))sub_26D20,0x0001,0x0000 },
{ 0x002548F4,0x0029,sub_27030,0x0001,0x0000 },
{ 0x002548F4,0x002A,(void (*)(Type_AE400_29795*))sub_275C0,0x0001,0x0000 },
{ 0x002548F4,0x002B,(void (*)(Type_AE400_29795*))sub_28200,0x0001,0x0000 },
{ 0x002548F4,0x002C,(void (*)(Type_AE400_29795*))sub_285C0,0x0001,0x0000 },
{ 0x002548F4,0x002D,(void (*)(Type_AE400_29795*))sub_293D0,0x0001,0x0000 },
{ 0x002548F4,0x002E,(void (*)(Type_AE400_29795*))sub_29540,0x0000,0x0000 },
{ 0x002548F4,0x0000,nullptr,0x0000,0x0000 },
{ 0x002548F4,0x0030,(void (*)(Type_AE400_29795*))sub_27D30,0x0001,0x0000 },
{ 0x002548F4,0x0000,nullptr,0x0000,0x0000 },
{ 0x002548F4,0x0000,nullptr,0x0000,0x0000 },
{ 0x002548F4,0x0033,(void (*)(Type_AE400_29795*))sub_27D30,0x0001,0x0000 },
{ 0x002548F4,0x0034,sub_28DC0,0x0001,0x0000 },
{ 0x002548F4,0x0035,(void (*)(Type_AE400_29795*))sub_28FE0,0x0001,0x0000 },
{ 0x002548F4,0x0036,(void (*)(Type_AE400_29795*))sub_253E0,0x0001,0x0000 },
{ 0x002548F4,0x0037,(void (*)(Type_AE400_29795*))sub_269A0,0x0001,0x0000 },
{ 0x002548F4,0x0038,(void (*)(Type_AE400_29795*))sub_296A0,0x0001,0x0000 },
{ 0x002548F4,0x0039,(void (*)(Type_AE400_29795*))sub_29700,0x0001,0x0000 },
{ 0x002548F4,0x003A,(void (*)(Type_AE400_29795*))sub_29780,0x0001,0x0000 },
{ 0x002548F4,0x003B,(void (*)(Type_AE400_29795*))sub_29920_29960,0x0001,0x0000 },
{ 0x002548F4,0x003C,(void (*)(Type_AE400_29795*))sub_299D0_29A10,0x0001,0x0000 },
{ 0x002548F4,0x003D,(void (*)(Type_AE400_29795*))sub_29B70,0x0001,0x0000 },
{ 0x00000000,0x0000,nullptr,0x0000,0x0000 }
};
Type_254A34x str_256038[] = {
{ 0x002548F4,0x0000,(void (*)(Type_AE400_29795*))sub_59A80,0x0001,0x0000 },
{ 0x002548F4,0x0001,(void (*)(Type_AE400_29795*))sub_59AB0,0x0001,0x0000 },
{ 0x002548F4,0x0002,(void (*)(Type_AE400_29795*))sub_59AE0,0x0001,0x0000 },
{ 0x002548F4,0x0003,(void (*)(Type_AE400_29795*))sub_59B30,0x0001,0x0000 },
{ 0x002548F4,0x0004,(void (*)(Type_AE400_29795*))sub_59B80,0x0001,0x0000 },
{ 0x002548F4,0x0005,(void (*)(Type_AE400_29795*))sub_59C40,0x0001,0x0000 },
{ 0x002548F4,0x0006,(void (*)(Type_AE400_29795*))sub_59C70,0x0001,0x0000 },
{ 0x002548F4,0x0007,(void (*)(Type_AE400_29795*))sub_59CA0,0x0001,0x0000 },
{ 0x002548F4,0x0008,(void (*)(Type_AE400_29795*))sub_59CF0,0x0001,0x0000 },
{ 0x002548F4,0x0009,(void (*)(Type_AE400_29795*))sub_59D40,0x0001,0x0000 },
{ 0x002548F4,0x000A,(void (*)(Type_AE400_29795*))sub_59D70,0x0001,0x0000 },
{ 0x002548F4,0x000B,(void (*)(Type_AE400_29795*))sub_59DA0,0x0001,0x0000 },
{ 0x002548F4,0x000C,(void (*)(Type_AE400_29795*))sub_59DF0,0x0001,0x0000 },
{ 0x002548F4,0x000D,(void (*)(Type_AE400_29795*))sub_59F60,0x0001,0x0000 },
{ 0x002548F4,0x000E,(void (*)(Type_AE400_29795*))sub_59F70,0x0001,0x0000 },
{ 0x002548F4,0x000F,(void (*)(Type_AE400_29795*))sub_59F80,0x0001,0x0000 },
{ 0x002548F4,0x0010,(void (*)(Type_AE400_29795*))sub_59F90,0x0001,0x0000 },
{ 0x002548F4,0x0011,(void (*)(Type_AE400_29795*))sub_59FA0,0x0001,0x0000 },
{ 0x002548F4,0x0012,(void (*)(Type_AE400_29795*))sub_59FB0,0x0001,0x0000 },
{ 0x002548F4,0x0013,(void (*)(Type_AE400_29795*))sub_59FC0,0x0001,0x0000 },
{ 0x002548F4,0x0014,(void (*)(Type_AE400_29795*))sub_59FD0,0x0001,0x0000 },
{ 0x002548F4,0x0015,(void (*)(Type_AE400_29795*))sub_59FE0,0x0001,0x0000 },
{ 0x002548F4,0x0016,(void (*)(Type_AE400_29795*))sub_59FF0,0x0001,0x0000 },
{ 0x002548F4,0x0017,(void (*)(Type_AE400_29795*))sub_5A000,0x0001,0x0000 },
{ 0x002548F4,0x0018,(void (*)(Type_AE400_29795*))sub_5A010,0x0001,0x0000 },
{ 0x002548F4,0x0019,(void (*)(Type_AE400_29795*))sub_5A020,0x0001,0x0000 },
{ 0x002548F4,0x001A,(void (*)(Type_AE400_29795*))sub_5A030,0x0001,0x0000 },
{ 0x002548F4,0x001B,(void (*)(Type_AE400_29795*))sub_5A040,0x0001,0x0000 },
{ 0x002548F4,0x001C,(void (*)(Type_AE400_29795*))sub_5A050,0x0001,0x0000 },
{ 0x002548F4,0x001D,(void (*)(Type_AE400_29795*))sub_5A060,0x0001,0x0000 },
{ 0x002548F4,0x001E,(void (*)(Type_AE400_29795*))sub_5A070,0x0001,0x0000 },
{ 0x002548F4,0x001F,(void (*)(Type_AE400_29795*))sub_5A080,0x0001,0x0000 },
{ 0x00000000,0x0000,nullptr,0x0000,0x0000 }
};

Type_254A34x str_2563D8[] = {//2563D8
{ 0x002548F4,0x0000,(void (*)(Type_AE400_29795*))sub_56090,0x0001,0x0000 },
{ 0x002548F4,0x0001,(void (*)(Type_AE400_29795*))sub_56250,0x0001,0x0000 },
{ 0x002548F4,0x0002,sub_56260,0x0001,0x0000 },
{ 0x002548F4,0x0003,(void (*)(Type_AE400_29795*))sub_56270,0x0001,0x0000 },
{ 0x002548F4,0x0004,(void (*)(Type_AE400_29795*))sub_56250,0x0001,0x0000 },
{ 0x002548F4,0x0005,sub_56260,0x0001,0x0000 },
{ 0x002548F4,0x0006,(void (*)(Type_AE400_29795*))sub_56380,0x0001,0x0000 },
{ 0x002548F4,0x0007,(void (*)(Type_AE400_29795*))sub_56250,0x0001,0x0000 },
{ 0x002548F4,0x0008,sub_56260,0x0001,0x0000 },
{ 0x002548F4,0x0009,(void (*)(Type_AE400_29795*))sub_56510,0x0001,0x0000 },
{ 0x002548F4,0x000A,(void (*)(Type_AE400_29795*))sub_56250,0x0001,0x0000 },
{ 0x002548F4,0x000B,sub_56260,0x0001,0x0000 },
{ 0x002548F4,0x000C,(void (*)(Type_AE400_29795*))sub_566C0,0x0001,0x0000 },
{ 0x002548F4,0x000D,(void (*)(Type_AE400_29795*))sub_56250,0x0001,0x0000 },
{ 0x002548F4, 0x000E, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x000F, (void (*)(Type_AE400_29795*))sub_56730, 0x0001, 0x0000 },
{ 0x002548F4, 0x0010, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0011, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x0012, (void (*)(Type_AE400_29795*))sub_567A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0013, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0014, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x0015, (void (*)(Type_AE400_29795*))sub_56950, 0x0001, 0x0000 },
{ 0x002548F4, 0x0016, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0017, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x0018, (void (*)(Type_AE400_29795*))sub_56AF0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0019, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x001A, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x001B, (void (*)(Type_AE400_29795*))sub_56CA0, 0x0001, 0x0000 },
{ 0x002548F4, 0x001C, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x001D, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x001E, (void (*)(Type_AE400_29795*))sub_56E50, 0x0001, 0x0000 },
{ 0x002548F4, 0x001F, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0020, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x0021, (void (*)(Type_AE400_29795*))sub_57040, 0x0001, 0x0000 },
{ 0x002548F4, 0x0022, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0023, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x0024, (void (*)(Type_AE400_29795*))sub_571B0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0025, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0026, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x0027, (void (*)(Type_AE400_29795*))sub_57250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0028, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0029, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x002A, (void (*)(Type_AE400_29795*))sub_573F0, 0x0001, 0x0000 },
{ 0x002548F4, 0x002B, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x002C, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x002D, (void (*)(Type_AE400_29795*))sub_57470, 0x0001, 0x0000 },
{ 0x002548F4, 0x002E, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x002F, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x0030, (void (*)(Type_AE400_29795*))sub_57610, 0x0001, 0x0000 },
{ 0x002548F4, 0x0031, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0032, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x0033, (void (*)(Type_AE400_29795*))sub_57800, 0x0001, 0x0000 },
{ 0x002548F4, 0x0034, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0035, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x0036, (void (*)(Type_AE400_29795*))sub_579D0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0037, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0038, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x0039, (void (*)(Type_AE400_29795*))sub_57B80, 0x0001, 0x0000 },
{ 0x002548F4, 0x003A, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x003B, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x003C, (void (*)(Type_AE400_29795*))sub_57D40, 0x0001, 0x0000 },
{ 0x002548F4, 0x003D, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x003E, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x003F, (void (*)(Type_AE400_29795*))sub_57F00, 0x0001, 0x0000 },
{ 0x002548F4, 0x0040, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0041, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x0042, (void (*)(Type_AE400_29795*))sub_580A0, 0x0001, 0x0000 },
{ 0x002548F4, 0x0043, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0044, sub_56260, 0x0001, 0x0000 },
{ 0x002548F4, 0x0045, (void (*)(Type_AE400_29795*))sub_58240, 0x0001, 0x0000 },
{ 0x002548F4, 0x0046, (void (*)(Type_AE400_29795*))sub_56250, 0x0001, 0x0000 },
{ 0x002548F4, 0x0047, sub_56260, 0x0001, 0x0000 },
{ 0x00000000, 0x0000, nullptr, 0x0000, 0x0000 }
};

Type_254A34x str_256938[] = {
{ 0x002548F4,0x0000,(void (*)(Type_AE400_29795*))sub_43AF0, 0x0001, 0x0000 },
{ 0x002548F4,0x0001,(void (*)(Type_AE400_29795*))sub_43AF0,0x0001,0x0000 },
{ 0x002548F4,0x0002,(void (*)(Type_AE400_29795*))sub_43AF0,0x0001,0x0000 },
{ 0x002548F4,0x0003,(void (*)(Type_AE400_29795*))sub_43AF0,0x0001,0x0000 },
{ 0x00000000,0x0000,nullptr,0x0000,0x0000 }
};

Type_96902 dword_96902[] = {//254902
{ nullptr, nullptr, 0x002548F4, 0x0001, 0x00000000},//0
{ str_254A08, str_254A34, 0x002548F4, 0x0002, 0x00000000},//1
{ str_254C3C, str_254D48, 0x002548F4, 0x0003, 0x00000000},//2
{ str_254ADC, str_254B84, 0x002548F4, 0x0004, 0x00000000},//3
{ str_254DAC, str_254DBC, 0x002548F4, 0x0005, 0x00000000},//4
{ str_254DCC, str_255478, 0x002548F4, 0x0006, 0x00000000},//5
{ str_255574, str_2555A0, 0x002548F4, 0x0007, 0x00000000},//6
{ str_2555CC, str_255620, 0x002548F4, 0x0008, 0x00000000},//7
{ str_255674, str_2556D8, 0x002548F4, 0x0009, 0x00000000},//8
{ str_25573C, str_255870, 0x002548F4, 0x000A, 0x00000000},//9
{ str_255998, str_255D0C, 0x002548F4, 0x000B, 0x00000000},//a
{ str_256038, str_256208, 0x002548F4, 0x000C, 0x00000000},//b
{ str_2563D8, str_2567D8, 0x002548F4, 0x000D, 0x00000000},//c
{ str_256938, str_256980, 0x00000000, 0x0000, 0x00000000}//d
};
//int (*off_97D12)(int) = (int(*)(int)) &sub_3A490; // weak
int sub_39A00(uint16_t* a1) { return 0; };
/*int (*off_97D12[])(int) = {
sub_3A490, sub_3A510, sub_3A570, sub_3A5D0, sub_3A640, sub_3A6B0, sub_3A730, sub_3A7D0,
sub_3A870, sub_3A8D0, sub_3A930, sub_3A9A0, sub_3AA10, sub_3AAA0, sub_3AB40, sub_3ABE0,
sub_3ACC0, sub_3AC70, sub_3ADB0, sub_3AE00, loc_39A00, loc_39A00, loc_39A00, sub_3AE80,
loc_39A00, sub_3AF00, sub_3AF80, sub_3B000, sub_3B060, sub_3B120, sub_3B0C0, sub_3B1D0,
sub_3B180, sub_3B4D0, sub_3B300, sub_3B3D0, sub_3B3E0 };*/
#pragma pack (1)
typedef struct {
    Type_AE400_29795*(*adress)(axis_3d*);
    uint32_t data1;
    uint32_t data2;
    uint16_t data3;
}
Type_97D12;
#pragma pack (16)

Type_97D12 off_97D12[] = {
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3A490, 1, 0x002548F4, 1 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3A510, 1, 0x002548F4, 2 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3A570, 1, 0x002548F4, 3 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3A5D0, 1, 0x002548F4, 4 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3A640, 1, 0x002548F4, 5 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3A6B0, 1, 0x002548F4, 6 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3A730, 1, 0x002548F4, 7 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3A7D0, 1, 0x002548F4, 8 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3A870, 1, 0x002548F4, 9 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3A8D0, 1, 0x002548F4, 10 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3A930, 1, 0x002548F4, 11 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3A9A0, 1, 0x002548F4, 12 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3AA10, 1, 0x002548F4, 13 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3AAA0, 1, 0x002548F4, 14 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3AB40, 1, 0x002548F4, 15 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3ABE0, 1, 0x002548F4, 16 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3ACC0, 1, 0x002548F4, 17 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3AC70, 1, 0x002548F4, 18 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3ADB0, 1, 0x002548F4, 19 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3AE00, 1, 0x002548F4, 20 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_39A00, 1, 0x002548F4, 21 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_39A00, 1, 0x002548F4, 22 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_39A00, 1, 0x002548F4, 23 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3AE80, 1, 0x002548F4, 24 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_39A00, 1, 0x002548F4, 25 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3AF00, 1, 0x002548F4, 26 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3AF80, 1, 0x002548F4, 27 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B000, 1, 0x002548F4, 28 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B060, 1, 0x002548F4, 29 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B120, 1, 0x002548F4, 30 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B0C0, 1, 0x002548F4, 31 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B1D0, 1, 0x002548F4, 32 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B180, 1, 0x002548F4, 33 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B4D0, 1, 0x002548F4, 34 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B300, 1, 0x002548F4, 35 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B3D0, 1, 0x002548F4, 36 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B3E0, 1, 0x002548F4, 0 },
{ nullptr, 0, 0x002548F4, 38 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B460, 1, 0x002548F4, 39 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B5A0, 1, 0x002548F4, 40 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B620, 1, 0x002548F4, 41 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B760, 1, 0x002548F4, 42 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B7B0, 1, 0x002548F4, 43 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B6F0, 1, 0x002548F4, 44 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B800, 1, 0x002548F4, 45 },
{ &sub_3B690, 1, 0x002548F4, 0 },
{ nullptr, 0, 0x002548F4, 0 },
{ nullptr, 0, 0x002548F4, 0 },
{ nullptr, 0, 0x002548F4, 0 },
{ nullptr, 0, 0x002548F4, 50 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B2A0, 1, 0x002548F4, 51 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B230, 1, 0x002548F4, 52 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B860, 1, 0x002548F4, 53 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B8E0, 1, 0x002548F4, 54 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3B970, 1, 0x002548F4, 55 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3BA00, 1, 0x002548F4, 56 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3BA90, 1, 0x00000000, 0 },
{ nullptr, 0, 0x002548F4, 0 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59A80, 1, 0x002548F4, 1 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59AB0, 1, 0x002548F4, 2 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59AE0, 1, 0x002548F4, 3 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59B30, 1, 0x002548F4, 4 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59B80, 1, 0x002548F4, 5 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59C40, 1, 0x002548F4, 6 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59C70, 1, 0x002548F4, 7 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59CA0, 1, 0x002548F4, 8 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59CF0, 1, 0x002548F4, 9 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59D40, 1, 0x002548F4, 10 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59D70, 1, 0x002548F4, 11 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59DA0, 1, 0x002548F4, 12 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59DF0, 1, 0x002548F4, 13 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59F60, 1, 0x002548F4, 14 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59F70, 1, 0x002548F4, 15 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59F80, 1, 0x002548F4, 16 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59F90, 1, 0x002548F4, 17 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59FA0, 1, 0x002548F4, 18 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59FB0, 1, 0x002548F4, 19 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59FC0, 1, 0x002548F4, 20 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59FD0, 1, 0x002548F4, 21 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59FE0, 1, 0x002548F4, 22 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_59FF0, 1, 0x002548F4, 23 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_5A000, 1, 0x002548F4, 24 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_5A010, 1, 0x002548F4, 25 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_5A020, 1, 0x002548F4, 26 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_5A030, 1, 0x002548F4, 27 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_5A040, 1, 0x002548F4, 28 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_5A050, 1, 0x002548F4, 29 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_5A060, 1, 0x002548F4, 30 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_5A070, 1, 0x002548F4, 31 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_5A080, 1, 0x00000000, 0 } };

Type_97D12 off_987DE[] = {
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C090, 1, 0x002548F4, 1 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C0F0, 1, 0x002548F4, 2 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C0C0, 1, 0x002548F4, 3 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C040, 1, 0x002548F4, 4 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C1B0, 1, 0x002548F4, 5 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C330, 1, 0x002548F4, 6 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C150, 1, 0x002548F4, 7 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C1E0, 1, 0x002548F4, 8 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C390, 1, 0x002548F4, 9 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C300, 1, 0x002548F4, 10 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C120, 1, 0x002548F4, 11 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C270, 1, 0x002548F4, 12 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C2D0, 1, 0x002548F4, 13 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C2A0, 1, 0x002548F4, 14 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C210, 1, 0x002548F4, 15 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C240, 1, 0x002548F4, 16 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C060, 1, 0x002548F4, 17 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C3C0, 1, 0x002548F4, 18 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C360, 1, 0x002548F4, 19 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C180, 1, 0x002548F4, 20 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C3F0, 1, 0x002548F4, 21 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C420, 1, 0x002548F4, 22 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C450, 1, 0x002548F4, 23 },
{ (Type_AE400_29795* (*)(axis_3d*))&sub_3C480, 1, 0x00000000, 0 },
{ nullptr, 0, 0x48F40000, 37 }
};


Type_989C6 word_989C6x[] = {
{ 0x0005, 0x0000, 0x0013, 0x0028, 0x002A, 0x0007, 0x00F4, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0001, 0x0056, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0002, 0x0003, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0003, 0x0059, 0x0058, 0x002A, 0x0007, 0x00F4, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0004, 0x0000, 0x0001, 0x00CE, 0x00C2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0005, 0x00B9, 0x002A, 0x0007, 0x00F4, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0006, 0x00C1, 0x0032, 0x0031, 0x00D8, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0007, 0x0055, 0x00C6, 0x0055, 0x00C4, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0008, 0x002F, 0x002A, 0x0007, 0x00F4, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0009, 0x00DC, 0x00ED, 0x00CA, 0x00C9, 0x00F5, 0x00C9, 0x00CB, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x000A, 0x00D0, 0x00C2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x000B, 0x00C8, 0x002A, 0x0007, 0x00F4, 0x00D1, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x000C, 0x00DD, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x000D, 0x00D9, 0x00DA, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x000E, 0x00DB, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x000F, 0x0000, 0x0001, 0x00CE, 0x00C3, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0010, 0x00CF, 0x002A, 0x0007, 0x00F4, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0011, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0012, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x0005, 0x0013, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000A, 0x0009, 0x00D2, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000A, 0x0022, 0x00D4, 0x00DF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000A, 0x0027, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000A, 0x002C, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000A, 0x0034, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x0000, 0x002A, 0x0007, 0x00F4, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x0003, 0x00D1, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x0006, 0x00D3, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x0007, 0x004C, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x0008, 0x00D2, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x0009, 0x00D3, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x000A, 0x00D4, 0x00DF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x000B, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x000C, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x000D, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x000E, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x000F, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x0010, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x0011, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0x000C, 0x0013, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  },
{ 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,  }
};

Type_156 unk_98F38[] = {
{0x0000,0x0038,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,0x0C00,0x0032,0x1000,0x0200},
{0x0001,0x0016,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,0x0900,0x0028,0x1000,0x0200},
{0x0002,0x0071,0x0005,0x0071,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,0x0900,0x0028,0x1000,0x0200},
{0x0003,0x0011,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,0x0900,0x0028,0x1000,0x0200},
{0x0004,0x000B,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,0x0900,0x0028,0x1000,0x0200},
{0x0005,0x0005,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,0x0900,0x0028,0x1000,0x0200},
{0x0006,0x0000,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x0100,0x0200,0xFFFFFFFF,0x0900,0x0028,0x1000,0x0200},
{0x0007,0x0100,0x0000,0x0100,0x0000,0x0400,0x0080,0xFFFC,0x0100,0x0200,0xFFFFFEFF,0x1800,0x0028,0x2000,0x0200},
{0x0008,0x0100,0x0005,0x0100,0x0005,0x0300,0x0080,0xFFFC,0x0100,0x0200,0xFFFFFFFF,0x1800,0x0028,0x2000,0x0200},
{0x0009,0x0038,0x0005,0x0016,0x0005,0x0600,0x0200,0xFFF0,0x0100,0x0200,0xFFFFFFFF,0x0C00,0x0032,0x1000,0x0200},
{0x000A,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,0x000F,0x0200,0xFFF080FE,0x0900,0x0028,0x0C00,0x0200},
{0x000B,0x0016,0x0005,0x0016,0x0005,0x0700,0x0200,0xFFFC,0x0046,0x0155,0xFFFFFFFF,0x0F00,0x0028,0x0F00,0x0200},
{0x000C,0x0022,0x0005,0x0055,0x0005,0x0000,0x0000,0xFFFC,0x001E,0x0155,0xFFFFFFFF,0x1400,0x001E,0x1400,0x00AA},
{0x000D,0x0016,0x0005,0x0016,0x0005,0x0500,0x0200,0xFFFC,0x0046,0x0200,0xFFFFFFFF,0x0900,0x001E,0x0C00,0x0200},
{0x000E,0x0071,0x0011,0x0071,0x0011,0x0700,0x0033,0xFFE0,0x0014,0x0200,0xFFFFFFFF,0x0600,0x001E,0x1400,0x02AA},
{0x000F,0x0022,0x0005,0x0055,0x0005,0x0100,0x0000,0xFFC0,0x0014,0x0155,0xFFF080FE,0x1400,0x001E,0x1400,0x00AA},
{0x0010,0x0016,0x0005,0x0071,0x0000,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,0x0A00,0x001E,0x1400,0x0200},
{0x0011,0x0038,0x0005,0x0016,0x0005,0x0100,0x0000,0xFFC0,0x0014,0x0200,0xFFF080FE,0x0900,0x001E,0x1400,0x0200},
{0x0012,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFFE0,0x0014,0x0000,0x00000001,0x0900,0x0023,0x1400,0x02AA},
{0x0013,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,0x0900,0x0028,0x0F00,0x0200},
{0x0014,0x0038,0x0005,0x0016,0x0005,0x0500,0x0000,0xFFE7,0x0050,0x0200,0xFFFFFFFF,0x0900,0x0028,0x1900,0x0200},
{0x0015,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,0x0900,0x0019,0x0800,0x0200},
{0x0016,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFF080FE,0x0900,0x0028,0x0C00,0x0200},
{0x0017,0x002D,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,0x003C,0x0200,0xFFFFFFFF,0x0900,0x000A,0x1E00,0x07C7},
{0x0018,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,0x0014,0x0200,0x00020000,0x0900,0x000F,0x0F00,0x0200},
{0x0019,0x0044,0x0005,0x0016,0x0005,0x0700,0x0100,0xFFF8,0x0046,0x0200,0xFFFFFFFF,0x0900,0x0028,0x1200,0x0200},
{0x001A,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFFFFFFF,0x0900,0x0028,0x0C00,0x0200},
{0x001B,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFFFFFFF,0x0900,0x0028,0x0C00,0x0200},
{0x001C,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFFFFFFF,0x0900,0x0028,0x0C00,0x0200},
{0x001D,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,0x0014,0x0200,0xFFFFFFFF,0x0900,0x0028,0x0C00,0x0200},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x00000000,0x0000,0x0000,0x0000,0x0000}
}; // weak
/*_UNKNOWN unk_98F58; // weak
_UNKNOWN unk_98F78; // weak
void *off_98F98 = &unk_110003; // weak
void *off_98FB8 = &unk_B0004; // weak
void *off_98FD8 = &loc_50005; // weak
*/

/*uint8 unk_98F38[] = {
0x0000, 0x0038, 0x0005, 0x0016, 0x0005, 0x0700, 0x0000, 0xFFFC,
0x0100, 0x0200, 0xFFFF, 0xFFFF, 0x0C00, 0x0032, 0x1000, 0x0200 };
uint8 unk_98F58[] = {
0x0001, 0x0016, 0x0005, 0x0016, 0x0005, 0x0700, 0x0000, 0xFFFC,
0x0100, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x0028, 0x1000, 0x0200 };
uint8 unk_98F78[] = {
0x0002, 0x0071, 0x0005, 0x0071, 0x0005, 0x0700, 0x0000, 0xFFFC,
0x0100, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x0028, 0x1000, 0x0200 };
uint8 unk_98F98[] = {
0x0003, 0x0011, 0x0005, 0x0016, 0x0005, 0x0700, 0x0000, 0xFFFC,
0x0100, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x0028, 0x1000, 0x0200 };
uint8 unk_98FB8[] = {
0x0004, 0x000B, 0x0005, 0x0016, 0x0005, 0x0700, 0x0000, 0xFFFC,
0x0100, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x0028, 0x1000, 0x0200 };
uint8 unk_98FD8[] = {
0x0005, 0x0005, 0x0005, 0x0016, 0x0005, 0x0700, 0x0000, 0xFFFC,
0x0100, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x0028, 0x1000, 0x0200 };
uint8 unk_98FF8[] = {
0x0006, 0x0000, 0x0005, 0x0016, 0x0005, 0x0700, 0x0000, 0xFFFC,
0x0100, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x0028, 0x1000, 0x0200 };
uint8 unk_99018[] = {
0x0007, 0x0100, 0x0000, 0x0100, 0x0000, 0x0400, 0x0080, 0xFFFC,
0x0100, 0x0200, 0xFEFF, 0xFFFF, 0x1800, 0x0028, 0x2000, 0x0200 };
uint8 unk_99038[] = {
0x0008, 0x0100, 0x0005, 0x0100, 0x0005, 0x0300, 0x0080, 0xFFFC,
0x0100, 0x0200, 0xFFFF, 0xFFFF, 0x1800, 0x0028, 0x2000, 0x0200 };
uint8 unk_99058[] = {
0x0009, 0x0038, 0x0005, 0x0016, 0x0005, 0x0600, 0x0200, 0xFFF0,
0x0100, 0x0200, 0xFFFF, 0xFFFF, 0x0C00, 0x0032, 0x1000, 0x0200 };
uint8 unk_99078[] = {
0x000A, 0x0016, 0x0005, 0x0016, 0x0005, 0x0100, 0x0000, 0xFF00,
0x000F, 0x0200, 0x80FE, 0xFFF0, 0x0900, 0x0028, 0x0C00, 0x0200 };
uint8 unk_99098[] = {
0x000B, 0x0016, 0x0005, 0x0016, 0x0005, 0x0700, 0x0200, 0xFFFC,
0x0046, 0x0155, 0xFFFF, 0xFFFF, 0x0F00, 0x0028, 0x0F00, 0x0200 };
uint8 unk_990B8[] = {
0x000C, 0x0022, 0x0005, 0x0055, 0x0005, 0x0000, 0x0000, 0xFFFC,
0x001E, 0x0155, 0xFFFF, 0xFFFF, 0x1400, 0x001E, 0x1400, 0x00AA };
uint8 unk_990D8[] = {
0x000D, 0x0016, 0x0005, 0x0016, 0x0005, 0x0500, 0x0200, 0xFFFC,
0x0046, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x001E, 0x0C00, 0x0200 };
uint8 unk_990F8[] = {
0x000E, 0x0071, 0x0011, 0x0071, 0x0011, 0x0700, 0x0033, 0xFFE0,
0x0014, 0x0200, 0xFFFF, 0xFFFF, 0x0600, 0x001E, 0x1400, 0x02AA };
uint8 unk_99118[] = {
0x000F, 0x0022, 0x0005, 0x0055, 0x0005, 0x0100, 0x0000, 0xFFC0,
0x0014, 0x0155, 0x80FE, 0xFFF0, 0x1400, 0x001E, 0x1400, 0x00AA };
uint8 unk_99138[] = {
0x0010, 0x0016, 0x0005, 0x0071, 0x0000, 0x0100, 0x0000, 0xFF80,
0x0014, 0x0200, 0x80FE, 0xFFF0, 0x0A00, 0x001E, 0x1400, 0x0200 };
uint8 unk_99158[] = {
0x0011, 0x0038, 0x0005, 0x0016, 0x0005, 0x0100, 0x0000, 0xFFC0,
0x0014, 0x0200, 0x80FE, 0xFFF0, 0x0900, 0x001E, 0x1400, 0x0200 };
uint8 unk_99178[] = {
0x0012, 0x0016, 0x0005, 0x0016, 0x0005, 0x0100, 0x0000, 0xFFE0,
0x0014, 0x0000, 0x0001, 0x0000, 0x0900, 0x0023, 0x1400, 0x02AA };
uint8 unk_99198[] = {
0x0013, 0x0016, 0x0005, 0x0016, 0x0005, 0x0100, 0x0000, 0xFF80,
0x0014, 0x0200, 0x80FE, 0xFFF0, 0x0900, 0x0028, 0x0F00, 0x0200 };
uint8 unk_991B8[] = {
0x0014, 0x0038, 0x0005, 0x0016, 0x0005, 0x0500, 0x0000, 0xFFE7,
0x0050, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x0028, 0x1900, 0x0200 };
uint8 unk_991D8[] = {
0x0015, 0x0016, 0x0005, 0x0016, 0x0005, 0x0100, 0x0000, 0xFF80,
0x0014, 0x0200, 0x80FE, 0xFFF0, 0x0900, 0x0019, 0x0800, 0x0200 };
uint8 unk_991F8[] = {
0x0016, 0x0016, 0x0005, 0x0016, 0x0005, 0x0100, 0x0000, 0xFF80,
0x0014, 0x0200, 0x80FE, 0xFFF0, 0x0900, 0x0028, 0x0C00, 0x0200 };
uint8 unk_99218[] = {
0x0017, 0x002D, 0x0005, 0x0016, 0x0005, 0x0700, 0x0000, 0xFFFC,
0x003C, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x000A, 0x1E00, 0x07C7 };
uint8 unk_99238[] = {
0x0018, 0x0016, 0x0005, 0x0016, 0x0005, 0x0100, 0x0000, 0xFF00,
0x0014, 0x0200, 0x0000, 0x0002, 0x0900, 0x000F, 0x0F00, 0x0200 };
uint8 unk_99258[] = {
0x0019, 0x0044, 0x0005, 0x0016, 0x0005, 0x0700, 0x0100, 0xFFF8,
0x0046, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x0028, 0x1200, 0x0200 };
uint8 unk_99278[] = {
0x001A, 0x0016, 0x0005, 0x0016, 0x0005, 0x0100, 0x0000, 0xFF80,
0x0014, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x0028, 0x0C00, 0x0200 };
uint8 unk_99298[] = {
0x001B, 0x0016, 0x0005, 0x0016, 0x0005, 0x0100, 0x0000, 0xFF80,
0x0014, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x0028, 0x0C00, 0x0200 };
uint8 unk_992B8[] = {
0x001C, 0x0016, 0x0005, 0x0016, 0x0005, 0x0100, 0x0000, 0xFF80,
0x0014, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x0028, 0x0C00, 0x0200 };
uint8 unk_992D8[] = {
0x001D, 0x0016, 0x0005, 0x0016, 0x0005, 0x0100, 0x0000, 0xFF80,
0x0014, 0x0200, 0xFFFF, 0xFFFF, 0x0900, 0x0028, 0x0C00, 0x0200 };*/

/*

uint8 unk_98FF8[] = { 0x06,0x00,0x00,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,
0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,0x00,0x02 };
uint8  unk_99018[] = { 0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,0x80,0x00,0xFC,0xFF,
0x00,0x01,0x00,0x02,0xFF,0xFE,0xFF,0xFF,0x00,0x18,0x28,0x00,0x00,0x20,0x00,0x02};
uint8  unk_99038[] = { 0x08,0x00,0x00,0x01,0x05,0x00,0x00,0x01,0x05,0x00,0x00,0x03,0x80,0x00,0xFC,0xFF,
0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x18,0x28,0x00,0x00,0x20,0x00,0x02 };
uint8  unk_99058[] = { 0x09,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x06,0x00,0x02,0xF0,0xFF,
0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x0C,0x32,0x00,0x00,0x10,0x00,0x02};
uint8  unk_99078[] = { 0x0A,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,
0x0F,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,0x00,0x02 };
uint8  unk_990B8[] = { 0x0C,0x00,0x22,0x00,0x05,0x00,0x55,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0xFC,0xFF,
0x1E,0x00,0x55,0x01,0xFF,0xFF,0xFF,0xFF,0x00,0x14,0x1E,0x00,0x00,0x14,0xAA,0x00 };
uint8  unk_990D8[] = { 0x0D,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x05,0x00,0x02,0xFC,0xFF,
0x46,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x1E,0x00,0x00,0x0C,0x00,0x02 };
uint8  unk_990F8[] = { 0x0E,0x00,0x71,0x00,0x11,0x00,0x71,0x00,0x11,0x00,0x00,0x07,0x33,0x00,0xE0,0xFF,
0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x06,0x1E,0x00,0x00,0x14,0xAA,0x02};
uint8  unk_99158[] = { 0x11,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0xC0,0xFF,
0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x1E,0x00,0x00,0x14,0x00,0x02 };
uint8  unk_99178[] = { 0x12,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0xE0,0xFF,
0x14,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x09,0x23,0x00,0x00,0x14,0xAA,0x02 };
uint8  unk_991B8[] = { 0x14,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x05,0x00,0x00,0xE7,0xFF,
0x50,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x19,0x00,0x02 };
uint8  unk_991D8[] = { 0x15,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,
0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x19,0x00,0x00,0x08,0x00,0x02 };
uint8  unk_991F8[] = { 0x16,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x80,0xFF,
0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,0x00,0x02 };
uint8  unk_99218[] = { 0x17,0x00,0x2D,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,0xFC,0xFF,
0x3C,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x0A,0x00,0x00,0x1E,0xC7,0x07 };
uint8  unk_99238[] = { 0x18,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,0x00,0xFF,
0x14,0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x00,0x09,0x0F,0x00,0x00,0x0F,0x00,0x02 };
uint8  unk_99258[] = { 0x19,0x00,0x44,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x01,0xF8,0xFF,
0x46,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x12,0x00,0x02 };
*/

const int PSSearchD = 0;
const int PSdatabuild00dat = 1;
const int PSdatabuild00tab = 2;
const int PSdatafont0dat = 3;
const int PSdatafont0tab = 4;
const int PSdatafont1dat = 5;
const int PSdatafont1tab = 6;
const int PSdatatmaps00tab = 7;
const int PSPalData = 8;
const int PSPalMem = 9;
const int PSdatapointersdat = 10;
const int PSdatapointerstab = 11;
const int PSdatapal00dat = 12;
//const int PS = 13;
const int PSdataetextdat = 14;
//const int PS = 15;
const int PSdataftextdat = 16;
//const int PS = 17;
const int PSdatagtextdat = 18;
//const int PS = 19;
const int PSdataitextdat = 20;
//const int PS = 21;
const int PSdatablk0dat = 22;
//const int PS = 23;
const int PSdatablk1dat = 24;
const int PSdataskydat = 25;
//const int PS = 26;
const int PSWScreen = 27;
const int PSBScreen = 28;
const int PSdatamspr00dat = 29;
const int PSdatamspr00tab = 30;
//const int PS = 31;
const int PSWScreen2 = 32;
const int PSBScreen2 = 33;
const int PSdatahspr00dat = 34;
const int PSdatahspr00tab = 35;

//begSearch_AE3F4_26C3F4_26C3E4 == 26c3f4
//             0x2eb744

uint8_t* test_AE414_AE404;
uint8_t* begBuildDat_AE430_26C430_26C420;
uint8_t* test_AE438_26C428;
TypeTab* endBuildTab_AE40C_AE3FC;
uint8_t* begFont0Dat_AE378_26C378_26C368;
TypeTab* endFont0Tab_AE398_AE388;
uint8_t* begFont1Dat_AE37C_26C37C_26C36C;
TypeTab* begFont1Tab_AE3BC_26C3BC_26C3AC;
TypeTab* endFont1Tab_AE39C_26C38C;
Tmaps_str* begTmapsTab_12D744_12D734_2EB744_2EB734x;
uint8_t* begPointersDat_AE448_26C448_26C438;
TypeTab* endPointersTab_AE43C_AE42C;
uint8_t* begWscreen_2ECFF4_2ECFE4;
uint8_t* begSprDat_26C444_26C434;
TypeTab* endSprTab_AE434_26C424;

Pathstruct pathStrArray[] =
{
    { "*SearchD", &begSearch_AE3F4_26C3F4_26C3E4, &test_AE414_AE404, 4096, 0 },
    { "data/build0-0.dat", &begBuildDat_AE430_26C430_26C420, &test_AE438_26C428, 0, 0 },
    { "data/build0-0.tab", (uint8_t**)&begBuildTab_AE440_AE430_26C440_26C430, (uint8_t**)&endBuildTab_AE40C_AE3FC, 0, 0 },
    { "data/font0.dat", &begFont0Dat_AE378_26C378_26C368, 0, 0, 0 },
    { "data/font0.tab", (uint8_t**)&begFont0Tab_AE3B8_AE3A8_26C3B8_26C3A8, (uint8_t**)&endFont0Tab_AE398_AE388, 0, 0 },
    { "data/font1.dat", &begFont1Dat_AE37C_26C37C_26C36C, 0, 0, 0 },
    { "data/font1.tab", (uint8_t**)&begFont1Tab_AE3BC_26C3BC_26C3AC, (uint8_t**)&endFont1Tab_AE39C_26C38C, 0, 0 },
    { "data/tmaps0-0.tab", (uint8_t**)&begTmapsTab_12D744_12D734_2EB744_2EB734x, 0, 0, 0 },//
    { "*PalData", &begPalData_AE424_AE414_26C424_26C414, 0, 1024, 0 },
    { "*PalMem", (uint8_t**)&begPalMem_AE418_AE408_26C418_26C408, 0, 1024, 0 },
    { "data/pointers.dat", &begPointersDat_AE448_26C448_26C438, 0, 0, 0 },
    { "data/pointers.tab", (uint8_t**)&begPointersTab_AE450_AE440_26C450_26C440, (uint8_t**)&endPointersTab_AE43C_AE42C, 0, 0 },
    { "data/pal0-0.dat", (uint8_t**)&begPalDat_AE428_AE418_26C428_26C418, 0, 0, 0 },
    { "", 0, 0, 0, 0 },
    { "data/etext.dat", &begTextDat_AE41C_AE40C_26C41C_26C40C, 0, 0, 0 },
    { "", 0, 0, 0, 0 },
    { "data/ftext.dat", &begTextDat_AE41C_AE40C_26C41C_26C40C, 0, 0, 0 },
    { "", 0, 0, 0, 0 },
    { "data/gtext.dat", &begTextDat_AE41C_AE40C_26C41C_26C40C, 0, 0, 0 },
    { "", 0, 0, 0, 0 },
    { "data/itext.dat", &begTextDat_AE41C_AE40C_26C41C_26C40C, 0, 0, 0 },
    { "", 0, 0, 0, 0 },
    { "data/blk0-0.dat", &begBlkDat_AE3F0_26C3F0_26C3E0, 0, 0, 0 },
    { "", 0, 0, 0, 0 },
    { "data/blk0-1.dat", &begBlkDat_AE3F0_26C3F0_26C3E0, 0, 0, 0 },
    { "data/sky.dat", &begSky_AE3D8_AE3C8_26C3D8_26C3C8, 0, 0, 0 },
    { "", 0, 0, 0, 0 },
    { "*WScreen", &begWscreen_2ECFF4_2ECFE4, 0, 71040, 0 },
    { "*BScreen", &begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0, 70000, 0 },
    { "data/mspr0-0.dat", &begSprDat_26C444_26C434, 0, 0, 0 },
    { "data/mspr0-0.tab", (uint8_t**)&begSprTab_AE42C_AE41C_26C42C_26C41C, (uint8_t**)&endSprTab_AE434_26C424, 0, 0 },
    { "", 0, 0, 0, 0 },
    { "*WScreen", &begWscreen_2ECFF4_2ECFE4, 0, 307200, 0 },
    { "*BScreen", &begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0, 70000, 0 },
    { "data/hspr0-0.dat", &begSprDat_26C444_26C434, 0, 0, 0 },
    { "data/hspr0-0.tab", (uint8_t**)&begSprTab_AE42C_AE41C_26C42C_26C41C, (uint8_t**)&endSprTab_AE434_26C424, 0, 0 },
    { "", 0, 0, 0, 0 }
};

const int PSF1datascreenssfont1dat = 0;
const int PSF1datascreenssfont1tab = 1;

TypeStrFont sFont1Tab_271288;

Pathstruct pathStrArray_F1EF0[] = {
{ "data/screens/sfont1.dat", &sFont1Tab_271288.Dat, 0, 10819, 0 },
{ "data/screens/sfont1.tab", (uint8_t**)&sFont1Tab_271288.bTab, (uint8_t**)&sFont1Tab_271288.eTab, 1446, 0 },
//{ "data\screens\sfont1.dat", (uint8_t**)0x271290, 0, 10819, 0 },
//{ "data\screens\sfont1.tab", &sFont1Tab_271288.bTab, (uint8_t**)0x27128C, 1446, 0 },
{ "", 0, 0, 0, 0 }
};

const int PS25datamusic00dat = 0;//pathStrArray_258E00[PS25datamusic00dat]
const int PS25datamusic00tab = 1;//pathStrArray_258E00[PS25datamusic00tab]
const int PS25datasnds00dat = 3;//pathStrArray_258E00[PS25datasnds00dat]
const int PS25datasnds00tab = 4;//pathStrArray_258E00[PS25datasnds00tab]

TypeStrFont music00Tab_289F60;
TypeStrFont snds00Tab_2854A1;

Pathstruct pathStrArray_258E00[] = {
    { "data/music0-0.dat", &music00Tab_289F60.Dat, 0, 0, 0 },//music 0 0 dat
    { "data/music0-0.tab", (uint8_t**)&music00Tab_289F60.bTab, (uint8_t**)&music00Tab_289F60.eTab, 0, 0 },//music 0 0 tab
    { "", 0, 0, 0, 0 },
    { "data/snds0-0.dat", &snds00Tab_2854A1.Dat, 0, 0, 0 },//snds 0 0 dat
    { "data/snds0-0.tab", (uint8_t**)&snds00Tab_2854A1.bTab, (uint8_t**)&snds00Tab_2854A1.eTab, 0, 0 },//snds 0 0 tab
    { "", 0, 0, 0, 0 }
};

/*
    char path[28];
    uint8_t** colorPalette_var28;//1C // Palette
    uint8_t** var32_end_buffer;//20 // maybe buffer
    int32_t var36_size_buffer;//24 //maybe file size
    uint32_t var40_alloc_type;//28
*/

/*
0x64, 0x61, 0x74, 0x61, 0x2F, 0x6D, 0x75, 0x73, 0x69, 0x63, 0x30, 0x2D, 0x30, 0x2E, 0x64, 0x61,
0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//music 0 0 dat
0x68, 0x9F, 0x28, 0x00,    0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00,

0x64, 0x61, 0x74, 0x61, 0x2F, 0x6D, 0x75, 0x73, 0x69, 0x63, 0x30, 0x2D, 0x30, 0x2E, 0x74, 0x61,
0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//music 0 0 tab
0x60, 0x9F, 0x28, 0x00,    0x64, 0x9F, 0x28, 0x00,   0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//00
0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 

0x64, 0x61, 0x74, 0x61, 0x2F, 0x73, 0x6E, 0x64, 0x73, 0x30, 0x2D, 0x30, 0x2E, 0x64, 0x61, 0x74,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//snds 0 0 dat
0x30, 0xA1, 0x28, 0x00,   0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00,

0x64, 0x61, 0x74, 0x61, 0x2F, 0x73, 0x6E, 0x64, 0x73, 0x30, 0x2D, 0x30, 0x2E, 0x74, 0x61, 0x62,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//snds 0 0 tab
0x54, 0xA1, 0x28, 0x00,   0xC0, 0xA1, 0x28, 0x00,   0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00,

0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00,    0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00,   0x00, 0x00, 0x00, 0x00
*/


const int PSdatascreenssptrsdat = 0;
const int PSdatascreenssptrstab = 1;
const int PSPALETTE = 2;
const int PSSCREENBACKUP = 3;
const int PSSCREENBACKUP2 = 4;
//const int PS = 5;
const int PSdatascreenssfont0dat = 6;
const int PSdatascreenssfont0tab = 7;
const int PSdatascreensgcsprdat = 8;
const int PSdatascreensgcsprtab = 9;
//const int PS = 10;
const int PSdatascreensmmsprdat = 11;
const int PSdatascreensmmsprtab = 12;
const int PSdatascreensmmmaskdat = 13;
const int PSdatascreenssfont1dat = 14;
const int PSdatascreenssfont1tab = 15;
const int PSdatascreensglobedat = 16;
const int PSdatascreenstimerdat = 17;
const int PSBRIGHTTABLE = 18;
//const int PS = 19;
const int PSdatascreenspmultsprdat = 20;
const int PSdatascreenspmultsprtab = 21;
const int PSdatascreenssfont1dat2 = 22;
const int PSdatascreenssfont1tab2 = 23;
//const int PS = 24;
const int PSdatascreenssfont2dat = 25;
const int PSdatascreenssfont2tab = 26;
//const int PS = 27;
const int PSdatascreenslangsprdat = 28;
const int PSdatascreenslangsprtab = 29;
//const int PS = 30;
const int PSintrotitle02dat = 31;

uint8_t* begSptrsDat_12CB64_2EAB64_2EAAE4;//begSptrsDat_12CB64_2EAB64_2EAAE4
TypeTab* begSptrsTab_12CAEC_2EAAEC_2EAADC;//begSptrsTab_12CAEC_2EAAEC_2EAADC
TypeTab* endSptrsTab_12CAF0_2EAAF0_2EAAE0;//endSptrsTab_12CAF0_2EAAF0_2EAAE0

TColor* begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C;//TColor begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C[256]; // weak
uint8_t* begScreenBackup_12CBA4_2EABA4_2EAB94;//begScreenBackup_12CBA4_2EABA4_2EAB94
uint8_t* begScreenBackup2_12CBA8_2EABA8_2EAB98;//begScreenBackup2_12CBA8_2EABA8_2EAB98

TypeStrFont sFont0Tab_12CB28_2EAB28_2EAB18;

TypeStrFont sFont1Tab_12CB34_2EAB34_2EAB24;

//TypeStrFont* dword_AE3B8_2[2] = { &sFont0Tab_12CB28_2EAB28_2EAB18, &sFont1Tab_12CB34_2EAB34_2EAB24 };
TypeStrFont dword_AE3B8_2[2];// = { &sFont0Tab_12CB28_2EAB28_2EAB18, &sFont1Tab_12CB34_2EAB34_2EAB24 };

/*
uint8_t* begSFont0Tab_12CB28_2EAB28_2EAB18;//begSFont0Tab_12CB28_2EAB28_2EAB18
uint8_t* endSFont0Tab_12CB2C_2EAB2C_2EAB1C;
uint8_t* begSFont0Dat_12CB30_2EAB30_2EAB20;

uint8_t* begSFont1Tab_12CB34_2EAB34_2EAB24;//begSFont1Tab_12CB34_2EAB34_2EAB24
uint8_t* endSFont1Tab_12CB38_2EAB38_2EAB28;
uint8_t* begSFont1Dat_12CB3C_2EAB3C_2EAB2C;
*/

uint8_t* begGcSprDat_12CB00_2EAB00_2EAAF0;//begGcSprDat_12CB00_2EAB00_2EAAF0
TypeTab* begGcSprTab_12CAF8_2EAAF8_2EAAE8;//begGcSprTab_12CAF8_2EAAF8_2EAAE8
TypeTab* endGcSprTab_12CAFC_2EAAFC_2EAAEC;//endGcSprTab_12CAFC_2EAAFC_2EAAEC

uint8_t* begMmSprDat_12CB0C_2EAB0C_2EAAFC;//begMmSprDat_12CB0C_2EAB0C_2EAAFC
TypeTab* begMmSprTab_12CB04_2EAB04_2EAAF4;//begMmSprTab_12CB04_2EAB04_2EAAF4
TypeTab* endMmSprTab_12CB08_2EAB08_2EAAF8;//endMmSprTab_12CB08_2EAB08_2EAAF8

uint8_t* begMmMaskDat_12CBA0_2EABA0_2EAB90;//begMmMaskDat_12CBA0_2EABA0_2EAB90

uint8_t* begGlobeDat_12CB72_2EAB72_2EAB62;//begGlobeDat_12CB72_2EAB72_2EAB62
uint8_t* begTimerDat_12CB80_2EAB80_2EAB70;//begTimerDat_12CB80_2EAB80_2EAB70
uint8_t* begBrightTable_12CBAC_2EABAC_2EAB9C;//begBrightTable_12CBAC_2EABAC_2EAB9C

uint8_t* begPMultSprDat_12CB18_2EAB18_2EAB08;//begPMultSprDat_12CB18_2EAB18_2EAB08
TypeTab* begPMultSprTab_12CB10_2EAB10_2EAB00;//begPMultSprTab_12CB10_2EAB10_2EAB00
TypeTab* endPMultSprTab_12CB14_2EAB14_2EAB04;//endPMultSprTab_12CB14_2EAB14_2EAB04

uint8_t* begSFont2Dat_12CB48_2EAB48_2EAB38;//begSFont2Dat_12CB48_2EAB48_2EAB38
TypeTab* begSFont2Tab_12CB40_2EAB40_2EAB30;//begSFont2Tab_12CB40_2EAB40_2EAB30
TypeTab* endSFont2Tab_12CB44_2EAB44_2EAB34;//endSFont2Tab_12CB44_2EAB44_2EAB34

uint8_t* begLangSprDat_12CB60_2EAB60_2EAB50;//begLangSprDat_12CB60_2EAB60_2EAB50begSptrsDat
TypeTab* begLangSprTab_12CB58_2EAB58_2EAB48;//begLangSprTab_12CB58_2EAB58_2EAB48
TypeTab* endLangSprTab_12CB5C_2EAB5C_2EAB4C;//endLangSprTab_12CB5C_2EAB5C_2EAB4C

uint8_t* begTitle02Dat_12CB64_2EAB64_2EAB54;//begTitle02Dat_12CB64_2EAB64_2EAB54

Pathstruct pathStrArray_21AB80_21AEC0[] = {
{ "data/screens/sptrs.dat", &begSptrsDat_12CB64_2EAB64_2EAAE4, 0, 0, 0 },
{ "data/screens/sptrs.tab", (uint8_t**)&begSptrsTab_12CAEC_2EAAEC_2EAADC, (uint8_t**)&endSptrsTab_12CAF0_2EAAF0_2EAAE0, 0, 0 },
{ "*PALETTE", (uint8_t**)&begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0, 768, 0 },
{ "*SCREEN BACKUP", &begScreenBackup_12CBA4_2EABA4_2EAB94, 0, 64000, 0 },
{ "*SCREEN BACKUP", &begScreenBackup2_12CBA8_2EABA8_2EAB98, 0, 64000, 0 },
{ "", 0, 0, 0, 0 },
{ "data/screens/sfont0.dat", &sFont0Tab_12CB28_2EAB28_2EAB18.Dat, 0, 0, 0 },
{ "data/screens/sfont0.tab", (uint8_t**)&sFont0Tab_12CB28_2EAB28_2EAB18.bTab, (uint8_t**)&sFont0Tab_12CB28_2EAB28_2EAB18.eTab, 0, 0 },
{ "data/screens/gcspr.dat", &begGcSprDat_12CB00_2EAB00_2EAAF0, 0, 0, 0 },
{ "data/screens/gcspr.tab", (uint8_t**)&begGcSprTab_12CAF8_2EAAF8_2EAAE8, (uint8_t**)&endGcSprTab_12CAFC_2EAAFC_2EAAEC, 0, 0 },
{ "", 0, 0, 0, 0 },
{ "data/screens/mmspr.dat", &begMmSprDat_12CB0C_2EAB0C_2EAAFC, 0, 0, 0 },
{ "data/screens/mmspr.tab", (uint8_t**)&begMmSprTab_12CB04_2EAB04_2EAAF4, (uint8_t**)&endMmSprTab_12CB08_2EAB08_2EAAF8, 0, 0 },
{ "data/screens/mmmask.dat", &begMmMaskDat_12CBA0_2EABA0_2EAB90, 0, 0, 0 },
{ "data/screens/sfont1.dat", &sFont1Tab_12CB34_2EAB34_2EAB24.Dat, 0, 0, 0 },
{ "data/screens/sfont1.tab", (uint8_t**)&sFont1Tab_12CB34_2EAB34_2EAB24.bTab, (uint8_t**)&sFont1Tab_12CB34_2EAB34_2EAB24.eTab, 0, 0 },
{ "data/screens/globe.dat", &begGlobeDat_12CB72_2EAB72_2EAB62, 0, 0, 0 },
{ "data/screens/timer.dat", &begTimerDat_12CB80_2EAB80_2EAB70, 0, 0, 0 },
{ "*BRIGHT TABLE", &begBrightTable_12CBAC_2EABAC_2EAB9C, 0, 256, 0 },
{ "", 0, 0, 0, 0 },
{ "data/screens/pmultspr.dat", &begPMultSprDat_12CB18_2EAB18_2EAB08, 0, 0, 0 },
{ "data/screens/pmultspr.tab", (uint8_t**)&begPMultSprTab_12CB10_2EAB10_2EAB00, (uint8_t**)&endPMultSprTab_12CB14_2EAB14_2EAB04, 0, 0 },
{ "data/screens/sfont1.dat", &sFont1Tab_12CB34_2EAB34_2EAB24.Dat, 0, 0, 0 },
{ "data/screens/sfont1.tab", (uint8_t**)&sFont1Tab_12CB34_2EAB34_2EAB24.bTab, (uint8_t**)&sFont1Tab_12CB34_2EAB34_2EAB24.eTab, 0, 0 },
{ "", 0, 0, 0, 0 },
{ "data/screens/sfont2.dat", &begSFont2Dat_12CB48_2EAB48_2EAB38, 0, 0, 0 },
{ "data/screens/sfont2.tab", (uint8_t**)&begSFont2Tab_12CB40_2EAB40_2EAB30, (uint8_t**)&endSFont2Tab_12CB44_2EAB44_2EAB34, 0, 0 },
{ "", 0, 0, 0, 0 },
{ "data/screens/langspr.dat", &begLangSprDat_12CB60_2EAB60_2EAB50, 0, 0, 0 },
{ "data/screens/langspr.tab", (uint8_t**)&begLangSprTab_12CB58_2EAB58_2EAB48, (uint8_t**)&endLangSprTab_12CB5C_2EAB5C_2EAB4C, 0, 0 },
{ "", 0, 0, 0, 0 },
{ "intro/title-02.dat", &begTitle02Dat_12CB64_2EAB64_2EAB54, 0, 0, 0 },
{ "", 0, 0, 0, 0 }};



//char aSearchd[9] = "*SearchD"; // weak
//char aDataEtextDat[15] = "data/etext.dat"; // weak
//char aDataFtextDat[15] = "data/ftext.dat"; // weak
//char aDataGtextDat[15] = "data/gtext.dat"; // weak
//char aDataItextDat[15] = "data/itext.dat"; // weak
//char aDataBlk00Dat[16] = "data/blk0-0.dat"; // weak
//char aDataBlk01Dat[16] = "data/blk0-1.dat"; // weak
//char aWscreen[9] = "*WScreen"; // weak
//char aWscreen_0[9] = "*WScreen"; // weak

Type_99974 off_99974[] = //&begPointersTab_AE450_AE440_26C450_26C440; // weak
{

    {&begPointersTab_AE450_AE440_26C450_26C440, &endPointersTab_AE43C_AE42C, &begPointersDat_AE448_26C448_26C438},
    {&begFont0Tab_AE3B8_AE3A8_26C3B8_26C3A8, &endFont0Tab_AE398_AE388, &begFont0Dat_AE378_26C378_26C368},
    {&begFont1Tab_AE3BC_26C3BC_26C3AC, &endFont1Tab_AE39C_26C38C, &begFont1Dat_AE37C_26C37C_26C36C},
    {&begSprTab_AE42C_AE41C_26C42C_26C41C, &endSprTab_AE434_26C424, &begSprDat_26C444_26C434},
    {&begBuildTab_AE440_AE430_26C440_26C430, &endBuildTab_AE40C_AE3FC, &begBuildDat_AE430_26C430_26C420},
    {nullptr, nullptr, nullptr}
};



char* dword_999B8[] = { 0 }; // weak
char *off_99A84[20] =
{
  (char*)"Bussorah",
  (char*)"Bisnagar",
  (char*)"Tartary",
  (char*)"Akkania",
  (char*)"Ryahn",
  (char*)"Zhullor",
  (char*)"Dombren",
  (char*)"Xushtan",
  (char*)"Wazzad",
  (char*)"Phiria",
  (char*)"Moussul",
  (char*)"Aleppo",
  (char*)"Schiraz",
  (char*)"Ispahan",
  (char*)"Coam",
  (char*)"Rei",
  (char*)"Buddoor",
  (char*)"Jehoun",
  (char*)"Nurrir",
  (char*)"Comari"
}; // weak
char byte_99B58[16] = { 0xB7,0x71,0x7D,0x7A,0x9D,0x9A,0x07,0x5A,0x1D,0x1B,0xDD,0xDA,0x3C,0x39,0x10,0x0E };
char *off_99B68[8] =
{
  (char*)"Zanzamar\0rah",
  (char*)"Vodor\0snGrys",
  (char*)"Gryshnak\0art",
  (char*)"Mahmoud\0Syed",
  (char*)"Syed\0yahRasc",
  (char*)"Raschid\0Alha",
  (char*)"Alhabbal\0en\0",
  (char*)"Scheherazade\0"
}; // weak
uint8 byte_99B88[24] =
{
  0x00,0x03,0x02,0x10,0x01,0x0E,0x04,0x0C,0x06,0x09,0x07,0x08,0x0F,0x12,0x11,0x13,
0x0D,0x05,0x0B,0x0A,0x14,0x15,0x16,0x17
}; 
Type_99BA0 unk_99BA0x[] = {
{ 0x0008, 0x806C, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x000B, 0x8080, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x002E, 0x809C, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0026, 0x80B0, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0026, 0x80C0, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0026, 0x80D4, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0026, 0x80E8, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x005E, 0x80FC, 0x0026, 0x0000, 0x00FA, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0075, 0x8110, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x007F, 0x8128, 0x0026, 0x0000, 0x0032, 0x02, 0x01, 0x00, 0x00 },
{ 0x007F, 0x8144, 0x0026, 0x0000, 0x0064, 0x02, 0x01, 0x00, 0x00 },
{ 0x007F, 0x8160, 0x0026, 0x0000, 0x0096, 0x02, 0x01, 0x00, 0x00 },
{ 0x007F, 0x817C, 0x0026, 0x0000, 0x00C8, 0x02, 0x01, 0x00, 0x00 },
{ 0x007F, 0x8198, 0x0026, 0x0000, 0x00FA, 0x02, 0x01, 0x00, 0x00 },
{ 0x007F, 0x81B4, 0x0026, 0x0000, 0x012C, 0x02, 0x01, 0x00, 0x00 },
{ 0x007F, 0x81D0, 0x0026, 0x0000, 0x015E, 0x02, 0x01, 0x00, 0x00 },
{ 0x007F, 0x81EC, 0x0026, 0x0000, 0x0190, 0x02, 0x01, 0x00, 0x00 },
{ 0x008B, 0x8208, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0076, 0x8220, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x8238, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0070, 0x824C, 0x0026, 0x0000, 0x00A5, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x8260, 0x0026, 0x0000, 0x00B9, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x8274, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x8288, 0x0026, 0x0000, 0x00D2, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x829C, 0x0026, 0x0000, 0x00D2, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x82B0, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x82C4, 0x0026, 0x0000, 0x00BE, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x82D8, 0x0026, 0x0000, 0x00AA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x82EC, 0x0026, 0x0000, 0x00A0, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x8300, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x8314, 0x0026, 0x0000, 0x0082, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x8328, 0x0026, 0x0000, 0x006E, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x833C, 0x0026, 0x0000, 0x005A, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x8350, 0x0026, 0x0000, 0x0046, 0x00, 0x01, 0x00, 0x00 },
{ 0x0070, 0x8364, 0x0026, 0x0000, 0x003C, 0x00, 0x01, 0x00, 0x00 },
{ 0x008D, 0x8378, 0x0026, 0x0000, 0x012C, 0x00, 0x03, 0x00, 0x00 },
{ 0x008F, 0x8390, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0090, 0x83A4, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0091, 0x83B8, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0093, 0x83CC, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x0036, 0x83E0, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x006E, 0x83F4, 0x0026, 0x0000, 0x00FA, 0x00, 0xFF, 0x00, 0x00 },
{ 0x006F, 0x8408, 0x0026, 0x0000, 0x0064, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0097, 0x841C, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0000, 0x8434, 0x0026, 0x0000, 0x00C8, 0x00, 0xFF, 0x00, 0x00 },
{ 0x007C, 0x8448, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x007D, 0x845C, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x000E, 0x8474, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x0095, 0x8488, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x0016, 0x849C, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x0077, 0x84B0, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x0081, 0x84C8, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0073, 0x84E4, 0x0026, 0x0000, 0x0032, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0073, 0x84E4, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x0073, 0x84E4, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0073, 0x84E4, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0073, 0x84E4, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0073, 0x84E4, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x0073, 0x84E4, 0x0026, 0x0000, 0x015E, 0x00, 0x01, 0x00, 0x00 },
{ 0x0073, 0x84E4, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x0098, 0x84FC, 0x0026, 0x0000, 0x0096, 0x00, 0x04, 0x00, 0x00 },
{ 0x0099, 0x8514, 0x0026, 0x0000, 0x0096, 0x00, 0x04, 0x00, 0x00 },
{ 0x007A, 0x852C, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x004E, 0x8544, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x007E, 0x8558, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0096, 0x8570, 0x0026, 0x0000, 0x00C8, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0094, 0x8580, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0072, 0x8594, 0x0026, 0x0000, 0x0032, 0x02, 0xFF, 0x00, 0x00 },
{ 0x0072, 0x85A8, 0x0026, 0x0000, 0x0064, 0x02, 0x01, 0x00, 0x00 },
{ 0x0072, 0x85BC, 0x0026, 0x0000, 0x0096, 0x02, 0x01, 0x00, 0x00 },
{ 0x0072, 0x85D0, 0x0026, 0x0000, 0x00C8, 0x02, 0x01, 0x00, 0x00 },
{ 0x0072, 0x85E4, 0x0026, 0x0000, 0x00FA, 0x02, 0x01, 0x00, 0x00 },
{ 0x0072, 0x85F8, 0x0026, 0x0000, 0x012C, 0x02, 0x01, 0x00, 0x00 },
{ 0x0072, 0x860C, 0x0026, 0x0000, 0x015E, 0x02, 0x01, 0x00, 0x00 },
{ 0x0072, 0x8620, 0x0026, 0x0000, 0x0190, 0x02, 0x01, 0x00, 0x00 },
{ 0x0046, 0x8634, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0080, 0x8648, 0x0026, 0x0000, 0x015E, 0x00, 0x01, 0x00, 0x00 },
{ 0x0074, 0x8660, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0071, 0x8678, 0x0026, 0x0000, 0x0096, 0x03, 0xFF, 0x00, 0x00 },
{ 0x0092, 0x868C, 0x0026, 0x0000, 0x0190, 0x00, 0xFF, 0x00, 0x00 },
{ 0x009B, 0x86A0, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x009A, 0x86B8, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x007B, 0x86D4, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x008C, 0x86F0, 0x0026, 0x0000, 0x012C, 0x00, 0x04, 0x00, 0x00 },
{ 0x009C, 0x8704, 0x0026, 0x0000, 0x012C, 0x00, 0x04, 0x00, 0x00 },
{ 0x0056, 0x8718, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x001E, 0x872C, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x003E, 0x8740, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x003E, 0x8754, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x8768, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x8780, 0x0026, 0x0000, 0x00A5, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x8798, 0x0026, 0x0000, 0x00B9, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x87B0, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x87C8, 0x0026, 0x0000, 0x00D2, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x87E0, 0x0026, 0x0000, 0x00D2, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x87F8, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x8810, 0x0026, 0x0000, 0x00BE, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x8828, 0x0026, 0x0000, 0x00AA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x8840, 0x0026, 0x0000, 0x00A0, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x8858, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x8870, 0x0026, 0x0000, 0x0082, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x8888, 0x0026, 0x0000, 0x006E, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x88A0, 0x0026, 0x0000, 0x005A, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x88B8, 0x0026, 0x0000, 0x0046, 0x00, 0x01, 0x00, 0x00 },
{ 0x0082, 0x88D0, 0x0026, 0x0000, 0x003C, 0x00, 0x01, 0x00, 0x00 },
{ 0x0083, 0x88E8, 0x0026, 0x0000, 0x0032, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0083, 0x88E8, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x0083, 0x88E8, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0083, 0x88E8, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0083, 0x88E8, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0083, 0x88E8, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x0083, 0x88E8, 0x0026, 0x0000, 0x015E, 0x00, 0x01, 0x00, 0x00 },
{ 0x0083, 0x88E8, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x0084, 0x8900, 0x0026, 0x0000, 0x0032, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0084, 0x8900, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x0084, 0x8900, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0084, 0x8900, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0084, 0x8900, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0084, 0x8900, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x0084, 0x8900, 0x0026, 0x0000, 0x015E, 0x00, 0x01, 0x00, 0x00 },
{ 0x0084, 0x8900, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x0085, 0x8918, 0x0026, 0x0000, 0x0032, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0085, 0x8918, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x0085, 0x8918, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0085, 0x8918, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0085, 0x8918, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0085, 0x8918, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x0085, 0x8918, 0x0026, 0x0000, 0x015E, 0x00, 0x01, 0x00, 0x00 },
{ 0x0085, 0x8918, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x0086, 0x8930, 0x0026, 0x0000, 0x0032, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0086, 0x8930, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x0086, 0x8930, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0086, 0x8930, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0086, 0x8930, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0086, 0x8930, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x0086, 0x8930, 0x0026, 0x0000, 0x015E, 0x00, 0x01, 0x00, 0x00 },
{ 0x0086, 0x8930, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x0087, 0x8948, 0x0026, 0x0000, 0x0032, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0087, 0x8948, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x0087, 0x8948, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0087, 0x8948, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0087, 0x8948, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0087, 0x8948, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x0087, 0x8948, 0x0026, 0x0000, 0x015E, 0x00, 0x01, 0x00, 0x00 },
{ 0x0087, 0x8948, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x0088, 0x8960, 0x0026, 0x0000, 0x0032, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0088, 0x8960, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x0088, 0x8960, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0088, 0x8960, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0088, 0x8960, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0088, 0x8960, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x0088, 0x8960, 0x0026, 0x0000, 0x015E, 0x00, 0x01, 0x00, 0x00 },
{ 0x0088, 0x8960, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x0089, 0x8978, 0x0026, 0x0000, 0x0032, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0089, 0x8978, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x0089, 0x8978, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0089, 0x8978, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0089, 0x8978, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0089, 0x8978, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x0089, 0x8978, 0x0026, 0x0000, 0x015E, 0x00, 0x01, 0x00, 0x00 },
{ 0x0089, 0x8978, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x008A, 0x8990, 0x0026, 0x0000, 0x0032, 0x00, 0xFF, 0x00, 0x00 },
{ 0x008A, 0x8990, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x008A, 0x8990, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x008A, 0x8990, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x008A, 0x8990, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x008A, 0x8990, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x008A, 0x8990, 0x0026, 0x0000, 0x015E, 0x00, 0x01, 0x00, 0x00 },
{ 0x008A, 0x8990, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x009D, 0x89A8, 0x0026, 0x0000, 0x0320, 0x00, 0xF0, 0x00, 0x00 },
{ 0x009E, 0x89C0, 0x0026, 0x0000, 0x0320, 0x00, 0xF0, 0x00, 0x00 },
{ 0x009F, 0x89D8, 0x0026, 0x0000, 0x0320, 0x00, 0xF0, 0x00, 0x00 },
{ 0x00A0, 0x89F0, 0x0026, 0x0000, 0x0320, 0x00, 0x01, 0x00, 0x00 },
{ 0x00A1, 0x8A08, 0x0026, 0x0000, 0x0320, 0x00, 0x01, 0x00, 0x00 },
{ 0x00A2, 0x8A20, 0x0026, 0x0000, 0x0320, 0x00, 0x01, 0x00, 0x00 },
{ 0x00A3, 0x8A38, 0x0026, 0x0000, 0x0320, 0x00, 0x01, 0x00, 0x00 },
{ 0x00A4, 0x8A50, 0x0026, 0x0000, 0x0320, 0x00, 0x01, 0x00, 0x00 },
{ 0x00A5, 0x8A68, 0x0026, 0x0000, 0x0190, 0x00, 0xFF, 0x00, 0x00 },
{ 0x00A6, 0x8A7C, 0x0026, 0x0000, 0x0190, 0x00, 0xFF, 0x00, 0x00 },
{ 0x00A7, 0x8A90, 0x0026, 0x0000, 0x0190, 0x00, 0xFF, 0x00, 0x00 },
{ 0x00A8, 0x8AA4, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x00A9, 0x8AB8, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x00AA, 0x8ACC, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x00AB, 0x8AE0, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x00AC, 0x8AF4, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x00AD, 0x8B08, 0x0026, 0x0000, 0x0050, 0x00, 0x01, 0x00, 0x00 },
{ 0x00AD, 0x8B1C, 0x0026, 0x0000, 0x008C, 0x00, 0x01, 0x00, 0x00 },
{ 0x00AD, 0x8B30, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x00AD, 0x8B44, 0x0026, 0x0000, 0x0118, 0x00, 0x01, 0x00, 0x00 },
{ 0x00AD, 0x8B58, 0x0026, 0x0000, 0x0168, 0x00, 0x01, 0x00, 0x00 },
{ 0x00AD, 0x8B6C, 0x0026, 0x0000, 0x01B8, 0x00, 0x01, 0x00, 0x00 },
{ 0x00AD, 0x8B80, 0x0026, 0x0000, 0x0208, 0x00, 0x01, 0x00, 0x00 },
{ 0x00AD, 0x8B94, 0x0026, 0x0000, 0x0258, 0x00, 0x01, 0x00, 0x00 },
{ 0x0077, 0x8BA8, 0x0026, 0x0000, 0x0032, 0x00, 0x01, 0x00, 0x00 },
{ 0x00C0, 0x8BC4, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x00C1, 0x8BD8, 0x0026, 0x0000, 0x003C, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0075, 0x8BEC, 0x0026, 0x0000, 0x0064, 0x00, 0xFF, 0x00, 0x00 },
{ 0x00BF, 0x8C04, 0x0026, 0x0000, 0x0064, 0x00, 0xFF, 0x00, 0x00 },
{ 0x00C6, 0x8C1C, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x00B5, 0x8C34, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x00C9, 0x8C44, 0x0026, 0x0000, 0x0100, 0x00, 0x01, 0x00, 0x00 },
{ 0x00D1, 0x8C58, 0x0026, 0x0000, 0x0100, 0x00, 0x01, 0x00, 0x00 },
{ 0x00D4, 0x8C70, 0x0026, 0x0000, 0x0100, 0x00, 0x01, 0x00, 0x00 },
{ 0x00D7, 0x8C8C, 0x0026, 0x0000, 0x003C, 0x00, 0xFF, 0x00, 0x00 },
{ 0x00DC, 0x8CA4, 0x0026, 0x0000, 0x0100, 0x00, 0x01, 0x00, 0x00 },
{ 0x00E4, 0x8CB8, 0x0026, 0x0000, 0x0100, 0x00, 0x01, 0x00, 0x00 },
{ 0x00E5, 0x8CD0, 0x0026, 0x0000, 0x00F0, 0x00, 0x01, 0x00, 0x00 },
{ 0x00E8, 0x8CEC, 0x0026, 0x0000, 0x05DC, 0x00, 0x01, 0x00, 0x00 },
{ 0x00F0, 0x8D04, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x0104, 0x8D1C, 0x0026, 0x0000, 0x0096, 0x03, 0xFF, 0x00, 0x00 },
{ 0x0105, 0x8D34, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0106, 0x8D48, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0107, 0x8D5C, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0108, 0x8D74, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0109, 0x8D8C, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x010A, 0x8DA4, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x010B, 0x8DBC, 0x0026, 0x0000, 0x0032, 0x03, 0xFF, 0x00, 0x00 },
{ 0x00F8, 0x8DD4, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x00FB, 0x8DE8, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x00FE, 0x8DFC, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0114, 0x8E14, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0101, 0x8E2C, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0115, 0x8E40, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x011E, 0x8E5C, 0x0026, 0x0000, 0x01F4, 0x00, 0x01, 0x00, 0x00 },
{ 0x011E, 0x8E78, 0x0026, 0x0000, 0x01F4, 0x03, 0x01, 0x00, 0x00 },
{ 0x011E, 0x8E94, 0x0026, 0x0000, 0x01F4, 0x00, 0x01, 0x00, 0x00 },
{ 0x012B, 0x8EB0, 0x0026, 0x0000, 0x012C, 0x00, 0x04, 0x00, 0x00 },
{ 0x012C, 0x8EC8, 0x0026, 0x0000, 0x012C, 0x00, 0x04, 0x00, 0x00 },
{ 0x008E, 0x8EE0, 0x0026, 0x0000, 0x0032, 0x00, 0xFF, 0x00, 0x00 },
{ 0x008E, 0x8EF4, 0x0026, 0x0000, 0x0064, 0x00, 0x01, 0x00, 0x00 },
{ 0x008E, 0x8F08, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x008E, 0x8F1C, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x008E, 0x8F30, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x008E, 0x8F44, 0x0026, 0x0000, 0x012C, 0x00, 0x01, 0x00, 0x00 },
{ 0x008E, 0x8F58, 0x0026, 0x0000, 0x015E, 0x00, 0x01, 0x00, 0x00 },
{ 0x008E, 0x8F6C, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x011F, 0x8F80, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0122, 0x8F94, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x010E, 0x8FA8, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0111, 0x8FBC, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x012D, 0x8FD4, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x012E, 0x8FEC, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0131, 0x9008, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0134, 0x9024, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0145, 0x9038, 0x0026, 0x0000, 0x012C, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0150, 0x904C, 0x0026, 0x0000, 0x00A0, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0151, 0x9064, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0154, 0x9078, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0157, 0x9090, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0160, 0x90A8, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0163, 0x90BC, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0166, 0x90D4, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x016F, 0x90EC, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0172, 0x9100, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0175, 0x9118, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x017E, 0x9130, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0181, 0x9144, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0184, 0x915C, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x018D, 0x9174, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0190, 0x9188, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x0193, 0x91A0, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x019C, 0x91B8, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x019F, 0x91CC, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x01A2, 0x91E4, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x01AB, 0x91FC, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x01AE, 0x9210, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x01B1, 0x9228, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x01BA, 0x9240, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x01BD, 0x9254, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x01C0, 0x926C, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x01C9, 0x9284, 0x0026, 0x0000, 0x0190, 0x00, 0x01, 0x00, 0x00 },
{ 0x01CA, 0x929C, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x01CD, 0x92B0, 0x0026, 0x0000, 0x00FA, 0x00, 0x01, 0x00, 0x00 },
{ 0x01D6, 0x92C8, 0x0026, 0x0000, 0x00C8, 0x00, 0xFF, 0x00, 0x00 },
{ 0x01F6, 0x92DC, 0x0026, 0x0000, 0x00C8, 0x00, 0xFF, 0x00, 0x00 },
{ 0x01CE, 0x92F0, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x01FE, 0x9304, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x01EE, 0x9318, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x01E6, 0x932C, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x01DE, 0x9340, 0x0026, 0x0000, 0x00C8, 0x00, 0x01, 0x00, 0x00 },
{ 0x0206, 0x9354, 0x0026, 0x0000, 0x0096, 0x00, 0xFF, 0x00, 0x00 },
{ 0x0207, 0x936C, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0208, 0x9384, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x020F, 0x93A0, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0210, 0x93B8, 0x0026, 0x0000, 0x0096, 0x00, 0x01, 0x00, 0x00 },
{ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00 }};


// 257BA0


uint16_t word_99BA6[] = {//0-16 2-16 3-8
0x00A1,0x00FA,0x0100,0x0014,0x000B,0x8080,0x0026,
0x00A6,0x00FA,0x0100,0x0014,0x002E,0x809C,0x0026,
0x00B3,0x0096,0x0100,0x0011,0x0026,0x80B0,0x0026,
0x0097,0x0096,0x0100,0x0011,0x0026,0x80C0,0x0026,
0x0097,0x0096,0x0100,0x0011,0x0026,0x80D4,0x0026,
0x0097,0x0096,0x0100,0x0011,0x0026,0x80E8,0x0026,
0x0097,0x0096,0x0100,0x0011,0x005E,0x80FC,0x0026,
0x00FA,0x00FA,0xFF00,0x0024,0x0075,0x8110,0x0026,
0x00C0,0x0096,0xFF00,0x0015,0x007F,0x8128,0x0026,
0x003C,0x0032,0x0102,0x0015,0x007F,0x8144,0x0026,
0x0078,0x0064,0x0102,0x0015,0x007F,0x8160,0x0026,
0x00B5,0x0096,0x0102,0x0015,0x007F,0x817C,0x0026,
0x00F1,0x00C8,0x0102,0x0015,0x007F,0x8198,0x0026,
0x012D,0x00FA,0x0102,0x0015,0x007F,0x81B4,0x0026,
0x016A,0x012C,0x0102,0x0015,0x007F,0x81D0,0x0026,
0x01A6,0x015E,0x0102,0x0015,0x007F,0x81EC,0x0026,
0x01E3,0x0190,0x0102,0x0015,0x008B,0x8208,0x0026,
0x0249,0x0096,0x0100,0x0000,0x0076,0x8220,0x0026,
0x009A,0x0096,0x0100,0x0015,0x0070,0x8238,0x0026,
0x00C4,0x0096,0xFF00,0x0015,0x0070,0x824C,0x0026,
0x00D7,0x00A5,0x0100,0x0015,0x0070,0x8260,0x0026,
0x00F1,0x00B9,0x0100,0x0015,0x0070,0x8274,0x0026,
0x0105,0x00C8,0x0100,0x0015,0x0070,0x8288,0x0026,
0x0112,0x00D2,0x0100,0x0015,0x0070,0x829C,0x0026,
0x0112,0x00D2,0x0100,0x0015,0x0070,0x82B0,0x0026,
0x0105,0x00C8,0x0100,0x0015,0x0070,0x82C4,0x0026,
0x00F8,0x00BE,0x0100,0x0015,0x0070,0x82D8,0x0026,
0x00DE,0x00AA,0x0100,0x0015,0x0070,0x82EC,0x0026,
0x00D1,0x00A0,0x0100,0x0015,0x0070,0x8300,0x0026,
0x00C4,0x0096,0x0100,0x0015,0x0070,0x8314,0x0026,
0x00AA,0x0082,0x0100,0x0015,0x0070,0x8328,0x0026,
0x008F,0x006E,0x0100,0x0015,0x0070,0x833C,0x0026,
0x0075,0x005A,0x0100,0x0015,0x0070,0x8350,0x0026,
0x005B,0x0046,0x0100,0x0015,0x0070,0x8364,0x0026,
0x004E,0x003C,0x0100,0x0015,0x008D,0x8378,0x0026,
0x00BB,0x012C,0x0300,0x0000,0x008F,0x8390,0x0026,
0x01F4,0x0096,0x0100,0x0000,0x0090,0x83A4,0x0026,
0x021C,0x0096,0x0100,0x0000,0x0091,0x83B8,0x0026,
0x01E4,0x0096,0x0100,0x0000,0x0093,0x83CC,0x0026,
0x029A,0x0190,0x0100,0x0000,0x0036,0x83E0,0x0026,
0x0122,0x00C8,0x0100,0x0011,0x006E,0x83F4,0x0026,
0x0108,0x00FA,0xFF00,0x0015,0x006F,0x8408,0x0026,
0x0058,0x0064,0xFF00,0x0015,0x0097,0x841C,0x0026,
0x004C,0x0096,0xFF00,0x0000,0x0000,0x8434,0x0026,
0x00EE,0x00C8,0xFF00,0x0011,0x007C,0x8448,0x0026,
0x009A,0x0096,0xFF00,0x0015,0x007D,0x845C,0x0026,
0x0096,0x0096,0xFF00,0x0015,0x000E,0x8474,0x0026,
0x0169,0x012C,0x0100,0x0011,0x0095,0x8488,0x0026,
0x0056,0x0064,0x0100,0x0000,0x0016,0x849C,0x0026,
0x013F,0x012C,0x0100,0x0011,0x0077,0x84B0,0x0026,
0x008E,0x0064,0x0100,0x0014,0x0081,0x84C8,0x0026,
0x0096,0x0096,0xFF00,0x0015,0x0073,0x84E4,0x0026,
0x003D,0x0032,0xFF00,0x0015,0x0073,0x84E4,0x0026,
0x007B,0x0064,0x0100,0x0015,0x0073,0x84E4,0x0026,
0x00B8,0x0096,0x0100,0x0015,0x0073,0x84E4,0x0026,
0x00F6,0x00C8,0x0100,0x0015,0x0073,0x84E4,0x0026,
0x0133,0x00FA,0x0100,0x0015,0x0073,0x84E4,0x0026,
0x0171,0x012C,0x0100,0x0015,0x0073,0x84E4,0x0026,
0x01AE,0x015E,0x0100,0x0015,0x0073,0x84E4,0x0026,
0x01EC,0x0190,0x0100,0x0015,0x0098,0x84FC,0x0026,
0x00CF,0x0096,0x0400,0x0000,0x0099,0x8514,0x0026,
0x00B1,0x0096,0x0400,0x0000,0x007A,0x852C,0x0026,
0x00B2,0x0096,0x0100,0x0015,0x004E,0x8544,0x0026,
0x0145,0x0064,0x0100,0x0011,0x007E,0x8558,0x0026,
0x01B4,0x0096,0x0100,0x0015,0x0096,0x8570,0x0026,
0x01F9,0x00C8,0xFF00,0x0000,0x0094,0x8580,0x0026,
0x00E3,0x00C8,0x0100,0x0000,0x0072,0x8594,0x0026,
0x003C,0x0032,0xFF02,0x0015,0x0072,0x85A8,0x0026,
0x0078,0x0064,0x0102,0x0015,0x0072,0x85BC,0x0026,
0x00B5,0x0096,0x0102,0x0015,0x0072,0x85D0,0x0026,
0x00F1,0x00C8,0x0102,0x0015,0x0072,0x85E4,0x0026,
0x012D,0x00FA,0x0102,0x0015,0x0072,0x85F8,0x0026,
0x016A,0x012C,0x0102,0x0015,0x0072,0x860C,0x0026,
0x01A6,0x015E,0x0102,0x0015,0x0072,0x8620,0x0026,
0x01E3,0x0190,0x0102,0x0015,0x0046,0x8634,0x0026,
0x0071,0x0096,0x0100,0x0011,0x0080,0x8648,0x0026,
0x01A4,0x015E,0x0100,0x0015,0x0074,0x8660,0x0026,
0x00B8,0x0096,0xFF00,0x0001,0x0071,0x8678,0x0026,
0x0028,0x0096,0xFF03,0x0015,0x0092,0x868C,0x0026,
0x00C3,0x0190,0xFF00,0x0000,0x009B,0x86A0,0x0026,
0x0099,0x0096,0xFF00,0x0000,0x009A,0x86B8,0x0026,
0x0075,0x0096,0xFF00,0x0000,0x007B,0x86D4,0x0026,
0x00B2,0x0096,0x0100,0x0015,0x008C,0x86F0,0x0026,
0x0163,0x012C,0x0400,0x0000,0x009C,0x8704,0x0026,
0x0163,0x012C,0x0400,0x0000,0x0056,0x8718,0x0026,
0x0091,0x00FA,0x0100,0x0011,0x001E,0x872C,0x0026,
0x00B1,0x0064,0x0100,0x0011,0x003E,0x8740,0x0026,
0x00C9,0x0096,0x0100,0x0011,0x003E,0x8754,0x0026,
0x00C9,0x0096,0x0100,0x0011,0x0082,0x8768,0x0026,
0x00BE,0x0096,0x0100,0x0000,0x0082,0x8780,0x0026,
0x00D2,0x00A5,0x0100,0x0000,0x0082,0x8798,0x0026,
0x00EB,0x00B9,0x0100,0x0000,0x0082,0x87B0,0x0026,
0x00FE,0x00C8,0x0100,0x0000,0x0082,0x87C8,0x0026,
0x010B,0x00D2,0x0100,0x0000,0x0082,0x87E0,0x0026,
0x010B,0x00D2,0x0100,0x0000,0x0082,0x87F8,0x0026,
0x00FE,0x00C8,0x0100,0x0000,0x0082,0x8810,0x0026,
0x00F1,0x00BE,0x0100,0x0000,0x0082,0x8828,0x0026,
0x00D8,0x00AA,0x0100,0x0000,0x0082,0x8840,0x0026,
0x00CB,0x00A0,0x0100,0x0000,0x0082,0x8858,0x0026,
0x00BE,0x0096,0x0100,0x0000,0x0082,0x8870,0x0026,
0x00A5,0x0082,0x0100,0x0000,0x0082,0x8888,0x0026,
0x008C,0x006E,0x0100,0x0000,0x0082,0x88A0,0x0026,
0x0072,0x005A,0x0100,0x0000,0x0082,0x88B8,0x0026,
0x0059,0x0046,0x0100,0x0000,0x0082,0x88D0,0x0026,
0x004C,0x003C,0x0100,0x0000,0x0083,0x88E8,0x0026,
0x003D,0x0032,0xFF00,0x0015,0x0083,0x88E8,0x0026,
0x007B,0x0064,0x0100,0x0015,0x0083,0x88E8,0x0026,
0x00B8,0x0096,0x0100,0x0015,0x0083,0x88E8,0x0026,
0x00F6,0x00C8,0x0100,0x0015,0x0083,0x88E8,0x0026,
0x0133,0x00FA,0x0100,0x0015,0x0083,0x88E8,0x0026,
0x0171,0x012C,0x0100,0x0015,0x0083,0x88E8,0x0026,
0x01AE,0x015E,0x0100,0x0015,0x0083,0x88E8,0x0026,
0x01EC,0x0190,0x0100,0x0015,0x0084,0x8900,0x0026,
0x003D,0x0032,0xFF00,0x0015,0x0084,0x8900,0x0026,
0x007B,0x0064,0x0100,0x0015,0x0084,0x8900,0x0026,
0x00B8,0x0096,0x0100,0x0015,0x0084,0x8900,0x0026,
0x00F6,0x00C8,0x0100,0x0015,0x0084,0x8900,0x0026,
0x0133,0x00FA,0x0100,0x0015,0x0084,0x8900,0x0026,
0x0171,0x012C,0x0100,0x0015,0x0084,0x8900,0x0026,
0x01AE,0x015E,0x0100,0x0015,0x0084,0x8900,0x0026,
0x01EC,0x0190,0x0100,0x0015,0x0085,0x8918,0x0026,
0x003D,0x0032,0xFF00,0x0015,0x0085,0x8918,0x0026,
0x007B,0x0064,0x0100,0x0015,0x0085,0x8918,0x0026,
0x00B8,0x0096,0x0100,0x0015,0x0085,0x8918,0x0026,
0x00F6,0x00C8,0x0100,0x0015,0x0085,0x8918,0x0026,
0x0133,0x00FA,0x0100,0x0015,0x0085,0x8918,0x0026,
0x0171,0x012C,0x0100,0x0015,0x0085,0x8918,0x0026,
0x01AE,0x015E,0x0100,0x0015,0x0085,0x8918,0x0026,
0x01EC,0x0190,0x0100,0x0015,0x0086,0x8930,0x0026,
0x003D,0x0032,0xFF00,0x0015,0x0086,0x8930,0x0026,
0x007B,0x0064,0x0100,0x0015,0x0086,0x8930,0x0026,
0x00B8,0x0096,0x0100,0x0015,0x0086,0x8930,0x0026,
0x00F6,0x00C8,0x0100,0x0015,0x0086,0x8930,0x0026,
0x0133,0x00FA,0x0100,0x0015,0x0086,0x8930,0x0026,
0x0171,0x012C,0x0100,0x0015,0x0086,0x8930,0x0026,
0x01AE,0x015E,0x0100,0x0015,0x0086,0x8930,0x0026,
0x01EC,0x0190,0x0100,0x0015,0x0087,0x8948,0x0026,
0x003D,0x0032,0xFF00,0x0015,0x0087,0x8948,0x0026,
0x007B,0x0064,0x0100,0x0015,0x0087,0x8948,0x0026,
0x00B8,0x0096,0x0100,0x0015,0x0087,0x8948,0x0026,
0x00F6,0x00C8,0x0100,0x0015,0x0087,0x8948,0x0026,
0x0133,0x00FA,0x0100,0x0015,0x0087,0x8948,0x0026,
0x0171,0x012C,0x0100,0x0015,0x0087,0x8948,0x0026,
0x01AE,0x015E,0x0100,0x0015,0x0087,0x8948,0x0026,
0x01EC,0x0190,0x0100,0x0015,0x0088,0x8960,0x0026,
0x003D,0x0032,0xFF00,0x0015,0x0088,0x8960,0x0026,
0x007B,0x0064,0x0100,0x0015,0x0088,0x8960,0x0026,
0x00B8,0x0096,0x0100,0x0015,0x0088,0x8960,0x0026,
0x00F6,0x00C8,0x0100,0x0015,0x0088,0x8960,0x0026,
0x0133,0x00FA,0x0100,0x0015,0x0088,0x8960,0x0026,
0x0171,0x012C,0x0100,0x0015,0x0088,0x8960,0x0026,
0x01AE,0x015E,0x0100,0x0015,0x0088,0x8960,0x0026,
0x01EC,0x0190,0x0100,0x0015,0x0089,0x8978,0x0026,
0x003D,0x0032,0xFF00,0x0015,0x0089,0x8978,0x0026,
0x007B,0x0064,0x0100,0x0015,0x0089,0x8978,0x0026,
0x00B8,0x0096,0x0100,0x0015,0x0089,0x8978,0x0026,
0x00F6,0x00C8,0x0100,0x0015,0x0089,0x8978,0x0026,
0x0133,0x00FA,0x0100,0x0015,0x0089,0x8978,0x0026,
0x0171,0x012C,0x0100,0x0015,0x0089,0x8978,0x0026,
0x01AE,0x015E,0x0100,0x0015,0x0089,0x8978,0x0026,
0x01EC,0x0190,0x0100,0x0015,0x008A,0x8990,0x0026,
0x003D,0x0032,0xFF00,0x0015,0x008A,0x8990,0x0026,
0x007B,0x0064,0x0100,0x0015,0x008A,0x8990,0x0026,
0x00B8,0x0096,0x0100,0x0015,0x008A,0x8990,0x0026,
0x00F6,0x00C8,0x0100,0x0015,0x008A,0x8990,0x0026,
0x0133,0x00FA,0x0100,0x0015,0x008A,0x8990,0x0026,
0x0171,0x012C,0x0100,0x0015,0x008A,0x8990,0x0026,
0x01AE,0x015E,0x0100,0x0015,0x008A,0x8990,0x0026,
0x01EC,0x0190,0x0100,0x0015,0x009D,0x89A8,0x0026,
0x0234,0x0320,0xF000,0x0000,0x009E,0x89C0,0x0026,
0x0234,0x0320,0xF000,0x0000,0x009F,0x89D8,0x0026,
0x0234,0x0320,0xF000,0x0000,0x00A0,0x89F0,0x0026,
0x0234,0x0320,0x0100,0x0000,0x00A1,0x8A08,0x0026,
0x0234,0x0320,0x0100,0x0000,0x00A2,0x8A20,0x0026,
0x0234,0x0320,0x0100,0x0000,0x00A3,0x8A38,0x0026,
0x0234,0x0320,0x0100,0x0000,0x00A4,0x8A50,0x0026,
0x0234,0x0320,0x0100,0x0000,0x00A5,0x8A68,0x0026,
0x0171,0x0190,0xFF00,0x0000,0x00A6,0x8A7C,0x0026,
0x019B,0x0190,0xFF00,0x0000,0x00A7,0x8A90,0x0026,
0x01A7,0x0190,0xFF00,0x0000,0x00A8,0x8AA4,0x0026,
0x01B4,0x0190,0x0100,0x0000,0x00A9,0x8AB8,0x0026,
0x0190,0x0190,0x0100,0x0000,0x00AA,0x8ACC,0x0026,
0x0190,0x0190,0x0100,0x0000,0x00AB,0x8AE0,0x0026,
0x019B,0x0190,0x0100,0x0000,0x00AC,0x8AF4,0x0026,
0x0190,0x0190,0x0100,0x0000,0x00AD,0x8B08,0x0026,
0x0098,0x0050,0x0100,0x0011,0x00AD,0x8B1C,0x0026,
0x010A,0x008C,0x0100,0x0011,0x00AD,0x8B30,0x0026,
0x017C,0x00C8,0x0100,0x0011,0x00AD,0x8B44,0x0026,
0x0215,0x0118,0x0100,0x0011,0x00AD,0x8B58,0x0026,
0x02AD,0x0168,0x0100,0x0011,0x00AD,0x8B6C,0x0026,
0x0346,0x01B8,0x0100,0x0011,0x00AD,0x8B80,0x0026,
0x03DE,0x0208,0x0100,0x0011,0x00AD,0x8B94,0x0026,
0x0476,0x0258,0x0100,0x0011,0x0077,0x8BA8,0x0026,
0x0047,0x0032,0x0100,0x0014,0x00C0,0x8BC4,0x0026,
0x0064,0x0064,0x0100,0x0015,0x00C1,0x8BD8,0x0026,
0x002D,0x003C,0xFF00,0x0013,0x0075,0x8BEC,0x0026,
0x0080,0x0064,0xFF00,0x0015,0x00BF,0x8C04,0x0026,
0x007B,0x0064,0xFF00,0x0015,0x00C6,0x8C1C,0x0026,
0x009B,0x00FA,0x0100,0x0014,0x00B5,0x8C34,0x0026,
0x017C,0x0190,0x0100,0x0011,0x00C9,0x8C44,0x0026,
0x0135,0x0100,0x0100,0x0011,0x00D1,0x8C58,0x0026,
0x0079,0x0100,0x0100,0x0014,0x00D4,0x8C70,0x0026,
0x00C4,0x0100,0x0100,0x0014,0x00D7,0x8C8C,0x0026,
0x002D,0x003C,0xFF00,0x0013,0x00DC,0x8CA4,0x0026,
0x0211,0x0100,0x0100,0x0011,0x00E4,0x8CB8,0x0026,
0x0100,0x0100,0x0100,0x0000,0x00E5,0x8CD0,0x0026,
0x00C4,0x00F0,0x0100,0x0014,0x00E8,0x8CEC,0x0026,
0x0A2B,0x05DC,0x0100,0x0011,0x00F0,0x8D04,0x0026,
0x009B,0x012C,0x0100,0x0013,0x0104,0x8D1C,0x0026,
0x00B4,0x0096,0xFF03,0x0015,0x0105,0x8D34,0x0026,
0x009A,0x0096,0xFF00,0x0015,0x0106,0x8D48,0x0026,
0x009A,0x0096,0xFF00,0x0015,0x0107,0x8D5C,0x0026,
0x009A,0x0096,0xFF00,0x0001,0x0108,0x8D74,0x0026,
0x00A8,0x0096,0xFF00,0x0015,0x0109,0x8D8C,0x0026,
0x0096,0x0096,0xFF00,0x0015,0x010A,0x8DA4,0x0026,
0x009A,0x0096,0xFF00,0x0015,0x010B,0x8DBC,0x0026,
0x0032,0x0032,0xFF03,0x0015,0x00F8,0x8DD4,0x0026,
0x0074,0x00FA,0x0100,0x0014,0x00FB,0x8DE8,0x0026,
0x006D,0x00FA,0x0100,0x0014,0x00FE,0x8DFC,0x0026,
0x0078,0x00FA,0x0100,0x0014,0x0114,0x8E14,0x0026,
0x0078,0x00FA,0x0100,0x0000,0x0101,0x8E2C,0x0026,
0x006B,0x00FA,0x0100,0x0014,0x0115,0x8E40,0x0026,
0x0119,0x00FA,0x0100,0x0024,0x011E,0x8E5C,0x0026,
0x0193,0x01F4,0x0100,0x0001,0x011E,0x8E78,0x0026,
0x0193,0x01F4,0x0103,0x0001,0x011E,0x8E94,0x0026,
0x0193,0x01F4,0x0100,0x0001,0x012B,0x8EB0,0x0026,
0x0160,0x012C,0x0400,0x0000,0x012C,0x8EC8,0x0026,
0x0163,0x012C,0x0400,0x0000,0x008E,0x8EE0,0x0026,
0x0019,0x0032,0xFF00,0x0001,0x008E,0x8EF4,0x0026,
0x0032,0x0064,0x0100,0x0001,0x008E,0x8F08,0x0026,
0x004B,0x0096,0x0100,0x0001,0x008E,0x8F1C,0x0026,
0x0064,0x00C8,0x0100,0x0001,0x008E,0x8F30,0x0026,
0x007D,0x00FA,0x0100,0x0001,0x008E,0x8F44,0x0026,
0x0096,0x012C,0x0100,0x0001,0x008E,0x8F58,0x0026,
0x00AF,0x015E,0x0100,0x0001,0x008E,0x8F6C,0x0026,
0x00C8,0x0190,0x0100,0x0001,0x011F,0x8F80,0x0026,
0x009F,0x00FA,0x0100,0x0014,0x0122,0x8F94,0x0026,
0x00BE,0x00FA,0x0100,0x0010,0x010E,0x8FA8,0x0026,
0x009F,0x00FA,0x0100,0x0014,0x0111,0x8FBC,0x0026,
0x0070,0x00FA,0x0100,0x0014,0x012D,0x8FD4,0x0026,
0x00E6,0x00FA,0x0100,0x0000,0x012E,0x8FEC,0x0026,
0x0074,0x00FA,0x0100,0x0014,0x0131,0x9008,0x0026,
0x0074,0x00FA,0x0100,0x0014,0x0134,0x9024,0x0026,
0x0180,0x00FA,0x0100,0x0000,0x0145,0x9038,0x0026,
0x0121,0x012C,0xFF00,0x000B,0x0150,0x904C,0x0026,
0x006F,0x00A0,0xFF00,0x0000,0x0151,0x9064,0x0026,
0x0076,0x00FA,0x0100,0x0014,0x0154,0x9078,0x0026,
0x00C0,0x00FA,0x0100,0x0014,0x0157,0x9090,0x0026,
0x00BE,0x00FA,0x0100,0x0010,0x0160,0x90A8,0x0026,
0x0076,0x00FA,0x0100,0x0014,0x0163,0x90BC,0x0026,
0x00C0,0x00FA,0x0100,0x0014,0x0166,0x90D4,0x0026,
0x00BE,0x00FA,0x0100,0x0010,0x016F,0x90EC,0x0026,
0x0076,0x00FA,0x0100,0x0014,0x0172,0x9100,0x0026,
0x00C0,0x00FA,0x0100,0x0014,0x0175,0x9118,0x0026,
0x00BE,0x00FA,0x0100,0x0010,0x017E,0x9130,0x0026,
0x0076,0x00FA,0x0100,0x0014,0x0181,0x9144,0x0026,
0x00C0,0x00FA,0x0100,0x0014,0x0184,0x915C,0x0026,
0x00BE,0x00FA,0x0100,0x0010,0x018D,0x9174,0x0026,
0x0076,0x00FA,0x0100,0x0014,0x0190,0x9188,0x0026,
0x00C0,0x00FA,0x0100,0x0014,0x0193,0x91A0,0x0026,
0x00BE,0x00FA,0x0100,0x0010,0x019C,0x91B8,0x0026,
0x0076,0x00FA,0x0100,0x0014,0x019F,0x91CC,0x0026,
0x00C0,0x00FA,0x0100,0x0014,0x01A2,0x91E4,0x0026,
0x00BE,0x00FA,0x0100,0x0010,0x01AB,0x91FC,0x0026,
0x0076,0x00FA,0x0100,0x0014,0x01AE,0x9210,0x0026,
0x00C0,0x00FA,0x0100,0x0014,0x01B1,0x9228,0x0026,
0x00BE,0x00FA,0x0100,0x0010,0x01BA,0x9240,0x0026,
0x0076,0x00FA,0x0100,0x0014,0x01BD,0x9254,0x0026,
0x00C0,0x00FA,0x0100,0x0014,0x01C0,0x926C,0x0026,
0x00BE,0x00FA,0x0100,0x0010,0x01C9,0x9284,0x0026,
0x0190,0x0190,0x0100,0x0000,0x01CA,0x929C,0x0026,
0x0059,0x00FA,0x0100,0x0014,0x01CD,0x92B0,0x0026,
0x0134,0x00FA,0x0100,0x0015,0x01D6,0x92C8,0x0026,
0x00FA,0x00C8,0xFF00,0x0011,0x01F6,0x92DC,0x0026,
0x00F2,0x00C8,0xFF00,0x0011,0x01CE,0x92F0,0x0026,
0x0108,0x00C8,0x0100,0x0011,0x01FE,0x9304,0x0026,
0x00FD,0x00C8,0x0100,0x0011,0x01EE,0x9318,0x0026,
0x00F2,0x00C8,0x0100,0x0011,0x01E6,0x932C,0x0026,
0x0113,0x00C8,0x0100,0x0011,0x01DE,0x9340,0x0026,
0x00EE,0x00C8,0x0100,0x0011,0x0206,0x9354,0x0026,
0x00B8,0x0096,0xFF00,0x0001,0x0207,0x936C,0x0026,
0x00BA,0x0096,0x0100,0x0015,0x0208,0x9384,0x0026,
0x004B,0x0096,0x0100,0x0001,0x020F,0x93A0,0x0026,
0x0096,0x0096,0x0100,0x0015,0x0210,0x93B8,0x0026,
0x012C,0x0096,0x0100,0x0001,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x93D0,0x0026,0x93EC,
0x0026,0x9408,0x0026,0x940C,0x0026,0x9424,0x0026,
0x9408,0x0026,0x943C,0x0026,0x9450,0x0026,0x9408,
0x0026,0x9464,0x0026,0x9470,0x0026,0x9408,0x0026,0x947C,
0x0026,0x9488,0x0026,0x9408,0x0026,0x9494,0x0026,0x94A8,
0x0026,0x94BC,0x0026,0x9408,0x0026,0x94D0,0x0026,0x94E0,
0x0026,0x94F0,0x0026,0x9408,0x0026,0x9500,0x0026,0x9520,
0x0026,0x9540,0x0026,0x9560,0x0026,0x9580,0x0026,0x95A0,
0x0026,0x95C0,0x0026,0x95E0,0x0026,0x9408,0x0026,0x9600,
0x0026,0x961C,0x0026,0x9408,0x0026,0x9638,0x0026,0x9650,
0x0026,0x9668,0x0026,0x9680,0x0026,0x9698,0x0026,0x9408,
0x0026,0x96B0,0x0026,0x96D0,0x0026,0x9408,0x0026,0x96F0,
0x0026,0x9700,0x0026,0x9710,0x0026,0x9720,0x0026,0x9730,
0x0026,0x9408,0x0026,0x9740,0x0026,0x9750,0x0026,0x9408,
0x0026,0x9760,0x0026,0x977C,0x0026,0x9408,0x0026,0x9798,
0x0026,0x97B0,0x0026,0x9408,0x0026,0x97C8,0x0026,0x97D8,
0x0026,0x9408,0x0026,0x97E8,0x0026,0x97FC,0x0026,0x9810,
0x0026,0x9824,0x0026,0x9838,0x0026,0x984C,0x0026,0x9860,
0x0026,0x9874,0x0026,0x9888,0x0026,0x989C,0x0026,0x98B0,
0x0026,0x98C4,0x0026,0x98D8,0x0026,0x98EC,0x0026,0x9900,
0x0026,0x9914,0x0026,0x9408,0x0026,0x9928,0x0026,0x993C,
0x0026,0x9950,0x0026,0x9964,0x0026,0x9978,0x0026,0x9408,
0x0026,0x998C,0x0026,0x999C,0x0026,0x9408,0x0026,0x99AC,
0x0026,0x99C4,0x0026,0x9408,0x0026,0x99DC,0x0026,0x99F0,
0x0026,0x9A04,0x0026,0x9A18,0x0026,0x9A2C,0x0026,0x9A40,
0x0026,0x9A54,0x0026,0x9A68,0x0026,0x9A7C,0x0026,0x9A90,
0x0026,0x9AA4,0x0026,0x9408,0x0026,0x9AB8,0x0026,0x9AC4,
0x0026,0x9408,0x0026,0x9AD0,0x0026,0x9AE0,0x0026,0x9408,
0x0026,0x9AF0,0x0026,0x9408,0x0026,0x9B1C,0x0026,0x0001,
0x0000,0x0000,0x0000,0x2700,0x3231,0x3433,0x3635,0x3837,
0x3039,0x3D2D,0x0908,0x5751,0x5245,0x5954,0x4955,0x504F,
0x5D5B,0x000D,0x5341,0x4644,0x4847,0x4B4A,0x3B4C,0x2327,
0x5C00,0x585A,0x5643,0x4E42,0x2C4D,0x2F2E,0x0000,0x2000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x002D,0x0000,0x002B,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x002F,0x2800,0x2F29,0x002A,0x0000,
0x0000,0x0000,0x0000,0x2E00,0x000D,0x0140,0x00C8,0x0000,
0x0000,0x0000,0x0000,0x004E,0x007B,0x027E,0x0049,0x0019,
0x0100,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0005,
0x0000,0x6E69,0x7274,0x5C6F,0x6974,0x6C74,0x2D65,0x3130,
0x642E,0x7461,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x6164,0x6174,0x6D2F,
0x7375,0x6369,0x2D30,0x2E30,0x6164,0x0074,0x0000,0x0000,
0x0000,0x0000,0x0000,0x9F68,0x0028,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x6164,0x6174,0x6D2F,0x7375,0x6369,
0x2D30,0x2E30,0x6174,0x0062,0x0000,0x0000,0x0000,0x0000,
0x0000,0x9F60,0x0028,0x9F64,0x0028,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x6164,
0x6174,0x732F,0x646E,0x3073,0x302D,0x642E,0x7461,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0xA130,0x0028,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x6164,0x6174,0x732F,
0x646E,0x3073,0x302D,0x742E,0x6261,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0xA154,0x0028,0xA1C0,0x0028,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x00FF,0x0000,0x00FF,0x0000,0x00FF,0x0000,0x00FF,
0x0000,0x00FF,0x0000,0x00FF,0x0000,0x00FF,0x0000,0x00FF,
0x0000,0x00FF,0x0000,0x00FF,0x0000,0x00FF,0x0000,0x00FF,
0x0000,0x00FF,0x0000,0x00FF,0x0000,0x00FF,0x0000,0x00FF,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x3145,0x0023,0x3145,0x0023,0x3145,
0x0023,0x0000,0x0000,0x0020,0x0000,0x0001,0x0000,0x0001,
0x0001,0x0007,0x0003,0x000F,0x0007,0x000F,0x000F,0x001F,
0x001F,0x000F,0x000F,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0100,0x0000,0x0101,
0x0000,0x0302,0x0000,0x0403,0x0000,0x0404,0x0000,0x0505,
0x0000,0x0406,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,0x0000,0x0003,
0x0002,0x0007,0x0001,0x0007,0x0005,0x0007,0x0003,0x0007,
0x0007,0x000F,0x000B,0x000F,0x0007,0x001F,0x000F,0x007F,
0x001F,0x007F,0x005F,0x007F,0x003F,0x00FF,0x007F,0x01FF,
0x00FF,0x01FF,0x01FF,0x003F,0x003F,0x0200,0x0000,0x0208,
0x0000,0x0302,0x0000,0x0307,0x0000,0x0309,0x0000,0x030F,
0x0000,0x040B,0x0000,0x040C,0x0000,0x050D,0x0000,0x0700,
0x0000,0x0702,0x0000,0x070E,0x0000,0x0804,0x0000,0x0901,
0x0000,0x0903,0x0000,0x0602,0x0000,0x0003,0x0000,0x0003,
0x0002,0x0007,0x0001,0x0007,0x0005,0x0007,0x0003,0x000F,
0x0007,0x000F,0x000F,0x003F,0x001F,0x007F,0x003F,0x007F,
0x007F,0x00FF,0x00FF,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0204,0x0000,0x0207,
0x0000,0x0303,0x0000,0x030B,0x0000,0x030C,0x0000,0x0405,
0x0000,0x0408,0x0000,0x0607,0x0000,0x0709,0x0000,0x070B,
0x0000,0x080A,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x979C,0x0000,0x0855,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0500,0x0000,0x0001,
0x0000,0xF0E1,0x0019,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
}; // weak
//__int16 word_99BA8[] = { 250 }; // weak
//char byte_99BAC[] = { '\0' }; // weak
char* off_9AB44[2] = { (char*)"             Designed by", (char*)"BULLFROG PRODUCTIONS LTD" }; // weak
char byte_9AD04 = '\0'; // weak
char byte_9AD08 = '\0'; // weak
char byte_9AD09 = '\0'; // weak
char byte_9AD0C[] = { '\0' }; // weak
int dword_9AD88 = 0; // weak
__int16 mouseX_9AD8C = 320; // weak
__int16 mouseY_9AD8E = 200; // weak
//int dmouse_9AD90.x = 13107520; // weak
char byte_9AD96 = '\0'; // weak
int dword_9AD98 = 0; // weak
__int16 word_9AD9C = 0; // weak
int dword_9AD9E = 0; // weak
__int16 word_9ADA2 = 0; // weak
int dword_9ADA4 = 0; // weak
__int16 word_9ADA8 = 0; // weak
__int16 word_9ADB4 = 0; // weak
int dword_9ADBC = 0; // weak
int dword_9ADC0 = 0; // weak
int dword_9ADC4 = 5; // weak
char pathBuffer_9ADC8[64]; // weak
__int16 word_9ADFA = 0; // weak
__int16 word_9ADFC = 0; // weak
//char aDataMusic00Dat[18] = "data/music0-0.dat"; // weak
//char aDataMusic00Tab[18] = "data/music0-0.tab"; // weak
//char aDataSnds00Dat[17] = "data/snds0-0.dat"; // weak
//char aDataSnds00Tab[17] = "data/snds0-0.tab"; // weak
int dword_9AF08 = 0; // weak
int dword_9AF0C = 0; // weak
int dword_9AF10 = 0; // weak
int dword_9AF14 = 0; // weak
_UNKNOWN unk_9AF18; // weak
char byte_9AF9C = '\0'; // weak
int dword_9AFA0 = 0; // weak
__int16 word_9AFA4 = 0; // weak
char byte_9AFA8 = '\0'; // weak
__int16 rncRaw_9AFC0[64] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
__int16 rncDist_9B040[64] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
__int16 rncLen_9B0C0[64] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
uint32 rncRetLen_9B140 = 0; // weak
uint32 rncInpLen_9B144 = 0; // weak
__int16 rncChCount_9B14A = 0; // weak
uint16 word_9B14C = 0; // weak
__int16 word_9B14E = 0; // weak
int8 byte_9B150 = 0; // weak
uint8 byte_9B151 = 0; // weak
int dword_9B15C = 0; // weak
__int16 word_9B160[] = { 0 }; // weak
int dword_9B17A[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9B18E[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9B1A2[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9B1B6[6] = { 0, 0, 0, 0, 0, 0 }; // weak
char byte_9B1F2[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_9B7F2[256] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_9BBF2[256] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_9BFF2 = 0; // weak
__int16 word_9BFF6[] = { 0 }; // weak
int dword_9C022[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_9C042[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
char byte_9C062[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_9C068[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_9C06E[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_9C074[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
_DWORD byte_9C07A[39] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_9C116[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_9C136[8] = { 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
char byte_9C156[16] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\x03',
  '\x03',
  '\x02',
  '\x03',
  '\x02',
  '\x02',
  '\x03',
  '\0'
}; // weak
char byte_9C166[] = { '\0' }; // weak
char byte_9C176[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_9C1A6[8] = { -1, -1, -1, -1, -1, -1, -1, -1 }; // weak
//char aHmimdrv386[12] = "hmimdrv.386"; // weak
_UNKNOWN unk_9C1D2; // weak
int dword_9C1F2 = 0; // weak
_UNKNOWN unk_9C1FE; // weak
int dword_9C222 = 0; // weak
int dword_9C226 = 0; // weak
int dword_9C22A = 0; // weak
int (*byte_9C22E)(_DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int dword_9C234[] = { 0 }; // weak
int dword_9C238 = 0; // weak
__int16 word_9C23C = 0; // weak
int dword_9C9B4[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9C9C8[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9C9DC[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9C9F0[5] = { 0, 0, 0, 0, 0 }; // weak
char byte_9CA04[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_9D904[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_9D922[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9D936[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9D94A[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9D95E[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_9D972[5] = { 0, 0, 0, 0, 0 }; // weak
char byte_9D986[] = { 'H' }; // weak
int dword_9D98F[] = { 0 }; // weak
__int16 word_9D993 = 0; // weak
char byte_9DF8F[640] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_9E20F[80] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_9E25F[80] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_9E2AF[80] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_9E2FF[] = { '\xFF' }; // weak
char byte_9E300[] = { '\xFF' }; // weak
char byte_9E301[] = { '\xFF' }; // weak
char byte_9E302[] = { '\xFF' }; // weak
char byte_9E303[1596] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_9E93F[640] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_9EBBF = '\0'; // weak
char byte_9EBC0 = '\0'; // weak
char byte_9EBC1 = '\0'; // weak
int dword_9EBC9 = 1; // weak
char byte_9EBDD = '\x01'; // weak
char byte_9EBE7 = '\x01'; // weak
char byte_9EBE8 = '\x01'; // weak
char byte_9EBE9 = '\x01'; // weak
char byte_9EBEA = '\x01'; // weak
char byte_9EBEB = '\x01'; // weak
char byte_9EBEC = '\x01'; // weak
char byte_9EBED = '\x01'; // weak
char byte_9EBF7 = '\x01'; // weak
char byte_9EBF8 = '\x01'; // weak
char byte_9EBF9 = '\x01'; // weak
char byte_9EBFA = '\x01'; // weak
char byte_9EBFB = '\x01'; // weak
char byte_9EBFC = '\x01'; // weak
char byte_9EC0D = '\0'; // weak
char byte_9EC17 = '\0'; // weak
char byte_9EC18 = '\0'; // weak
char byte_9EC19 = '\0'; // weak
char byte_9EC1A = '\0'; // weak
char byte_9EC1B = '\0'; // weak
char byte_9EC1C = '\0'; // weak
char byte_9EC5D[80] =
{
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01'
}; // weak
char byte_9ECAD = '\x7F'; // weak
char byte_9ECAE[] = { '\x7F' }; // weak
char byte_9ECB7[71] =
{
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F',
  '\x7F'
}; // weak
char byte_9ECFE = '\0'; // weak
char byte_9ECFF[] = { 'H' }; // weak
_UNKNOWN unk_9ED08; // weak
_UNKNOWN unk_9EE07; // weak
int dword_9EF06 = 0; // weak
__int16 word_9EF0A = 0; // weak
int dword_9EF0C = 0; // weak
char *off_9EF10[20] =
{
  (char*)"Error Code Does Not Indicate An Error",
  (char*)"Specified Driver Is Not Loaded",
  (char*)"Specified Pointer Is NULL",
  (char*)"Detection System Is Already Initialized",
  (char*)"File Open Failure",
  (char*)"Memory Allocation Failure",
  (char*)"Invalid Driver ID",
  (char*)"Driver Not Found",
  (char*)"Detection System Failed To Find Hardware",
  (char*)"Driver Already Loaded Using Specified Handle",
  (char*)"Invalid Handle",
  (char*)"No Handles Available",
  (char*)"Hardware Already Paused",
  (char*)"Hardware Not Paused",
  (char*)"Data Is Not Valid",
  (char*)"HMI*.386 File Open Failure",
  (char*)"Incorrect Port",
  (char*)"Incorrect IRQ",
  (char*)"Incorrect DMA",
  (char*)"Incorrect DMA/IRQ"
}; // weak
int dword_9EF60 = 0; // weak
int dword_9EF64 = 0; // weak
int dword_9EF6C[] = { 0 }; // weak
int dword_9EF80 = 0; // weak
int dword_9F19C = 0; // weak
int dword_9F1A0 = 0; // weak
char byte_9F1A8[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
__int16 word_9F1B0 = 0; // weak
__int16 word_9F1B6 = 0; // weak
//uint8_t* tempScreenBuffer_A0000;// [640 * 480] ; // weak
uint8_t tempScreenBuffer_A0000[640 * 480 * 2];
__int16 word_A01C2 = 0; // weak
int dword_A01C4 = 0; // weak
int dword_A01CC = 0; // weak
__int16 word_A01D0[13] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A01EA[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A01FE = 0; // weak
__int16 word_A0202[13] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A021C[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A0230[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A0244[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A0258[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A0280[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A0294 = 0; // weak
__int16 word_A0298[] = { 0 }; // weak
int dword_A02B2[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A02C6[5] = { 0, 0, 0, 0, 0 }; // weak
int dword_A02DA = 0; // weak
__int16 word_A02DE[28] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_A0316 = 0; // weak
__int16 word_A031A[] = { 0 }; // weak
int dword_A0338[6] = { 0, 0, 0, 0, 0, 0 }; // weak
char byte_A0350[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_A0374[8] = { 1, 3, 5, 7, 194, 198, 202, 206 }; // weak
char byte_A0394[9] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_A039D = -1; // weak
char byte_A03A1[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_A03FB = 0; // weak
__int16 word_A03FF = 0; // weak
int dword_A0401[15] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A043D = 0; // weak
int dword_A0441[15] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A047D = 0; // weak
int dword_A0481[] = { 0 }; // weak
char byte_A04C1[16] =
{
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF'
}; // weak
char byte_A04D1 = '\0'; // weak
char byte_A04D2 = '\0'; // weak
_UNKNOWN unk_A05D1; // weak
int dword_A06DC = 0; // weak
int dword_A06E0 = 0; // weak
int dword_A06E4 = 0; // weak
int dword_A06E8 = 904; // weak
int dword_A06EC = 904; // weak
int dword_A06F0 = 904; // weak
char byte_A0704[32] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_A0724[16] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_A0734[9] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_A073D[27] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_A0758 = '\0'; // weak
char byte_A0759[11] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
char byte_A0764[11] = { '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_A076F = 0; // weak
char byte_A0773 = '\0'; // weak
char byte_A0774 = '\0'; // weak
char byte_A0775[] = { '\0' }; // weak
char byte_A0776[18] =
{
  '\x03',
  '\x01',
  '\x04',
  '\x02',
  '\x05',
  '\b',
  '\v',
  '\t',
  '\f',
  '\n',
  '\r',
  '\x10',
  '\x13',
  '\x11',
  '\x14',
  '\x12',
  '\x15',
  '\0'
}; // weak
int dword_A0788 = 0; // weak
int dword_A078C = 0; // weak
char byte_A0794[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_A079A = 0; // weak
__int16 word_A079E = 0; // weak
int dword_A07A0 = 0; // weak
__int16 word_A07A4 = 0; // weak
int dword_A07A6 = 0; // weak
int dword_A07AA = 0; // weak
__int16 word_A07AE = 0; // weak
int dword_A07B0 = 0; // weak
__int16 word_A07B4 = 0; // weak
int dword_A07B6 = 0; // weak
__int16 word_A07BA = 0; // weak
int dword_A07BC = 0; // weak
int dword_A07C4 = 1; // weak
int dword_A07C8[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A0808[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A082C[16] = { 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 }; // weak
int dword_A086C[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A08AC[16] = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 }; // weak
int dword_A08EC = 0; // weak
int dword_A08F0[16] =
{
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127,
  127
}; // weak
int dword_A0930[9] = { 127, 127, 127, 127, 127, 127, 127, 127, 127 }; // weak
int dword_A0954[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_A0994[18] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 875770417, 943142453 }; // weak
char byte_A09DE = '\0'; // weak
char byte_A09DF = '\0'; // weak
char byte_A09E0 = '\0'; // weak
char byte_A09E1 = '\0'; // weak
char byte_A09E2 = '\0'; // weak
char byte_A09E3 = '\0'; // weak
char byte_A09E4 = '\0'; // weak
char byte_A09E5 = '\0'; // weak
char byte_A09E6 = '\0'; // weak
char byte_A09E7 = '\0'; // weak
int dword_A09E8 = 0; // weak
__int16 word_A09EC = 0; // weak
char byte_A09EE = '\0'; // weak
char byte_A09EF = '\0'; // weak
int dword_A09F0 = 0; // weak
char byte_A09F4[] = { '\0' }; // weak
char byte_A09F5[] = { '\0' }; // weak

char byte_A09F6[46] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_A0A24[20] =
{
  '?',
  ':',
  '5',
  '0',
  ',',
  ')',
  '%',
  '$',
  '#',
  '\"',
  '!',
  ' ',
  '\x1F',
  '\x1E',
  '\x1D',
  '\x1C',
  '\x1B',
  '\x1A',
  '\x19',
  '\x18'
}; // weak
int dword_A0A38[12] =
{
  336926231,
  269554195,
  219024911,
  185338893,
  151652875,
  117966857,
  101058055,
  67437829,
  50594820,
  33686275,
  65794,
  0
}; // weak
int dword_A0A68[102] =
{
  343,
  363,
  385,
  408,
  432,
  458,
  485,
  514,
  544,
  577,
  611,
  647,
  1367,
  1387,
  1409,
  1432,
  1456,
  1482,
  1509,
  1538,
  1568,
  1601,
  1635,
  1671,
  2391,
  2411,
  2433,
  2456,
  2480,
  2506,
  2533,
  2562,
  2592,
  2625,
  2659,
  2695,
  3415,
  3435,
  3457,
  3480,
  3504,
  3530,
  3557,
  3586,
  3616,
  3649,
  3683,
  3719,
  4439,
  4459,
  4481,
  4504,
  4528,
  4554,
  4581,
  4610,
  4640,
  4673,
  4707,
  4743,
  5463,
  5483,
  5505,
  5528,
  5552,
  5578,
  5605,
  5634,
  5664,
  5697,
  5731,
  5767,
  6487,
  6507,
  6529,
  6552,
  6576,
  6602,
  6629,
  6658,
  6688,
  6721,
  6755,
  6791,
  7511,
  7531,
  7553,
  7576,
  7600,
  7626,
  7653,
  7682,
  7712,
  7745,
  7779,
  7815,
  7854,
  7863,
  7938,
  7984,
  8032,
  8084
}; // weak
int dword_A0C00[] = { 8138 }; // weak
int dword_A0C04[36] =
{
  324,
  306,
  289,
  272,
  257,
  248,
  229,
  216,
  204,
  193,
  182,
  172,
  161,
  144,
  153,
  134,
  129,
  124,
  115,
  108,
  102,
  96,
  91,
  86,
  686,
  726,
  770,
  816,
  864,
  916,
  990,
  1028,
  1088,
  1154,
  1222,
  1294
}; // weak
int dword_A0CA4 = 0; // weak
int dword_A0CA8 = 0; // weak
char byte_A0CC6 = '\0'; // weak
_UNKNOWN unk_A0E84; // weak
__int16 word_A0F00[128] =
{
  -18023,
  23756,
  15838,
  11878,
  9503,
  7919,
  6788,
  5939,
  5279,
  4751,
  4319,
  3959,
  3655,
  3394,
  3168,
  2970,
  2795,
  2640,
  2501,
  2376,
  2263,
  2160,
  2066,
  1980,
  1901,
  1827,
  1760,
  1697,
  1638,
  1584,
  1533,
  1485,
  1397,
  1320,
  1250,
  1188,
  1131,
  1080,
  1033,
  990,
  950,
  914,
  880,
  848,
  819,
  792,
  766,
  742,
  699,
  660,
  625,
  594,
  566,
  540,
  516,
  495,
  475,
  457,
  440,
  424,
  410,
  396,
  383,
  371,
  349,
  330,
  313,
  297,
  283,
  270,
  258,
  247,
  238,
  228,
  220,
  212,
  205,
  198,
  192,
  186,
  175,
  165,
  156,
  148,
  141,
  135,
  129,
  124,
  119,
  114,
  110,
  106,
  102,
  99,
  96,
  93,
  87,
  82,
  78,
  74,
  71,
  67,
  65,
  62,
  59,
  57,
  55,
  53,
  51,
  49,
  48,
  46,
  44,
  41,
  39,
  37,
  35,
  34,
  32,
  31,
  30,
  29,
  27,
  27,
  26,
  25,
  24,
  23
}; // weak
char byte_A1000[128] =
{
  '2',
  '1',
  '0',
  '/',
  '.',
  '-',
  ',',
  '+',
  '*',
  '*',
  ')',
  '(',
  '\'',
  '&',
  '%',
  '$',
  '$',
  '#',
  '\"',
  '!',
  '!',
  ' ',
  '\x1F',
  '\x1E',
  '\x1E',
  '\x1D',
  '\x1C',
  '\x1C',
  '\x1B',
  '\x1A',
  '\x1A',
  '\x19',
  '\x19',
  '\x18',
  '\x18',
  '\x17',
  '\x16',
  '\x16',
  '\x15',
  '\x15',
  '\x14',
  '\x14',
  '\x13',
  '\x13',
  '\x13',
  '\x12',
  '\x12',
  '\x11',
  '\x11',
  '\x10',
  '\x10',
  '\x10',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0E',
  '\x0E',
  '\x0E',
  '\r',
  '\r',
  '\r',
  '\f',
  '\f',
  '\f',
  '\v',
  '\v',
  '\v',
  '\v',
  '\n',
  '\n',
  '\n',
  '\n',
  '\t',
  '\t',
  '\t',
  '\t',
  '\t',
  '\b',
  '\b',
  '\b',
  '\b',
  '\b',
  '\a',
  '\a',
  '\a',
  '\a',
  '\a',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\x05',
  '\x05',
  '\x05',
  '\x05',
  '\x05',
  '\x05',
  '\x05',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_A1080[128] =
{
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  'c',
  '+',
  ')',
  '(',
  '\'',
  '&',
  '%',
  '$',
  '#',
  '\"',
  '!',
  ' ',
  '\x1F',
  '\x1E',
  '\x1E',
  '\x1D',
  '\x1C',
  '\x1B',
  '\x1B',
  '\x1A',
  '\x19',
  '\x19',
  '\x18',
  '\x17',
  '\x17',
  '\x16',
  '\x16',
  '\x15',
  '\x15',
  '\x14',
  '\x14',
  '\x13',
  '\x13',
  '\x13',
  '\x12',
  '\x12',
  '\x11',
  '\x11',
  '\x11',
  '\x10',
  '\x10',
  '\x10',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0E',
  '\x0E',
  '\x0E',
  '\x0E',
  '\r',
  '\r',
  '\r',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\v',
  '\v',
  '\v',
  '\v',
  '\n',
  '\n',
  '\n',
  '\n',
  '\t',
  '\t',
  '\t',
  '\t',
  '\t',
  '\b',
  '\b',
  '\b',
  '\b',
  '\b',
  '\a',
  '\a',
  '\a',
  '\a',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\x05',
  '\x05',
  '\x05',
  '\x05',
  '\x05',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
char byte_A1100[128] =
{
  '\x7F',
  'l',
  'b',
  'Z',
  'T',
  'P',
  'K',
  'H',
  'E',
  'B',
  '@',
  '=',
  ';',
  '9',
  '8',
  '6',
  '4',
  '3',
  '1',
  '0',
  '/',
  '-',
  ',',
  '+',
  '*',
  ')',
  '(',
  '\'',
  '&',
  '%',
  '$',
  '$',
  '#',
  '\"',
  '!',
  '!',
  ' ',
  '\x1F',
  '\x1E',
  '\x1E',
  '\x1D',
  '\x1D',
  '\x1C',
  '\x1B',
  '\x1B',
  '\x1A',
  '\x1A',
  '\x19',
  '\x18',
  '\x18',
  '\x17',
  '\x17',
  '\x16',
  '\x16',
  '\x15',
  '\x15',
  '\x15',
  '\x14',
  '\x14',
  '\x13',
  '\x13',
  '\x12',
  '\x12',
  '\x11',
  '\x11',
  '\x11',
  '\x10',
  '\x10',
  '\x0F',
  '\x0F',
  '\x0F',
  '\x0E',
  '\x0E',
  '\x0E',
  '\r',
  '\r',
  '\r',
  '\f',
  '\f',
  '\f',
  '\v',
  '\v',
  '\v',
  '\n',
  '\n',
  '\n',
  '\t',
  '\t',
  '\t',
  '\t',
  '\b',
  '\b',
  '\b',
  '\a',
  '\a',
  '\a',
  '\a',
  '\x06',
  '\x06',
  '\x06',
  '\x06',
  '\x05',
  '\x05',
  '\x05',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x04',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
__int16 word_A1180[] = { -6656 }; // weak
__int16 word_A1182[] = { 1014 }; // weak
__int16 word_A1184[] = { -17364 }; // weak
int dword_A1186 = 0; // weak
int dword_A118A = 109; // weak
char byte_A11F0[28] =
{
  '\x03',
  '\x05',
  '\x7F',
  '\a',
  '4',
  '6',
  '\x0F',
  '\x17',
  '\x1F',
  '\'',
  '/',
  '7',
  '=',
  '?',
  'A',
  'C',
  '\t',
  '\v',
  '\x11',
  '\x13',
  '\x19',
  '\x1B',
  '!',
  '#',
  ')',
  '+',
  '1',
  '3'
}; // weak
__int16 word_A120C[224] =
{
  -19320,
  -23472,
  -27312,
  -31563,
  14394,
  16053,
  29428,
  29348,
  29268,
  29188,
  29188,
  29188,
  17430,
  17686,
  -23408,
  -23152,
  -31702,
  -31446,
  -31702,
  -31446,
  -31703,
  -31447,
  -31703,
  -31447,
  -31704,
  -31448,
  -31704,
  -31448,
  -19320,
  -23464,
  -27304,
  -31563,
  14394,
  16053,
  29316,
  29268,
  29220,
  29220,
  29268,
  29316,
  17480,
  17736,
  -23488,
  -23232,
  -31702,
  -31446,
  -31702,
  -31446,
  -31703,
  -31447,
  -31703,
  -31447,
  -31704,
  -31448,
  -31704,
  -31448,
  -19320,
  -23456,
  -27296,
  -31563,
  14394,
  16053,
  29316,
  29268,
  29220,
  29220,
  29268,
  29316,
  17430,
  17686,
  -23408,
  -23152,
  -31700,
  -31444,
  -31700,
  -31444,
  -31701,
  -31445,
  -31701,
  -31445,
  -31702,
  -31446,
  -31702,
  -31446,
  -19320,
  -23440,
  -27280,
  -31563,
  14394,
  16053,
  29316,
  29268,
  29220,
  29220,
  29268,
  29316,
  17480,
  17736,
  -23488,
  -23232,
  -31701,
  -31445,
  -31701,
  -31445,
  -31702,
  -31446,
  -31702,
  -31446,
  -31703,
  -31447,
  -31703,
  -31447,
  -19320,
  -23440,
  -27280,
  -31563,
  14394,
  16053,
  29268,
  29236,
  29220,
  29268,
  29284,
  29332,
  17603,
  17859,
  -23548,
  -23292,
  -31702,
  -31446,
  -31702,
  -31446,
  -31703,
  -31447,
  -31703,
  -31447,
  -31704,
  -31448,
  -31704,
  -31448,
  -19201,
  -23440,
  -27280,
  -31563,
  14394,
  16053,
  29236,
  29236,
  29236,
  29236,
  29236,
  29236,
  17480,
  17736,
  -23488,
  -23232,
  -31702,
  -31446,
  -31702,
  -31446,
  -31703,
  -31447,
  -31703,
  -31447,
  -31704,
  -31448,
  -31704,
  -31448,
  -19201,
  -23440,
  -27392,
  -31563,
  13114,
  14773,
  29188,
  29188,
  29188,
  29188,
  29188,
  29428,
  17408,
  17664,
  -23297,
  -23041,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -19201,
  -23408,
  -27248,
  -31628,
  13114,
  14773,
  29188,
  29188,
  29188,
  29188,
  29188,
  29428,
  17408,
  17664,
  -23297,
  -23041,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456,
  -31712,
  -31456
}; // weak
__int16 word_A1400[128] =
{
  1023,
  48,
  2047,
  304,
  3071,
  560,
  4095,
  816,
  5119,
  1072,
  6143,
  1328,
  7167,
  1584,
  8191,
  1840,
  9215,
  2096,
  10239,
  2352,
  11263,
  2608,
  12287,
  2864,
  13311,
  3120,
  14335,
  3376,
  15359,
  3632,
  16383,
  3888,
  17407,
  48,
  18431,
  304,
  19455,
  560,
  20479,
  816,
  21503,
  1072,
  22527,
  1328,
  23551,
  1584,
  24575,
  1840,
  25599,
  2096,
  26623,
  2352,
  27647,
  2608,
  28671,
  2864,
  29695,
  3120,
  30719,
  3376,
  31743,
  3632,
  32767,
  3888,
  -31745,
  48,
  -30721,
  304,
  -29697,
  560,
  -28673,
  816,
  -27649,
  1072,
  -26625,
  1328,
  -25601,
  1584,
  -24577,
  1840,
  -23553,
  2096,
  -22529,
  2352,
  -21505,
  2608,
  -20481,
  2864,
  -19457,
  3120,
  -18433,
  3376,
  -17409,
  3632,
  -16385,
  3888,
  -15361,
  48,
  -14337,
  304,
  -13313,
  560,
  -12289,
  816,
  -11265,
  1072,
  -10241,
  1328,
  -9217,
  1584,
  -8193,
  1840,
  -7169,
  2096,
  -6145,
  2352,
  -5121,
  2608,
  -4097,
  2864,
  -3073,
  3120,
  -2049,
  3376,
  -1025,
  3632,
  -1,
  3888
}; // weak
__int16 word_A1500[128] =
{
  3088,
  -31632,
  5374,
  -19320,
  5759,
  -23440,
  6375,
  -31563,
  7022,
  -31702,
  7965,
  -31446,
  3491,
  3964,
  5758,
  29268,
  0,
  -31702,
  1,
  -31446,
  6374,
  2986,
  7021,
  29236,
  8863,
  -31703,
  10054,
  -31447,
  7964,
  1767,
  8862,
  29220,
  3492,
  -31703,
  11305,
  -31447,
  10053,
  2038,
  11304,
  29268,
  14395,
  -31704,
  12815,
  -31448,
  12814,
  3842,
  4929,
  29284,
  16054,
  -31704,
  16057,
  -31448,
  14394,
  4009,
  16053,
  29332,
  16055,
  -31628,
  16058,
  -31371,
  16056,
  17603,
  16059,
  17859,
  0,
  -23548,
  1,
  -23292,
  5151,
  1649,
  5373,
  647,
  16060,
  -6640,
  16072,
  3195,
  794,
  2022,
  16072,
  -30985,
  16064,
  -32226,
  16062,
  -11648,
  16061,
  543,
  16074,
  902,
  16065,
  3075,
  16073,
  798,
  16074,
  -29620,
  16063,
  3157,
  16073,
  -15744,
  16068,
  -17276,
  16072,
  3757,
  16072,
  -11392,
  16066,
  -28802,
  16075,
  537,
  16075,
  -11546,
  16069,
  799,
  16070,
  -15488,
  16067,
  12927,
  16073,
  613,
  16073,
  -31975,
  4930,
  -11290,
  16071,
  13183,
  0,
  -31899,
  5152,
  -27280
}; // weak
__int16 word_A1608 = 30; // weak
__int16 word_A160A = 1568; // weak
int dword_A160C = 262144; // weak
int (__stdcall *dword_A1728)(_DWORD) = NULL; // weak
int (__stdcall *dword_A172C)(_DWORD, _DWORD) = NULL; // weak
int (__stdcall *dword_A1730)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int dword_A1734[64] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
__int16 word_A1834[] = { 0 }; // weak
__int16 word_A1836[63] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
__int16 word_A18B4[] = { 0 }; // weak
char byte_A18B8[] = { '\0' }; // weak
__int16 word_A18BA[] = { 0 }; // weak
__int16 word_A18BC[] = { 0 }; // weak
__int16 word_A18BE[] = { 0 }; // weak
__int16 word_A18C0[] = { 0 }; // weak
__int16 word_A18C2[] = { 0 }; // weak
int dword_A18C4[156] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
__int16 word_A1B34[] = { 0 }; // weak
char byte_A1B36[] = { '\0' }; // weak
char byte_A1B37[] = { '\0' }; // weak
char byte_A1B38[] = { '\0' }; // weak
char byte_A1B39[] = { '\0' }; // weak
char byte_A1B3A[] = { '\0' }; // weak
char byte_A1B3B[] = { '\0' }; // weak
__int16 word_A1B3C[] = { 0 }; // weak
__int16 word_A1B3E[] = { 0 }; // weak
__int16 word_A1B40[] = { 0 }; // weak
__int16 word_A1B42[] = { 0 }; // weak
__int16 word_A1B44[] = { 0 }; // weak
__int16 word_A1B46[] = { 0 }; // weak
__int16 word_A1B48[] = { 0 }; // weak
__int16 word_A1B4A[] = { 0 }; // weak
__int16 word_A1B4C[] = { 0 }; // weak
__int16 word_A1B4E[] = { 0 }; // weak
__int16 word_A1B50[] = { 0 }; // weak
_UNKNOWN unk_A1D34; // weak
__int16 word_A1D44 = 0; // weak
int dword_A1F24 = 0; // weak
int dword_A1F28 = 0; // weak
int dword_A1F2C = 0; // weak
int dword_A1F30 = 0; // weak
int dword_A1F34 = 0; // weak
int dword_A1F38 = 0; // weak
int dword_A1F3C = 0; // weak
_UNKNOWN unk_A1F48; // weak
void *off_A2150 = (void *)0x20000; // weak
_UNKNOWN unk_A22BC; // weak
char *off_A282F = (char*)&byte_90000; // weak
void *off_A2995 = &loc_70000; // weak
_UNKNOWN unk_A2F5F; // weak
_UNKNOWN unk_A59DD; // weak
int (*off_A6368)(_DWORD, _DWORD) = (int (*)(uint32,uint32)) &_no_support_loaded; // weak
__int16 word_A636C = 0; // weak
int dword_A8874 = 16; // weak
//char aColour256[11] = "COLOUR256 "; // weak
//char aSs2[5] = "SS2 "; // weak
//char aColour[8] = "COLOUR "; // weak
//char aLc[4] = "LC "; // weak
//char aBlack[7] = "BLACK "; // weak
//char aBrun[6] = "BRUN "; // weak
//char aCopy[6] = "COPY "; // weak
//char aPstamp[8] = "PSTAMP "; // weak
//char aDataSearchDat[16] = "data/search.dat"; // weak
//char aPaused[8] = "PAUSED!"; // weak
//char aCursorUpMoveFo[31] = "Cursor up       Move forwards."; // weak
//char aCursorUpMoveFo_0[31] = "Cursor up       Move forwards."; // weak
//  char aCursorDownMove[32] = "Cursor down     Move backwards."; // weak
//char aCursorDownMove_0[32] = "Cursor down     Move backwards."; // weak
//char aCursorLeftMove[27] = "Cursor left     Move left."; // weak
//char aCursorRightMov[28] = "Cursor right    Move right."; // weak
//  char aLeftButtonUseS[39] = "Left button     Use spell to the left."; // weak
//char aLeftButtonUseS_0[39] = "Left button     Use spell to the left."; // weak
//  char aRightButtonUse[40] = "Right button    Use spell to the right."; // weak
//char aRightButtonUse_0[40] = "Right button    Use spell to the right."; // weak
//  char a10SelectAssign[40] = "1 - 0           Select assigned spells."; // weak
//char a10SelectAssign_0[40] = "1 - 0           Select assigned spells."; // weak
//char aSpaceRebirth[25] = "Space           Rebirth."; // weak
//char aShiftQExitToDo[29] = "Shift Q         Exit to dos."; // weak
//  char aF5ReflectionsT[36] = "F5              Reflections toggle."; // weak
//char aF5ReflectionsT_0[36] = "F5              Reflections toggle."; // weak
//char aF6SkyToggle[28] = "F6              Sky toggle."; // weak
//  char aF7ShadowsToggl[32] = "F7              Shadows toggle."; // weak
//char aF7ShadowsToggl_0[32] = "F7              Shadows toggle."; // weak
//  char aF8IconsToggle[30] = "F8              Icons toggle."; // weak
//char aF8IconsToggle_0[30] = "F8              Icons toggle."; // weak
//  char aF9SpeedBlurTog[35] = "F9              Speed blur toggle."; // weak
//char aF9SpeedBlurTog_0[35] = "F9              Speed blur toggle."; // weak
//  char aF10StereoModes[37] = "F10             Stereo modes toggle."; // weak
//char aF10StereoModes_0[37] = "F10             Stereo modes toggle."; // weak
//char aReturn[17] = "Return          "; // weak
//  char aLeftAndRightSp[33] = "Left and Right  Spell selection."; // weak
//char aLeftAndRightSp_0[33] = "Left and Right  Spell selection."; // weak
//  char aIfYouAreExperi[57] = "If you are experiencing slowness, try Pressing F5,F6,F7."; // weak
//char aIfYouAreExperi_0[57] = "If you are experiencing slowness, try Pressing F5,F6,F7."; // weak
//  char aMagicCarpetCom[57] = "Magic Carpet comes to you from Bullfrog Productions Ltd."; // weak
//char aMagicCarpetCom_0[57] = "Magic Carpet comes to you from Bullfrog Productions Ltd."; // weak
//  char aAndWillBeRelea[48] = "And will be released on the 15th November 1994."; // weak
//char aAndWillBeRelea_0[48] = "And will be released on the 15th November 1994."; // weak
//  char aCopyright1994B[41] = "Copyright 1994 Bullfrog Productions Ltd."; // weak
//char aCopyright1994B_0[41] = "Copyright 1994 Bullfrog Productions Ltd."; // weak
//char aGoodLuck[11] = "Good Luck!"; // weak
//char aCCarpetCdSaveS[30] = "c:/carpet.cd/save/scanned.rmd"; // weak
//char aDataSmatitleDa[18] = "data/smatitle.dat"; // weak
//char aDataSmatitlePa[18] = "data/smatitle.pal"; // weak
//char aDataPal00Dat[16] = "data/pal0-0.dat"; // weak
//char aLoadAllDataFil[20] = "Load all data files"; // weak
//char aInitialiseColo[25] = "Initialise Colour Lookup"; // weak
//char aDigijoy[8] = "digijoy"; // weak
//char aAnojoy[7] = "anojoy"; // weak
//char aAnojoy4[8] = "anojoy4"; // weak
//char aVfx[4] = "vfx"; // weak
//char aHelp[5] = "help"; // weak
//char aDebug[6] = "debug"; // weak
//char aNetwork[8] = "network"; // weak
//char aCustom[7] = "custom"; // weak
//char aSetsound[9] = "setsound"; // weak
//char aDemo[5] = "demo"; // weak
//char aDetail[7] = "detail"; // weak
//char aCheat[6] = "cheat"; // weak
//char aName[5] = "name"; // weak
//char aLevel[6] = "level"; // weak
//char aMovie[6] = "movie"; // weak
//char aRoll[5] = "roll"; // weak
//char aTime[5] = "time"; // weak
//char aPassword[9] = "password"; // weak
//char aPlayers[8] = "players"; // weak
//char aSession[8] = "session"; // weak
//char byte_A9058 = '\0'; // weak
//char aInitialiseMusi[17] = "Initialise Music"; // weak
//char aInitialiseSoun[17] = "Initialise Sound"; // weak
//char aSoundDisabled[15] = "Sound Disabled"; // weak
//char aCarpetCd_2[11] = "\\carpet.cd"; // weak
//char aSc[4] = "sC:"; // weak
//_UNKNOWN unk_A90B8; // weak
//_UNKNOWN unk_A90BC; // weak
//char aSoundfxNone000[22] = "SOUNDFX = none 0 0 0\n"; // weak
//char aMusicNone38800[22] = "MUSIC = none 388 0 0\n"; // weak
//char aBfMusic[9] = "BF_MUSIC"; // weak
//char aNone_0[5] = "none"; // weak
//char aAdlib[6] = "ADLIB"; // weak
//char aSblast[7] = "SBLAST"; // weak
//char aSbpro[6] = "SBPRO"; // weak
//char aAdlibg[7] = "ADLIBG"; // weak
//char aSb16fm[7] = "SB16FM"; // weak
//char aGravis[7] = "GRAVIS"; // weak
//char aPasfm[6] = "PASFM"; // weak
//char aCompatible[11] = "COMPATIBLE"; // weak
//char aRoland_0[7] = "ROLAND"; // weak
//char aSbawe32_0[8] = "SBAWE32"; // weak
//char aGeneral_0[8] = "GENERAL"; // weak
//char aWblast_0[7] = "WBLAST"; // weak
//char aCarpetCd_3[11] = "\\carpet.cd"; // weak
//_UNKNOWN unk_A91B4; // weak
//_UNKNOWN unk_A91B8; // weak
//char aSoundfxNone000_0[22] = "SOUNDFX = none 0 0 0\n"; // weak
//char aMusicNone38800_0[22] = "MUSIC = none 388 0 0\n"; // weak
//char aBfSound[9] = "BF_SOUND"; // weak
//char aNone_1[5] = "none"; // weak
//char aLevels_0[7] = "levels"; // weak
//char aCarpetCd_0[11] = "\\carpet.cd"; // weak
//char aLc_0[4] = "lC:"; // weak
//char aLevelsLevelsDa[18] = "levels/levels.dat"; // weak
//char aLevelsLevelsTa[18] = "levels/levels.tab"; // weak
//char aMovie_0[6] = "movie"; // weak
//char aSave_0[5] = "save"; // weak
//char aEs_0[4] = "es/"; // weak
//char aTmaps00[9] = "tmaps0-0"; // weak
//char aData_0[5] = "data"; // weak
//char aCreatingSetupD[29] = "Creating Setup Directories.."; // weak
//char aAp[5] = "ap%\n"; // weak
//char aSetupLevels[15] = "Setup levels.."; // weak
//char aSave[5] = "save"; // weak
//char aCarpetCd[11] = "\\carpet.cd"; // weak
//char aData[5] = "data"; // weak
//char aLevels[7] = "levels"; // weak
//char aLoadLevel[11] = "Load Level"; // weak
//char aGenerateMap[13] = "Generate map"; // weak
//char aGenerateFeatur[18] = "Generate features"; // weak
//char aInitialiseMode[18] = "Initialise Models"; // weak
char asc_A95F4[2] = " "; // weak
char aNetbios[8] = "netbios"; // weak
//_UNKNOWN unk_A9608; // weak
//char aDataInstBnk[14] = "data\\inst.bnk"; // weak
//char aDataDrumBnk[14] = "data\\drum.bnk"; // weak
char aSblast_0[7] = "SBLAST"; // weak
char aSbpro_0[6] = "SBPRO"; // weak
char aSb16[5] = "SB16"; // weak
char aAdlibg_0[7] = "ADLIBG"; // weak
char aMicrosoft8[11] = "MICROSOFT8"; // weak
char aMicrosoft16[12] = "MICROSOFT16"; // weak
char aPas8[5] = "PAS8"; // weak
char aPas16[6] = "PAS16"; // weak
char aGravis_0[7] = "GRAVIS"; // weak
char aSoundmasterii[14] = "SOUNDMASTERII"; // weak
char aCompatible_0[11] = "COMPATIBLE"; // weak
char asc_A970B[2] = "l"; // weak
//char aDataTablesDat[16] = "data/tables.dat"; // weak
//char aNone[5] = "NONE"; // weak
char aSbawe32[8] = "SBAWE32"; // weak
char aWblast[7] = "WBLAST"; // weak
char aRoland[7] = "ROLAND"; // weak
char aGeneral[8] = "GENERAL"; // weak

char string_A99A0_A99B8[4] = "SEY"; // weak
//char aCarpetCd_1[11] = "\\carpet.cd"; // weak
//char aC[3] = "C:"; // weak
//char aE388[5] = "e388"; // weak
//char aNewt[5] = "newt"; // weak
//char aDataScreensGco[25] = "data/screens/gconfig.dat"; // weak
//char aDataScreensGco_0[25] = "data\\screens\\gconfig.pal"; // weak
//char aDataScreensMai[26] = "data\\screens\\mainmenu.dat"; // weak
//char aDataScreensMai_0[26] = "data\\screens\\mainmenu.pal"; // weak
//char aIntroScrollDat[17] = "intro\\scroll.dat"; // weak
//char asc_A9ACC[3] = "--"; // weak
//char aIntroIntroDat[16] = "intro\\intro.dat"; // weak
//char aIntroOutroDat[16] = "intro\\outro.dat"; // weak
//char aDataScreensPmu_0[24] = "data\\screens\\pmulti.pal"; // weak
//char aDataScreensPmu_1[24] = "data\\screens\\pmulti.dat"; // weak
//char aIntroLevelw2Da[18] = "intro\\levelw2.dat"; // weak
//char aIntroLevelw1Da[18] = "intro\\levelw1.dat"; // weak
//char aIntroLeveloseD[19] = "intro\\levelose.dat"; // weak
//char aDataScreensPpe[23] = "data/screens/pperf.pal"; // weak
//char aDataScreensPpe_0[23] = "data\\screens\\pperf.dat"; // weak
//char aIntroLogoDat[15] = "intro\\logo.dat"; // weak
//char aIntroIntelDat[16] = "intro\\intel.dat"; // weak
//char aIntroTitle01Da[19] = "intro\\title-01.dat"; // weak
//char aDataScreensLan[26] = "data\\screens\\language.pal"; // weak
//char aDataScreensLan_0[26] = "data\\screens\\language.dat"; // weak
//char aTmaps00_0[9] = "tmaps0-0"; // weak
//char aData_1[5] = "data"; // weak
//char aCarpetCd_4[11] = "\\carpet.cd"; // weak
//char aProductName[13] = "Product name"; // weak
//char aMagicCarpet[13] = "Magic Carpet"; // weak
//char aVersionNumber[15] = "Version number"; // weak
//char aBetaV80[10] = "Beta v8.0"; // weak
//char aVersionDate[13] = "Version date"; // weak
//char aJun051995[12] = "Jun 05 1995"; // weak
//char a162618[9] = "16:26:18"; // weak
//char aProgrammer[11] = "Programmer"; // weak
//char aBullfrogSeanCo[23] = "Bullfrog, Sean Cooper."; // weak
//char aSuppliedTo[12] = "Supplied to"; // weak
//char aPublic[7] = "PUBLIC"; // weak
//char aLevelNumber[13] = "Level Number"; // weak
//char aTransferRate[15] = "Transfer rate:"; // weak
//char aGameturn[10] = "GameTurn:"; // weak
//char aSoundNumber[13] = "Sound Number"; // weak
//char aGameTurn[10] = "Game turn"; // weak
//char aThing[6] = "Thing"; // weak
//char aMemoryUsedFree[19] = "Memory (Used/Free)"; // weak
//void *off_ABCE0_ABCDC = &unk_A7325; // weak
//char aVipport[8] = "VIPPORT"; // weak
//char aVfx1Cyberpuck[15] = "VFX1 CyberPuck"; // weak
//char aVesa[5] = "VESA"; // weak
//char aHmidet386[11] = "hmidet.386"; // weak
//char aHmidrv386[11] = "hmidrv.386"; // weak
char IsTable[256] =
{
0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x0A, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
0x0C, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
0x0C, 0x0C, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x0C, 0x0C, 0x0C, 0x0C,
0x0C, 0x0C, 0x98, 0x98, 0x98, 0x98, 0x98, 0x98, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x0C, 0x0C, 0x0C, 0x0C,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/*
char IsTable[256] =
{
  '\0',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x03',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\x01',
  '\n',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '8',
  '8',
  '8',
  '8',
  '8',
  '8',
  '8',
  '8',
  '8',
  '8',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  'X',
  'X',
  'X',
  'X',
  'X',
  'X',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  'H',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\f',
  '\x98',
  '\x98',
  '\x98',
  '\x98',
  '\x98',
  '\x98',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\x88',
  '\f',
  '\f',
  '\f',
  '\f',
  '\x01',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak*/
char byte_AC16C[8] = { '\x01', '\x02', '\x04', '\b', '\x10', ' ', '@', '\x80' }; // weak

typedef struct _Type_AC1A0 {//size 16
    uint32_t dword_AC1A0 = 0; // weak
    uint16_t word_AC1A4 = 0; // weak
    uint16_t word_AC1A6 = 0; // weak
    uint8_t stub[8];
} Type_AC1A0;
Type_AC1A0 str_AC1A0;
/*
int dword_AC1A0 = 0; // weak
__int16 word_AC1A4 = 0; // weak
__int16 word_AC1A6 = 0; // weak
*/
int dword_AC1B0 = 0; // weak
char byte_AC1B8[256] =
{
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0',
  '\0'
}; // weak
TColor colorBuffer_AC2B8_AC2A8[0x100];
/*unsigned __int8 byte_AC2B8[772] =
{
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u,
  0u
}; // weak*/
int dword_AC5BC = 0; // weak
FILE* file_AC5C0 = 0; // weak
int (*dword_AC5C4)(_DWORD) = NULL; // weak
typedef struct _Type_AC5C8 {
    uint8_t unk_AC5C8[6]; // weak
    __int16 word_AC5CE = 0; // weak
    uint16_t word_AC5D0 = 0; // weak
    uint16_t word_AC5D2 = 0; // weak

} Type_AC5C8;
Type_AC5C8 str_AC5C8;
/*
_UNKNOWN unk_AC5C8; // weak
__int16 word_AC5CE = 0; // weak
__int16 word_AC5D0 = 0; // weak
__int16 word_AC5D2 = 0; // weak*/

int dword_AC5D4_AC5C4 = 0; // weak
__int16 word_AC5DA = 0; // weak
__int16 word_AC5DC = 0; // weak
__int16 word_AC5DE = 0; // weak
uint16 word_AC5E0_AC5D0x = 0; // weak

Type_AC5F0 dword_AC5F0x[100];

/*
int dword_AC5F0[] = { 0 }; // weak
int dword_AC5F4[] = { 0 }; // weak
int dword_AC5F8[] = { 0 }; // weak
int dword_AC5FC[] = { 0 }; // weak
int dword_AC600[] = { 0 }; // weak
int dword_AC604[595] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak*/
int dword_ACF50 = 0; // weak
char byte_ACFF0 = '\0'; // weak
char byte_ACFF1 = '\0'; // weak
char byte_ACFF2 = '\0'; // weak

Type_AD008_ACFF8 dword_AD008_ACFF8y[32]; // weak //maybe fix size 58 or 59
//__int16 word_AD00C_ACFFC[173]; // weak
char byte_AD167_AD157[4096]; // weak
//char byte_AD168[9999]; // weak +1
//char byte_AD177; // weak +16
//char byte_AD258; // weak +241
//char byte_AE068; // weak +3841
//char byte_AE077; // weak +3856
uint8 byte_AE167_AE157; // weak
char* dword_AE238_AE228[80]; // weak
/*int dword_AE27C; // weak //17
int dword_AE280; // weak//18
int dword_AE294; // weak//23
int dword_AE298; // weak//24
int dword_AE29C; // weak//25
int dword_AE2A0; // weak//26
int dword_AE2C0; // weak//34
int dword_AE2C4; // weak//35
int dword_AE2C8; // weak//36
int dword_AE2CC; // weak//37
int dword_AE2D0; // weak//38
int dword_AE2D4; // weak//39
int dword_AE2D8; // weak//40
int dword_AE2DC; // weak//41
int dword_AE2E0; // weak//42
int dword_AE2E4; // weak//43
int dword_AE2E8; // weak//44
int dword_AE2EC; // weak//45
int dword_AE2F0; // weak//46
int dword_AE2FC; // weak//49
int dword_AE300; // weak//50
int dword_AE304; // weak//51
int dword_AE310; // weak//54
char* dword_AE324; // weak//59
int dword_AE328; // weak//60
int dword_AE32C; // weak//61
int dword_AE330; // weak //62
int dword_AE334; // weak
int dword_AE338; // weak
int dword_AE33C; // weak
char* dword_AE340; // weak
char* dword_AE344; // weak
char* dword_AE348; // weak
char* dword_AE34C; // weak
char* dword_AE35C; // weak
char* dword_AE360; // weak
int dword_AE364; // weak
int dword_AE368; // weak
int dword_AE36C; // weak
int dword_AE370; // weak
char* dword_AE374; // weak*/
TypeTab* begFont0Tab_AE3B8_AE3A8_26C3B8_26C3A8; // weak
uint8_t* begSky_AE3D8_AE3C8_26C3D8_26C3C8; // weak
Type_AE3E0* dword_AE3E0_AE3D0; // weak struct 6? 0-u16? 2-u32*(28*0x211u)
Type_sub168* dword_AE3EC_AE3DC; // weak 4-u32 8-u32 12-u16 Type_168
uint8_t* begBlkDat_AE3F0_26C3F0_26C3E0; // weak
uint8_t* begSearch_AE3F4_26C3F4_26C3E4; // weak
uint8_t* begBscreen_AE3FC_AE3EC_26C3FC_26C3EC; // weak
//int dword_AE400_AE3F0(); // weak
uint8* blurBuffer_AE404_AE3F4; // weak
//int dword_AE408_AE3F8(); // weak
int dword_AE410; // weak
TColor* begPalMem_AE418_AE408_26C418_26C408; // weak
uint8_t* begTextDat_AE41C_AE40C_26C41C_26C40C; // weak
uint8_t* begPalData_AE424_AE414_26C424_26C414; // weak
TColor* begPalDat_AE428_AE418_26C428_26C418; // weak
TypeTab* begSprTab_AE42C_AE41C_26C42C_26C41C; // weak
TypeTab* begBuildTab_AE440_AE430_26C440_26C430; // weak
TypeTab* dword_AE44C_AE43C; // weak
TypeTab* begPointersTab_AE450_AE440_26C450_26C440; // weak
axis_3d word_AE454_AE444; // weak
//__int16 word_AE454_AE444.y; // weak
//__int16 word_AE454_AE444.z; // weak
char origDebug_AE45A_AE44A; // weak
Type_dword_96884 byte_AE460; // weak
//char byte_AE466; // weak
//_UNKNOWN unk_AE89E; // weak
//_UNKNOWN unk_B0000; // weak
_DWORD dword_B3288; // weak
int dword_B3294; // weak
__int16 word_B329C; // weak
char byte_B32A0_B3290[256]; // weak
char byte_B33A0_B3390[256]; // weak
char byte_B34A0_B3490[256]; // weak
char byte_B35A0_B3590[256]; // weak
char byte_B36A0_B3690[256]; // weak
char byte_B37A0_B3790[256]; // weak
char byte_B38A0_B3890[256]; // weak
char byte_B39A0_B3990[256]; // weak
uint16 unk_B3AA0_B3A90x[2][256]; // weak
//uint16 unk_B3CA0_B3C90[256]; // weak
uint32 dword_B3EA0_B3E90x[4096][3]; // for 4K
int dword_B5CA0_B5C90; // weak
int dword_B5CA4_B5C94; // weak
int scaledSprX_B5CA8_B5C98; // weak
int dword_B5CAC_B5C9C; // weak
uint8* sprData_B5CB0_B5CA0; // weak
int yRot_B5CB4_B5CA4; // weak
int xRot_B5CB8_B5CA8; // weak
int signedSprX_B5CBC_B5CAC; // weak
int dword_B5CC0_B5CB0; // weak
int dword_B5CC4_B5CB4; // weak
int scaledSprY_B5CC8_B5CB8; // weak
int sprY_B5CCC_B5CCC; // weak
int sprX_B5CD0_B5CC0; // weak
int sin_B5CD4_B5CC4; // weak
int begBscreenAdress_B5CD8_B5CC8; // weak
int sin_B5CDC_B5CCC; // weak
int cosRoll_B5CE0_B5CD0; // weak
int heightViewPort_B5CE4_B5CD4; // weak
int cos_B5CE8_B5CD8; // weak
int dword_B5CEC_B5CDC; // weak
int dword_B5CF0_B5CE0; // weak
int sinDivCos_B5CF4_B5CE4; // weak
int posZ_B5CF8_B5CE8; // weak
int dword_B5CFC_B5CEC; // weak
int dword_B5D00_B5CF0; // weak
int dword_B5D04_B5CF4; // weak
int dword_B5D08_B5CF8; // weak
int dword_B5D0C_B5CFC; // weak
int cos_B5D10_B5D00; // weak
int fowDist_B5D14_B5D04; // weak
int sinRoll_B5D18_B5D08; // weak
int dword_B5D1C_B5D0C; // weak
int widthPlusHeightVP_B5D20_B5D10; // weak
int dword_B5D24_B5D14; // weak
int roll_B5D28_B5D18; // weak
int hwViewPort_B5D2C_B5D1C; // weak
int whViewPortA_B5D30_B5D20; // weak
int whViewPortB_B5D34_B5D24; // weak
__int16 yaw_B5D38_B5D28; // weak
__int16 posY_B5D3A_B5D2A; // weak
__int16 posX_B5D3C_B5D2C; // weak
char byte_B5D3E_B5D2E; // weak
char byte_B5D3F_B5D2F; // weak
char byte_B5D40x[7*7*7*7][2]; // weak//273d40
char byte_B5D41[4812]; // weak
char byte_B700D[9999]; // weak
char byte_B700E[9999]; // weak
char byte_B700F[9999]; // weak
uint8_t byte_B7010[256 * 3]; // weak
//char byte_B7011[767]; // weak
int dword_B7310; // weak
__int16 word_B7314; // weak
__int16 word_B7316; // weak
__int16 word_B7318; // weak
int keysVect2_B7320; // weak
__int16 keysVect1_B7324; // weak
Type_160 unk_B7330x[30]; // fix size of array
int dword_B76F0_B76E0; // weak
char byte_B7700_B76F0; // weak
char byte_B7701; // weak
__int16 word_B7702_B76F2; // weak
__int16 word_B7704_B76F4; // weak
__int16 word_B7706_B76F6; // weak
__int16 word_B7708_B76F8; // weak
__int16 word_B770A_B76FA; // weak
__int16 word_B770C_B76FC; // weak
__int16 word_B770E_B76FE; // weak
__int16 word_B7710_B7700; // weak
__int16 word_B7712_B7702; // weak
__int16 word_B7714_B7704; // weak
__int16 word_B7716; // weak
__int16 word_B7718; // weak
__int16 word_B771A; // weak
__int16 word_B771C; // weak
__int16 word_B771E; // weak
__int16 word_B7720; // weak
__int16 word_B7722; // weak
__int16 word_B7724; // weak
__int16 word_B7726; // weak
__int16 word_B7728; // weak
char byte_B772A; // weak

typedef struct {
    char fog_B7934_B7924[0x4000]; // fix this size / find DOSBOX init !!! //0x14600
    char byte_BB934_BB924[0x10000]; // weak
    char byte_CB934_CB924[0x300]; // weak
    uint8 byte_CBC34_CBC24[0x300]; // weak
} TypeStrPal;
TypeStrPal strPal;

_UNKNOWN unk_CBF34_CBF24; // weak
_UNKNOWN unk_CBF40; // weak
int dword_CBF44; // weak
__int16 word_CBF48; // weak
int dword_CBF60; // weak
int dword_CBF64; // weak
int dword_CBF68; // weak
int dword_CBF6C; // weak
int dword_CBF70; // weak
_UNKNOWN unk_CBF74; // weak
int dword_CBFD8; // weak
int dword_CBFDC; // weak
int dword_CBFE2; // weak
__int16 word_CBFE6; // weak
int dword_CBFE8; // weak
__int16 word_CBFEC; // weak
char byte_CBFEE; // weak
char byte_CBFEF; // weak
__int16 word_CBFF0[9999]; // weak
__int16 word_CBFF2[63]; // weak
__int16 word_CC070[9999]; // weak
char byte_CC0C2[29]; // weak
//char byte_CC0DF[9999]; // weak //
//char byte_CC0E0[70]; // weak
int dword_CC126; // weak
int dword_CC130; // weak
int dword_CC134; // weak
int dword_CC138; // weak
int dword_CC13C; // weak
int dword_CC140; // weak
int dword_CC144; // weak
int dword_CC148; // weak
int dword_CC14C; // weak
int dword_CC150; // weak
int dword_CC154; // weak
char unk_CC158x[88]; // weak
int dword_CC1BC; // weak
int dword_CC1C0; // weak
__int16 word_CC1C4; // weak
__int16 word_CC1C6; // weak
//char byte_CC1DF[9999]; // weak
uint8_t mapTerrainType_CC1E0_CC1D0[0x10000]; // 0x28A1E0_
uint8_t mapHeightmap_DC1E0_DC1D0[0x10000]; // weak
uint8_t mapShading_EC1E0_EC1D0[0x10000]; // weak
//_UNKNOWN unk_F4240; // weak
uint8_t mapAngle_FC1E0_FC1D0[0x10000]; // weak
//_UNKNOWN unk_100000; // weak
int16_t mapEntityIndex_10C1E0_10C1D0[0x10000]; // weak
//_UNKNOWN unk_123333; // weak
//_UNKNOWN unk_1234DC; // weak

uint16 pseudoRand_12C1E0_12C1D0; // weak
__int16 word_12C1F0[256]; // weak
__int16 word_12C1F2[959]; // weak
int array_12C970[6]; // weak
//int dword_12C974; // weak
//int dword_12C978; // weak
//int dword_12C97C; // weak
//int dword_12C980; // weak
//int dword_12C984; // weak
char string_12C988[0x18]; // weak
char string_12C9A0_12C990[32]; // weak
char string_12C9C0_12C9B0[32]; // weak
char string_12C9E0_12C9D0[32]; // weak
char string_12CA00_12C9F0[32]; // weak
char string_12CA20_12CA10[64]; // weak
char string_12CA60[0x18]; // weak
int dword_12CA78; // weak
bool bool_12CA7C_12CA6C; // weak
char string_12CA80_12CA70[10]; // weak
char string_12CA8A_12CA7A[10]; // weak
char string_12CA94_12CA84[10]; // weak
char string_12CA9E_12CA8E[10]; // weak
char string_12CAA8_12CA98[10]; // weak
char string_12CAB2_12CAA2[10]; // weak
char string_12CABC_12CAAC[10]; // weak
char string_12CAC6_12CAB6[10]; // weak
char string_12CAD0_12CAC0[10]; // weak
//int dword_12CADC; // weak
__int16 mouseX_12CAE0_12CAD0; // weak
__int16 mouseY_12CAE2_12CAD2; // weak
uint8_t byte_12CAE4_12CAD4; // weak
uint8_t byte_12CAE5_12CAD5; // weak
uint8_t byte_12CAE6_12CAD6; // weak
uint8_t byte_12CAE7_12CAD7; // weak
char byte_12CAE8_12CAD8; // weak
//int begSptrsTab_12CAEC_2EAAEC_2EAADC; // weak
//int text_12CAF0_2EAAF0_2EAAE0; // weak
//int begSptrsDat_12CB64_2EAB64_2EAAE4; // weak
//int begGcSprTab_12CAF8_2EAAF8_2EAAE8; // weak
//int text_12CAFC_2EAAFC_2EAAEC; // weak
//int begGcSprDat_12CB00_2EAB00_2EAAF0; // weak
//int begMmSprTab_12CB04_2EAB04_2EAAF4; // weak
//int text_12CB08_2EAB08_2EAAF8; // weak
//int text_12CB08_2EAB08_2EAAF8; // weak
//int begMmSprDat_12CB0C_2EAB0C_2EAAFC; // weak
//int begPMultSprTab_12CB10_2EAB10_2EAB00; // weak
//int text_12CB14_2EAB14; // weak
//int begPMultSprDat_12CB18_2EAB18_2EAB08; // weak
//_DWORD begSFont0Tab_12CB28_2EAB28_2EAB18; // weak
//_DWORD begSFont1Tab_12CB34_2EAB34_2EAB24; // weak
//int begSFont2Tab_12CB40_2EAB40_2EAB30; // weak
//int text_12CB44_2EAB44; // weak
//int begSFont2Dat_12CB48_2EAB48_2EAB38; // weak
//int begLangSprTab_12CB58_2EAB58_2EAB48; // weak
//uint8_t endLangSprTab_12CB5C_2EAB5C_2EAB4C; // weak
//int begLangSprDat_12CB60_2EAB60_2EAB50; // weak
//int begTitle02Dat_12CB64_2EAB64_2EAB54; // weak
uint8_t* dword_12CB68_12CB58; // weak
uint8_t* dword_12CB6C_12CB5C; // weak
__int16 word_12CB70_12CB60; // weak
//int begGlobeDat_12CB72_2EAB72_2EAB62; // weak
uint8_t* dword_12CB76_12CB66; // weak
uint8_t* dword_12CB7A_12CB6A; // weak
__int16 word_12CB7E_12CB6E; // weak
//int begTimerDat_12CB80_2EAB80_2EAB70; // weak
uint8_t* dword_12CB84_12CB74; // weak
uint8_t* dword_12CB88_12CB78; // weak
__int16 word_12CB8C_12CB7C; // weak
//TColor begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C[256]; // weak
//int begMmMaskDat_12CBA0_2EABA0_2EAB90; // weak
//int begScreenBackup_12CBA4_2EABA4_2EAB94; // weak
//int begScreenBackup2_12CBA8_2EABA8_2EAB98; // weak
//int begBrightTable_12CBAC_2EABAC_2EAB9C; // weak
int dword_12CBB0_12CBA0; // weak
int dword_12CBB4; // weak
int dword_12CBB8; // weak
__int16 word_12CBBC_12CBAC; // weak
__int16 word_12CBBE_12CBAE; // weak
__int16 word_12CBC0_12CBB0; // weak
__int16 word_12CBC2_12CBB2; // weak
__int16 word_12CBC4; // weak
char byte_12CBC6_12CBB6; // weak
char settingPage_12CBC9_12CBB9; // weak
char byte_12CBCA_12CBBA; // weak
char byte_12CBCB; // weak //2eabcb
char byte_12CBCC_12CBBC; // weak
char byte_12CBCD_12CBBD; // weak
char mainMenuSelector_12CBCE_12CBBE; // 2EABCE_
uint8_t byte_12CBCF_12CBBF; // weak
char byte_12CBD0_12CBC0; // weak
char byte_12CBD1_12CBC1; // weak
char byte_12CBD2_12CBC2; // weak
char byte_12CBD3_12CBC3; // weak
char byte_12CBD4_12CBC4; // weak
char byte_12CBD5_12CBC5; // weak
char byte_12CBD6_12CBC6; // weak
__int16 word_12CBD8; // weak
__int16 word_12CBDA; // weak
char byte_12CBDC; // weak
char byte_12CC20[9999]; // weak
__int16 word_12CC40[9999]; // weak
__int16 word_12CC80[9999]; // weak
char byte_12CCC0[9999]; // weak
__int16 word_12CCE0[32]; // weak
__int16 word_12CD20[9999]; // weak
__int16 word_12CD22[9999]; // weak
__int16 word_12CD24[9999]; // weak
__int16 word_12CD26[9999]; // weak
__int16 word_12CD28[236]; // weak
int dword_12CF00_12CEF0[529]; // weak
//int begTmapsTab_12D744_12D734_2EB744_2EB734x; // weak //2EB744_
Type_sub168_2* dword_12D748_12D738[529]; // weak
Type_sub168_2* dword_12DF8C_12DF7C[529]; // weak
char byte_12E7D0_12E7C0[529]; // weak
char byte_12E9E1_12E9D1[529]; // weak
int dword_12EC00; // weak
__int16 word_12EC04; // weak
char byte_12EC10_12EC00[9999]; // weak
char byte_12EC11_12EC01[255]; // weak
char byte_12ED10_12ED00[256]; // weak
int dword_12EE10_12EE00; // weak
int dword_12EE14_12EE04; // weak
int32_t dword_12EE18_12EE08; // weak
int dword_12EE1C_12EE0; // weak
int dword_12EE24_12EE14; // weak
int dword_12EE28_12EE18; // weak
int dword_12EE2C_12EE1C; // weak
char* dword_12EE30_12EE20; // weak
int dword_12EE38_12EE28; // weak
int dword_12EE3C_12EE2C; // weak
int dword_12EE40_12EE30; // weak
char byte_12EE44_12EE34[6]; // weak
int dword_12EE68_12EE58; // weak
char byte_12EE6E_12EE5E[6]; // weak
int dword_12EE94_12EE84; // weak
int dword_12EE98_12EE88; // weak
__int16 word_12EE9C_12EE8C[2]; // weak
//__int16 word_12EE9E; // weak
//__int16 word_12EEA0; // weak
_UNKNOWN unk_12EEA4; // weak
int dword_12EEB4; // weak
int dword_12EEB8; // weak
int dword_12EEBC; // weak
int dword_12EEC0; // weak
__int16 word_12EEC6; // weak
int16_t word_12EED6_12EEC6; // weak
int16_t word_12EED8_12EEC8; // weak
typedef struct {
    int16_t word_0;
    int16_t word_2;
    int16_t word_4;
    int8_t byte_6;
} Type_str_12EEDA_12EECA;
Type_str_12EEDA_12EECA str_12EEDA_12EECA; // weak
//__int16 word_12EEDC; // weak
//__int16 word_12EEDE; // weak
//char byte_12EEE0; // weak
char byte_12EEE1_12EED1; // weak
//char pressedKeys_12EEF0_12EEE0[128]; // weak
/*
char byte_12EEF1_12EEE1; // weak
char byte_12EEFF; // weak
char byte_12EF04; // weak
char byte_12EF0C; // weak
char byte_12EF0D; // weak
char byte_12EF16; // weak
char byte_12EF1A; // weak
char byte_12EF26; // weak
char byte_12EF28; // weak
char byte_12EF29; // weak
char byte_12EF2B; // weak
char byte_12EF37_12EF27; // weak
char byte_12EF38_12EF28; // weak
char byte_12EF39_12EF29; // weak
char byte_12EF3B_12EF2B; // weak
char byte_12EF3D; // weak
char byte_12EF3F; // weak
char byte_12EF40_12EF30; // weak
char byte_12EF41; // weak
*/
//char lastPressedKey_12EF70_12EF60; // 2ecf70
char byte_12EF71; // weak
_UNKNOWN unk_12EF7E; // weak
int mouseXY_12EF80_12EF70; // weak
_UNKNOWN unk_12EF84_12EF74; // weak
__int16 word_12EF86_12EF76; // weak
int dword_12EF88_12EF78; // weak
int mouseByteIndex2_12EF8C_12EF7C; // weak
Type_9AD90 mouseXY2_12EF90_12EF80; // weak
Type_9AD90 dword_12EF94_12EF84; // weak
int dword_12EF98_12EF88; // weak
int dword_12EF9C_12EF8C; // weak
int dword_12EFA0_12EF90; // weak
int dword_12EFA4_12EF94; // weak
int dword_12EFA8_12EF98; // weak
int dword_12EFAC_12EF9C; // weak
TypeTab* dword_12EFB4; // weak
__int16 word_12EFC4_12EFB4; // weak
__int16 word_12EFC6_12EFB6; // weak
uint8* dword_12EFC8_12EFB8; // weak
Type_9AD90 dword_12EFCC_12EFBC; // weak
__int16 word_12EFD0; // weak
__int16 word_12EFD2_12EFC2; // weak
__int16 word_12EFD4_12EFC4; // weak
__int16 word_12EFDA_12EFCA; // weak
__int16 mouseRightButton_12EFDC_12EFCC; // weak
__int16 mouseLeftButton_12EFDE_12EFCE; // weak
__int16 word_12EFE0_12EFD0; // weak
__int16 mouseRightButton2_12EFE2_12EFD2; // weak
__int16 mouseLeftButton2_12EFE4_12EFD4; // weak
int scrWidth_12EFF0_12EFE0; // weak //2ECFF0_
//uint8_t preReadBuffer_12EFF4[640000]; // weak
//uint8_t* begWscreen_2ECFF4_2ECFE4= preReadBuffer_12EFF4; // weak
int scrHeight_12EFF8_12EFE8; // weak
int dword_12EFFC; // weak
int dword_12F000_12EFF0; // weak
int dword_12F004; // weak
int viewportBegX_12F008_12EFF8; // weak
int dword_12F00C; // weak
int dword_12F010; // weak
int dword_12F014; // weak
int viewportBegY_12F018_12F008; // weak
int dword_12F01C; // weak
int dword_12F020; // weak
int dword_12F024_12F014; // weak
int dword_12F028_12F018; // weak
__int16 word_12F02C; // weak
__int16 typeResolution_12F02E_12F01E; // weak
int dword_12F030; // weak
__int16 word_12F034; // weak
int dword_12F038; // weak
__int16 word_12F03C; // weak
int dword_12F040; // weak
int dword_12F074; // weak
int dword_12F07A; // weak
vesa_str* dword_12F080_12F070x; // weak
uint16 videoModes_12F080[0x38] = {
0x0100,0x0101,0x0102,0x0103,0x0104,0x0105,0x0106,0x0107,
0x0108,0x0109,0x010A,0x010B,0x010C,0x010D,0x010E,0x0110,
0x0111,0x0113,0x0114,0x0116,0x0117,0x010F,0x0112,0x0115,
0x0210,0x0211,0x0212,0x0120,0x0151,0x0153,0x015C,0x0159,
0x015D,0x015A,0x0160,0x0161,0x0162,0x0165,0x0136,0x0170,
0x0172,0x0175,0x0190,0x0201,0x0202,0x0203,0x0204,0x0205,
0x0206,0x0207,0x0208,0x0209,0x020A,0x0213,0x0239,0xFFFF };
__int16 word_12F084; // weak
TColor byte_12F090_12F080[256]; // weak//2ED090
TColor byte_12F390_12F380[256]; // weak//2ED390
//_UNKNOWN unk_12F68E; // weak //2ED68E
__int16 word_12F690_12F680; // weak
int dword_12F6A0_12F690[9999]; // weak  //fix IT - dos memory management !!!!
int dword_12F6A4_12F694[9999]; // weak //fix IT - dos memory management !!!!
int dword_12F6A8_12F698[9999]; // weak //2ed6a8_ //fix IT - dos memory management !!!!
int dword_1302A0_130290; // weak
int dword_1302A4; // weak
int dword_1302A8_130298; // weak
int dword_1302AC_13029C; // weak
char byte_1302B0_1302A0[9999]; // weak
char byte_1302B1_1302A1[4591]; // weak
int dword_1314A0; // weak
int dword_1314A4; // weak
int dword_1314A8; // weak
int freeMem_1314AC_13149C; // weak
int dword_1314B0; // weak
int dword_1314C8; // weak
__int16 word_1314CC[9999]; // weak
int dword_1314CE; // weak
__int16 word_1314D2; // weak
int dword_1314D4; // weak
__int16 word_1314D8; // weak
int dword_1314DA; // weak
__int16 word_1314DE; // weak
int dword_1314E0; // weak
__int16 word_1314E4; // weak
int dword_1314E6; // weak
__int16 word_1314EA[9999]; // weak
int dword_1314EC; // weak
__int16 word_1314F0; // weak
int dword_1314F2; // weak
__int16 word_1314F6; // weak
int dword_1314F8; // weak
__int16 word_1314FC; // weak
int dword_1314FE; // weak
__int16 word_131502; // weak
int dword_131504; // weak
__int16 word_131508[9999]; // weak
int dword_13150A; // weak
__int16 word_13150E; // weak
int dword_131510; // weak
__int16 word_131514; // weak
int dword_131516; // weak
__int16 word_13151A; // weak
int dword_13151C; // weak
__int16 word_131520; // weak
int dword_131522; // weak
__int16 word_131526[9999]; // weak
int dword_131528; // weak
__int16 word_13152C; // weak
int dword_13152E; // weak
__int16 word_131532; // weak
int dword_131534; // weak
__int16 word_131538; // weak
int dword_13153A; // weak
__int16 word_13153E; // weak
_UNKNOWN unk_131540; // weak
int dword_131564; // weak
int dword_131568; // weak
char byte_13156D; // weak
int dword_131570; // weak
int dword_131574; // weak
int dword_131578; // weak
int dword_131580; // weak
int dword_131584; // weak
_UNKNOWN unk_131588; // weak
int dword_1315A8; // weak
int dword_1315B4; // weak
__int16 word_1315B8; // weak
int dword_1315BC; // weak
__int16 word_1315C0; // weak
int dword_1315C4; // weak
__int16 word_1315C8; // weak
int dword_1315CC; // weak
__int16 word_1315D0; // weak
int dword_1315E4[9999]; // weak
int dword_1315E8; // weak
__int16 word_1315EC; // weak
int dword_1315F0[9999]; // weak
int dword_1315F4[9999]; // weak
int dword_1315F8[9999]; // weak
int dword_1315FC[9999]; // weak
int dword_131600; // weak
__int16 word_131604; // weak
int dword_131608; // weak
__int16 word_13160C; // weak
int dword_131614; // weak
__int16 word_131618; // weak
int dword_131620[65]; // weak
char byte_131724[6]; // weak
int dword_131AEC; // weak
_UNKNOWN unk_131B80; // weak
int dword_131BA4; // weak
int dword_131BA8; // weak
char byte_131BAD; // weak
_UNKNOWN unk_131BB0; // weak
int dword_131BD0; // weak
_UNKNOWN unk_131BDC; // weak
_UNKNOWN unk_131BE0; // weak

//---------------- fixproc
int GetVar4_369D0_36D90(Type_sub168* a1);
int nullsub_3(_DWORD a) { return 0; }; // weak
int nullsub_19(_DWORD a) { return 0; }; // weak
//_DWORD dos_getdiskfree(_DWORD a, uint32 b) { return 0; };// weak
_DWORD dos_getdrive(_DWORD a) { return 0; };// weak
_DWORD dos_getvect(_DWORD a) { return 0; };// weak
_DWORD dos_setvect(_DWORD a, _DWORD b, _DWORD c) { return 0; };// weak
_DWORD expand(_DWORD a, _DWORD b) { return 0; };// weak
int gettextposition(_DWORD a) { return 0; };// weak
_DWORD int386(_DWORD a, _DWORD b, _DWORD c) { return 0; };// weak
_DWORD int386x(_DWORD a, _DWORD b, _DWORD c, _DWORD d) { return 0; };// weak
void JUMPOUT(int adress) { allert_error(); };
//void memset32(char* v32, int v35, int v25) {};

int nullsub_11(_DWORD a) { return 0; }; // weak
int nullsub_1(_DWORD a, _DWORD b) { return 0; }; // weak
int nullsub_2(void) { return 0; }; // weak
_DWORD outtext(char* text)
{
    printf(text);
    return 0;
};
//void qmemcpy(int a, int b, char c) {};
_DWORD segread(_DWORD a) { return 0; };// weak
_DWORD settextposition(_DWORD a, _DWORD b) { return 0; };// weak
//void sub_111B0(int a1, int a2) {};
//void sub_193EE(__int16 a1) {};
//_WORD * sub_27690(_WORD *result, int a2) { return 0; };
//void sub_10000() {}; // weak

//unsigned __int16 sub_2DCB0_2DCF0(int a1, int a2) { return 0; };
//unsigned __int16 DrawSprite_2F170_2F1B0(int a1, int a2) { return 0; };
//unsigned __int16 DrawSprite_2FC50_2FC90(int a1, int a2) { return 0; };
//unsigned __int16 sub_32B90_sub_32F80(int a1, int a2) { return 0; };
//char sub_33800_33BF0(char a1, char a2, unsigned __int16 a3, unsigned __int8 a4) { return 0; };
//__int16 ProcessCommandLine_34DD0_35190(__int16 a1, unsigned __int16 a2, int a3) { return 0; };
//char sub_35F30_362F0(int a1, char a2, char a3, int a4, int a5, unsigned __int8 a6) { return 0; };
//int sub_38D09() { return 0; };// weak
//unsigned __int8 sub_3F76D_3FAAD(int a1) { return 0; };
//char InitAnojoy_3F820_sub_3FB60(__int16 a1, __int16 a2, int a3, int a4, int a5, char a6) { return 0; };
//char sub_3FCA0_3FFE0(int a1, __int16 a2, __int16 a3, __int16 a4, char a5, __int16 a6, __int16 a7, __int16 a8, __int16 a9, __int16 a10, __int16 a11) { return 0; };
//__int16 sub_41DD0_42110(__int16 result, int a2) { return 0; };
//char sub_43B20_sub_43E60(int a1, unsigned int a2) { return 0; };
//void sub_4AB20_4AE60(__int16 a1, const char *a2, const char *a3, __int16 a4, __int16 a5) {};
//void sub_4AC70_4AFB0(const char *a1, const char *a2) {};
//int sub_4CC00() { return 0; };// weak	
//void sub_4EFC0_4F300(__int16 a1) {};
//void sub_4F3F0_4F730(__int16 a1) {};
//char sub_50770_50AB0(__int16 a1, __int16 a2, __int16 a3, __int16 a4) { return 0; };
//void sub_60D50_61260(__int16 a1, int a2, int a3, char *a4, unsigned __int8 a5, char a6) {};
//void sub_60D65_61275(__int16 a1, int a2, int a3, char *a4, unsigned __int8 a5, char a6) {};
//char sub_62CF4_63204(int *a1) { return 0; };
//__int16 sub_62CFD_6320D(__int16 *a1, int a2) { return 0; };
//__int16 sub_62D40_63250(unsigned __int8 a1, int a2) { return 0; };
//char sub_62DC3_632D3(int a1) { return 0; };
//__int16 sub_677E3_67CF3(int a1, void (*a2)(_DWORD), char a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10) { return 0; };
//void sub_6C05C_6C56C(_BYTE *a1, int a2, int *a3) {};
//void sub_6C224_6C734(_BYTE *a1, int a2, int *a3, _BYTE **a4) {};
//__int16 sub_72652_72B62(__int16 a1, int a2, int a3, __int16 a4) { return 0; };
//__int16 sub_726E7_72BF7(__int16 a1, int a2, int a3, __int16 a4) { return 0; };
//_DWORD StrToInt(_DWORD a) { return 0; };// weak

void _disable() {};
void _enable() {};
int _FDFS(void) { return 0; };// weak	
int __readgsbyte(int a) { return 0; };
int __readgsdword(int a) { return 0; };
int __readgsword(int a) { return 0; };
//int __ROL2__(int a, int b) { return 0; };
//int __ROL4__(int a, int b) { return 0; };
//int __ROR2__(int a, int b) { return 0; };
void __writegsbyte(int a, int b) {};
void __writegsdword(int a, int b) {};
void __writegsword(int a, int b) {};

//int __readeflags() { return 0; };
void __writeeflags(int a) {};
//_DWORD access(_DWORD a, _DWORD b) { return 0; };// weak
//_DWORD gets(_DWORD a) { return 0; };// weak
//_DWORD mkdir(_DWORD a) { return 0; };// weak
//void __outbyte(int a, int b) {};
_DWORD outp(_DWORD a, char b) { return 0; };// weak
//_DWORD read(_DWORD a, _DWORD b, _DWORD c) { return 0; };// weak
//_DWORD close(_DWORD a) { return 0; };// weak
//_DWORD creat(_DWORD a, _DWORD b) { return 0; };// weak
_DWORD setmode(_DWORD a, _DWORD b) { return 0; };// weak
//_DWORD sopen(_DWORD a, _DWORD b, char c) { return 0; };
//_DWORD lseek(_DWORD a, _DWORD b, char c) { return 0; };// weak
_DWORD open(_DWORD a, _DWORD b) { return 0; };
//int __inbyte(int a) { return 0; };
//_DWORD write(_DWORD a, _DWORD b, _DWORD c) { return 0; };// weak
void __inbytestring(int a, int b, int c) {};
_DWORD tolower(_DWORD a) { return 0; };// weak
//void __outword(int a, int b) {};
int __inword(int a) { return 0; };

//int DataFileIO::FileLengthBytes(int a) { return 0; };

//---------------- fixproc

//------------------------------------
uint8_t byte_9AD97 = 0;
uint32_t mouseButtonsStates_12EFB0_12EFA0 = 0;
uint16_t word_12EFD6_12EFC6 = 0;
uint16_t word_9AD94 = 0;
uint16_t word_12EFD8_12EFC8 = 0;

int SubtrackUntilZero(int x, int y)
{
    int result = x - y;
    if (result < 0)
    {
        result = 0;
    }
    return result;
}
//void UpdateMouseEventData_8CB3A(uint32_t mouse_states, int32_t mouse_posx, int32_t mouse_posy)//26db3a
void UpdateMouseEventData_5BE72_5C382(uint32_t mouse_states, int32_t mouse_posx, int32_t mouse_posy)
{
    if (dword_9AD98)
    {
        byte_9AD97 = 1;
        mouseButtonsStates_12EFB0_12EFA0 = mouse_states;
        if ((typeResolution_12F02E_12F01E & 8) != 0)
        {
            mouse_posx /= 8;
            mouse_posy /= 8;
        }
        mouse_9AD90.x = mouse_posx;
        mouse_9AD90.y = mouse_posy;
        if (mouse_9AD90.x > 638)
            mouse_9AD90.x = 638;
        if (mouse_9AD90.y > 478)
            mouse_9AD90.y = 478;
        if ((mouseButtonsStates_12EFB0_12EFA0 & 2) != 0)
        {
            if (!mouseLeftButton2_12EFE4_12EFD4)
            {
                if (word_12EFD6_12EFC6 <= 0)
                {
                    word_12EFD6_12EFC6 = word_9AD94;
                }
                else
                {
                    word_12EFD8_12EFC8 = 1;
                }
            }
            if (!mouseLeftButton2_12EFE4_12EFD4 && !mouseLeftButton_12EFDE_12EFCE)
            {
                mouseLeftButton_12EFDE_12EFCE = 1;
                mouseX_9AD8C = mouse_posx;
                mouseY_9AD8E = mouse_posy;
            }
            mouseLeftButton2_12EFE4_12EFD4 = 1;
        }
        if ((mouseButtonsStates_12EFB0_12EFA0 & 4) != 0)
            mouseLeftButton2_12EFE4_12EFD4 = 0;
        if ((mouseButtonsStates_12EFB0_12EFA0 & 8) != 0)
        {
            if (!mouseRightButton2_12EFE2_12EFD2 && !mouseRightButton_12EFDC_12EFCC)
            {
                mouseRightButton_12EFDC_12EFCC = 1;
                mouseX_9AD8C = mouse_posx;
                mouseY_9AD8E = mouse_posy;
            }
            mouseRightButton2_12EFE2_12EFD2 = 1;
        }
        if ((mouseButtonsStates_12EFB0_12EFA0 & 0x10) != 0)
            mouseRightButton2_12EFE2_12EFD2 = 0;
        if ((mouseButtonsStates_12EFB0_12EFA0 & 0x20) != 0)
        {
            if (!word_12EFE0_12EFD0 && !word_12EFDA_12EFCA)
            {
                word_12EFDA_12EFCA = 1;
                mouseX_9AD8C = mouse_posx;
                mouseY_9AD8E = mouse_posy;
            }
            word_12EFE0_12EFD0 = 1;
        }
        if ((mouseButtonsStates_12EFB0_12EFA0 & 0x40) != 0)
            word_12EFE0_12EFD0 = 0;
        if (!dword_9AD88)
        {
            HIWORD(dword_12EFCC_12EFBC) = word_9AFA4;
            sub_5BB60_5C070();
            sub_5B650_5BB60();
            if ((typeResolution_12F02E_12F01E & 8) != 0)
                sub_61A1C_61F2C(*(int*)&dword_12EFCC_12EFBC >> 16);
        }
    }
    //return MK_FP(retaddr[0], retaddr[0])(a1, a2);
}
/*
void UpdateMouseEventData_8CB3A(uint32_t mouse_states, int32_t mouse_posx, int32_t mouse_posy)//26db3a
{
    //((void (*)(x_DWORD))_GETDS)((unsigned __int16)__DS__);
    int16_t temp_mouse_x; // [esp+4h] [ebp-8h]
    int16_t temp_mouse_y; // [esp+8h] [ebp-4h]
    //void *retaddr[2]; // [esp+1Ch] [ebp+10h]

    int helpWidth = 640;
    int helpHeight = 480;
    if (x_WORD_180660_VGA_type_resolution != 1)
        if (!DefaultResolutions())
        {
            helpWidth = screenWidth_18062C;
            helpHeight = screenHeight_180624;
        }

    //!!!!!!!! debug
    if (mouseturnoff)
    {
        mouse_posx = 0x140;
        mouse_posy = 0xc8;
    }
    //!!!!!!!! debug

    temp_mouse_x = mouse_posx;
    temp_mouse_y = mouse_posy;

    if (x_DWORD_E3768)//2b4768 - 00000001
    {
        x_BYTE_E3767 = 1;
        x_DWORD_180710_mouse_buttons_states = mouse_states;//[ebp-c] - 00000001 // state of buttons 1 -change position
        x_WORD_E3760_mouse.x = temp_mouse_x; //set x
        x_WORD_E3760_mouse.y = temp_mouse_y; //set y
        if (x_WORD_E3760_mouse.x > (helpWidth - 2))
            x_WORD_E3760_mouse.x = (helpWidth - 2);
        if (x_WORD_E3760_mouse.y > (helpHeight - 2))
            x_WORD_E3760_mouse.y = (helpHeight - 2);

        if (x_DWORD_180710_mouse_buttons_states & 2) // left button pressed
        {
            if (!x_WORD_18074C_mouse_left2_button)//first cycle after press
            {
                if (x_WORD_18073E <= 0)
                {
                    //mouse_state = word_E3764;
                    x_WORD_18073E = word_E3764;
                }
                else
                {
                    x_WORD_180742 = 1;
                }
            }
            if (!x_WORD_18074C_mouse_left2_button && !x_WORD_180746_mouse_left_button)//first cycle after press and ...
            {
                x_WORD_180746_mouse_left_button = 1;
                x_WORD_E375C_mouse_position_x = temp_mouse_x;
                //mouse_state = temp_mouse_y;
                x_WORD_E375E_mouse_position_y = temp_mouse_y;
            }
            x_WORD_18074C_mouse_left2_button = 1;
        }
        if (x_DWORD_180710_mouse_buttons_states & 4)// left button released
            x_WORD_18074C_mouse_left2_button = 0;
        if (x_DWORD_180710_mouse_buttons_states & 8)// right button pressed
        {
            if (!x_WORD_18074A_mouse_right2_button && !x_WORD_180744_mouse_right_button)//first cycle after press and ...
            {
                x_WORD_180744_mouse_right_button = 1;
                x_WORD_E375C_mouse_position_x = temp_mouse_x;
                //mouse_state = temp_mouse_y;
                x_WORD_E375E_mouse_position_y = temp_mouse_y;
            }
            x_WORD_18074A_mouse_right2_button = 1;
        }
        if (x_DWORD_180710_mouse_buttons_states & 0x10)// right button released
            x_WORD_18074A_mouse_right2_button = 0;
        if (x_DWORD_180710_mouse_buttons_states & 0x20)// middle button pressed?
        {
            if (!x_WORD_180748 && !x_WORD_180740)
            {
                x_WORD_180740 = 1;
                x_WORD_E375C_mouse_position_x = temp_mouse_x;
                //mouse_state = temp_mouse_y;
                x_WORD_E375E_mouse_position_y = temp_mouse_y;
            }
            x_WORD_180748 = 1;
        }
        if (x_DWORD_180710_mouse_buttons_states & 0x40)// middle button released?
            x_WORD_180748 = 0;
        if (!x_DWORD_E3758)
        {
            HIWORD(x_DWORD_180734) = x_WORD_E3BA4;
            sub_8C839();//draw cursor maybe
            sub_8C329();
            if (x_WORD_180660_VGA_type_resolution & 8)
                sub_9951B(SHIWORD(x_DWORD_180734));
        }
    }
}
*/
void MouseEvents(uint32_t buttons, int x, int y)
{
    UpdateMouseEventData_5BE72_5C382(buttons, x, y);
};

//---------------------------------------

Type_str_AE400_AE3F0* str_AE400_AE3F0;

int dword_AE400_AE3F0() {
    return (int)str_AE400_AE3F0;
};

void dword_AE400_AE3F0(int input) {
    str_AE400_AE3F0 = (Type_str_AE400_AE3F0*)input;
};

Type_str_AE408_AE3F8* str_AE408_AE3F8;//26c408 0583a0

int dword_AE408_AE3F8() {
    return (int)str_AE408_AE3F8;
};

void dword_AE408_AE3F8(int input) {
    str_AE408_AE3F8 = (Type_str_AE408_AE3F8*)input;
};

//------------------------------------

//----- (00010010) --------------------------------------------------------
void sub_10010(__int16 a1, __int16 a2)
{
  word_9000E = a1;
  word_90010 = a2;
}
// 9000E: using guessed type __int16 word_9000E;
// 90010: using guessed type __int16 word_90010;

//SYNCHRONIZED WITH REMC1
uint8_t* sub_1002D(uint8_t* a1, uint8_t* a2)//1E102D_
{
  dword_90008 = a1;
  dword_90004 = a2;//fix dword_90004
  while ( 1 )
  {
    qmemcpy(&dword_90012, (const void *)dword_90008, sizeof(dword_90012));
    dword_90008 += 4;
    qmemcpy(&word_9000C, (const void *)dword_90008, sizeof(word_9000C));
    dword_90008 += 2;
    if ( word_9000C != -20718 )
      break;
    sub_10166();
  }
  if ( word_9000C != -3590 )
    return 0;
  sub_100B8();
  return dword_90008;
}

//SYNCHRONIZED WITH REMC1
__int16 sub_100B8()
{
  __int16 result; // ax

  qmemcpy(&word_90016, (const void *)dword_90008, sizeof(word_90016));
  dword_90008 += 2;
  dword_90008 += 8;
  while ( word_90016 )
  {
    --word_90016;
    qmemcpy(&dword_90012, (const void *)dword_90008, sizeof(dword_90012));
    dword_90008 += 4;
    qmemcpy(&word_9000C, (const void *)dword_90008, sizeof(word_9000C));
    dword_90008 += 2;
    if ( word_9000C == 7 )
    {
      result = sub_101A1();
    }
    else if ( word_9000C == 15 )
    {
      result = sub_10254();
    }
    else
    {
      result = sub_10190();
    }
  }
  return result;
}

//----- (00010166) --------------------------------------------------------
__int16 sub_10166()
{
  __int16 result; // ax

  word_9000E = *(_WORD *)(dword_90008 + 2);
  result = *(_WORD *)(dword_90008 + 4);
  word_90010 = result;
  dword_90008 += 6;
  return result;
}
// 90008: using guessed type int dword_90008;
// 9000E: using guessed type __int16 word_9000E;
// 90010: using guessed type __int16 word_90010;

//----- (00010190) --------------------------------------------------------
int sub_10190()
{
  int result; // eax

  result = (unsigned __int16)dword_90012 - 6;
  dword_90008 += result;
  return result;
}
// 90008: using guessed type int dword_90008;
// 90012: using guessed type __int16 word_90012;

//SYNCHRONIZED WITH REMC1
__int16 sub_101A1()
{
  _WORD *v0; // edi
  __int16 *v1; // esi
  __int16 result; // ax
  _BYTE *v3; // edi
  _BYTE *v4; // esi
  char v5; // dl
  _WORD *v6; // [esp-4h] [ebp-14h]
  _WORD *v7; // [esp+0h] [ebp-10h]
  __int16 i; // [esp+6h] [ebp-Ah]
  __int16 v9; // [esp+8h] [ebp-8h]
  int v10; // [esp+Ch] [ebp-4h]

  v10 = (unsigned __int16)word_9000E;
  v0 = (_WORD *)dword_90004;
  v1 = (__int16 *)(dword_90008 + 2);
  v9 = *(_WORD *)dword_90008;
  do
  {
    while ( 1 )
    {
      result = *v1++;
      v7 = v0;
      if ( result >= 0 )
        goto LABEL_10;
      if ( (result & 0x4000) == 0 )
        break;
      v0 = (_WORD *)((char *)v0 + v10 * -result);
    }
    v6 = v0;
    v3 = (uint8*)((char *)v0 + v10 - 1);
    if ( byte_967E4 == 1 )
    {
      if ( (_BYTE)result )
        *v3 = result;
    }
    else
    {
      *v3 = result;
    }
    v0 = v6;
LABEL_10:
    for ( i = result; i; --i )
    {
      while ( 1 )
      {
        LOBYTE(result) = *(_BYTE *)v1;
        v4 = (uint8*)((char *)v1 + 1);
        result = (unsigned __int8)result;
        v0 = (_WORD *)((char *)v0 + (unsigned __int8)result);
        v5 = *v4;
        v1 = (__int16 *)(v4 + 1);
        if ( v5 > 0 )
          break;
        result = *v1++;
        do
        {
          *v0++ = result;
          ++v5;
        }
        while ( v5 );
        if ( !--i )
          goto LABEL_18;
      }
      do
      {
        *v0++ = *v1++;
        --v5;
      }
      while ( v5 );
    }
LABEL_18:
    v0 = (_WORD *)((char *)v7 + v10);
    --v9;
  }
  while ( v9 );
  dword_90008 = (uint8_t*)v1;
  return result;
}

//----- (00010254) --------------------------------------------------------
int sub_10254()
{
  _BYTE *v0; // edi
  char *v1; // esi
  __int16 v2; // bx
  __int16 v3; // cx
  char v4; // dl
  __int16 v5; // ax
  char v6; // dh
  char v7; // dh
  int result; // eax
  uint8_t* v9; // [esp-8h] [ebp-Ch]
  int v10; // [esp-4h] [ebp-8h]
  __int16 v11; // [esp+2h] [ebp-2h]

  v11 = word_9000E;
  v0 = (_BYTE *)dword_90004;
  v1 = (char *)dword_90008;
  v10 = (unsigned __int16)dword_90012 - 6;
  v9 = dword_90008;
  v2 = word_90010;
  do
  {
    ++v1;
    v3 = v11;
    do
    {
      v4 = *v1++;
      if ( v4 > 0 )
      {
        v3 -= (unsigned __int8)v4;
      }
      else
      {
        HIBYTE(v5) = -1;
        LOBYTE(v5) = v4;
        v3 += v5;
      }
      if ( v4 > 0 )
      {
        v7 = *v1++;
        do
        {
          if ( byte_967E4 == 1 )
          {
            if ( v7 )
              *v0 = v7;
          }
          else
          {
            *v0 = v7;
          }
          ++v0;
          --v4;
        }
        while ( v4 );
      }
      else
      {
        do
        {
          v6 = *v1++;
          if ( byte_967E4 == 1 )
          {
            if ( v6 )
              *v0 = v6;
          }
          else
          {
            *v0 = v6;
          }
          ++v0;
          ++v4;
        }
        while ( v4 );
      }
    }
    while ( v3 );
    --v2;
  }
  while ( v2 );
  result = v10;
  dword_90008 = v10 + v9;
  return result;
}
// 90004: using guessed type int dword_90004;
// 90008: using guessed type int dword_90008;
// 9000E: using guessed type __int16 word_9000E;
// 90010: using guessed type __int16 word_90010;
// 90012: using guessed type __int16 word_90012;
// 967E4: using guessed type char byte_967E4;

//----- (00010300) --------------------------------------------------------
void sub_10300()//1E1300_
{
  if ( word_90026 && sub_35710() )
  {
    word_AC5DC = 1;
  }
  else if ( word_AC5DE && (lastPressedKey_12EF70_12EF60 || mouseLeftButton_12EFDE_12EFCE || mouseRightButton_12EFDC_12EFCC) )
  {
    word_AC5DC = 1;
  }
  else
  {
    while ( dword_AC5D4_AC5C4 < (unsigned int)dword_9ADC4 )
    {
      if ( word_90026 && sub_35710() )
      {
        word_AC5DC = 1;
        return;
      }
      if ( word_AC5DE && (lastPressedKey_12EF70_12EF60 || mouseLeftButton_12EFDE_12EFCE || mouseLeftButton_12EFDE_12EFCE != mouseRightButton_12EFDC_12EFCC) )
      {
        word_AC5DC = 1;
        return;
      }
    }
    dword_AC5D4_AC5C4 = 0;
  }
}
// 90026: using guessed type __int16 word_90026;
// 9ADC4: using guessed type int dword_9ADC4;
// AC5D4: using guessed type int dword_AC5D4_AC5C4;
// AC5DC: using guessed type __int16 word_AC5DC;
// AC5DE: using guessed type __int16 word_AC5DE;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;

//----- (000103C0) --------------------------------------------------------
void sub_103C0(void *a1, unsigned int a2)
{
  if ( a1 )
  {
    qmemcpy(a1, (const void *)dword_AC5BC, a2);
  }
  dword_AC5BC += a2;
}
// AC5BC: using guessed type int dword_AC5BC;

//----- (000103F0) --------------------------------------------------------
int sub_103F0()
{
  int result; // eax

  dword_AC1B0 = dword_90028;
  DataFileIO::Read(file_AC5C0, (uint8_t*)&str_AC1A0, 16);
  while (str_AC1A0.word_AC1A4 != 0xF1FA)
    printf("ERROR UNKNOWN FRAME TYPE\n");
  while (str_AC1A0.dword_AC1A0 >= 0xFA00 )
    printf("PAGE SIZE IS > BSCREEN\n");
  DataFileIO::Read(file_AC5C0, (uint8_t*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, str_AC1A0.dword_AC1A0 - 16);
  result = str_AC1A0.dword_AC1A0;
  dword_90028 += str_AC1A0.dword_AC1A0;
  return result;
}
// 5CC03: using guessed type _DWORD printf(const char *, ...);
// 90028: using guessed type int dword_90028;
// AC1A0: using guessed type int dword_AC1A0;
// AC1A4: using guessed type __int16 word_AC1A4;
// AC1B0: using guessed type int dword_AC1B0;
// AC5C0: using guessed type int file_AC5C0;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;

typedef struct {
    int v21;
    __int16 v22;
} Type_v21;
//----- (000104D0) --------------------------------------------------------
void sub_104D0()
{
  int v0; // eax
  int v1; // eax
  unsigned int i; // ebx
  int v3; // ebp
  //char *v4; // esi
  //char *v5; // edi
  //char v6; // al
  //char v7; // al
  //char *v8; // esi
  //char *v9; // esi
  //char *v10; // edi
  //char v11; // al
  //char v12; // al
  //char *v13; // esi
  //char *v14; // edi
  //char v15; // al
  //char v16; // al
  //char *v17; // edi
  //char v18; // al
  //char v19; // al
  unsigned __int8 v20; // al
  Type_v21 v21x;
  //int v21; // [esp+0h] [ebp-1Ch] BYREF
  //int v22; // [esp+4h] [ebp-18h]
  char v23; // [esp+8h] [ebp-14h]

  //fix
  //v22 = 0;
  //fix

  v23 = 0;
  byte_AC1B8[0] = 0;
  v0 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  dword_AC5BC = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  if (str_AC1A0.word_AC1A4 == 0xF100/*-3840*/)
  {
    sub_103C0(0, str_AC1A0.dword_AC1A0 - 16);
    v1 = sub_103F0();
    //v0 = sub_104D0(v1);
    //fix !!!
    sub_104D0();
    //fix !!!
  }
  else if (str_AC1A0.word_AC1A4 == 0xF1FA/*-3590*/)
  {
    for ( i = 0; ; ++i )
    {
      v0 = str_AC1A0.word_AC1A6;
      if ( i >= str_AC1A0.word_AC1A6)
        break;
      v3 = dword_AC5BC;
      sub_103C0(&v21x, 6u);
      switch (v21x.v22 )
      {
        case 4:
          sub_108C0();
          strcpy(&byte_AC1B8[strlen(byte_AC1B8)], (char*)"COLOUR256 ");
          /*
          v4 = (char*)"COLOUR256 ";
          v5 = &byte_AC1B8[strlen(byte_AC1B8)];
          do
          {
            v6 = *v4;
            *v5 = *v4;
            if ( !v6 )
              break;
            v7 = v4[1];
            v4 += 2;
            v5[1] = v7;
            v5 += 2;
          }
          while ( v7 );*/
          v23 = 1;
          break;
        case 7:
          //v8 = (char*)"SS2 ";
          sub_10960();
          //goto LABEL_23;
          strcpy(&byte_AC1B8[strlen(byte_AC1B8)], (char*)"SS2 ");
          break;
        case 11:

          //v9 = (char*)"COLOUR ";
          sub_108C0();
          strcpy(&byte_AC1B8[strlen(byte_AC1B8)], (char*)"COLOUR ");
          /*
          v10 = &byte_AC1B8[strlen(byte_AC1B8)];
          do
          {
            v11 = *v9;
            *v10 = *v9;
            if ( !v11 )
              break;
            v12 = v9[1];
            v9 += 2;
            v10[1] = v12;
            v10 += 2;
          }
          while ( v12 );*/
          v23 = 1;
          break;
        case 12:
          //v8 = (char*)"LC ";
          sub_10AB0();
          //goto LABEL_23;
          strcpy(&byte_AC1B8[strlen(byte_AC1B8)], (char*)"LC ");
          break;
        case 13:
          memset((void*)tempReadBuffer_9001C, 0, str_AC5C8.word_AC5D2 * str_AC5C8.word_AC5D0);
          //v8 = (char*)"BLACK ";
          //goto LABEL_23;
          strcpy(&byte_AC1B8[strlen(byte_AC1B8)], (char*)"BLACK ");
          break;
        case 15:
          //v8 = (char*)"BRUN ";
          sub_10BD0();
          //goto LABEL_23;
          strcpy(&byte_AC1B8[strlen(byte_AC1B8)], (char*)"BRUN ");
          break;
        case 16:
          sub_103C0((void *)tempReadBuffer_9001C, str_AC5C8.word_AC5D0 * str_AC5C8.word_AC5D2);
          strcpy(&byte_AC1B8[strlen(byte_AC1B8)], (char*)"COPY ");
          /*
          v13 = (char*)"COPY ";
          v14 = &byte_AC1B8[strlen(byte_AC1B8)];
          do
          {
            v15 = *v13;
            *v14 = *v13;
            if ( !v15 )
              break;
            v16 = v13[1];
            v13 += 2;
            v14[1] = v16;
            v14 += 2;
          }
          while ( v16 );*/
          v21x.v21 = str_AC5C8.word_AC5D2 * str_AC5C8.word_AC5D0;
          break;
        case 18:
          sub_103C0(0, v21x.v21 - 6);
          strcpy(&byte_AC1B8[strlen(byte_AC1B8)], (char*)"PSTAMP ");
          //v8 = (char*)"PSTAMP ";
//LABEL_23:
          /*
          v17 = &byte_AC1B8[strlen(byte_AC1B8)];
          do
          {
            v18 = *v8;
            *v17 = *v8;
            if ( !v18 )
              break;
            v19 = v8[1];
            v8 += 2;
            v17[1] = v19;
            v17 += 2;
          }
          while ( v19 );*/
          break;
        default:
          break;
      }
      dword_AC5BC = v3 + v21x.v21;
    }
  }
  if ( dword_AC5C4 )
    dword_AC5C4(v0);
  sub_10300();
  if ( v23 )
  {
    WaitForBeam_5CC54_5D164();
    //allert_error();//fix beam
    if ( word_90024 )
    {
      SetPalette_319A0_319E0(colorBuffer_AC2B8_AC2A8);
      v20 = sub_5CC70_5D180(colorBuffer_AC2B8_AC2A8, 0x3Fu, 0x3Fu, 0x3Fu);
      sub_24BF0(v20);
    }
  }
  if ( byte_90091 )
  {
    begWscreen_2ECFF4_2ECFE4 += 6720;
    Blit_5CDA0_5D2B0();
    begWscreen_2ECFF4_2ECFE4 -= 6720;
  }
  else
  {
    Blit_5CDA0_5D2B0();
  }
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 9001C: using guessed type int tempReadBuffer_9001C;
// 90024: using guessed type __int16 word_90024;
// 90091: using guessed type char byte_90091;
// AC1A0: using guessed type int dword_AC1A0;
// AC1A4: using guessed type __int16 word_AC1A4;
// AC1A6: using guessed type __int16 word_AC1A6;
// AC2B8: using guessed type unsigned __int8 byte_AC2B8[772];
// AC5BC: using guessed type int dword_AC5BC;
// AC5C4: using guessed type int (*dword_AC5C4)(_DWORD);
// AC5D0: using guessed type __int16 word_AC5D0;
// AC5D2: using guessed type __int16 word_AC5D2;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (000107C0) --------------------------------------------------------
void PlayInfoFmv_107C0(__int16 a1, __int16 a2, int a3)//1E17C0_
{
  word_90024 = a2;
  word_90030 = 0;
  word_AC5DA = 0;
  word_AC5E0_AC5D0x = 0;
  tempReadBuffer_9001C = begWscreen_2ECFF4_2ECFE4;
  file_AC5C0 = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer_9ADC8), 512);
  DataFileIO::Read(file_AC5C0, (uint8_t*)&str_AC5C8, 12);
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  dword_90028 += 12;
  lastPressedKey_12EF70_12EF60 = 0;
  word_AC5DC = 0;
  FlvInitSet_356E0_35AA0();
  for ( word_AC5DE = a1; !word_AC5DC; ++word_AC5E0_AC5D0x)
  {
    if (word_AC5E0_AC5D0x >= str_AC5C8.word_AC5CE - 1 )
      break;
    sub_111B0((int)0, (int)a3);
    sub_103F0();
    sub_104D0();
  }
  DataFileIO::Close(file_AC5C0);
}
// 9001C: using guessed type int tempReadBuffer_9001C;
// 90024: using guessed type __int16 word_90024;
// 90028: using guessed type int dword_90028;
// 90030: using guessed type __int16 word_90030;
// AC5C0: using guessed type int file_AC5C0;
// AC5CE: using guessed type __int16 word_AC5CE;
// AC5DA: using guessed type __int16 word_AC5DA;
// AC5DC: using guessed type __int16 word_AC5DC;
// AC5DE: using guessed type __int16 word_AC5DE;
// AC5E0: using guessed type int dword_AC5E0_AC5D0[];
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (000108C0) --------------------------------------------------------
void sub_108C0()
{
  char *v1; // ebx
  int i; // edi
  int v3; // esi
  unsigned int v4; // [esp+0h] [ebp-1Ch] BYREF
  int v5; // [esp+4h] [ebp-18h] BYREF
  char v6[20]; // [esp+8h] [ebp-14h] BYREF

  sub_103C0(&v5, 2u);
  v1 = (char *)&colorBuffer_AC2B8_AC2A8;
  for ( i = 0; (unsigned __int16)i < (unsigned __int16)v5; ++i )
  {
    sub_103C0(v6, 1u);
    v1 += 3 * (unsigned __int8)v6[0];
    v4 = 0;
    sub_103C0(&v4, 1u);
    if ( !(_WORD)v4 )
      v4 = 256;
    v3 = 0;
    do
    {
      sub_103C0(v1, 3u);
      ++v3;
      v1 += 3;
    }
    while ( (unsigned __int16)v3 < (unsigned __int16)v4 );
  }
}
// 10930: conditional instruction was optimized away because %var_1C.2!=0
// 108C0: using guessed type char var_14[20];

//----- (00010960) --------------------------------------------------------
void sub_10960()
{
  uint8_t* v1; // ebp
  char *v2; // ebx
  unsigned __int16 v3; // di
  int j; // esi
  unsigned __int16 k; // cx
  int i; // [esp+0h] [ebp-28h]
  int v7; // [esp+4h] [ebp-24h] BYREF
  int v8; // [esp+8h] [ebp-20h] BYREF
  int v9; // [esp+Ch] [ebp-1Ch] BYREF
  char v10[4]; // [esp+10h] [ebp-18h] BYREF
  char v11[20]; // [esp+14h] [ebp-14h] BYREF

  sub_103C0(&v7, 2u);
  v1 = tempReadBuffer_9001C;
  for ( i = 0; (unsigned __int16)i < (unsigned __int16)v7; v1 += str_AC5C8.word_AC5D0)
  {
    sub_103C0(&v9, 2u);
    v2 = (char *)v1;
    if ( (v9 & 0x8000) == 0 )
    {
      v3 = v9;
      for ( j = 0; (unsigned __int16)j < v3; ++j )
      {
        sub_103C0(v11, 1u);
        v2 += (unsigned __int8)v11[0];
        sub_103C0(v10, 1u);
        if ( v10[0] >= 0 )
        {
          if ( v10[0] > 0 )
          {
            sub_103C0(v2, 2 * v10[0]);
            v2 += 2 * v10[0];
          }
        }
        else
        {
          sub_103C0(&v8, 2u);
          for ( k = 0; k < (int)abs8(v10[0]); ++k )
          {
            v2 += 2;
            *((_WORD *)v2 - 1) = v8;
          }
        }
      }
    }
    else if ( (v9 & 0x4000) != 0 )
    {
      v1 += str_AC5C8.word_AC5D0 * (abs16(v9) - 1);
      --i;
    }
    else
    {
      *(_BYTE *)(str_AC5C8.word_AC5D0 + v1 - 1) = v9;
    }
    ++i;
  }
}
// 9001C: using guessed type int tempReadBuffer_9001C;
// AC5D0: using guessed type __int16 word_AC5D0;
// 10960: using guessed type char var_14[20];
// 10960: using guessed type char var_18[4];

//----- (00010AB0) --------------------------------------------------------
void sub_10AB0()
{
  uint8_t* v0; // edi
  char *v2; // ebx
  unsigned __int16 v3; // si
  int v4; // eax
  int i; // [esp+0h] [ebp-28h]
  int v6; // [esp+4h] [ebp-24h] BYREF
  char v7[4]; // [esp+8h] [ebp-20h] BYREF
  char v8[4]; // [esp+Ch] [ebp-1Ch] BYREF
  char v9[4]; // [esp+10h] [ebp-18h] BYREF
  char v10[20]; // [esp+14h] [ebp-14h] BYREF

  sub_103C0(&v6, 2u);
  v0 = (unsigned __int16)v6 * str_AC5C8.word_AC5D0 + tempReadBuffer_9001C;
  sub_103C0(&v6, 2u);
  for ( i = 0; (unsigned __int16)i < (unsigned __int16)v6; v0 += str_AC5C8.word_AC5D0)
  {
    v2 = (char *)v0;
    v3 = 0;
    sub_103C0(v10, 1u);
    while ( v3 < (int)(unsigned __int8)v10[0] )
    {
      sub_103C0(v7, 1u);
      v2 += (unsigned __int8)v7[0];
      sub_103C0(v9, 1u);
      if ( v9[0] >= 0 )
      {
        if ( v9[0] <= 0 )
          goto LABEL_8;
        sub_103C0(v2, v9[0]);
        v4 = v9[0];
      }
      else
      {
        sub_103C0(v8, 1u);
        memset(v2, (unsigned __int8)v8[0], abs8(v9[0]));
        v4 = abs8(v9[0]);
      }
      v2 += v4;
LABEL_8:
      ++v3;
    }
    ++i;
  }
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 9001C: using guessed type int tempReadBuffer_9001C;
// AC5D0: using guessed type __int16 word_AC5D0;
// 10AB0: using guessed type char var_14[20];
// 10AB0: using guessed type char var_20[4];
// 10AB0: using guessed type char var_18[4];
// 10AB0: using guessed type char var_1C[4];

//----- (00010BD0) --------------------------------------------------------
__int16 sub_10BD0()
{
  uint8_t* v0; // edi
  char *v1; // ebx
  int v2; // esi
  unsigned int v3; // eax
  __int16 result; // ax
  int i; // [esp+0h] [ebp-1Ch]
  char v6[4]; // [esp+4h] [ebp-18h] BYREF
  char v7[20]; // [esp+8h] [ebp-14h] BYREF

  v0 = tempReadBuffer_9001C;
  for ( i = 0; (unsigned __int16)i < str_AC5C8.word_AC5D2; v0 += str_AC5C8.word_AC5D0)
  {
    v1 = (char *)v0;
    v2 = 0;
    sub_103C0(0, 1u);
    if (str_AC5C8.word_AC5D0)
    {
      do
      {
        sub_103C0(v7, 1u);
        v3 = 1u;//fix remove it later
        if ( v7[0] >= 0 )
        {
          if ( v7[0] > 0 )
          {
            sub_103C0(v6, 1u);
            v3 = (int)memset(v1, (unsigned __int8)v6[0], v7[0]);
          }
        }
        else
        {
          v7[0] = abs8(v7[0]);
          sub_103C0(v1, v7[0]);
          v3 = v7[0];//fix remove it later
        }
        LOWORD(v3) = v7[0];
        v2 += v3;
        v1 += v7[0];
      }
      while ( (unsigned __int16)v2 < str_AC5C8.word_AC5D0);
    }
    result = str_AC5C8.word_AC5D0;
    ++i;
  }
  return result;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 9001C: using guessed type int tempReadBuffer_9001C;
// AC5D0: using guessed type __int16 word_AC5D0;
// AC5D2: using guessed type __int16 word_AC5D2;
// 10BD0: using guessed type char var_14[20];
// 10BD0: using guessed type char var_18[4];

//SYNCHRONIZED WITH REMC1
Type_AE3E0* sub_10CB0(unsigned __int16 a1)
{
  //unsigned __int16 v1; // bx
  Type_AE3E0* v2; // edi
  //Type_AE3E0* v3; // esi
  //int v4; // eax
  //int v5; // eax

  //v1 = a1;
  sub_42530_42870(9);
  v2 = (Type_AE3E0*)malloc_42540_42880(sizeof(Type_AE3E0));
  //v3 = v2;
  if ( v2 && ((v2->var_2 = (Type_sub_AE3E0*)malloc_42540_42880(sizeof(Type_sub_AE3E0) * a1)) != 0) )
  {
    v2->var_0 = a1;
    for (int i = 0; i < a1; i++)
    //while ( --v1 != 0xFFFF )
    {
      //v5 = 28 * v1;
      v2->var_2[i].var_4 = nullptr;
      v2->var_2[i].var_0 = 0;
    }
  }
  else if ( v2 )
  {
    free_426E0_42A20(v2);
    v2 = nullptr;
  }
  sub_42530_42870(10);
  return v2;
}

//SYNCHRONIZED WITH REMC1
void sub_10D40(Type_AE3E0* a1x, Type_sub168_2* a2x, __int16 a3)//1E1D40_
{
  __int16 v3; // si
  __int16 v4; // di
  __int16 i; // ax
  //Type_sub_AE3E0* v6; // edx
  //int v7; // ecx
  int v8; // eax
  //int v9; // edx
  //__int16 v11; // [esp+8h] [ebp-14h]

  //allert_error();//test it

  v3 = -1;
  v4 = -1;
  if ( !a1x->var_0 )
    return;
  for ( i = 0; i < a1x->var_0; i++ )
  {
    //v6 = &a1x->var_2[i];
    if (a1x->var_2[i].var_4 )
    {
      if ( !a1x->var_2[i].var_0 )
        v4 = i;
    }
    else
    {
      v3 = i;
    }
  }
  if ( v3 <= 0 )
    v3 = v4;
  if ( v3 <= -1 )
    return;
  //v7 = (int)a2x->var_u32_0;
  v8 = a2x->var_u32_0->yy * a2x->var_u32_0->xx;
  //v11 = *(uint16*)&a2x->var_u32_0->data[v8];
  //v9 = 28 * v3;
  a1x->var_2[v3].var_4 = a2x;
  a1x->var_2[v3].var_12 = 6;
  a1x->var_2[v3].var_14 = v8 + 6;
  a1x->var_2[v3].var_16 = *(uint16*)&a2x->var_u32_0->datax[v8];
  a1x->var_2[v3].var_18 = a2x->var_u32_0->xx;
  a1x->var_2[v3].var_20 = a2x->var_u32_0->yy;
  a1x->var_2[v3].var_8 = v8 + 6;
  a1x->var_2[v3].var_22 = 1;
  a1x->var_2[v3].var_0 = 1;
  a1x->var_2[v3].var_24 = v3;
  a1x->var_2[v3].var_26 = a3;
}

//SYNCHRONIZED WITH REMC1
void sub_10EB0(Type_sub_AE3E0* a1x)//1E1EB0_
{
  Type_sub168_2_2* v1; // esi
  int v2; // edi
  uint8_t* v3; // eax
  __int16 v4; // cx
  int result; // eax

  //allert_error();//test it

  if (a1x->var_22 > a1x->var_16)
  {
      a1x->var_22 = 1;
      a1x->var_8 = a1x->var_14;
  }
  //v1 = (uint8_t*)**(_DWORD **)(a1 + 4);
  v1 = a1x->var_4->var_u32_0;
  v2 = a1x->var_8;
  sub_10010(a1x->var_18, 0);
  //v1 += 6;
  v3 = sub_1002D(&v1->datax[v2], v1->datax);
  v4 = a1x->var_22;
  result = v3 - v1->datax;
  a1x->var_8 = result;
  a1x->var_22 = v4 + 1;
}

//SYNCHRONIZED WITH REMC1
void sub_10F10(Type_sub_AE3E0* a1x)
{
  if ( a1x )
  {
    a1x->var_0 = 0;
    a1x->var_4 = nullptr;
  }
}

//SYNCHRONIZED WITH REMC1
Type_sub_AE3E0* sub_10FD0(Type_AE3E0* a1x, __int16 a2)//1E1FD0_
{
  Type_sub_AE3E0* result = a1x->var_2;
  int v3 = a1x->var_0;
  if ( !a1x->var_0)
    return nullptr;
  while ( !result->var_4 || a2 != result->var_26)
  {
    v3--;
    result++;
    if ( !v3 )
      return nullptr;
  }
  return result;
}

//SYNCHRONIZED WITH REMC1
void sub_11010(Type_AE3E0* a1x)
{
    allert_error();//test it

  if ( a1x )
  {
    free_426E0_42A20(a1x->var_2);
    a1x->var_2 = nullptr;
    free_426E0_42A20((void*)a1x);
    a1x = nullptr;
  }
}

//----- (00011050) --------------------------------------------------------
bool sub_11050()
{
  bool v0; // bx
  __int16 v2[2]; // [esp+0h] [ebp-14h] BYREF
  int v3; // [esp+4h] [ebp-10h]
  int v4[3]; // [esp+8h] [ebp-Ch] BYREF

  //fix
  v3 = 0;
  //fix

  v0 = false;
  if ( byte_9002C )
    return true;
  dos_getdrive((uint32)v4);
  if ( !dos_getdiskfree(v4[0], (uint32)v2) && v2[0] == -1 && !v2[1] && v3 == 134217729 )
  {
    v0 = true;
    byte_9002C = 1;
  }
  return v0;
}
// 5CE76: using guessed type _DWORD dos_getdrive(_DWORD);
// 5CEAC: using guessed type _DWORD dos_getdiskfree(_DWORD, _DWORD);
// 9002C: using guessed type char byte_9002C;
// 11050: using guessed type int var_C[3];

//----- (000111B0) --------------------------------------------------------
void sub_111B0(int a1, int a2)
{
  int v2; // eax
  __int16 v3; // bx
  char v4; // al

  LOWORD(a1) = word_90030;
  while ( 1 )
  {
    v2 = a2 + 7 * (__int16)a1;
    printf("last:%d\n",a1 * 7);
    if ( word_AC5E0_AC5D0x != *(_WORD *)v2 )
      break;
    v3 = *(_WORD *)(v2 + 3);
    v4 = *(_BYTE *)(v2 + 2) - 65;
    word_90030 = a1;
    switch ( v4 )
    {
      case 0:
      case 32:
        dword_9ADC4 = v3;
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 1:
      case 33:
        sub_20E60_20E60();
        sub_5CEF0_5D400(v3);
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 4:
      case 36:
        sub_5D010_5D520();
        sub_5D070_5D580(v3);
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 10:
        sub_24B80();
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 11:
      case 43:
        if ( dword_9AF08 )
          sub_5D230(dword_9ADC0, dword_9AF08, v3);
        goto LABEL_9;
      case 12:
      case 44:
LABEL_9:
        sub_5D290_5D7A0(v3);
        word_AC5DA = 0;
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 14:
        if ( !byte_90090 )
          goto LABEL_26;
        sub_24AB0();
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 15:
        sub_24BB0();
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 16:
        sub_24B50(dword_AE238_AE228[v3]);
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 17:
      case 49:
        if ( !byte_939E4 )
          goto LABEL_26;
        sub_5D460(0, v3, -1);
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      case 18:
      case 50:
        if ( !byte_939E4 )
          goto LABEL_26;
        if ( !v3 )
          goto LABEL_21;
        sub_5D610(0, v3);
        LOWORD(a1) = word_90030;
        ++a1;
        break;
      case 19:
      case 51:
        if ( !byte_939E4 )
          goto LABEL_26;
        if ( v3 )
        {
          sub_5D750(0, v3);
          LOWORD(a1) = word_90030;
          ++a1;
        }
        else
        {
LABEL_21:
          sub_5D010_5D520();
          LOWORD(a1) = word_90030;
          ++a1;
        }
        break;
      case 23:
      case 55:
        sub_20E60_20E60();
        word_AC5DA = 0;
        goto LABEL_26;
      case 25:
      case 57:
        sub_5D290_5D7A0(v3);
        word_AC5DA = v3 + 1;
        LOWORD(a1) = word_90030;
        ++a1;
        continue;
      default:
LABEL_26:
        LOWORD(a1) = word_90030;
        ++a1;
        break;
    }
  }
  word_90030 = a1;
  if ( word_AC5DA && sub_5D7F0(dword_CBFD8) )
  {
    sub_20E60_20E60();
    sub_5D290_5D7A0(word_AC5DA - 1);
  }
}
// 90030: using guessed type __int16 word_90030;
// 90090: using guessed type char byte_90090;
// 939E4: using guessed type char byte_939E4;
// 9ADC0: using guessed type int dword_9ADC0;
// 9ADC4: using guessed type int dword_9ADC4;
// 9AF08: using guessed type int dword_9AF08;
// AC5DA: using guessed type __int16 word_AC5DA;
// AC5E0: using guessed type int dword_AC5E0_AC5D0[];
// AE238: using guessed type int dword_AE238_AE228[17];
// CBFD8: using guessed type int dword_CBFD8;

//----- (00011410) --------------------------------------------------------
int sub_11410(int a1, int a2)//1E2410_
{
  //int v2; // edx
  //int ix; // eax
  //int v4; // eax
  //int v5; // ecx
  //int *v6; // ebx

  //v2 = 1;
  int ix = 1;
  for (; ix < 100; ix++ )
  {
    if (dword_AC5F0x[ix].stub_2 == -1 )
      break;
    //v2++;
  }
  //v4 = 3 * v2;
  dword_AC5F0x[ix].stub_0 = a1;
  dword_AC5F0x[ix].stub_2 = a1;
  dword_AC5F0x[ix].stub_3 = 0;
  //v5 = dword_AC5F0x[v2].stub_2;
  dword_AC5F0x[ix].stub_1 = a2;
  //v6 = (int *)((char *)&dword_AD008_ACFF8 + 6 * v5);
  //v6 = (int*)&dword_AD008_ACFF8y[v5];
  dword_AC5F0x[ix].stub_4 = &dword_AD008_ACFF8y[dword_AC5F0x[ix].stub_2];
  dword_AC5F0x[ix].stub_5 = dword_AD008_ACFF8y[dword_AC5F0x[ix].stub_2].pointer_0;
  return ix;
}
// AC5F0: using guessed type int dword_AC5F0[];
// AC5F4: using guessed type int dword_AC5F4[];
// AC5F8: using guessed type int dword_AC5F8[];
// AC5FC: using guessed type int dword_AC5FC[];
// AC600: using guessed type int dword_AC600[];
// AC604: using guessed type int dword_AC604[595];
// AD008: using guessed type int dword_AD008_ACFF8;

//----- (00011490) --------------------------------------------------------
void sub_11490(int a1)
{
    dword_AC5F0x[a1].stub_2 = -1;
}
// AC5F8: using guessed type int dword_AC5F8[];

int counter_sub_114B0 = 0;
//----- (000114B0) --------------------------------------------------------
int sub_114B0(int a1, _DWORD *a2, _DWORD *a3)//1E24B0_
{
  //int *v3; // eax
  //uint8*v4; // edx
  //int v5; // ecx
  //int v6; // ebx
  //int v7; // esi
  //int v8; // edi
  //int v9; // ebp

  //v3 = &dword_AC5F0x[a1][0];
  //v4 = (uint8*)dword_AC5F0x[a1][5];
  //v5 = dword_AC5F0x[a1].stub_4;

  //debug
    if (counter_sub_114B0 == 0x110)
    {
        counter_sub_114B0++;
        counter_sub_114B0--;
    }
    /*
    uint8_t origbyte20 = 0;
    uint8_t remakebyte20 = 0;
    char buffer1[500];
    sprintf(buffer1, "%08X-FFFFFFF5", 0x1e24d0);
    int comp20 = compare_with_sequence(buffer1, (uint8_t*)dword_AC5F0x[a1].stub_5, 0xFFFFFFF5, counter_sub_114B0 - 0, 8, 8, &origbyte20, &remakebyte20, 0, true);
    */
    counter_sub_114B0++;
    //debug
  
  *a2 = dword_AC5F0x[a1].stub_5[0];
  *a3 = dword_AC5F0x[a1].stub_5[1];
  //v6 = v3[3] + 1;
  dword_AC5F0x[a1].stub_5 += sizeof(uint8*);
  dword_AC5F0x[a1].stub_3++;
  if (dword_AC5F0x[a1].stub_4->pos_4 /* *(unsigned __int16 *)(v5 + 4)*/ > dword_AC5F0x[a1].stub_3)
    return 1;
  //v7 = v3[4];
  dword_AC5F0x[a1].stub_3 = 0;
  //v8 = v3[2];
  dword_AC5F0x[a1].stub_4++;
  //v8++;
  dword_AC5F0x[a1].stub_2++;
  //v9 = v3[1];
  //v3[2] = v8;
  if (dword_AC5F0x[a1].stub_2 <= dword_AC5F0x[a1].stub_1)
    return 1;
  else
    return 2;
}
// AC5F0: using guessed type int dword_AC5F0[];

void sub_11540()//1E2540_
{
  uint8_t* v1; // edx
  char v8; // [esp+4h] [ebp-14h]
  char v9; // [esp+8h] [ebp-10h]

  sub_3EEA0_3F1E0((char*)"data/search.dat", begWscreen_2ECFF4_2ECFE4);
  for ( int i = 1; i < 100; i++)
    dword_AC5F0x[i].stub_2 = -1;
  v1 = begSearch_AE3F4_26C3F4_26C3E4;
  for ( int j = 0; j < 32; j++ )
  {
    dword_AD008_ACFF8y[j].pointer_0 = v1;
    dword_AD008_ACFF8y[j].pos_4 = 0;
    for (int k = 0; k < 32; k++)
    {
      for (int l = 0; l < 32; l++)
      {
        if ( j == begWscreen_2ECFF4_2ECFE4[l + 32 * k])
        {
          if ( !begWscreen_2ECFF4_2ECFE4[l + 32 * k] && v1 == begSearch_AE3F4_26C3F4_26C3E4 )
          {
            v8 = l;
            v9 = k;
          }
          v1[0] = l - v8;
          v1[1] = k - v9;
          v1[2] = j;
          v1 += 4;
          dword_AD008_ACFF8y[j].pos_4++;
        }
      }
    }
  }
}

//----- (00011640) --------------------------------------------------------
int sub_11640(Type_AE400_29795* a1x, axis_3d* a2x, char a3)
{
  int v3; // edi
  int result; // eax
  int v5; // edi
  int v6; // edi
  __int16 v7; // si
  __int16 v8; // ax
  int v9; // ebx
  int v10; // ebx

  if ( (a3 & 2) != 0 )
  {
    v3 = a1x->var_u32_29951_156->v_12;
    if ( a2x->z < v3 + (__int16)sub_11F50(a2x) )
      return 1;
    v5 = a1x->var_u32_29951_156->v_10;
    if (a2x->z > v5 + (__int16)sub_11F50(a2x) )
      return 1;
  }
  if ( (a3 & 1) == 0 || (v6 = a1x->var_u32_29951_156->v_20, (result = ~v6 & sub_11810(a2x)) == 0) )
  {
    if ( (a3 & 4) != 0 )
    {
      v7 = sub_42180(&a1x->var_u32_29867_72, a2x);
      v8 = sub_42240(0, v7);
      if ( v8 < 0 )
      {
        if ( v8 == -1 )
        {
          v10 = a1x->var_u32_29951_156->v_16;
          if ( (unsigned __int16)sub_42210(0, v7) > v10 )
            return 1;
        }
      }
      else if ( v8 > 0 && v8 == 1 )
      {
        v9 = a1x->var_u32_29951_156->v_18;
        if ( (unsigned __int16)sub_42210(0, v7) > v9 )
          return 1;
      }
    }
    return 0;
  }
  return result;
}

//----- (00011760) --------------------------------------------------------
int sub_11760(axis_3d* a1x)
{
  unsigned __int16 v1; // ax

  LOBYTE(v1) = a1x->x >> 8;
  HIBYTE(v1) = a1x->y >> 8;
  return 1 << (mapAngle_FC1E0_FC1D0[v1] & 0xF);
}

//----- (00011810) --------------------------------------------------------
int sub_11810(axis_3d* a1x)//1E2810_
{
  int v1; // edx
  int result; // eax

  v1 = a1x->x >> 8;
  result = 0;
  BYTE1(v1) = HIBYTE(a1x->y);
  switch ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v1] )
  {
    case 0:
      result = 1;
      break;
    case 1:
      result = 2;
      break;
    case 2:
      result = 4;
      break;
    case 3:
      result = 8;
      break;
    case 4:
      result = 16;
      break;
    case 5:
      result = 32;
      break;
    case 8:
      result = 256;
      break;
    case 9:
      result = 512;
      break;
    case 10:
      result = 0x100000;
      break;
    case 11:
      result = 0x200000;
      break;
    case 12:
      result = 0x400000;
      break;
    case 13:
    case 14:
      return result;
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      result = 1024;
      break;
    case 21:
    case 22:
    case 24:
      result = 0x20000;
      break;
    case 23:
      result = 0x40000;
      break;
    case 25:
    case 27:
      result = 0x80000;
      break;
    case 26:
      result = 0x10000;
      break;
    default:
      result = 0x800000;
      break;
  }
  return result;
}
// 10000: using guessed type int sub_10000();
// 80000: using guessed type int dword_80000;

//----- (000118C0) --------------------------------------------------------
bool sub_118C0(axis_3d* a1, axis_4d* a2, axis_3d* a3, axis_4d* a4)
{
  __int64 v4; // rax
  bool result; // eax

  result = 0;
  if ( abs16(a3->x - a1->x) < a2->var_u16_29875_80 + a4->var_u16_29875_80)
  {
    v4 = (__int16)(a3->y - a1->y);
    if ( (int)((HIDWORD(v4) ^ v4) - HIDWORD(v4)) < a2->var_u16_29877_82 + a4->var_u16_29877_82
      && (int)abs32((__int16)a1->z + a2->var_u16_29873_78 - ((__int16)a3->z + a4->var_u16_29873_78)) < a2->var_u16_29879_84 + a4->var_u16_29879_84)
    {
      return 1;
    }
  }
  return result;
}

//----- (00011950) --------------------------------------------------------
bool sub_11950(Type_AE400_29795* a1x, Type_AE400_29795* a2x)
{
  return sub_118C0(&a1x->var_u32_29867_72, &a1x->var_u16_29873_78, &a2x->var_u32_29867_72, &a2x->var_u16_29873_78);
}

//----- (00011980) --------------------------------------------------------
int sub_11980(int a1)
{
  int v1; // edx
  int v2; // ebp
  int v3; // edi
  int i; // ebx
  int v6; // ebx
  int v7; // [esp+0h] [ebp-1Ch] BYREF
  int v8; // [esp+4h] [ebp-18h] BYREF
  int v9; // [esp+8h] [ebp-14h]

  v1 = *(__int16 *)(a1 + 80) + 255;
  v9 = (*(__int16 *)(a1 + 72) + 128) >> 8;
  v2 = (*(__int16 *)(a1 + 74) + 128) >> 8;
  v3 = sub_11410(0, (v1 - (__CFSHL__(v1 >> 31, 8) + (v1 >> 31 << 8))) >> 8);
  if ( !v3 )
    return 0;
  while ( sub_114B0(v3, (uint32*)&v8, (uint32*)&v7) == 1 )
  {
    for ( i = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)(v2 + v7) + (unsigned __int8)(v8 + v9)];
          ;
          i = 164 * *(unsigned __int16 *)(v6 + 20) )
    {
      v6 = dword_AE400_AE3F0() + 29795 + i;
      if ( v6 == dword_AE400_AE3F0() + 29795 )
        break;
      if ( (*(_BYTE *)(v6 + 16) & 8) != 0
        && (*(char *)(a1 + 66) == -1
         || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v6 + 64) && *(char *)(a1 + 67) == -1
         || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v6 + 64) && *(_BYTE *)(a1 + 67) == *(_BYTE *)(v6 + 65))
        && *(_WORD *)(a1 + 24) != *(_WORD *)(v6 + 24)
        && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v6) )
      {
        sub_11490(v3);
        return v6;
      }
    }
  }
  sub_11490(v3);
  return 0;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (00011AC0) --------------------------------------------------------
int sub_11AC0(_WORD *a1)
{
  int v1; // edx
  int v2; // ebp
  int v3; // edi
  int i; // ebx
  char v6; // dh
  __int16 v7; // ax
  int v8; // ebx
  int v9; // [esp+0h] [ebp-1Ch] BYREF
  int v10; // [esp+4h] [ebp-18h] BYREF
  int v11; // [esp+8h] [ebp-14h]

  v1 = (__int16)a1[40] + 255;
  v11 = ((__int16)a1[37] + 128) >> 8;
  v2 = ((__int16)a1[36] + 128) >> 8;
  v3 = sub_11410(0, (v1 - (__CFSHL__(v1 >> 31, 8) + (v1 >> 31 << 8))) >> 8);
  if ( !v3 )
    return 0;
  while ( sub_114B0(v3, (uint32*)&v10, (uint32*)&v9) == 1 )
  {
    for ( i = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)(v11 + v9) + (unsigned __int8)(v2 + v10)];
          ;
          i = 164 * *(unsigned __int16 *)(v8 + 20) )
    {
      v8 = dword_AE400_AE3F0() + 29795 + i;
      if ( v8 == dword_AE400_AE3F0() + 29795 )
        break;
      if ( (*(_BYTE *)(v8 + 16) & 8) != 0 && *(_BYTE *)(v8 + 64) == 10 )
      {
        v6 = *(_BYTE *)(v8 + 65);
        if ( v6 == 39 || v6 == 40 || v6 == 45 )
        {
          v7 = a1[12];
          if ( v7 != *(_WORD *)(v8 + 24) && v7 != *(unsigned __int16 *)(v8 + 144) && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v8) )
          {
            sub_11490(v3);
            return v8;
          }
        }
      }
    }
  }
  sub_11490(v3);
  return 0;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (00011C00) --------------------------------------------------------
int sub_11C00(__int16 *a1)
{
  int v1; // edx
  int v2; // ebp
  int v3; // edi
  int i; // eax
  int v6; // ebx
  int v7; // [esp+0h] [ebp-1Ch] BYREF
  int v8; // [esp+4h] [ebp-18h] BYREF
  int v9; // [esp+8h] [ebp-14h]

  v1 = a1[40] + 255;
  v9 = (a1[37] + 128) >> 8;
  v2 = (a1[36] + 128) >> 8;
  v3 = sub_11410(0, (v1 - (__CFSHL__(v1 >> 31, 8) + (v1 >> 31 << 8))) >> 8);
  if ( !v3 )
    return 0;
  while ( sub_114B0(v3, (uint32*)&v8, (uint32*)&v7) == 1 )
  {
    for ( i = mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)(v7 + v9) + (unsigned __int8)(v2 + v8)];
          ;
          i = *(unsigned __int16 *)(v6 + 20) )
    {
      v6 = dword_AE400_AE3F0() + 29795 + 164 * i;
      if ( v6 == dword_AE400_AE3F0() + 29795 )
        break;
      if ( (*(_BYTE *)(v6 + 16) & 8) != 0
        && *(_BYTE *)(v6 + 64) == 10
        && *(_BYTE *)(v6 + 65) == 39
        && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v6) )
      {
        sub_11490(v3);
        return v6;
      }
    }
  }
  sub_11490(v3);
  return 0;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

int counter_sub_11D10 = 0;

//----- (00011D10) --------------------------------------------------------
Type_AE400_29795* sub_11D10(Type_AE400_29795* event)//1E2D10
{
  int v1; // edx
  int v2; // ebp
  int v3; // edi
  int i; // ebx
  Type_AE400_29795* v6; // ebx
  int v7; // [esp+0h] [ebp-1Ch] BYREF
  int v8; // [esp+4h] [ebp-18h] BYREF
  int v9; // [esp+8h] [ebp-14h]

  v1 = event->var_u16_29873_78.var_u16_29875_80 + 255;
  v9 = (event->var_u32_29867_72.x + 128) >> 8;
  v2 = (event->var_u32_29867_72.y + 128) >> 8;
  v3 = sub_11410(0, (v1 - (__CFSHL__(v1 >> 31, 8) + (v1 >> 31 << 8))) >> 8);
  if ( !v3 )
    return 0;
  while (sub_114B0(v3, (uint32*)&v8, (uint32*)&v7) == 1 )
  {
    for ( i = mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)(v2 + v7) + (unsigned __int8)(v8 + v9)];
          ;
          i = v6->var_u16_29815_20)
    {
        //debug
        //adres  1E2DFF
        if (counter_sub_11D10==0x491)
        {
            counter_sub_11D10++;
            counter_sub_11D10--;
        }
        counter_sub_11D10++;
        //debug

      v6 = &str_AE400_AE3F0->str_29795[i];
      if ( v6 == str_AE400_AE3F0->str_29795)
        break;
      if ( (event->sClass_29861_66 == -1
         || event->sClass_29861_66 == v6->var_u8_29859_64 && event->sModel_29862_67 == -1
         || event->sClass_29861_66 == v6->var_u8_29859_64 && event->sModel_29862_67 == v6->var_u8_29860_65)
        && event->id_29819_24 != v6->id_29819_24
        && sub_11950(event, v6) )
      {
        sub_11490(v3);
        return v6;
      }
    }
  }
  sub_11490(v3);
  return nullptr;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (00011E50) --------------------------------------------------------
int sub_11E50(__int16 *a1, char a2, char a3)
{
  int v3; // ebp
  __int16 i; // di
  int v5; // ebx
  char v6; // al
  int result; // eax
  unsigned int v8; // ebx
  int v9; // [esp+0h] [ebp-1Ch]
  __int16 v10; // [esp+4h] [ebp-18h]
  int v11; // [esp+8h] [ebp-14h]

  v3 = dword_AE400_AE3F0();
  v11 = (*a1 - 128) >> 8;
  v10 = 0;
  v9 = (a1[1] - 128) >> 8;
  do
  {
    for ( i = 0; i < 2; ++i )
    {
      v5 = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)(v10 + v9) + (unsigned __int8)(i + v11)];
      while ( 1 )
      {
        v8 = v3 + 29795 + v5;
        if ( v8 <= v3 + 29795 )
          break;
        v6 = *(_BYTE *)(v8 + 64);
        dword_AE400_AE3F0(v3);
        if ( v6 == a2 && a3 == *(_BYTE *)(v8 + 65) && sub_42340((axis_3d*)(uint16*)a1, (axis_3d*)(_WORD *)(v8 + 72)) <= 0x80 )
        {
          result = 1;
          v3 = dword_AE400_AE3F0();
          goto LABEL_13;
        }
        v5 = 164 * *(unsigned __int16 *)(v8 + 20);
        v3 = dword_AE400_AE3F0();
      }
    }
    ++v10;
  }
  while ( v10 < 2 );
  result = 0;
LABEL_13:
  dword_AE400_AE3F0(v3);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (00011F50) --------------------------------------------------------
int sub_11F50(axis_3d* position)
{
  return sub_724C0_729D0(position->x, position->y);
}

//----- (000120B0) --------------------------------------------------------
void sub_120B0(Type_AE400_29795* a1x, unsigned __int8 a2, unsigned __int16 a3)
{
  unsigned int i; // esi
  int result; // eax
  int v5; // ebp
  int j; // esi
  int v7; // esi
  int v8; // ebp
  int v9; // eax
  int v10; // esi
  char v11; // cl
  int v12; // eax
  int v13; // esi
  int v14; // [esp+0h] [ebp-48h]
  int v15; // [esp+4h] [ebp-44h]
  int v16; // [esp+8h] [ebp-40h]
  int v17; // [esp+Ch] [ebp-3Ch]
  int v18; // [esp+14h] [ebp-34h]
  int v19; // [esp+18h] [ebp-30h]
  int v20; // [esp+1Ch] [ebp-2Ch]
  int v21; // [esp+20h] [ebp-28h]
  int v22; // [esp+28h] [ebp-20h]
  unsigned __int8 v23; // [esp+2Ch] [ebp-1Ch]
  int v24; // [esp+30h] [ebp-18h]

  v24 = 1 << a2;
  if ( a2 )
  {
    v14 = (a1x->var_u32_29867_72.x + 128) >> 8;
    v22 = (a1x->var_u16_29873_78.var_u16_29875_80
         + 255
         - (__CFSHL__((a1x->var_u16_29873_78.var_u16_29875_80 + 255) >> 31, 8)
          + ((a1x->var_u16_29873_78.var_u16_29875_80 + 255) >> 31 << 8))) >> 8;
    result = -v22;
    v20 = -v22;
    if ( -v22 <= v22 )
    {
      v17 = ((a1x->var_u32_29867_72.y + 128) >> 8) - v22;
      do
      {
        v8 = -v22;
        if ( -v22 <= v22 )
        {
          v23 = v14 - v22;
          do
          {
            v9 = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)v17 + v23];
            v10 = dword_AE400_AE3F0() + 29795;
            while ( 1 )
            {
              v13 = v9 + v10;
              if ( v13 == dword_AE400_AE3F0() + 29795 )
                break;
              if (a1x->id_29819_24 != *(_WORD *)(v13 + 24) )
              {
                v11 = *(_BYTE *)(v13 + 64);
                if ( v11 )
                {
                  if ( (*(_BYTE *)(v13 + 16) & 8) != 0
                    && ((unsigned __int16)v24 & *(_WORD *)(v13 + 28)) != 0
                    && (a1x->sClass_29861_66 == -1
                     || v11 == a1x->sClass_29861_66 && a1x->sModel_29862_67 == -1
                     || a1x->sClass_29861_66 == *(_BYTE *)(v13 + 64) && a1x->sModel_29862_67 == *(_BYTE *)(v13 + 65))
                    && sub_11950(a1x, (Type_AE400_29795*)v13) )
                  {
                    v12 = v13 + 6 * a2;
                    if ( *(_WORD *)(v12 + 94) )
                      *(_DWORD *)(v12 + 90) += a3;
                    else
                      *(_DWORD *)(v12 + 90) = a3;
                    *(_WORD *)(v13 + 6 * a2 + 94) = a1x->id_29819_24;
                  }
                }
              }
              v10 = 164 * *(unsigned __int16 *)(v13 + 20);
              v9 = dword_AE400_AE3F0() + 29795;
            }
            ++v8;
            ++v23;
          }
          while ( v8 <= v22 );
        }
        result = ++v17;
        ++v20;
      }
      while ( v20 <= v22 );
    }
  }
  else
  {
    for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
    {
      if ( *(_BYTE *)(i + 65) == 2 && *(_WORD *)(i + 24) != a1x->id_29819_24 && sub_11950(a1x, (Type_AE400_29795*)i) )
      {
        if ( *(_WORD *)(i + 94) )
          *(_DWORD *)(i + 90) += a3;
        else
          *(_DWORD *)(i + 90) = a3;
        *(_WORD *)(i + 94) = a1x->id_29819_24;
      }
    }
    v18 = (a1x->var_u32_29867_72.x
         - 128
         - (__CFSHL__((a1x->var_u32_29867_72.x - 128) >> 31, 8)
          + ((a1x->var_u32_29867_72.x - 128) >> 31 << 8))) >> 8;
    v16 = (a1x->var_u16_29873_78.var_u16_29875_80
         + 255
         - (__CFSHL__((a1x->var_u16_29873_78.var_u16_29875_80 + 255) >> 31, 8)
          + ((a1x->var_u16_29873_78.var_u16_29875_80 + 255) >> 31 << 8))) >> 8;
    result = -v16;
    v15 = -v16;
    if ( -v16 <= v16 )
    {
      v19 = ((a1x->var_u32_29867_72.y
            - 128
            - (__CFSHL__((a1x->var_u32_29867_72.y - 128) >> 31, 8)
             + ((a1x->var_u32_29867_72.y - 128) >> 31 << 8))) >> 8)
          - v16;
      do
      {
        v5 = -v16;
        if ( -v16 <= v16 )
        {
          v21 = v18 - v16;
          do
          {
            for ( j = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)v19 + (unsigned __int8)v21];
                  ;
                  j = 164 * *(unsigned __int16 *)(v7 + 20) )
            {
              v7 = dword_AE400_AE3F0() + 29795 + j;
              if ( v7 == dword_AE400_AE3F0() + 29795 )
                break;
              if (a1x->id_29819_24 != *(_WORD *)(v7 + 24)
                && sub_11950(a1x, (Type_AE400_29795*)v7)
                && ((unsigned __int16)v24 & *(_WORD *)(v7 + 28)) != 0
                && (*(_BYTE *)(v7 + 16) & 8) != 0
                && (*(_BYTE *)(v7 + 64) != 3 || *(_BYTE *)(v7 + 65) != 2)
                && (a1x->sClass_29861_66 == -1
                 || a1x->sClass_29861_66 == *(_BYTE *)(v7 + 64) && a1x->sModel_29862_67 == -1
                 || a1x->sClass_29861_66 == *(_BYTE *)(v7 + 64) && a1x->sModel_29862_67 == *(_BYTE *)(v7 + 65)) )
              {
                if ( *(_WORD *)(v7 + 94) )
                  *(_DWORD *)(v7 + 90) += a3;
                else
                  *(_DWORD *)(v7 + 90) = a3;
                *(_WORD *)(v7 + 94) = a1x->id_29819_24;
              }
            }
            result = v21 + 1;
            ++v5;
            ++v21;
          }
          while ( v5 <= v16 );
        }
        LOBYTE(v19) = v19 + 1;
        ++v15;
      }
      while ( v15 <= v16 );
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (000124F0) --------------------------------------------------------
int sub_124F0(int a1, char a2, unsigned __int16 a3)
{
  int result; // eax
  unsigned int i; // ebx
  int v5; // ebp
  int j; // eax
  int v7; // ebx
  int v8; // [esp+0h] [ebp-34h]
  unsigned __int8 v9; // [esp+4h] [ebp-30h]
  int v10; // [esp+8h] [ebp-2Ch]
  int v11; // [esp+10h] [ebp-24h]
  int v12; // [esp+14h] [ebp-20h]

  result = 1 << a2;
  if ( !a2 )
  {
    for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
    {
      if ( *(_BYTE *)(i + 65) == 2 && *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)i) )
      {
        if ( *(_WORD *)(i + 94) )
          *(_DWORD *)(i + 90) += a3;
        else
          *(_DWORD *)(i + 90) = a3;
        *(_WORD *)(i + 94) = *(_WORD *)(a1 + 24);
      }
    }
    v12 = (*(__int16 *)(a1 + 72)
         - 128
         - (__CFSHL__((*(__int16 *)(a1 + 72) - 128) >> 31, 8)
          + ((*(__int16 *)(a1 + 72) - 128) >> 31 << 8))) >> 8;
    v11 = (*(__int16 *)(a1 + 80)
         + 255
         - (__CFSHL__((*(__int16 *)(a1 + 80) + 255) >> 31, 8)
          + ((*(__int16 *)(a1 + 80) + 255) >> 31 << 8))) >> 8;
    result = -v11;
    v8 = -v11;
    if ( -v11 <= v11 )
    {
      v10 = ((*(__int16 *)(a1 + 74)
            - 128
            - (__CFSHL__((*(__int16 *)(a1 + 74) - 128) >> 31, 8)
             + ((*(__int16 *)(a1 + 74) - 128) >> 31 << 8))) >> 8)
          - v11;
      do
      {
        v5 = -v11;
        if ( -v11 <= v11 )
        {
          v9 = v12 - v11;
          do
          {
            for ( j = mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)v10 + v9]; ; j = *(unsigned __int16 *)(v7 + 20) )
            {
              v7 = dword_AE400_AE3F0() + 29795 + 164 * j;
              if ( v7 == dword_AE400_AE3F0() + 29795 )
                break;
              if ( *(_WORD *)(a1 + 24) != *(_WORD *)(v7 + 24)
                && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v7)
                && ((unsigned __int16)(1 << a2) & *(_WORD *)(v7 + 28)) != 0
                && (*(_BYTE *)(v7 + 16) & 8) != 0
                && (*(_BYTE *)(v7 + 64) != 3 || *(_BYTE *)(v7 + 65) != 2)
                && (*(char *)(a1 + 66) == -1
                 || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v7 + 64) && *(char *)(a1 + 67) == -1
                 || *(_BYTE *)(a1 + 66) == *(_BYTE *)(v7 + 64) && *(_BYTE *)(a1 + 67) == *(_BYTE *)(v7 + 65)) )
              {
                if ( *(_BYTE *)(v7 + 64) != 2 || *(_BYTE *)(v7 + 65) )
                {
                  if ( *(_WORD *)(v7 + 94) )
                    *(_DWORD *)(v7 + 90) += a3;
                  else
                    *(_DWORD *)(v7 + 90) = a3;
                  *(_WORD *)(v7 + 94) = *(_WORD *)(a1 + 24);
                }
                else
                {
                  if ( *(_WORD *)(v7 + 94) )
                    *(_DWORD *)(v7 + 90) += a3 / 10;
                  else
                    *(_DWORD *)(v7 + 90) = a3 / 10;
                  *(_WORD *)(v7 + 94) = *(_WORD *)(a1 + 24);
                }
              }
            }
            ++v5;
            ++v9;
          }
          while ( v5 <= v11 );
        }
        result = v8 + 1;
        LOBYTE(v10) = v10 + 1;
        v8 = result;
      }
      while ( result <= v11 );
    }
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (000127E0) --------------------------------------------------------
int sub_127E0(Type_AE400_29795* a1x, char a2, unsigned __int16 a3)
{
  int result; // eax
  unsigned int i; // ebx
  int v5; // ebp
  int v6; // eax
  int v7; // ebx
  int v8; // ebx
  int v9; // [esp+0h] [ebp-30h]
  int v10; // [esp+4h] [ebp-2Ch]
  int v11; // [esp+Ch] [ebp-24h]
  unsigned __int8 v12; // [esp+10h] [ebp-20h]
  int v13; // [esp+14h] [ebp-1Ch]

  result = 1 << a2;
  if ( !a2 )
  {
    for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
    {
      if ( *(_BYTE *)(i + 65) == 2 && sub_11950(a1x, (Type_AE400_29795*)i) )
      {
        *(_WORD *)(i + 50) = 30;
        //a1x->var_u32_29867_72
        if ( *(_WORD *)(i + 24) != a1x->id_29819_24)
        {
          if ( *(_WORD *)(i + 94) )
            *(_DWORD *)(i + 90) += a3;
          else
            *(_DWORD *)(i + 90) = a3;
          *(_WORD *)(i + 94) = a1x->id_29819_24;
        }
      }
    }
    v11 = (a1x->var_u32_29867_72.x
         - 128
         - (__CFSHL__((a1x->var_u32_29867_72.x - 128) >> 31, 8)
          + ((a1x->var_u32_29867_72.x - 128) >> 31 << 8))) >> 8;
    v13 = (a1x->var_u16_29873_78.var_u16_29875_80
         + 255
         - (__CFSHL__((a1x->var_u16_29873_78.var_u16_29875_80 + 255) >> 31, 8)
          + ((a1x->var_u16_29873_78.var_u16_29875_80 + 255) >> 31 << 8))) >> 8;
    result = -v13;
    v10 = -v13;
    if ( -v13 <= v13 )
    {
      v9 = ((a1x->var_u32_29867_72.y
           - 128
           - (__CFSHL__((a1x->var_u32_29867_72.y - 128) >> 31, 8)
            + ((a1x->var_u32_29867_72.y - 128) >> 31 << 8))) >> 8)
         - v13;
      do
      {
        v5 = -v13;
        if ( -v13 <= v13 )
        {
          v12 = v11 - v13;
          do
          {
            v6 = 164 * mapEntityIndex_10C1E0_10C1D0[256 * (unsigned __int8)v9 + v12];
            v7 = dword_AE400_AE3F0() + 29795;
            while ( 1 )
            {
              v8 = v6 + v7;
              if ( v8 == dword_AE400_AE3F0() + 29795 )
                break;
              if (a1x->id_29819_24 != *(_WORD *)(v8 + 24)
                && sub_11950(a1x, (Type_AE400_29795*)v8)
                && ((unsigned __int16)(1 << a2) & *(_WORD *)(v8 + 28)) != 0
                && (*(_BYTE *)(v8 + 16) & 8) != 0
                && (*(_BYTE *)(v8 + 64) != 3 || *(_BYTE *)(v8 + 65) != 2)
                && (a1x->sClass_29861_66 == -1
                 || a1x->sClass_29861_66 == *(_BYTE *)(v8 + 64) && a1x->sModel_29862_67 == -1
                 || a1x->sClass_29861_66 == *(_BYTE *)(v8 + 64) && a1x->sModel_29862_67 == *(_BYTE *)(v8 + 65)) )
              {
                if ( *(_WORD *)(v8 + 94) )
                  *(_DWORD *)(v8 + 90) += a3;
                else
                  *(_DWORD *)(v8 + 90) = a3;
                *(_WORD *)(v8 + 94) = a1x->id_29819_24;
              }
              v7 = 164 * *(unsigned __int16 *)(v8 + 20);
              v6 = dword_AE400_AE3F0() + 29795;
            }
            ++v5;
            ++v12;
          }
          while ( v5 <= v13 );
        }
        result = v10 + 1;
        LOBYTE(v9) = v9 + 1;
        v10 = result;
      }
      while ( result <= v13 );
    }
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (00012B50) --------------------------------------------------------
int sub_12B50(Type_AE400_29795* a1x, int a2, unsigned __int8 a3, unsigned __int16 a4)
{
  int v4; // eax
  int result; // eax

  v4 = a2 + 6 * a3;
  if ( *(_WORD *)(v4 + 94) )
    *(_DWORD *)(v4 + 90) = a4;
  else
    *(_DWORD *)(v4 + 90) += a4;
  result = a2 + 6 * a3;
  *(_WORD *)(result + 94) = a1x->id_29819_24;
  return result;
}

//----- (00012C50) --------------------------------------------------------
void sub_12C50(_WORD *a1)
{
  unsigned int v1; // ebx
  __int16 v2; // di
  int v3; // esi
  int v4; // ebp
  __int16 v6; // [esp+0h] [ebp-14h]

  sub_37150((Type_AE400_29795*)a1, a1[13] + 1);
  v1 = *(_DWORD *)(dword_AE408_AE3F8() + 36470);
  v2 = a1[36];
  v3 = (__int16)a1[40] + 256;
  v4 = (__int16)a1[41] + 256;
  v6 = a1[37];
  while ( v1 > dword_AE400_AE3F0() + 29795 )
  {
    if ( abs16(*(_WORD *)(v1 + 72) - v2) <= v3 + *(__int16 *)(v1 + 80)
      && abs16(*(_WORD *)(v1 + 74) - v6) <= v4 + *(__int16 *)(v1 + 82) )
    {
      *(_DWORD *)(v1 + 12) = -1;
    }
    v1 = *(_DWORD *)v1;
  }
  sub_37150((Type_AE400_29795*)a1, a1[13]);
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00012D10) --------------------------------------------------------
char sub_12D10(_WORD *a1)
{
  unsigned int i; // ebx
  __int16 v3; // si
  unsigned __int16 v4; // ax
  __int16 v5; // dx
  __int16 v6; // si
  unsigned __int16 v7; // ax
  __int16 v8; // dx
  __int16 v9; // si
  unsigned __int16 v10; // ax
  __int16 v11; // dx
  __int16 v12; // si
  unsigned __int16 v13; // ax
  __int16 v14; // dx
  __int16 v15; // [esp+0h] [ebp-28h]
  unsigned __int16 v16; // [esp+8h] [ebp-20h]
  __int16 v17; // [esp+Ch] [ebp-1Ch]
  __int16 v18; // [esp+10h] [ebp-18h]
  __int16 v19; // [esp+10h] [ebp-18h]
  __int16 v20; // [esp+18h] [ebp-10h]
  __int16 v21; // [esp+18h] [ebp-10h]

  v20 = (__int16)a1[40] >> 8;
  v18 = (__int16)a1[41] >> 8;
  sub_37150((Type_AE400_29795*)a1, a1[13] + 1);
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(_BYTE *)(i + 65) == 2 && (_WORD *)i != a1 && sub_11950((Type_AE400_29795*)i, (Type_AE400_29795*)a1) )
      goto LABEL_5;
  }
  v15 = (__int16)a1[40] >> 8;
  v17 = (__int16)a1[41] >> 8;
  LOBYTE(v16) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
  HIBYTE(v16) = ((unsigned __int16)(a1[37] + 128) >> 8) - v17;
  v21 = v15 - v20;
  v19 = v17 - v18;
  v3 = v19;
  v4 = v16;
  if ( v19 )
  {
    while ( 1 )
    {
      v5 = 2 * v15;
      if ( 2 * v15 )
        break;
LABEL_13:
      LOBYTE(v4) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
      ++HIBYTE(v4);
      if ( !--v3 )
        goto LABEL_14;
    }
    while ( mapAngle_FC1E0_FC1D0[v4] >= 0 )
    {
      LOBYTE(v4) = v4 + 1;
      if ( !--v5 )
        goto LABEL_13;
    }
    goto LABEL_5;
  }
LABEL_14:
  LOBYTE(v7) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
  v6 = v19;
  HIBYTE(v7) = HIBYTE(v16) + 2 * v17 - v19;
  if ( v19 )
  {
    while ( 1 )
    {
      v8 = 2 * v15;
      if ( 2 * v15 )
        break;
LABEL_18:
      LOBYTE(v7) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
      ++HIBYTE(v7);
      if ( !--v6 )
        goto LABEL_19;
    }
    while ( mapAngle_FC1E0_FC1D0[v7] >= 0 )
    {
      LOBYTE(v7) = v7 + 1;
      if ( !--v8 )
        goto LABEL_18;
    }
    goto LABEL_5;
  }
LABEL_19:
  LOBYTE(v10) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
  v9 = v19;
  HIBYTE(v10) = v19 + HIBYTE(v16);
  if ( v19 )
  {
    while ( 1 )
    {
      v11 = v21;
      if ( v21 )
        break;
LABEL_23:
      LOBYTE(v10) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
      ++HIBYTE(v10);
      if ( !--v9 )
        goto LABEL_24;
    }
    while ( mapAngle_FC1E0_FC1D0[v10] >= 0 )
    {
      LOBYTE(v10) = v10 + 1;
      if ( !--v11 )
        goto LABEL_23;
    }
    goto LABEL_5;
  }
LABEL_24:
  LOBYTE(v13) = ((unsigned __int16)(a1[36] + 128) >> 8) - v21;
  v12 = v19;
  HIBYTE(v13) = v19 + HIBYTE(v16);
  if ( v19 )
  {
    while ( 1 )
    {
      v14 = v21;
      if ( v21 )
        break;
LABEL_29:
      LOBYTE(v13) = ((unsigned __int16)(a1[36] + 128) >> 8) - v15;
      ++HIBYTE(v13);
      if ( !--v12 )
        goto LABEL_30;
    }
    while ( mapAngle_FC1E0_FC1D0[v13] >= 0 )
    {
      LOBYTE(v13) = v13 + 1;
      if ( !--v14 )
        goto LABEL_29;
    }
LABEL_5:
    sub_37150((Type_AE400_29795*)a1, a1[13]);
    return 0;
  }
LABEL_30:
  sub_37150((Type_AE400_29795*)a1, a1[13]);
  return 1;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00012F70) --------------------------------------------------------
_BOOL1 sub_12F70(_WORD *a1)
{
  _BOOL1 v1; // bl
  unsigned int v2; // ecx
  unsigned __int16 v3; // ax
  __int16 v4; // dx
  __int16 v5; // si
  unsigned __int16 v7; // [esp+4h] [ebp-14h]

  v1 = 0;
  v2 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
  do
  {
    if ( v2 <= dword_AE400_AE3F0() + 29795 )
      break;
    if ( *(_BYTE *)(v2 + 65) == 2
      && abs16(*(_WORD *)(v2 + 72) - *a1) <= *(__int16 *)(v2 + 80) + 2048
      && abs16(*(_WORD *)(v2 + 74) - a1[1]) <= *(__int16 *)(v2 + 82) + 2048 )
    {
      v1 = 1;
    }
    v2 = *(_DWORD *)v2;
  }
  while ( !v1 );
  if ( !v1 )
  {
    LOBYTE(v7) = HIBYTE(*a1) - 8;
    HIBYTE(v7) = HIBYTE(a1[1]) - 8;
    v5 = 8;
    v3 = v7;
    do
    {
      if ( v1 )
        break;
      v4 = 8;
      do
      {
        if ( v1 )
          break;
        v1 = mapAngle_FC1E0_FC1D0[v3] < 0;
        LOBYTE(v3) = v3 + 1;
        --v4;
      }
      while ( v4 );
      LOBYTE(v3) = HIBYTE(*a1) - 8;
      ++HIBYTE(v3);
      --v5;
    }
    while ( v5 );
  }
  return !v1;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00013170) --------------------------------------------------------
int sub_13170(int a1)
{
  int result; // eax

  sub_132B0(a1);
  switch ( *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) )
  {
    case 0:
      sub_136C0(a1);
      result = sub_136C0(a1);
      break;
    case 1:
      sub_13800(a1);
      result = sub_136C0(a1);
      break;
    case 2:
    case 5:
      sub_138E0();
      result = sub_136C0(a1);
      break;
    case 3:
      sub_138F0(a1);
      result = sub_136C0(a1);
      break;
    case 4:
      sub_13990((_WORD *)a1);
      result = sub_136C0(a1);
      break;
    case 6:
      sub_13BA0(a1);
      result = sub_136C0(a1);
      break;
    case 7:
      sub_13CA0(a1);
      result = sub_136C0(a1);
      break;
    case 8:
    case 9:
      sub_13DC0(a1);
      result = sub_136C0(a1);
      break;
    case 0xB:
      sub_13A70(a1);
      result = sub_136C0(a1);
      break;
    case 0xC:
      sub_13A10(a1);
      result = sub_136C0(a1);
      break;
    case 0xD:
      sub_13DC0(a1);
      goto LABEL_13;
    default:
LABEL_13:
      result = sub_136C0(a1);
      break;
  }
  return result;
}

//----- (000132B0) --------------------------------------------------------
int sub_132B0(int a1)
{
  int v1; // edx
  __int16 v2; // cx
  unsigned __int16 i; // ax
  int v4; // edx
  __int16 v5; // di
  unsigned __int16 j; // ax
  int v7; // ecx
  int v8; // esi
  unsigned __int16 v9; // di
  int v10; // edx
  int v11; // ecx
  int v12; // edx
  int v13; // edx
  unsigned __int16 v14; // si
  int v16; // edx
  unsigned __int8 v17; // cl
  int v18; // ecx
  int v19; // edi
  int v20; // edx
  unsigned int v21; // ebp
  int v22; // edi
  int v23; // eax
  int v24; // esi
  int v25; // edx
  int v26; // eax
  int v27; // eax
  char v29; // [esp+0h] [ebp-14h]

  v29 = 0;
  sub_16990();
  v1 = *(_DWORD *)(a1 + 160);
  v2 = *(_WORD *)(v1 + 404);
  if ( v2 < 0 )
    *(_WORD *)(v1 + 404) = v2 + 1;
  for ( i = 0; i < 0x18u; ++i )
  {
    v4 = *(_DWORD *)(a1 + 160) + 2 * i;
    v5 = *(_WORD *)(v4 + 724);
    if ( v5 > 0 )
      *(_WORD *)(v4 + 724) = v5 - 1;
  }
  for ( j = 0; j < 8u; ++j )
  {
    v7 = *(_DWORD *)(a1 + 160);
    v8 = 8 * j;
    v9 = *(_WORD *)(v7 + v8 + 460);
    if ( v9 < 0x601Fu )
    {
      *(_WORD *)(v7 + v8 + 460) = *(_WORD *)(v7 + 522) + 1 + v9;
      v10 = v8 + *(_DWORD *)(a1 + 160);
      if ( *(_WORD *)(v10 + 460) > 0x601Fu )
        *(_WORD *)(v10 + 460) = 24607;
    }
    v11 = *(_DWORD *)(a1 + 160);
    v12 = v11 + 8 * j;
    if ( *(_WORD *)(v12 + 460) > 0x601Fu )
    {
      if ( !*(_WORD *)(v12 + 462) )
        *(_WORD *)(v12 + 460) -= 256 - *(_WORD *)(v11 + 522);
      v13 = *(_DWORD *)(a1 + 160) + 8 * j;
      if ( *(_WORD *)(v13 + 460) < 0x601Fu )
        *(_WORD *)(v13 + 460) = 24607;
    }
  }
  sub_45C10((Type_AE400_29795*)a1);
  v14 = *(_WORD *)(*(_DWORD *)(a1 + 160) + 50);
  if ( v14 && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)(164 * v14 + dword_AE400_AE3F0() + 29795)) )
    v29 = 1;
  if ( v29 )
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 331) = 2;
  if ( *(_WORD *)(*(_DWORD *)(a1 + 160) + 331) )
  {
    memset((void*)(a1 + 90), 0, 36);
    --*(_WORD *)(*(_DWORD *)(a1 + 160) + 331);
  }
  else if ( sub_46540((Type_AE400_29795*)a1) == 2 )
  {
    *(_BYTE *)(a1 + 70) = 2;
    return 0;
  }
  sub_14EB0(a1);
  v16 = *(_DWORD *)(a1 + 160);
  v17 = *(_BYTE *)(v16 + 326);
  if ( v17 < 0xC8u )
    *(_BYTE *)(v16 + 326) = v17 + 1;
  *(_DWORD *)(a1 + 140) += *(_DWORD *)(a1 + 132);
  v18 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 341) + *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v18;
  if ( v18 < -1 )
    *(_DWORD *)(a1 + 12) = -1;
  v19 = *(_DWORD *)(a1 + 8);
  if ( *(_DWORD *)(a1 + 12) > v19 )
    *(_DWORD *)(a1 + 12) = v19;
  v20 = *(_DWORD *)(a1 + 160);
  v21 = *(_DWORD *)(v20 + 351);
  if ( v21 )
    *(_DWORD *)(v20 + 351) = v21 - 1;
  if ( v29 || (*(_BYTE *)(a1 + 17) & 0x10) != 0 )
  {
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 136) / 200;
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 341) = *(_DWORD *)(a1 + 8) / 200;
    if ( *(int *)(a1 + 132) < 1000 )
      *(_DWORD *)(a1 + 132) = 1000;
    *(_BYTE *)(a1 + 17) &= ~0x10u;
  }
  else
  {
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 136) / 2000;
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 341) = *(_DWORD *)(a1 + 8) / 500;
    if ( *(int *)(a1 + 132) < 100 )
      *(_DWORD *)(a1 + 132) = 100;
  }
  if ( *(int *)(a1 + 140) < 0 )
    *(_DWORD *)(a1 + 140) = 0;
  v22 = *(_DWORD *)(a1 + 136);
  if ( *(_DWORD *)(a1 + 140) > v22 )
    *(_DWORD *)(a1 + 140) = v22;
  sub_15EC0(a1);
  v23 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 526);
  if ( !(*(unsigned __int8 *)(a1 + 63) % (64 - ((v23 - (__CFSHL__(v23 >> 31, 2) + 4 * (v23 >> 31))) >> 2))) )
  {
    v24 = sub_16800(v21, a1);
    if ( v24 )
    {
      sub_16870(a1);
      sub_16890(a1, v24);
    }
    if ( *(_DWORD *)(a1 + 12) < *(_DWORD *)(a1 + 8) )
      sub_155F0(a1, 1u);
  }
  v25 = (__int16)sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  v26 = *(_DWORD *)(a1 + 156);
  if ( *(__int16 *)(a1 + 76) > v25 + *(__int16 *)(v26 + 10) )
    *(_WORD *)(a1 + 76) = *(_WORD *)(v26 + 10) + v25;
  v27 = *(_DWORD *)(a1 + 156);
  if ( *(__int16 *)(a1 + 76) < v25 + *(__int16 *)(v27 + 12) )
    *(_WORD *)(a1 + 76) = *(_WORD *)(v27 + 12) + v25;
  return 1;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000136C0) --------------------------------------------------------
int sub_136C0(int a1)
{
  int v2; // eax

  if ( sub_13F00(a1) )
  {
    sub_14C80(a1);
    return 1;
  }
  else if ( sub_14310(a1) )
  {
    sub_14DA0(a1);
    return 1;
  }
  else
  {
    v2 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 526);
    if ( *(unsigned __int8 *)(a1 + 63) % (64 - ((v2 - (__CFSHL__(v2 >> 31, 2) + 4 * (v2 >> 31))) >> 2)) )
    {
      return 1;
    }
    else if ( sub_14120(a1) )
    {
      sub_14C40(a1);
      return 1;
    }
    else if ( sub_143A0(a1) )
    {
      sub_14D00(a1);
      return 1;
    }
    else if ( sub_145B0(a1) )
    {
      sub_14D60(a1);
      return 1;
    }
    else if ( sub_147E0(a1) )
    {
      sub_14D40(a1);
      return 1;
    }
    else if ( sub_14230(a1) )
    {
      sub_14CE0(a1);
      return 1;
    }
    else
    {
      if ( sub_14B10(a1) )
        sub_14D20(a1);
      else
        sub_14DC0(a1);
      return 1;
    }
  }
}

//----- (00013800) --------------------------------------------------------
bool sub_13800(int a1)
{
  int v1; // ebx
  bool result; // eax
  int v3; // ebx
  int v4; // eax

  v1 = 164 * *(unsigned __int16 *)(a1 + 146) + dword_AE400_AE3F0() + 29795;
  result = sub_15440(a1, v1);
  if ( result )
  {
    *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v1 + 72));
    if ( sub_15470(a1, v1, 512, 2048) )
    {
      if ( sub_155F0(a1, 0x10u) )
        return 0;
      v3 = *(__int16 *)(a1 + 76) - (*(__int16 *)(v1 + 76) + 512);
      if ( v3 )
        v4 = v3 / (int)abs32(v3);
      else
        LOWORD(v4) = 0;
      *(_WORD *)(a1 + 76) += v4 * *(_WORD *)(*(_DWORD *)(a1 + 156) + 14);
    }
    return 1;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000138E0) --------------------------------------------------------
int sub_138E0()
{
  return 0;
}

//----- (000138F0) --------------------------------------------------------
int sub_138F0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a1 + 150));
  result = sub_15470(a1, 0, 2048, 3072);
  if ( result )
  {
    if ( sub_155F0(a1, 0x10u) )
    {
      return 0;
    }
    else
    {
      v2 = *(__int16 *)(a1 + 76) - (*(__int16 *)(a1 + 154) + 512);
      if ( v2 )
        v3 = v2 / (int)abs32(v2);
      else
        LOWORD(v3) = 0;
      *(_WORD *)(a1 + 76) += v3 * *(_WORD *)(*(_DWORD *)(a1 + 156) + 14);
      return 1;
    }
  }
  return result;
}

//----- (00013990) --------------------------------------------------------
bool sub_13990(_WORD *a1)
{
  int v1; // esi
  bool result; // eax

  v1 = 164 * (unsigned __int16)a1[73] + dword_AE400_AE3F0() + 29795;
  result = sub_15440((int)a1, v1);
  if ( result )
  {
    a1[17] = sub_42150_42490((axis_3d*)(a1 + 36), (axis_3d*)(_WORD *)(v1 + 72));
    return sub_15470((int)a1, v1, 256, 2048) == 0;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00013A10) --------------------------------------------------------
int sub_13A10(int a1)
{
  if ( !sub_15E60(a1, 2u) )
  {
    if ( sub_15A00(a1, 2u) )
    {
      sub_155F0(a1, 2u);
      return 0;
    }
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 12) = *(_WORD *)(a1 + 128);
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 14) = 1;
  }
  return 0;
}

//----- (00013A70) --------------------------------------------------------
bool sub_13A70(int a1)
{
  unsigned int v1; // esi

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50);
  if ( v1 <= dword_AE400_AE3F0() + 29795 )
  {
    if ( sub_15A00(a1, 0xCu) )
      sub_155F0(a1, 0xCu);
    if ( !sub_15E60(a1, 2u) )
    {
      if ( sub_15A00(a1, 2u) )
      {
        sub_155F0(a1, 2u);
        return 0;
      }
      *(_WORD *)(*(_DWORD *)(a1 + 160) + 12) = *(_WORD *)(a1 + 128);
      *(_WORD *)(*(_DWORD *)(a1 + 160) + 14) = 1;
    }
    return 0;
  }
  if ( sub_42410((_WORD *)(a1 + 72), (_WORD *)(v1 + 72)) > 104857600 && sub_155F0(a1, 0x13u) )
    return 1;
  sub_155F0(a1, 0xCu);
  if ( !sub_15440(a1, v1) )
    return 0;
  *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v1 + 72));
  return !sub_15470(a1, v1, 256, 2048);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00013BA0) --------------------------------------------------------
bool sub_13BA0(int a1)
{
  _WORD *v1; // esi
  bool result; // eax
  __int16 v3; // ax
  int v4; // ecx
  int v5; // eax

  v1 = (_WORD *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146));
  result = sub_15440(a1, (int)v1);
  if ( result )
  {
    *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(v1 + 36));
    if ( sub_15470(a1, (int)v1, 1024, 3072) )
    {
      if ( sub_155F0(a1, 3u) )
      {
        v3 = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(v1 + 36));
        if ( (unsigned __int16)sub_42210(*(_WORD *)(a1 + 30), v3) < 0x1Cu )
          v1[72] = *(_WORD *)(a1 + 24);
      }
      v4 = *(__int16 *)(a1 + 76) - ((__int16)v1[38] + 512);
      if ( v4 )
        v5 = v4 / (int)abs32(v4);
      else
        LOWORD(v5) = 0;
      *(_WORD *)(a1 + 76) += v5 * *(_WORD *)(*(_DWORD *)(a1 + 156) + 14);
    }
    return 1;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00013CA0) --------------------------------------------------------
bool sub_13CA0(int a1)
{
  int v1; // esi
  bool result; // eax
  int v3; // eax
  signed __int8 v4; // al
  int v5; // ecx
  int v6; // eax

  v1 = 164 * *(unsigned __int16 *)(a1 + 146) + dword_AE400_AE3F0() + 29795;
  result = sub_15440(a1, v1);
  if ( result )
  {
    *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v1 + 72));
    if ( sub_15470(a1, v1, 2048, 3584) )
    {
      v3 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 526);
      if ( !(*(unsigned __int8 *)(a1 + 63) % (64 - ((v3 - (__CFSHL__(v3 >> 31, 2) + 4 * (v3 >> 31))) >> 2))) )
      {
        v4 = sub_16310((_DWORD *)a1);
        if ( v4 != -1 && sub_155F0(a1, v4) )
          return 0;
        v5 = *(__int16 *)(a1 + 76) - (*(__int16 *)(v1 + 76) + 512);
        if ( v5 )
          v6 = v5 / (int)abs32(v5);
        else
          LOWORD(v6) = 0;
        *(_WORD *)(a1 + 76) += v6 * *(_WORD *)(*(_DWORD *)(a1 + 156) + 14);
      }
    }
    return 1;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00013DC0) --------------------------------------------------------
bool sub_13DC0(int a1)
{
  return sub_13DD0(a1);
}

//----- (00013DD0) --------------------------------------------------------
bool sub_13DD0(int a1)
{
  int v1; // esi
  bool result; // eax
  signed __int8 v3; // al
  unsigned __int8 v4; // di
  int v5; // eax

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
  result = sub_15440(a1, v1);
  if ( !result )
    return result;
  *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v1 + 72));
  if ( !sub_15470(a1, v1, 3072, 4096) || *(__int16 *)(*(_DWORD *)(a1 + 160) + 404) < 0 )
    return 1;
  v3 = sub_16030(a1);
  if ( v3 == -1 || (v4 = v3, !sub_15A00(a1, v3)) || !sub_155F0(a1, v4) )
  {
    v5 = *(__int16 *)(a1 + 76) - (*(__int16 *)(v1 + 76) + 512);
    if ( v5 )
      v5 /= (int)abs32(v5);
    *(_WORD *)(a1 + 76) += v5 * *(_WORD *)(*(_DWORD *)(a1 + 156) + 14);
    return 1;
  }
  if ( *(_BYTE *)(v1 + 65) <= 1u )
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 8 * *(__int16 *)(*(_DWORD *)(v1 + 160) + 48) + 462) = 0;
  return 0;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00013F00) --------------------------------------------------------
int sub_13F00(int a1)
{
  _WORD *v1; // esi
  __int16 v2; // bx
  unsigned int v3; // eax
  _WORD *v4; // esi
  int result; // eax
  unsigned int v6; // eax
  _WORD *v7; // esi
  int v8; // [esp+0h] [ebp-28h]
  __int16 v9; // [esp+4h] [ebp-24h]
  int v10; // [esp+8h] [ebp-20h]

  v1 = (_WORD *)(dword_AE400_AE3F0() + 29795);
  if ( !*(_WORD *)(*(_DWORD *)(a1 + 160) + 50) && sub_14E60(a1, 0x10u) && sub_15E90(a1, 0x10u) )
  {
    v1[12] = *(_WORD *)(a1 + 24);
    v8 = (int)(*(__int16 *)(a1 + 72)
             - (__CFSHL__((unsigned __int64)*(__int16 *)(a1 + 72) >> 32, 14)
              + ((unsigned __int64)*(__int16 *)(a1 + 72) >> 32 << 14))) >> 14;
    v10 = (int)(*(__int16 *)(a1 + 74)
              - (__CFSHL__((unsigned __int64)*(__int16 *)(a1 + 74) >> 32, 14)
               + ((unsigned __int64)*(__int16 *)(a1 + 74) >> 32 << 14))) >> 14;
    v9 = v10 + 4;
    do
    {
      v2 = v8;
      do
      {
        v1[36] = (v2 & 3) << 14;
        v1[37] = (v10 & 3) << 14;
        v3 = sub_15260((int)v1, 2u);
        if ( !v3 || sub_42300((_WORD *)(v3 + 72), v1 + 36) > 12288 )
        {
          v4 = v1 + 36;
          result = 1;
          *(_DWORD *)(a1 + 150) = *(_DWORD *)v4;
          *(_WORD *)(a1 + 154) = v4[2];
          return result;
        }
        v1[36] = (((v2 & 3) << 6) + 31) << 8;
        v1[37] = (((v10 & 3) << 6) + 31) << 8;
        v6 = sub_15260((int)v1, 2u);
        if ( !v6 || sub_42300((_WORD *)(v6 + 72), v1 + 36) > 12288 )
        {
          v7 = v1 + 36;
          result = 1;
          *(_DWORD *)(a1 + 150) = *(_DWORD *)v7;
          *(_WORD *)(a1 + 154) = v7[2];
          return result;
        }
        ++v2;
      }
      while ( v2 < (__int16)(v8 + 4) );
      LOWORD(v10) = v10 + 1;
    }
    while ( (__int16)v10 < v9 );
  }
  return 0;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00014120) --------------------------------------------------------
int sub_14120(int a1)
{
  unsigned int v1; // esi
  unsigned int v2; // eax
  unsigned int v3; // ebx
  int v4; // eax

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50);
  if ( v1 <= dword_AE400_AE3F0() + 29795 )
    return 0;
  v2 = sub_14E60(a1, 0x10u);
  v3 = v2;
  if ( !v2 )
    return 0;
  if ( *(_WORD *)(v2 + 48) )
    return 0;
  v4 = *(_DWORD *)(a1 + 160);
  if ( *(_WORD *)(v4 + 756)
    || !sub_12D10((_WORD *)(164 * *(unsigned __int16 *)(v4 + 50) + dword_AE400_AE3F0() + 29795))
    || *(_DWORD *)(a1 + 136) < *(_DWORD *)(v3 + 136)
    || *(_BYTE *)(v1 + 70) != 4 )
  {
    return 0;
  }
  *(_WORD *)(a1 + 146) = (int)(v1 - (dword_AE400_AE3F0() + 29795)) / 164;
  *(_WORD *)(a1 + 148) = sub_15420(v1);
  return 1;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00014230) --------------------------------------------------------
unsigned int sub_14230(int a1)
{
  unsigned int result; // eax
  unsigned int v2; // eax
  unsigned int v3; // eax
  int v4; // ecx

  result = sub_14E60(a1, 3u);
  if ( result )
  {
    v2 = sub_14E60(a1, 0x10u);
    if ( v2 )
    {
      if ( *(_DWORD *)(a1 + 136) <= *(_DWORD *)(v2 + 136) )
      {
        v3 = sub_15080(a1);
        v4 = v3;
        if ( v3 )
          goto LABEL_5;
      }
    }
    else
    {
      v3 = sub_15080(a1);
      v4 = v3;
      if ( v3 )
      {
LABEL_5:
        *(_WORD *)(a1 + 146) = (int)(v3 - (dword_AE400_AE3F0() + 29795)) / 164;
        *(_WORD *)(a1 + 148) = sub_15420(v4);
        return 1;
      }
    }
    return 0;
  }
  return result;
}
// 142B6: conditional instruction was optimized away because eax.4==0
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00014310) --------------------------------------------------------
int sub_14310(int a1)
{
  unsigned int v1; // ecx

  if ( *(_DWORD *)(a1 + 8) / 2 <= *(_DWORD *)(a1 + 12) )
    return 0;
  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50);
  if ( v1 <= dword_AE400_AE3F0() + 29795 )
    return 0;
  *(_WORD *)(a1 + 146) = 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50) / 164;
  *(_WORD *)(a1 + 148) = sub_15420(v1);
  return 1;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000143A0) --------------------------------------------------------
int sub_143A0(int a1)
{
  unsigned int i; // ebx
  int v2; // edi
  unsigned int v3; // eax
  int v4; // ebx
  int v6; // [esp+8h] [ebp-1Ch]
  unsigned int v7; // [esp+Ch] [ebp-18h]

  v7 = -1;
  if ( !sub_16920(a1) || !*(_WORD *)(*(_DWORD *)(a1 + 160) + 50) && sub_14E60(a1, 0x10u) )
    return 0;
  v6 = 0;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) && *(_BYTE *)(i + 65) == 2 )
    {
      if ( (v2 = 164 * *(__int16 *)(i + 24),
            50000 - *(_DWORD *)(dword_AE400_AE3F0() + v2 + 29931) / 10 * *(__int16 *)(*(_DWORD *)(a1 + 160) + 522) / 255 < *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 8 * *(__int16 *)(*(_DWORD *)(dword_AE400_AE3F0() + v2 + 29955) + 48) + 460))
        && sub_42410((_WORD *)(dword_AE400_AE3F0() + 29795 + v2 + 72), (_WORD *)(i + 72)) > 58982400
        && !sub_11950((Type_AE400_29795*)(dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(i + 24)), (Type_AE400_29795*)i)
        || *(_DWORD *)(i + 140) + 640 * (255 - *(__int16 *)(*(_DWORD *)(a1 + 160) + 522)) < *(_DWORD *)(164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50) + dword_AE400_AE3F0() + 29935) )
      {
        v3 = sub_42410((_WORD *)(a1 + 72), (_WORD *)(i + 72));
        if ( v3 < v7 )
        {
          v6 = i;
          v7 = v3;
        }
      }
    }
  }
  if ( !v6 )
    return 0;
  v4 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 28);
  if ( sub_42410((_WORD *)(v6 + 72), (_WORD *)(a1 + 72)) >= v4 * v4 )
    return 0;
  *(_WORD *)(a1 + 146) = (v6 - (dword_AE400_AE3F0() + 29795)) / 164;
  *(_WORD *)(a1 + 148) = sub_15420(v6);
  return 1;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (000145B0) --------------------------------------------------------
int sub_145B0(int a1)
{
  unsigned int v1; // ebp
  unsigned int i; // ebx
  int v3; // ecx
  int v4; // eax
  int v5; // edx
  unsigned int v7; // eax
  int v8; // ebx
  int v9; // [esp+8h] [ebp-18h]

  v1 = -1;
  if ( !sub_16920(a1) || !*(_WORD *)(*(_DWORD *)(a1 + 160) + 50) && sub_14E60(a1, 0x10u) )
    return 0;
  v9 = 0;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) && *(_BYTE *)(i + 65) <= 1u && !sub_16000(i, 0xCu) )
    {
      v3 = *(_DWORD *)(i + 160);
      v4 = *(_DWORD *)(a1 + 160);
      v5 = v4 + 8 * *(__int16 *)(v3 + 48);
      if ( *(_WORD *)(v5 + 462) == 1 )
      {
        *(_WORD *)(a1 + 146) = (int)(i - (dword_AE400_AE3F0() + 29795)) / 164;
        *(_WORD *)(a1 + 148) = sub_15420(i);
        return 1;
      }
      if ( 50000 - *(__int16 *)(v4 + 522) * (*(_DWORD *)(i + 136) / 10) / 255 <= *(unsigned __int16 *)(v5 + 460)
        || !*(_WORD *)(v3 + 50)
        && sub_14E60(i, 0x10u)
        && *(_DWORD *)(i + 140) + 32 * (255 - *(__int16 *)(*(_DWORD *)(a1 + 160) + 522)) < *(_DWORD *)(a1 + 140) )
      {
        v7 = sub_42410((_WORD *)(a1 + 72), (_WORD *)(i + 72));
        if ( v7 < v1 )
        {
          v9 = i;
          v1 = v7;
        }
      }
    }
  }
  if ( !v9 )
    return 0;
  v8 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 28) + 10;
  if ( sub_42410((_WORD *)(v9 + 72), (_WORD *)(a1 + 72)) >= v8 * v8 )
    return 0;
  *(_WORD *)(a1 + 146) = (v9 - (dword_AE400_AE3F0() + 29795)) / 164;
  *(_WORD *)(a1 + 148) = sub_15420(v9);
  return 1;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (000147E0) --------------------------------------------------------
int sub_147E0(int a1)
{
  unsigned int i; // ebx
  int v2; // edx
  int v3; // edi
  int v4; // ecx
  int v5; // ecx
  unsigned int v6; // eax
  int v7; // ebx
  _WORD *v9; // [esp+0h] [ebp-24h]
  unsigned int v10; // [esp+4h] [ebp-20h]
  int v11; // [esp+8h] [ebp-1Ch]
  int v12; // [esp+Ch] [ebp-18h]

  v10 = -1;
  if ( !sub_16920(a1) )
    return 0;
  v12 = 0;
  v9 = (_WORD *)(a1 + 72);
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) && *(_BYTE *)(i + 65) == 3 )
    {
      v2 = dword_AE400_AE3F0() + 164 * *(__int16 *)(i + 24);
      v3 = *(_DWORD *)(v2 + 29955);
      v4 = *(_DWORD *)(a1 + 160);
      v11 = *(unsigned __int16 *)(v4 + 8 * *(__int16 *)(v3 + 48) + 460);
      v5 = *(__int16 *)(v4 + 522);
      if ( 50000 - v5 * (*(_DWORD *)(v2 + 29931) / 10) / 255 < v11
        && 10 * (275 - v5) < *(_DWORD *)(i + 140)
        && !sub_11950((Type_AE400_29795*)i, (Type_AE400_29795*)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v3 + 50))) )
      {
        v6 = sub_42410(v9, (_WORD *)(i + 72));
        if ( v6 < v10 )
        {
          v12 = i;
          v10 = v6;
        }
      }
    }
  }
  if ( !v12 )
    return 0;
  v7 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 28);
  if ( sub_42410((_WORD *)(v12 + 72), v9) >= v7 * v7 )
    return 0;
  *(_WORD *)(a1 + 146) = (v12 - (dword_AE400_AE3F0() + 29795)) / 164;
  *(_WORD *)(a1 + 148) = sub_15420(v12);
  return 1;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00014B10) --------------------------------------------------------
int sub_14B10(int a1)
{
  unsigned int v1; // esi
  int v2; // ebp
  int v3; // eax
  unsigned int j; // ebx
  unsigned int v5; // eax
  int i; // [esp+0h] [ebp-18h]
  _WORD *v8; // [esp+4h] [ebp-14h]

  v1 = -1;
  v2 = 0;
  if ( !sub_16920(a1) )
    return 0;
  v3 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50);
  if ( v3 == dword_AE400_AE3F0() + 29795 )
    v3 = a1;
  v8 = (_WORD *)(v3 + 72);
  for ( i = 0; i != 80; i += 4 )
  {
    for ( j = *(_DWORD *)(i + dword_AE408_AE3F8() + 36382); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
    {
      if ( *(_WORD *)(j + 24) != *(_WORD *)(a1 + 24) && *(int *)(j + 140) > 0 )
      {
        v5 = sub_42410(v8, (_WORD *)(j + 72));
        if ( v5 < v1 )
        {
          v2 = j;
          v1 = v5;
        }
      }
    }
  }
  if ( !v2 )
    return 0;
  *(_WORD *)(a1 + 146) = (v2 - (dword_AE400_AE3F0() + 29795)) / 164;
  *(_WORD *)(a1 + 148) = sub_15420(v2);
  return 1;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00014C40) --------------------------------------------------------
int sub_14C40(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 1;
  return 1;
}

//----- (00014C80) --------------------------------------------------------
int sub_14C80(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 3;
  return 1;
}

//----- (00014CE0) --------------------------------------------------------
int sub_14CE0(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 6;
  return 1;
}

//----- (00014D00) --------------------------------------------------------
int sub_14D00(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 7;
  return 1;
}

//----- (00014D20) --------------------------------------------------------
int sub_14D20(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 13;
  return 1;
}

//----- (00014D40) --------------------------------------------------------
int sub_14D40(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 9;
  return 1;
}

//----- (00014D60) --------------------------------------------------------
int sub_14D60(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 8;
  return 1;
}

//----- (00014DA0) --------------------------------------------------------
int sub_14DA0(int a1)
{
  *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 11;
  return 1;
}

//----- (00014DC0) --------------------------------------------------------
int sub_14DC0(int a1)
{
  unsigned int v1; // ecx

  if ( *(_DWORD *)(a1 + 12) >= *(_DWORD *)(a1 + 8)
    || (v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50), v1 <= dword_AE400_AE3F0() + 29795) )
  {
    *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 12;
  }
  else
  {
    *(_WORD *)(a1 + 146) = 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50) / 164;
    *(_WORD *)(a1 + 148) = sub_15420(v1);
    *(_BYTE *)(*(_DWORD *)(a1 + 160) + 415) = 11;
  }
  return 1;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00014E60) --------------------------------------------------------
unsigned int sub_14E60(int a1, unsigned __int8 a2)
{
  unsigned int result; // eax

  result = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 676);
  if ( result <= dword_AE400_AE3F0() + 29795 )
    return 0;
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00014EB0) --------------------------------------------------------
int sub_14EB0(int a1)//1E5EB0_
{
  __int16 *v1; // eax
  __int16 v2; // ax
  unsigned __int16 v3; // ax
  int v4; // ecx
  __int16 v5; // dx
  __int16 *v6; // edi
  int v7; // eax
  __int16 v8; // ax
  int v9; // eax
  __int16 v10; // ax
  unsigned __int16 v11; // cx
  __int64 v12; // rax
  int v13; // eax
  int v14; // ecx
  __int16 v15; // si
  __int16 v16; // si
  unsigned int v17; // eax
  unsigned __int16 v18; // si
  unsigned __int16 v19; // dx
  int v21; // [esp-Ch] [ebp-18h]
  int v22; // [esp-8h] [ebp-14h]
  int v23; // [esp-4h] [ebp-10h]

  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  v1 = *(__int16 **)(a1 + 156);
  v23 = v1[7];
  v22 = v1[5];
  v21 = v1[6];
  v2 = sub_11F50(&word_AE454_AE444);
  sub_42000(&word_AE454_AE444, v2, v21, v22, v23);
  sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), 0, *(_WORD *)(a1 + 126));
  v3 = *(_WORD *)(a1 + 30);
  HIBYTE(v3) += 2;
  sub_41EC0_42200(&word_AE454_AE444, v3, 0, *(_WORD *)(*(_DWORD *)(a1 + 160) + 16));
  v4 = *(_DWORD *)(a1 + 160);
  v5 = *(_WORD *)(v4 + 16);
  v6 = (__int16 *)(v4 + 16);
  if ( v5 )
    v7 = v5 / (int)abs16(v5);
  else
    LOWORD(v7) = 0;
  v8 = *v6 - 4 * v7;
  *v6 = v8;
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v9 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 12) - *(__int16 *)(a1 + 126);
  if ( v9 )
    v9 /= (int)abs32(v9);
  *(_WORD *)(a1 + 126) += 16 * v9;
  v10 = *(_WORD *)(a1 + 34);
  HIBYTE(v10) &= 7u;
  v11 = sub_42210(*(_WORD *)(a1 + 30), v10);
  v12 = 255 - *(__int16 *)(*(_DWORD *)(a1 + 160) + 526);
  v13 = v11 / (int)(unsigned __int16)(((int)(v12 - (__CFSHL__(HIDWORD(v12), 4) + 16 * HIDWORD(v12))) >> 4) + 8);
  v14 = *(_DWORD *)(a1 + 156);
  v15 = v13;
  if ( (__int16)v13 <= *(__int16 *)(v14 + 2) )
  {
    if ( (__int16)v13 < *(__int16 *)(v14 + 4) )
      v15 = *(_WORD *)(v14 + 4);
  }
  else
  {
    v15 = *(_WORD *)(v14 + 2);
  }
  v16 = sub_42240(*(unsigned __int16 *)(a1 + 30), *(_WORD *)(a1 + 34)) * v15;
  v17 = *(unsigned __int16 *)(a1 + 30);
  v18 = (v17 + v16) & 0x7FF;
  v19 = *(_WORD *)(a1 + 34);
  *(_WORD *)(a1 + 30) = v18;
  if ( (unsigned __int16)v17 < (unsigned int)v19 && v18 > v19
    || (v19 = *(_WORD *)(a1 + 34), v17 > v19) && v19 > *(_WORD *)(a1 + 30) )
  {
    *(_WORD *)(a1 + 30) = v19;
  }
  return 1;
}
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (00015080) --------------------------------------------------------
unsigned int sub_15080(int a1)
{
  unsigned int v1; // esi
  unsigned int v2; // ebx
  int v3; // eax
  int v4; // edx
  unsigned int v5; // eax
  unsigned int v6; // eax
  int v7; // ebp
  unsigned int v9; // [esp+8h] [ebp-24h]
  _WORD *v10; // [esp+Ch] [ebp-20h]
  unsigned int v11; // [esp+10h] [ebp-1Ch]
  unsigned int v12; // [esp+18h] [ebp-14h]

  v1 = -1;
  v2 = *(_DWORD *)(dword_AE408_AE3F8() + 36466);
  v9 = 164 * *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 50) + dword_AE400_AE3F0() + 29795;
  v12 = 0;
  v10 = (_WORD *)(a1 + 72);
  while ( v2 > dword_AE400_AE3F0() + 29795 )
  {
    v3 = *(unsigned __int16 *)(v2 + 144);
    v4 = 164 * (unsigned __int16)v3 + dword_AE400_AE3F0();
    if ( *(_BYTE *)(v4 + 29859) != 3 )
    {
      v5 = sub_42410(v10, (_WORD *)(v2 + 72));
      if ( v5 >= v1 )
        goto LABEL_19;
      goto LABEL_18;
    }
    if ( v3 == *(__int16 *)(a1 + 24) )
      goto LABEL_19;
    if ( 50000 - *(_DWORD *)(v4 + 29931) / 10 * *(__int16 *)(*(_DWORD *)(a1 + 160) + 522) / 255 < *(unsigned __int16 *)(*(_DWORD *)(a1 + 160) + 8 * *(__int16 *)(*(_DWORD *)(v4 + 29955) + 48) + 460) )
    {
      v5 = sub_42410((_WORD *)(v9 + 72), (_WORD *)(v2 + 72));
      if ( v5 >= v1 )
        goto LABEL_19;
LABEL_18:
      v12 = v2;
      v1 = v5;
      goto LABEL_19;
    }
    v11 = sub_15340(v2, a1);
    if ( v11 )
    {
      v6 = dword_AE400_AE3F0() + 29795 >= v9 ? sub_15260(v2, 2u) : sub_153B0(v2, v9);
      v7 = v6;
      if ( (*(_WORD *)(a1 + 24) == *(_WORD *)(v11 + 24) || sub_42410((_WORD *)(v2 + 72), (_WORD *)(v11 + 72)) > 26214400)
        && (!v7 || !sub_11950((Type_AE400_29795*)v2, (Type_AE400_29795*)v7)) )
      {
        v5 = sub_42410(v10, (_WORD *)(v2 + 72));
        if ( v5 < v1 )
          goto LABEL_18;
      }
    }
LABEL_19:
    v2 = *(_DWORD *)v2;
  }
  return v12;
}
// 15222: conditional instruction was optimized away because cl.1!=3
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00015260) --------------------------------------------------------
unsigned int sub_15260(int a1, unsigned __int8 a2)
{
  unsigned int v2; // esi
  unsigned int v3; // edi
  unsigned int i; // ebx
  unsigned int v5; // eax
  unsigned int j; // ebx
  unsigned int v7; // eax

  v2 = -1;
  v3 = 0;
  if ( a2 < 2u )
  {
    if ( a2 )
      return v3;
  }
  else if ( a2 > 3u )
  {
    if ( a2 == 0xFF )
    {
      for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
      {
        if ( *(_WORD *)(i + 24) != *(_WORD *)(a1 + 24) )
        {
          v5 = sub_42410((_WORD *)(a1 + 72), (_WORD *)(i + 72));
          if ( v5 < v2 )
          {
            v3 = i;
            v2 = v5;
          }
        }
      }
    }
    return v3;
  }
  for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
  {
    if ( *(_WORD *)(j + 24) != *(_WORD *)(a1 + 24) && *(char *)(j + 65) == a2 )
    {
      v7 = sub_42410((_WORD *)(a1 + 72), (_WORD *)(j + 72));
      if ( v7 < v2 )
      {
        v3 = j;
        v2 = v7;
      }
    }
  }
  return v3;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00015340) --------------------------------------------------------
unsigned int sub_15340(int a1, int a2)
{
  unsigned int v2; // esi
  unsigned int v3; // edi
  unsigned int i; // ebx
  __int16 v5; // ax
  unsigned int v6; // eax

  v2 = -1;
  v3 = 0;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    v5 = *(_WORD *)(i + 24);
    if ( v5 != *(_WORD *)(a1 + 24) && v5 != *(_WORD *)(a2 + 24) && *(_BYTE *)(i + 65) <= 1u )
    {
      v6 = sub_42410((_WORD *)(a1 + 72), (_WORD *)(i + 72));
      if ( v6 < v2 )
      {
        v3 = i;
        v2 = v6;
      }
    }
  }
  return v3;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (000153B0) --------------------------------------------------------
unsigned int sub_153B0(int a1, int a2)
{
  unsigned int v2; // esi
  unsigned int v3; // edi
  unsigned int i; // ebx
  __int16 v5; // ax
  unsigned int v6; // eax

  v2 = -1;
  v3 = 0;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    v5 = *(_WORD *)(i + 24);
    if ( v5 != *(_WORD *)(a1 + 24) && v5 != *(_WORD *)(a2 + 24) && *(_BYTE *)(i + 65) == 2 )
    {
      v6 = sub_42410((_WORD *)(a1 + 72), (_WORD *)(i + 72));
      if ( v6 < v2 )
      {
        v3 = i;
        v2 = v6;
      }
    }
  }
  return v3;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00015420) --------------------------------------------------------
__int16 sub_15420(int a1)
{
  return *(_WORD *)(a1 + 24) + *(char *)(a1 + 65) + (*(char *)(a1 + 64) << 7);
}

//----- (00015440) --------------------------------------------------------
bool sub_15440(int a1, int a2)
{
  return sub_15420(a2) == *(_WORD *)(a1 + 148);
}

//----- (00015470) --------------------------------------------------------
int sub_15470(int a1, int a2, signed int a3, signed int a4)
{
  signed int v4; // eax
  signed int v5; // esi
  signed int v6; // esi

  *(_WORD *)(*(_DWORD *)(a1 + 160) + 14) = 0;
  v4 = sub_42340((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a2 + 72));
  v5 = v4;
  if ( a2 )
  {
    if ( v4 > a3 )
    {
      if ( sub_15E60(a1, 2u) )
        return 0;
      if ( v5 > a4 && sub_15A00(a1, 2u) )
      {
        sub_155F0(a1, 2u);
        return 0;
      }
      *(_WORD *)(*(_DWORD *)(a1 + 160) + 12) = *(_WORD *)(a1 + 128);
      goto LABEL_15;
    }
LABEL_8:
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 12) = 0;
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 14) = 1;
    return 1;
  }
  v6 = sub_423D0_42710((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a1 + 150));
  if ( v6 <= a3 )
    goto LABEL_8;
  if ( !sub_15E60(a1, 2u) )
  {
    if ( v6 > a4 && sub_15A00(a1, 2u) )
    {
      sub_155F0(a1, 2u);
      return 0;
    }
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 12) = *(_WORD *)(a1 + 128);
LABEL_15:
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 14) = 1;
  }
  return 0;
}

//----- (000155F0) --------------------------------------------------------
int sub_155F0(int a1, unsigned __int8 a2)
{
  unsigned int v2; // esi
  int v3; // ebx
  int result; // eax
  unsigned int v5; // esi
  unsigned int v6; // eax
  int v7; // eax
  unsigned int v8; // eax
  unsigned int v9; // eax
  unsigned int v10; // eax

  if ( !sub_15A00(a1, a2) )
    return 0;
  *(_BYTE *)(a1 + 17) &= ~1u;
  switch ( a2 )
  {
    case 0u:
    case 0xFu:
      v2 = sub_14E60(a1, a2);
      if ( !v2
        || *(__int16 *)(*(_DWORD *)(a1 + 160) + 404) < 0
        || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v2 + 136)
        || (unsigned __int16)sub_42210(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34)) >= 0xAAu )
      {
        return 0;
      }
      *(_WORD *)(2 * a2 + *(_DWORD *)(a1 + 160) + 724) = word_90034[a2];
      *(_WORD *)(a1 + 32) = sub_42180(
          (axis_3d*)(_WORD *)(a1 + 72),
          (axis_3d*)(_WORD *)(164 * *(unsigned __int16 *)(a1 + 146) + dword_AE400_AE3F0() + 29795 + 72));
      *(_WORD *)(v2 + 48) = *(_WORD *)(v2 + 50);
      ++*(_WORD *)(*(_DWORD *)(a1 + 160) + 404);
      v3 = *(_DWORD *)(a1 + 160);
      if ( *(__int16 *)(v3 + 404) >= 8 )
        *(_WORD *)(v3 + 404) = ((*(__int16 *)(v3 + 526)
                               - 255
                               - (__CFSHL__((*(__int16 *)(v3 + 526) - 255) >> 31, 3)
                                + 8 * ((*(__int16 *)(v3 + 526) - 255) >> 31))) >> 3)
                             - 1;
      result = 1;
      break;
    case 1u:
    case 4u:
    case 5u:
    case 0xEu:
      v9 = sub_14E60(a1, a2);
      if ( !v9 || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v9 + 136) )
        return 0;
      *(_WORD *)(v9 + 48) = *(_WORD *)(v9 + 50);
      *(_WORD *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 724) = word_90034[a2];
      result = 1;
      break;
    case 2u:
      v8 = sub_14E60(a1, a2);
      if ( !v8 || *(_WORD *)(v8 + 48) || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v8 + 136) )
        return 0;
      *(_WORD *)(v8 + 48) = *(_WORD *)(v8 + 50);
      *(_WORD *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 724) = word_90034[a2];
      result = 1;
      break;
    case 3u:
    case 7u:
    case 8u:
    case 0xBu:
    case 0xDu:
    case 0x11u:
    case 0x14u:
      v5 = sub_14E60(a1, a2);
      if ( !v5
        || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v5 + 136)
        || (unsigned __int16)sub_42210(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34)) >= 0xE3u )
      {
        return 0;
      }
      *(_WORD *)(2 * a2 + *(_DWORD *)(a1 + 160) + 724) = word_90034[a2];
      *(_WORD *)(a1 + 32) = sub_42180(
          (axis_3d*)(_WORD *)(a1 + 72),
          (axis_3d*)(_WORD *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146) + 72));
      *(_WORD *)(v5 + 48) = *(_WORD *)(v5 + 50);
      result = 1;
      break;
    case 6u:
    case 9u:
    case 0xAu:
    case 0xCu:
      v10 = sub_14E60(a1, a2);
      if ( !v10 || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v10 + 136) )
        return 0;
      *(_WORD *)(v10 + 48) = *(_WORD *)(v10 + 50);
      *(_WORD *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 724) = word_90034[a2];
      result = 1;
      break;
    case 0x10u:
      v6 = sub_14E60(a1, a2);
      if ( !v6 || *(_WORD *)(v6 + 48) || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v6 + 136) )
        return 0;
      if ( *(_WORD *)(*(_DWORD *)(a1 + 160) + 50) )
      {
        *(_WORD *)(v6 + 48) = *(_WORD *)(v6 + 50);
        *(_WORD *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 724) = word_90034[a2];
        result = 1;
      }
      else
      {
        v7 = (int)sub_373F0((axis_3d*)(a1 + 150), 3, 2);
        if ( v7 )
        {
          *(_WORD *)(v7 + 24) = *(_WORD *)(a1 + 24);
          *(_WORD *)(*(_DWORD *)(a1 + 160) + 50) = (v7 - (dword_AE400_AE3F0() + 29795)) / 164;
        }
        result = 1;
      }
      break;
    default:
      return 0;
  }
  return result;
}
// 90034: using guessed type __int16 word_90034[24];
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00015A00) --------------------------------------------------------
int sub_15A00(int a1, unsigned __int8 a2)
{
  unsigned int v2; // eax
  int result; // eax
  unsigned int v4; // eax
  unsigned int v5; // eax
  int v6; // edx
  __int64 v7; // rax
  unsigned int v8; // esi
  int v9; // eax
  int v10; // edx
  __int64 v11; // rax
  unsigned int v12; // eax
  int v13; // edx
  __int64 v14; // rax
  unsigned int v15; // eax

  switch ( a2 )
  {
    case 0u:
    case 0xBu:
    case 0xDu:
    case 0xFu:
      v12 = sub_14E60(a1, a2);
      if ( !v12 )
        goto LABEL_37;
      v13 = *(_DWORD *)(a1 + 160);
      if ( *(_WORD *)(v13 + 2 * a2 + 724) )
        goto LABEL_37;
      if ( *(_DWORD *)(a1 + 140) < *(_DWORD *)(v12 + 136) )
        goto LABEL_37;
      v14 = 255 - *(__int16 *)(v13 + 524);
      if ( (unsigned __int16)sub_42210(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34)) >= ((((int)(v14
                                                                                           - (__CFSHL__(HIDWORD(v14), 2)
                                                                                            + 4 * HIDWORD(v14))) >> 2)
                                                                                    + 20) << 11)
                                                                                  / 360 )
        goto LABEL_37;
      result = 1;
      break;
    case 2u:
      v2 = sub_14E60(a1, a2);
      if ( !v2 || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v2 + 136) )
        goto LABEL_37;
      result = 1;
      break;
    case 3u:
    case 7u:
    case 8u:
    case 0x11u:
    case 0x14u:
      v5 = sub_14E60(a1, a2);
      if ( !v5 )
        goto LABEL_37;
      if ( *(_WORD *)(v5 + 48) )
        goto LABEL_37;
      v6 = *(_DWORD *)(a1 + 160);
      if ( *(_WORD *)(v6 + 2 * a2 + 724) )
        goto LABEL_37;
      if ( *(_DWORD *)(a1 + 140) < *(_DWORD *)(v5 + 136) )
        goto LABEL_37;
      v7 = 255 - *(__int16 *)(v6 + 524);
      if ( (unsigned __int16)sub_42210(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34)) >= ((((int)(v7
                                                                                           - (__CFSHL__(HIDWORD(v7), 2)
                                                                                            + 4 * HIDWORD(v7))) >> 2)
                                                                                    + 20) << 11)
                                                                                  / 360 )
        goto LABEL_37;
      result = 1;
      break;
    case 4u:
    case 0xCu:
    case 0xEu:
      v4 = sub_14E60(a1, a2);
      if ( !v4
        || *(_WORD *)(v4 + 48)
        || *(_WORD *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 724)
        || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v4 + 136) )
      {
        goto LABEL_37;
      }
      result = 1;
      break;
    case 0x10u:
      v8 = sub_14E60(a1, a2);
      if ( !v8 )
        goto LABEL_37;
      v9 = *(_DWORD *)(a1 + 160);
      v10 = v9 + 2 * a2;
      if ( *(_WORD *)(v9 + 50) )
      {
        if ( *(_WORD *)(v8 + 48) )
          goto LABEL_37;
        if ( *(_WORD *)(v10 + 724) )
          goto LABEL_37;
        if ( !sub_12D10((_WORD *)(164 * *(unsigned __int16 *)(v9 + 50) + dword_AE400_AE3F0() + 29795)) )
          goto LABEL_37;
        if ( *(_DWORD *)(a1 + 140) < *(_DWORD *)(v8 + 136) )
          goto LABEL_37;
        v11 = 255 - *(__int16 *)(*(_DWORD *)(a1 + 160) + 524);
        if ( (unsigned __int16)sub_42210(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34)) >= ((((int)(v11
                                                                                             - (__CFSHL__(
                                                                                                  HIDWORD(v11),
                                                                                                  2)
                                                                                              + 4 * HIDWORD(v11))) >> 2)
                                                                                      + 20) << 11)
                                                                                    / 360 )
          goto LABEL_37;
        result = 1;
      }
      else
      {
        if ( *(_WORD *)(v10 + 724) || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v8 + 136) )
          goto LABEL_37;
        result = 1;
      }
      break;
    default:
      if ( a2 >= 0x18u
        || (v15 = sub_14E60(a1, a2)) == 0
        || *(_WORD *)(*(_DWORD *)(a1 + 160) + 2 * a2 + 724)
        || *(_DWORD *)(a1 + 140) < *(_DWORD *)(v15 + 136) )
      {
LABEL_37:
        result = 0;
      }
      else
      {
        result = 1;
      }
      break;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00015E60) --------------------------------------------------------
bool sub_15E60(int a1, unsigned __int8 a2)
{
  unsigned int v2; // eax
  bool result; // eax

  result = 0;
  if ( a2 < 0x18u )
  {
    v2 = sub_14E60(a1, a2);
    if ( v2 )
    {
      if ( *(__int16 *)(v2 + 48) > 0 )
        return 1;
    }
  }
  return result;
}

//----- (00015E90) --------------------------------------------------------
bool sub_15E90(int a1, unsigned __int8 a2)
{
  return *(_DWORD *)(sub_14E60(a1, a2) + 136) <= *(_DWORD *)(a1 + 136);
}

//----- (00015EC0) --------------------------------------------------------
void sub_15EC0(int a1)
{
  int v1; // esi
  int v2; // eax
  __int16 v3; // bx
  int v4; // ecx
  int v5; // edx
  int v6; // eax
  int v7; // ebp
  int result; // eax
  unsigned int i; // [esp+4h] [ebp-1Ch]
  int v10; // [esp+8h] [ebp-18h]

  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); ; i = *(_DWORD *)i )
  {
    result = dword_AE400_AE3F0() + 29795;
    if ( dword_AE400_AE3F0() + 29795 >= i )
      break;
    if ( !*(_BYTE *)(i + 65) )
    {
      v1 = 0;
      v10 = 0;
      do
      {
        v2 = v1 + *(_DWORD *)(a1 + 160);
        if ( !*(_WORD *)(v2 + 676) )
        {
          v3 = *(_WORD *)(v2 + 628);
          if ( v3 > 0 )
          {
            *(_WORD *)(v2 + 628) = v3 - 1;
            if ( v3 == 1 )
            {
                v4 = (int)off_987DE[v10/14].adress((axis_3d*)(a1 + 72));
              //v4 = (*(int (**)(int))((char *)&off_987DE + v10))(a1 + 72);
              if ( v4 )
              {
                v5 = *(_DWORD *)(a1 + 160);
                v6 = 0;
                while ( *(_DWORD *)(v5 + 532) )
                {
                  ++v6;
                  v5 += 4;
                  if ( v6 >= 24 )
                    goto LABEL_12;
                }
                v7 = dword_AE400_AE3F0() + 29795;
                *(_BYTE *)(v4 + 16) |= 1u;
                *(_WORD *)(v4 + 42) = (a1 - v7) / 164;
                *(_DWORD *)(*(_DWORD *)(a1 + 160) + 4 * v6 + 532) = (v4 - v7) / 164;
              }
            }
          }
        }
LABEL_12:
        v1 += 2;
        v10 += 14;
      }
      while ( v1 != 48 );
    }
  }
}
// 987DE: using guessed type int (*off_987DE)(int);
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00016000) --------------------------------------------------------
unsigned int sub_16000(int a1, unsigned __int8 a2)
{
  unsigned int result; // eax

  result = sub_14E60(a1, a2);
  if ( !result || *(__int16 *)(result + 48) <= 0 )
    return 0;
  return result;
}

//----- (00016030) --------------------------------------------------------
char sub_16030(int a1)
{
  int v1; // eax
  int v2; // ecx
  int v3; // eax
  int v4; // esi
  int v6; // esi

  v1 = (*(_DWORD *)(a1 + 136) - (__CFSHL__(*(int *)(a1 + 136) >> 31, 2) + 4 * (*(int *)(a1 + 136) >> 31))) >> 2;
  if ( v1 > *(_DWORD *)(a1 + 140) )
  {
    *(_WORD *)(*(_DWORD *)(a1 + 160) + 406) = 1;
    goto LABEL_9;
  }
  v2 = *(_DWORD *)(a1 + 160);
  if ( *(_WORD *)(v2 + 406) )
  {
    v3 = v1 + 6000;
    v4 = *(_DWORD *)(a1 + 136);
    if ( v3 >= v4 )
    {
      if ( v4 / 2 > *(_DWORD *)(a1 + 140) )
        goto LABEL_9;
    }
    else if ( v3 > *(_DWORD *)(a1 + 140) )
    {
      goto LABEL_9;
    }
    *(_WORD *)(v2 + 406) = 0;
  }
LABEL_9:
  if ( !*(_WORD *)(*(_DWORD *)(a1 + 160) + 406) )
  {
    if ( !sub_14E60(a1, 0x11u) )
      goto LABEL_50;
    if ( sub_15A00(a1, 0x11u) )
      return 17;
    if ( !sub_15E90(a1, 0x11u) || *(_WORD *)(*(_DWORD *)(a1 + 160) + 758) )
    {
LABEL_50:
      if ( !sub_14E60(a1, 8u) )
        goto LABEL_49;
      if ( sub_15A00(a1, 8u) )
        return 8;
      if ( !sub_15E90(a1, 8u) || *(_WORD *)(*(_DWORD *)(a1 + 160) + 740) )
      {
LABEL_49:
        if ( sub_16000(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146), 0xEu)
          && (v6 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 524), rand() % 255 < v6) )
        {
          if ( sub_14E60(a1, 0xFu) )
          {
            if ( sub_15A00(a1, 0xFu) )
              return 15;
            if ( sub_15E90(a1, 0xFu) )
              return -1;
          }
        }
        else
        {
          if ( !sub_14E60(a1, 7u) )
            goto LABEL_52;
          if ( sub_15A00(a1, 7u) )
            return 7;
          if ( !sub_15E90(a1, 7u) || *(_WORD *)(*(_DWORD *)(a1 + 160) + 738) )
          {
LABEL_52:
            if ( !sub_14E60(a1, 0x14u) )
              goto LABEL_53;
            if ( sub_15A00(a1, 0x14u) )
              return 20;
            if ( !sub_15E90(a1, 0x14u) || *(_WORD *)(*(_DWORD *)(a1 + 160) + 764) )
            {
LABEL_53:
              if ( !sub_14E60(a1, 0) )
                goto LABEL_51;
              if ( sub_15A00(a1, 0) )
                return 0;
              if ( !sub_15E90(a1, 0) || *(_WORD *)(*(_DWORD *)(a1 + 160) + 724) )
              {
LABEL_51:
                if ( sub_14E60(a1, 0xFu) )
                {
                  if ( sub_15A00(a1, 0xFu) )
                    return 15;
                  sub_15E90(a1, 0xFu);
                }
              }
            }
          }
        }
      }
    }
  }
  return -1;
}
// 5D840: using guessed type int rand(void);
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00016310) --------------------------------------------------------
char sub_16310(_DWORD *a1)
{
  int v1; // eax
  int v2; // ecx
  int v3; // eax
  int v4; // esi

  v1 = (a1[34] - (__CFSHL__((int)a1[34] >> 31, 2) + 4 * ((int)a1[34] >> 31))) >> 2;
  if ( v1 > a1[35] )
  {
    *(_WORD *)(a1[40] + 406) = 1;
    goto LABEL_9;
  }
  v2 = a1[40];
  if ( *(_WORD *)(v2 + 406) )
  {
    v3 = v1 + 6000;
    v4 = a1[34];
    if ( v3 >= v4 )
    {
      if ( v4 / 2 > a1[35] )
        goto LABEL_9;
    }
    else if ( v3 > a1[35] )
    {
      goto LABEL_9;
    }
    *(_WORD *)(v2 + 406) = 0;
  }
LABEL_9:
  if ( !*(_WORD *)(a1[40] + 406) )
  {
    if ( !sub_14E60((int)a1, 0x11u) )
      goto LABEL_46;
    if ( sub_15A00((int)a1, 0x11u) )
      return 17;
    if ( !sub_15E90((int)a1, 0x11u) || *(_WORD *)(a1[40] + 758) )
    {
LABEL_46:
      if ( !sub_14E60((int)a1, 8u) )
        goto LABEL_45;
      if ( sub_15A00((int)a1, 8u) )
        return 8;
      if ( !sub_15E90((int)a1, 8u) || *(_WORD *)(a1[40] + 740) )
      {
LABEL_45:
        if ( !sub_14E60((int)a1, 7u) )
          goto LABEL_44;
        if ( sub_15A00((int)a1, 7u) )
          return 7;
        if ( !sub_15E90((int)a1, 7u) || *(_WORD *)(a1[40] + 738) )
        {
LABEL_44:
          if ( !sub_14E60((int)a1, 0x14u) )
            goto LABEL_43;
          if ( sub_15A00((int)a1, 0x14u) )
            return 20;
          if ( !sub_15E90((int)a1, 0x14u) || *(_WORD *)(a1[40] + 764) )
          {
LABEL_43:
            if ( !sub_14E60((int)a1, 0) )
              goto LABEL_42;
            if ( sub_15A00((int)a1, 0) )
              return 0;
            if ( !sub_15E90((int)a1, 0) || *(_WORD *)(a1[40] + 724) )
            {
LABEL_42:
              if ( sub_14E60((int)a1, 0xFu) )
              {
                if ( sub_15A00((int)a1, 0xFu) )
                  return 15;
                sub_15E90((int)a1, 0xFu);
              }
            }
          }
        }
      }
    }
  }
  return -1;
}

//----- (00016540) --------------------------------------------------------
void sub_16540()
{
  Type_AE400_29795* i; // edi
  Type_AE400_29795* v2; // esi
  Type_AE400_29795* v3; // ecx
  int v4; // ebx
  unsigned __int8 v5; // al
  //int v6; // ebp
  int v7; // ebx
  unsigned __int8 v8; // al
  Type_160* v9; // edx
  int v10; // eax
  Type_AE400_29795* v11; // ebp
  //int v12; // edx
  //unsigned int v13; // ebx

  int result;  
  for ( i = str_AE408_AE3F8->var_u32_36462[0]; ; i = i->next )
  {
    //v12 = dword_AE400_AE3F0();
    //v13 = dword_AE400_AE3F0() + 29795;
    if ( i <= str_AE400_AE3F0->str_29795)
      break;    
    if ( (i->var_29811_16.byte[1] & 0x20) != 0 )
      continue;
    result = 164 * i->id_29819_24;
    v2 = &str_AE400_AE3F0->str_29795[i->id_29819_24];
    if (&str_AE400_AE3F0->str_29795[i->id_29819_24] <= str_AE400_AE3F0->str_29795)
      continue;
    if (i->id_29819_24 != 3 )
      continue;
    result = 164 * i->var_u16_29941_146;
    v3 = &str_AE400_AE3F0->str_29795[i->var_u16_29941_146];
    if (&str_AE400_AE3F0->str_29795[i->var_u16_29941_146] <= str_AE400_AE3F0->str_29795)
      continue;
    i->var_29811_16.byte[1] |= 0x20u;
    LOBYTE(result) = *(_BYTE *)(v3 + 64);
    if ( (unsigned __int8)result < 3u )
      continue;
    if ( (unsigned __int8)result <= 3u )
    {
      if ( *(_BYTE *)(v3 + 65) != 2 )
      {        
          
        /*v7 = *(unsigned __int16*)(*(_DWORD*)(v12 + 164 * *(__int16*)(v3 + 24) + 29955)
                                 + 8 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)
                                 + 460);*/
          //int x = v2->var_u32_29955_160->var_48;
          v7 = str_AE400_AE3F0->str_29795[v2->id_29819_24].var_u32_29955_160->str_456[v2->var_u32_29955_160->var_48].var_u16_4;
        v8 = i->var_u8_29858_63;
        if ( v8 < 0xAu )
        {
          if ( v8 >= 3u && v8 <= 4u )
            goto LABEL_33;
LABEL_34:
          v7 += 500;
        }
        else if ( v8 > 0xAu )
        {
          if ( v8 > 0xBu && v8 != 16 )
            goto LABEL_34;
LABEL_33:
          v7 += 3000;
        }
        if ( v7 < 0 )
          v7 = 0;
        if ( v7 > 0xFFFF )
          LOWORD(v7) = -1;
        //v9 = *(_DWORD *)(dword_AE400_AE3F0() + 164 * *(__int16 *)(v3 + 24) + 29955);
        v9 = str_AE400_AE3F0->str_29795[v3->id_29819_24].var_u32_29955_160;
        v10 = *(_DWORD *)(v2 + 160);
        goto LABEL_49;
      }
      /*v4 = *(unsigned __int16*)(*(_DWORD*)(v12 + 164 * *(__int16*)(v3 + 24) + 29955)
                               + 8 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)
                               + 460);*/
      v4 = str_AE400_AE3F0->str_29795[v3->id_29819_24].var_u32_29955_160->str_456[v2->var_u32_29955_160->var_48].var_u16_4;
      v5 = i->var_u8_29860_65;
      if ( v5 < 0xAu )
      {
        if ( v5 >= 3u && v5 <= 4u )
          goto LABEL_18;
LABEL_19:
        v4 += 1000;
      }
      else if ( v5 > 0xAu )
      {
        if ( v5 > 0xBu && v5 != 16 )
          goto LABEL_19;
LABEL_18:
        v4 += 5000;
      }
      if ( v4 < 0 )
        v4 = 0;
      if ( v4 > 0xFFFF )
        v4 = 0xFFFF;
      //v6 = dword_AE400_AE3F0();
      /* *(_WORD *)(*(_DWORD *)(164 * *(__int16 *)(v3 + 24) + dword_AE400_AE3F0() + 29955)
               + 8 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)
               + 460) = v4;*/

      str_AE400_AE3F0->str_29795[v3->id_29819_24].var_u32_29955_160->str_456[v2->var_u32_29955_160->var_48].var_u16_4 = v4;
      result = *(_DWORD *)(v2 + 136) / 10 * *(__int16 *)(*(_DWORD *)(v3 + 160) + 522) / 255;
      if ( v4 > 50000 - result )
      {
        result = *(__int16 *)(*(_DWORD *)(v2 + 160) + 48);
        //*(_WORD *)(*(_DWORD *)(164 * *(__int16 *)(v3 + 24) + v6 + 29955) + 8 * result + 462) = 1;
        str_AE400_AE3F0->str_29795[v3->id_29819_24].var_u32_29955_160->str_456[result].var_u16_6 = 1;
      }
      continue;
    }
    if ( (_BYTE)result == 10 && i->var_u8_29860_65 == 1 )
    {
      LOBYTE(result) = *(_BYTE *)(v3 + 65);
      if ( (_BYTE)result == 39 )
      {
        result = 164 * v3->var_u16_29939_144;
        v11 = &str_AE400_AE3F0->str_29795[v3->var_u16_29939_144];
        if (&str_AE400_AE3F0->str_29795[v3->var_u16_29939_144] > str_AE400_AE3F0->str_29795 && *(_BYTE *)(v11 + 64) == 3 )
        {
          v7 = ((*(_DWORD *)(v3 + 140) - (__CFSHL__(*(int *)(v3 + 140) >> 31, 2) + 4 * (*(int *)(v3 + 140) >> 31))) >> 2)
             + *(unsigned __int16 *)(*(_DWORD *)(v11 + 160) + 8 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48) + 460);
          if ( v7 < 0 )
            v7 = 0;
          if ( v7 > 0xFFFF )
            LOWORD(v7) = -1;
          v10 = *(_DWORD *)(v2 + 160);
          v9 = v11->var_u32_29955_160;
LABEL_49:
          result = *(__int16 *)(v10 + 48);
          *(_WORD *)(v9 + 8 * result + 460) = v7;
          continue;
        }
      }
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00016800) --------------------------------------------------------
unsigned int sub_16800(unsigned int a1, int a2)
{
  unsigned int v2; // esi
  unsigned int i; // ebx
  unsigned int v4; // eax

  v2 = -1;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36474); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(unsigned __int16 *)(i + 146) == *(__int16 *)(a2 + 24) )
    {
      v4 = sub_42410((_WORD *)(a2 + 72), (_WORD *)(i + 72));
      if ( v4 < v2 )
      {
        v2 = v4;
        a1 = i;
      }
    }
  }
  if ( v2 >= 0x1900000 )
    return 0;
  else
    return a1;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00016870) --------------------------------------------------------
int sub_16870(int a1)
{
  int result; // eax

  result = *(_DWORD *)(a1 + 160);
  *(_WORD *)(result + 16) = 80;
  return result;
}

//----- (00016890) --------------------------------------------------------
char sub_16890(int a1, int a2)
{
  int v2; // eax

  v2 = sub_42410((_WORD *)(a1 + 72), (_WORD *)(a2 + 72));
  if ( v2 < 0x100000 )
  {
    LOBYTE(v2) = *(_BYTE *)(a2 + 65);
    if ( (unsigned __int8)v2 < 4u )
    {
      if ( !(_BYTE)v2 || (_BYTE)v2 == 3 )
      {
LABEL_10:
        if ( sub_15A00(a1, 0xEu) )
        {
          LOBYTE(v2) = sub_155F0(a1, 0xEu);
          return v2;
        }
        v2 = sub_15A00(a1, 4u);
        if ( !v2 )
          return v2;
LABEL_15:
        LOBYTE(v2) = sub_155F0(a1, 4u);
      }
    }
    else
    {
      if ( (unsigned __int8)v2 <= 4u )
        goto LABEL_14;
      if ( (unsigned __int8)v2 >= 9u )
      {
        if ( (unsigned __int8)v2 > 9u )
        {
          if ( (_BYTE)v2 != 16 )
            return v2;
          goto LABEL_10;
        }
LABEL_14:
        v2 = sub_15A00(a1, 4u);
        if ( !v2 )
          return v2;
        goto LABEL_15;
      }
    }
  }
  return v2;
}

//----- (00016920) --------------------------------------------------------
_BOOL1 sub_16920(int a1)
{
  return sub_14E60(a1, 0)
      || sub_14E60(a1, 0xFu)
      || sub_14E60(a1, 8u)
      || sub_14E60(a1, 0x11u)
      || sub_14E60(a1, 0x14u)
      || sub_14E60(a1, 7u);
}

//----- (00016990) --------------------------------------------------------
char sub_16990()
{
  int v0; // ecx
  unsigned int i; // eax
  char result; // al

  v0 = dword_ACF50;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( !*(_BYTE *)(i + 65) )
      v0 = i;
  }
  result = 1;
  dword_ACF50 = v0;
  return result;
}
// ACF50: using guessed type int dword_ACF50;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (000169E0) --------------------------------------------------------
void sub_169E0()//1E79E0_
{
  int result; // eax
  int v1; // ebx
  int v2; // ecx
  //int v3; // edx

#ifdef FIX_MOUSE
  mouse_9AD90.x = 320;
  mouse_9AD90.y = 200;
#endif//FIX_MOUSE

  //result = dword_AE408_AE3F8();
  if ( !str_AE408_AE3F8->gameSpeed_150)
  {
    v1 = ((mouse_9AD90.x << 7) - 40960) / 320;
    if ( typeResolution_12F02E_12F01E == 1 )
      v2 = (25600 - (mouse_9AD90.y << 7)) / 200;
    else
      v2 = (30720 - (mouse_9AD90.y << 7)) / 240;
    if ( v1 < -127 )
      v1 = -127;
    if ( v1 > 127 )
      v1 = 127;
    if ( v2 < -127 )
      v2 = -127;
    if ( v2 > 127 )
      v2 = 127;
    //v3 = dword_AE400_AE3F0();
    str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][3] = v1;
    //result = str_AE400_AE3F0->var_u16_8;
    str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][4] = v2;
  }
}
// 9AD90: using guessed type __int16 mouse_9AD90.x;
// 9AD92: using guessed type __int16 mouse_9AD90.y;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//SYNCHRONIZED WITH REMC1
//----- (00016B00) --------------------------------------------------------
void ProcessKeys_16B00()//1E7B00_
{
#ifdef MODIFY_SETTINGS
    if (modset_used_count)
    {
        if (modset_used_precount)
            modset_used_precount--;
        else
        {
            lastPressedKey_12EF70_12EF60 = modset_key;
            if (modset_key_alt)
                pressedKeys_12EEF0_12EEE0[56] = 1;
            modset_used_count--;
        }
    }
#endif

	if (str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0])
		return;
	if (pressedKeys_12EEF0_12EEE0[56])//byte_12EF28 / ALT
	{
		switch (lastPressedKey_12EF70_12EF60) {
		case 0x1f:// 's' save
			if ((str_AE408_AE3F8->var_u8_0 & 0x10) == 0)
			{
				sub_593B0_598C0();
				str_AE400_AE3F0->str_232607.var_u16_232707 = str_AE408_AE3F8->var_u16_17;
				str_AE400_AE3F0->str_232607.var_u32_232709 = dword_AC5D4_AC5C4;
				sub_3E750_3EA90(199);
				sub_3E8C0_3EC00(199);
				sub_37220_375E0();
				str_AE400_AE3F0->var_u32_4593 = -1;
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].periods_13415 = 100;
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].drawType_13417 = 0;
				strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, "Game saved.");
			}
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x26:// 'l' load
			if ((str_AE408_AE3F8->var_u8_0 & 0x10) == 0)
			{
				sub_3E690_3E9D0(199);
				sub_3E7F0_3EB30(199);
				str_AE408_AE3F8->var_u16_17 = str_AE400_AE3F0->str_232607.var_u16_232707;
				dword_AC5D4_AC5C4 = str_AE400_AE3F0->str_232607.var_u32_232709;
				sub_59420_59930();
				FlvInitSet_356E0_35AA0();
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].periods_13415 = 100;
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].drawType_13417 = 0;
				strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, "Game loaded.");
                //adress 1E7DAD_
                            //debug
#ifdef debug1
        //add_compare(0x1E7DAD, true, true);
#endif debug1
        //debug
			}
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x2F:// 'v'
			if (str_AE408_AE3F8->var_u8_1 < 0)
				MakeControlCommand_188A0(4, 8);
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x3B://'F1'
			MakeControlCommand_188A0(30, 1);
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x3Cu://'F2'
			MakeControlCommand_188A0(30, 2);
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x3D://'F3'
			MakeControlCommand_188A0(30, 3);
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x3E://'F4'
			MakeControlCommand_188A0(30, 4);
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x3F://'F5'
			MakeControlCommand_188A0(30, 5);
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x40://'F6'
			MakeControlCommand_188A0(30, 6);
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x41://'F7'
			MakeControlCommand_188A0(30, 7);
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		}
	}
	else
	{
		if (!pressedKeys_12EEF0_12EEE0[0x2A] && !pressedKeys_12EEF0_12EEE0[0x36])//byte_12EF1A shift + 8/*  byte_12EF26 6/^/Right
		{
			switch (lastPressedKey_12EF70_12EF60)
			{
			case 0x19://'p'
				if ((str_AE408_AE3F8->var_u8_0 & 0x10) == 0)
				{
					str_AE408_AE3F8->var_u8_2 ^= 1;
					if ((str_AE408_AE3F8->var_u8_2 & 1) != 0)
					{
						if (byte_939E5)
							sub_5D010_5D520();
						if (byte_939CD)
							sub_20E60_20E60();
					}
					else if (byte_939CD)
					{
						sub_5D290_5D7A0(str_AE400_AE3F0->var_u32_576.a16[0]);
					}
					lastPressedKey_12EF70_12EF60 = 0;
				}
				break;
			case 0x13://'r'
				if (str_AE400_AE3F0->set.var_u8_8631 && !str_AE400_AE3F0->set.mod3D_8603)
					sub_34C80_35040();
				lastPressedKey_12EF70_12EF60 = 0;
				break;
			case 0x39://'SPACE'
				MakeControlCommand_188A0(15, 0);
				MakeControlCommand_188A0(27, 0);
				lastPressedKey_12EF70_12EF60 = 0;
				break;
			case 0x3B://F1
				if (byte_939E4)
				{
					byte_939E5 ^= 1u;
					if (byte_939E5)
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[75]);
					else
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[76]);
					sub_5D010_5D520();
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].periods_13415 = 50;
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].drawType_13417 = 2;
				}
				lastPressedKey_12EF70_12EF60 = 0;
				return;
			case 0x3C://F2
				if (byte_939CC)
				{
					if (byte_939CD)
					{
                        byte_939CD = 0;
						sub_20E60_20E60();
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[78]);
					}
					else
					{
						byte_939CD = 1;
						sub_5D290_5D7A0(str_AE400_AE3F0->var_u32_576.a16[0]);
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[77]);
					}
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].periods_13415 = 50;
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].drawType_13417 = 2;
				}
				lastPressedKey_12EF70_12EF60 = 0;
				return;
			case 0x3D://F3 game speed
				if ((str_AE408_AE3F8->var_u8_0 & 0x10) == 0)
				{
					str_AE408_AE3F8->gameSpeed_150++;
					str_AE408_AE3F8->gameSpeed_150 %= 3;
					switch (str_AE408_AE3F8->gameSpeed_150)
					{
					case 0:
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[63]);
						break;
					case 1:
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[64]);
						break;
					case 2:
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[65]);
						break;
					}
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].periods_13415 = 50;
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].drawType_13417 = 2;
				}
				lastPressedKey_12EF70_12EF60 = 0;
				return;
			case 0x3E://F4 soften
				if (str_AE400_AE3F0->set.var_u8_8629)
				{
					str_AE400_AE3F0->set.softenOn_8605 ^= 1u;
					if (str_AE400_AE3F0->set.softenOn_8605)
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[41]);
					else
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[42]);
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].periods_13415 = 50;
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].drawType_13417 = 2;
				}
				lastPressedKey_12EF70_12EF60 = 0;
				return;
			case 0x3F://F5 reflections
				if (str_AE400_AE3F0->set.var_u8_8621)
				{
					str_AE400_AE3F0->set.reflections_8597 ^= 1u;
					if (str_AE400_AE3F0->set.reflections_8597)
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[39]);
					else
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[40]);
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].periods_13415 = 50;
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].drawType_13417 = 2;
				}
				lastPressedKey_12EF70_12EF60 = 0;
				return;
			case 0x40://F6 skyOn
				if (str_AE400_AE3F0->set.var_u8_8623 && begSky_AE3D8_AE3C8_26C3D8_26C3C8)
				{
					str_AE400_AE3F0->set.skyOn_8599 ^= 1u;
					if (str_AE400_AE3F0->set.skyOn_8599)
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[43]);
					else
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[44]);
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].periods_13415 = 50;
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].drawType_13417 = 2;
				}
				lastPressedKey_12EF70_12EF60 = 0;
				return;
			case 0x41://F7 shadowsOn
				if (str_AE400_AE3F0->set.var_u8_8622)
				{
					str_AE400_AE3F0->set.shadowsOn_8598 ^= 1u;
					if (str_AE400_AE3F0->set.shadowsOn_8598)
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[37]);
					else
						strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[38]);
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].periods_13415 = 50;
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].drawType_13417 = 2;
				}
				lastPressedKey_12EF70_12EF60 = 0;
				return;
			case 0x42://F8 IconsAndMap
				str_AE400_AE3F0->set.mapOn_8601 ^= 1u;
				str_AE400_AE3F0->set.iconsOn_8602 ^= 1u;
				if (str_AE400_AE3F0->set.mapOn_8601)
					strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[45]);
				else
					strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[46]);
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].periods_13415 = 50;
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].drawType_13417 = 2;
				lastPressedKey_12EF70_12EF60 = 0;
				return;
			case 0x43://F9 blur
				if (str_AE400_AE3F0->set.var_u8_8628)
				{
                    switch (str_AE400_AE3F0->set.blur_8604)
                    {
                    case 0:
                        strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[49]);
                        break;
                    case 1:
                        strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[50]);
                        break;
                    case 2:
                        strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].messageText_13351_28, dword_AE238_AE228[51]);
                        break;
                    }
                    str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].periods_13415 = 50;
                    str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[str_AE400_AE3F0->var_u16_8].drawType_13417 = 2;
                    str_AE400_AE3F0->set.blur_8604++;
                    str_AE400_AE3F0->set.blur_8604 %= 3;
				}
				lastPressedKey_12EF70_12EF60 = 0;
				return;
			case 0x44://F10 3Dmod
				if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_14421_1098 || !str_AE400_AE3F0->set.var_u8_8627)
				{
					lastPressedKey_12EF70_12EF60 = 0;
					return;
				}
                switch (str_AE400_AE3F0->set.mod3D_8603)
                {
                case 0:
                    if (blurBuffer_AE404_AE3F4)
                    {
                        sub_31600_31640();
                        str_AE400_AE3F0->set.var_u8_8600 = 40;
                    }
                    break;
                case 1:
                    sub_315C0_31600();
                    break;
                case 2:
                    break;
                }
                str_AE400_AE3F0->set.mod3D_8603++;
                str_AE400_AE3F0->set.mod3D_8603 %= 3;
                lastPressedKey_12EF70_12EF60 = 0;
				return;
			default:
				return;
			}
		}
		switch (lastPressedKey_12EF70_12EF60)
		{
		case 0x10u://'q'
			MakeControlCommand_188A0(2, 0);
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x12u://'e'
			if (str_AE408_AE3F8->var_u8_1 < 0)
				MakeControlCommand_188A0(26, 0);
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x13u://'r'
			if ((str_AE408_AE3F8->var_u8_0 & 0x10) == 0)
			{
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 |= 0xCu;
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_1103.var_50 = 0;
			}
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x21u://'f'
			if (str_AE408_AE3F8->var_u8_1 < 0)
			{
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 |= 4u;
			}
			lastPressedKey_12EF70_12EF60 = 0;
			break;
		case 0x2E://'c'
			if (str_AE408_AE3F8->var_u8_1 < 0)
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 |= 2u;
			lastPressedKey_12EF70_12EF60 = 0;
			break;

		}
	}
}

//----- (00017C20) --------------------------------------------------------
void sub_17C20()
{
  int v3; // eax
  int v4; // edx
  int v5; // eax
  _BYTE *v6; // edx
  int v7; // ebx
  char v8; // cl
  char v9; // al
  char v10; // ch
  int v11; // edx
  int v12; // eax
  int v13; // eax
  int v14; // edx
  int v15; // eax
  int v16; // eax
  int v17; // esi
  int v18; // edx
  int v19; // edx
  int v20; // edx
  int v21; // edx
  int v22; // edx
  int v23; // edx

  v3 = dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8;
  if ( *(_BYTE *)(v3 + 13332) == 1 )
  {
    if (pressedKeys_12EEF0_12EEE0[59])//byte_12EF2B F1
      MakeControlCommand_188A0(2, 0);
    return;
  }
  LOBYTE(v3) = *(_BYTE *)(v3 + 14421);
  switch ( (char)v3 )
  {
    case 0:
    case 4:
      v4 = str_AE400_AE3F0->var_u16_8;
      LOBYTE(v3) = 5 * v4;
      if ( *(_BYTE *)(dword_AE400_AE3F0() + 10 * v4 + 29715) )
      {
        mouseLeftButton_12EFDE_12EFCE = 0;
        mouseRightButton_12EFDC_12EFCC = 0;
        return;
      }
      ProcessKeys_16B00();
      sub_3FCA0_3FFE0( 0, 256, 160, 640, 400, 16, 8);
      v6 = (_BYTE *)dword_AE400_AE3F0();
      v7 = 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333) + dword_AE400_AE3F0() + 29795;
      v8 = pressedKeys_12EEF0_12EEE0[29];//byte_12EF0D clrl + ]
      *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29720) = 0;
      if ( v8 )
      {
        switch ( lastPressedKey_12EF70_12EF60 )
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
            MakeControlCommand_188A0(25, lastPressedKey_12EF70_12EF60 - 2);
            lastPressedKey_12EF70_12EF60 = 0;
            break;
          default:
            goto LABEL_54;
        }
        goto LABEL_54;
      }
      if (pressedKeys_12EEF0_12EEE0[56])//byte_12EF28 8/*/Up
      {
        if ( lastPressedKey_12EF70_12EF60 < 0x3Bu )
        {
          if ( lastPressedKey_12EF70_12EF60 < 0x21u )
          {
            if ( lastPressedKey_12EF70_12EF60 >= 0x13u )
            {
              if ( lastPressedKey_12EF70_12EF60 <= 0x13u )
              {
                MakeControlCommand_188A0(12, 0);
                lastPressedKey_12EF70_12EF60 = 0;
                sub_169E0();
                return;
              }
              if ( lastPressedKey_12EF70_12EF60 == 0x1fu )
              {
                MakeControlCommand_188A0(10, 0);
                lastPressedKey_12EF70_12EF60 = 0;
              }
            }
          }
          else
          {
            if ( lastPressedKey_12EF70_12EF60 <= 0x21u )
            {
              MakeControlCommand_188A0(4, 32);
              lastPressedKey_12EF70_12EF60 = 0;
              sub_169E0();
              return;
            }
            if ( lastPressedKey_12EF70_12EF60 < 0x2Fu )
            {
              if ( lastPressedKey_12EF70_12EF60 == 0x23u )
              {
                v6[8606] ^= 1u;
                lastPressedKey_12EF70_12EF60 = 0;
              }
            }
            else
            {
              if ( lastPressedKey_12EF70_12EF60 <= 0x2Fu )
              {
                MakeControlCommand_188A0(4, 8);
                lastPressedKey_12EF70_12EF60 = 0;
                sub_169E0();
                return;
              }
              if ( lastPressedKey_12EF70_12EF60 == 50 )
              {
                MakeControlCommand_188A0(4, 16);
                lastPressedKey_12EF70_12EF60 = 0;
              }
            }
          }
          goto LABEL_54;
        }
        if ( lastPressedKey_12EF70_12EF60 <= 0x3Bu )
        {
          MakeControlCommand_188A0(30, 1);
          lastPressedKey_12EF70_12EF60 = 0;
          sub_169E0();
          return;
        }
        if ( lastPressedKey_12EF70_12EF60 >= 0x3Eu )
        {
          if ( lastPressedKey_12EF70_12EF60 <= 0x3Eu )
          {
            MakeControlCommand_188A0(30, 4);
            lastPressedKey_12EF70_12EF60 = 0;
            sub_169E0();
            return;
          }
          if ( lastPressedKey_12EF70_12EF60 < 0x40u )
          {
            MakeControlCommand_188A0(30, 5);
            lastPressedKey_12EF70_12EF60 = 0;
            sub_169E0();
            return;
          }
          if ( lastPressedKey_12EF70_12EF60 <= 0x40u )
          {
            MakeControlCommand_188A0(30, 6);
            lastPressedKey_12EF70_12EF60 = 0;
            sub_169E0();
            return;
          }
          if ( lastPressedKey_12EF70_12EF60 == 65 )
          {
            MakeControlCommand_188A0(30, 7);
            lastPressedKey_12EF70_12EF60 = 0;
          }
          goto LABEL_54;
        }
        if ( lastPressedKey_12EF70_12EF60 <= 0x3Cu )
          MakeControlCommand_188A0(30, 2);
        else
          MakeControlCommand_188A0(30, 3);
LABEL_64:
        lastPressedKey_12EF70_12EF60 = 0;
        sub_169E0();
        return;
      }
      if (pressedKeys_12EEF0_12EEE0[42] || pressedKeys_12EEF0_12EEE0[54]) //byte_12EF1A shift + 8/*  byte_12EF26 6/^/Right
      {
        if ( lastPressedKey_12EF70_12EF60 < 0x25u )
        {
          if ( lastPressedKey_12EF70_12EF60 >= 0x10u )
          {
            if ( lastPressedKey_12EF70_12EF60 <= 0x10u )
            {
              MakeControlCommand_188A0(2, 0);
              lastPressedKey_12EF70_12EF60 = 0;
              sub_169E0();
              return;
            }
            if ( lastPressedKey_12EF70_12EF60 == 18 )
            {
              if ( *(char *)(dword_AE408_AE3F8() + 1) < 0 )
                MakeControlCommand_188A0(26, 0);
              goto LABEL_64;
            }
          }
        }
        else
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x25u )
          {
            if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
              *(_DWORD *)(v7 + 12) = -1;
            goto LABEL_64;
          }
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x26u )
          {
            MakeControlCommand_188A0(6, 48);
            lastPressedKey_12EF70_12EF60 = 0;
            sub_169E0();
            return;
          }
          if ( lastPressedKey_12EF70_12EF60 == 46 )
          {
            if ( *(char *)(dword_AE408_AE3F8() + 1) < 0 )
              MakeControlCommand_188A0(27, 0);
            goto LABEL_64;
          }
        }
LABEL_54:
        sub_169E0();
        return;
      }
      if ( lastPressedKey_12EF70_12EF60 == 26 )
      {
        if ( !v6[8603] )
        {
          v9 = v6[8600];
          if ( v9 < 40 )
            v6[8600] = v9 + 1;
        }
        lastPressedKey_12EF70_12EF60 = 0;
      }
      if ( lastPressedKey_12EF70_12EF60 == 27 )
      {
        if ( !str_AE400_AE3F0->set.mod3D_8603 )
        {
          v10 = str_AE400_AE3F0->set.var_u8_8600;
          if ( v10 > 17 )
            str_AE400_AE3F0->set.var_u8_8600 = v10 - 1;
        }
        lastPressedKey_12EF70_12EF60 = 0;
      }
      switch ( lastPressedKey_12EF70_12EF60 )
      {
        case 23:
          MakeControlCommand_188A0(16, 0);
          goto LABEL_177;
        case 1:
          MakeControlCommand_188A0(27, 0);
          MakeControlCommand_188A0(29, 0);
          lastPressedKey_12EF70_12EF60 = 0;
          return;
        case 19:
          if ( *(_BYTE *)(dword_AE400_AE3F0() + 8631) )
            sub_34C80_35040();
          lastPressedKey_12EF70_12EF60 = 0;
          break;
      }
      if ( lastPressedKey_12EF70_12EF60 == 57 )
      {
        MakeControlCommand_188A0(15, 0);
        MakeControlCommand_188A0(27, 0);
        MakeControlCommand_188A0(28, 0);
        lastPressedKey_12EF70_12EF60 = 0;
      }
      if ( mouseLeftButton_12EFDE_12EFCE && mouseRightButton_12EFDC_12EFCC )
      {
        if ( (str_AE408_AE3F8->var_u8_1 & 2) == 0 && *(int *)(v7 + 12) >= 0 )
          MakeControlCommand_188A0(20, 2);
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
      }
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 2u )
      {
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0xBu )
        {
          MakeControlCommand_188A0(24, lastPressedKey_12EF70_12EF60 - 2);
          lastPressedKey_12EF70_12EF60 = 0;
        }
        else if ( lastPressedKey_12EF70_12EF60 == 28 )
        {
          if ( *(int *)(v7 + 12) >= 0 )
            MakeControlCommand_188A0(20, 2);
          lastPressedKey_12EF70_12EF60 = 0;
        }
      }
      if (pressedKeys_12EEF0_12EEE0[72])//byte_12EF38_12EF28 Up Arrow
        MakeControlCommand_188A0(6, 1);
      if (pressedKeys_12EEF0_12EEE0[80])//byte_12EF40_12EF30 Down Arrow
        MakeControlCommand_188A0(6, 2);
      if (pressedKeys_12EEF0_12EEE0[75])//byte_12EF3B_12EF2B Left Arrow
        MakeControlCommand_188A0(6, 4);
      if (pressedKeys_12EEF0_12EEE0[77])//byte_12EF3D Right Arrow
        MakeControlCommand_188A0(6, 8);
      v11 = *(_DWORD *)(v7 + 160);
      v12 = *(__int16 *)(v11 + 940);
      if ( v12 == -1 )
      {
        mouseLeftButton_12EFDE_12EFCE = 0;
LABEL_119:
        v14 = *(_DWORD *)(v7 + 160);
        v15 = *(__int16 *)(v14 + 944);
        if ( v15 == -1 )
        {
          mouseRightButton_12EFDC_12EFCC = 0;
          sub_169E0();
          return;
        }
        v16 = 164 * *(_DWORD *)(v14 + 4 * v15 + 532) + dword_AE400_AE3F0() + 29795;
        if ( *(_BYTE *)(v16 + 60) == 1 )
        {
          if ( mouseRightButton_12EFDC_12EFCC )
          {
            MakeControlCommand_188A0(6, 32);
            mouseRightButton_12EFDC_12EFCC = 0;
            sub_169E0();
            return;
          }
        }
        else if ( mouseRightButton_12EFDC_12EFCC
               || mouseRightButton2_12EFE2_12EFD2 && *(__int16 *)(v16 + 48) > 0
               || mouseRightButton2_12EFE2_12EFD2 && *(_BYTE *)(v16 + 62) && *(char *)(v16 + 61) > 0 )
        {
          MakeControlCommand_188A0(6, 32);
          mouseRightButton_12EFDC_12EFCC = 0;
        }
        goto LABEL_54;
      }
      v13 = dword_AE400_AE3F0() + 29795 + 164 * *(_DWORD *)(v11 + 4 * v12 + 532);
      if ( *(_BYTE *)(v13 + 60) == 1 )
      {
        if ( !mouseLeftButton_12EFDE_12EFCE )
          goto LABEL_119;
      }
      else if ( !mouseLeftButton_12EFDE_12EFCE
             && (!mouseLeftButton2_12EFE4_12EFD4 || *(__int16 *)(v13 + 48) <= 0)
             && (!mouseLeftButton2_12EFE4_12EFD4 || !*(_BYTE *)(v13 + 62) || *(char *)(v13 + 61) <= 0) )
      {
        goto LABEL_119;
      }
      MakeControlCommand_188A0(6, 16);
      mouseLeftButton_12EFDE_12EFCE = 0;
      goto LABEL_119;
    case 1:
      ProcessKeys_16B00();
      if ( mouseLeftButton_12EFDE_12EFCE && mouseRightButton_12EFDC_12EFCC || lastPressedKey_12EF70_12EF60 == 28 )
      {
        lastPressedKey_12EF70_12EF60 = 0;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
        MakeControlCommand_188A0(20, 0);
      }
      return;
    case 2:
      sub_3FCA0_3FFE0(
        1,
        640 - 4 * *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 22),
        162,
        640 - *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 22),
        5 * *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 23) + 162,
        *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 22),
        *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 23));
      ProcessKeys_16B00();
      v3 = 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
      v17 = dword_AE400_AE3F0() + 29795 + v3;
      if ( *(int *)(v17 + 12) < 0 )
        MakeControlCommand_188A0(20, 0);
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 2u && (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0xBu )
      {
        v3 = str_AE408_AE3F8->var_u8_22;
        if ( v3 != -1 )
        {
          v18 = dword_AE400_AE3F0();
          *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = 23;
          *(_BYTE *)(v18 + 10 * *(__int16 *)(v18 + 8) + 29716) = lastPressedKey_12EF70_12EF60 - 2;
          *(_BYTE *)(v18 + 10 * *(__int16 *)(v18 + 8) + 29717) = -1;
          v3 = 0;
          v19 = *(_DWORD *)(v17 + 160);
          while ( *(__int16 *)(*(_DWORD *)(v17 + 160)
                             + 2 * (unsigned __int8)byte_99B88[str_AE408_AE3F8->var_u8_22]
                             + 676) != *(_DWORD *)(v19 + 532) )
          {
            ++v3;
            v19 += 4;
            if ( v3 >= 24 )
              goto LABEL_146;
          }
          *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29717) = v3;
        }
LABEL_146:
        lastPressedKey_12EF70_12EF60 = 0;
      }
      if ( mouseLeftButton_12EFDE_12EFCE && mouseRightButton_12EFDC_12EFCC || lastPressedKey_12EF70_12EF60 == 28 )
      {
        lastPressedKey_12EF70_12EF60 = 0;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
        MakeControlCommand_188A0(20, 0);
LABEL_164:
        lastPressedKey_12EF70_12EF60 = 0;
        return;
      }
      if ( mouseLeftButton_12EFDE_12EFCE )
      {
        v3 = str_AE408_AE3F8->var_u8_22;
        mouseLeftButton_12EFDE_12EFCE = 0;
        if ( v3 == -1 )
          goto LABEL_164;
        v20 = dword_AE400_AE3F0();
        *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = 21;
        *(_BYTE *)(v20 + 10 * *(__int16 *)(v20 + 8) + 29716) = -1;
        v3 = 0;
        v21 = *(_DWORD *)(v17 + 160);
        do
        {
          if ( *(__int16 *)(*(_DWORD *)(v17 + 160) + 2 * (unsigned __int8)byte_99B88[str_AE408_AE3F8->var_u8_22] + 676) == *(_DWORD *)(v21 + 532) )
          {
            *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29716) = v3;
            lastPressedKey_12EF70_12EF60 = 0;
            return;
          }
          ++v3;
          v21 += 4;
        }
        while ( v3 < 24 );
        lastPressedKey_12EF70_12EF60 = 0;
      }
      else
      {
        if ( !mouseRightButton_12EFDC_12EFCC )
          goto LABEL_164;
        v3 = str_AE408_AE3F8->var_u8_22;
        mouseRightButton_12EFDC_12EFCC = mouseLeftButton_12EFDE_12EFCE;
        if ( v3 == -1 )
          goto LABEL_164;
        v22 = dword_AE400_AE3F0();
        *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29715) = 22;
        *(_BYTE *)(v22 + 10 * *(__int16 *)(v22 + 8) + 29716) = -1;
        v3 = 0;
        v23 = *(_DWORD *)(v17 + 160);
        while ( *(__int16 *)(*(_DWORD *)(v17 + 160) + 2 * (unsigned __int8)byte_99B88[str_AE408_AE3F8->var_u8_22] + 676) != *(_DWORD *)(v23 + 532) )
        {
          ++v3;
          v23 += 4;
          if ( v3 >= 24 )
            goto LABEL_164;
        }
        *(_BYTE *)(dword_AE400_AE3F0() + 10 * str_AE400_AE3F0->var_u16_8 + 29716) = v3;
        lastPressedKey_12EF70_12EF60 = 0;
      }
      return;
    case 3:
      if ( lastPressedKey_12EF70_12EF60 > 0 )
      {
        LOBYTE(v3) = byte_9AD0C[(unsigned __int8)lastPressedKey_12EF70_12EF60];
        if ( lastPressedKey_12EF70_12EF60 == 28 )
        {
          MakeControlCommand_188A0(19, 0);
        }
        else if ( (unsigned __int8)v3 >= 0x41u && (unsigned __int8)v3 <= 0x5Au
               || (unsigned __int8)v3 >= 0x61u && (unsigned __int8)v3 <= 0x7Au
               || (unsigned __int8)v3 >= 0x30u && (unsigned __int8)v3 <= 0x39u
               || (_BYTE)v3 == 8
               || (_BYTE)v3 == 32 )
        {
          MakeControlCommand_188A0(17, byte_9AD0C[(unsigned __int8)lastPressedKey_12EF70_12EF60]);
        }
      }
LABEL_177:
      lastPressedKey_12EF70_12EF60 = 0;
      return;
    default:
      return;
  }
}
// 17CB9: variable 'v5' is possibly undefined
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE42C: using guessed type int begSprTab_AE42C_AE41C_26C42C_26C41C;
// 12EF0D: using guessed type char byte_12EF0D;
// 12EF1A: using guessed type char byte_12EF1A;
// 12EF26: using guessed type char byte_12EF26;
// 12EF28: using guessed type char byte_12EF28;
// 12EF2B: using guessed type char byte_12EF2B;
// 12EF38: using guessed type char byte_12EF38_12EF28;
// 12EF3B: using guessed type char byte_12EF3B_12EF2B;
// 12EF3D: using guessed type char byte_12EF3D;
// 12EF40: using guessed type char byte_12EF40_12EF30;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFE2: using guessed type __int16 mouseRightButton2_12EFE2_12EFD2;
// 12EFE4: using guessed type __int16 mouseLeftButton2_12EFE4_12EFD4;

//SYNCHRONIZED WITH REMC1
void MakeControlCommand_188A0(char setting1, char setting2)
{
  switch (setting1)
  {
    case 0:
    case 1:
    case 2:
    case 26:
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 4:
      if ( str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] != setting1
        && str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][1] |= setting2;
      return;
    case 6://arrows
      if ( str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] != setting1
        && str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][5] |= setting2;
      return;
    case 10:
      if ( str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] != setting1
        && str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 11:
      if ( str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] != setting1
        && str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 12:
      if ( str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] != setting1
        && str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 14:
      if ( str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] != setting1
        && str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 15:
      if ( str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] != setting1
        && str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] )
          return;
      if (str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333].actLife_29807_12 >= 0 ||
          str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333].var_u8_29865_70 != 3 )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 16:
      if ( str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] != setting1
        && str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 17:
      if ( str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] != setting1
        && str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][1] = setting2;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 18:
      if ( str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] != setting1
        && str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 19:
      if ( str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] != setting1
        && str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 20:
      if (str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0])
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][1] = setting2;
      return;
    case 21:
        if (str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0])
        {
            str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
            str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][1] = setting2;
        }
      return;
    case 22:
        if (str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0])
        {
            str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
            str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][1] = setting2;
        }
      return;
    case 23:
        if (str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0])
        {
            str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
            str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][1] = setting2;
        }
      return;
    case 24:
        if (str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0])
        {
            str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
            str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][1] = setting2;
        }
      return;
    case 25:
        if (str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0])
        {
            str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
            str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][1] = setting2;
        }
      return;
    case 27:
      if (str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0]
        || (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 & 2) == 0 )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 28:
      if (str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0]
        || (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 & 4) == 0 )
          return;
      str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 29:
      if (!str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0])          
        str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
      return;
    case 30:
      if (str_AE408_AE3F8->var_u8_1 < 0 ||
          (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_14357[0] == 'c'
        && str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_14357[1] == 'h'
        && str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_14357[2] == 'r'
        && str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_14357[3] == 'o'
        && str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_14357[4] == 'n'
        && str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_14357[5] == 'i'
        && str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_14357[6] == 'c'
        && str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_14357[7] == 'l'
        && str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_14357[8] == 'e' ))
      {
        if (str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0])
        {
          str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][0] = setting1;
          str_AE400_AE3F0->var_29715[str_AE400_AE3F0->var_u16_8][1] = setting2;
        }
      }
  }
}

void sub_192D8()
{
	unsigned int tempFlag = __readeflags();
	sub_193EE(sub_192F3());
	__writeeflags(tempFlag);
}

//----- (000192F3) --------------------------------------------------------
int sub_192F3()
{
    FixPerifery((char*)"cpuid");
    cpuVar_90084 = 5;
    cpuVar_90085 = 1;
    return 1;

    /*

  unsigned int v4; // kr00_4
  unsigned int v5; // kr04_4
  int result; // eax
  unsigned int v7; // kr08_4
  unsigned int v8; // kr0C_4
  int *v14; // esi
  _BYTE *v15; // edi
  int v16; // ecx

  //fix
  v14 = 0;
  v15 = 0;
  v16 = 0;
  //fix

  

  //fix __asm { pushfw }
  v4 = __readeflags();
  __writeeflags((unsigned int)&loc_40000 ^ v4);
  v5 = __readeflags();
  result = v4 ^ v5;
  cpuVar_90084 = 3;
  if ( v4 != v5 )
  {
    cpuVar_90084 = 4;
    v7 = __readeflags();
    __writeeflags(v7 ^ 0x200000);
    v8 = __readeflags();
    result = v7 ^ v8;
    if ( v7 != v8 )
    {
      //fix
      cpuVar_90076 = 1;
      _EAX = 0;
      __asm { cpuid }
      cpuVar_9006A = _EBX;
      cpuVar_9006E = _EDX;
      cpuVar_90072 = _ECX;
      v14 = &cpuVar_9006A;
      v15 = &cpuVar_90078;
      v16 = 1;
      
      //fix
      do
      {
        if ( !v16 )
          break;
        _ZF = *(_BYTE *)v14 == *v15;
        v14 = (int *)((char *)v14 + 1);
        ++v15;
        --v16;
      }
      while ( _ZF );
      if ( !v16 )
        cpuVar_90085 = 1;
      //fix _EAX = 1;
      __asm { cpuid }
      //fix cpuVar_90066 = _EAX;
      //fix cpuVar_90084 = (unsigned __int16)(_EAX & 0xF00) >> 8;
      //fix cpuVar_90087 = _EAX & 0xF;
      result = cpuVar_90066;
      cpuVar_90086 = (unsigned __int8)(cpuVar_90066 & 0xF0) >> 4;
    }
  }
  return result;
  */
}
// 90066: using guessed type int cpuVar_90066;
// 9006A: using guessed type int cpuVar_9006A;
// 9006E: using guessed type int cpuVar_9006E;
// 90072: using guessed type int cpuVar_90072;
// 90076: using guessed type char cpuVar_90076;
// 90084: using guessed type char cpuVar_90084;
// 90085: using guessed type char cpuVar_90085;
// 90086: using guessed type char cpuVar_90086;
// 90087: using guessed type char cpuVar_90087;

//----- (000193EE) --------------------------------------------------------
void sub_193EE(__int16 a1)
{
    FixPerifery((char*)"fninit");

    /*
  __int16 v1; // fps
  double v2; // st6
  _BOOL1 v3; // c0
  char v4; // c2
  _BOOL1 v5; // c3



  __asm { fninit }
  cpuVar_90064 = a1;
  if ( (_BYTE)a1 )
  {
    byte_90088 = 0;
  }
  else if ( (cpuVar_90064 & 0x103F) == 63 )
  {
    byte_90088 = 1;
    if ( cpuVar_90084 == 3 )
    {
      //fix v2 = -(1.0 / 0.0);
      //fix v3 = v2 < 1.0 / 0.0;
      v4 = 0;
      //fix v5 = v2 == 1.0 / 0.0;
      cpuVar_90064 = v1;
      byte_90089 = 2;
      //fix if ( v2 != 1.0 / 0.0 )
      //fix   byte_90089 = 3;
    }
  }
  else
  {
    byte_90088 = 0;
  }*/
}
// 90064: using guessed type __int16 cpuVar_90064;
// 90084: using guessed type char cpuVar_90084;
// 90088: using guessed type char byte_90088;
// 90089: using guessed type char byte_90089;

void sub_19470()//1EA470_
{
	sub_192D8();
	if (cpuVar_90084 == 5 && cpuVar_90085 == 1)
		str_AE408_AE3F8->var_u8_8 = 1;
	else
		str_AE408_AE3F8->var_u8_8 = 0;
}

//----- (000194F0) --------------------------------------------------------
int sub_194F0()
{
  int v0; // ebx
  int v1; // esi
  __int16 i; // cx
  unsigned int j; // eax
  int result; // eax

  v0 = dword_AE400_AE3F0();
  v1 = dword_AE408_AE3F8();
  for ( i = 0; i < 20; ++i )
  {
    for ( j = *(_DWORD *)(v1 + 4 * i + 36382); j > v0 + 29795; j = *(_DWORD *)j )
      *(_DWORD *)(j + 12) = -1;
  }
  result = *(unsigned __int16 *)(j + 34);
  dword_AE408_AE3F8(v1);
  dword_AE400_AE3F0(v0);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00019550) --------------------------------------------------------
__int16 sub_19550(int a1)
{
  __int16 result; // ax
  int v2; // esi
  int v3; // esi
  __int16 v4; // ax

  result = dword_AE400_AE3F0() + 29795;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 52);
  if ( *(_BYTE *)(v2 + 64) != 5 )
    sub_41E80((Type_AE400_29795*)a1);
  if ( *(_BYTE *)(a1 + 58) )
  {
    *(_WORD *)(a1 + 30) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v2 + 72));
    *(_WORD *)(a1 + 32) = sub_42180((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v2 + 72));
    v3 = v2 + 72;
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)v3;
    word_AE454_AE444.z = *(_WORD *)(v3 + 4);
    sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), -*(_WORD *)(a1 + 56));
    result = sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    if ( *(_WORD *)(a1 + 94) )
    {
      *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
      result = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      *(_WORD *)(a1 + 40) = result;
    }
    else
    {
      *(_WORD *)(a1 + 40) = 0;
    }
  }
  else if ( (*(_BYTE *)(a1 + 63) & 3) == 0 )
  {
    sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v2 + 72));
    result = *(_WORD *)(v2 + 30);
    *(_WORD *)(a1 + 30) = result;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (00019650) --------------------------------------------------------
signed int sub_19650(axis_3d* a1x)
{
  int v1; // eax
  unsigned __int16 v2; // dx
  unsigned __int16 v3; // bx
  unsigned __int8 v4; // cl
  unsigned __int16 v5; // bx
  int v6; // esi
  int v7; // ebx
  signed int v8; // ecx
  signed int v9; // ebx

  v1 = a1x->x >> 8;
  BYTE1(v1) = HIBYTE(a1x->y);
  v2 = v1;
  LOBYTE(v1) = v1 + 1;
  v3 = v1;
  ++BYTE1(v1);
  v4 = mapHeightmap_DC1E0_DC1D0[v3];
  v5 = v1;
  LOBYTE(v2) = mapHeightmap_DC1E0_DC1D0[v2];
  LOBYTE(v1) = v1 - 1;
  HIBYTE(v2) = mapHeightmap_DC1E0_DC1D0[v5];
  v6 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v1];
  v7 = (unsigned __int8)v2 + v4 - v6;
  v8 = abs32((unsigned __int8)v2 + v6 - v4 - HIBYTE(v2));
  v9 = abs32(v7 - HIBYTE(v2));
  if ( v8 > v9 )
    return v8;
  return v9;
}

//----- (000196E0) --------------------------------------------------------
void sub_196E0(Type_AE400_29795* a1x)
{
  //__int16 *v1; // eax
  __int16 v2; // ax
  int v3; // eax
  __int16 v4; // ax
  int result; // eax
  int v6; // esi
  __int16 v7; // ax
  //__int16 *v8; // eax
  __int16 v9; // ax
  int v10; // esi
  __int16 v11; // ax
  //__int16 *v12; // eax
  __int16 v13; // ax
  int v14; // esi
  __int16 v15; // ax
  //__int16 *v16; // eax
  __int16 v17; // ax
  int v18; // esi
  int v19; // [esp-Ch] [ebp-1Ch]
  int v20; // [esp-Ch] [ebp-1Ch]
  int v21; // [esp-Ch] [ebp-1Ch]
  int v22; // [esp-Ch] [ebp-1Ch]
  int v23; // [esp-8h] [ebp-18h]
  int v24; // [esp-8h] [ebp-18h]
  int v25; // [esp-8h] [ebp-18h]
  int v26; // [esp-8h] [ebp-18h]
  int v27; // [esp-4h] [ebp-14h]
  int v28; // [esp-4h] [ebp-14h]
  int v29; // [esp-4h] [ebp-14h]
  int v30; // [esp-4h] [ebp-14h]
  __int16 v31; // [esp+0h] [ebp-10h]

  word_AE454_AE444 = a1x->var_u32_29867_72;
  //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  //v1 = *(__int16 **)(a1 + 156);
  v27 = a1x->var_u32_29951_156->v_14;
  v23 = a1x->var_u32_29951_156->v_10;
  v19 = a1x->var_u32_29951_156->v_12;
  v2 = sub_11F50(&word_AE454_AE444);
  sub_42000(&word_AE454_AE444, v2, v19, v23, v27);
  sub_41EC0_42200(&word_AE454_AE444, a1x->var_u16_29825_30, 0, a1x->actSpeed_29921_126);
  if (a1x->var_u32_29867_72.x >> 8 == word_AE454_AE444.x >> 8 )
  {
    v3 = word_AE454_AE444.y >> 8;
    if (a1x->var_u32_29867_72.y >> 8 == v3 )
      goto LABEL_3;
  }
  if ( !sub_11640(a1x, &word_AE454_AE444, 1) )
  {
    v6 = a1x->var_u32_29951_156->v_16;
    v3 = sub_19650(&word_AE454_AE444);
    if ( v3 < v6 )
      goto LABEL_3;
  }
  v31 = a1x->var_u16_29825_30;
  LOBYTE(v7) = v31 + 85;
  HIBYTE(v7) = ((unsigned __int16)(v31 + 341) >> 8) & 7;
  a1x->var_u16_29825_30 = v7;
  word_AE454_AE444 = a1x->var_u32_29867_72;
  //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  //v8 = *(__int16 **)(a1 + 156);
  v28 = a1x->var_u32_29951_156->v_14;
  v24 = a1x->var_u32_29951_156->v_10;
  v20 = a1x->var_u32_29951_156->v_12;
  v9 = sub_11F50(&word_AE454_AE444);
  sub_42000(&word_AE454_AE444, v9, v20, v24, v28);
  sub_41EC0_42200(&word_AE454_AE444, a1x->var_u16_29825_30, 0, a1x->actSpeed_29921_126);
  if ( !sub_11640(a1x, &word_AE454_AE444, 1) )
  {
    v10 = a1x->var_u32_29951_156->v_16;
    v3 = sub_19650(&word_AE454_AE444);
    if ( v3 < v10 )
      goto LABEL_3;
  }
  LOBYTE(v11) = v31 - 85;
  HIBYTE(v11) = ((unsigned __int16)(v31 - 341) >> 8) & 7;
  a1x->var_u16_29825_30 = v11;
  word_AE454_AE444 = a1x->var_u32_29867_72;
  //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  //v12 = *(__int16 **)(a1 + 156);
  v29 = a1x->var_u32_29951_156->v_14;
  v25 = a1x->var_u32_29951_156->v_10;
  v21 = a1x->var_u32_29951_156->v_12;
  v13 = sub_11F50(&word_AE454_AE444);
  sub_42000(&word_AE454_AE444, v13, v21, v25, v29);
  sub_41EC0_42200(&word_AE454_AE444, a1x->var_u16_29825_30, 0, a1x->actSpeed_29921_126);
  if ( !sub_11640(a1x, &word_AE454_AE444, 1) )
  {
    v14 = a1x->var_u32_29951_156->v_16;
    v3 = sub_19650(&word_AE454_AE444);
    if ( v3 < v14 )
      goto LABEL_3;
  }
  LOBYTE(v15) = v31;
  HIBYTE(v15) = (HIBYTE(v31) + 4) & 7;
  a1x->var_u16_29825_30 = v15;
  word_AE454_AE444 = a1x->var_u32_29867_72;
  //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  //v16 = *(__int16 **)(a1 + 156);
  v30 = a1x->var_u32_29951_156->v_14;
  v26 = a1x->var_u32_29951_156->v_10;
  v22 = a1x->var_u32_29951_156->v_12;
  v17 = sub_11F50(&word_AE454_AE444);
  sub_42000(&word_AE454_AE444, v17, v22, v26, v30);
  sub_41EC0_42200(&word_AE454_AE444, a1x->var_u16_29825_30, 0, a1x->actSpeed_29921_126);
  if ( sub_11640(a1x, &word_AE454_AE444, 1)
    || (v18 = a1x->var_u32_29951_156->v_16, v3 = sub_19650(&word_AE454_AE444), v3 >= v18) )
  {
    result = 1;
    a1x->actLife_29807_12 = -1;
  }
  else
  {
LABEL_3:
    sub_41C70_41FB0(a1x, &word_AE454_AE444);
    v4 = a1x->var_u16_29825_30
       + sub_422A0(
           a1x->var_u16_29825_30,
           a1x->var_u16_29829_34,
           a1x->var_u32_29951_156->v_4,
           a1x->var_u32_29951_156->v_2);
    HIBYTE(v4) &= 7u;
    a1x->var_u16_29825_30 = v4;
  }
}
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;

//----- (00019B10) --------------------------------------------------------
void sub_19B10(Type_AE400_29795* a1x, char a2)
{
  unsigned int v2; // edx
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int i; // ebx
  int v6; // eax
  unsigned __int8 v7; // al
  //int v8; // ebx
  Type_AE400_29795* v9x; // ebx
  unsigned int v10; // ebp
  int v11; // edx
  __int16 v12; // ax
  unsigned int v13; // edi
  __int16 v14; // ax
  unsigned int v15; // [esp+0h] [ebp-20h]
  int v16; // [esp+4h] [ebp-1Ch]
  Type_AE400_29795* v17x; // [esp+8h] [ebp-18h]

  //fix
  //v17 = 0;
  //fix

  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      for ( i = dword_AE400_AE3F0() + 29795 + 164 * v4;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v6 = *(_DWORD *)(i + 12);
        if ( v6 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v6;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      if ( *(_BYTE *)(164 * a1x->var_u16_29835_40 + dword_AE400_AE3F0() + 29859) != 3 )
        return;
      a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
      v7 = a2 + 2;
    }
    else
    {
      v7 = a2 + 4;
    }
    goto LABEL_31;
  }
  //v8 = *(_DWORD *)(a1 + 156);
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v15 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
    v9x = str_AE408_AE3F8->str_36382x[a1x->var_u8_29860_65];
    v17x = 0;
    v10 = -1;
    while ( v9x > str_AE400_AE3F0->str_29795)
    {
      if ( !v9x->var_u16_29847_52 && v9x != a1x )
      {
        v11 = v9x->var_u32_29867_72.x - a1x->var_u32_29867_72.x;
        v12 = v9x->var_u32_29867_72.y - a1x->var_u32_29867_72.y;
        v13 = v11 * v11 + v12 * v12;
        if ( v13 <= v15 )
        {
          v16 = a1x->var_u32_29951_156->v_30;
          v14 = sub_42150_42490(&a1x->var_u32_29867_72, &v9x->var_u32_29867_72);
          if ( (unsigned __int16)sub_42210(a1x->var_u16_29825_30, v14) < v16 && v13 < v10 )
          {
            v17x = v9x;
            v10 = v13;
          }
        }
      }
      v9x = v9x->next;
    }
    if ( v17x )
    {
        a1x->var_u16_29847_52 = v17x - str_AE400_AE3F0->str_29795;
      v7 = a2 + 3;
LABEL_31:
      sub_424F0(a1x, v7);
    }
  }
}
// 19BDE: conditional instruction was optimized away because edx.4==2
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00019D70) --------------------------------------------------------
void sub_19D70(Type_AE400_29795* a1x, char a2)
{
  unsigned int v2; // ebp
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int i; // esi
  int v6; // eax
  unsigned __int8 v7; // al
  unsigned int v8; // eax
  int v9; // ebp
  int v10; // eax
  unsigned int v11; // ebp
  unsigned int j; // esi
  int v13; // eax
  unsigned int v14; // edi
  __int16 v15; // ax
  int v16; // eax
  unsigned int v17; // ebp
  unsigned int v18; // esi
  int v19; // eax
  unsigned int v20; // edi
  __int16 v21; // ax
  unsigned int v22; // [esp+4h] [ebp-28h]
  int v23; // [esp+8h] [ebp-24h]
  int v24; // [esp+8h] [ebp-24h]
  unsigned int v25; // [esp+Ch] [ebp-20h]
  unsigned int v26; // [esp+14h] [ebp-18h]
  unsigned int v27; // [esp+18h] [ebp-14h]

  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      for ( i = 164 * v4 + dword_AE400_AE3F0() + 29795;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v6 = *(_DWORD *)(i + 12);
        if ( v6 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v6;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      if ( *(_BYTE *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40 + 29859) != 3 )
        return;
      a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
      v7 = a2 + 2;
    }
    else
    {
      v7 = a2 + 4;
    }
    goto LABEL_42;
  }
  sub_196E0(a1x);
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v8 = 9377 * a1x->rand_29799_4 + 9439;
    a1x->rand_29799_4 = v8;
    v9 = a1x->rand_29799_4;
    a1x->rand_29799_4 = 9377 * v9 + 9439;
    a1x->var_u16_29829_34 += ((unsigned __int8)(-95 * v9 - 33) + 85) * (2 * ((int)(v8 % 0x9D) / 79) - 1);
    LOBYTE(v8) = a1x->var_u8_29853_58;
    a1x->var_u16_29829_34 &= 0x7ffu;
    if ( (_BYTE)v8 )
    {
      v10 = a1x->var_u32_29951_156->v_28;
      v11 = -1;
      v22 = v10 * v10;
      v26 = 0;
      for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
      {
        v13 = (__int16)(*(_WORD *)(j + 72) - a1x->var_u32_29867_72.x);
        v14 = v13 * v13
            + (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y) * (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y);
        if ( v14 <= v22 && (*(_BYTE *)(j + 16) & 0x20) == 0 )
        {
          v23 = a1x->var_u32_29951_156->v_30;
          v15 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(j + 72));
          if ( (unsigned __int16)sub_42210(a1x->var_u16_29825_30, v15) < v23 && v14 < v11 )
          {
            v26 = j;
            v11 = v14;
          }
        }
      }
      if ( v26 )
      {
          a1x->var_u16_29941_146 = (int)(v26 - (dword_AE400_AE3F0() + 29795)) / 164;
        v7 = a2 + 2;
LABEL_42:
        sub_424F0(a1x, v7);
        return;
      }
      v16 = a1x->var_u32_29951_156->v_28;
      v17 = -1;
      v25 = v16 * v16;
      v18 = *(_DWORD *)(dword_AE408_AE3F8() + 4 * a1x->var_u8_29860_65 + 36382);
      v27 = 0;
      while ( v18 > dword_AE400_AE3F0() + 29795 )
      {
        if ( !*(_WORD *)(v18 + 52) && v18 != (uint32)a1x )
        {
          v19 = (__int16)(*(_WORD *)(v18 + 72) - a1x->var_u32_29867_72.x);
          v20 = v19 * v19
              + (__int16)(*(_WORD *)(v18 + 74) - a1x->var_u32_29867_72.y)
              * (__int16)(*(_WORD *)(v18 + 74) - a1x->var_u32_29867_72.y);
          if ( v20 <= v25 )
          {
            v24 = a1x->var_u32_29951_156->v_30;
            v21 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v18 + 72));
            if ( (unsigned __int16)sub_42210(a1x->var_u16_29825_30, v21) < v24 && v20 < v17 )
            {
              v27 = v18;
              v17 = v20;
            }
          }
        }
        v18 = *(_DWORD *)v18;
      }
      if ( v27 )
      {
        a1x->var_u16_29847_52 = (int)(v27 - (dword_AE400_AE3F0() + 29795)) / 164;
        v7 = a2 + 3;
        goto LABEL_42;
      }
    }
  }
}
// 19E3D: conditional instruction was optimized away because ebp.4==2
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0001A120) --------------------------------------------------------
int sub_1A120(Type_AE400_29795* a1x, char a2, unsigned __int16 (*a3)(Type_AE400_29795*, int))
{
  int v3; // esi
  unsigned int v4; // edi
  __int16 v5; // ax
  unsigned __int16 v6; // ax
  int v7; // eax
  int i; // edx
  int v9; // ecx
  char v10; // cl
  int v12; // edi
  //int v13; // ecx
  unsigned int v14; // ebp
  int v15; // [esp+0h] [ebp-14h]

  v3 = dword_AE400_AE3F0();
  v4 = 0;
  v15 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
      a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v5 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v4 = 1;
      a1x->var_u16_29835_40 = v5;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v6 = a1x->var_u16_29849_54;
    if ( v6 )
    {
      v7 = 164 * v6 + v3 + 29795;
      for ( i = v3 + 29795; v7 != i; v7 = i + 164 * *(unsigned __int16 *)(v7 + 54) )
      {
        v9 = *(_DWORD *)(v7 + 12);
        if ( v9 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v9;
          v4 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v7 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v4 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v4 )
  {
    if ( v4 <= 1 )
    {
      v10 = *(_BYTE *)(v3 + 164 * a1x->var_u16_29835_40 + 29859);
      dword_AE400_AE3F0(v3);
      if ( v10 == 3 )
      {
          a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
        return 0;
      }
    }
    else
    {
      dword_AE400_AE3F0(v3);
      sub_424F0(a1x, a2 + 4);
    }
    return v15;
  }
  dword_AE400_AE3F0(v3);
  sub_196E0(a1x);
  v12 = dword_AE400_AE3F0() + 29795 + 164 * a1x->var_u16_29941_146;
  if ( (a1x->var_u8_29858_63 & 3) == 0 )
      a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v12 + 72));
  if ( *(int *)(v12 + 12) < 0 || (*(_BYTE *)(v12 + 17) & 4) != 0 )
  {
LABEL_26:
    sub_424F0(a1x, a2 + 1);
    return 0;
  }
  //v13 = *(_DWORD *)(a1 + 156);
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v14 = a1x->var_u32_29951_156->v_28;
    if ( sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v12 + 72)) >= v14 )
      goto LABEL_26;
    if ( a3(a1x, v12) )
      return 1;
  }
  return v15;
}
// 1A1F2: conditional instruction was optimized away because edi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001A390) --------------------------------------------------------
void sub_1A390(Type_AE400_29795* a1x, unsigned __int16 a2)
{
  char v2; // al
  Type_AE400_29795* v3x; // esi
  __int16 v4; // di
  __int16 v5; // ax
  unsigned __int16 v6; // ax
  int i; // eax
  int v8; // edx
  unsigned __int8 v9; // al
  //__int16 v10; // ax
  __int16 v11; // ax
  __int16 v12; // ax
  unsigned int v13; // ecx
  __int64 v14; // rax
  __int64 v15; // rax
  unsigned __int8 v17; // [esp+0h] [ebp-10h]

  if ( !a1x->var_u16_29847_52)
  {
    v2 = a2;
LABEL_34:
    v9 = v2 + 1;
    goto LABEL_35;
  }
  v3x = &str_AE400_AE3F0->str_29795[a1x->var_u16_29847_52];
  v4 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
      v5 = a1x->str_29885_90.var_u16_29889_94;
      a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      a1x->var_u16_29835_40 = v5;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v4 = 1;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v6 = a1x->var_u16_29849_54;
    if ( v6 )
    {
      for ( i = 164 * v6 + dword_AE400_AE3F0() + 29795;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v8 = *(_DWORD *)(i + 12);
        if ( v8 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v8;
          v4 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v4 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  v17 = a2 + 2;
  if ( v4 )
  {
    if ( (unsigned __int16)v4 > 1u )
    {
      v3x->var_u16_29941_146 = a1x->var_u16_29835_40;
      v3x->var_u16_29847_52 = 0;
      sub_424F0(v3x, v17);
      v9 = a2 + 4;
LABEL_35:
      sub_424F0(a1x, v9);
      return;
    }
    //v10 = 41 * a1x->var_u16_29835_40;
    if ( *(_BYTE *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40 + 29859) == 3 )
    {
      v11 = a1x->var_u16_29835_40;
      v3x->var_u16_29847_52 = 0;
      v3x->var_u16_29941_146 = v11;
      sub_424F0(v3x, v17);
      v12 = a1x->var_u16_29835_40;
      a1x->var_u16_29847_52 = 0;
      a1x->var_u16_29941_146 = v12;
      sub_424F0(a1x, v17);
    }
  }
  else
  {
    sub_196E0(a1x);
    //v10 = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
    if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
    {
      switch (v3x->var_u8_29865_70 - a2 )
      {
        case 0:
        case 1:
          goto LABEL_24;
        case 2:
          a1x->var_u16_29941_146 = v3x->var_u16_29941_146;
          a1x->var_u16_29847_52 = 0;
          sub_424F0(a1x, v17);
          return;
        case 3:
            a1x->var_u16_29847_52 = v3x->var_u16_29847_52;
LABEL_24:
            a1x->var_u16_29829_34 = sub_42150_42490(
              &a1x->var_u32_29867_72,
              (axis_3d*)(_WORD *)(164 * a1x->var_u16_29847_52 + dword_AE400_AE3F0() + 29795 + 72));
          v13 = *(_DWORD *)(dword_AE408_AE3F8() + 4 * a1x->var_u8_29860_65 + 36382);
          break;
        default:
          v2 = a2;
          a1x->var_u16_29847_52 = 0;
          goto LABEL_34;
      }
      while ( v13 > dword_AE400_AE3F0() + 29795 )
      {
        if ( *(_WORD *)(v13 + 24) != a1x->id_29819_24)
        {
          v14 = a1x->var_u32_29867_72.x - *(__int16 *)(v13 + 72);
          if ( (int)((HIDWORD(v14) ^ v14) - HIDWORD(v14)) < 256 )
          {
            v15 = a1x->var_u32_29867_72.y - *(__int16 *)(v13 + 74);
            if ( (int)((HIDWORD(v15) ^ v15) - HIDWORD(v15)) < 256 )
            {
              a1x->var_u16_29829_34 = sub_42150_42490((axis_3d*)(_WORD *)(v13 + 72), &a1x->var_u32_29867_72);
              break;
            }
          }
        }
        v13 = *(_DWORD *)v13;
      }
      //v10 = v3x->var_u16_29925_130 + v3x->actSpeed_29921_126;
      a1x->actSpeed_29921_126 *= v3x->var_u16_29925_130;
    }
  }
}
// 1A4A3: conditional instruction was optimized away because di.2==2
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0001A6C0) --------------------------------------------------------
void sub_1A6C0(Type_AE400_29795* a1x, char a2)
{
  Type_AE400_29795* ix; // ebx
  __int16 v3; // cx
  unsigned int v4; // eax
  unsigned int v5; // ebx
  char v6; // cl

  for ( ix = &str_AE400_AE3F0->str_29795[a1x->var_u16_29849_54];
        ;
        ix = &str_AE400_AE3F0->str_29795[ix->var_u16_29849_54])
  {
    v4 = dword_AE400_AE3F0() + 29795;
    if ( ix == str_AE400_AE3F0->str_29795)
      break;
    sub_424F0(ix, a2 + 5);
    v3 = ix->var_u16_29833_38;
    if ( v3 )
        a1x->var_u16_29833_38 = v3;
  }
  v5 = v4 + 164 * a1x->var_u16_29833_38;
  if ( v5 > v4
    && *(_BYTE *)(v5 + 64) == 3
    && !*(_BYTE *)(v5 + 65)
    && (a1x->var_u8_29860_65 != 9 || !a1x->var_u16_29939_144)
    && a1x->id_29819_24 == a1x - str_AE400_AE3F0->str_29795)
  {
    v6 = a1x->var_u8_29860_65;
    if ( v6 != 12 && v6 != 13 && v6 != 14 && v6 != 15 && v6 != 9 )
      ++*(_DWORD *)(*(_DWORD *)(v5 + 160) + 359);
  }
  sub_424F0(a1x, a2 + 5);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001A800) --------------------------------------------------------
void sub_1A800(Type_AE400_29795* a1x)
{
  _WORD *v1; // eax
  int v2; // eax

  if ( (a1x->var_u8_29858_63 & 7) == 0 )
  {
    v1 = (_WORD *)dword_AE408_AE3F8();
    if ( (str_AE408_AE3F8->var_u8_1 & 2) != 0 )
        a1x->var_u32_29935_140 = 5000;
    sub_27690(v1, a1x);
    v2 = (int)sub_373F0(&a1x->var_u32_29867_72, 10, 1);
    if ( v2 )
      *(_WORD *)(v2 + 24) = a1x->id_29819_24;
    sub_41E80(a1x);
  }
}
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0001A8E0) --------------------------------------------------------
int sub_1A8E0(Type_AE400_29795* a1x, Type_AE400_29795* a2x)
{
  axis_3d* v2x; // edi
  int v3; // eax
  int v4; // ebx
  __int16 v5; // ax
  int v7; // [esp+0h] [ebp-14h]

  v2x = &a1x->var_u32_29867_72;
  v7 = 0;
  v3 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 0);
  v4 = v3;
  if ( v3 )
  {
    *(_BYTE *)(v3 + 68) = 10;
    *(_BYTE *)(v3 + 69) = 0;
    *(_WORD *)(v3 + 24) = a1x->id_29819_24;
    *(_WORD *)(v3 + 30) = sub_42150_42490(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v4 + 32) = sub_42180(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v4 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
    v5 = a1x->var_u16_29941_146;
    *(_DWORD *)(v4 + 156) = (uint32)&unk_98F38[6];
    *(_WORD *)(v4 + 146) = v5;
    *(_BYTE *)(v4 + 67) = a1x->sModel_29862_67;
    LOBYTE(v5) = a1x->sClass_29861_66;
    *(_WORD *)(v4 + 44) = 500;
    *(_BYTE *)(v4 + 66) = v5;
    return 1;
  }
  return v7;
}

//----- (0001A990) --------------------------------------------------------
int sub_1A990(Type_AE400_29795* a1x, Type_AE400_29795* a2x)
{
  axis_3d* v2x; // edi
  int v3; // ebx
  char v4; // al
  int v6; // [esp+0h] [ebp-14h]

  v2x = &a1x->var_u32_29867_72;
  v6 = 0;
  v3 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 13);
  if ( v3 )
  {
    *(_WORD *)(v3 + 24) = a1x->id_29819_24;
    *(_WORD *)(v3 + 30) = sub_42150_42490(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v3 + 32) = sub_42180(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v3 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
    *(_WORD *)(v3 + 146) = a1x->var_u16_29941_146;
    *(_BYTE *)(v3 + 67) = a1x->sModel_29862_67;
    v4 = a1x->sClass_29861_66;
    *(_WORD *)(v3 + 44) = 250;
    *(_BYTE *)(v3 + 66) = v4;
    sub_370A0((Type_AE400_29795*)(_WORD *)v3, 195);
    return 1;
  }
  return v6;
}

//----- (0001AA40) --------------------------------------------------------
void sub_1AA40(Type_AE400_29795* a1x, int a2)
{
  axis_3d* v2x; // edi
  int v3; // ebx
  int v5; // [esp+4h] [ebp-14h]

  v2x = &a1x->var_u32_29867_72;
  v5 = 0;
  v3 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 13);
  if ( v3 )
  {
    *(_WORD *)(v3 + 24) = a1x->id_29819_24;
    *(_WORD *)(v3 + 30) = sub_42150_42490(v2x, &a1x->var_u32_29867_72);
    *(_WORD *)(v3 + 32) = sub_42180(v2x, &a1x->var_u32_29867_72);
    *(_WORD *)(v3 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
    *(_WORD *)(v3 + 146) = a1x->var_u16_29941_146;
    *(_BYTE *)(v3 + 67) = a1x->sModel_29862_67;
    *(_BYTE *)(v3 + 66) = a1x->sClass_29861_66;
    if (a1x->var_u16_29939_144)
      *(_WORD *)(v3 + 44) = 600;
    else
      *(_WORD *)(v3 + 44) = 400;
    sub_370A0((Type_AE400_29795*)(_WORD *)v3, 203);
  }
}

//----- (0001AB10) --------------------------------------------------------
int sub_1AB10(Type_AE400_29795* a1x, int a2)
{
  int v2; // ebx

  v2 = 0;
  if ( (int)sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(a2 + 72)) < 1024 )
  {
    v2 = 1;
    sub_12B50(a1x, a2, 0, a1x->var_u16_29839_44);
  }
  return v2;
}

//----- (0001AB70) --------------------------------------------------------
int sub_1AB70(Type_AE400_29795* a1x, Type_AE400_29795* a2x)
{
  unsigned int v2; // eax
  int v3; // edi
  int v4; // ebx
  unsigned __int16 v5; // si
  unsigned __int16 v6; // bx
  int v7; // eax
  __int16 v8; // cx
  unsigned __int16 i; // bx
  int v10; // eax
  __int16 v11; // cx
  int v12; // eax
  __int16 v13; // si
  __int16 v15; // [esp+4h] [ebp-34h]
  __int16 v16; // [esp+8h] [ebp-30h]
  int v17; // [esp+Ch] [ebp-2Ch]
  char v18; // [esp+14h] [ebp-24h]
  __int16 v19; // [esp+18h] [ebp-20h]
  __int16 v20; // [esp+1Ch] [ebp-1Ch]
  __int16 v21; // [esp+20h] [ebp-18h]
  char v22; // [esp+24h] [ebp-14h]

  v20 = a1x->id_29819_24;
  v17 = 0;
  v19 = sub_42150_42490(&a1x->var_u32_29867_72, &a2x->var_u32_29867_72);
  v21 = sub_42180(&a1x->var_u32_29867_72, &a2x->var_u32_29867_72);
  v16 = a1x->var_u16_29873_78.var_u16_29879_84;
  v15 = a1x->var_u16_29941_146;
  v18 = a1x->sModel_29862_67;
  v22 = a1x->sClass_29861_66;
  v2 = (unsigned int)(7 * a1x->var_u32_29935_140) / a1x->var_u32_29931;
  v3 = 0;
  LOWORD(v4) = 0;
  v5 = v2;
  if ( (_WORD)v2 )
  {
      a1x->rand_29799_4 = 9377 * a1x->rand_29799_4 + 9439;
    v4 = (int)(a1x->rand_29799_4 % (100 * (unsigned int)(unsigned __int16)v2)) / 100;
  }
  if ( !(_WORD)v2 )
    v5 = 1;
  if ( v5 > 5u )
    v5 = 5;
  switch ( (__int16)v4 )
  {
    case 0:
      v6 = 0;
      do
      {
        v7 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 0);
        v3 = v7;
        if ( v7 )
        {
          *(_BYTE *)(v7 + 69) = 0;
          *(_DWORD *)(v7 + 156) = (uint32)((char *)&unk_98F38[6 - v6]);
          *(_BYTE *)(v7 + 67) = v18;
          *(_BYTE *)(v7 + 66) = v22;
          *(_BYTE *)(v7 + 68) = 10;
          *(_WORD *)(v7 + 24) = v20;
          *(_WORD *)(v7 + 30) = v19;
          v8 = *(_WORD *)(v7 + 76);
          *(_WORD *)(v7 + 32) = v21;
          *(_WORD *)(v7 + 44) = 400;
          *(_WORD *)(v7 + 76) = v16 + v8;
          *(_WORD *)(v7 + 146) = v15;
        }
        ++v6;
      }
      while ( v6 < v5 );
      break;
    case 1:
    case 2:
      for ( i = 1; i < v5; ++i )
      {
        v10 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 9);
        v3 = v10;
        if ( v10 )
        {
          *(_BYTE *)(v10 + 69) = 23;
          *(_DWORD *)(v10 + 156) = (uint32)((char *)&unk_98F38[6 - i]);
          *(_BYTE *)(v10 + 67) = v18;
          *(_BYTE *)(v10 + 66) = v22;
          *(_BYTE *)(v10 + 68) = 10;
          *(_WORD *)(v10 + 24) = v20;
          *(_WORD *)(v10 + 30) = v19;
          v11 = *(_WORD *)(v10 + 76);
          *(_WORD *)(v10 + 32) = v21;
          *(_WORD *)(v10 + 44) = 800;
          *(_WORD *)(v10 + 76) = v16 + v11;
          *(_WORD *)(v10 + 146) = v15;
        }
      }
      break;
    case 3:
    case 4:
    case 5:
    case 6:
      v12 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 3);
      v3 = v12;
      if ( v12 )
      {
        *(_BYTE *)(v12 + 69) = 17;
        *(_DWORD *)(v12 + 156) = (uint32)&unk_98F38[3];
        *(_BYTE *)(v12 + 67) = v18;
        *(_BYTE *)(v12 + 66) = v22;
        *(_BYTE *)(v12 + 68) = 10;
        *(_WORD *)(v12 + 24) = v20;
        *(_WORD *)(v12 + 30) = v19;
        v13 = *(_WORD *)(v12 + 76);
        *(_WORD *)(v12 + 32) = v21;
        *(_WORD *)(v12 + 44) = 8000;
        *(_WORD *)(v12 + 76) = v16 + v13;
        *(_WORD *)(v12 + 146) = v15;
      }
      break;
    default:
      break;
  }
  if ( v3 )
    return 1;
  return v17;
}
// 1AC69: conditional instruction was optimized away because si.2 is in (1..5)
// 98F98: using guessed type void *off_98F98;

//----- (0001AE30) --------------------------------------------------------
int sub_1AE30(Type_AE400_29795* a1x, Type_AE400_29795* a2x)
{
  axis_3d* v2x; // edi
  int v3; // eax
  int v4; // ebx
  __int16 v5; // ax
  int v7; // [esp+0h] [ebp-14h]

  v2x = &a1x->var_u32_29867_72;
  v7 = 0;
  v3 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 14);
  v4 = v3;
  if ( v3 )
  {
    *(_BYTE *)(v3 + 68) = 10;
    *(_BYTE *)(v3 + 69) = 0;
    *(_WORD *)(v3 + 24) = a1x->id_29819_24;
    *(_WORD *)(v3 + 30) = sub_42150_42490(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v4 + 32) = sub_42180(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v4 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
    v5 = a1x->var_u16_29941_146;
    *(_DWORD *)(v4 + 156) = (uint32)&unk_98F38[6];
    *(_WORD *)(v4 + 146) = v5;
    *(_BYTE *)(v4 + 67) = a1x->sModel_29862_67;
    LOBYTE(v5) = a1x->sClass_29861_66;
    *(_WORD *)(v4 + 44) = 780;
    *(_BYTE *)(v4 + 66) = v5;
    return 1;
  }
  return v7;
}

//----- (0001AEE0) --------------------------------------------------------
int sub_1AEE0(Type_AE400_29795* a1x, Type_AE400_29795* a2x)
{
  axis_3d* v2x; // esi
  int v3; // edi
  int v4; // eax
  int v5; // ebx
  char v6; // al

  v2x = &a1x->var_u32_29867_72;
  v3 = 0;
  v4 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 9);
  v5 = v4;
  if ( v4 )
  {
    *(_BYTE *)(v4 + 68) = 10;
    *(_BYTE *)(v4 + 69) = 23;
    *(_WORD *)(v4 + 24) = a1x->id_29819_24;
    *(_WORD *)(v4 + 30) = sub_42150_42490(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v5 + 32) = sub_42180(v2x, &a2x->var_u32_29867_72);
    *(_WORD *)(v5 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
    *(_WORD *)(v5 + 146) = a1x->var_u16_29941_146;
    *(_DWORD *)(v5 + 156) = (uint32)&unk_98F38[6];
    *(_BYTE *)(v5 + 67) = a1x->sModel_29862_67;
    v6 = a1x->sClass_29861_66;
    *(_WORD *)(v5 + 44) = 4000;
    v3 = 1;
    *(_BYTE *)(v5 + 66) = v6;
  }
  return v3;
}

//----- (0001B060) --------------------------------------------------------
void sub_1B060(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 0);
}

//----- (0001B070) --------------------------------------------------------
void sub_1B070(Type_AE400_29795* a1x)
{
  sub_19D70(a1x, 0);
  return sub_1B120(a1x);
}

//----- (0001B090) --------------------------------------------------------
void sub_1B090(Type_AE400_29795* a1x)
{
  if ( (unsigned __int16)sub_1A120(a1x, 0, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1A8E0) )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 8);
  sub_1B120(a1x);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001B0E0) --------------------------------------------------------
void sub_1B0E0(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0);
  sub_1B120(a1x);
}

//----- (0001B100) --------------------------------------------------------
void sub_1B100(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 0);
}

//----- (0001B110) --------------------------------------------------------
void sub_1B110(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001B120) --------------------------------------------------------
void sub_1B120(Type_AE400_29795* a1x)
{
  __int16 v1; // ax
  int v2; // edx
  int result; // eax

  a1x->var_u32_29867_72.z += a1x->var_u16_29821_26;
  v1 = sub_11F50(&a1x->var_u32_29867_72);
  v2 = a1x->var_u32_29867_72.z;
  result = v1 + 256;
  a1x->var_u16_29821_26 -= 5;
  if ( v2 < result )
      a1x->var_u16_29821_26 = 150;
}

//----- (0001B160) --------------------------------------------------------
void sub_1B160(Type_AE400_29795* a1x)
{
  //__int16 result; // ax
  int v2; // eax

  sub_19B10(a1x, 6);
  sub_196E0(a1x);
  //HIBYTE(result) = a1x->var_u8_29865_70;
  if (a1x->var_u8_29865_70 == 6 )
  {
    //result = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
    if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
    {
      v2 = 164 * a1x->var_u16_29941_146 + dword_AE400_AE3F0() + 29795;
      if ( *(_BYTE *)(v2 + 64) )
      {
        //result = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v2 + 72));
        a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD*)(v2 + 72));
      }
      else
      {
        a1x->var_u16_29941_146 = 0;
        sub_424F0(a1x, 7u);
        //return;
      }
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001B200) --------------------------------------------------------
void sub_1B200(Type_AE400_29795* a1x)
{
  //int v1; // esi
  unsigned int result; // eax
  unsigned int v3; // ecx
  unsigned int v4; // edi
  int v5; // esi
  int v6; // edx
  unsigned int v7; // edx
  unsigned int v8; // [esp+0h] [ebp-10h]

  sub_19D70(a1x, 6);
  //v1 = *(_DWORD *)(a1 + 156);
  result = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v8 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
    v3 = -1;
    v4 = 0;
    for ( result = *(_DWORD *)(dword_AE408_AE3F8() + 36466); result > dword_AE400_AE3F0() + 29795; result = *(_DWORD *)result )
    {
      if ( *(_BYTE *)(result + 65) == 40 )
      {
        v5 = (__int16)(*(_WORD *)(result + 72) - a1x->var_u32_29867_72.x);
        v6 = (__int16)(*(_WORD *)(result + 74) - a1x->var_u32_29867_72.y);
        v7 = v5 * v5 + v6 * v6;
        if ( v7 <= v8 && v7 < v3 )
        {
          v4 = result;
          v3 = v7;
        }
      }
    }
    if ( v4 )
    {
      a1x->var_u16_29941_146 = (int)(v4 - (dword_AE400_AE3F0() + 29795)) / 164;
      sub_424F0(a1x, 6u);
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0001B2D0) --------------------------------------------------------
void sub_1B2D0(Type_AE400_29795* a1x)
{
  if ( (unsigned __int16)sub_1A120(a1x, 6, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1AB10) )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 7);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001B320) --------------------------------------------------------
void sub_1B320(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 6u);
}

//----- (0001B330) --------------------------------------------------------
void sub_1B330(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 6);
}

//----- (0001B340) --------------------------------------------------------
void sub_1B340(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001B350) --------------------------------------------------------
void sub_1B350(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 12);
  if (a1x->var_u8_29865_70 == 14 )
      a1x->var_u16_29821_26 = 1;
}

//----- (0001B370) --------------------------------------------------------
void sub_1B370(Type_AE400_29795* a1x)
{
  sub_19D70(a1x, 12);
  if (a1x->var_u8_29865_70 == 14 )
  {
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 13);
    a1x->var_u16_29821_26 = 1;
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001B3C0) --------------------------------------------------------
void sub_1B3C0(Type_AE400_29795* a1x)
{
  __int16 v1; // dx
  int v2; // ecx
  int v3; // eax
  __int16 result; // ax

  v1 = a1x->var_u16_29821_26;
  if ( v1 )
  {
      a1x->var_u16_29821_26 = v1 - 1;
    if ( v1 == 1 )
        a1x->actSpeed_29921_126 = 3 * a1x->actSpeed_29923_128;
  }
  v2 = a1x->var_u32_29867_72.z - *(__int16 *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29941_146 + 29871);
  if ( v2 )
    v3 = v2 / (int)abs32(v2);
  else
    LOWORD(v3) = 0;
  a1x->var_u32_29867_72.z += v3 * a1x->var_u32_29951_156->v_14;
  result = sub_1A120(a1x, 12, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1AB10);
  if ( result )
  {
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 13);
    a1x->actSpeed_29921_126 = -a1x->var_u16_29925_130;
    result = 3 * a1x->var_u32_29951_156->v_26;
    a1x->var_u16_29821_26 = result;
  }
  if (a1x->var_u8_29865_70 != 14 )
  {
    result = a1x->actSpeed_29923_128;
    a1x->actSpeed_29921_126 = result;
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001B4C0) --------------------------------------------------------
void sub_1B4C0(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0xCu);
  if (a1x->var_u8_29865_70 == 14 )
      a1x->var_u16_29821_26 = 1;
}

//----- (0001B4E0) --------------------------------------------------------
void sub_1B4E0(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 12);
}

//----- (0001B4F0) --------------------------------------------------------
void sub_1B4F0(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001B500) --------------------------------------------------------
void sub_1B500(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 18);
}

//----- (0001B510) --------------------------------------------------------
void sub_1B510(Type_AE400_29795* a1x)
{
  sub_19D70(a1x, 18);
}

//----- (0001B520) --------------------------------------------------------
void sub_1B520(Type_AE400_29795* a1x)
{
  if ( (unsigned __int16)sub_1A120(a1x, 18, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1A8E0) )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 8);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001B570) --------------------------------------------------------
void sub_1B570(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x12u);
}

//----- (0001B580) --------------------------------------------------------
void sub_1B580(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 18);
}

//----- (0001B590) --------------------------------------------------------
void sub_1B590(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001B5A0) --------------------------------------------------------
void sub_1B5A0(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 24);
  if (a1x->var_u8_29865_70 == 26 )
    sub_1BC50(a1x);
}

//----- (0001B5D0) --------------------------------------------------------
void sub_1B5D0(Type_AE400_29795* a1x)
{
  unsigned int v1; // edx
  __int16 v2; // ax
  int v3; // eax
  int i; // esi
  int v5; // edi
  int v6; // esi
  Type_AE400_29795* v7x; // eax
  int v8; // edx
  unsigned int v9; // eax
  __int16 v10; // dx
  int v11; // eax
  //int v12; // esi
  int v13; // ecx
  int v14; // eax
  unsigned int v15; // ebp
  unsigned int v16; // esi
  int v17; // edi
  unsigned int v18; // edi
  __int16 v19; // ax
  int v20; // ebp
  int v21; // eax
  unsigned int v22; // edi
  unsigned int v23; // edx
  unsigned int v24; // esi
  int v25; // ebp
  int v26; // ebp
  __int16 v27; // cx
  unsigned int v28; // eax
  int v29; // eax
  Type_AE400_29795* v30x; // esi
  unsigned int v31; // ebp
  int v32; // edi
  int v33; // eax
  unsigned int v34; // edi
  __int16 v35; // ax
  int v36; // esi
  int v38; // [esp+0h] [ebp-38h]
  int v39; // [esp+4h] [ebp-34h]
  int v40; // [esp+4h] [ebp-34h]
  Type_AE400_29795* v41x; // [esp+8h] [ebp-30h]
  unsigned int v42; // [esp+Ch] [ebp-2Ch]
  unsigned int v43; // [esp+14h] [ebp-24h]
  unsigned int v44; // [esp+1Ch] [ebp-1Ch]

  a1x->var_u16_29821_26 = 0;
  v1 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v2 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v1 = 1;
      a1x->var_u16_29835_40 = v2;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    if (a1x->var_u16_29849_54)
    {
      v3 = 164 * a1x->var_u16_29849_54;
      for ( i = dword_AE400_AE3F0() + 29795; ; i = 164 * *(unsigned __int16 *)(v6 + 54) )
      {
        v6 = v3 + i;
        v3 = dword_AE400_AE3F0() + 29795;
        if ( v6 == dword_AE400_AE3F0() + 29795 )
          break;
        v5 = *(_DWORD *)(v6 + 12);
        if ( v5 < a1x->actLife_29807_12)
        {
          a1x->actLife_29807_12 = v5;
          v1 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v6 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v1 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v1 )
  {
    if ( v1 <= 1 )
    {
      //LOWORD(v7) = 41 * a1x->var_u16_29835_40;
      if ( *(_BYTE *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40 + 29859) == 3 )
      {
          a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
        sub_424F0(a1x, 0x1Au);
      }
    }
    else
    {
      sub_424F0(a1x, 0x1Cu);
    }
  }
  else
  {
    sub_196E0(a1x);
    //LOWORD(v7) = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
    v8 = a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26;
    if ( !v8 )
    {
      if (a1x->var_u16_29941_146)
      {
        LOWORD(v8) = a1x->var_u16_29941_146;
        //LOBYTE(v7) = dword_AE400_AE3F0() + 99;
        v36 = dword_AE400_AE3F0() + 29795 + 164 * v8;
        if ( *(_BYTE *)(v36 + 64) == 10 && *(_BYTE *)(v36 + 65) == 45 )
        {
          if ( sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v36 + 72)) > 0x1000 )
          {
            //LOWORD(v7) = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v36 + 72));
            a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD*)(v36 + 72));
          }
          else
          {
            sub_424F0(a1x, 0x1Cu);
            a1x->var_u16_29821_26 = 1;
            ++*(_WORD *)(v36 + 26);
          }
        }
        else
        {
            a1x->var_u16_29941_146 = 0;
        }
      }
      else
      {
        v9 = 9377 * a1x->rand_29799_4 + 9439;
        a1x->rand_29799_4 = v9;
        v10 = 2 * (v9 % 0x9D / 79i64);
        v11 = 9377 * a1x->rand_29799_4 + 9439;
        a1x->rand_29799_4 = v11;
        a1x->var_u16_29829_34 += ((unsigned __int8)v11 + 85) * (v10 - 1);
        //v12 = *(_DWORD *)(a1 + 156);
        a1x->var_u16_29829_34 &= 0x7ffu;
        v13 = 4 * a1x->var_u32_29951_156->v_26;
        //v7 = a1x->var_u8_29858_63 / v13;
        if ( !(a1x->var_u8_29858_63 % v13) )
        {
          v14 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
          v15 = -1;
          v38 = a1x->var_u8_29858_63 % v13;
          v16 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
          v43 = v14;
          while ( 1 )
          {
            //LOBYTE(v7) = dword_AE400_AE3F0() + 99;
            if ( v16 <= dword_AE400_AE3F0() + 29795 )
              break;
            v17 = (__int16)(*(_WORD *)(v16 + 72) - a1x->var_u32_29867_72.x);
            v18 = (__int16)(*(_WORD *)(v16 + 74) - a1x->var_u32_29867_72.y)
                * (__int16)(*(_WORD *)(v16 + 74) - a1x->var_u32_29867_72.y)
                + v17 * v17;
            if ( v18 <= v43 && (*(_BYTE *)(v16 + 16) & 0x20) == 0 )
            {
              v39 = a1x->var_u32_29951_156->v_30;
              v19 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v16 + 72));
              if ( (unsigned __int16)sub_42210(a1x->var_u16_29825_30, v19) < v39 && v18 < v15 )
              {
                v38 = v16;
                v15 = v18;
              }
            }
            v16 = *(_DWORD *)v16;
          }
          v20 = v38;
          if ( v38 )
          {
            if ( *(_BYTE *)(v38 + 65) > 1u || !*(_WORD *)(*(_DWORD*)(v38 + 160) + 528) )
              v20 = 0;
          }
          if ( !v20 )
          {
            v21 = a1x->var_u32_29951_156->v_28;
            v22 = -1;
            v23 = 0;
            v24 = *(_DWORD *)(dword_AE408_AE3F8() + 36418);
            v44 = v21 * v21;
            while ( 1 )
            {
              //LOBYTE(v7) = dword_AE400_AE3F0() + 99;
              if ( v24 <= dword_AE400_AE3F0() + 29795 )
                break;
              v25 = (__int16)(*(_WORD *)(v24 + 72) - a1x->var_u32_29867_72.x);
              v26 = v25 * v25;
              v27 = a1x->var_u32_29867_72.y;
              v28 = v26 + (__int16)(*(_WORD *)(v24 + 74) - v27) * (__int16)(*(_WORD *)(v24 + 74) - v27);
              if ( v28 <= v44 && v28 < v22 )
              {
                v23 = v24;
                v22 = v26 + (__int16)(*(_WORD *)(v24 + 74) - v27) * (__int16)(*(_WORD *)(v24 + 74) - v27);
              }
              v24 = *(_DWORD *)v24;
            }
            v20 = v23;
          }
          if ( v20 )
          {
            if ( *(_BYTE *)(v20 + 64) != 10 || *(_BYTE *)(v20 + 65) != 45 )
            {
              a1x->var_u16_29941_146 = (v20 - (dword_AE400_AE3F0() + 29795)) / 164;
              sub_424F0(a1x, 0x1Au);
            }
          }
          else
          {
            v29 = a1x->var_u32_29951_156->v_28;
            v42 = v29 * v29;
            v30x = str_AE408_AE3F8->str_36382x[a1x->var_u8_29860_65 + 36382];
            v41x = 0;
            v31 = -1;
            while ( 1 )
            {
              v7x = str_AE400_AE3F0->str_29795;
              if ( v30x <= str_AE400_AE3F0->str_29795)
                break;
              if ( !v30x->var_u16_29847_52 && v30x != a1x )
              {
                v32 = v30x->var_u32_29867_72.x - a1x->var_u32_29867_72.x;
                v33 = v30x->var_u32_29867_72.y - a1x->var_u32_29867_72.y;
                v34 = v33 * v33 + v32 * v32;
                if ( v34 <= v42 )
                {
                  v40 = a1x->var_u32_29951_156->v_30;
                  v35 = sub_42150_42490(&a1x->var_u32_29867_72, &v30x->var_u32_29867_72);
                  if ( (unsigned __int16)sub_42210(a1x->var_u16_29825_30, v35) < v40 && v34 < v31 )
                  {
                    v41x = v30x;
                    v31 = v34;
                  }
                }
              }
              v30x = v30x->next;
            }
            if ( v41x )
            {
              a1x->var_u16_29847_52 = v41x - v7x;
              sub_424F0(a1x, 0x1Bu);
            }
          }
        }
      }
    }
  }
  if (a1x->var_u8_29865_70 == 26 )
    sub_1BC50(a1x);
}
// 1B6B7: conditional instruction was optimized away because edx.4==2
// 1B8A8: conditional instruction was optimized away because %var_38.4!=0
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0001BB20) --------------------------------------------------------
void sub_1BB20(Type_AE400_29795* a1x)
{
  int result; // eax

  sub_1A120(a1x, 24, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1A990);
  if (a1x->var_u8_29865_70 != 26)
  {
      sub_1BCE0(a1x);
      return;
  }
  result = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    result = 164 * a1x->var_u16_29941_146;
    if ( result + dword_AE400_AE3F0() + 29795 )
    {
      result += dword_AE400_AE3F0();
      if ( *(_BYTE *)(result + 29860) <= 1u )
      {
        result = *(_DWORD *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29941_146 + 29955);
        *(_WORD *)(result + 528) = 200;
      }
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001BBE0) --------------------------------------------------------
void sub_1BBE0(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x18u);
  if (a1x->var_u8_29865_70 == 26 )
    sub_1BC50(a1x);
}

//----- (0001BC10) --------------------------------------------------------
void sub_1BC10(Type_AE400_29795* a1x)
{
  if (a1x->var_u16_29821_26)
    sub_41E80(a1x);
  else
    sub_1A6C0(a1x, 24);
}

//----- (0001BC40) --------------------------------------------------------
void sub_1BC40(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001BC50) --------------------------------------------------------
void sub_1BC50(Type_AE400_29795* a1x)
{
  unsigned int v1; // eax
  int v2; // ecx
  unsigned __int16 v3; // dx
  char result; // al

  v1 = 9377 * a1x->rand_29799_4 + 9439;
  a1x->rand_29799_4 = v1;
  a1x->actSpeed_29921_126 = 0;
  if ( (int)(v1 % 0x14) <= 10 )
    sub_36FA0(a1x, 206);
  else
    sub_36FA0(a1x, 1);
  v2 = dword_AE400_AE3F0();
  v3 = a1x->var_u16_29941_146;
  a1x->sClass_29861_66 = *(_BYTE *)(dword_AE400_AE3F0() + 164 * v3 + 29859);
  result = *(_BYTE *)(v2 + 164 * v3 + 29860);
  a1x->sModel_29862_67 = result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001BCE0) --------------------------------------------------------
void sub_1BCE0(Type_AE400_29795* a1x)
{
  a1x->actSpeed_29921_126 = a1x->actSpeed_29923_128;
  sub_36FA0(a1x, 0);
  a1x->sClass_29861_66 = 3;
  a1x->sModel_29862_67 = -1;
}

//----- (0001BD10) --------------------------------------------------------
void sub_1BD10(Type_AE400_29795* a1x)
{
  sub_424F0(a1x, 0x1Fu);
}

//----- (0001BD20) --------------------------------------------------------
void sub_1BD20(Type_AE400_29795* a1x)
{
  unsigned int v1; // edi
  __int16 v2; // ax
  unsigned __int16 v3; // cx
  int i; // eax
  int v5; // edx
  //int v6; // esi
  unsigned int v7; // ebp
  unsigned int v8; // esi
  int v9; // edi
  int v10; // eax
  unsigned int v11; // edi
  __int16 v12; // ax
  int v13; // eax
  unsigned int v14; // ebp
  int v15; // eax
  _WORD *v16; // esi
  unsigned int v17; // edi
  unsigned int v18; // edx
  unsigned int j; // eax
  int v20; // edi
  int v21; // edi
  __int16 v22; // cx
  int v23; // esi
  unsigned int v24; // eax
  int result; // eax
  int v26; // edx
  int v27; // [esp+0h] [ebp-20h]
  axis_3d* v28x; // [esp+4h] [ebp-1Ch]
  unsigned int v29; // [esp+8h] [ebp-18h]
  unsigned int v30; // [esp+Ch] [ebp-14h]

  v1 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
      a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v2 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v1 = 1;
      a1x->var_u16_29835_40 = v2;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v3 = a1x->var_u16_29849_54;
    if ( v3 )
    {
      for ( i = dword_AE400_AE3F0() + 29795 + 164 * v3;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v5 = *(_DWORD *)(i + 12);
        if ( v5 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v5;
          v1 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v1 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v1 )
  {
    if ( v1 <= 1 )
    {
      if ( *(_BYTE *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40 + 29859) == 3 )
      {
        a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
        sub_424F0(a1x, 0x20u);
      }
    }
    else
    {
      sub_424F0(a1x, 0x22u);
    }
  }
  else
  {
    sub_196E0(a1x);
    //v6 = *(_DWORD *)(a1 + 156);
    if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
    {
      v7 = -1;
      v29 = 0;
      v30 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
      v8 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
      v28x = &a1x->var_u32_29867_72;
      while ( 1 )
      {
        v13 = dword_AE400_AE3F0() + 29795;
        if ( v8 <= dword_AE400_AE3F0() + 29795 )
          break;
        v9 = (__int16)(*(_WORD *)(v8 + 72) - a1x->var_u32_29867_72.x);
        v10 = (__int16)(*(_WORD *)(v8 + 74) - a1x->var_u32_29867_72.y);
        v11 = v10 * v10 + v9 * v9;
        if ( v11 <= v30 && (*(_BYTE *)(v8 + 16) & 0x20) == 0 )
        {
          v27 = a1x->var_u32_29951_156->v_30;
          v12 = sub_42150_42490(v28x, (axis_3d*)(_WORD *)(v8 + 72));
          if ( (unsigned __int16)sub_42210(a1x->var_u16_29825_30, v12) < v27 && v11 < v7 )
          {
            v29 = v8;
            v7 = v11;
          }
        }
        v8 = *(_DWORD *)v8;
      }
      v14 = v29;
      if ( v29 )
      {
        a1x->var_u16_29941_146 = (int)(v29 - v13) / 164;
        sub_424F0(a1x, 0x20u);
      }
      else if (a1x->var_u16_29941_146)
      {
        v15 = 164 * a1x->var_u16_29941_146 + v13;
        if ( *(_BYTE *)(v15 + 64) == 10 && *(_BYTE *)(v15 + 65) == 39 )
        {
          v16 = (_WORD *)(v15 + 72);
          v17 = a1x->actSpeed_29923_128 << 7;
          if ( sub_423D0_42710(v28x, (axis_3d*)(_WORD *)(v15 + 72)) > v17 )
          {
             a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)v16);
          }
          else
          {
            a1x->var_u16_29821_26 = 15;
            sub_424F0(a1x, 0x21u);
          }
        }
        else
        {
            a1x->var_u16_29941_146 = 0;
        }
      }
      else if ( !(2 * (a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26)) )
      {
        v18 = -1;
        for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36466); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
        {
          if ( *(_BYTE *)(j + 65) == 39 )
          {
            v20 = (__int16)(*(_WORD *)(j + 72) - a1x->var_u32_29867_72.x);
            v21 = v20 * v20;
            v22 = a1x->var_u32_29867_72.y;
            if ( v21 + (__int16)(*(_WORD *)(j + 74) - v22) * (__int16)(*(_WORD *)(j + 74) - v22) < v18 )
            {
              v14 = j;
              v18 = v21 + (__int16)(*(_WORD *)(j + 74) - v22) * (__int16)(*(_WORD *)(j + 74) - v22);
            }
          }
        }
        if ( v14 )
            a1x->var_u16_29941_146 = (int)(v14 - (dword_AE400_AE3F0() + 29795)) / 164;
        if (a1x->var_u32_29931 + 500 < a1x->var_u32_29935_140)
        {
          v23 = (int)sub_373F0(&a1x->var_u32_29867_72, 10, 52);
          if ( v23 )
          {
            v24 = 9377 * a1x->rand_29799_4 + 9439;
              a1x->rand_29799_4 = v24;
            *(_WORD *)(v23 + 26) = 10 * (v24 % 0xA) + 100;
            a1x->var_u32_29935_140 -= 500;
          }
        }
      }
    }
  }
  result = a1x->actLife_29807_12;
  v26 = a1x->maxLife_29803_8;
  if ( result < v26 )
  {
    result = v26 >> 7;
    a1x->actLife_29807_12 += v26 >> 7;
  }
}
// 1BDEF: conditional instruction was optimized away because edi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0001C110) --------------------------------------------------------
void sub_1C110(Type_AE400_29795* a1x)
{
  int result; // eax
  int v2; // edx

  if ( (unsigned __int16)sub_1A120(a1x, 30, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1AB70) )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 32);
  result = a1x->actLife_29807_12;
  v2 = a1x->maxLife_29803_8;
  if ( result < v2 )
  {
    result = v2 >> 7;
    a1x->actLife_29807_12 += v2 >> 7;
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001C170) --------------------------------------------------------
void sub_1C170(Type_AE400_29795* a1x)
{
  int v1; // esi
  unsigned int v2; // edi
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int v5; // eax
  int i; // edx
  int v7; // ecx
  __int16 result; // ax
  int v9; // edi
  unsigned int v10; // eax
  int v11; // ebp

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v7;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  dword_AE400_AE3F0(v1);
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      result = 41 * a1x->var_u16_29835_40;
      if ( *(_BYTE *)(v1 + 164 * a1x->var_u16_29835_40 + 29859) == 3 )
      {
        a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
        sub_424F0(a1x, 0x20u);
      }
    }
    else
    {
      sub_424F0(a1x, 0x22u);
    }
  }
  else
  {
    sub_196E0(a1x);
    result = a1x->var_u8_29858_63 / a1x->var_u16_29821_26;
    if ( !(a1x->var_u8_29858_63 % a1x->var_u16_29821_26) )
    {
      v9 = 164 * a1x->var_u16_29941_146 + dword_AE400_AE3F0() + 29795;
      if ( *(_BYTE *)(v9 + 64) == 10 && *(_BYTE *)(v9 + 65) == 39 )
      {
        v10 = sub_423D0_42710(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v9 + 72));
        v11 = a1x->actSpeed_29923_128;
        if ( v10 > 5 * v11 )
        {
          if ( v10 <= 20 * v11 )
              a1x->var_u16_29821_26 = 3;
          result = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v9 + 72));
          a1x->var_u16_29829_34 = result;
        }
        else
        {
            a1x->var_u16_29941_146 = 0;
            a1x->var_u32_29935_140 += *(_DWORD *)(v9 + 140);
          *(_WORD *)(v9 + 144) = 0;
          sub_41E80((Type_AE400_29795*)v9);
          sub_424F0(a1x, 0x1Fu);
          sub_38820(a1x);
        }
      }
      else
      {
          a1x->var_u16_29941_146 = 0;
        sub_424F0(a1x, 0x1Fu);
      }
    }
  }
}
// 1C23C: conditional instruction was optimized away because edi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001C3C0) --------------------------------------------------------
void sub_1C3C0(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 30);
}

//----- (0001C3D0) --------------------------------------------------------
void sub_1C3D0(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001C490) --------------------------------------------------------
void sub_1C490(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 36);
}

//----- (0001C4A0) --------------------------------------------------------
void sub_1C4A0(Type_AE400_29795* a1x)
{
  sub_19D70(a1x, 36);
  if (a1x->var_u8_29865_70 == 38 )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 37);
  a1x->actSpeed_29921_126 = 30;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001C4F0) --------------------------------------------------------
void sub_1C4F0(Type_AE400_29795* a1x)
{
  int v1; // ebp
  unsigned int v2; // esi
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int v5; // eax
  int i; // edx
  int v7; // ecx
  char v8; // cl
  __int16 v9; // ax
  int v10; // edi
  __int16 v11; // ax
  int v12; // ebp
  __int16 v13; // ax
  Type_AE400_29795* v14x; // edx
  //int v15; // ecx
  int v16; // edx
  unsigned int v17; // esi
  char v18; // ah
  int v19; // eax
  int v20; // esi
  __int16 v21; // ax
  axis_3d* v22x; // [esp+4h] [ebp-14h]

  v1 = dword_AE400_AE3F0();
  a1x->actSpeed_29921_126 = 30;
  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
      a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v7;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      v8 = *(_BYTE *)(v1 + 164 * a1x->var_u16_29835_40 + 29859);
      dword_AE400_AE3F0(v1);
      if ( v8 == 3 )
      {
        v9 = a1x->var_u16_29835_40;
        a1x->var_u16_29821_26 = -10;
        a1x->var_u16_29941_146 = v9;
      }
    }
    else
    {
      dword_AE400_AE3F0(v1);
      sub_424F0(a1x, 0x28u);
    }
    return;
  }
  dword_AE400_AE3F0(v1);
  sub_196E0(a1x);
  v10 = 164 * a1x->var_u16_29941_146 + dword_AE400_AE3F0() + 29795;
  if ( (a1x->var_u8_29858_63 & 3) == 0 )
      a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v10 + 72));
  if ( *(int *)(v10 + 12) < 0 || (*(_BYTE *)(v10 + 17) & 4) != 0 )
  {
LABEL_30:
    sub_424F0(a1x, 0x25u);
    return;
  }
  v11 = a1x->var_u16_29821_26;
  v12 = dword_AE400_AE3F0();
  a1x->var_u16_29821_26 = v11 + 1;
  if ( v11 > 40 )
      a1x->var_u16_29821_26 = -90;
  if (a1x->var_u16_29821_26 > 0 )
  {
    dword_AE400_AE3F0(v12);
    v13 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v10 + 72));
    HIBYTE(v13) = (HIBYTE(v13) + 4) & 7;
    *(_WORD *)(*(_DWORD *)(v10 + 160) + 24) = v13;
    *(_WORD *)(*(_DWORD *)(v10 + 160) + 26) = 256;
    v14x = str_AE400_AE3F0->str_29795;
    *(_WORD *)(*(_DWORD *)(v10 + 160) + 22) = 80;
    sub_55370_558A0(a1x - v14x, -1, 42);
    v12 = dword_AE400_AE3F0();
  }
  //v15 = *(_DWORD *)(a1 + 156);
  v16 = a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26;
  dword_AE400_AE3F0(v12);
  if ( !v16 )
  {
    v17 = a1x->var_u32_29951_156->v_28;
    if ( sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v10 + 72)) >= v17 )
      goto LABEL_30;
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 37);
    a1x->var_u8_29866_71 = 5;
  }
  v18 = a1x->var_u8_29866_71;
  if ( v18 )
  {
    v22x = &a1x->var_u32_29867_72;
    a1x->var_u8_29866_71 = v18 - 1;
    v19 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 9);
    v20 = v19;
    if ( v19 )
    {
      *(_BYTE *)(v19 + 68) = 10;
      *(_BYTE *)(v19 + 69) = 23;
      *(_WORD *)(v19 + 24) = a1x->id_29819_24;
      *(_WORD *)(v19 + 30) = sub_42150_42490(v22x, (axis_3d*)(_WORD *)(v10 + 72));
      *(_WORD *)(v20 + 32) = sub_42180(v22x, (axis_3d*)(_WORD *)(v10 + 72));
      *(_WORD *)(v20 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
      v21 = a1x->var_u16_29941_146;
      *(_DWORD *)(v20 + 156) = (uint32)&unk_98F38[6];
      *(_WORD *)(v20 + 146) = v21;
      *(_BYTE *)(v20 + 67) = *(_BYTE *)(v10 + 67);
      LOBYTE(v21) = *(_BYTE *)(v10 + 66);
      *(_WORD *)(v20 + 44) = 800;
      *(_BYTE *)(v20 + 66) = v21;
    }
  }
}
// 1C5C5: conditional instruction was optimized away because esi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001C880) --------------------------------------------------------
void sub_1C880(Type_AE400_29795* a1x)
{
  char v1; // ah

  sub_1A390(a1x, 0x24u);
  v1 = a1x->var_u8_29865_70;
  a1x->actSpeed_29921_126 = 30;
  if ( v1 == 38 )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 37);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001C8D0) --------------------------------------------------------
void sub_1C8D0(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 36);
}

//----- (0001C8E0) --------------------------------------------------------
void sub_1C8E0(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001C8F0) --------------------------------------------------------
void sub_1C8F0(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 42);
}

//----- (0001C900) --------------------------------------------------------
void sub_1C900(Type_AE400_29795* a1x)
{
  bool v1; // eax
  int v2; // esi

  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v1 = a1x->maxLife_29803_8 >> 6 > a1x->maxLife_29803_8;
    v2 = a1x->actLife_29807_12;
    a1x->actLife_29807_12 = v1 + v2;
    if ( v1 + v2 )
        a1x->actLife_29807_12 = a1x->maxLife_29803_8;
  }
  sub_19D70(a1x, 42);
  if (a1x->var_u8_29865_70 == 44 )
      a1x->var_u16_29821_26 = 1;
}

//----- (0001C960) --------------------------------------------------------
void sub_1C960(Type_AE400_29795* a1x)
{
  __int16 v1; // dx
  __int16 result; // ax

  v1 = a1x->var_u16_29821_26;
  if ( v1 )
  {
      a1x->var_u16_29821_26 = v1 - 1;
    if ( v1 == 1 && a1x->var_u16_29881_86 == 198 )
    {
      sub_36FA0(a1x, 85);
      a1x->actSpeed_29921_126 = a1x->actSpeed_29923_128;
    }
  }
  result = sub_1A120(a1x, 42, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1AE30);
  if ( (_BYTE)result )
  {
    result = a1x->var_u16_29881_86;
    if ( result == 85 )
    {
      sub_36FA0(a1x, 198);
      a1x->var_u16_29821_26 = 30;
      result = a1x->var_u16_29925_130;
      a1x->actSpeed_29921_126 = result;
    }
  }
  if (a1x->var_u8_29865_70 != 44 )
  {
    result = a1x->var_u16_29881_86;
    if ( result == 198 )
    {
      sub_36FA0(a1x, 85);
      result = a1x->actSpeed_29923_128;
      a1x->actSpeed_29921_126 = result;
    }
  }
}

//----- (0001CA00) --------------------------------------------------------
void sub_1CA00(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x2Au);
  if (a1x->var_u8_29865_70 == 44 )
      a1x->var_u16_29821_26 = 1;
}

//----- (0001CA20) --------------------------------------------------------
void sub_1CA20(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 42);
}

//----- (0001CA30) --------------------------------------------------------
void sub_1CA30(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001CA40) --------------------------------------------------------
void sub_1CA40(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 48);
}

//----- (0001CA50) --------------------------------------------------------
void sub_1CA50(Type_AE400_29795* a1x)
{
  unsigned int v1; // ebp
  __int16 v2; // ax
  unsigned __int16 v3; // cx
  int i; // esi
  int v5; // eax
  unsigned int v6; // eax
  int v7; // ebp
  //int v8; // eax
  unsigned int v9; // ebp
  unsigned int j; // esi
  int v11; // eax
  unsigned int v12; // edi
  __int16 v13; // ax
  int v14; // eax
  unsigned int v15; // ebp
  Type_AE400_29795* v16x; // esi
  int v17; // eax
  unsigned int v18; // edi
  __int16 v19; // ax
  int v20; // [esp+0h] [ebp-2Ch]
  int v21; // [esp+0h] [ebp-2Ch]
  unsigned int v22; // [esp+8h] [ebp-24h]
  unsigned int v23; // [esp+Ch] [ebp-20h]
  Type_AE400_29795* v24x; // [esp+14h] [ebp-18h]
  unsigned int v25; // [esp+18h] [ebp-14h]

  v1 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v2 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v1 = 1;
      a1x->var_u16_29835_40 = v2;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v3 = a1x->var_u16_29849_54;
    if ( v3 )
    {
      for ( i = 164 * v3 + dword_AE400_AE3F0() + 29795;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v5 = *(_DWORD *)(i + 12);
        if ( v5 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v5;
          v1 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v1 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v1 )
  {
    if ( v1 <= 1 )
    {
      if ( *(_BYTE *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40 + 29859) == 3 )
      {
          a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
        sub_424F0(a1x, 0x32u);
      }
    }
    else
    {
      sub_424F0(a1x, 0x34u);
    }
  }
  else
  {
    sub_196E0(a1x);
    if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
    {
      v6 = 9377 * a1x->rand_29799_4 + 9439;
      a1x->rand_29799_4 = v6;
      v7 = a1x->rand_29799_4;
      a1x->rand_29799_4 = 9377 * v7 + 9439;
      a1x->var_u16_29829_34 += ((unsigned __int8)(-95 * v7 - 33) + 85) * (2 * ((int)(v6 % 0x9D) / 79) - 1);
      LOBYTE(v6) = a1x->var_u8_29853_58;
      a1x->var_u16_29829_34 &= 0x7ffu;
      if ( (_BYTE)v6 )
      {
        //v8 = a1x->var_u32_29951_156->v_28;
        v9 = -1;
        v23 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
        v25 = 0;
        for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
        {
          v11 = (__int16)(*(_WORD *)(j + 72) - a1x->var_u32_29867_72.x);
          v12 = v11 * v11
              + (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y)
              * (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y);
          if ( v12 <= v23 )
          {
            v20 = a1x->var_u32_29951_156->v_30;
            v13 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(j + 72));
            if ( (unsigned __int16)sub_42210(a1x->var_u16_29825_30, v13) < v20 && v12 < v9 )
            {
              v25 = j;
              v9 = v12;
            }
          }
        }
        if ( v25 && *(_BYTE *)(v25 + 65) <= 1u && *(_WORD *)(*(_DWORD *)(v25 + 160) + 528) )
        {
          a1x->var_u16_29941_146 = (int)(v25 - (dword_AE400_AE3F0() + 29795)) / 164;
          *(_WORD *)(*(_DWORD *)(v25 + 160) + 528) = 200;
          sub_424F0(a1x, 0x32u);
        }
        else
        {
          v14 = a1x->var_u32_29951_156->v_28;
          v15 = -1;
          v22 = v14 * v14;
          v16x = str_AE408_AE3F8->str_36382x[a1x->var_u8_29860_65];
          v24x = 0;
          while ( v16x > str_AE400_AE3F0->str_29795)
          {
            if ( !v16x->var_u16_29847_52 && v16x != a1x )
            {
              v17 = v16x->var_u32_29867_72.x - a1x->var_u32_29867_72.x;
              v18 = v17 * v17
                  + (v16x->var_u32_29867_72.y - a1x->var_u32_29867_72.y)
                  * (v16x->var_u32_29867_72.y - a1x->var_u32_29867_72.y);
              if ( v18 <= v22 )
              {
                v21 = a1x->var_u32_29951_156->v_30;
                v19 = sub_42150_42490(&a1x->var_u32_29867_72, &v16x->var_u32_29867_72);
                if ( (unsigned __int16)sub_42210(a1x->var_u16_29825_30, v19) < v21 && v18 < v15 )
                {
                  v24x = v16x;
                  v15 = v18;
                }
              }
            }
            v16x = v16x->next;
          }
          if ( v24x )
          {
              a1x->var_u16_29847_52 = v24x - str_AE400_AE3F0->str_29795;
            sub_424F0(a1x, 0x33u);
          }
        }
      }
    }
  }
}
// 1CB20: conditional instruction was optimized away because ebp.4==2
// 1CCC5: conditional instruction was optimized away because %var_14.4!=0
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0001CE30) --------------------------------------------------------
void sub_1CE30(Type_AE400_29795* a1x)
{
  int v1; // eax

  if (a1x->var_u16_29821_26)
      a1x->actSpeed_29921_126 = a1x->actSpeed_29923_128;
  a1x->var_29811_16.byte[1] |= 0x80u;
  if ( (unsigned __int16)sub_1A120(a1x, 48, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1AEE0) )
  {
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 38);
    v1 = 164 * a1x->var_u16_29941_146;
    if ( v1 + dword_AE400_AE3F0() + 29795 )
    {
      if ( *(_BYTE *)(dword_AE400_AE3F0() + v1 + 29860) <= 1u )
        *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29941_146 + 29955) + 528) = 200;
    }
  }
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 38);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001CF50) --------------------------------------------------------
void sub_1CF50(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x30u);
}

//----- (0001CF60) --------------------------------------------------------
void sub_1CF60(Type_AE400_29795* a1x)
{
  int v1; // eax

  v1 = 164 * a1x->var_u16_29833_38;
  if ( v1 + dword_AE400_AE3F0() + 29795 && *(_BYTE *)(dword_AE400_AE3F0() + v1 + 29860) <= 1u )
    *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29833_38 + 29955) + 528) = 200;
  sub_1A6C0(a1x, 48);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001CFE0) --------------------------------------------------------
void sub_1CFE0(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001CFF0) --------------------------------------------------------
void sub_1CFF0(Type_AE400_29795* a1x)
{
  __int16 v1; // dx
  __int16 v2; // cx
  int result; // eax

  v1 = a1x->var_u16_29821_26;
  v2 = v1 - 1;
  a1x->var_u16_29821_26 = v1 - 1;
  if ( v1 )
  {
    if ( v1 == 17 )
    {
      sub_36FA0(a1x, 237);
      return;
    }
    else if (v2 < 16)
    {
        result = v2 / 2;
        if (!(v2 % 2))
        {
            sub_42510(a1x);
            return;
        }
    }
  }
  else
  {
    sub_1DD50(a1x);
    sub_424F0(a1x, 0x37u);
    a1x->var_u16_29821_26 = 400;
    a1x->var_u8_29866_71 = 0;
  }
}

//----- (0001D060) --------------------------------------------------------
void sub_1D060(Type_AE400_29795* a1x)
{
  __int16 v1; // cx
  char v2; // al
  int v3; // ebp
  unsigned int v4; // edi
  __int16 v5; // ax
  int v6; // esi
  int i; // eax
  int v8; // edx
  unsigned int v9; // edx
  int v10; // ebp
  unsigned int j; // eax
  int v12; // edi
  unsigned int v13; // eax
  int v14; // ecx
  int v15; // eax
  unsigned int k; // esi
  __int16 v17; // ax
  __int16 v18; // di
  int v19; // edi
  unsigned int v20; // edi
  __int16 v21; // ax
  //int v22; // esi
  unsigned int v23; // edx
  unsigned int v24; // edi
  unsigned int ii; // eax
  int v26; // edx
  int v27; // esi
  unsigned int v28; // esi
  int v29; // eax
  unsigned int v30; // edi
  unsigned int m; // eax
  int v32; // edx
  unsigned int v33; // esi
  unsigned int v34; // edi
  unsigned int n; // eax
  int v36; // edx
  int v37; // esi
  unsigned int v38; // esi
  int v39; // esi
  unsigned int v40; // [esp+0h] [ebp-48h]
  int v41; // [esp+4h] [ebp-44h]
  unsigned int v42; // [esp+8h] [ebp-40h]
  int v43; // [esp+8h] [ebp-40h]
  unsigned int v44; // [esp+Ch] [ebp-3Ch]
  unsigned int v45; // [esp+10h] [ebp-38h]
  int v46; // [esp+14h] [ebp-34h]
  unsigned int v47; // [esp+18h] [ebp-30h]
  unsigned int v48; // [esp+1Ch] [ebp-2Ch]
  unsigned int v49; // [esp+20h] [ebp-28h]
  unsigned int v50; // [esp+28h] [ebp-20h]
  unsigned int v51; // [esp+2Ch] [ebp-1Ch]
  int v52; // [esp+30h] [ebp-18h]

  v1 = a1x->var_u16_29821_26;
  if ( v1 > 0 )
  {
      a1x->var_u16_29821_26 = v1 - 1;
    if ( v1 == 1 )
      sub_1DD90(a1x);
  }
  v2 = a1x->var_u8_29866_71;
  v3 = dword_AE400_AE3F0();
  if ( v2 )
  {
    if ( v2 == 1 )
      sub_1D6D0(a1x);
    goto LABEL_84;
  }
  if (a1x->var_u8_29853_58)
      a1x->var_u16_29821_26 = 400;
  v4 = 0;
  if (a1x->var_u8_29853_58)
  {
    v5 = a1x->str_29885_90.var_u16_29889_94;
    if ( v5 )
    {
      a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v5 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v4 = 1;
    }
    a1x->var_u16_29835_40 = v5;
    if (a1x->var_u16_29849_54)
    {
      v6 = v3 + 29795;
      for ( i = 164 * a1x->var_u16_29849_54 + v3 + 29795; i != v6; i = v6 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v8 = *(_DWORD *)(i + 12);
        if ( v8 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v8;
          v4 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v4 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v4 )
  {
    dword_AE400_AE3F0(v3);
    if ( v4 <= 1 )
    {
      a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
      sub_424F0(a1x, 0x38u);
    }
    else
    {
      sub_424F0(a1x, 0x3Au);
    }
    goto LABEL_84;
  }
  dword_AE400_AE3F0(v3);
  sub_196E0(a1x);
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v9 = -1;
    v10 = dword_AE400_AE3F0();
    v52 = 0;
    for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
    {
      if ( *(_BYTE *)(j + 65) == 2 && *(_WORD *)(j + 24) != a1x->id_29819_24)
      {
        v12 = (__int16)(*(_WORD *)(j + 72) - a1x->var_u32_29867_72.x);
        if ( v12 * v12
           + (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y) * (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y) < v9 )
        {
          v52 = j;
          v9 = v12 * v12
             + (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y) * (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y);
        }
      }
    }
    v46 = v52;
    if ( v52 )
    {
      a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v52 + 72));
      v42 = *(__int16 *)(v52 + 80) + a1x->var_u32_29951_156->v_28;
      if ( sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v52 + 72)) > v42 )
      {
        v10 = dword_AE400_AE3F0();
        v46 = 0;
      }
      else
      {
        a1x->var_u16_29941_146 = (v52 - (dword_AE400_AE3F0() + 29795)) / 164;
        sub_424F0(a1x, 0x38u);
        v10 = dword_AE400_AE3F0();
      }
    }
    else
    {
      v13 = 9377 * a1x->rand_29799_4 + 9439;
      a1x->rand_29799_4 = v13;
      v14 = a1x->rand_29799_4;
      a1x->rand_29799_4 = 9377 * v14 + 9439;
      a1x->var_u16_29829_34 += ((unsigned __int8)(-95 * v14 - 33) + 85) * (2 * (v13 % 0x9D / 79i64) - 1);
      a1x->var_u16_29829_34 &= 0x7ffu;
    }
    dword_AE400_AE3F0(v10);
    if ( !v46 )
    {
      if (a1x->var_u8_29853_58)
      {
        v15 = a1x->var_u32_29951_156->v_28;
        v44 = -1;
        v41 = 0;
        v48 = v15 * v15;
        for ( k = *(_DWORD *)(dword_AE408_AE3F8() + 36462); k > v10 + 29795; k = *(_DWORD *)k )
        {
          v17 = *(_WORD *)(k + 24);
          v18 = a1x->id_29819_24;
          dword_AE400_AE3F0(v10);
          if ( v17 != v18 )
          {
            v19 = (__int16)(*(_WORD *)(k + 72) - a1x->var_u32_29867_72.x);
            v20 = (__int16)(*(_WORD *)(k + 74) - a1x->var_u32_29867_72.y)
                * (__int16)(*(_WORD *)(k + 74) - a1x->var_u32_29867_72.y)
                + v19 * v19;
            if ( v20 <= v48 && (*(_BYTE *)(k + 16) & 0x20) == 0 )
            {
              v43 = a1x->var_u32_29951_156->v_30;
              v21 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(k + 72));
              if ( (unsigned __int16)sub_42210(a1x->var_u16_29825_30, v21) < v43 && v20 < v44 )
              {
                v41 = k;
                v44 = v20;
              }
            }
          }
          v10 = dword_AE400_AE3F0();
        }
        dword_AE400_AE3F0(v10);
        v46 = v41;
        if ( v41 )
        {
          a1x->var_u16_29941_146 = (v41 - (v10 + 29795)) / 164;
          sub_424F0(a1x, 0x38u);
        }
      }
      if ( !v46 )
      {
        //v22 = *(_DWORD *)(a1 + 156);
        v23 = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26 % 3;
        if ( v23 )
        {
          if ( v23 <= 1 )
          {
            v47 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
            v30 = -1;
            v50 = 0;
            for ( m = *(_DWORD *)(dword_AE408_AE3F8() + 36430); m > dword_AE400_AE3F0() + 29795; m = *(_DWORD *)m )
            {
              v32 = (__int16)(*(_WORD *)(m + 72) - a1x->var_u32_29867_72.x);
              v33 = v32 * v32
                  + (__int16)(*(_WORD *)(m + 74) - a1x->var_u32_29867_72.y)
                  * (__int16)(*(_WORD *)(m + 74) - a1x->var_u32_29867_72.y);
              if ( v33 <= v47 && v33 < v30 )
              {
                v50 = m;
                v30 = v32 * v32
                    + (__int16)(*(_WORD *)(m + 74) - a1x->var_u32_29867_72.y)
                    * (__int16)(*(_WORD *)(m + 74) - a1x->var_u32_29867_72.y);
              }
            }
            v29 = v50;
          }
          else
          {
            if ( v23 != 2 )
              goto LABEL_78;
            v40 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
            v34 = -1;
            v51 = 0;
            for ( n = *(_DWORD *)(dword_AE408_AE3F8() + 36434); n > dword_AE400_AE3F0() + 29795; n = *(_DWORD *)n )
            {
              v36 = (__int16)(*(_WORD *)(n + 72) - a1x->var_u32_29867_72.x);
              v37 = (__int16)(*(_WORD *)(n + 74) - a1x->var_u32_29867_72.y);
              v38 = v36 * v36 + v37 * v37;
              if ( v38 <= v40 && v38 < v34 )
              {
                v51 = n;
                v34 = v38;
              }
            }
            v29 = v51;
          }
        }
        else
        {
          v49 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
          v24 = -1;
          v45 = 0;
          for ( ii = *(_DWORD *)(dword_AE408_AE3F8() + 36398); ii > dword_AE400_AE3F0() + 29795; ii = *(_DWORD *)ii )
          {
            v26 = (__int16)(*(_WORD *)(ii + 72) - a1x->var_u32_29867_72.x);
            v27 = (__int16)(*(_WORD *)(ii + 74) - a1x->var_u32_29867_72.y);
            v28 = v26 * v26 + v27 * v27;
            if ( v28 <= v49 && v28 < v24 )
            {
              v45 = ii;
              v24 = v28;
            }
          }
          v29 = v45;
        }
        v46 = v29;
LABEL_78:
        if ( v46 )
        {
          if ( sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v46 + 72)) <= 0x600 )
          {
            *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v46 + 72);
            word_AE454_AE444.z = *(_WORD *)(v46 + 76);
            sub_41E80((Type_AE400_29795*)v46);
            v39 = (int)sub_373F0(&word_AE454_AE444, 5, 9);
            if ( v39 )
            {
              if ( *(_BYTE *)(164 * a1x->id_29819_24 + dword_AE400_AE3F0() + 29859) == 3 )
                *(_WORD *)(v39 + 24) = a1x->id_29819_24;
            }
          }
        }
      }
    }
  }
LABEL_84:
  if ( a1x->var_u8_29865_70 == 56 )
    sub_1DCD0(a1x);
}
// 1D174: conditional instruction was optimized away because edi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (0001D6D0) --------------------------------------------------------
void sub_1D6D0(Type_AE400_29795* a1x)
{
  int v1; // ebp
  unsigned int v2; // esi
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int v5; // eax
  int i; // edx
  int v7; // ecx
  __int16 v8; // si
  //int v9; // esi
  unsigned int v10; // edx
  unsigned int v11; // ecx
  unsigned int m; // eax
  int v13; // esi
  unsigned int v14; // edx
  _WORD *v15; // eax
  unsigned int v16; // ecx
  unsigned int j; // eax
  int v18; // esi
  int v19; // edx
  unsigned int v20; // edx
  unsigned int v21; // ecx
  unsigned int k; // eax
  int v23; // esi
  unsigned int v24; // edx
  int v25; // edx
  int v26; // eax
  unsigned int v27; // [esp+0h] [ebp-2Ch]
  _WORD *v28; // [esp+4h] [ebp-28h]
  unsigned int v29; // [esp+8h] [ebp-24h]
  unsigned int v30; // [esp+Ch] [ebp-20h]
  unsigned int v31; // [esp+10h] [ebp-1Ch]
  unsigned int v32; // [esp+14h] [ebp-18h]
  unsigned int v33; // [esp+18h] [ebp-14h]

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  v28 = 0;
  if (a1x->var_u8_29853_58 )
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
      a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
      a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < a1x->actLife_29807_12)
        {
          a1x->actLife_29807_12 = v7;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    dword_AE400_AE3F0(v1);
    if ( v2 <= 1 )
    {
        a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
      sub_424F0(a1x, 0x38u);
    }
    else
    {
      sub_424F0(a1x, 0x3Au);
    }
    return;
  }
  dword_AE400_AE3F0(v1);
  v8 = a1x->var_u16_29821_26;
  if ( v8 < 0 )
  {
      a1x->var_u16_29821_26 = v8 + 1;
    if ( v8 == -1 )
      sub_1DDB0(a1x);
    return;
  }
  if (a1x->var_u8_29853_58)
  {
      a1x->var_u16_29821_26 = -50;
    return;
  }
  //v9 = *(_DWORD *)(a1 + 156);
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v10 = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26 % 3;
    if ( v10 )
    {
      if ( v10 <= 1 )
      {
        v29 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
        v16 = -1;
        v32 = 0;
        for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36430); j > v1 + 29795; j = *(_DWORD *)j )
        {
          v18 = (__int16)(*(_WORD *)(j + 72) - a1x->var_u32_29867_72.x);
          v19 = (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y);
          v20 = v18 * v18 + v19 * v19;
          if ( v20 <= v29 && v20 < v16 )
          {
            v32 = j;
            v16 = v20;
          }
        }
        v15 = (_WORD *)v32;
      }
      else
      {
        if ( v10 != 2 )
          goto LABEL_50;
        v31 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
        v21 = -1;
        v33 = 0;
        for ( k = *(_DWORD *)(dword_AE408_AE3F8() + 36434); k > v1 + 29795; k = *(_DWORD *)k )
        {
          v23 = (__int16)(*(_WORD *)(k + 72) - a1x->var_u32_29867_72.x);
          v24 = v23 * v23
              + (__int16)(*(_WORD *)(k + 74) - a1x->var_u32_29867_72.y)
              * (__int16)(*(_WORD *)(k + 74) - a1x->var_u32_29867_72.y);
          if ( v24 <= v31 && v24 < v21 )
          {
            v33 = k;
            v21 = v23 * v23
                + (__int16)(*(_WORD *)(k + 74) - a1x->var_u32_29867_72.y)
                * (__int16)(*(_WORD *)(k + 74) - a1x->var_u32_29867_72.y);
          }
        }
        v15 = (_WORD *)v33;
      }
    }
    else
    {
      v30 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
      v11 = -1;
      v27 = 0;
      for ( m = *(_DWORD *)(dword_AE408_AE3F8() + 36398); m > v1 + 29795; m = *(_DWORD *)m )
      {
        v13 = (__int16)(*(_WORD *)(m + 72) - a1x->var_u32_29867_72.x);
        v14 = v13 * v13
            + (__int16)(*(_WORD *)(m + 74) - a1x->var_u32_29867_72.y) * (__int16)(*(_WORD *)(m + 74) - a1x->var_u32_29867_72.y);
        if ( v14 <= v30 && v14 < v11 )
        {
          v27 = m;
          v11 = v13 * v13
              + (__int16)(*(_WORD *)(m + 74) - a1x->var_u32_29867_72.y)
              * (__int16)(*(_WORD *)(m + 74) - a1x->var_u32_29867_72.y);
        }
      }
      v15 = (_WORD *)v27;
    }
    v28 = v15;
LABEL_50:
    dword_AE400_AE3F0(v1);
    if ( v28 )
    {
      v25 = (__int16)(v28[36] - a1x->var_u32_29867_72.x);
      if ( Distance_410CE_4140E(
             (__int16)(v28[37] - a1x->var_u32_29867_72.y) * (__int16)(v28[37] - a1x->var_u32_29867_72.y)
           + v25 * v25
           + (__int16)(v28[38] - a1x->var_u32_29867_72.z) * (__int16)(v28[38] - a1x->var_u32_29867_72.z)) <= 0x600 )
      {
        *(_DWORD *)&word_AE454_AE444 = *((_DWORD *)v28 + 18);
        word_AE454_AE444.z = v28[38];
        sub_41E80((Type_AE400_29795*)(int)v28);
        v26 = (int)sub_373F0(&word_AE454_AE444, 5, 9);
        if ( v26 )
          *(_WORD *)(v26 + 24) = a1x->id_29819_24;
      }
    }
  }
}
// 1D7A5: conditional instruction was optimized away because esi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (0001DA60) --------------------------------------------------------
void sub_1DA60(Type_AE400_29795* a1x)
{
  int v1; // esi
  unsigned int v2; // edi
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int v5; // eax
  int i; // edx
  int v7; // ecx
  char v8; // cl
  int v9; // edi
  //Type_156* v10x; // ebp
  unsigned int v11; // ebp

  //fix
  //v10 = 0;
  //fix

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v7;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      v8 = *(_BYTE *)(v1 + 164 * a1x->var_u16_29835_40 + 29859);
      dword_AE400_AE3F0(v1);
      if ( v8 == 3 )
          a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
    }
    else
    {
      dword_AE400_AE3F0(v1);
      sub_424F0(a1x, 0x3Au);
    }
    goto LABEL_31;
  }
  dword_AE400_AE3F0(v1);
  sub_196E0(a1x);
  v9 = 164 * a1x->var_u16_29941_146 + dword_AE400_AE3F0() + 29795;
  if ( *(int *)(v9 + 12) < 0 || (*(_BYTE *)(v9 + 17) & 4) != 0 )
  {
LABEL_29:
    sub_424F0(a1x, 0x37u);
    goto LABEL_31;
  }
  if ( !(a1x->var_u8_29858_63 % 10) )
      a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v9 + 72));
  //v10x = a1x->var_u32_29951_156;
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v11 = a1x->var_u32_29951_156->v_28;
    if ( *(_BYTE *)(v9 + 64) == 3 && *(_BYTE *)(v9 + 65) == 2 )
      v11 += *(__int16 *)(v9 + 80);
    if ( sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v9 + 72)) < v11 )
    {
      sub_1AA40(a1x, v9);
      goto LABEL_31;
    }
    goto LABEL_29;
  }
LABEL_31:
  if (a1x->var_u8_29865_70 != 56 )
    sub_1DD50(a1x);
}
// 1DB2C: conditional instruction was optimized away because edi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001DC80) --------------------------------------------------------
void sub_1DC80(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x36u);
  if ( a1x->var_u8_29865_70 == 56 )
    sub_1DCD0(a1x);
}

//----- (0001DCB0) --------------------------------------------------------
void sub_1DCB0(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 54);
}

//----- (0001DCC0) --------------------------------------------------------
void sub_1DCC0(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001DCD0) --------------------------------------------------------
void sub_1DCD0(Type_AE400_29795* a1x)
{
  int v1; // esi
  char result; // al

  v1 = 164 * a1x->var_u16_29941_146 + dword_AE400_AE3F0() + 29795;
  if (a1x->id_29819_24 == *(_WORD*)(v1 + 24))
  {
      sub_424F0(a1x, 0x37u);
      return;
  }
  a1x->actSpeed_29921_126 = 0;
  sub_36FA0(a1x, 202);
  a1x->sClass_29861_66 = *(_BYTE *)(v1 + 64);
  result = *(_BYTE *)(v1 + 65);
  a1x->sModel_29862_67 = result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001DD50) --------------------------------------------------------
void sub_1DD50(Type_AE400_29795* a1x)
{
  a1x->actSpeed_29921_126 = a1x->actSpeed_29923_128;
  sub_36FA0(a1x, 201);
  a1x->sClass_29861_66 = 3;
  a1x->sModel_29862_67 = -1;
  a1x->var_u16_29821_26 = 50;
  a1x->var_u8_29866_71 = 0;
}

//----- (0001DD90) --------------------------------------------------------
void sub_1DD90(Type_AE400_29795* a1x)
{
  //int result; // eax

  sub_36FA0(a1x, 245);
  //result = a1;
  a1x->var_u8_29866_71 = 1;
  //return result;
}

//----- (0001DDB0) --------------------------------------------------------
void sub_1DDB0(Type_AE400_29795* a1x)
{
  a1x->var_u8_29866_71 = 0;
  a1x->var_u16_29821_26 = 400;
  sub_36FA0(a1x, 201);
}

//----- (0001DDD0) --------------------------------------------------------
void sub_1DDD0(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 60);
}

//----- (0001DDE0) --------------------------------------------------------
void sub_1DDE0(Type_AE400_29795* a1x)
{
  sub_19D70(a1x, 60);
}

//----- (0001DDF0) --------------------------------------------------------
int sub_1DDF0(Type_AE400_29795* a1x)
{
  return sub_1A120(a1x, 60, (unsigned __int16 (*)(Type_AE400_29795*, int))sub_1A990);
}

//----- (0001DE10) --------------------------------------------------------
void sub_1DE10(Type_AE400_29795* a1x)
{
  return sub_1A390(a1x, 0x3Cu);
}

//----- (0001DE20) --------------------------------------------------------
void sub_1DE20(Type_AE400_29795* a1x)
{
  return sub_1A6C0(a1x, 60);
}

//----- (0001DE30) --------------------------------------------------------
void sub_1DE30(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001DE40) --------------------------------------------------------
void sub_1DE40(Type_AE400_29795* a1x)
{
  __int16 v1; // dx
  __int16 result; // ax
  int v3; // ebx
  int v4; // eax
  char v5; // dl
  unsigned int v6; // eax
  int v7; // ebx
  unsigned int v8; // eax

  v1 = a1x->var_u16_29821_26;
  if ( v1 )
  {
    result = a1x->var_u16_29821_26;
    a1x->var_u16_29821_26 = v1 - 1;
    if ( v1 == 1 )
    {
      sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 21);
      if ( (a1x->var_29811_16.byte[0] & 1) != 0 )
      {
          a1x->var_u16_29941_146 = 0;
          a1x->str_29885_90.var_u16_29889_94 = 0;
        word_AE454_AE444 = a1x->var_u32_29867_72;
        //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        v6 = 9377 * a1x->rand_29799_4 + 9439;
        a1x->rand_29799_4 = v6;
        v7 = a1x->rand_29799_4;
        word_AE454_AE444.x += ((v6 % 0x3C) << 8) + 12800;
        v8 = 9377 * v7 + 9439;
        a1x->rand_29799_4 = v8;
        word_AE454_AE444.y += ((v8 % 0x3C) << 8) + 12800;
        sub_41C70_41FB0(a1x, &word_AE454_AE444);
        return sub_424F0(a1x, 0x43u);
      }
      else
      {
        return sub_424F0(a1x, 0x44u);
      }
    }
  }
  else
  {
      a1x->var_u16_29821_26 = 12;
    while ( 1 )
    {
      result = a1x->var_u16_29821_26;
      a1x->var_u16_29821_26 = result - 1;
      if ( !result )
        break;
      word_AE454_AE444 = a1x->var_u32_29867_72;
      //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
      v3 = a1x->var_u16_29821_26;
      word_AE454_AE444.x += 40 * (a1x->var_u16_29821_26 % 3);
      word_AE454_AE444.y += 40 * (v3 / 3);
      v4 = (int)sub_373F0(&word_AE454_AE444, 10, 1);
      if ( v4 )
      {
        *(_WORD *)(v4 + 24) = a1x->id_29819_24;
        *(_BYTE *)(v4 + 18) |= 1u;
      }
    }
    v5 = a1x->var_29811_16.byte[0];
    a1x->var_u16_29821_26 = 1;
    a1x->var_29811_16.byte[0] = v5 ^ 1;
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;

//----- (0001DFE0) --------------------------------------------------------
void sub_1DFE0(Type_AE400_29795* a1x)
{
  unsigned int v1; // edi
  __int16 v2; // ax
  unsigned __int16 v3; // bx
  int i; // eax
  int v5; // edx
  int v6; // eax
  int v7; // edx
  int v8; // ecx
  int v9; // eax
  unsigned int v10; // ebp
  unsigned int j; // ebx
  int v12; // edi
  unsigned int v13; // edi
  __int16 v14; // ax
  unsigned int v15; // eax
  int v16; // edx
  unsigned int v17; // edi
  int v18; // edx
  unsigned int k; // eax
  int v20; // ebx
  unsigned int v21; // [esp+0h] [ebp-20h]
  int v22; // [esp+4h] [ebp-1Ch]
  unsigned int v23; // [esp+Ch] [ebp-14h]

  v1 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v2 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v1 = 1;
      a1x->var_u16_29835_40 = v2;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v3 = a1x->var_u16_29849_54;
    if ( v3 )
    {
      for ( i = 164 * v3 + dword_AE400_AE3F0() + 29795;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v5 = *(_DWORD *)(i + 12);
        if ( v5 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v5;
          v1 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v1 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v1 )
  {
    if ( v1 > 1 )
    {
      sub_424F0(a1x, 0x46u);
      return;
    }
    if ( *(_BYTE *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40 + 29859) == 3 )
    {
      LOWORD(v6) = a1x->var_u16_29835_40;
  LABEL_53:
      a1x->var_u16_29941_146 = v6;
      sub_1E770(a1x);
    }
  }
  else
  {
    sub_196E0(a1x);
    if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
    {
      v7 = (a1x->maxLife_29803_8 >> 6) + a1x->actLife_29807_12;
      a1x->actLife_29807_12 = v7;
      if ( v7 < -1 )
          a1x->actLife_29807_12 = -1;
      v8 = a1x->maxLife_29803_8;
      if (a1x->actLife_29807_12 > v8 )
          a1x->actLife_29807_12 = v8;
      if (a1x->var_u8_29853_58 && a1x->maxLife_29803_8 >> 2 < a1x->actLife_29807_12)
      {
        v9 = a1x->var_u32_29951_156->v_28;
        v10 = -1;
        v23 = v9 * v9;
        v21 = 0;
        for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
        {
          if ( *(_BYTE *)(j + 65) <= 1u )
          {
            v12 = (__int16)(*(_WORD *)(j + 72) - a1x->var_u32_29867_72.x);
            v13 = (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y)
                * (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y)
                + v12 * v12;
            if ( v13 <= v23 && (*(_BYTE *)(j + 16) & 0x20) == 0 )
            {
              v22 = a1x->var_u32_29951_156->v_30;
              v14 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(j + 72));
              if ( (unsigned __int16)sub_42210(a1x->var_u16_29825_30, v14) < v22 && v13 < v10 )
              {
                v21 = j;
                v10 = v13;
              }
            }
          }
        }
        if ( v21 )
        {
          a1x->var_u16_29941_146 = (int)(v21 - (dword_AE400_AE3F0() + 29795)) / 164;
          sub_1E770(a1x);
        }
        else
        {
          sub_1E810(a1x);
        }
      }
      if ( !(4 * (a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26)) )
      {
        v15 = 9377 * a1x->rand_29799_4 + 9439;
        a1x->rand_29799_4 = v15;
        v16 = 9377 * a1x->rand_29799_4 + 9439;
        a1x->rand_29799_4 = v16;
        a1x->var_u16_29829_34 += (2 * ((int)(v15 % 0x9D) / 79) - 1) * ((unsigned __int8)v16 + 85);
        a1x->var_u16_29829_34 &= 0x7ffu;
        if (a1x->maxLife_29803_8 - (a1x->maxLife_29803_8 >> 2) < a1x->actLife_29807_12)
        {
          v17 = 0;
          v18 = 0;
          for ( k = *(_DWORD *)(dword_AE408_AE3F8() + 36462); k > dword_AE400_AE3F0() + 29795; k = *(_DWORD *)k )
          {
            if ( *(_BYTE *)(k + 65) <= 1u )
            {
              v20 = *(_DWORD *)(k + 140) && (*(_BYTE *)(k + 16) & 0x20) == 0;
              if ( v20 )
              {
                if ( v20 > v18 )
                {
                  v17 = k;
                  v18 = v20;
                }
              }
            }
          }
          if ( v17 )
          {
            v6 = (int)(v17 - (dword_AE400_AE3F0() + 29795)) / 164;
            goto LABEL_53;
          }
        }
      }
    }
  }
}
// 1E0B2: conditional instruction was optimized away because edi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0001E380) --------------------------------------------------------
void sub_1E380(Type_AE400_29795* a1x)
{
  int v1; // ebp
  unsigned int v2; // esi
  __int16 v3; // ax
  unsigned __int16 v4; // di
  int v5; // eax
  int i; // edx
  int v7; // ecx
  char v8; // cl
  int v9; // edi
  //int v10; // ecx
  unsigned int v11; // esi
  int v12; // ebp
  char v13; // dl
  int v14; // eax
  int v15; // esi
  __int16 v16; // ax
  __int16 v17; // dx
  _WORD *v18; // edi
  __int16 v19; // ax
  //int v20; // ebx

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
      a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
      a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < a1x->actLife_29807_12)
        {
          a1x->actLife_29807_12 = v7;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      v8 = *(_BYTE *)(v1 + 164 * a1x->var_u16_29835_40 + 29859);
      dword_AE400_AE3F0(v1);
      if ( v8 == 3 )
          a1x->var_u16_29941_146 = a1x->var_u16_29835_40;
    }
    else
    {
      dword_AE400_AE3F0(v1);
      sub_424F0(a1x, 0x46u);
    }
    return;
  }
  dword_AE400_AE3F0(v1);
  sub_196E0(a1x);
  v9 = dword_AE400_AE3F0() + 29795 + 164 * a1x->var_u16_29941_146;
  if (a1x->maxLife_29803_8 >> 1 <= a1x->actLife_29807_12 )
  {
    if ( *(int *)(v9 + 12) >= 0 && (*(_BYTE *)(v9 + 17) & 4) == 0 && *(_BYTE *)(v9 + 64) )
    {
      if ( (a1x->var_u8_29858_63 & 7) == 0 )
          a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v9 + 72));
    }
    else
    {
      sub_1E810(a1x);
      sub_1E720(a1x);
    }
  }
  else
  {
    sub_1E720(a1x);
  }
  //v10 = *(_DWORD *)(a1 + 156);
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v11 = a1x->var_u32_29951_156->v_28;
    if ( sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v9 + 72)) >= v11 )
    {
      sub_1E720(a1x);
      return;
    }
    v12 = dword_AE400_AE3F0();
    if ( !(a1x->var_u8_29858_63 % (8 * a1x->var_u32_29951_156->v_26)) )
    {
      sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 11);
      v12 = dword_AE400_AE3F0();
    }
    a1x->var_u16_29821_26++;
    v13 = *(_BYTE *)(v9 + 65);
    dword_AE400_AE3F0(v12);
    if ( v13 || (a1x->var_u16_29821_26 & 1) == 0 )
    {
      v14 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 8);
      v15 = v14;
      if ( !v14 )
        goto LABEL_38;
    }
    else
    {
      v14 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 8);
      v15 = v14;
      if ( !v14 )
        goto LABEL_38;
    }
    *(_BYTE *)(v14 + 69) = 25;
LABEL_38:
    if ( v15 )
    {
      *(_BYTE *)(v15 + 68) = 10;
      *(_WORD *)(v15 + 24) = a1x->id_29819_24;
      v16 = a1x->var_u16_29873_78.var_u16_29879_84;
      *(_WORD *)(v15 + 44) = 3000;
      v17 = *(_WORD *)(v15 + 76);
      *(_WORD *)(v15 + 26) = 20;
      *(_WORD *)(v15 + 76) = v16 + v17;
      v18 = (_WORD *)(v9 + 72);
      *(_WORD *)(v15 + 146) = a1x->var_u16_29941_146;
      *(_WORD *)(v15 + 30) = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)v18);
      v19 = sub_42180(&a1x->var_u32_29867_72, (axis_3d*)v18);
      //v20 = a1 - (dword_AE400_AE3F0() + 29795);
      *(_WORD *)(v15 + 32) = v19;
      sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 9);
    }
  }
}
// 1E459: conditional instruction was optimized away because esi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001E6F0) --------------------------------------------------------
void sub_1E6F0(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x42u);
}

//----- (0001E700) --------------------------------------------------------
void sub_1E700(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 66);
}

//----- (0001E710) --------------------------------------------------------
void sub_1E710(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001E720) --------------------------------------------------------
void sub_1E720(Type_AE400_29795* a1x)
{
    a1x->var_u16_29941_146 = 0;
    a1x->var_u16_29821_26 = 0;
  sub_424F0(a1x, 0x42u);
  sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 11);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001E770) --------------------------------------------------------
void sub_1E770(Type_AE400_29795* a1x)
{
  int v1; // eax
  __int16 v2; // ax

  if (a1x->var_u16_29941_146 )
  {
    a1x->var_u16_29821_26 = 0;
    sub_424F0(a1x, 0x42u);
    v1 = 164 * a1x->var_u16_29941_146 + dword_AE400_AE3F0() + 29795;
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v1 + 72);
    word_AE454_AE444.z = *(_WORD *)(v1 + 76);
    sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(v1 + 30), 0, a1x->actSpeed_29921_126 << 6);
    sub_41C70_41FB0(a1x, &word_AE454_AE444);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (0001E810) --------------------------------------------------------
void sub_1E810(Type_AE400_29795* a1x)
{
  int v1; // eax
  unsigned int v2; // esi
  int v3; // ebp
  unsigned int i; // eax
  int v5; // ecx
  int v6; // edx
  unsigned int v7; // edx
  int v8; // eax
  unsigned int v9; // [esp+0h] [ebp-14h]

  if (a1x->var_u32_29935_140 < a1x->var_u32_29931)
  {
    v1 = a1x->var_u32_29951_156->v_28;
    v9 = v1 * v1;
    v2 = -1;
    v3 = 0;
    for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36466); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
    {
      if ( *(_BYTE *)(i + 65) == 39 )
      {
        v5 = (__int16)(*(_WORD *)(i + 72) - a1x->var_u32_29867_72.x);
        v6 = (__int16)(*(_WORD *)(i + 74) - a1x->var_u32_29867_72.y);
        v7 = v5 * v5 + v6 * v6;
        if ( v7 <= v9 && v7 < v2 )
        {
          v3 = i;
          v2 = v7;
        }
      }
    }
    if ( v3 )
    {
        a1x->var_u32_29935_140 += *(_DWORD *)(v3 + 140);
      *(_WORD *)(v3 + 144) = 0;
      *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v3 + 72);
      word_AE454_AE444.z = *(_WORD *)(v3 + 76);
      sub_41E80((Type_AE400_29795*)v3);
      v8 = (int)sub_373F0(&word_AE454_AE444, 10, 0);
      if ( v8 )
      {
        *(_WORD *)(v8 + 24) = a1x->id_29819_24;
        *(_BYTE *)(v8 + 18) |= 1u;
      }
      sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 11);
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (0001E920) --------------------------------------------------------
_BOOL1 sub_1E920(_WORD *a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  unsigned __int8 v4; // bl
  unsigned __int8 v5; // bh

  v4 = HIBYTE(*a1) - ((int)a2 >> 1);
  v5 = HIBYTE(a1[1]) - ((int)a3 >> 1);
  if ( (v4 + v5) % 2 )
    ++v4;
  return (__int16)sub_35EA0(v4, v5, a3, a2) < (int)a4;
}

//----- (0001E9B0) --------------------------------------------------------
_WORD *sub_1E9B0(unsigned __int16 a1, _WORD *a2, _WORD *a3)
{
  unsigned __int16 v3; // cx
  unsigned __int16 v4; // bx
  _WORD *result; // eax

  v3 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * a1 + 5);
  v4 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * a1 + 4);
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    v3 >>= 1;
    v4 >>= 1;
  }
  *a3 = (v3 << 8) / 2 + 768;
  result = a2;
  *a2 = (v4 << 8) / 2 + 768;
  return result;
}
// AE440: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0001EA40) --------------------------------------------------------
void sub_1EA40(Type_AE400_29795* a1x)
{
  int v1; // ebx
  __int16 v2; // ax
  int v3; // eax
  unsigned int v4; // eax
  int v5; // edx
  unsigned int v6; // eax
  __int16 v7; // ax
  unsigned int v8; // eax
  int v9; // esi
  unsigned int v10; // eax
  int v11; // edx
  unsigned int v12; // eax
  unsigned int v13; // eax
  int v14; // esi
  __int16 v15; // di
  __int16 v16; // si
  int v17; // eax
  char v18; // cl
  unsigned int v19; // ebx
  unsigned int v20; // ebx
  int v21; // ebx
  char v22; // al
  unsigned __int16 v24; // [esp+4h] [ebp-20h] BYREF
  unsigned __int16 v25; // [esp+8h] [ebp-1Ch] BYREF
  __int16 v26; // [esp+Ch] [ebp-18h]
  unsigned __int8 v27; // [esp+10h] [ebp-14h]

  v26 = 72;
  v1 = dword_AE400_AE3F0() + 29795 + 164 * a1x->var_u16_29941_146;
  if ( !*(_BYTE *)(v1 + 64) || *(_BYTE *)(v1 + 65) != 45 )
  {
      a1x->var_u16_29821_26 = 5;
LABEL_33:
    v22 = v26;
    a1x->var_u16_29941_146 = 0;
    sub_424F0(a1x, v22 + 1);
    return;
  }
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v1 + 72);
  word_AE454_AE444.z = *(_WORD *)(v1 + 76);
  v2 = a1x->var_u16_29821_26;
  a1x->var_u16_29821_26 = v2 + 1;
  if ( v2 >= 4 )
  {
      a1x->var_u16_29821_26 = 1;
    goto LABEL_33;
  }
  v3 = 9377 * a1x->rand_29799_4 + 9439;
  a1x->rand_29799_4 = v3;
  v27 = (v3 & 7) + 25;
  sub_1E9B0(v27, &v24, &v25);
  switch (a1x->var_u16_29821_26)
  {
    case 1:
      v4 = 9377 * a1x->rand_29799_4 + 9439;
      a1x->rand_29799_4 = v4;
      v5 = a1x->rand_29799_4;
      word_AE454_AE444.x += *(_WORD *)(v1 + 80) + v24 + ((v4 % 3) << 8) + 256;
      v6 = 9377 * v5 + 9439;
      a1x->rand_29799_4 = v6;
      v7 = ((v6 % 3) << 8) - 1280 + word_AE454_AE444.y;
      goto LABEL_10;
    case 2:
      v8 = 9377 * a1x->rand_29799_4 + 9439;
      a1x->rand_29799_4 = v8;
      v9 = a1x->rand_29799_4;
      word_AE454_AE444.x -= *(_WORD *)(v1 + 80) + v24 + ((v8 % 3) << 8) + 256;
      a1x->rand_29799_4 = 9377 * v9 + 9439;
      v7 = (((9377 * v9 + 9439) % 3u) << 8) - 1280 + word_AE454_AE444.y;
      goto LABEL_10;
    case 3:
      v10 = 9377 * a1x->rand_29799_4 + 9439;
      a1x->rand_29799_4 = v10;
      v11 = a1x->rand_29799_4;
      word_AE454_AE444.x += ((v10 % 3) << 8) - 1280;
      v12 = 9377 * v11 + 9439;
      a1x->rand_29799_4 = v12;
      v7 = *(_WORD *)(v1 + 82) + v25 + ((v12 % 3) << 8) + 256 + word_AE454_AE444.y;
      goto LABEL_10;
    case 4:
      v13 = 9377 * a1x->rand_29799_4 + 9439;
      a1x->rand_29799_4 = v13;
      v14 = a1x->rand_29799_4;
      word_AE454_AE444.x += ((v13 % 3) << 8) - 1280;
      a1x->rand_29799_4 = 9377 * v14 + 9439;
      v7 = word_AE454_AE444.y - (v25 + *(_WORD *)(v1 + 82) + (((9377 * v14 + 9439) % 3u) << 8) + 256);
LABEL_10:
      word_AE454_AE444.y = v7;
      break;
    default:
      break;
  }
  v15 = word_AE454_AE444.x;
  v16 = word_AE454_AE444.y;
  if ( sub_11810(&word_AE454_AE444) == 1 )
  {
    a1x->var_u16_29821_26 = 2;
    goto LABEL_33;
  }
  LOBYTE(v17) = sub_1E920((uint16*)&word_AE454_AE444, (int)v24 >> 8, (int)v25 >> 8, (((int)v25 >> 7) + ((int)v24 >> 7) > 4) + 15);
  if ( (_BYTE)v17 )
  {
    v18 = 0;
    v19 = *(_DWORD *)(dword_AE408_AE3F8() + 36470);
    do
    {
      LOBYTE(v17) = dword_AE400_AE3F0() + 99;
      if ( v19 <= dword_AE400_AE3F0() + 29795 )
        break;
      v17 = abs16(*(_WORD *)(v19 + 72) - v15);
      if ( v17 <= *(__int16 *)(v19 + 80) + v24 )
      {
        v17 = abs16(*(_WORD *)(v19 + 74) - v16);
        if ( v17 <= v25 + *(__int16 *)(v19 + 82) )
          v18 = 1;
      }
      v19 = *(_DWORD *)v19;
    }
    while ( !v18 );
    if ( !v18 )
    {
      v20 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
      do
      {
        LOBYTE(v17) = dword_AE400_AE3F0() + 99;
        if ( v20 <= dword_AE400_AE3F0() + 29795 )
          break;
        if ( *(_BYTE *)(v20 + 65) == 2 )
        {
          v17 = abs16(*(_WORD *)(v20 + 72) - v15);
          if ( v17 <= *(__int16 *)(v20 + 80) + v24 )
          {
            v17 = abs16(*(_WORD *)(v20 + 74) - v16);
            if ( v17 <= *(__int16 *)(v20 + 82) + v25 )
              v18 = 1;
          }
        }
        v20 = *(_DWORD *)v20;
      }
      while ( !v18 );
    }
    if ( !v18 )
    {
      v21 = (int)sub_373F0(&word_AE454_AE444, 10, 45);
      if ( v21 )
      {
        sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 10);
        sub_36DF0((Type_AE400_29795*)v21, v27);
        *(_BYTE *)(v21 + 70) = 51;
      }
      a1x->var_u16_29941_146 = 0;
      sub_424F0(a1x, 0x4Fu);
    }
  }
}
// 1EDB9: conditional instruction was optimized away because cl.1==0
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;

//----- (0001EED0) --------------------------------------------------------
void sub_1EED0(Type_AE400_29795* a1x)
{
  int v1; // esi
  unsigned int v2; // edi
  __int16 v3; // ax
  unsigned __int16 v4; // ax
  int v5; // eax
  int i; // edx
  int v7; // ecx
  unsigned __int8 v8; // al
  int v9; // edx
  unsigned int v10; // eax
  __int16 v11; // dx
  int v12; // eax

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v7;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 > 1 )
    {
      dword_AE400_AE3F0(v1);
      v8 = 76;
LABEL_23:
      sub_424F0(a1x, v8);
      return;
    }
    v9 = 164 * a1x->var_u16_29835_40;
    dword_AE400_AE3F0(v1);
    if ( v9 + v1 + 29795 )
    {
      if ( *(_BYTE *)(v1 + v9 + 29860) <= 1u )
        *(_WORD *)(*(_DWORD *)(164 * a1x->var_u16_29835_40 + dword_AE400_AE3F0() + 29955) + 528) = 200;
    }
  }
  else
  {
    dword_AE400_AE3F0(v1);
    sub_196E0(a1x);
    if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
    {
      v10 = 9377 * a1x->rand_29799_4 + 9439;
      a1x->rand_29799_4 = v10;
      v11 = 2 * (v10 % 0x9D / 79i64);
      v12 = 9377 * a1x->rand_29799_4 + 9439;
      a1x->rand_29799_4 = v12;
      a1x->var_u16_29829_34 += ((unsigned __int8)v12 + 85) * (v11 - 1);
      LOWORD(v12) = a1x->var_u16_29821_26;
      a1x->var_u16_29829_34 &= 0x7ffu;
      a1x->var_u16_29821_26 = v12 - 1;
      if ( !(_WORD)v12 )
      {
          a1x->var_u16_29821_26 = 1;
        v8 = 75;
        goto LABEL_23;
      }
    }
  }
}
// 1EFA7: conditional instruction was optimized away because edi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001F120) --------------------------------------------------------
void sub_1F120(Type_AE400_29795* a1x)
{
  int v1; // esi
  unsigned int v2; // edi
  __int16 v3; // ax
  unsigned __int16 v4; // ax
  int v5; // eax
  int i; // edx
  int v7; // ecx
  int v8; // eax
  int v9; // edi
  __int16 v10; // ax
  _WORD *v11; // edi

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v7;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      v8 = 164 * a1x->var_u16_29835_40;
      dword_AE400_AE3F0(v1);
      if ( v8 + v1 + 29795 )
      {
        if ( *(_BYTE *)(v1 + v8 + 29860) <= 1u )
          *(_WORD *)(*(_DWORD *)(164 * a1x->var_u16_29835_40 + dword_AE400_AE3F0() + 29955) + 528) = 200;
      }
    }
    else
    {
      dword_AE400_AE3F0(v1);
      sub_424F0(a1x, 0x4Cu);
    }
  }
  else
  {
    dword_AE400_AE3F0(v1);
    sub_196E0(a1x);
    if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26 / 2) )
    {
      v9 = dword_AE400_AE3F0() + 29795 + 164 * a1x->var_u16_29941_146;
      v10 = a1x->var_u16_29821_26;
      a1x->var_u16_29821_26 = v10 - 1;
      if ( !v10 || !*(_BYTE *)(v9 + 64) )
      {
          a1x->var_u16_29821_26 = 5;
        sub_424F0(a1x, 0x49u);
      }
      v11 = (_WORD *)(v9 + 72);
      a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)v11);
      if ( sub_42340(&a1x->var_u32_29867_72, (axis_3d*)v11) < 0xA00 )
      {
          a1x->var_u16_29821_26 = 0;
        sub_424F0(a1x, 0x48u);
      }
    }
  }
}
// 1F1F8: conditional instruction was optimized away because edi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001F390) --------------------------------------------------------
void sub_1F390(Type_AE400_29795* a1x)
{
  unsigned int v1; // edi
  unsigned int v2; // ebp
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int i; // eax
  int v6; // edx
  unsigned __int8 v7; // al
  int v8; // edx
  unsigned int j; // ebx
  unsigned int v10; // eax

  v1 = -1;
  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      for ( i = dword_AE400_AE3F0() + 29795 + 164 * v4;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v6 = *(_DWORD *)(i + 12);
        if ( v6 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v6;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( !v2 )
  {
    for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36470); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
    {
      v10 = sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(j + 72));
      if ( v10 && v10 < v1 )
      {
        v2 = j;
        v1 = v10;
      }
    }
    if ( v2 )
    {
      a1x->var_u16_29941_146 = (int)(v2 - (dword_AE400_AE3F0() + 29795)) / 164;
      a1x->var_u16_29821_26 = 10;
      v7 = 74;
    }
    else
    {
      a1x->var_u16_29821_26 = 5;
      v7 = 73;
    }
    goto LABEL_28;
  }
  if ( v2 > 1 )
  {
    v7 = 76;
LABEL_28:
    sub_424F0(a1x, v7);
    return;
  }
  v8 = 164 * a1x->var_u16_29835_40;
  if ( v8 + dword_AE400_AE3F0() + 29795 )
  {
    if ( *(_BYTE *)(v8 + dword_AE400_AE3F0() + 29860) <= 1u )
      *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40 + 29955) + 528) = 200;
  }
}
// 1F46E: conditional instruction was optimized away because ebp.4==2
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0001F5A0) --------------------------------------------------------
void sub_1F5A0(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 72);
}

//----- (0001F5B0) --------------------------------------------------------
void sub_1F5B0(Type_AE400_29795* a1x)
{
  int v1; // eax

  v1 = 164 * a1x->var_u16_29833_38;
  if ( v1 + dword_AE400_AE3F0() + 29795 && *(_BYTE *)(dword_AE400_AE3F0() + v1 + 29860) <= 1u )
    *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29833_38 + 29955) + 528) = 200;
  sub_1A800(a1x);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001F640) --------------------------------------------------------
void sub_1F640(Type_AE400_29795* a1x)
{
  int v1; // edi
  unsigned int v2; // esi
  __int16 v3; // ax
  unsigned __int16 v4; // ax
  int v5; // eax
  int i; // edx
  int v7; // ecx
  unsigned int j; // eax
  int v9; // edx
  int v10; // edi
  int v11; // edx
  unsigned int v12; // ecx
  int v13; // esi
  int v14; // edx
  unsigned int v15; // edx
  int v16; // esi
  unsigned int v18; // [esp+4h] [ebp-1Ch]

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v7;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      LOBYTE(j) = v1;
      v9 = 164 * a1x->var_u16_29835_40;
      dword_AE400_AE3F0(v1);
      if ( v9 + v1 + 29795 )
      {
        LOBYTE(j) = v1 + v9;
        if ( *(_BYTE *)(v1 + v9 + 29860) <= 1u )
        {
          j = *(_DWORD *)(164 * a1x->var_u16_29835_40 + dword_AE400_AE3F0() + 29955);
          *(_WORD *)(j + 528) = 200;
        }
      }
    }
    else
    {
      dword_AE400_AE3F0(v1);
      sub_424F0(a1x, 0x52u);
    }
  }
  else
  {
    dword_AE400_AE3F0(v1);
    sub_196E0(a1x);
    LOWORD(j) = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
    if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
    {
      v10 = dword_AE400_AE3F0();
      if (a1x->var_u16_29941_146 )
      {
        v16 = dword_AE400_AE3F0() + 29795 + 164 * a1x->var_u16_29941_146;
        if ( *(_BYTE *)(v16 + 64) != 10 || *(_BYTE *)(v16 + 65) != 45 )
          goto LABEL_36;
        if ( sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v16 + 72)) > 0x800 )
        {
          LOWORD(j) = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v16 + 72));
          a1x->var_u16_29829_34 = j;
          return;
        }
        if ( *(_WORD *)(v16 + 128) <= *(_WORD *)(v16 + 26) )
        {
LABEL_36:
            a1x->var_u16_29941_146 = 0;
          LOWORD(j) = a1x->var_u16_29925_130;
          a1x->actSpeed_29921_126 = j;
          return;
        }
        sub_424F0(a1x, 0x52u);
        a1x->var_u16_29821_26 = 1;
        LOWORD(j) = *(_WORD *)(v16 + 26) + 1;
        *(_WORD *)(v16 + 26) = j;
      }
      else
      {
        j = 9377 * a1x->rand_29799_4 + 9439;
        a1x->rand_29799_4 = j;
        v11 = 9377 * a1x->rand_29799_4 + 9439;
        a1x->rand_29799_4 = v11;
        a1x->var_u16_29829_34 += (2 * (j % 0x9D / 79i64) - 1) * ((unsigned __int8)v11 + 85);
        a1x->var_u16_29829_34 &= 0x7ffu;
        LOWORD(j) = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
        if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
        {
          v12 = -1;
          v18 = 0;
          for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36470); j > v10 + 29795; j = *(_DWORD *)j )
          {
            v13 = (__int16)(*(_WORD *)(j + 72) - a1x->var_u32_29867_72.x);
            v14 = (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y);
            v15 = v13 * v13 + v14 * v14;
            if ( v15 < v12 )
            {
              v18 = j;
              v12 = v15;
            }
          }
          dword_AE400_AE3F0(v10);
          if ( v18 )
          {
            a1x->var_u16_29941_146 = (int)(v18 - (v10 + 29795)) / 164;
            LOWORD(j) = a1x->actSpeed_29923_128;
            a1x->actSpeed_29921_126 = j;
          }
        }
      }
    }
  }
}
// 1F723: conditional instruction was optimized away because esi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0001FA00) --------------------------------------------------------
void sub_1FA00(Type_AE400_29795* a1x)
{
  int v2; // eax

  if (a1x->var_u16_29821_26)
  {
      sub_41E80(a1x);
  }
  else
  {
      v2 = 164 * a1x->var_u16_29833_38;
      if (v2 + dword_AE400_AE3F0() + 29795)
      {
          if (*(_BYTE*)(dword_AE400_AE3F0() + v2 + 29860) <= 1u)
              *(_WORD*)(*(_DWORD*)(164 * a1x->var_u16_29833_38 + dword_AE400_AE3F0() + 29955) + 528) = 200;
      }
      sub_1A6C0(a1x, 78);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001FAA0) --------------------------------------------------------
void sub_1FAA0(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (0001FAC0) --------------------------------------------------------
void sub_1FAC0(Type_AE400_29795* a1x)
{
  int v1; // edi
  unsigned int v2; // esi
  __int16 v3; // ax
  unsigned __int16 v4; // ax
  int v5; // eax
  int i; // edx
  int v7; // ecx
  unsigned int j; // eax
  int v9; // edx
  int v10; // edi
  int v11; // ebp
  unsigned int v12; // ecx
  int v13; // esi
  int v14; // edx
  unsigned int v15; // edx
  int v16; // esi
  unsigned int v18; // [esp+4h] [ebp-1Ch]

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < a1x->actLife_29807_12)
        {
          a1x->actLife_29807_12 = v7;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v2 )
  {
    if ( v2 <= 1 )
    {
      LOBYTE(j) = v1;
      v9 = 164 * a1x->var_u16_29835_40;
      dword_AE400_AE3F0(v1);
      if ( v9 + v1 + 29795 )
      {
        LOBYTE(j) = v1 + v9;
        if ( *(_BYTE *)(v1 + v9 + 29860) <= 1u )
        {
          j = *(_DWORD *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40 + 29955);
          *(_WORD *)(j + 528) = 200;
        }
      }
    }
    else
    {
      dword_AE400_AE3F0(v1);
      sub_424F0(a1x, 0x58u);
    }
  }
  else
  {
    dword_AE400_AE3F0(v1);
    sub_196E0(a1x);
    LOWORD(j) = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
    if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
    {
      v10 = dword_AE400_AE3F0();
      if (a1x->var_u16_29941_146)
      {
        v16 = dword_AE400_AE3F0() + 29795 + 164 * a1x->var_u16_29941_146;
        if ( *(_BYTE *)(v16 + 64) != 10 || *(_BYTE *)(v16 + 65) != 45 )
          goto LABEL_37;
        if ( sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v16 + 72)) > 0x800 )
        {
          LOWORD(j) = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v16 + 72));
          a1x->var_u16_29829_34 = j;
          return;
        }
        if ( *(_WORD *)(v16 + 128) <= *(_WORD *)(v16 + 26) )
        {
LABEL_37:
            a1x->var_u16_29941_146 = 0;
          LOWORD(j) = a1x->var_u16_29925_130;
          a1x->actSpeed_29921_126 = j;
          return;
        }
        sub_424F0(a1x, 0x58u);
        a1x->var_u16_29821_26 = 1;
        LOWORD(j) = *(_WORD *)(v16 + 26) + 1;
        *(_WORD *)(v16 + 26) = j;
      }
      else
      {
        j = 9377 * a1x->rand_29799_4 + 9439;
        a1x->rand_29799_4 = j;
        v11 = a1x->rand_29799_4;
        a1x->rand_29799_4 = 9377 * v11 + 9439;
        a1x->var_u16_29829_34 += ((unsigned __int8)(-95 * v11 - 33) + 85) * (2 * (j % 0x9D / 79i64) - 1);
        a1x->var_u16_29829_34 &= 0x7ffu;
        LOWORD(j) = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
        if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
        {
          v12 = -1;
          v18 = 0;
          for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36470); j > v10 + 29795; j = *(_DWORD *)j )
          {
            v13 = (__int16)(*(_WORD *)(j + 72) - a1x->var_u32_29867_72.x);
            v14 = (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y);
            v15 = v13 * v13 + v14 * v14;
            if ( v15 < v12 && v15 > 0xE100000 )
            {
              v18 = j;
              v12 = v15;
            }
          }
          dword_AE400_AE3F0(v10);
          if ( v18 )
          {
              a1x->var_u16_29941_146 = (int)(v18 - (v10 + 29795)) / 164;
            LOWORD(j) = a1x->actSpeed_29923_128;
            a1x->actSpeed_29921_126 = j;
          }
        }
      }
    }
  }
}
// 1FBA3: conditional instruction was optimized away because esi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0001FE90) --------------------------------------------------------
void sub_1FE90(Type_AE400_29795* a1x)
{
  if (a1x->var_u16_29821_26)
    sub_41E80(a1x);
  else
    sub_1A6C0(a1x, 84);
}

//----- (0001FEC0) --------------------------------------------------------
void sub_1FEC0(Type_AE400_29795* a1x)
{
  int v1; // eax

  v1 = 164 * a1x->var_u16_29833_38;
  if ( v1 + dword_AE400_AE3F0() + 29795 && *(_BYTE *)(dword_AE400_AE3F0() + v1 + 29860) <= 1u )
    *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * a1x->var_u16_29833_38 + 29955) + 528) = 200;
  sub_1A800(a1x);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0001FF40) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_1FF40(char a1, Type_AE400_29795* a2x, char a3, int a4, int a5)
{
  int v5; // ebx
  int v6; // [esp-8h] [ebp-8h]
  void *retaddr; // [esp+0h] [ebp+0h] BYREF

  //fix
  v6 = 0;
  //fix

  v5 = a4 - (a1 + *(_DWORD *)(v6 + 27));
  *(_BYTE *)(v5 - 1957008686) += a3 - *(_BYTE *)(a5 + 128);
  sub_19B10(a2x, (char)&retaddr);
}
// 1FF47: positive sp value 8 has been found
// 1FF41: variable 'v6' is possibly undefined

//----- (0001FF60) --------------------------------------------------------
void sub_1FF60(Type_AE400_29795* a1x)
{
  unsigned int v1; // ebp
  __int16 v2; // ax
  unsigned __int16 v3; // bx
  int i; // ebx
  int v5; // eax
  int v6; // eax
  int v7; // eax
  //int v8; // ebx
  unsigned int v9; // ebp
  unsigned int j; // ebx
  int v11; // eax
  unsigned int v12; // edi
  __int16 v13; // ax
  unsigned int v14; // [esp+4h] [ebp-1Ch]
  int v15; // [esp+8h] [ebp-18h]
  unsigned int v16; // [esp+Ch] [ebp-14h]

  v1 = 0;
  //a1x->var_u16_29835_40
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v2 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v1 = 1;
      a1x->var_u16_29835_40 = v2;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v3 = a1x->var_u16_29849_54;
    if ( v3 )
    {
      for ( i = dword_AE400_AE3F0() + 29795 + 164 * v3;
            i != dword_AE400_AE3F0() + 29795;
            i = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(i + 54) )
      {
        v5 = *(_DWORD *)(i + 12);
        if ( v5 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v5;
          v1 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(i + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v1 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v1 )
  {
    if ( v1 > 1 )
    {
      sub_424F0(a1x, 0x5Eu);
      goto LABEL_34;
    }
    v6 = dword_AE400_AE3F0() + 164 * a1x->var_u16_29835_40;
    if ( *(_BYTE *)(v6 + 29859) != 3 || *(_WORD *)(v6 + 29819) == a1x->id_29819_24)
      goto LABEL_34;
    LOWORD(v7) = a1x->var_u16_29835_40;
    goto LABEL_33;
  }
  sub_20480(a1x);
  //v8 = a1x->var_u32_29951_156;
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) && a1x->var_u8_29853_58)
  {
    v9 = -1;
    v14 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
    v16 = 0;
    for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 36462); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
    {
      if ( *(_WORD *)(j + 24) != a1x->id_29819_24)
      {
        v11 = (__int16)(*(_WORD *)(j + 72) - a1x->var_u32_29867_72.x);
        v12 = v11 * v11
            + (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y) * (__int16)(*(_WORD *)(j + 74) - a1x->var_u32_29867_72.y);
        if ( v12 <= v14 && (*(_BYTE *)(j + 16) & 0x20) == 0 )
        {
          v15 = a1x->var_u32_29951_156->v_30;
          v13 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(j + 72));
          if ( (unsigned __int16)sub_42210(a1x->var_u16_29825_30, v13) < v15 && v12 < v9 )
          {
            v16 = j;
            v9 = v12;
          }
        }
      }
    }
    if ( v16 )
    {
      v7 = (int)(v16 - (dword_AE400_AE3F0() + 29795)) / 164;
  LABEL_33:
      a1x->var_u16_29941_146 = v7;
      sub_424F0(a1x, 0x5Cu);
    }
  }
LABEL_34:
  if (a1x->var_u8_29865_70 == 92 )
    sub_20410(a1x);
}
// 2002B: conditional instruction was optimized away because ebp.4==2
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (000201D0) --------------------------------------------------------
void sub_201D0(Type_AE400_29795* a1x)
{
  int v1; // esi
  unsigned int v2; // edi
  __int16 v3; // ax
  unsigned __int16 v4; // cx
  int v5; // eax
  int i; // edx
  int v7; // ecx
  int v8; // edi
  //int v9; // ecx
  int v10; // eax
  int v11; // edi
  unsigned int v12; // [esp+0h] [ebp-18h]
  _WORD *v13; // [esp+4h] [ebp-14h]

  v1 = dword_AE400_AE3F0();
  v2 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
      a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v3 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v2 = 1;
      a1x->var_u16_29835_40 = v3;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v4 = a1x->var_u16_29849_54;
    if ( v4 )
    {
      v5 = 164 * v4 + v1 + 29795;
      for ( i = v1 + 29795; v5 != i; v5 = i + 164 * *(unsigned __int16 *)(v5 + 54) )
      {
        v7 = *(_DWORD *)(v5 + 12);
        if ( v7 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v7;
          v2 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v5 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v2 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  dword_AE400_AE3F0(v1);
  if ( v2 > 1 )
  {
      a1x->var_u8_29865_70 = 94;
    goto LABEL_25;
  }
  v8 = v1 + 29795 + 164 * a1x->var_u16_29941_146;
  if ( (a1x->var_u8_29858_63 & 3) == 0 )
      a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v8 + 72));
  if ( *(int *)(v8 + 12) < 0 || (*(_BYTE *)(v8 + 17) & 4) != 0 )
    goto LABEL_22;
  //v9 = *(_DWORD *)(a1 + 156);
  if (a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26)
    goto LABEL_25;
  v12 = a1x->var_u32_29951_156->v_28;
  v13 = (_WORD *)(v8 + 72);
  if ( sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v8 + 72)) >= v12 )
  {
LABEL_22:
    sub_424F0(a1x, 0x5Bu);
  }
  else
  {
    v10 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 13);
    v11 = v10;
    if ( v10 )
    {
      *(_WORD *)(v10 + 24) = a1x->id_29819_24;
      *(_WORD *)(v10 + 30) = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)v13);
      *(_WORD *)(v11 + 32) = sub_42180(&a1x->var_u32_29867_72, (axis_3d*)v13);
      *(_WORD *)(v11 + 76) += a1x->var_u16_29873_78.var_u16_29879_84;
      *(_WORD *)(v11 + 146) = a1x->var_u16_29941_146;
      *(_BYTE *)(v11 + 67) = a1x->sModel_29862_67;
      *(_BYTE *)(v11 + 66) = a1x->sClass_29861_66;
    }
  }
LABEL_25:
  if (a1x->var_u8_29865_70 != 92 )
    sub_20450(a1x);
}
// 2029D: conditional instruction was optimized away because edi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000203E0) --------------------------------------------------------
void sub_203E0(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x5Au);
}

//----- (000203F0) --------------------------------------------------------
void sub_203F0(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 90);
}

//----- (00020400) --------------------------------------------------------
void sub_20400(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (00020410) --------------------------------------------------------
void sub_20410(Type_AE400_29795* a1x)
{
  signed int v1; // edx

  a1x->rand_29799_4 = 9377 * a1x->rand_29799_4 + 9439;
  v1 = a1x->rand_29799_4 % 0x14u;
  a1x->actSpeed_29921_126 = 0;
  if ( v1 <= 10 )
    sub_36FA0(a1x, 206);
  else
    sub_36FA0(a1x, 1);
}

//----- (00020450) --------------------------------------------------------
void sub_20450(Type_AE400_29795* a1x)
{
    a1x->actSpeed_29921_126 = a1x->actSpeed_29923_128;
  sub_36FA0(a1x, 0);
}

//----- (00020480) --------------------------------------------------------
void sub_20480(Type_AE400_29795* a1x)
{
  int v1; // esi
  int result; // eax
  unsigned int v3; // edx
  int v4; // ecx
  int v5; // eax
  unsigned int i; // ecx
  __int64 v7; // rax
  __int64 v8; // rax
  unsigned int v9; // eax
  signed int v10; // et2
  //__int16 *v11; // eax
  __int16 v12; // ax
  __int16 v13; // ax
  unsigned __int16 v14; // [esp-Ch] [ebp-2Ch]
  int v15; // [esp-Ch] [ebp-2Ch]
  int v16; // [esp-8h] [ebp-28h]
  int v17; // [esp-4h] [ebp-24h]
  _DWORD v18[2]; // [esp+0h] [ebp-20h]
  int v19; // [esp+8h] [ebp-18h]
  int v20; // [esp+Ch] [ebp-14h]
  int v21; // [esp+10h] [ebp-10h]

  v20 = 0;
  v18[0] = *(_DWORD *)sub_1FF40;
  v18[1] = *((_DWORD *)sub_1FF40 + 1);
  v19 = 1;
  if ( !(a1x->var_u8_29858_63 % 8) )
  {
    v1 = ~a1x->var_u32_29951_156->v_20;
    result = sub_11810(&a1x->var_u32_29867_72);
    if ( (result & v1) != 0 )
    {
        a1x->var_u8_29865_70 = 94;
      return;
    }
    LOWORD(result) = a1x->var_u16_29825_30;
    v21 = result;
    do
    {
      v14 = v21;
      word_AE454_AE444 = a1x->var_u32_29867_72;
      //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
      sub_41EC0_42200(&word_AE454_AE444, v14, 0, 256);
      a1x->rand_29799_4 = 9377 * a1x->rand_29799_4 + 9439;
      v3 = a1x->rand_29799_4 % (unsigned int)*((unsigned __int16 *)v18 + (unsigned __int16)v20);
      v4 = (v3 + 2) * (sub_11640(a1x, &word_AE454_AE444, 1) == 0);
      if ( (unsigned __int16)v4 > (unsigned __int16)v19 )
      {
        v19 = v4;
        a1x->var_u16_29825_30 = v21;
      }
      v5 = v21;
      BYTE1(v5) = (BYTE1(v21) + 2) & 7;
      ++v20;
      v21 = v5;
    }
    while ( (unsigned __int16)v20 < 4u );
  }
  word_AE454_AE444 = a1x->var_u32_29867_72;
  //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  if ( !(a1x->var_u8_29858_63 % 16) )
  {
    switch ( ((a1x->var_u16_29825_30 - 256) >> 9) & 3 )
    {
      case 0:
      case 2:
        word_AE454_AE444.y = (word_AE454_AE444.y >> 8 << 8) + 128;
        break;
      case 1:
      case 3:
        word_AE454_AE444.x = (word_AE454_AE444.x >> 8 << 8) + 128;
        break;
      default:
        break;
    }
  }
  for ( i = *(_DWORD *)(4 * a1x->var_u8_29860_65 + dword_AE408_AE3F8() + 36382); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(_WORD *)(i + 24) != a1x->id_29819_24)
    {
      v7 = a1x->var_u32_29867_72.x - *(__int16 *)(i + 72);
      if ( (int)((HIDWORD(v7) ^ v7) - HIDWORD(v7)) < 256 )
      {
        v8 = a1x->var_u32_29867_72.y - *(__int16 *)(i + 74);
        if ( (int)((HIDWORD(v8) ^ v8) - HIDWORD(v8)) < 256 )
        {
            a1x->var_u16_29829_34 = sub_42150_42490((axis_3d*)(_WORD *)(i + 72), &a1x->var_u32_29867_72);
          break;
        }
      }
    }
  }
  if (a1x->var_u16_29829_34 == a1x->var_u16_29825_30
    || (v9 = 9377 * a1x->rand_29799_4 + 9439, a1x->rand_29799_4 = v9, v10 = v9 % 0x14, result = v9 / 0x14, v10 <= 10) )
  {
    sub_41EC0_42200(&word_AE454_AE444, a1x->var_u16_29825_30, 0, a1x->actSpeed_29921_126);
    //v11 = *(__int16 **)(a1 + 156);
    v17 = a1x->var_u32_29951_156->v_14;
    v16 = a1x->var_u32_29951_156->v_10;
    v15 = a1x->var_u32_29951_156->v_12;
    v12 = sub_11F50(&word_AE454_AE444);
    v13 = sub_42000(&word_AE454_AE444, v12, v15, v16, v17);
    sub_41C70_41FB0(a1x, &word_AE454_AE444);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;

//----- (00020700) --------------------------------------------------------
void sub_20700(Type_AE400_29795* a1x)
{
  sub_19B10(a1x, 96);
}

//----- (00020710) --------------------------------------------------------
void sub_20710(Type_AE400_29795* a1x)
{
  //int v1; // esi
  unsigned int v2; // ecx
  unsigned int v3; // edi
  unsigned int i; // eax
  int v5; // esi
  int v6; // edx
  unsigned int v7; // edx
  unsigned int v8; // [esp+0h] [ebp-10h]

  sub_19D70(a1x, 96);
  if (a1x->var_u8_29865_70 == 97 )
  {
    //v1 = *(_DWORD *)(a1 + 156);
    if ( !(a1x->var_u8_29858_63 % (a1x->var_u32_29951_156->v_26 + 1)) )
    {
      v8 = a1x->var_u32_29951_156->v_28 * a1x->var_u32_29951_156->v_28;
      v2 = -1;
      v3 = 0;
      for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36470); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
      {
        v5 = (__int16)(*(_WORD *)(i + 72) - a1x->var_u32_29867_72.x);
        v6 = (__int16)(*(_WORD *)(i + 74) - a1x->var_u32_29867_72.y);
        v7 = v5 * v5 + v6 * v6;
        if ( v7 <= v8 && v7 < v2 )
        {
          v3 = i;
          v2 = v7;
        }
      }
      if ( v3 )
      {
        a1x->var_u16_29941_146 = (int)(v3 - (dword_AE400_AE3F0() + 29795)) / 164;
        sub_424F0(a1x, 0x62u);
      }
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (000207E0) --------------------------------------------------------
void sub_207E0(Type_AE400_29795* a1x)
{
  int v1; // edi
  int v2; // eax
  unsigned int v3; // esi
  __int16 v4; // ax
  unsigned __int16 v5; // cx
  int v6; // eax
  int i; // edx
  int v8; // ecx
  unsigned __int16 result; // ax
  char v10; // cl
  int v11; // ebp
  __int16 v12; // si
  int v13; // eax
  int v14; // esi
  __int16 v15; // ax
  int v16; // eax
  __int16 v17; // ax
  unsigned int v18; // [esp+4h] [ebp-18h]
  //_WORD *v19; // [esp+8h] [ebp-14h]

  v1 = dword_AE400_AE3F0();
  v2 = a1x->var_u32_29951_156->v_28;
  v18 = v2 * v2;
  v3 = 0;
  if (a1x->var_u8_29853_58)
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
        a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
      v4 = a1x->str_29885_90.var_u16_29889_94;
      a1x->str_29885_90.var_u16_29889_94 = 0;
      v3 = 1;
      a1x->var_u16_29835_40 = v4;
    }
    else
    {
        a1x->var_u16_29835_40 = 0;
    }
    v5 = a1x->var_u16_29849_54;
    if ( v5 )
    {
      v6 = 164 * v5 + v1 + 29795;
      for ( i = v1 + 29795; v6 != i; v6 = i + 164 * *(unsigned __int16 *)(v6 + 54) )
      {
        v8 = *(_DWORD *)(v6 + 12);
        if ( v8 < a1x->actLife_29807_12)
        {
            a1x->actLife_29807_12 = v8;
          v3 = 1;
          a1x->var_u16_29835_40 = *(_WORD *)(v6 + 40);
          break;
        }
      }
    }
  }
  if (a1x->actLife_29807_12 < 0 )
  {
    v3 = 2;
    a1x->var_u16_29833_38 = a1x->var_u16_29835_40;
  }
  if ( v3 )
  {
    if ( v3 <= 1 )
    {
      result = 41 * a1x->var_u16_29835_40;
      v10 = *(_BYTE *)(v1 + 164 * a1x->var_u16_29835_40 + 29859);
      dword_AE400_AE3F0(v1);
      if ( v10 == 3 )
      {
        result = a1x->var_u16_29835_40;
        a1x->var_u16_29941_146 = result;
      }
    }
    else
    {
      dword_AE400_AE3F0(v1);
      return sub_424F0(a1x, 0x64u);
    }
    return;
  }
  dword_AE400_AE3F0(v1);
  sub_196E0(a1x);
  v11 = dword_AE400_AE3F0() + 29795 + 164 * a1x->var_u16_29941_146;
  if ( (a1x->var_u8_29858_63 & 7) == 0
    && (*(_BYTE *)(v11 + 64) == 3 || sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v11 + 72)) >= 0x200) )
  {
      a1x->var_u16_29829_34 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v11 + 72));
  }
  if ( *(int *)(v11 + 12) < 0 || (*(_BYTE *)(v11 + 17) & 4) != 0 )
    return sub_424F0(a1x, 0x61u);
  v12 = a1x->var_u16_29821_26;
  if ( v12 )
  {
      a1x->var_u16_29821_26 = v12 - 1;
    //v19 = (_WORD *)(a1 + 72);
    v13 = (int)sub_373F0(&a1x->var_u32_29867_72, 9, 0);
    v14 = v13;
    if ( v13 )
    {
      *(_BYTE *)(v13 + 68) = 10;
      *(_BYTE *)(v13 + 69) = 0;
      *(_DWORD *)(v13 + 156) = (uint32)&unk_98F38[2];
      *(_BYTE *)(v13 + 67) = a1x->sModel_29862_67;
      *(_BYTE *)(v13 + 66) = a1x->sClass_29861_66;
      *(_WORD *)(v13 + 24) = a1x->id_29819_24;
      *(_WORD *)(v13 + 30) = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v11 + 72));
      *(_WORD *)(v14 + 32) = sub_42180(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v11 + 72));
      *(_WORD *)(v14 + 76) += 4 * a1x->var_u16_29873_78.var_u16_29879_84;
      v15 = a1x->var_u16_29941_146;
      *(_WORD *)(v14 + 44) = 3000;
      *(_DWORD *)(v14 + 140) = 60000;
      *(_WORD *)(v14 + 146) = v15;
    }
  }
  result = a1x->var_u8_29858_63 / a1x->var_u32_29951_156->v_26;
  if ( !(a1x->var_u8_29858_63 % a1x->var_u32_29951_156->v_26) )
  {
    v16 = (__int16)(*(_WORD *)(v11 + 72) - a1x->var_u32_29867_72.x);
    if ( v16 * v16
       + (__int16)(*(_WORD *)(v11 + 74) - a1x->var_u32_29867_72.y) * (__int16)(*(_WORD *)(v11 + 74) - a1x->var_u32_29867_72.y) >= v18 )
      return sub_424F0(a1x, 0x61u);
    if ( !(a1x->var_u8_29858_63 % (2 * a1x->var_u32_29951_156->v_26)) )
      sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 39);
    v17 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v11 + 72));
    result = sub_42210(a1x->var_u16_29825_30, v17);
    if ( result < 0xE3u )
        a1x->var_u16_29821_26 = 15;
  }
}
// 208C0: conditional instruction was optimized away because esi.4==2
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00020B60) --------------------------------------------------------
void sub_20B60(Type_AE400_29795* a1x)
{
  sub_1A390(a1x, 0x60u);
}

//----- (00020B70) --------------------------------------------------------
void sub_20B70(Type_AE400_29795* a1x)
{
  sub_1A6C0(a1x, 96);
}

//----- (00020B80) --------------------------------------------------------
void sub_20B80(Type_AE400_29795* a1x)
{
  sub_1A800(a1x);
}

//----- (00020BD0) --------------------------------------------------------
int sub_20BD0()
{
  int v1; // eax
  void *retaddr[2]; // [esp+10h] [ebp+0h]

  if ( word_939D2 || !byte_9008E )
  {
    byte_9008C += byte_9008F;
    byte_ACFF0 = -77;
    byte_ACFF2 = byte_9008C;
    byte_ACFF1 = 7;
    //fix sub_5EDA0(dword_CBFDC, (int)&byte_ACFF0, __DS__, 3);
    byte_ACFF0 = -76;
    byte_ACFF1 = 7;
    byte_ACFF2 = byte_9008C;
    //fix sub_5EDA0(dword_CBFDC, (int)&byte_ACFF0, __DS__, 3);
    byte_ACFF0 = -75;
    byte_ACFF1 = 7;
    byte_ACFF2 = byte_9008C;
    //fix v1 = sub_5EDA0(dword_CBFDC, (int)&byte_ACFF0, __DS__, 3);
    BYTE1(v1) = byte_9008C;
    if ( byte_9008C == 126 && byte_9008D == 2 )
    {
      v1 = sub_5DC91(dword_80000);
      byte_9008E = 0;
    }
    if ( !byte_9008C && byte_9008D == 1 )
    {
      v1 = sub_5DC91(dword_80000);
      byte_9008C = 0;
      byte_9008E = 0;
    }
    return 0;//fix return MK_FP(retaddr[0], retaddr[0])(v1);
  }
  else
  {
    sub_5DC91(dword_80000);
    byte_9008E = 0;
    return 0;//fix return MK_FP(retaddr[0], retaddr[0])();
  }
}
// 80000: using guessed type int dword_80000;
// 9008C: using guessed type char byte_9008C;
// 9008D: using guessed type char byte_9008D;
// 9008E: using guessed type char byte_9008E;
// 9008F: using guessed type char byte_9008F;
// 939D2: using guessed type __int16 word_939D2;
// ACFF0: using guessed type char byte_ACFF0;
// ACFF1: using guessed type char byte_ACFF1;
// ACFF2: using guessed type char byte_ACFF2;
// CBFDC: using guessed type int dword_CBFDC;

//----- (00020D00) --------------------------------------------------------
void sub_20D00(char a1)
{
  if ( byte_939CC )
  {
    if ( word_939D2 || !byte_9008E )
    {
      if ( byte_939CD && word_939D2 )
      {
        if ( sub_5D7F0(dword_CBFD8) )
        {
          if ( byte_9008E )
            sub_5DC91(dword_80000);
          byte_9008C = 0;
          byte_9008F = -2;
          byte_9008D = 1;
          byte_9008E = 0;
          sub_5F529(dword_CBFD8, (unsigned int)&dword_12F030);
          sub_5F398(dword_CBFD8);
          word_939D0 = 100;
        }
        else if ( a1 != byte_9008D )
        {
          if ( byte_9008E )
            sub_5DC91(dword_80000);
          byte_9008D = a1;
          byte_9008E = 1;
          byte_9008F = -byte_9008F;
          if ( a1 == 1 )
          {
              //fix sub_5D97B(0x14u, (int)sub_20BD0, __CS__, (unsigned int)&dword_80000);
          }
          else if ( a1 == 2 )
          {
              //fix sub_5D97B(0x3Cu, (int)sub_20BD0, __CS__, (unsigned int)&dword_80000);
          }
        }
      }
    }
    else
    {
      sub_5DC91(dword_80000);
      byte_9008E = 0;
    }
  }
}
// 80000: using guessed type int dword_80000;
// 9008C: using guessed type char byte_9008C;
// 9008D: using guessed type char byte_9008D;
// 9008E: using guessed type char byte_9008E;
// 9008F: using guessed type char byte_9008F;
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// 939D0: using guessed type __int16 word_939D0;
// 939D2: using guessed type __int16 word_939D2;
// CBFD8: using guessed type int dword_CBFD8;
// 12F030: using guessed type int dword_12F030;

//----- (00020E60) --------------------------------------------------------
void sub_20E60_20E60()
{
  if ( byte_939CC && byte_939CD && word_939D2 )
  {
    if ( !sub_5D7F0(dword_CBFD8) )
      sub_5F420(dword_CBFD8);
    sub_5F355(dword_CBFD8);
    sub_6091D(dword_CBFDC);
    if ( byte_9AF9C )
      sub_6091D(dword_12F074);
    word_939D2 = 0;
  }
}
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// 939D2: using guessed type __int16 word_939D2;
// 9AF9C: using guessed type char byte_9AF9C;
// CBFD8: using guessed type int dword_CBFD8;
// CBFDC: using guessed type int dword_CBFDC;
// 12F074: using guessed type int dword_12F074;


//SAME WITH REMC1

int DrawGameFrame_20FB0_index = 0;

//----- (00020FB0) --------------------------------------------------------
void DrawGameFrame_20FB0()//1F1FB0_
{
	__int64 v9; // rax
	__int64 v10; // rax
	const char* textVar; // eax
	unsigned __int8 textIndex; // al
	int locMouseX; // esi
	int locMouseY; // ebx
	int var_132; // edi
	unsigned __int16 var_50; // cx
	int removeItMaybe; // fix it
	char textBuffer[256]; // [esp+0h] [ebp-134h] BYREF
	int tempMouseY; // [esp+114h] [ebp-20h]
	int tempMouseX; // [esp+120h] [ebp-14h]

	int textDrawAxisX;
	int textDrawAxisY;
	int intLetterY;

	int v4x = str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13337_14;

	dword_90098 = 0;
	switch (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_14421_1098)
	{
	case 0:
	case 3:
		if (byte_90094 || str_AE400_AE3F0->set.var_u8_8600 != byte_90096)
		{
			byte_90094 = 0;
			byte_90096 = str_AE400_AE3F0->set.var_u8_8600;
			if (byte_90096 < 40)
			{
				if ((typeResolution_12F02E_12F01E & 1) != 0)
					sub_411D7_41517((void*)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
				else
					sub_411FD_4153D((void*)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
			}
		}
		if (str_AE400_AE3F0->set.var_u8_8600 < 40)
		{
			if ((typeResolution_12F02E_12F01E & 1) != 0)
				sub_411D7_41517((void*)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
			else
				sub_411FD_4153D((void*)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
		}
		setViewPort_30A70_30AB0(str_AE400_AE3F0->set.var_u8_8600);//set viewport
        if (DrawGameFrame_20FB0_index == 1)
        {
            DrawGameFrame_20FB0_index++;
            DrawGameFrame_20FB0_index--;
        }
        DrawWorld_30D90_30DD0(//draw screen without minimap
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.z + 128,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].pitch_8,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].roll_10,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].fov_12);
#ifdef COMPARE_WITH
        CompareWith((char*)"fullframe", 0, 320 * 200, (uint8*)begWscreen_2ECFF4_2ECFE4);
#endif
        DrawGameFrame_20FB0_index++;
        if (str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333].actLife_29807_12 >= 0
			&& (str_AE408_AE3F8->var_u8_0 & 4) == 0)
		{
			if (str_AE400_AE3F0->set.mapOn_8601)
			{
				DrawMinimap_49300_49640(
					0,
					0,
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
					128,
					128,
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
					256,
					dword_12F000_12EFF0 - 2 * (dword_12F000_12EFF0 / 5u),
					0);
				sub_48710_48A50(
					0,
					0,
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
					128,
					128,
					str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
					256);
			}
			//adress 1F2257_
			//debug
#ifdef debug1
		//add_compare(0x1F2257, true, true);
#endif debug1
		//debug
			sub_5A3C0_5A8D0(1);
			//adress 1F225E_
			//debug
#ifdef debug1
		//add_compare(0x1F225E, true, true);
#endif debug1
		//debug
			Type_160* v6x = str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333].var_u32_29955_160;
			if (str_AE400_AE3F0->set.iconsOn_8602)
			{
				sub_23D40(
					510,
					2,
					&str_AE400_AE3F0->str_29795[v6x->var_14958_1635_532[v6x->var_u16_2043_940]],
					0);
				sub_23D40(
					574,
					2,
					&str_AE400_AE3F0->str_29795[v6x->var_14958_1635_532[v6x->var_u16_2047_944]],
					0);
				sub_22E50(&str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333]);
			}

			//adress 1F2341_
			//debug
#ifdef debug1
		//add_compare(0x1F2341, true, true);
#endif debug1
		//debug
			sub_5A3C0_5A8D0(1);
			if ((str_AE408_AE3F8->var_u8_1 & 2) == 0)
			{
				sub_5A3C0_5A8D0(1);
				textDrawAxisY = 50;
				if ((str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 & 2) != 0)
				{
					if (str_AE400_AE3F0->set.var_u8_8600 == 40)
					{
						DrawText_5A180_5A690(dword_AE238_AE228[60], 132, 50, byte_AD167_AD157[1]);
						textDrawAxisY = GetLetterY_5A3B0_5A8C0() + 50;
						DrawText_5A180_5A690(dword_AE238_AE228[61], 132, textDrawAxisY, byte_AD167_AD157[1]);
					}
					else
					{
						v9 = 4080 * str_AE408_AE3F8->str_93.var_u8[2];
						DrawText_5A180_5A690(
							dword_AE238_AE228[60],
							132,
							50,
							byte_AD167_AD157[1 + 273 * ((int)(v9 - (__CFSHL__(HIDWORD(v9), 8) + (HIDWORD(v9) << 8))) >> 8)]);
						textDrawAxisY = GetLetterY_5A3B0_5A8C0() + 50;
						v10 = 4080 * str_AE408_AE3F8->str_93.var_u8[2];
						DrawText_5A180_5A690(
							dword_AE238_AE228[61],
							132,
							textDrawAxisY,
							byte_AD167_AD157[1 + 273 * ((int)(v10 - (__CFSHL__(HIDWORD(v10), 8) + (HIDWORD(v10) << 8))) >> 8)]);
					}
					textDrawAxisY += GetLetterY_5A3B0_5A8C0();
				}
				if ((str_AE408_AE3F8->var_u8_2 & 1) != 0)
				{
					if (str_AE400_AE3F0->set.var_u8_8600 == 40)
						textIndex = byte_AD167_AD157[1];
					else
						textIndex = byte_AD167_AD157[1 + 273
						* ((int)(4080 * str_AE408_AE3F8->str_93.var_u8[2]
							- (__CFSHL__(str_AE408_AE3F8->str_93.var_u8[2] / 0x80809u, 8)
								+ ((str_AE408_AE3F8->str_93.var_u8[2] / 0x80809u) << 8))) >> 8)];
					DrawText_5A180_5A690((char*)"PAUSED!", 132, textDrawAxisY, textIndex);
					textDrawAxisY += GetLetterY_5A3B0_5A8C0();
				}
                for(int v13x = 0; v13x < str_AE400_AE3F0->var_u16_10; v13x++)
				//int v13x = 0;
				//while (v13x < str_AE400_AE3F0->var_u16_10)
				{
					textVar = str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v13x].messageText_13351_28;
					switch (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v13x].drawType_13417)
					{
					case 0:
						if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v13x].periods_13415 > 0)
						{
							sprintf(textBuffer, "%s %s", str_AE400_AE3F0->str_13323[v13x].str_14357, textVar);
							DrawText_5A180_5A690(textBuffer, 132, textDrawAxisY, byte_AD167_AD157[3841]);
                            textDrawAxisY += GetLetterY_5A3B0_5A8C0();
                            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v13x].periods_13415--;
						}
						break;
					case 1:
						sprintf(textBuffer, ">%s?", textVar);
						DrawText_5A180_5A690(textBuffer, 132, textDrawAxisY, byte_AD167_AD157[3841]);
						textDrawAxisY += GetLetterY_5A3B0_5A8C0();
						break;
					case 2:
						if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v13x].periods_13415 > 0)
						{
							sprintf(textBuffer, "%s", textVar);
							DrawText_5A180_5A690(textBuffer, 132, textDrawAxisY, byte_AD167_AD157[3841]);
							textDrawAxisY += GetLetterY_5A3B0_5A8C0();
                            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v13x].periods_13415--;
						}
						break;
					case 3:
						if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v13x].periods_13415 > 0)
						{
							sprintf(textBuffer, "[%s] %s", str_AE400_AE3F0->str_13323[v13x].str_14357, textVar);
							if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v13x].periods_13415 <= 100)
								textIndex = byte_AD167_AD157[3841];
							else
								textIndex = byte_AD167_AD157[1 + 256
								* ((int)(4080 * str_AE408_AE3F8->str_93.var_u8[2]
									- (__CFSHL__(str_AE408_AE3F8->str_93.var_u8[2] / 0x80809u, 8)
										+ ((str_AE408_AE3F8->str_93.var_u8[2] / 0x80809u) << 8))) >> 8)];
							DrawText_5A180_5A690(textBuffer, 132, textDrawAxisY, textIndex);
						//LABEL_41:
							textDrawAxisY += GetLetterY_5A3B0_5A8C0();
						//LABEL_42:
							str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v13x].periods_13415--;
						}
						break;
					default:
						break;
					}
					//v13x++;
				}
			}
			if ((str_AE408_AE3F8->var_u8_1 & 2) != 0)
				sub_5A3C0_5A8D0(1);

		}
		goto LABEL_139;
	case 1:
		if (byte_90094 || str_AE400_AE3F0->set.var_u8_8600 != byte_90096)
		{
			memset((void*)begWscreen_2ECFF4_2ECFE4, 0, scrHeight_12EFF8_12EFE8 * scrWidth_12EFF0_12EFE0);
			byte_90094 = 0;
			byte_90096 = str_AE400_AE3F0->set.var_u8_8600;
		}
		setViewPort_30A70_30AB0(str_AE400_AE3F0->set.var_u8_8600);
		DrawWorld_30D90_30DD0(
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.z + 128,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].pitch_8,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].roll_10,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].fov_12);
		sub_5A3C0_5A8D0(1);
		textDrawAxisX = GetLetterX_5A3A0_5A8B0();
		intLetterY = -GetLetterY_5A3B0_5A8C0() / 2;
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY = GetLetterY_5A3B0_5A8C0() + intLetterY;
			DrawText_5A180_5A690((char*)"Cursor up       Move forwards.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY = GetLetterY_5A3B0_5A8C0() + intLetterY;
			DrawText_5A180_5A690((char*)"Cursor up       Move forwards.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"Cursor down     Move backwards.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"Cursor down     Move backwards.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		textDrawAxisY += GetLetterY_5A3B0_5A8C0();
		DrawText_5A180_5A690((char*)"Cursor left     Move left.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		textDrawAxisY += GetLetterY_5A3B0_5A8C0();
		DrawText_5A180_5A690((char*)"Cursor right    Move right.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"Left button     Use spell to the left.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"Left button     Use spell to the left.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"Right button    Use spell to the right.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"Right button    Use spell to the right.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"1 - 0           Select assigned spells.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"1 - 0           Select assigned spells.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		textDrawAxisY += GetLetterY_5A3B0_5A8C0();
		DrawText_5A180_5A690((char*)"Space           Rebirth.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		textDrawAxisY += GetLetterY_5A3B0_5A8C0();
		DrawText_5A180_5A690((char*)"Shift Q         Exit to dos.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"F5              Reflections toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"F5              Reflections toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		textDrawAxisY += GetLetterY_5A3B0_5A8C0();
		DrawText_5A180_5A690((char*)"F6              Sky toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"F7              Shadows toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"F7              Shadows toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"F8              Icons toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"F8              Icons toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"F9              Speed blur toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"F9              Speed blur toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"F10             Stereo modes toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"F10             Stereo modes toggle.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		textDrawAxisY += GetLetterY_5A3B0_5A8C0();
		DrawText_5A180_5A690((char*)"Return          ", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"Left and Right  Spell selection.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"Left and Right  Spell selection.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		textDrawAxisY += GetLetterY_5A3B0_5A8C0() * 2;
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"If you are experiencing slowness, try Pressing F5,F6,F7.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"If you are experiencing slowness, try Pressing F5,F6,F7.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		textDrawAxisY += GetLetterY_5A3B0_5A8C0() * 2;
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"Magic Carpet comes to you from Bullfrog Productions Ltd.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"Magic Carpet comes to you from Bullfrog Productions Ltd.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"And will be released on the 15th November 1994.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"And will be released on the 15th November 1994.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"Copyright 1994 Bullfrog Productions Ltd.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		else
		{
			textDrawAxisY += GetLetterY_5A3B0_5A8C0();
			DrawText_5A180_5A690((char*)"Copyright 1994 Bullfrog Productions Ltd.", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		}
		textDrawAxisY += GetLetterY_5A3B0_5A8C0();
		textDrawAxisY += GetLetterY_5A3B0_5A8C0();
		DrawText_5A180_5A690((char*)"Good Luck!", textDrawAxisX, textDrawAxisY, byte_AE167_AE157);
		goto LABEL_139;
	case 2:
		if ((typeResolution_12F02E_12F01E & 1) != 0)
			sub_411D7_41517((void*)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
		else
			sub_411FD_4153D((void*)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
		locMouseX = 384;
		if (typeResolution_12F02E_12F01E == 1)
			locMouseY = 162;
		else
			locMouseY = 194;
		str_AE408_AE3F8->var_u8_22 = -1;
		break;
	case 4:
	LABEL_132:
		if (byte_90094 != 2)
		{
			memset((void*)begWscreen_2ECFF4_2ECFE4, 0, scrHeight_12EFF8_12EFE8 * scrWidth_12EFF0_12EFE0);
			byte_90094 = 2;
		}
		sub_309D0_30A10(16);
		DrawWorld_30D90_30DD0(
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.z + 128,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].pitch_8,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].roll_10,
			str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].fov_12);
		if (typeResolution_12F02E_12F01E == 1)
		{
			DrawMinimap_49300_49640(
				0,
				0,
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
				382,
				378,
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
				170,
				dword_12F000_12EFF0 - 192,
				1);
			sub_48710_48A50(
				0,
				0,
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
				382,
				382,
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
				170);
		}
		else
		{
			DrawMinimap_49300_49640(
				0,
				0,
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
				382,
				414,
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
				170,
				dword_12F000_12EFF0 - 192,
				1);
			sub_48710_48A50(
				0,
				0,
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.x,
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].axis.y,
				382,
				414,
				str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].str_13895_572[v4x + 1].yaw_6,
				170);
		}
		if (mouse_9AD90.y >= 382)
			sub_22880();
		goto LABEL_139;
	default:
	LABEL_139:
		//adress 1F256A_
		//debug
#ifdef debug1
		//add_compare(0x1F356A, true, true);
#endif debug1
		//debug
		sub_5A3C0_5A8D0(1);
		if ((str_AE408_AE3F8->var_u8_0 & 0x20) == 0
			&& (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u32_13341_18 & 2) != 0
			&& (str_AE408_AE3F8->var_u8_0 & 2) != 0)
		{
			sprintf(textBuffer, "MOVIE: %d", str_AE408_AE3F8->var_u16_13);
			DrawText_5A180_5A690(textBuffer, 0, 0, byte_AD167_AD157[3841]);
		}
		if ((str_AE408_AE3F8->var_u8_0 & 4) != 0)
		{
			if (str_AE408_AE3F8->var_u8_161 == 3)
			{
				if (str_AE408_AE3F8->var_u32_162 <= 0)
					str_AE408_AE3F8->var_u8_161 = 2;
				else
					str_AE408_AE3F8->var_u32_162--;
			}
			if (str_AE408_AE3F8->var_u8_161 == 2)
			{
				str_AE408_AE3F8->var_u8_161 = 1;
				str_AE408_AE3F8->var_u16_166 = 0;
				str_AE408_AE3F8->var_u32_162 = 50;
			}
			if (str_AE408_AE3F8->var_u8_161 == 1)
			{
				if (str_AE408_AE3F8->var_u32_162 <= 0)
				{
					while (1)
					{
						if (*off_9AB44[str_AE408_AE3F8->var_u16_166] == 33)
							break;
						++str_AE408_AE3F8->var_u16_166;
					}
					str_AE408_AE3F8->var_u16_166++;
					if (*off_9AB44[str_AE408_AE3F8->var_u16_166] == 35)
					{
						str_AE408_AE3F8->var_u8_161 = 3;
						str_AE408_AE3F8->var_u32_162 = 200;
					}
					else
					{
						str_AE408_AE3F8->var_u32_162 = 50;
					}
				}
				else
				{
					removeItMaybe = 380;
					int i;
					for (i = 0; *(&off_9AB44[i])[str_AE408_AE3F8->var_u16_166] != 33; i++)
						removeItMaybe -= GetLetterY_5A3B0_5A8C0();
					int k = 0;
					for (int j = 8; i > 0; j += GetLetterY_5A3B0_5A8C0())
					{
						if (k)
							DrawText_5A180_5A690(((&off_9AB44[k])[str_AE408_AE3F8->var_u16_166]), 8, j, byte_AD167_AD157[1]);
						else
							DrawText_5A180_5A690((off_9AB44[str_AE408_AE3F8->var_u16_166]), 8, j, byte_AE167_AE157);
						i--;
						k++;
					}
					str_AE408_AE3F8->var_u32_162--;
				}
			}
		}
		return;
	}
	//adress 1F2090_
	int index323 = str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333;
	int index295;
	int spellIndex = 0;
	while (1)
	{
		index295 = str_AE400_AE3F0->str_29795[index323].var_u32_29955_160->var_676.var_u16[byte_99B88[spellIndex]];
		if (&str_AE400_AE3F0->str_29795[index295] <= str_AE400_AE3F0->str_29795)
			break;
		var_132 = str_AE400_AE3F0->str_29795[index295].var_u16_29927_132;
		var_50 = str_AE400_AE3F0->str_29795[index323].var_u32_29955_160->var_50;
		if (var_132 && (var_50 == 0 || var_132 > str_AE400_AE3F0->str_29795[var_50].var_u32_29935_140)
			|| mouse_9AD90.x < locMouseX
			|| mouse_9AD90.x >= locMouseX + 64
			|| mouse_9AD90.y < locMouseY
			|| mouse_9AD90.y >= locMouseY + begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.y)
		{
			sub_24230(locMouseX, locMouseY, (unsigned int)&str_AE400_AE3F0->str_29795[index295], 0);
			if (!byte_B7700_B76F0)
				goto LABEL_126;
			if (mouse_9AD90.x < locMouseX)
				goto LABEL_126;
			if (mouse_9AD90.x >= locMouseX + 64)
				goto LABEL_126;
			if (mouse_9AD90.y < locMouseY)
				goto LABEL_126;
			if (mouse_9AD90.y >= locMouseY + begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.y)
				goto LABEL_126;
			if ((typeResolution_12F02E_12F01E & 1) == 0)
			{
			LABEL_125:
				sub_24DA0(locMouseX, locMouseY, begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.x, begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.y, byte_AE167_AE157);
				goto LABEL_126;
			}
			goto LABEL_118;
		}
		tempMouseX = locMouseX;
		tempMouseY = locMouseY;
		str_AE408_AE3F8->var_u8_22 = spellIndex;
	LABEL_126:
		locMouseX += 64;
		if (locMouseX >= 640)
		{
			locMouseX = 384;
			locMouseY += begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.y;
		}
		spellIndex++;
		if (spellIndex >= 24)
		{
			if (str_AE408_AE3F8->var_u8_22 != -1)
			{
				if (&str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_29795[index323].var_u32_29955_160->var_676.var_u16[byte_99B88[str_AE408_AE3F8->var_u8_22]]] > str_AE400_AE3F0->str_29795)
					sub_23D40(tempMouseX, tempMouseY, &str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333].var_u32_29955_160->var_676.var_u16[byte_99B88[str_AE408_AE3F8->var_u8_22]]], 1);
			}
			goto LABEL_132;
		}
	}
	sub_23CF0(locMouseX, locMouseY, byte_99B88[spellIndex]);
	if (!byte_B7700_B76F0)
		goto LABEL_126;
	if (mouse_9AD90.x < locMouseX)
		goto LABEL_126;
	if (mouse_9AD90.x >= locMouseX + 64)
		goto LABEL_126;
	if (mouse_9AD90.y < locMouseY)
		goto LABEL_126;
	if (mouse_9AD90.y >= locMouseY + begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.y)
		goto LABEL_126;
	if ((typeResolution_12F02E_12F01E & 1) == 0)
		goto LABEL_125;
LABEL_118:
	sub_24D20(locMouseX, locMouseY, begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.x, begSprTab_AE42C_AE41C_26C42C_26C41C[3].dim.y, byte_AE167_AE157);
	goto LABEL_126;
}

//----- (00022810) --------------------------------------------------------
void sub_22810(int a1, int a2, int a3, int a4, int a5, unsigned __int8 a6)
{
  int v6; // eax

  v6 = a5;
  if ( a5 >= a3 )
    v6 = a3;
  if ( v6 >= 2 && a4 >= 2 )
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_24C20(a1, a2, v6, a4, a6);
    else
      sub_24CA0(a1, a2, v6, a4, a6);
  }
}
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00022880) --------------------------------------------------------
int sub_22880()
{
  int v0; // esi
  int v1; // edx
  int v2; // eax
  __int64 v3; // rax
  int v4; // edx
  int v5; // esi
  char v6; // bh
  __int16 v7; // bx
  int v8; // edi
  __int16 v9; // bx
  int v10; // ebp
  int v11; // eax
  int result; // eax
  char v13[256]; // [esp+0h] [ebp-140h] BYREF
  int v14; // [esp+100h] [ebp-40h]
  int v15; // [esp+104h] [ebp-3Ch]
  int v16; // [esp+108h] [ebp-38h]
  int v17; // [esp+10Ch] [ebp-34h]
  char* v18; // [esp+110h] [ebp-30h]
  int v19; // [esp+114h] [ebp-2Ch]
  int v20; // [esp+118h] [ebp-28h]
  int v21; // [esp+11Ch] [ebp-24h]
  unsigned __int8 v22; // [esp+120h] [ebp-20h]
  unsigned __int8 v23; // [esp+124h] [ebp-1Ch]
  unsigned __int8 v24; // [esp+128h] [ebp-18h]
  unsigned __int8 v25; // [esp+12Ch] [ebp-14h]

  sub_5A3C0_5A8D0(1);
  v0 = 0;
  v1 = 0;
  v2 = dword_AE400_AE3F0() + 13323;
  while ( v1 < *(unsigned __int16 *)(dword_AE400_AE3F0() + 10) )
  {
    if ( *(_BYTE *)(v2 + 6) )
      ++v0;
    ++v1;
    v2 += 2049;
  }
  v3 = 640 - (v0 * *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 520) + *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 514));
  v21 = ((int)v3 - HIDWORD(v3)) >> 1;
  if ( typeResolution_12F02E_12F01E == 1 )
    v4 = 400;
  else
    v4 = 480;
  v5 = (v4 - v0 * *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 515)) / 2;
  v19 = 0;
  v14 = dword_AE400_AE3F0() + 13323;
  v16 = 0;
  v18 = (char*)(dword_AE400_AE3F0() + 14357);
  while ( 1 )
  {
    result = dword_AE400_AE3F0();
    if ( *(unsigned __int16 *)(dword_AE400_AE3F0() + 10) <= v19 )
      break;
    v6 = *(_BYTE *)(v14 + 6);
    v17 = 164 * *(unsigned __int16 *)(v14 + 10) + dword_AE400_AE3F0() + 29795;
    if ( v6 == 1 )
    {
      v23 = byte_99B58[1+v16];
      v7 = v21;
      v22 = byte_99B58[v16];
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(v21, v5, &begSprTab_AE42C_AE41C_26C42C_26C41C[85]);
      else
        DrawBitmap_60D18_61228(v21, v5, &begSprTab_AE42C_AE41C_26C42C_26C41C[85]);
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_24C20(
          v7 + 4,
          (__int16)v5 + 4,
          *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 514) - 8,
          *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 515) - 8,
          v22);
      else
        sub_24CA0(
          v7 + 4,
          (__int16)v5 + 4,
          *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 514) - 8,
          *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 515) - 8,
          v22);
      DrawText_5A180_5A690(v18, (__int16)(v7 + 8), v5 + 6, v23);
      sprintf(v13, "%d", *(_DWORD *)(v17 + 136));
      DrawText_5A180_5A690(v13, (__int16)(v7 + 8), v5 + 20, v23);
      v8 = 0;
      v9 = *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 514) + v7;
      v10 = 0;
      v15 = 0;
      v20 = v5 + 10;
      do
      {
        if ( v8 == v19 || *(_BYTE *)(v15 + dword_AE400_AE3F0() + 13329) != 1 )
        {
          if ( v8 == v19 )
          {
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              DrawBitmap_60CE0_611F0(v9, v5, &begSprTab_AE42C_AE41C_26C42C_26C41C[86]);
            else
              DrawBitmap_60D18_61228(v9, v5, &begSprTab_AE42C_AE41C_26C42C_26C41C[86]);
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              sub_24C20(
                v9 + 4,
                (__int16)v5 + 4,
                *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 520) - 8,
                *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 521) - 8,
                (unsigned __int8)&byte_AD167_AD157[1]);
            else
              sub_24CA0(
                v9 + 4,
                (__int16)v5 + 4,
                *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 520) - 8,
                *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 521) - 8,
                (unsigned __int8)&byte_AD167_AD157[1]);
          }
        }
        else
        {
          v25 = byte_99B58[1+v10];
          v24 = byte_99B58[v10];
          if ( (typeResolution_12F02E_12F01E & 1) != 0 )
            DrawBitmap_60CE0_611F0(v9, v5, &begSprTab_AE42C_AE41C_26C42C_26C41C[86]);
          else
            DrawBitmap_60D18_61228(v9, v5, &begSprTab_AE42C_AE41C_26C42C_26C41C[86]);
          if ( (typeResolution_12F02E_12F01E & 1) != 0 )
            sub_24C20(
              v9 + 4,
              (__int16)v5 + 4,
              *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 520) - 8,
              *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 521) - 8,
              v24);
          else
            sub_24CA0(
              v9 + 4,
              (__int16)v5 + 4,
              *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 520) - 8,
              *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 521) - 8,
              v24);
          sprintf(v13, "%03d", *(__int16 *)(*(_DWORD *)(v17 + 160) + v10 + 30));
          DrawText_5A180_5A690(v13, (__int16)(v9 + 8), v20, v25);
        }
        HIWORD(v11) = HIWORD(begSprTab_AE42C_AE41C_26C42C_26C41C);
        v9 += *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 520);
        v10 += 2;
        ++v8;
        v15 += 2049;
      }
      while ( v8 < 8 );
      LOWORD(v11) = *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 515);
      v5 += v11;
    }
    v16 += 2;
    ++v19;
    v18 += 2049;
    v14 += 2049;
  }
  return result;
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// AD168: using guessed type char byte_AD168;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE42C: using guessed type int begSprTab_AE42C_AE41C_26C42C_26C41C;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

void sub_22E50(Type_AE400_29795* a1x)//1F3E50_
{
  int v1; // eax
  int v2; // eax
  //int v3; // edi
  Type_AE400_29795* v4x; // ebx
  __int16 v5; // cx
  __int16 v6; // ax
  int v7; // edi
  int v8; // edx
  int v9; // eax
  //int v10; // ecx
  int v11; // edx
  int v12; // eax
  __int64 v13; // rtt
  __int16 v14; // dx
  __int16 v15; // ax
  __int16 v16; // si
  Type_AE400_29795* v17x; // ebx
  __int16 v18; // ax
  __int16 v19; // ax
  int v20; // ebx
  unsigned __int8 v21; // [esp-4h] [ebp-48h]
  int v22; // [esp+4h] [ebp-40h]
  int v23; // [esp+4h] [ebp-40h]
  int v24; // [esp+4h] [ebp-40h]
  int v25; // [esp+18h] [ebp-2Ch]
  __int16 v26; // [esp+1Ch] [ebp-28h]
  unsigned __int8 v27; // [esp+28h] [ebp-1Ch]
  unsigned __int8 v28; // [esp+2Ch] [ebp-18h]
  unsigned __int8 v29; // [esp+30h] [ebp-14h]

  v1 = a1x - str_AE400_AE3F0->str_29795;
  if ( !v1 || v1 >= 1000 )
    return;
  v2 = a1x->var_u32_29955_160->var_48;
  v29 = byte_99B58[2 * v2];
  v27 = byte_99B58[1+2 * v2];
  v28 = byte_99B58[2 * v2 + str_AE408_AE3F8->str_93.var_u8[2]];
  sub_23940(2, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[40]);
  //v3 = *(_DWORD *)(a1 + 160);
  v22 = begSprTab_AE42C_AE41C_26C42C_26C41C[40].dim.x + 2;
  v4x = &str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50];
  if ( v4x > str_AE400_AE3F0->str_29795 && v4x->var_u16_29821_26 > 0 )
  {
    if ( a1x->var_u32_29955_160->u8_391 > 0 && str_AE408_AE3F8->str_93.var_u8[1])
    {
      sub_23940(v22, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[55]);
      a1x->var_u32_29955_160->u8_391--;
    }
    else
    {
      sub_23940(v22, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[41]);
    }
    v5 = v22 + 2;
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(v5, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[(v4x->var_u16_29821_26 + 43)]);
    else
      DrawBitmap_60D18_61228(v5, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[(v4x->var_u16_29821_26 + 43)]);
    v6 = v22 + 38;
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(v6, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
    else
      DrawBitmap_60D18_61228(v6, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
    v7 = v22 + 58;
    sub_22810(v22 + 58, 10, 64, 10, (v4x->actLife_29807_12 << 6) / v4x->maxLife_29803_8, 0x7Bu);
    v8 = v4x->var_u32_29931;
    v9 = a1x->var_u32_29955_160->u32_308 + v4x->var_u32_29935_140;
    if ( v9 == v8 )
    {
      //v10 = dword_AE408_AE3F8();
      if ( str_AE408_AE3F8->str_93.var_u8[2] != 1 )
      {
        v12 = v9 << 6;
        v21 = v29;
        v11 = v12;
        goto LABEL_21;
      }
      v11 = v4x->var_u32_29931 << 6;
      v21 = v27;
    }
    else
    {
      sub_22810(v7, 28, 64, 10, (v8 << 6) / str_AE408_AE3F8->str_184.var_u32_188, v27);
      v21 = v29;
      v11 = (v4x->var_u32_29935_140 + a1x->var_u32_29955_160->u32_308) << 6;
      //v10 = dword_AE408_AE3F8();
    }
    v12 = v11;
LABEL_21:
    LODWORD(v13) = v12;
    HIDWORD(v13) = v11 >> 31;
    sub_22810(v7, 28, 64, 10, v13 / str_AE408_AE3F8->str_184.var_u32_188, v21);
    if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_24C20(v7 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 26, 2, 2, v28);
      else
        sub_24CA0(v7 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 26, 2, 2, v28);
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_24C20(v7 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 38, 2, 2, v28);
      else
        sub_24CA0(v7 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 38, 2, 2, v28);
    }
    goto LABEL_29;
  }
  sub_23940(v22, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[54]);
LABEL_29:
  v23 = begSprTab_AE42C_AE41C_26C42C_26C41C[41].dim.x + v22;
  if ( v4x <= str_AE400_AE3F0->str_29795)
  {
    sub_23940(v23, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[54]);
  }
  else
  {
    if ( a1x->var_u32_29955_160->u8_393 > 0 && str_AE408_AE3F8->str_93.var_u8[1] )
    {
      sub_23940(v23, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[55]);
      a1x->var_u32_29955_160->u8_393--;
    }
    else
    {
      sub_23940(v23, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[41]);
    }
    switch ( v4x->var_u16_29821_26 )
    {
      case 1:
      case 2:
      case 3:
        v26 = 1;
        break;
      case 4:
      case 5:
        v26 = 2;
        break;
      case 6:
      case 7:
        v26 = 3;
        break;
      default:
        v26 = 0;
        break;
    }
    if ( v26 )
    {
      v14 = v23 + 2;
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(v14, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[(v26 + 50)]);
      else
        DrawBitmap_60D18_61228(v14, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[(v26 + 50)]);
      v15 = v23 + 38;
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(v15, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
      else
        DrawBitmap_60D18_61228(v15, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
    }
    v16 = 0;
    if ( v26 > 0 )
    {
      v25 = v23 + 58;
      do
      {
        v17x = &str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_52[v16]];
        if ( v17x > str_AE400_AE3F0->str_29795)
        {
          if (v17x->actLife_29807_12 >= 0 )
            sub_22810(v25, 2 * v16 + 12, 64, 2, (v17x->actLife_29807_12 << 6) / v17x->maxLife_29803_8, 0x7Bu);
          sub_22810(v25, 2 * v16 + 30, 64, 2, (v17x->var_u32_29935_140 << 6) / v17x->var_u32_29931, v29);
        }
        v16++;
      }
      while ( v16 < v26 );
    }
  }
  v24 = begSprTab_AE42C_AE41C_26C42C_26C41C[41].dim.x + v23;
  if ( a1x->var_u32_29955_160->u8_392 > 0 && str_AE408_AE3F8->str_93.var_u8[1] )
  {
    sub_23940(v24, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[55]);
    a1x->var_u32_29955_160->u8_392--;
  }
  else
  {
    sub_23940(v24, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[41]);
  }
  if ((a1x->var_29811_16.byte[0] & 0x30) != 0 || a1x->var_u32_29955_160->u16_331 && str_AE408_AE3F8->str_93.var_u8[1] )
  {
    sub_23940(v24 + 2, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[43]);
    sub_23940(v24 + 38, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
  }
  else
  {
    v18 = v24 + 2;
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(v18, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[43]);
    else
      DrawBitmap_60D18_61228(v18, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[43]);
    v19 = v24 + 38;
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(v19, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
    else
      DrawBitmap_60D18_61228(v19, 2, &begSprTab_AE42C_AE41C_26C42C_26C41C[42]);
  }
  v20 = v24 + 58;
  sub_22810(v24 + 58, 10, 64, 10, (a1x->actLife_29807_12 << 6) / a1x->maxLife_29803_8, 0x7Bu);
  sub_22810(v24 + 58, 28, 64, 10, (a1x->var_u32_29931 << 6) / str_AE408_AE3F8->str_184.var_u32_188, v27);
  sub_22810(v24 + 58, 28, 64, 10, (a1x->var_u32_29935_140 << 6) / str_AE408_AE3F8->str_184.var_u32_188, v29);
  if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_24C20(v20 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 26, 2, 2, v28);
    else
      sub_24CA0(v20 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 26, 2, 2, v28);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_24C20(v20 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 38, 2, 2, v28);
    else
      sub_24CA0(v20 + (str_AE400_AE3F0->str_193795.var_u16_232595_38800 << 6) / 100, 38, 2, 2, v28);
  }
}

//----- (00023940) --------------------------------------------------------
void sub_23940(__int16 a1, __int16 a2, TypeTab* a3x)
{
  int v3; // eax
  int v4; // edx
  uint8* v5; // edx
  _BYTE *v6; // edi
  _BYTE *v7; // ebp
  _BOOL1 v8; // zf
  int v9; // ebx
  uint8* v10; // esi
  int v11; // ecx
  int v12; // ebp
  uint8* v13; // edx
  char v14; // bl
  uint8* v15; // esi
  _BYTE *v16; // edi
  int v17; // ecx
  __int16 v19; // [esp+0h] [ebp-18h]
  int v20; // [esp+4h] [ebp-14h]

  LOBYTE(v3) = a2;
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    if ( a1 >= 0 && a2 >= 0 && a1 + a3x->dim.x <= 640 )
    {
      v4 = a3x->dim.y;
      v3 = v4 + a2;
      if ( v3 <= 400 )
      {
        v20 = v4 / 2;
        v5 = a3x->Tab_0;
        v6 = (_BYTE *)(a2 / 2 * scrWidth_12EFF0_12EFE0 + a1 / 2 + begWscreen_2ECFF4_2ECFE4);
        LOBYTE(v3) = v20;
        v7 = v6;
        v8 = (_WORD)v20 == 0;
        while ( 1 )
        {
          if ( v8 )
            return;
          LOBYTE(v3) = *v5++;
          if ( !(_BYTE)v3 )
            break;
          if ( (v3 & 0x80u) == 0 )
          {
            v9 = (char)v3;
            v10 = v5;
            v11 = (char)v3;
            HIWORD(v3) = 0;
            do
            {
              LOBYTE(v3) = *v10++;
              BYTE1(v3) = *v6;
              LOBYTE(v3) = strPal.byte_BB934_BB924[v3];
              *v6++ = v3;
              --v11;
            }
            while ( v11 );
            v5 += v9;
LABEL_15:
            v8 = (_WORD)v20 == 0;
          }
          else
          {
            v6 -= (char)v3;
            v8 = (_WORD)v20 == 0;
          }
        }
        v7 += scrWidth_12EFF0_12EFE0;
        LOBYTE(v3) = v20 - 1;
        v6 = v7;
        LOWORD(v20) = v20 - 1;
        goto LABEL_15;
      }
    }
  }
  else if ( a1 >= 0 && a2 >= 0 && a1 + a3x->dim.x <= 640 )
  {
    LOBYTE(v3) = a2;
    if ( a2 + a3x->dim.y <= 480 )
    {
      v3 = (int)begWscreen_2ECFF4_2ECFE4 + a1 + scrWidth_12EFF0_12EFE0 * a2;
      v19 = a3x->dim.y;
      v12 = v3;
      v13 = a3x->Tab_0;
      if (a3x->dim.y)
      {
        do
        {
          v14 = *v13++;
          if ( v14 )
          {
            if ( v14 >= 0 )
            {
              v15 = v13;
              v16 = (_BYTE *)v3;
              v17 = v14;
              HIWORD(v3) = 0;
              do
              {
                LOBYTE(v3) = *v15++;
                BYTE1(v3) = *v16;
                *v16++ = strPal.byte_BB934_BB924[v3];
                --v17;
              }
              while ( v17 );
              v13 += v14;
              v3 = (int)v16;
            }
            else
            {
              v3 -= v14;
            }
          }
          else
          {
            v12 += scrWidth_12EFF0_12EFE0;
            v3 = v12;
            --v19;
          }
        }
        while ( v19 );
      }
    }
  }
}
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00023AE0) --------------------------------------------------------
void sub_23AE0(__int16 a1, __int16 a2, TypeTab* a3x, unsigned __int8 a4)
{
  int v4; // eax
  _BYTE *v5; // edi
  uint8* v6; // edx
  _BOOL1 v7; // zf
  int v8; // ebp
  int v9; // ebx
  int v10; // ecx
  uint8* v11; // edx
  char v12; // bl
  _BYTE *v13; // edi
  int v14; // ecx
  int v15; // ebx
  int v17; // [esp+0h] [ebp-20h]
  _BYTE *v18; // [esp+4h] [ebp-1Ch]
  int v19; // [esp+8h] [ebp-18h]
  __int16 v20; // [esp+Ch] [ebp-14h]

  if ( typeResolution_12F02E_12F01E == 1 )
  {
    v19 = a3x->dim.y >> 1;
    //LOBYTE(v4) = (int)begWscreen_2ECFF4_2ECFE4;
    v5 = &begWscreen_2ECFF4_2ECFE4[a1 / 2 + a2 / 2 * scrWidth_12EFF0_12EFE0];
    v6 = a3x->Tab_0;
    v18 = v5;
    v7 = (_WORD)v19 == 0;
    while ( 1 )
    {
      if ( v7 )
        return;
      LOBYTE(v4) = *v6++;
      if ( !(_BYTE)v4 )
        break;
      if ( (v4 & 0x80u) == 0 )
      {
        v8 = (char)v4;
        v9 = a4;
        v10 = (char)v4;
        do
        {
          BYTE1(v9) = *v5;
          LOBYTE(v4) = strPal.byte_BB934_BB924[v9];
          *v5++ = v4;
          --v10;
        }
        while ( v10 );
        v6 += v8;
LABEL_11:
        v7 = (_WORD)v19 == 0;
      }
      else
      {
        v5 -= (char)v4;
        v7 = (_WORD)v19 == 0;
      }
    }
    //LOBYTE(v4) = pitch_12EFF0_12EFE0;
    v18 += scrWidth_12EFF0_12EFE0;
    v5 = v18;
    LOWORD(v19) = v19 - 1;
    goto LABEL_11;
  }
  v20 = a3x->dim.y;
  //v4 = pitch_12EFF0_12EFE0 * a2 + a1 + (int)begWscreen_2ECFF4_2ECFE4;
  v11 = a3x->Tab_0;
  v17 = scrWidth_12EFF0_12EFE0 * a2 + a1 + (int)begWscreen_2ECFF4_2ECFE4;
  if (a3x->dim.y)
  {
    do
    {
      v12 = *v11++;
      if ( v12 )
      {
        if ( v12 >= 0 )
        {
          v13 = (_BYTE *)v4;
          v14 = v12;
          v15 = a4;
          v11 += v14;
          do
          {
            BYTE1(v15) = *v13;
            *v13++ = strPal.byte_BB934_BB924[v15];
            --v14;
          }
          while ( v14 );
          v4 = (int)v13;
        }
        else
        {
          v4 -= v12;
        }
      }
      else
      {
        v17 += scrWidth_12EFF0_12EFE0;
        v4 = v17;
        --v20;
      }
    }
    while ( v20 );
  }
}
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00023CF0) --------------------------------------------------------
void sub_23CF0(__int16 a1, __int16 a2, int a3)
{
  sub_23940(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[3]);
  sub_23AE0(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[a3 + 6], 0xA6u);
}
// AE42C: using guessed type int begSprTab_AE42C_AE41C_26C42C_26C41C;

//----- (00023D40) --------------------------------------------------------
void sub_23D40(int a1, int a2, Type_AE400_29795* a3x, char a4)
{
  int v4; // eax
  unsigned int v5; // ebx
  int v6; // eax
  __int16 v7; // dx
  TypeTab* v8; // eax
  int v9; // edx
  int v10; // edi
  char v11; // dl
  unsigned __int16 v12; // bx
  int v13; // esi
  int v14; // ebx
  int v15; // edx
  int v16; // esi
  int v17; // edi
  int v18; // esi
  unsigned __int16 v19; // cx
  unsigned int v21; // [esp+8h] [ebp-28h]
  int v22; // [esp+Ch] [ebp-24h]
  __int16 v23; // [esp+10h] [ebp-20h]
  unsigned __int16 v24; // [esp+14h] [ebp-1Ch]
  unsigned __int8 v25; // [esp+18h] [ebp-18h]
  unsigned __int8 v26; // [esp+1Ch] [ebp-14h]

  LOBYTE(v4) = dword_AE400_AE3F0() + 99;
  if ( a3x > str_AE400_AE3F0->str_29795 )
  {
    sub_5A3C0_5A8D0(1);
    LOBYTE(v4) = dword_AE400_AE3F0() + 99;
    v5 = dword_AE400_AE3F0() + 29795 + 164 * a3x->var_u16_29837_42;
    v21 = v5;
    if ( dword_AE400_AE3F0() + 29795 < v5 )
    {
      v6 = *(__int16 *)(*(_DWORD *)(v5 + 160) + 48);
      v25 = byte_99B58[2 * v6];
      v26 = byte_99B58[1+2 * v6];
      v7 = a3x->var_48;
      if ( v7 >= 64 || !v7 || a3x->var_50 <= 64 || (LOBYTE(v4) = dword_AE408_AE3F8(), !str_AE408_AE3F8->str_93.var_u8[1]) )
      {
        if ( a4 )
        {
          if (a3x->var_48)
          {
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              DrawBitmap_60CE0_611F0(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[2]);
            else
              DrawBitmap_60D18_61228(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[2]);
          }
          else if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          {
            DrawBitmap_60CE0_611F0(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[1]);
          }
          else
          {
            DrawBitmap_60D18_61228(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[1]);
          }
        }
        else
        {
          if (a3x->var_48)
            v8 = &begSprTab_AE42C_AE41C_26C42C_26C41C[2];
          else
            v8 = &begSprTab_AE42C_AE41C_26C42C_26C41C[1];
          sub_23940(a1, a2, v8);
        }
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          DrawBitmap_60CE0_611F0(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[a3x->var_u8_29860_65 + 6]);
        else
          DrawBitmap_60D18_61228(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[a3x->var_u8_29860_65 + 6]);
        v9 = 56 * (*(_DWORD *)(v5 + 140) % a3x->var_u32_29931);
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          sub_24C20(a1 + 4, a2 + 36, v9 / a3x->var_u32_29931, 4, v26);
        else
          sub_24CA0(a1 + 4, a2 + 36, v9 / a3x->var_u32_29931, 4, v26);
        v22 = 0;
        v10 = *(_DWORD *)(v5 + 140) / a3x->var_u32_29931;
        v23 = 4;
        do
        {
          if ( !v10 )
            break;
          v13 = 0;
          v12 = a2 + 36;
          v24 = v23 + a1;
          do
          {
            if ( !v10 )
              break;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              sub_61594(v24, v12, v25);
            else
              sub_615D4(v24, v12, v25);
            v12 += 2;
            ++v13;
            --v10;
          }
          while ( v13 < 2 );
          v23 += 2;
          ++v22;
        }
        while ( v22 < 27 );
        if (a3x->var_u8_29857_62)
        {
          v11 = a3x->var_u8_29856_61;
          if ( v11 > 0 )
          {
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              sub_24C20(a1 + 4, a2 + 36, 55 * v11 / a3x->var_u8_29857_62, 4, (unsigned __int8)byte_AD167_AD157[241]);
            else
              sub_24CA0(a1 + 4, a2 + 36, 55 * v11 / a3x->var_u8_29857_62, 4, (unsigned __int8)byte_AD167_AD157[241]);
          }
        }
        v14 = *(_DWORD *)(v21 + 160);
        if ( *(_BYTE *)(dword_AE400_AE3F0() + 2049 * *(__int16 *)(v14 + 48) + 14421)
          || (v4 = a3x->var_u8_29860_65, *(char *)(v14 + v4 + 844) > 0) )
        {
          v15 = a3x->var_u8_29860_65 + *(_DWORD *)(v21 + 160);
          --*(_BYTE *)(v15 + 844);
          v4 = 0;
          v16 = *(_DWORD *)(v21 + 160);
          while ( 1 )
          {
            v17 = *(char *)(v16 + 772);
            //str_AE400_AE3F0->str_29795[*(_DWORD*)(*(_DWORD*)(v21 + 160) + 4 * v17 + 532)]
            if ( v17 != -1 && &str_AE400_AE3F0->str_29795[*(_DWORD*)(*(_DWORD*)(v21 + 160) + 4 * v17 + 532)] == a3x )
              break;
            ++v4;
            ++v16;
            if ( v4 >= 10 )
              goto LABEL_48;
          }
          sub_23AE0(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[v4 + 30], (unsigned char)byte_AD167_AD157[1]);
        }
LABEL_48:
        v18 = a3x->var_u16_29927_132;
        if ( v18 )
        {
          v19 = *(_WORD *)(*(_DWORD *)(v21 + 160) + 50);
          if ( !v19 || (v18 > *(_DWORD *)(164 * v19 + dword_AE400_AE3F0() + 29935)) )
            sub_247C0(
                           (__int16)a1,
                           (__int16)a1,
                           a2,
                           *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 10),
                           *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 11),
                           0x30u);
        }
      }
    }
  }
}
// AD168: using guessed type char byte_AD168;
// AD258: using guessed type char byte_AD258;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE42C: using guessed type int begSprTab_AE42C_AE41C_26C42C_26C41C;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00024230) --------------------------------------------------------
void sub_24230(__int16 a1, __int16 a2, unsigned int a3, char a4)
{
  TypeTab* v4; // eax
  unsigned int v5; // ebp
  __int16 v6; // dx
  TypeTab* v7; // eax
  int v8; // edx
  int v9; // edx
  int v10; // edx
  int v11; // ebx
  int v12; // eax

  LOBYTE(v4) = dword_AE400_AE3F0() + 99;
  if ( a3 > dword_AE400_AE3F0() + 29795 )
  {
    sub_5A3C0_5A8D0(1);
    LOBYTE(v4) = dword_AE400_AE3F0() + 99;
    v5 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a3 + 42);
    if ( v5 > dword_AE400_AE3F0() + 29795 )
    {
      v6 = *(_WORD *)(a3 + 48);
      if ( v6 >= 64 || !v6 || *(__int16 *)(a3 + 50) <= 64 || (LOBYTE(v4) = dword_AE408_AE3F8(), !str_AE408_AE3F8->str_93.var_u8[1]) )
      {
        if ( a4 )
        {
          if ( *(_WORD *)(a3 + 48) )
          {
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              DrawBitmap_60CE0_611F0(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[4]);
            else
              DrawBitmap_60D18_61228(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[4]);
          }
          else if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          {
            DrawBitmap_60CE0_611F0(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[3]);
          }
          else
          {
            DrawBitmap_60D18_61228(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[3]);
          }
        }
        else
        {
          if ( *(_WORD *)(a3 + 48) )
            v7 = &begSprTab_AE42C_AE41C_26C42C_26C41C[4];
          else
            v7 = &begSprTab_AE42C_AE41C_26C42C_26C41C[3];
          sub_23940(a1, a2, v7);
        }
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          DrawBitmap_60CE0_611F0(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[(*(char *)(a3 + 65) + 6)]);
        else
          DrawBitmap_60D18_61228(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[(*(char *)(a3 + 65) + 6)]);
        v8 = *(_DWORD *)(v5 + 160);
        if ( *(_BYTE *)(dword_AE400_AE3F0() + 2049 * *(__int16 *)(v8 + 48) + 14421)
          || (*(char *)(v8 + *(char*)(a3 + 65) + 844) > 0) )
        {
          v9 = *(_DWORD *)(v5 + 160) + *(char *)(a3 + 65);
          --*(_BYTE *)(v9 + 844);
          int v4x = 0;
          v10 = *(_DWORD *)(v5 + 160);
          while ( 1 )
          {
            v11 = *(char *)(v10 + 772);
            if ( v11 != -1 && 164 * *(_DWORD *)(*(_DWORD *)(v5 + 160) + 4 * v11 + 532) + dword_AE400_AE3F0() + 29795 == a3 )
              break;
            ++v4x;
            ++v10;
            if ( v4x >= 10 )
              goto LABEL_29;
          }
          sub_23AE0(a1, a2, &begSprTab_AE42C_AE41C_26C42C_26C41C[v4x + 30], (unsigned char)byte_AD167_AD157[1]);
        }
LABEL_29:
        if ( *(_DWORD *)(a3 + 132) )
        {
          v12 = *(_DWORD *)(v5 + 160);
          if ( !*(_WORD *)(v12 + 50)
            || (*(_DWORD *)(a3 + 132) > *(_DWORD *)(dword_AE400_AE3F0() + 4 * (41 * *(unsigned __int16*)(v12 + 50)) + 29935)) )
          {
            sub_247C0(
                           a1,
                           a1,
                           a2,
                           *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 22),
                           *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 23),
                           0x30u);
          }
        }
      }
    }
  }
}
// AD168: using guessed type char byte_AD168;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE42C: using guessed type int begSprTab_AE42C_AE41C_26C42C_26C41C;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (000247C0) --------------------------------------------------------
void sub_247C0(int result, int a2, __int16 a3, __int16 a4, int a5, unsigned __int8 a6)
{
  int v6; // edi
  int v7; // eax
  __int16 i; // si
  _BYTE *v9; // edx

  v6 = a2;
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    HIWORD(v7) = HIWORD(a2);
    LOWORD(v7) = (__int16)a2 / 2;
    v6 = v7;
    a3 /= 2;
    a4 /= 2;
    HIWORD(result) = HIWORD(a5);
    LOWORD(result) = (__int16)a5 / 2;
    LOWORD(a5) = (__int16)a5 / 2;
  }
  for ( i = a3; i < (__int16)a5 + a3; ++i )
  {
    for ( result = v6; (__int16)result < a4 + (__int16)v6; ++result )
    {
      v9 = (_BYTE *)(begWscreen_2ECFF4_2ECFE4 + scrWidth_12EFF0_12EFE0 * i + (__int16)result);
      *v9 = strPal.fog_B7934_B7924[256 * a6 + (unsigned __int8)*v9];
    }
  }
}
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00024AB0) --------------------------------------------------------
void sub_24AB0()//1F5AB0_
{
  if ( !byte_9009E )
  {
    byte_9009E = 1;
    byte_90091 = 1;
    sub_40440_40780(&pathStrArray_F1EF0[PSF1datascreenssfont1dat]);
    sub_51360(10, 180, 300, 50);
    sub_51480_517C0(&byte_AE460, &sFont1Tab_271288, begPalDat_AE428_AE418_26C428_26C418);
    byte_AE460.var8_6 = sub_5CC70_5D180(begPalDat_AE428_AE418_26C428_26C418, 0x3Fu, 0x3Fu, 0x3Fu);
    word_B329C = 19200;
    dword_B3294 = (int)begWscreen_2ECFF4_2ECFE4 + 57600;
    sub_24B80();
  }
}
// 90091: using guessed type char byte_90091;
// 9009E: using guessed type char byte_9009E;
// AE428: using guessed type int begPalDat_AE428_AE418_26C428_26C418;
// AE460: using guessed type _BYTE byte_AE460[6];
// AE466: using guessed type char byte_AE466;
// B3288: using guessed type _DWORD dword_B3288;
// B3294: using guessed type int dword_B3294;
// B329C: using guessed type __int16 word_B329C;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (00024B50) --------------------------------------------------------
void sub_24B50(char* a1)
{
  if ( byte_9009E )
  {
    sub_24B80();
    DrawText_51560((uint8*)&byte_AE460, 0, 0, a1);
    dword_900A0 = a1;
  }
}
// 9009E: using guessed type char byte_9009E;
// 900A0: using guessed type int dword_900A0;
// AE460: using guessed type _BYTE byte_AE460[6];

//----- (00024B80) --------------------------------------------------------
int sub_24B80()
{
  int result; // eax

  //fix
  result = 0;
  //fix

  if ( byte_9009E )
    return (uint32)memset((void*)dword_B3294, 0, (unsigned __int16)word_B329C);
  return result;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 9009E: using guessed type char byte_9009E;
// B3294: using guessed type int dword_B3294;
// B329C: using guessed type __int16 word_B329C;

//----- (00024BB0) --------------------------------------------------------
void sub_24BB0()
{
  if ( byte_9009E )
  {
    sub_24B80();
    sub_61610_61B20(&pathStrArray_21AB80_21AEC0[PSdatascreenssfont1dat]);
    byte_90091 = 0;
    byte_9009E = 0;
    dword_900A0 = 0;
  }
}
// 90091: using guessed type char byte_90091;
// 9009E: using guessed type char byte_9009E;
// 900A0: using guessed type int dword_900A0;

//----- (00024BF0) --------------------------------------------------------
void sub_24BF0(unsigned __int8 a1)
{
  if ( byte_9009E )
  {
    byte_AE460.var8_6 = a1;
    if ( dword_900A0 )
      sub_24B50(dword_900A0);
  }
}
// 9009E: using guessed type char byte_9009E;
// 900A0: using guessed type int dword_900A0;
// AE466: using guessed type char byte_AE466;

//----- (00024C20) --------------------------------------------------------
void sub_24C20(int a1, int a2, int a3, int a4, unsigned __int16 a5)
{
  if ( a3 >= 2
    && a4 >= 2
    && a1 >= 0
    && a1 + a3 < 640
    && (a1 + a3 >= 0 || a1 < 640)
    && a2 >= 0
    && a2 + a4 < 400
    && (a2 + a4 >= 0 || a2 < 400) )
  {
    sub_61640(a1, a2, a3, a4, a5);
  }
}

//----- (00024CA0) --------------------------------------------------------
void sub_24CA0(int a1, int a2, int a3, int a4, unsigned __int16 a5)
{
  if ( a3 >= 2
    && a4 >= 2
    && a1 >= 0
    && a1 + a3 < 640
    && (a1 + a3 >= 0 || a1 < 640)
    && a2 >= 0
    && a2 + a4 < 480
    && (a2 + a4 >= 0 || a2 < 480) )
  {
    sub_616C0(a1, a2, a3, a4, a5);
  }
}

//----- (00024D20) --------------------------------------------------------
void sub_24D20(int a1, int a2, int a3, int a4, unsigned __int16 a5)
{
  if ( a3 >= 2
    && a4 >= 2
    && a1 >= 0
    && a1 + a3 < 640
    && (a1 + a3 >= 0 || a1 < 640)
    && a2 >= 0
    && a2 + a4 < 400
    && (a2 + a4 >= 0 || a2 < 400) )
  {
    sub_61740(a1, a2, a3, a4, a5);
  }
}

//----- (00024DA0) --------------------------------------------------------
void sub_24DA0(int a1, int a2, int a3, int a4, unsigned __int16 a5)
{
  if ( a3 >= 2
    && a4 >= 2
    && a1 >= 0
    && a1 + a3 < 640
    && (a1 + a3 >= 0 || a1 < 640)
    && a2 >= 0
    && a2 + a4 < 480
    && (a2 + a4 >= 0 || a2 < 480) )
  {
    sub_61810(a1, a2, a3, a4, a5);
  }
}

//----- (00024F60) --------------------------------------------------------
void sub_24F60(Type_AE400_29795* a1x)
{
  int v1; // eax
  char v2; // dl
  int v3; // esi
  char v4; // cl
  char v5; // ch
  unsigned int v6; // eax
  unsigned int v7; // eax
  __int16 v8; // dx
  Type_AE400_29795* v9x; // eax
  unsigned __int16 v10; // [esp+0h] [ebp-Ch]

  if ( (a1x->var_u16_29821_26 & 3) != 0 )
  {
      a1x->var_u16_29821_26--;
  }
  else
  {
    v1 = a1x->actLife_29807_12;
    a1x->actLife_29807_12 = v1 - 1;
    if ( v1 >= 0 )
    {
      v2 = a1x->var_29811_16.byte[0] & 0xFE;
      a1x->var_29811_16.byte[0] = v2;
      v3 = (__int16)sub_11F50(&a1x->var_u32_29867_72);
      if ( (a1x->var_29811_16.byte[0] & 2) == 0 )
      {
        LOBYTE(v10) = (unsigned __int16)(a1x->var_u32_29867_72.x + 128) >> 8;
        v4 = a1x->var_29811_16.byte[2];
        HIBYTE(v10) = (unsigned __int16)(a1x->var_u32_29867_72.y + 128) >> 8;
        if ( (v4 & 1) == 0 )
          sub_120B0(a1x, 0, a1x->var_u16_29839_44);
        v5 = mapTerrainType_CC1E0_CC1D0[v10];
        if ( v5 )
        {
          switch ( v5 )
          {
            case 26:
              sub_33800_33BF0(v2, v4, v10, 0x14u);
              break;
            case 10:
              sub_33800_33BF0(v2, v4, v10, 0x15u);
              break;
            case 11:
              sub_33800_33BF0(v2, v4, v10, 0x16u);
              break;
            default:
              if ( ((unsigned __int8)v5 < 6u || (unsigned __int8)v5 > 0x22u)
                && (mapAngle_FC1E0_FC1D0[v10] & 7) != 1
                && a1x->var_u32_29867_72.z - v3 <= 128
                && (sub_11760(&a1x->var_u32_29867_72) & 1) == 0 )
              {
                v6 = 9377 * a1x->rand_29799_4 + 9439;
                a1x->rand_29799_4 = v6;
                sub_40D30(a1x, 0, 0, 0-(v6 % 7), 1);
              }
              break;
          }
        }
        v7 = 9377 * a1x->rand_29799_4;
        a1x->var_29811_16.byte[0] |= 2u;
        v7 += 9439;
        a1x->rand_29799_4 = v7;
        v8 = v7 % 0x41;
        v9x = str_AE400_AE3F0->str_29795;
        a1x->var_u16_29841_46 = v8 - 32;
        sub_55370_558A0(a1x - v9x, -1, 3);
      }
      sub_42000(&a1x->var_u32_29867_72, v3, 0, 0, a1x->var_u16_29841_46);
      sub_42510(a1x);
    }
    else
    {
      sub_41E80(a1x);
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00025130) --------------------------------------------------------
void sub_25130(int a1)
{
  int v1; // eax
  int result; // eax
  char v3; // ah
  int v4; // esi
  unsigned int v5; // eax
  unsigned int v6; // eax
  unsigned int v7; // eax
  int v8; // eax
  unsigned int v9; // edx
  __int16 v10[4]; // [esp+0h] [ebp-1Ch] BYREF
  int v11; // [esp+8h] [ebp-14h] BYREF
  int v12[4]; // [esp+Ch] [ebp-10h] BYREF

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if (v1 < 0)
  {
      sub_41E80((Type_AE400_29795*)a1);
      return;
  }
  v3 = *(_BYTE *)(a1 + 16);
  if ( (v3 & 2) == 0 )
  {
    *(_BYTE *)(a1 + 16) = v3 | 2;
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 3);
  }
  result = sub_11410(*(__int16 *)(a1 + 26), *(__int16 *)(a1 + 26));
  v4 = result;
  if ( result )
  {
    while ( sub_114B0(v4, (uint32*)v12, (uint32*)&v11) == 1 )
    {
      v5 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v5;
      if ( (int)(2 * (v5 % 0x9D / 79i64) - 1) > 0 )
      {
        v6 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v6;
        v10[0] = *(_WORD *)(a1 + 72) - 96 + 192 * LOWORD(v12[0]) + v6 % 0x81 - 64;
        v7 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v7;
        v10[1] = *(_WORD *)(a1 + 74) - 96 + 192 * v11 + v7 % 0x81 - 64;
        v10[2] = *(_WORD *)(a1 + 76);
        v8 = (int)sub_373F0((axis_3d*)v10, 10, 0);
        if ( v8 )
        {
          *(_WORD *)(v8 + 24) = *(_WORD *)(a1 + 24);
          *(_WORD *)(v8 + 30) = *(_WORD *)(a1 + 30);
          v9 = 0x10000 & *(_DWORD *)(a1 + 16);
          LOBYTE(v9) = v9 | 0x80;
          *(_DWORD *)(v8 + 16) |= v9;
        }
      }
    }
    sub_11490(v4);
  }
}
// 10000: using guessed type void sub_10000();
// AE400: using guessed type int dword_AE400_AE3F0();
// 25130: using guessed type int var_10[4];

//----- (000252B0) --------------------------------------------------------
void sub_252B0(int a1)
{
  int result; // eax

  result = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = result - 1;
  if ( result < 0 )
    sub_41E80((Type_AE400_29795*)a1);
}

//----- (000252D0) --------------------------------------------------------
int sub_252D0(int a1)
{
  int v1; // eax
  __int16 v2; // cx
  __int16 v3; // si
  char v4; // ah
  unsigned int v5; // eax
  int v6; // eax
  __int16 v7; // dx
  __int16 v8; // di
  int result; // eax

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( v1 < 0 )
    goto LABEL_11;
  sub_44C10(a1);
  if ( *(int *)(a1 + 12) < 12 )
  {
    if ( *(__int16 *)(a1 + 26) > 0 )
    {
      v3 = *(_WORD *)(a1 + 26);
      --*(_WORD *)(a1 + 86);
      v4 = *(_BYTE *)(a1 + 16);
      *(_WORD *)(a1 + 26) = v3 - 1;
      if ( v4 >= 0 )
      {
        v5 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v5;
        if ( !(v5 % 7) )
        {
          v6 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 13);
          if ( v6 )
          {
            v7 = *(_WORD *)(a1 + 24);
            *(_WORD *)(v6 + 26) = 100;
            v8 = *(_WORD *)(v6 + 86);
            *(_DWORD *)(v6 + 12) = 15;
            *(_WORD *)(v6 + 24) = v7;
            *(_WORD *)(v6 + 86) = v8 + 2;
          }
        }
      }
    }
  }
  else if ( *(__int16 *)(a1 + 26) <= 6 )
  {
    v2 = *(_WORD *)(a1 + 26) + 1;
    ++*(_WORD *)(a1 + 86);
    *(_WORD *)(a1 + 26) = v2;
  }
  *(_WORD *)(a1 + 76) = *(_WORD *)(a1 + 46) + sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  result = sub_11810((axis_3d*)(__int16 *)(a1 + 72));
  if ( result == 1 )
LABEL_11:
    sub_41E80((Type_AE400_29795*)a1);
  if ( (*(_BYTE *)(a1 + 18) & 1) == 0 )
    return sub_124F0(a1, 0, *(_WORD *)(a1 + 44));
  return result;
}

//----- (000253E0) --------------------------------------------------------
void sub_253E0(int a1)
{
  sub_41E80((Type_AE400_29795*)a1);
}

//----- (000253F0) --------------------------------------------------------
void sub_253F0(int a1)
{
  int result; // eax

  result = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = result - 1;
  if ( result < 0 )
    sub_41E80((Type_AE400_29795*)a1);
}

//----- (00025410) --------------------------------------------------------
void sub_25410(Type_AE400_29795* a1x)
{
  int v1; // edx
  int v2; // eax

  v1 = a1x->actLife_29807_12;
  a1x->actLife_29807_12 = v1 - 1;
  if ( v1 >= 0 )
  {
    sub_42510(a1x);
    if ( (a1x->var_29811_16.byte[0] & 2) == 0 )
    {
      v2 = dword_AE400_AE3F0() + 29795;
      a1x->var_29811_16.byte[0] |= 2u;
      sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 27);
    }
  }
  else
  {
    sub_41E80(a1x);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00025470) --------------------------------------------------------
void sub_25470(Type_AE400_29795* a1x)
{
  int v1; // eax
  unsigned int v2; // eax
  int v3; // eax

  v1 = a1x->actLife_29807_12;
  a1x->var_u16_29821_26++;
  a1x->actLife_29807_12 = v1 - 1;
  if ( v1 < 0
    || (v2 = 9377 * a1x->rand_29799_4 + 9439,
        a1x->rand_29799_4 = v2,
        (unsigned __int8)sub_40D30(a1x, 0, a1x->var_u16_29821_26 / 6, v2 % 9, 0)) )
  {
    sub_40D30(a1x, 0, 0, -40, 0);
    word_AE454_AE444 = a1x->var_u32_29867_72;
    //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = sub_11F50(&word_AE454_AE444);
    v3 = (int)sub_373F0(&word_AE454_AE444, 10, 18);
    if ( v3 )
      *(_WORD *)(v3 + 24) = a1x->id_29819_24;
    sub_41E80(a1x);
  }
  else
  {
    sub_127E0(a1x, 0, a1x->var_u16_29839_44);
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 10);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00025570) --------------------------------------------------------
void sub_25570(Type_AE400_29795* a1x)
{
  unsigned int v1; // eax

  if ( (sub_11760(&a1x->var_u32_29867_72) & 1) == 0 )
  {
    v1 = 9377 * a1x->rand_29799_4 + 9439;
    a1x->rand_29799_4 = v1;
    sub_40D30(a1x,
      0,
      (int)(a1x->var_u16_29873_78.var_u16_29875_80
          - (__CFSHL__((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32, 8)
           + ((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32 << 8))) >> 8,
      0-(v1 % 7),
      1);
  }
  sub_41E80(a1x);
}

//----- (000255D0) --------------------------------------------------------
void sub_255D0(Type_AE400_29795* a1x, __int16 a2, __int16 a3)
{
  int v3; // ebx
  int v4; // edi
  int v5; // esi
  int result; // eax
  int v7; // ebx
  int v8; // [esp+0h] [ebp-14h] BYREF
  int v9[4]; // [esp+4h] [ebp-10h] BYREF

  LOWORD(v3) = a3;
  v4 = (a1x->var_u32_29867_72.x + 128) >> 8;
  v5 = (a1x->var_u32_29867_72.y + 128) >> 8;
  if ( a3 > (int)(a1x->var_u16_29873_78.var_u16_29875_80 - (__CFSHL__((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32, 8) + ((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32 << 8))) >> 8 )
    v3 = (int)(a1x->var_u16_29873_78.var_u16_29875_80 - (__CFSHL__((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32, 8) + ((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32 << 8))) >> 8;
  result = sub_11410(a2, (__int16)v3);
  v7 = result;
  if ( result )
  {
    while ( sub_114B0(v7, (uint32*)v9, (uint32*)&v8) == 1 )
      sub_40A10(v4 + LOWORD(v9[0]), v5 + v8, -3, 0);
    sub_11490(v7);
  }
}
// 255D0: using guessed type int var_10[4];

//----- (00025670) --------------------------------------------------------
void sub_25670(Type_AE400_29795* a1x)
{
  int v1; // eax
  int v2; // eax
  int v3; // esi
  __int16 v4; // [esp-8h] [ebp-10h]

  if ( !(a1x->var_u8_29858_63 % 3) )
      a1x->var_u16_29821_26++;
  v1 = a1x->actLife_29807_12;
  a1x->actLife_29807_12 = v1 - 1;
  if ( v1 < 0 || (sub_11760(&a1x->var_u32_29867_72) & 1) != 0 )
  {
    sub_41E80(a1x);
  }
  else
  {
    if ( (a1x->var_29811_16.byte[0] & 2) != 0 )
      v2 = a1x->var_u16_29839_44 / 25;
    else
      LOWORD(v2) = a1x->var_u16_29839_44;
    sub_127E0(a1x, 0, v2);
    LOWORD(v3) = a1x->var_u16_29821_26;
    if ( (__int16)v3 > ((int)(a1x->var_u16_29873_78.var_u16_29875_80
                            - (__CFSHL__((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32, 8)
                             + ((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32 << 8))) >> 8)
                     - 1 )
    {
      v3 = ((int)(a1x->var_u16_29873_78.var_u16_29875_80
                - (__CFSHL__((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32, 8)
                 + ((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32 << 8))) >> 8)
         - 1;
      if ( (a1x->var_29811_16.byte[0] & 2) == 0 )
      {
        v4 = (int)(a1x->var_u16_29873_78.var_u16_29875_80
                 - (__CFSHL__((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32, 8)
                  + ((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32 << 8))) >> 8;
        sub_255D0(a1x, v4, v4);
      }
    }
    a1x->var_29811_16.byte[0] |= 2u;
    sub_255D0(a1x, 0, v3);
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 10);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00025760) --------------------------------------------------------
void sub_25760(Type_AE400_29795* a1x)
{
  int v1; // eax

  v1 = a1x->actLife_29807_12;
  a1x->var_u16_29821_26++;
  a1x->actLife_29807_12 = v1 - 1;
  if (v1 < 0)
  {
      sub_41E80(a1x);
      return;
  }
  sub_42510(a1x);
  sub_120B0(a1x, 1u, a1x->var_u16_29839_44);
}

//----- (000257B0) --------------------------------------------------------
int sub_257B0(int a1)
{
  int v1; // eax
  __int16 v3; // dx
  __int16 v4; // ax
  __int16 v5; // ax
  __int16 v6; // si
  __int16 v7; // ax

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if (v1 < 0)
  {
      sub_41E80((Type_AE400_29795*)a1);
  }
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  v3 = *(_WORD *)(a1 + 126) - 4;
  *(_WORD *)(a1 + 126) = v3;
  if ( v3 < 64 )
    *(_WORD *)(a1 + 126) = 64;
  if ( *(__int16 *)(a1 + 126) > 128 )
    *(_WORD *)(a1 + 126) = 128;
  word_AE454_AE444.z += *(_WORD *)(a1 + 126);
  v4 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  if ( word_AE454_AE444.z < v4 )
    word_AE454_AE444.z = v4;
  v5 = *(_WORD *)(a1 + 26) + 1;
  *(_WORD *)(a1 + 26) = v5;
  if ( v5 < 16 )
  {
    sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), 0, 30);
    if ( (*(_BYTE *)(a1 + 26) & 1) == 0 )
      ++*(_WORD *)(a1 + 86);
  }
  if ( *(int *)(a1 + 12) < 6 )
  {
    v6 = *(_WORD *)(a1 + 86);
    if ( v6 > 67 )
      *(_WORD *)(a1 + 86) = v6 - 1;
  }
  v7 = nullsub_11((uint32)&word_AE454_AE444);
  return sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
}
// 5B5D0: using guessed type int nullsub_11(_DWORD);
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (000258A0) --------------------------------------------------------
void sub_258A0(int a1)
{
    int v1; // eax
    __int16 v3; // dx
    __int16 v4; // ax
    __int16 v5; // ax
    __int16 v6; // ax
    int v7; // eax

    v1 = *(_DWORD*)(a1 + 12);
    *(_DWORD*)(a1 + 12) = v1 - 1;
    if (v1 < 0)
    {
        sub_41E80((Type_AE400_29795*)a1);
        return;
    }
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  v3 = *(_WORD *)(a1 + 126) - 4;
  *(_WORD *)(a1 + 126) = v3;
  if ( v3 < 64 )
    *(_WORD *)(a1 + 126) = 64;
  if ( *(__int16 *)(a1 + 126) > 128 )
    *(_WORD *)(a1 + 126) = 128;
  word_AE454_AE444.z += *(_WORD *)(a1 + 126);
  v4 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  if ( word_AE454_AE444.z < v4 )
    word_AE454_AE444.z = v4;
  v5 = *(_WORD *)(a1 + 26) + 1;
  *(_WORD *)(a1 + 26) = v5;
  if ( v5 < 16 )
  {
    sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), 0, 30);
    if ( (*(_BYTE *)(a1 + 26) & 1) == 0 )
      ++*(_WORD *)(a1 + 86);
  }
  if ( *(int *)(a1 + 12) < 6 )
    --*(_WORD *)(a1 + 86);
  v6 = nullsub_11((uint32)&word_AE454_AE444);
  v7 = sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  nullsub_19(v7);
}
// 25980: using guessed type int nullsub_19(_DWORD);
// 5B5D0: using guessed type int nullsub_11(_DWORD);
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00025990) --------------------------------------------------------
void sub_25990(Type_AE400_29795* a1x)
{
  __int16 v1; // dx
  int v2; // eax
  int result; // eax
  unsigned int v4; // eax

  if ( (sub_11760(&a1x->var_u32_29867_72) & 1) != 0 )
  {
      a1x->var_u16_29821_26++;
  }
  else
  {
    v1 = a1x->var_u16_29821_26;
    if ( v1 > 0 )
        a1x->var_u16_29821_26 = v1 - 1;
  }
  v2 = a1x->actLife_29807_12;
  a1x->actLife_29807_12 = v2 - 1;
  if (v2 < 0 || a1x->var_u16_29821_26 > 8)
  {
      sub_41E80(a1x);
      return;
  }
  v4 = 9377 * a1x->rand_29799_4 + 9439;
  a1x->rand_29799_4 = v4;
  a1x->var_u16_29825_30 = (v4 % 0x5B + a1x->var_u16_29825_30 - 45) & 0x7FF;
  sub_41EC0_42200(&a1x->var_u32_29867_72, a1x->var_u16_29825_30, 0, 256);
  result = (int)sub_373F0(&a1x->var_u32_29867_72, 10, 11);
  if ( result )
  {
    *(_DWORD *)(result + 80) = a1x->var_u16_29873_78.var_u16_29875_80;
    *(_WORD *)(result + 84) = a1x->var_u16_29873_78.var_u16_29879_84;
    *(_DWORD *)(result + 12) = 10;
    *(_WORD *)(result + 24) = a1x->id_29819_24;
  }
}

//----- (00025A60) --------------------------------------------------------
void sub_25A60(int a1)
{
  int v1; // eax
  int result; // eax
  char v3; // ah
  __int16 v4; // di
  __int16 v5; // ax
  __int16 v6; // ax
  __int16 v7; // si
  int v8; // edx
  int v9; // eax
  int v10; // eax
  __int16 v11; // cx
  __int16 v12; // ax
  int v13; // eax
  int v14; // edx

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if (v1 < 0)
  {
      sub_41E80((Type_AE400_29795*)a1);
      return;
  }
  v3 = *(_BYTE *)(a1 + 16);
  if ( (v3 & 2) == 0 )
    *(_BYTE *)(a1 + 16) = v3 | 2;
  if ( *(__int16 *)(a1 + 150) < -80 )
    *(_WORD *)(a1 + 150) = -80;
  if ( *(__int16 *)(a1 + 150) > 80 )
    *(_WORD *)(a1 + 150) = 80;
  if ( *(__int16 *)(a1 + 152) < -80 )
    *(_WORD *)(a1 + 152) = -80;
  if ( *(__int16 *)(a1 + 152) > 80 )
    *(_WORD *)(a1 + 152) = 80;
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  v4 = *(_WORD *)(a1 + 152);
  word_AE454_AE444.x = *(_WORD *)(a1 + 150) + *(_WORD *)(a1 + 72);
  word_AE454_AE444.y = v4 + *(_WORD *)(a1 + 74);
  v5 = *(_WORD *)(a1 + 46);
  word_AE454_AE444.z += v5;
  *(_WORD *)(a1 + 46) = v5 - 28;
  if ( (__int16)(v5 - 28) < -384 )
    *(_WORD *)(a1 + 46) = -384;
  if ( *(__int16 *)(a1 + 46) > 256 )
    *(_WORD *)(a1 + 46) = 256;
  v6 = sub_11F50(&word_AE454_AE444);
  v7 = v6;
  if ( v6 > word_AE454_AE444.z )
  {
    v8 = *(__int16 *)(a1 + 46);
    word_AE454_AE444.z = v6;
    *(_WORD *)(a1 + 46) = -(__int16)((v8 - (__CFSHL__(v8 >> 31, 2) + 4 * (v8 >> 31))) >> 2);
    if ( sub_11810((axis_3d*)(__int16 *)(a1 + 72)) == 1 )
    {
      v9 = (int)sub_373F0(&word_AE454_AE444, 10, 5);
      if ( v9 )
      {
        *(_WORD *)(v9 + 24) = *(_WORD *)(a1 + 24);
        sub_41E80((Type_AE400_29795*)a1);
      }
    }
    else
    {
      if ( !sub_11E50((short*)&word_AE454_AE444, 10, 6) )
      {
        v10 = (int)sub_373F0(&word_AE454_AE444, 10, 6);
        if ( v10 )
        {
          v11 = *(_WORD *)(v10 + 44);
          *(_WORD *)(v10 + 24) = *(_WORD *)(a1 + 24);
          *(_DWORD *)(v10 + 12) = 30;
          *(_WORD *)(v10 + 44) = 3 * v11;
          *(_WORD *)(a1 + 26) = 0;
        }
      }
      if ( *(__int16 *)(a1 + 46) <= 28 )
        *(_WORD *)(a1 + 46) = 0;
    }
  }
  v12 = *(_WORD *)(a1 + 26) + 1;
  *(_WORD *)(a1 + 26) = v12;
  result = sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  if ( v7 == word_AE454_AE444.z )
  {
    sub_41F50_42290((axis_3d*)(a1 + 72), &word_AE454_AE444);
    *(_WORD *)(a1 + 150) += word_AE454_AE444.x;
    v13 = 250 * *(__int16 *)(a1 + 150);
    *(_WORD *)(a1 + 152) += word_AE454_AE444.y;
    v14 = *(__int16 *)(a1 + 152);
    *(_WORD *)(a1 + 150) = (v13 - (__CFSHL__(v13 >> 31, 8) + (v13 >> 31 << 8))) >> 8;
    result = (250 * v14 - (__CFSHL__((250 * v14) >> 31, 8) + ((250 * v14) >> 31 << 8))) >> 8;
    *(_WORD *)(a1 + 152) = result;
  }
}
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00025CE0) --------------------------------------------------------
void sub_25CE0(Type_AE400_29795* a1x)
{
  int v1; // eax
  __int16 result; // ax
  __int64 v3; // rax
  int v4; // edi
  unsigned int v5; // eax
  unsigned int v6; // eax
  Type_AE400_29795* v7x; // eax
  //int v8; // esi
  __int16 v9[4]; // [esp+0h] [ebp-1Ch] BYREF
  int v10; // [esp+8h] [ebp-14h] BYREF
  int v11[4]; // [esp+Ch] [ebp-10h] BYREF

  v1 = a1x->actLife_29807_12;
  a1x->actLife_29807_12 = v1 - 1;
  if (v1 < 0)
  {
      sub_41E80(a1x);
      return;
  }
  if ( (a1x->var_29811_16.byte[0] & 2) == 0 )
  {
      a1x->var_29811_16.byte[0] |= 0x10002u;
      sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 30);
  }
  v3 = 768 * a1x->var_u16_29821_26;
  sub_37130(a1x, (int)(v3 - (__CFSHL__(HIDWORD(v3), 2) + 4 * HIDWORD(v3))) >> 2, 512);
  sub_120B0(a1x, 0, a1x->var_u16_29839_44 / a1x->maxLife_29803_8);
  v4 = sub_11410(a1x->var_u16_29821_26, a1x->var_u16_29821_26);
  if ( v4 )
  {
      a1x->rand_29799_4 = 9377 * a1x->rand_29799_4 + 9439;
    while ( sub_114B0(v4, (uint32*)v11, (uint32*)&v10) == 1 )
    {
      v5 = 9377 * a1x->rand_29799_4 + 9439;
      a1x->rand_29799_4 = v5;
      v9[0] = a1x->var_u32_29867_72.x - 96 + 160 * LOWORD(v11[0]) + v5 % 0x81 - 64;
      v6 = 9377 * a1x->rand_29799_4 + 9439;
      a1x->rand_29799_4 = v6;
      v9[1] = v6 % 0x81 + 160 * v10 + a1x->var_u32_29867_72.y - 96 - 64;
      v9[2] = a1x->var_u32_29867_72.z;
      v7x = sub_373F0((axis_3d*)v9, 10, 0);
      //v8 = v7x;
      if ( v7x )
      {
        v7x->id_29819_24 = a1x->id_29819_24;
        v7x->var_u16_29825_30 = a1x->var_u16_29825_30;
        v7x->var_29811_16.dword |= 0x10080;
        sub_37130(v7x, 512, 512);
        v7x->var_u16_29821_26 = 0;
      }
    }
    sub_11490(v4);
  }
  result = (__int16)(a1x->var_u16_29821_26 + 2) / 11;
  a1x->var_u16_29821_26 = (__int16)(a1x->var_u16_29821_26 + 2) % 11;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// 25CE0: using guessed type int var_10[4];

//----- (00025EC0) --------------------------------------------------------
void sub_25EC0(int a1)
{
  unsigned int v1; // eax
  __int16 v2; // si
  __int16 v3; // ax
  unsigned int v4; // eax
  __int16 v5; // si
  __int16 v6; // ax
  unsigned int v7; // edx
  int v8; // eax
  int v9; // edi
  int v10; // ebp
  int v11; // eax
  int v12; // edx
  __int16 v13; // di
  int v14; // eax
  int v15; // ebp
  __int16 v16; // ax

  if ( *(__int16 *)(a1 + 26) > 2500 )
  {
    v1 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
    *(_DWORD *)(a1 + 4) = v1;
    if ( !(v1 % 0x64) && !*(_WORD *)(dword_AE400_AE3F0() + 36) )
    {
      v2 = *(_WORD *)(a1 + 76);
      v3 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      *(_WORD *)(a1 + 76) = v3;
      if ( v2 != v3 )
      {
LABEL_5:
        sub_41E80((Type_AE400_29795*)a1);
        return;
      }
      *(_WORD *)(a1 + 26) = 0;
    }
  }
  if ( *(__int16 *)(a1 + 26) < 128
    && (*(_BYTE *)(a1 + 26) & 0xF) != 0
    && (v4 = 9377 * *(_DWORD *)(a1 + 4) + 9439, *(_DWORD *)(a1 + 4) = v4, !(v4 % 5))
    || !*(_WORD *)(a1 + 26) )
  {
    v5 = *(_WORD *)(a1 + 76);
    v6 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    *(_WORD *)(a1 + 76) = v6;
    if ( v5 != v6 )
      goto LABEL_5;
    if ( !*(_WORD *)(a1 + 26) )
    {
      v7 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 36);
      if ( v7 > dword_AE400_AE3F0() + 29795 )
        *(_WORD *)(v7 + 26) = 250;
      *(_WORD *)(dword_AE400_AE3F0() + 36) = (a1 - (dword_AE400_AE3F0() + 29795)) / 164;
      v8 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 19);
      v9 = v8;
      if ( v8 )
      {
        *(_WORD *)(v8 + 24) = *(_WORD *)(a1 + 24);
        v10 = 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 38);
        if ( dword_AE400_AE3F0() + 29795 + v10 > (unsigned int)(dword_AE400_AE3F0() + 29795) )
          sub_41E80((Type_AE400_29795*)dword_AE400_AE3F0() + 29795 + v10);
        *(_WORD *)(dword_AE400_AE3F0() + 38) = (v9 - (dword_AE400_AE3F0() + 29795)) / 164;
      }
    }
    v11 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 16);
    if ( v11 )
    {
      *(_WORD *)(v11 + 24) = *(_WORD *)(a1 + 24);
      v12 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
      *(_DWORD *)(a1 + 4) = v12;
      *(_DWORD *)(v11 + 4) = v12;
    }
    v13 = *(_WORD *)(a1 + 26);
    *(_BYTE *)(a1 + 31) += 5;
    if ( !v13 )
    {
      v14 = (int)sub_373F0((axis_3d*)(a1 + 72), 9, 0);
      v15 = v14;
      if ( v14 )
      {
        *(_WORD *)(v14 + 24) = *(_WORD *)(a1 + 24);
        v16 = *(_WORD *)(a1 + 30);
        *(_WORD *)(v15 + 32) = -386;
        *(_BYTE *)(v15 + 68) = 10;
        *(_BYTE *)(v15 + 69) = 17;
        HIBYTE(v16) &= 7u;
        *(_DWORD *)(v15 + 12) = 1;
        *(_WORD *)(v15 + 30) = v16;
        *(_DWORD *)(v15 + 150) = *(_DWORD *)(a1 + 72);
        *(_WORD *)(v15 + 154) = *(_WORD *)(a1 + 76);
        sub_41EC0_42200((axis_3d*)(_WORD *)(v15 + 150), *(_WORD *)(v15 + 30), 0, 1536);
        *(_WORD *)(v15 + 154) = sub_11F50((axis_3d*)(__int16 *)(v15 + 150));
      }
    }
    if ( *(__int16 *)(a1 + 26) >= 127 )
    {
      sub_41E80((Type_AE400_29795*)a1);
      *(_WORD *)(dword_AE400_AE3F0() + 36) = 0;
    }
  }
  ++*(_WORD *)(a1 + 26);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00026140) --------------------------------------------------------
void sub_26140(Type_AE400_29795* a1x)
{
  int v1; // eax
  int v2; // edi
  unsigned int v3; // eax
  unsigned int v4; // eax
  unsigned int v5; // eax
  int v6; // esi
  _BOOL1 i; // cf
  int v8; // eax
  __int16 v10[4]; // [esp+0h] [ebp-20h] BYREF
  int v11; // [esp+8h] [ebp-18h] BYREF
  int v12[5]; // [esp+Ch] [ebp-14h] BYREF

  v1 = a1x->actLife_29807_12;
  a1x->actLife_29807_12 = v1 - 1;
  if ( v1 >= 0 )
  {
      a1x->var_u16_29821_26 = 0;
    v2 = sub_11410(0, a1x->var_u16_29821_26);
    if ( v2 )
    {
      while ( sub_114B0(v2, (uint32*)v12, (uint32*)&v11) == 1 )
      {
        v3 = 9377 * a1x->rand_29799_4 + 9439;
        a1x->rand_29799_4 = v3;
        if ( (int)(2 * (v3 % 0x9D / 79i64) - 1) > 0 )
        {
          v4 = 9377 * a1x->rand_29799_4 + 9439;
          a1x->rand_29799_4 = v4;
          v10[0] = v4 % 0x81 + a1x->var_u32_29867_72.x - 96 + 192 * LOWORD(v12[0]) - 64;
          v5 = 9377 * a1x->rand_29799_4 + 9439;
          a1x->rand_29799_4 = v5;
          v10[1] = v5 % 0x81 + 192 * v11 + a1x->var_u32_29867_72.y - 96 - 64;
          v10[2] = a1x->var_u32_29867_72.z;
          if ( (a1x->actLife_29807_12 & 1) != 0 )
          {
            v6 = ((a1x->actLife_29807_12 / 2) & 1) << 8;
            for ( i = (unsigned __int16)v6 < 0x800u; i; i = (unsigned __int16)v6 < 0x800u )
            {
              v8 = (int)sub_373F0((axis_3d*)v10, 10, 13);
              if ( v8 )
              {
                *(_WORD *)(v8 + 24) = a1x->id_29819_24;
                *(_WORD *)(v8 + 30) = v6;
              }
              LOWORD(v6) = v6 + 512;
            }
          }
        }
      }
      sub_11490(v2);
    }
    a1x->var_u32_29867_72.z = sub_11F50(&a1x->var_u32_29867_72);
  }
  else
  {
    sub_41E80(a1x);
  }
  sub_120B0(a1x, 0, a1x->var_u16_29839_44);
}
// 26140: using guessed type int var_14[5];

//----- (000262D0) --------------------------------------------------------
void sub_262D0(Type_AE400_29795* a1x)
{
  int v1; // eax
  char v2; // dl

  v1 = a1x->actLife_29807_12;
  a1x->var_u16_29821_26++;
  a1x->actLife_29807_12 = v1 - 1;
  if ( v1 >= 0 )
  {
    if ( (a1x->var_29811_16.byte[0] & 2) == 0 )
    {
      sub_120B0(a1x, 0, a1x->var_u16_29839_44);
      sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 24);
      v2 = a1x->var_29811_16.byte[0];
      a1x->actLife_29807_12 = 1;
      a1x->var_29811_16.byte[0] = v2 | 2;
    }
  }
  else
  {
    sub_41E80(a1x);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00026360) --------------------------------------------------------
void sub_26360(Type_AE400_29795* a1x)
{
  int v1; // eax
  int result; // eax
  unsigned __int16 v3; // [esp-4h] [ebp-8h]

  v1 = a1x->actLife_29807_12;
  a1x->var_u16_29821_26++;
  a1x->actLife_29807_12 = v1 - 1;
  if (v1 < 0)
  {
      sub_41E80(a1x);
      return;
  }
  result = sub_42510(a1x);
  BYTE1(result) = a1x->var_29811_16.byte[0];
  if ( (result & 0x200) == 0 )
  {
    v3 = a1x->var_u16_29839_44;
    a1x->var_29811_16.byte[0] |= 2u;
    sub_120B0(a1x, 3u, v3);
  }
}

//----- (000263C0) --------------------------------------------------------
void sub_263C0(Type_AE400_29795* a1x)
{
  int v1; // eax

  v1 = a1x->actLife_29807_12;
  a1x->var_u16_29821_26++;
  a1x->actLife_29807_12 = v1 - 1;
  if (v1 < 0)
  {
      sub_41E80(a1x);
      return;
  }
  sub_42510(a1x);
  sub_120B0(a1x, 4u, a1x->var_u16_29839_44);
}

//----- (000264D0) --------------------------------------------------------
_BOOL1 sub_264D0(unsigned __int16 a1)
{
  unsigned __int16 v1; // ax
  int v2; // edx
  unsigned __int16 v3; // ax
  _BOOL1 result; // al

  HIBYTE(v1) = HIBYTE(a1);
  LOBYTE(v1) = a1 - 1;
  result = 1;
  if ( mapTerrainType_CC1E0_CC1D0[v1] == 8 )
  {
    v2 = (unsigned __int16)((unsigned __int8)mapHeightmap_DC1E0_DC1D0[a1] + 30);
    if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v1] <= (int)(unsigned __int16)v2 )
    {
      LOBYTE(v1) = v1 + 2;
      if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v1] <= v2 )
      {
        LOBYTE(v3) = v1 - 1;
        HIBYTE(v3) = HIBYTE(a1) + 1;
        if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] <= v2 )
        {
          HIBYTE(v3) = HIBYTE(a1) - 1;
          if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] <= v2 )
            return 0;
        }
      }
    }
  }
  return result;
}

//----- (00026560) --------------------------------------------------------
void sub_26560(int a1, int a2)
{
  __int16 i; // di
  unsigned __int16 v4; // [esp+0h] [ebp-18h]
  unsigned __int16 v5; // [esp+4h] [ebp-14h]

  LOBYTE(v4) = (unsigned __int16)(*(_WORD *)(a2 + 72) + 128) >> 8;
  HIBYTE(v4) = (unsigned __int16)(*(_WORD *)(a2 + 74) + 128) >> 8;
  if ( v4 % 2 )
    LOBYTE(v4) = v4 + 1;
  LOBYTE(v4) = v4 - *(_BYTE *)(a2 + 12) + 1;
  for ( i = *(_WORD *)(a2 + 12) + *(_WORD *)(a2 + 26); i; --i )
  {
    HIBYTE(v5) = HIBYTE(v4);
    LOBYTE(v5) = v4 - 1;
    mapAngle_FC1E0_FC1D0[v5] |= 0x80u;
    LOWORD(a1) = *(_WORD *)(a2 + 12);
    for ( LOBYTE(v5) = v4; (_WORD)a1; ++v5 )
    {
      if ( mapTerrainType_CC1E0_CC1D0[v5] != 8 || sub_264D0(v5) )
        mapHeightmap_DC1E0_DC1D0[v5] += 48;
      sub_33AE0(v5, 8);
      --a1;
    }
    mapAngle_FC1E0_FC1D0[v5] |= 0x80u;
    ++HIBYTE(v4);
  }
  return sub_41E80((Type_AE400_29795*)a2);
}

//----- (00026670) --------------------------------------------------------
void sub_26670(int a1, _WORD *a2)
{
  __int16 i; // di
  unsigned __int16 v4; // [esp+0h] [ebp-18h]
  char v5; // [esp+4h] [ebp-14h]
  char v6; // [esp+5h] [ebp-13h]

  v5 = (unsigned __int16)(a2[36] + 128) >> 8;
  v6 = ((unsigned __int16)(a2[37] + 128) >> 8) + 2;
  for ( i = a2[6] + a2[13]; i; --i )
  {
    HIBYTE(v4) = v6;
    LOBYTE(v4) = v5 - 1;
    mapAngle_FC1E0_FC1D0[v4] |= 0x80u;
    LOWORD(a1) = a2[6];
    for ( LOBYTE(v4) = v5; (_WORD)a1; ++v4 )
    {
      if ( mapTerrainType_CC1E0_CC1D0[v4] != 8 || sub_264D0(v4) )
        mapHeightmap_DC1E0_DC1D0[v4] += 48;
      sub_33AE0(v4, 8);
      --a1;
    }
    mapAngle_FC1E0_FC1D0[v4] |= 0x80u;
    --v6;
  }
  sub_41E80((Type_AE400_29795*)(int)a2);
}

//----- (00026760) --------------------------------------------------------
void sub_26760(int a1, _WORD *a2)
{
  int v2; // eax
  __int16 j; // di
  unsigned __int16 v5; // [esp+0h] [ebp-18h]
  __int16 v6; // [esp+2h] [ebp-16h]
  unsigned __int16 i; // [esp+4h] [ebp-14h]
  unsigned __int16 k; // [esp+4h] [ebp-14h]
  unsigned __int16 m; // [esp+4h] [ebp-14h]

  //fix
  v6 = 0;
  //fix

  LOBYTE(v5) = (unsigned __int16)(a2[36] + 128) >> 8;
  HIBYTE(v5) = (unsigned __int16)(a2[37] + 128) >> 8;
  if ( ((unsigned __int8)v5 + HIBYTE(v5)) % 2 )
    LOBYTE(v5) = v5 + 1;
  HIWORD(v2) = v6;
  LOWORD(v2) = a2[13];
  for ( i = v5 - 256; (_WORD)v2; ++i )
  {
    mapAngle_FC1E0_FC1D0[i] |= 0x80u;
    --v2;
  }
  for ( j = a2[6]; j; --j )
  {
    LOWORD(a1) = a2[13];
    for ( k = v5; (_WORD)a1; ++k )
    {
      if ( mapTerrainType_CC1E0_CC1D0[k] != 8 || sub_264D0(k) )
        mapHeightmap_DC1E0_DC1D0[k] += 48;
      sub_33AE0(k, 8);
      --a1;
    }
    ++HIBYTE(v5);
  }
  LOWORD(a1) = a2[13];
  for ( m = v5; (_WORD)a1; ++m )
  {
    mapAngle_FC1E0_FC1D0[m] |= 0x80u;
    --a1;
  }
  sub_41E80((Type_AE400_29795*)(int)a2);
}
// 267A8: variable 'v6' is possibly undefined

//----- (00026890) --------------------------------------------------------
void sub_26890(Type_AE400_29795* event)
{
  uaxis_2d axis2d;
  axis2d._axis_2d.x = (event->var_u32_29867_72.x + 128) >> 8;
  axis2d._axis_2d.y = (event->var_u32_29867_72.y + 128) >> 8;
  for ( int i = event->var_u16_29821_26; i; i-- )
  {
    mapAngle_FC1E0_FC1D0[axis2d.word] = mapAngle_FC1E0_FC1D0[axis2d.word] & 0xF0 | 1;
    sub_33B90(axis2d, axis2d);
    axis2d._axis_2d.x += event->var_u16_29825_30;
    axis2d._axis_2d.y += event->var_u16_29827_32;
  }
  sub_41E80(event);
}

//----- (00026920) --------------------------------------------------------
void sub_26920(Type_AE400_29795* a1x)
{
  int v1; // eax
  int v3; // eax
  __int16 v4; // si

  v1 = a1x->actLife_29807_12;
  a1x->actLife_29807_12 = v1 - 1;
  if (v1 < 0 || (sub_11760(&a1x->var_u32_29867_72) & 1) != 0)
  {
      sub_41E80(a1x);
      return;
  }
  v3 = (int)sub_373F0(&a1x->var_u32_29867_72, 10, 11);
  if ( v3 )
  {
    v4 = a1x->var_u16_29873_78.var_u16_29879_84;
    *(_DWORD *)(v3 + 12) = 2;
    *(_WORD *)(v3 + 84) = v4;
    *(_WORD *)(v3 + 24) = a1x->id_29819_24;
  }
  sub_41EC0_42200(&a1x->var_u32_29867_72, a1x->var_u16_29825_30, 0, a1x->actSpeed_29921_126);
}

//----- (000269A0) --------------------------------------------------------
void sub_269A0(Type_AE400_29795* a1x)
{
  int v1; // eax
  unsigned int v3; // eax

  v1 = a1x->actLife_29807_12;
  a1x->actLife_29807_12 = v1 - 1;
  if (v1 < 0 || (sub_11760(&a1x->var_u32_29867_72) & 1) != 0)
  {
      sub_41E80(a1x);
      return;
  }
  v3 = 9377 * a1x->rand_29799_4 + 9439;
  a1x->rand_29799_4 = v3;
  if ( !(unsigned __int8)sub_40D30(a1x, 0, 1024, v3 % 0xF + 10, 0) )
  {
    sub_120B0(a1x, 0, a1x->var_u16_29839_44);
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 10);
  }
  sub_41EC0_42200(&a1x->var_u32_29867_72, a1x->var_u16_29825_30, 0, a1x->actSpeed_29921_126);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00026A60) --------------------------------------------------------
void sub_26A60(int a1)
{
  int v1; // eax
  int v2; // edx
  int v3; // edi
  int v4; // ebx
  __int16 v5; // ax
  __int16 v6; // ax
  int v7; // [esp+0h] [ebp-1Ch]
  __int16 *v8; // [esp+4h] [ebp-18h]
  unsigned __int16 v9; // [esp+8h] [ebp-14h]

  //fix
  v6 = 0;
  //fix

  if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
  {
    v1 = dword_AE400_AE3F0() + 29795;
    *(_BYTE *)(a1 + 16) |= 2u;
    sub_55370_558A0((a1 - v1) / 164, -1, 21);
  }
  v2 = *(_DWORD *)(a1 + 12);
  if ( v2 > 0 && (*(_DWORD *)(a1 + 12) = v2 - 1, v2 == 1) )
  {
    sub_41E80((Type_AE400_29795*)a1);
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 20);
  }
  else
  {
    v3 = dword_AE400_AE3F0() + 13323;
    v9 = 0;
    v8 = (__int16 *)(a1 + 72);
    while ( v9 < str_AE400_AE3F0->var_u16_10 )
    {
      v4 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v3 + 10);
      if ( sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v4) )
      {
        v5 = sub_42150_42490((axis_3d*)(_WORD *)(v4 + 72), (axis_3d*)(uint16*)v8);
        if ( (unsigned __int16)sub_42210(*(_WORD *)(v4 + 30), v5) < 0xAAu )
        {
          v7 = *(_DWORD *)(a1 + 156);
          *(_WORD *)(a1 + 154) = *(_WORD *)(v7 + 12) + sub_11F50((axis_3d*)(__int16 *)(a1 + 150));
          sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 22);
          sub_41C70_41FB0((Type_AE400_29795*)v4, (axis_3d*)(a1 + 150));
          sub_44BE0((Type_AE400_29795*)v4, 6);
        }
      }
      v3 += 2049;
      ++v9;
    }
    *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)v8);
  }
}
// 26BAF: variable 'v6' is possibly undefined
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00026C00) --------------------------------------------------------
void sub_26C00(int a1)
{
  int result; // eax
  unsigned int v2; // esi
  unsigned int v3; // esi
  __int16 v4; // ax
  __int16 v5; // ax

  result = dword_AE400_AE3F0() + 29795;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
  if ( v2 > dword_AE400_AE3F0() + 29795 )
  {
    if ( *(_DWORD *)(v2 + 12) == 1 )
    {       
      sub_41E80((Type_AE400_29795*)a1);
      return;
    }
    else
    {
      v3 = v2 + 72;
      *(_DWORD *)&word_AE454_AE444.x = *(_DWORD *)v3;
      word_AE454_AE444.z = *(_WORD *)(v3 + 4);
      sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
      v4 = *(_WORD *)(a1 + 30) + 45;
      HIBYTE(v4) &= 7u;
      *(_WORD *)(a1 + 30) = v4;
      v5 = sub_11F50(&word_AE454_AE444);
      ++HIBYTE(v5);
      word_AE454_AE444.z = v5;
      sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00026CE0) --------------------------------------------------------
void sub_26CE0(int a1)
{
    int result; // eax
    int v2; // edx
    char v3; // dl

    result = a1;
    ++* (_WORD*)(a1 + 26);
    v2 = *(_DWORD*)(a1 + 12);
    *(_DWORD*)(a1 + 12) = v2 - 1;
    if (v2 < 0)
    {
        sub_41E80((Type_AE400_29795*)a1);
        return;
    }
  v3 = *(_BYTE *)(a1 + 16);
  if ( (v3 & 2) == 0 )
    *(_BYTE *)(a1 + 16) = v3 | 2;
}

//----- (00026D20) --------------------------------------------------------
void sub_26D20(int a1)
{
  __int16 v1; // bx
  __int16 v2; // dx
  int v3; // edx
  int v4; // eax
  __int16 v5; // ax
  int v6; // eax
  int v7; // ebx
  int v8; // esi
  __int16 v9; // ax
  int v10; // [esp-8h] [ebp-20h]
  int v11; // [esp-4h] [ebp-1Ch]
  int i; // [esp+4h] [ebp-14h]

  v1 = 0;
  v2 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  if ( *(__int16 *)(a1 + 76) < v2 + 1024 )
  {
    v1 = 1;
    *(_WORD *)(a1 + 76) += 64;
  }
  if ( *(__int16 *)(a1 + 76) > v2 + 1024 )
  {
    HIBYTE(v2) += 4;
    v1 = 1;
    *(_WORD *)(a1 + 76) = v2;
  }
  if ( !v1 )
  {
    v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3 - 1;
    if ( v3 >= 0 )
    {
      v4 = 9377 * *(_DWORD *)(a1 + 4);
      *(_WORD *)(a1 + 32) = 56;
      v4 += 9439;
      *(_DWORD *)(a1 + 4) = v4;
      *(_WORD *)(a1 + 30) = v4 & 0x7FF;
      for ( i = 0; i < 2; ++i )
      {
        v5 = *(_WORD *)(a1 + 30);
        HIBYTE(v5) = (HIBYTE(v5) + 4) & 7;
        *(_WORD *)(a1 + 30) = v5;
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        v11 = *(char *)(a1 + 69);
        v10 = *(char *)(a1 + 68);
        word_AE454_AE444.z += *(_WORD *)(a1 + 78);
        v6 = (int)sub_373F0((axis_3d*)(a1 + 72), v10, v11);
        v7 = v6;
        v8 = v6;
        if ( v6 )
        {
          *(_WORD *)(v6 + 24) = *(_WORD *)(a1 + 24);
          *(int *)(v6 + 12) /= 3;
          *(_WORD *)(v6 + 30) = *(_WORD *)(a1 + 30);
          *(_WORD *)(v6 + 32) = *(_WORD *)(a1 + 32);
          v9 = *(_WORD *)(a1 + 44);
          *(_BYTE *)(v7 + 68) = 10;
          *(_BYTE *)(v7 + 69) = 23;
          *(_WORD *)(v7 + 44) = v9;
        }
      }
      sub_55370_558A0((v8 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 23);
    }
    else
    {
      sub_41E80((Type_AE400_29795*)a1);
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00026E90) --------------------------------------------------------
void sub_26E90(int a1)
{
  int v1; // eax
  unsigned int i; // edx
  int v3; // eax
  int v4; // ebx
  __int16 v5; // ax
  __int16 v7; // [esp+0h] [ebp-24h]
  int v8; // [esp+4h] [ebp-20h]
  int v9; // [esp+8h] [ebp-1Ch]
  unsigned __int16 v10; // [esp+Ch] [ebp-18h]
  int v11; // [esp+10h] [ebp-14h]

  *(_WORD *)(a1 + 44) = 10000;
  if ( *(_WORD *)(a1 + 44) )
  {
    v9 = sub_37710();
    if ( (v9 & 0x8000u) != 0 )
      v9 = 0;
    if ( (__int16)v9 > 8 )
      v9 = 8;
    v1 = 0;
    for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36418); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
    {
      if ( *(unsigned __int16 *)(i + 144) == *(__int16 *)(a1 + 24) )
        ++v1;
    }
    if ( (__int16)v9 > 64 - (unsigned __int16)v1 )
      v9 = 64 - v1;
    if ( (__int16)v9 > 0 )
    {
      LOWORD(v1) = *(_WORD *)(a1 + 44);
      v8 = v1;
      v11 = (__int16)v1 / (__int16)v9;
      v10 = 0;
      v7 = 2048 / (__int16)v9;
      do
      {
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        sub_41EC0_42200(&word_AE454_AE444, v10, 0, 512);
        v3 = (int)sub_373F0(&word_AE454_AE444, 5, 9);
        v4 = v3;
        if ( v3 )
        {
          *(_DWORD *)(v3 + 140) = (__int16)v8 % (__int16)v11;
          *(_WORD *)(v3 + 144) = *(_WORD *)(a1 + 24);
          LOBYTE(v5) = v10;
          HIBYTE(v5) = (HIBYTE(v10) + 4) & 7;
          *(_WORD *)(v4 + 34) = v5;
          *(_WORD *)(v4 + 30) = v5;
          v8 -= v11;
        }
        --v9;
        v10 += v7;
      }
      while ( (__int16)v9 > 0 );
    }
  }
  sub_41E80((Type_AE400_29795*)a1);
}
// 26F74: conditional instruction was optimized away because %var_1C.2>=1
// 26F0A: conditional instruction was optimized away because %var_1C.2<9u
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE454: using guessed type __int16 word_AE454_AE444;

//SYNCHRONIZED WITH REMC1
void sub_27030(Type_AE400_29795* event)//1F8030_
{
  //__int16 v1; // dx
  //unsigned __int16 v2; // si
  //__int16 v3; // si
  //int v4; // eax
  //__int16 v5; // ax
  //unsigned __int16 v6; // dx
  //signed int v7; // eax
  //int v8; // eax
  //__int16 v9; // si
  //__int16 v10; // ax
  //__int16 v11; // cx
  //__int16 v12; // ax
  //int v13; // eax
  //__int16 v14; // si
  //Type_AE400_29795* v15; // eax
  //int v16; // eax
  //int v17; // edx
  //unsigned __int16 v18; // [esp-Ch] [ebp-18h]
  //_WORD *v19; // [esp-4h] [ebp-10h]

  //v1 = event->str_29885_90.var_u16_29895_100;
  if (event->str_29885_90.var_u16_29895_100)
  {
    if (event->str_29885_90.var_u16_29895_100 != event->var_u16_29939_144)
    {
        event->var_u16_29939_144 = event->str_29885_90.var_u16_29895_100;
      sub_55370_558A0(event->str_29885_90.var_u16_29895_100, -1, 4);
      event->var_29811_16.byte[0] &= ~0x40u;
    }
    event->str_29885_90.var_u16_29895_100 = 0;
    event->str_29885_90.var_u16_29891_96 = 0;
  }
  //v2 = event->str_29885_90.var_u16_29913_118;
  if (event->str_29885_90.var_u16_29913_118)
  {
    event->var_u16_29825_30 = sub_42150_42490(&event->var_u32_29867_72, &str_AE400_AE3F0->str_29795[event->str_29885_90.var_u16_29913_118].var_u32_29867_72);
    //v18 = event->var_u16_29825_30;
    word_AE454_AE444.x = 0;
    word_AE454_AE444.y = 0;
    word_AE454_AE444.z = 0;
    sub_41EC0_42200(&word_AE454_AE444, event->var_u16_29825_30, 0, 4);
    event->var_u32_150.x += word_AE454_AE444.x;
    //v3 = word_AE454_AE444.y + event->var_u32_150.y;
    event->str_29885_90.var_u16_29913_118 = 0;
    event->var_u32_150.y += word_AE454_AE444.y;
  }
  if ( (event->var_29811_16.byte[0] & 0x40) != 0 )
  {
      //str_AE400_AE3F0->str_29795[event->var_u16_29941_146]
    //v4 = dword_AE400_AE3F0() + 164 * event->var_u16_29941_146;
      //str_AE400_AE3F0->str_29795[event->var_u16_29941_146].var_u32_29867_72
    if (str_AE400_AE3F0->str_29795[event->var_u16_29941_146].var_u8_29859_64 == 3 && str_AE400_AE3F0->str_29795[event->var_u16_29941_146].var_u8_29860_65 == 3 )
    {
      //v19 = str_AE400_AE3F0->str_29795[event->var_u16_29941_146].var_u32_29867_72;
      event->var_u16_29841_46 = 128;
      //v5 = sub_42150_42490(&event->var_u32_29867_72, &str_AE400_AE3F0->str_29795[event->var_u16_29941_146].var_u32_29867_72);
      event->var_u16_29825_30 = sub_42150_42490(&event->var_u32_29867_72, &str_AE400_AE3F0->str_29795[event->var_u16_29941_146].var_u32_29867_72);
      //v6 = event->var_u16_29941_146;
      int tempV7 = sub_423D0_42710(&event->var_u32_29867_72, &str_AE400_AE3F0->str_29795[event->var_u16_29941_146].var_u32_29867_72);
      if (tempV7 <= 1024 )
      {
        if (tempV7 >= 16 )
        {
          word_AE454_AE444 = event->var_u32_29867_72;
          sub_41EC0_42200(&word_AE454_AE444, event->var_u16_29825_30, 0, 16);
        }
        else
        {
          word_AE454_AE444 = event->var_u32_29867_72;
          //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
          //str_AE400_AE3F0->str_29795[event->var_u16_29941_146]
          //v8 = dword_AE400_AE3F0() + 164 * event->var_u16_29941_146;
          word_AE454_AE444.x = str_AE400_AE3F0->str_29795[event->var_u16_29941_146].var_u32_29867_72.x;
          //v9 = *(_WORD *)(v8 + 29871);
          word_AE454_AE444.y = str_AE400_AE3F0->str_29795[event->var_u16_29941_146].var_u32_29867_72.y;
          if ( word_AE454_AE444.z >= str_AE400_AE3F0->str_29795[event->var_u16_29941_146].var_u32_29867_72.z)
          {
            if ( word_AE454_AE444.z > str_AE400_AE3F0->str_29795[event->var_u16_29941_146].var_u32_29867_72.z + 512 )
              word_AE454_AE444.z -= 32;
          }
          else
          {
            word_AE454_AE444.z += 32;
          }
        }
        int16_t tempV10 = sub_11F50(&word_AE454_AE444);
        if (tempV10 > word_AE454_AE444.z )
          word_AE454_AE444.z = tempV10;
        sub_41C70_41FB0(event, &word_AE454_AE444);
      }
      else
      {
          event->var_29811_16.byte[0] &= ~0x40u;
      }
    }
    else
    {
        event->var_29811_16.byte[0] &= ~0x40u;
    }
  }
  else if (event->var_u8_29853_58)
  {
    if (event->var_u32_150.x < -64 )
        event->var_u32_150.x = -64;
    if (event->var_u32_150.x > 64 )
        event->var_u32_150.x = 64;
    if (event->var_u32_150.y < -64 )
        event->var_u32_150.y = -64;
    if (event->var_u32_150.y > 64 )
        event->var_u32_150.y = 64;
    word_AE454_AE444 = event->var_u32_29867_72;
    //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
    //v11 = event->var_u32_150.y;
    word_AE454_AE444.x = event->var_u32_150.x + event->var_u32_29867_72.x;
    word_AE454_AE444.y = event->var_u32_150.y + event->var_u32_29867_72.y;
    //v12 = event->var_u16_29841_46;
    word_AE454_AE444.z += event->var_u16_29841_46;
    event->var_u16_29841_46 -= 16;
    if (event->var_u16_29841_46 < -128 )
        event->var_u16_29841_46 = -128;
    int16 tempV13 = sub_11F50(&word_AE454_AE444);
    //v14 = tempV13;
    if (tempV13 > word_AE454_AE444.z )
    {
      int32 tempshl = __CFSHL__(((int32)event->var_u16_29841_46) >> 31, 2);
      event->var_u16_29841_46 = -(((int32)event->var_u16_29841_46 - tempshl + (((int32)event->var_u16_29841_46) >> 31)) >> 2);
      /*event->var_u16_29841_46 = -((int)(event->var_u16_29841_46
          - (__CFSHL__((unsigned __int64)event->var_u16_29841_46 >> 32, 2)
              + 4 * ((unsigned __int64)event->var_u16_29841_46 >> 32))) >> 2);*/
      if (event->var_u16_29841_46 <= 16 )
          event->var_u16_29841_46 = 0;
      word_AE454_AE444.z = tempV13;
    }
    sub_41C70_41FB0(event, &word_AE454_AE444);
    if (tempV13 == word_AE454_AE444.z )
    {
        Type_AE400_29795* tempV15 = sub_11D10(event);
      if (tempV15)
        sub_277D0(event, tempV15);
      sub_41F50_42290(&event->var_u32_29867_72, &word_AE454_AE444);
      event->var_u32_150.x += (int16)word_AE454_AE444.x;
      //v16 = 250 * event->var_u32_150.x;
      event->var_u32_150.y += (int16)word_AE454_AE444.y;
      //v17 = event->var_u32_150.y;
      event->var_u32_150.x = (250 * event->var_u32_150.x - (((250 * event->var_u32_150.x) >> 31) << 8) + ((250 * event->var_u32_150.x) >> 31)) >> 8;
      //event->var_u32_150.x = (250 * event->var_u32_150.x - (__CFSHL__((250 * event->var_u32_150.x) >> 31, 8) + ((250 * event->var_u32_150.x) >> 31 << 8))) >> 8;
      event->var_u32_150.y = (250 * event->var_u32_150.y - (((250 * event->var_u32_150.y) >> 31) << 8) + ((250 * event->var_u32_150.y) >> 31)) >> 8;
      //event->var_u32_150.y = (250 * event->var_u32_150.y - (__CFSHL__((250 * event->var_u32_150.y) >> 31, 8) + ((250 * event->var_u32_150.y) >> 31 << 8))) >> 8;      
      //event->var_u32_150.x = (250 * event->var_u32_150.x) >> 8;
      //event->var_u32_150.y = (250 * event->var_u32_150.y) >> 8;
    }
    sub_274D0(event);
  }
}

//----- (000274D0) --------------------------------------------------------
void sub_274D0(Type_AE400_29795* event)
{
  __int16 v1; // cx
  __int16 i; // bx
  unsigned int v3; // eax
  int v4; // eax

  for ( i = 0; i < 7; ++i )
  {
    if (event->var_u32_29935_140 <= dword_900A4[i] )
      break;
  }
  v3 = dword_AE400_AE3F0() + 29795 + 164 * event->var_u16_29939_144;
  if ( v3 > dword_AE400_AE3F0() + 29795 && *(_BYTE *)(v3 + 64) == 3 )
  {
    switch ( *(_WORD *)(*(_DWORD *)(v3 + 160) + 48) )
    {
      case 0xFFFF:
        goto LABEL_15;
      case 0:
        v1 = 105;
        break;
      case 1:
        v1 = 113;
        break;
      case 2:
        v1 = 121;
        break;
      case 3:
        v1 = 129;
        break;
      case 4:
        v1 = 137;
        break;
      case 5:
        v1 = 145;
        break;
      case 6:
        v1 = 153;
        break;
      case 7:
        v1 = 161;
        break;
      default:
        break;
    }
  }
  else
  {
LABEL_15:
    v1 = 52;
  }
  v4 = event->var_u16_29881_86;
  if ( v4 != v1 + i )
  {
    sub_36FA0(event, v1 + i);
    if ( i )
      sub_370E0(event, v1 + i);
  }
}
// 27589: variable 'v1' is possibly undefined
// 900A4: using guessed type int dword_900A4[8];
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000275C0) --------------------------------------------------------
void sub_275C0(__int16 *a1)
{
  int result; // eax
  __int16 v2; // dx
  int v3; // edi
  unsigned int i; // ebx

  result = sub_11F50((axis_3d*)(a1 + 36));
  v2 = a1[50];
  a1[38] = result;
  if ( v2 )
  {
    v3 = 164 * (unsigned __int16)a1[50] + dword_AE400_AE3F0() + 29795;
    if ( *(_BYTE *)(v3 + 64) == 3 && !a1[72] )
    {
      for ( i = dword_AE400_AE3F0() + 29959; i < dword_AE400_AE3F0() + 193795; i += 164 )
      {
        if ( *(unsigned __int16 *)(i + 144) == ((int)a1 - dword_AE400_AE3F0() - 29795) / 164 )
          *(_WORD *)(i + 144) = (v3 - (dword_AE400_AE3F0() + 29795)) / 164;
      }
    }
    a1[50] = 0;
    sub_41E80((Type_AE400_29795*)(int)a1);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00027690) --------------------------------------------------------
_WORD* sub_27690(_WORD *result, Type_AE400_29795* a2x)
{
  _WORD *v2; // ebx
  int v3; // ecx
  unsigned int v4; // eax
  int v5; // ebp
  int v6; // ebp
  __int16 v7; // ax

  if (a2x->var_u32_29935_140 > 0 )
  {
    a2x->rand_29799_4 = 9377 * a2x->rand_29799_4 + 9439;
    result = (_WORD *)sub_373F0(&a2x->var_u32_29867_72, 10, 39);
    v2 = result;
    if ( result )
    {
      *((_DWORD *)result + 35) = a2x->var_u32_29935_140;
      v3 = *((_DWORD *)result + 1);
      result[72] = a2x->var_u16_29939_144;
      v4 = 9377 * v3 + 9439;
      *((_DWORD *)v2 + 1) = v4;
      v5 = *((_DWORD *)v2 + 1);
      v2[15] = (v4 % 0x71 + a2x->var_u16_29825_30 - 56) & 0x7FF;
      *((_DWORD *)v2 + 1) = 9377 * v5 + 9439;
      v2[75] = 0;
      v2[76] = 0;
      v2[63] = (9377 * v5 + 9439) % 0x30u + 16;
      v6 = a2x->var_u32_29867_72.z;
      v7 = sub_11F50(&a2x->var_u32_29867_72);
      v2[23] = (1024 - (v6 - v7) - (__CFSHL__((1024 - (v6 - v7)) >> 31, 3) + 8 * ((1024 - (v6 - v7)) >> 31))) >> 3;
      sub_41EC0_42200((axis_3d*)(v2 + 75), v2[15], 0, v2[63]);
    }
    a2x->var_u16_29939_144 = 0;
  }
  return result;
}

//SYNCHRONIZED WITH REMC1
void sub_277D0(Type_AE400_29795* ev1, Type_AE400_29795* ev2)//1F87D0_
{
  //int v2; // eax
  //unsigned __int16 v3; // si
  //int v4; // edx
  //int v5; // eax
  //int v6; // ebp
  //int v7; // edx
  //int v8; // eax
  //int v9; // eax
  //int v11; // eax
  //__int64 v12; // rtt

  //ev1->var_u32_29935_144

  if (ev1->var_u16_29939_144 || ev2->var_u16_29939_144)
  {
    if ( !ev1->var_u16_29939_144)
    {
        ev1->var_u32_29935_140 += ev2->var_u32_29935_140;
      //LOWORD(v2) = ev2->var_u16_29939_144;
//LABEL_20:
      ev1->var_u16_29939_144 = ev2->var_u16_29939_144;
      sub_41E90_421D0(ev2);
      return;
    }
    if (ev2->var_u16_29939_144)
    {
      //v3 = ev2->var_u16_29939_144;
        //str_AE400_AE3F0->str_29795[ev1->var_u16_29939_144].var_u32_29931
      //v4 = dword_AE400_AE3F0() + 29795 + 164 * ev1->var_u16_29939_144;
      //v5 = dword_AE400_AE3F0() + 29795 + 164 * ev2->var_u16_29939_144;
      if (str_AE400_AE3F0->str_29795[ev1->var_u16_29939_144].var_u8_29859_64 != 10 || str_AE400_AE3F0->str_29795[ev2->var_u16_29939_144].var_u8_29859_64 != 10 )
      {
        if (str_AE400_AE3F0->str_29795[ev1->var_u16_29939_144].var_u8_29859_64 == 10 )
        {
            ev1->var_u32_29935_140 += ev2->var_u32_29935_140;
          //v2 = 164 * ev2->var_u16_29939_144 / 164;
          ev1->var_u16_29939_144 = ev2->var_u16_29939_144;
          sub_41E90_421D0(ev2);
          return;
        }
        if (str_AE400_AE3F0->str_29795[ev2->var_u16_29939_144].var_u8_29859_64 == 10 )
        {
          //v6 = ev2->var_u32_29935_140 + ev1->var_u32_29935_140;
          //v7 = 164 * ev1->var_u16_29939_144;
          //v8 = v7;
          //LODWORD(v12) = 164 * ev1->var_u16_29939_144;
          //HIDWORD(v12) = (164 * ev1->var_u16_29939_144) >> 31;
          //v2 = v12 / 164;
          ev1->var_u32_29935_140 *= ev2->var_u32_29935_140;
          //ev1->var_u16_29939_144 = ev1->var_u16_29939_144; //fix it
          sub_41E90_421D0(ev2);
          return;
        }
        if (ev1->var_u16_29939_144 != ev2->var_u16_29939_144)
        {
          if (str_AE400_AE3F0->str_29795[ev1->var_u16_29939_144].var_u32_29931 > str_AE400_AE3F0->str_29795[ev2->var_u16_29939_144].var_u32_29931)
          {
            //v11 = dword_AE400_AE3F0() + 29795;
            ev1->var_u32_29935_140 += ev2->var_u32_29935_140;
            //v2 = (&str_AE400_AE3F0->str_29795[ev1->var_u16_29939_144] - v11) / 164;
            //ev1->var_u16_29939_144 = ev1->var_u16_29939_144;//fix it?
            sub_41E90_421D0(ev2);
            return;
          }
          //v6 = ev2->var_u32_29935_140 + ev1->var_u32_29935_140;
          //v8 = 164 * ev2->var_u16_29939_144;
          //v7 = v8;
//LABEL_19:
          //LODWORD(v12) = 164 * ev2->var_u16_29939_144;
          //HIDWORD(v12) = (164 * ev2->var_u16_29939_144) >> 31;
          //v2 = v12 / 164;
          ev1->var_u32_29935_140 *= ev2->var_u32_29935_140;
          ev1->var_u16_29939_144 = ev2->var_u16_29939_144;
          sub_41E90_421D0(ev2);
          return;
        }
      }
    }
    //v9 = ev2->var_u32_29935_140;
    ev1->var_u32_29935_140 += ev2->var_u32_29935_140;
    sub_41E90_421D0(ev2);
    return;
  }
  //v2 = ev2->var_u32_29935_140;
  ev1->var_u32_29935_140 += ev2->var_u32_29935_140;
  sub_41E90_421D0(ev2);
}

//----- (000279D0) --------------------------------------------------------
char sub_279D0(int a1)
{
  int v1; // eax
  int v2; // esi
  int v3; // edi
  unsigned int v4; // eax
  unsigned __int16 v5; // bx
  char v6; // al
  int v7; // ebp
  unsigned __int8 v8; // al
  int v9; // eax
  char v10; // ch
  char v11; // dl
  __int16 v12; // dx
  __int16 v13; // dx
  char v14; // cl
  unsigned __int16 v15; // bx
  char result; // al
  int v17; // esi
  int v18; // ebp
  char v19; // cl
  __int16 v20; // dx
  unsigned int v21; // eax
  unsigned __int8 v22; // al
  unsigned int v23; // [esp+0h] [ebp-38h]
  unsigned int v24; // [esp+8h] [ebp-30h]
  unsigned int v25; // [esp+Ch] [ebp-2Ch]
  unsigned __int16 v26; // [esp+10h] [ebp-28h]
  __int16 v27; // [esp+14h] [ebp-24h]
  unsigned __int16 v28; // [esp+18h] [ebp-20h]
  unsigned __int16 v29; // [esp+18h] [ebp-20h]
  unsigned __int8 v30; // [esp+20h] [ebp-18h]

  v27 = *(__int16 *)(a1 + 76) >> 5;
  v1 = (int)begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(unsigned __int8 *)(a1 + 71);
  v2 = 0;
  v3 = *(_DWORD *)v1;
  v25 = *(unsigned __int8 *)(v1 + 5);
  v4 = *(unsigned __int8 *)(v1 + 4);
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    v4 >>= 1;
    v25 >>= 1;
  }
  LOBYTE(v28) = ((unsigned __int16)(*(_WORD *)(a1 + 72) + 128) >> 8) - (v4 >> 1);
  HIBYTE(v28) = ((unsigned __int16)(*(_WORD *)(a1 + 74) + 128) >> 8) - (v25 >> 1);
  v26 = v28;
  v5 = v28;
  v24 = v25;
  if ( v25 )
  {
    while ( 1 )
    {
      v6 = *(_BYTE *)(v3 + v2++);
      if ( v6 )
        break;
      ++HIBYTE(v28);
      --v25;
      v5 = v28;
LABEL_26:
      if ( !v25 )
        goto LABEL_27;
    }
    if ( v6 < 0 )
    {
      LOBYTE(v5) = v5 - v6;
      goto LABEL_26;
    }
    v7 = v6;
    while ( 1 )
    {
      v8 = *(_BYTE *)(v3 + v2++);
      if ( v8 < 0xFu )
      {
        if ( v8 <= 6u )
          goto LABEL_25;
        v9 = v5;
        v10 = mapAngle_FC1E0_FC1D0[v5];
        mapHeightmap_DC1E0_DC1D0[v5] = v27;
        if ( (v10 & 7) != 0 )
          goto LABEL_25;
        v11 = v10;
        goto LABEL_24;
      }
      v12 = v8 % 16;
      if ( (int)v8 >> 4 != 3 )
        break;
      v13 = (unsigned __int8)v12 % 3;
      if ( (_BYTE)v13 )
      {
        if ( (unsigned __int8)v13 > 1u )
        {
          if ( (_BYTE)v13 != 2 )
            goto LABEL_25;
          v9 = v5;
          mapHeightmap_DC1E0_DC1D0[v5] = v27 + 16;
          if ( (mapAngle_FC1E0_FC1D0[v5] & 7) != 0 )
            goto LABEL_25;
          v11 = mapAngle_FC1E0_FC1D0[v5];
          goto LABEL_24;
        }
        v9 = v5;
        v14 = mapAngle_FC1E0_FC1D0[v5];
        mapHeightmap_DC1E0_DC1D0[v5] = v27 + 12;
        if ( (v14 & 7) == 0 )
        {
          v11 = v14;
LABEL_24:
          mapAngle_FC1E0_FC1D0[v9] = v11 & 0xF8 | 1;
          uaxis_2d v5x;
          v5x.word = v5;
          sub_33B90(v5x, v5x);
        }
      }
LABEL_25:
      LOBYTE(v5) = v5 + 1;
      if ( !--v7 )
        goto LABEL_26;
    }
    if ( !(_BYTE)v12 )
      goto LABEL_25;
    v9 = v5;
    mapHeightmap_DC1E0_DC1D0[v5] = 4 * (v12 - 1) + v27;
    v11 = mapAngle_FC1E0_FC1D0[v5];
    if ( (v11 & 7) != 0 )
      goto LABEL_25;
    goto LABEL_24;
  }
LABEL_27:
  v23 = v24;
  v29 = v26;
  v15 = v26;
  result = v24;
  v17 = 0;
  if ( v24 )
  {
    while ( 1 )
    {
      while ( 1 )
      {
        result = *(_BYTE *)(v3 + v17++);
        if ( result )
          break;
        ++HIBYTE(v29);
        result = v23 - 1;
        v15 = v29;
        --v23;
LABEL_44:
        if ( !v23 )
          return result;
      }
      if ( result >= 0 )
        break;
      LOBYTE(v15) = v15 - result;
      if ( !v23 )
        return result;
    }
    v18 = result;
    while ( 1 )
    {
      v30 = *(_BYTE *)(v3 + v17);
      v19 = v30;
      LOBYTE(v20) = 0;
      v21 = (int)v30 >> 4;
      ++v17;
      if ( v21 )
        break;
      v19 = 7;
      v20 = v30 % 7;
      result = v20;
      if ( (_BYTE)v20 )
      {
        v22 = v20 - 1;
LABEL_42:
        sub_33800_33BF0(v20, v19, v15, v22);
      }
      LOBYTE(v15) = v15 + 1;
      if ( !--v18 )
        goto LABEL_44;
    }
    if ( v21 <= 2 )
    {
      v22 = v21 + 7;
    }
    else if ( v21 == 3 )
    {
      v20 = v30 % 16 % 3;
      v19 = v30 % 16 / 3 + 10;
      v22 = v19;
    }
    else
    {
      LOBYTE(v20) = 0;
      v22 = ((int)v30 >> 4) + 11;
    }
    goto LABEL_42;
  }
  return result;
}
// 27AD5: conditional instruction was optimized away because al.1>=1
// 27C5D: conditional instruction was optimized away because al.1>=1
// AE440: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

int compare_27D30= 0;
//----- (00027D30) --------------------------------------------------------
void sub_27D30(Type_AE400_29795* event)//1F8D30_
{
    //int v1; // eax
    int v2; // esi
    //int v3; // ebp
    unsigned int v4; // eax
    unsigned int v5; // ebx
    unsigned __int16 v6; // bx
    char v7; // al
    unsigned __int8 v8; // al
    int v9; // ecx
    char v10; // dl
    char v11; // al
    __int16 v12; // ax
    __int16 v13; // dx
    char v14; // dh
    unsigned __int16 v15; // bx
    int v16; // eax
    int v17; // esi
    int v18; // edi
    _BOOL1 i; // zf
    char v20; // cl
    __int16 v21; // dx
    unsigned int v22; // eax
    unsigned __int8 v23; // al
    unsigned __int16 v24; // dx
    __int16 v25; // ax
    int v26; // ebx
    unsigned int v28; // [esp+0h] [ebp-38h]
    unsigned int v29; // [esp+4h] [ebp-34h]
    unsigned int v30; // [esp+8h] [ebp-30h]
    int v31; // [esp+Ch] [ebp-2Ch]
    unsigned int v32; // [esp+10h] [ebp-28h]
    int v33; // [esp+14h] [ebp-24h]
    unsigned __int16 v34; // [esp+18h] [ebp-20h]
    char v35; // [esp+1Ch] [ebp-1Ch]
    unsigned __int16 v36; // [esp+1Ch] [ebp-1Ch]
    unsigned __int16 v37; // [esp+1Ch] [ebp-1Ch]
    unsigned __int8 v38; // [esp+1Dh] [ebp-1Bh]
    int v39; // [esp+20h] [ebp-18h]
    unsigned __int8 v40; // [esp+24h] [ebp-14h]

    v35 = (event->var_u32_29867_72.x + 128) >> 8;
    v38 = (event->var_u32_29867_72.y + 128) >> 8;
    v39 = event->var_u32_29867_72.z >> 5;
    //v1 = (int)begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(unsigned __int8*)(a1 + 71);
    v2 = 0;
    //v3 = *(_DWORD*)v1;
    v29 = begBuildTab_AE440_AE430_26C440_26C430[event->var_u8_29866_71].dim.y;
    v4 = begBuildTab_AE440_AE430_26C440_26C430[event->var_u8_29866_71].dim.x;
    if (typeResolution_12F02E_12F01E == 1)
    {
        v4 >>= 1;
        v29 >>= 1;
    }
    v32 = v4 >> 1;
    event->actLife_29807_12--;
    v5 = v29 >> 1;
    if (event->actLife_29807_12)
    {
        LOBYTE(v36) = v35 - v32;
        HIBYTE(v36) = v38 - v5;
        v34 = v36;
        v6 = v36;
        v28 = v29;
        if (v29)
        {
            while (1)
            {
                v7 = begBuildTab_AE440_AE430_26C440_26C430[event->var_u8_29866_71].Tab_0[v2];
                ++v2;
                if (v7)
                    break;
                ++HIBYTE(v36);
                --v29;
                v6 = v36;
            LABEL_28:
                if (!v29)
                    goto LABEL_29;
            }
            if (v7 < 0)
            {
                LOBYTE(v6) = v6 - v7;
                goto LABEL_28;
            }
            v33 = v7;
            while (1)
            {
                //1F8e3f
//debug
#ifdef debug1
                if (compare_27D30 == 0x437)
                {
                    compare_27D30++;
                    compare_27D30--;
                }
                compare_27D30++;
                //add_compare(0x1F8e41, true);
#endif debug1
                //debug
                v8 = begBuildTab_AE440_AE430_26C440_26C430[event->var_u8_29866_71].Tab_0[v2];
                ++v2;
                if (v8 < 0xFu)
                {
                    if (v8 > 6u)
                        //goto LABEL_27;
                    //else
                    {
                        v9 = v6;
                        v10 = mapAngle_FC1E0_FC1D0[v6];
                        mapHeightmap_DC1E0_DC1D0[v6] += (v39 - mapHeightmap_DC1E0_DC1D0[v6]) / event->actLife_29807_12;
                        if ((v10 & 7) == 0)
                            //goto LABEL_27;
                        //else
                        {
                            v11 = v10;
                            mapAngle_FC1E0_FC1D0[v9] = v11 & 0xF0 | 1;
                            uaxis_2d v6x;
                            v6x.word = v6;
                            sub_33B90(v6x, v6x);
                        }
                    }
                }
                else
                {
                    v31 = (int)v8 >> 4;
                    v12 = v8 % 16;
                    if (v31 != 3)
                        break;
                    v13 = (unsigned __int8)v12 % 3;
                    if ((_BYTE)v13)
                    {
                        if ((unsigned __int8)v13 > 1u)
                        {
                            if ((_BYTE)v13 == 2)
                                //goto LABEL_27;
                            //else
                            {
                                v9 = v6;
                                mapHeightmap_DC1E0_DC1D0[v6] += ((__int16)v39 + 16 - (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v6]) / event->actLife_29807_12;
                                v11 = mapAngle_FC1E0_FC1D0[v6];
                                if ((v11 & 7) == 0)
                                    //goto LABEL_27;
                                //else
                                {
                                    mapAngle_FC1E0_FC1D0[v9] = v11 & 0xF0 | 1;
                                    uaxis_2d v6x;
                                    v6x.word = v6;
                                    sub_33B90(v6x, v6x);
                                }
                            }
                        }
                        else
                        {
                            v9 = v6;
                            mapHeightmap_DC1E0_DC1D0[v6] += ((__int16)v39 + 12 - (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v6]) / event->actLife_29807_12;
                            if ((mapAngle_FC1E0_FC1D0[v6] & 7) == 0)
                            {
                                v11 = mapAngle_FC1E0_FC1D0[v6];
                                //LABEL_26:
                                mapAngle_FC1E0_FC1D0[v9] = v11 & 0xF0 | 1;
                                uaxis_2d v6x;
                                v6x.word = v6;
                                sub_33B90(v6x, v6x);
                            }
                        }
                    }
                }
            LABEL_27:
                LOBYTE(v6) = v6 + 1;
                if (!--v33)
                    goto LABEL_28;
            }
            if (!(_BYTE)v12)
                goto LABEL_27;
            v9 = v6;
            v14 = mapAngle_FC1E0_FC1D0[v6];
            mapHeightmap_DC1E0_DC1D0[v6] += (4 * (unsigned __int8)(v12 - 1) + (__int16)v39 - (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v6])
                / event->actLife_29807_12;
            if ((v14 & 7) != 0)
                goto LABEL_27;
            v11 = v14;
            mapAngle_FC1E0_FC1D0[v9] = v11 & 0xF0 | 1;
            uaxis_2d v6x;
            v6x.word = v6;
            sub_33B90(v6x, v6x);
            goto LABEL_27;
        }
    LABEL_29:
        v30 = v28;
        v37 = v34;
        v15 = v34;
        v16 = event->actLife_29807_12 / 5;
        v17 = 0;
        if (!(event->actLife_29807_12 % 5) || event->actLife_29807_12 == 1)
        {
            while (1)
            {
                while (1)
                {
                LABEL_31:
                    if (!v30)
                        return;
                    LOBYTE(v16) = begBuildTab_AE440_AE430_26C440_26C430[event->var_u8_29866_71].Tab_0[v17];
                    ++v17;
                    if ((_BYTE)v16)
                        break;
                    ++HIBYTE(v37);
                    --v30;
                    v15 = v37;
                }
                if ((v16 & 0x80u) == 0)
                    break;
                LOBYTE(v15) = v15 - v16;
            }
            v18 = (char)v16;
            for (i = (char)v16 == 0; ; i = v18 == 0)
            {
                if (i)
                    goto LABEL_31;
                v40 = begBuildTab_AE440_AE430_26C440_26C430[event->var_u8_29866_71].Tab_0[v17];
                v20 = v40;
                LOBYTE(v21) = 0;
                v22 = (int)v40 >> 4;
                ++v17;
                if (v22)
                {
                    if (v22 <= 2)
                    {
                        v23 = v22 + 7;
                    }
                    else if (v22 == 3)
                    {
                        v21 = v40 % 16 % 3;
                        v20 = v40 % 16 / 3 + 10;
                        v23 = v20;
                    }
                    else
                    {
                        LOBYTE(v21) = 0;
                        v23 = ((int)v40 >> 4) + 11;
                    }
                }
                else
                {
                    v20 = 7;
                    LOWORD(v16) = v40 / 7;
                    v21 = v40 % 7;
                    if (!(_BYTE)v21)
                        goto LABEL_47;
                    v23 = v21 - 1;
                }
                sub_33800_33BF0(v21, v20, v15, v23);
            LABEL_47:
                LOBYTE(v15) = v15 + 1;
                --v18;
            }
        }
    }
    else
    {
        LOBYTE(v24) = v35 - v32;
        HIBYTE(v24) = v38 - v5;
        LOBYTE(v25) = v32 + v35;
        HIBYTE(v25) = v5 + v38;
        uaxis_2d v24x;
        uaxis_2d v25x;
        v24x.word = v24;
        v25x.word = v25;
        sub_33B90(v24x, v25x);
        LOBYTE(v16) = event->var_u8_29865_70;
        if ((unsigned __int8)v16 >= 0x30u)
        {
            if ((unsigned __int8)v16 <= 0x30u)
            {
                *(_WORD*)(164 * event->var_u16_29837_42 + dword_AE400_AE3F0() + 29843) = 2;
                sub_41E80(event);
            }
            else if ((_BYTE)v16 == 51)
            {
                event->actLife_29807_12 = event->var_u16_29839_44;
                event->var_29811_16.byte[0] |= 1u;
                event->var_u8_29865_70 = 52;
                event->var_u32_29867_72.z = sub_11F50(&event->var_u32_29867_72);
                v26 = (unsigned __int16)(v29 >> 1);
                sub_35F30_362F0(v38, v35, v38, v26, (unsigned __int16)v32, 2u);
                LOBYTE(v16) = sub_35F30_362F0(v38, v35, v38, v26, (unsigned __int16)v32, 5u);
            }
        }
    }
}

//----- (00028200) --------------------------------------------------------
void sub_28200(int a1)
{
  char v1; // cl
  char v2; // ch
  unsigned int v3; // edx
  unsigned int v4; // ebx
  unsigned int v5; // esi
  char v6; // dh
  unsigned int v7; // edi
  __int16 v8; // ax
  unsigned __int16 result; // ax
  int v10; // eax
  unsigned __int16 v11; // si
  unsigned __int16 v12; // ax
  unsigned int v13; // ebp
  unsigned int i; // esi
  char v15; // cl
  unsigned __int16 v16; // dx
  char v17; // ch
  unsigned __int16 v18; // ax
  unsigned int v19; // ebp
  unsigned int j; // esi
  char v21; // cl
  __int16 v22; // cx
  unsigned __int16 v23; // ax
  unsigned int v24; // ebp
  unsigned int k; // edx
  unsigned __int16 v26; // si
  char v27; // ch
  int v28; // [esp+0h] [ebp-24h]
  __int16 v29; // [esp+4h] [ebp-20h]

  v1 = (unsigned __int16)(*(_WORD *)(a1 + 72) + 128) >> 8;
  v2 = (unsigned __int16)(*(_WORD *)(a1 + 74) + 128) >> 8;
  if ( typeResolution_12F02E_12F01E == 1 )
    v3 = (int)*(unsigned __int8 *)(6 * *(char *)(a1 + 71) + begBuildTab_AE440_AE430_26C440_26C430 + 4) >> 1;
  else
    v3 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 4);
  v4 = v3;
  if ( typeResolution_12F02E_12F01E == 1 )
    v5 = (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 5) >> 1;
  else
    v5 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 5);
  LOBYTE(v29) = v1 - (v3 >> 1);
  HIBYTE(v29) = v2 - (v5 >> 1);
  v6 = *(_BYTE *)(a1 + 16);
  v7 = v5;
  if ( (v6 & 2) != 0 )
  {
    if ( !*(_WORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 42) + 29845) && *(_WORD *)(a1 + 26) )
    {
      v28 = (*(unsigned __int16 *)(a1 + 44) - *(__int16 *)(a1 + 48)) / *(__int16 *)(a1 + 26);
      *(_WORD *)(a1 + 48) += v28;
      if ( *(_WORD *)(a1 + 26) == 1 )
      {
        v12 = v29;
        v13 = 0;
        if ( v5 )
        {
          do
          {
            for ( i = 0; i < v4; mapHeightmap_DC1E0_DC1D0[v16] = v17 )
            {
              v15 = mapAngle_FC1E0_FC1D0[v12];
              if ( v15 < 0 )
                mapAngle_FC1E0_FC1D0[v12] = v15 & 0x77 | 8;
              v16 = v12;
              ++i;
              v17 = v28 + mapHeightmap_DC1E0_DC1D0[v12];
              LOBYTE(v12) = v12 + 1;
            }
            ++v13;
            v12 = __PAIR16__(HIBYTE(v12), v29) + 256;
          }
          while ( v13 < v7 );
        }
        result = -10;
        *(_WORD *)(a1 + 26) = -10;
      }
      else if ( *(__int16 *)(a1 + 26) == -1 )
      {
        v18 = v29;
        v19 = 0;
        if ( v5 )
        {
          do
          {
            for ( j = 0; j < v4; LOBYTE(v18) = v18 + 1 )
            {
              v21 = mapAngle_FC1E0_FC1D0[v18];
              if ( (v21 & 8) != 0 )
                mapAngle_FC1E0_FC1D0[v18] = v21 & 0x77 | 0x80;
              ++j;
            }
            ++v19;
            v18 = __PAIR16__(HIBYTE(v18), v29) + 256;
          }
          while ( v19 < v7 );
        }
        result = a1;
        ++*(_WORD *)(a1 + 26);
      }
      else
      {
        result = a1;
        v22 = *(_WORD *)(a1 + 26);
        if ( v22 <= 0 )
        {
          *(_WORD *)(a1 + 26) = v22 + 1;
        }
        else
        {
          v23 = v29;
          v24 = 0;
          if ( v5 )
          {
            do
            {
              for ( k = 0; k < v4; mapHeightmap_DC1E0_DC1D0[v26] = v27 )
              {
                v26 = v23;
                ++k;
                v27 = v28 + mapHeightmap_DC1E0_DC1D0[v23];
                LOBYTE(v23) = v23 + 1;
              }
              ++v24;
              v23 = __PAIR16__(HIBYTE(v23), v29) + 256;
            }
            while ( v24 < v7 );
          }
          result = a1;
          --*(_WORD *)(a1 + 26);
        }
      }
    }
    else
    {
      v10 = dword_AE400_AE3F0();
      *(_WORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 42) + 29843) = 2;
      v11 = *(_WORD *)(a1 + 42);
      *(_WORD *)(164 * v11 + v10 + 29949) = 32 * *(_WORD *)(a1 + 48);
      sub_35F30_362F0(v11, v1, v2, (unsigned __int16)(v7 >> 1), (unsigned __int16)(v4 >> 1), 3u);
      sub_41E80((Type_AE400_29795*)a1);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 16) = v6 | 2;
    *(_WORD *)(a1 + 26) = 10;
    *(_WORD *)(a1 + 48) = *(__int16 *)(a1 + 76) >> 5;
    v8 = sub_361C0(v29 - 1, HIBYTE(v29) - 1, v5 + 2, v4 + 2);
    *(_WORD *)(a1 + 44) = v8;
    if ( (unsigned __int16)v8 > 0xDCu )
      *(_WORD *)(a1 + 44) = 220;
    result = *(_WORD *)(a1 + 44);
    if ( *(__int16 *)(a1 + 48) == result )
      *(_WORD *)(a1 + 26) = 0;
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE440: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (000285C0) --------------------------------------------------------
char sub_285C0(int a1)
{
  __int16 v1; // ax
  __int16 v2; // dx
  int v3; // eax
  unsigned int v4; // eax
  int v5; // ecx
  unsigned int v6; // eax
  int v7; // eax
  unsigned int v8; // eax
  unsigned int v9; // ebx
  unsigned int v10; // ebx
  unsigned __int16 v11; // dx
  unsigned int v12; // edi
  int v13; // esi
  char v14; // al
  unsigned __int8 v15; // cl
  __int16 v16; // dx
  __int16 v17; // dx
  unsigned int v18; // eax
  unsigned __int8 v19; // al
  unsigned int v20; // edi
  __int16 *v21; // esi
  char v22; // dh
  int v23; // eax
  unsigned int v24; // ebx
  unsigned int v25; // eax
  unsigned int v26; // esi
  unsigned int m; // edx
  char v28; // cl
  int v30; // [esp+4h] [ebp-60h]
  unsigned int v31; // [esp+8h] [ebp-5Ch]
  int v32; // [esp+Ch] [ebp-58h]
  unsigned int v33; // [esp+10h] [ebp-54h]
  unsigned int v34; // [esp+14h] [ebp-50h]
  unsigned int v35; // [esp+18h] [ebp-4Ch]
  int v36; // [esp+1Ch] [ebp-48h]
  unsigned int v37; // [esp+20h] [ebp-44h]
  int j; // [esp+24h] [ebp-40h]
  _WORD *v39; // [esp+28h] [ebp-3Ch]
  int v40; // [esp+2Ch] [ebp-38h]
  unsigned __int16 v41; // [esp+30h] [ebp-34h]
  __int16 v42; // [esp+30h] [ebp-34h]
  unsigned __int16 v43; // [esp+34h] [ebp-30h]
  int v44; // [esp+38h] [ebp-2Ch]
  unsigned __int16 v45; // [esp+3Ch] [ebp-28h]
  unsigned __int16 v46; // [esp+3Ch] [ebp-28h]
  unsigned __int16 k; // [esp+3Ch] [ebp-28h]
  char v48; // [esp+44h] [ebp-20h]
  unsigned __int8 v49; // [esp+48h] [ebp-1Ch]
  char v50; // [esp+4Ch] [ebp-18h]
  unsigned __int8 i; // [esp+50h] [ebp-14h]

  LOBYTE(v1) = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  v30 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  HIBYTE(v1) = *(_BYTE *)(a1 + 16);
  if ( (v1 & 0x200) == 0 )
  {
    *(_WORD *)(a1 + 26) = 19;
    *(_BYTE *)(a1 + 16) = HIBYTE(v1) | 2;
  }
  v2 = *(_WORD *)(a1 + 26);
  if ( v2 > 0 )
  {
    LOBYTE(v1) = v2 - 1;
    *(_WORD *)(a1 + 26) = v2 - 1;
    if ( v2 == 1 )
    {
      if ( *(_BYTE *)(a1 + 60) )
        *(_WORD *)(a1 + 26) = -25;
      else
        *(_WORD *)(a1 + 26) = -1;
      return v1;
    }
    v1 = 41 * *(_WORD *)(a1 + 42);
    if ( *(_WORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 42) + 29845) )
      return v1;
    v48 = (unsigned __int16)(*(_WORD *)(a1 + 72) + 128) >> 8;
    v50 = (unsigned __int16)(*(_WORD *)(a1 + 74) + 128) >> 8;
    v44 = *(__int16 *)(a1 + 76) >> 5;
    if ( typeResolution_12F02E_12F01E == 1 )
      v3 = (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 4) >> 1;
    else
      v3 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 4);
    v35 = v3;
    if ( typeResolution_12F02E_12F01E == 1 )
      v4 = (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 5) >> 1;
    else
      v4 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 5);
    v5 = 2 * v4 * v35;
    v33 = v4;
    v6 = v4 >> 1;
    HIBYTE(v41) = v50 - v6;
    v49 = v6;
    memset((void*)v30, 0, v5);
    for ( i = 1; ; ++i )
    {
      if ( i > *(char *)(a1 + 71) )
      {
        LOBYTE(v1) = v48 - (v35 >> 1);
        LOBYTE(v41) = v1;
        v46 = v41;
        v37 = 0;
        for ( j = 0; v37 < v33; ++v37 )
        {
          v20 = 0;
          if ( v35 )
          {
            v21 = (__int16 *)(v30 + 2 * j);
            do
            {
              if ( *v21 )
              {
                if ( !mapHeightmap_DC1E0_DC1D0[v46] )
                {
                  mapAngle_FC1E0_FC1D0[v46] = mapAngle_FC1E0_FC1D0[v46] & 0xF8 | 1;
                  sub_33E10(v46, v46);
                }
                mapHeightmap_DC1E0_DC1D0[v46] += *v21 / *(__int16 *)(a1 + 26);
                if ( *(_WORD *)(a1 + 26) == 1 )
                {
                  v22 = mapAngle_FC1E0_FC1D0[v46];
                  if ( v22 < 0 )
                    mapAngle_FC1E0_FC1D0[v46] = v22 & 0x77 | 8;
                }
              }
              if ( *(_WORD *)(a1 + 26) == 2 )
                mapAngle_FC1E0_FC1D0[v46] &= ~8u;
              ++v21;
              ++v20;
              LOBYTE(v46) = v46 + 1;
              ++j;
            }
            while ( v20 < v35 );
          }
          LOBYTE(v1) = v48 - (v35 >> 1);
          ++HIBYTE(v46);
          LOBYTE(v46) = v1;
        }
        return v1;
      }
      v7 = 6 * i;
      v8 = typeResolution_12F02E_12F01E == 1
         ? (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + v7 + 4) >> 1
         : *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + v7 + 4);
      v9 = typeResolution_12F02E_12F01E == 1
         ? (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * i + 5) >> 1
         : *(unsigned __int8 *)(6 * i + begBuildTab_AE440_AE430_26C440_26C430 + 5);
      v10 = v9 >> 1;
      v36 = *(_DWORD *)(6 * i + begBuildTab_AE440_AE430_26C440_26C430);
      LOBYTE(v11) = v48 - v10;
      HIBYTE(v11) = v50 - (v8 >> 1);
      v31 = v8;
      v43 = v11;
      v45 = v11;
      v34 = (unsigned __int8)(v35 >> 1) - v10;
      v12 = v34 + v35 * (v49 - (v8 >> 1));
      v32 = v35 * (v49 - (v8 >> 1));
      v13 = 0;
      if ( v8 )
        break;
LABEL_46:
      ;
    }
    while ( 1 )
    {
      v14 = *(_BYTE *)(v36 + v13++);
      if ( v14 )
        break;
      ++HIBYTE(v43);
      v45 = v43;
      v32 += v35;
      --v31;
      v12 = v32 + v34;
LABEL_45:
      if ( !v31 )
        goto LABEL_46;
    }
    if ( v14 < 0 )
    {
      LOBYTE(v45) = v45 - v14;
      v12 -= v14;
      goto LABEL_45;
    }
    v40 = v14;
    v39 = (_WORD *)(v30 + 2 * v12);
    while ( 1 )
    {
      if ( (*(_BYTE *)(a1 + 18) & 1) != 0 )
        sub_40E20(v45, *(_WORD *)(a1 + 24));
      v15 = *(_BYTE *)(v36 + v13++);
      if ( v15 >= 0xFu )
      {
        v16 = v15 % 16;
        if ( (_BYTE)v16 )
          *v39 = 4 * (unsigned __int8)(v16 - 1) + v44 - (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v45];
      }
      else if ( v15 > 6u )
      {
        *v39 = v44 - (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v45];
      }
      if ( *(__int16 *)(a1 + 26) % 7 && *(_WORD *)(a1 + 26) != 1 )
        goto LABEL_44;
      LOBYTE(v17) = 0;
      v18 = (int)v15 >> 4;
      if ( v18 )
        break;
      v17 = v15 % 7;
      if ( (_BYTE)v17 )
      {
        v19 = v17 - 1;
LABEL_43:
        sub_33800_33BF0(v17, v15, v45, v19);
      }
LABEL_44:
      ++v12;
      LOBYTE(v45) = v45 + 1;
      ++v39;
      if ( !--v40 )
        goto LABEL_45;
    }
    if ( v18 <= 2 )
    {
      v19 = v18 + 7;
    }
    else if ( v18 == 3 )
    {
      v17 = v15 % 16 % 3;
      v19 = v15 % 16 / 3 + 10;
    }
    else
    {
      LOBYTE(v17) = 0;
      v19 = ((int)v15 >> 4) + 11;
    }
    goto LABEL_43;
  }
  *(_WORD *)(a1 + 26) = v2 + 1;
  if ( v2 == -1 )
  {
    if ( typeResolution_12F02E_12F01E == 1 )
      v23 = (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 4) >> 1;
    else
      v23 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 4);
    v24 = v23;
    if ( typeResolution_12F02E_12F01E == 1 )
      v25 = (int)*(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 5) >> 1;
    else
      v25 = *(unsigned __int8 *)(begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(char *)(a1 + 71) + 5);
    LOBYTE(v42) = ((unsigned __int16)(*(_WORD *)(a1 + 72) + 128) >> 8) - (v24 >> 1);
    HIBYTE(v42) = ((unsigned __int16)(*(_WORD *)(a1 + 74) + 128) >> 8) - (v25 >> 1);
    v26 = 0;
    for ( k = v42; v26 < v25; k = __PAIR16__(HIBYTE(k), v42) + 256 )
    {
      for ( m = 0; m < v24; LOBYTE(k) = k + 1 )
      {
        v28 = mapAngle_FC1E0_FC1D0[k];
        if ( (v28 & 8) != 0 )
          mapAngle_FC1E0_FC1D0[k] = v28 & 0x77 | 0x80;
        ++m;
      }
      ++v26;
    }
    *(_WORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 42) + 29843) = 5;
    sub_41E80((Type_AE400_29795*)a1);
  }
  return v1;
}
// 28880: conditional instruction was optimized away because al.1>=1
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE440: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00028D10) --------------------------------------------------------
void sub_28D10(Type_AE400_29795* event)
{
  //unsigned int v2; // eax
  Type_AE400_29795* result; // eax
  Type_AE400_29795* v4; // eax

  Type_AE400_29795* a1;

  //fix
  result = 0;
  a1 = 0;
  //fix

 event->rand_29799_4 = 9377 * event->rand_29799_4 + 9439;
  switch (event->rand_29799_4 % 0xC )
  {
    case 0u:
    case 1u:
      result = sub_373F0(&word_AE454_AE444, 5, 4);
      a1 = result;
      if ( !result )
        goto LABEL_10;
      result->var_u8_29865_70 = 25;
      break;
    case 2u:
    case 3u:
      result = sub_373F0(&word_AE454_AE444, 5, 14);
      a1 = result;
      if ( !result )
        goto LABEL_10;
      result->var_u8_29865_70 = 85;
      break;
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      result = sub_373F0(&word_AE454_AE444, 5, 13);
      a1 = result;
      if ( !result )
        goto LABEL_10;
      result->var_u8_29865_70 = 79;
      break;
    case 9u:
    case 0xAu:
    case 0xBu:
      v4 = sub_373F0(&word_AE454_AE444, 5, 12);
      a1 = v4;
      if ( v4 )
          result->var_u8_29865_70 = 73;
      goto LABEL_10;
    default:
LABEL_10:
      result = a1;
      break;
  }
}
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (00028DC0) --------------------------------------------------------
void sub_28DC0(Type_AE400_29795* event)
{
  unsigned int result; // eax
  __int16 v2; // dx
  Type_AE400_29795* v3; // eax
  //int v4; // edx
  __int16 v5; // di
  __int16 v6; // si
  unsigned int v7; // ecx
  //unsigned int v8; // eax

  result = sub_29640(event);
  if ( result )
  {
    if ( result > 1 )
    {
      if ( result == 2 )
          event->var_u8_29865_70 = 53;
      return;
    }
    v2 = event->var_u16_29821_26;
    if ( v2 > 2 )
    {
        event->var_u16_29821_26 = v2 - 1;
      word_AE454_AE444 = event->var_u32_29867_72;
      word_AE454_AE444.x += event->var_u16_29873_78.var_u16_29875_80;
      v3 = sub_373F0(&word_AE454_AE444, 5, 4);
      if ( v3 )
        v3->var_u8_29865_70 = 25;
      //v4 = 164 * event->var_u16_29835_40;
      if (&str_AE400_AE3F0->str_29795[event->var_u16_29835_40] && str_AE400_AE3F0->str_29795[event->var_u16_29835_40].var_u8_29860_65 <= 1u)
          str_AE400_AE3F0->str_29795[event->var_u16_29835_40].var_u32_29955_160->u16_528 = 200;
      //if (164 * event->var_u16_29835_40 + dword_AE400_AE3F0() + 29795 && *(_BYTE *)(164 * event->var_u16_29835_40 + dword_AE400_AE3F0() + 29860) <= 1u )
      //  *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * event->var_u16_29835_40 + 29955) + 528) = 200;
    }
  }
  v5 = event->str_29885_90.var_u16_29895_100;
  if ( v5 )
  {
    if ( v5 != event->var_u16_29939_144)
    {
      event->var_u16_29939_144 = v5;
      sub_55370_558A0(v5, -1, 4);
      event->var_29811_16.byte[0] &= ~1u;
      sub_36FA0(event, 177);
      event->var_u16_29881_86 += *(_WORD *)(*(_DWORD *)(164 * event->str_29885_90.var_u16_29895_100 + dword_AE400_AE3F0() + 29955) + 48);
    }
    event->str_29885_90.var_u16_29895_100 = 0;
    event->str_29885_90.var_u16_29891_96 = 0;
  }
  if ( !(event->var_u8_29858_63 % 40) )
  {
    v6 = event->actSpeed_29923_128;
    event->var_u32_29935_140 = event->var_u16_29821_26 << 8;
    if ( v6 > 5 && v6 == event->var_u16_29821_26)
    {
      v7 = event->actSpeed_29923_128;
      //v8 = 9377 * event->rand_29799_4 + 9439;
      event->rand_29799_4 = 9377 * event->rand_29799_4 + 9439;
      if ( (event->rand_29799_4 % v7) > event->actSpeed_29923_128 - (event->actSpeed_29923_128 >> 4) - 2 )
      {
        word_AE454_AE444 = event->var_u32_29867_72;
        word_AE454_AE444.x += event->var_u16_29873_78.var_u16_29875_80;
        sub_28D10(event);
      }
    }
  }
  sub_44C90(event);
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (00028FE0) --------------------------------------------------------
void sub_28FE0(int a1)
{
  int v1; // eax
  int v2; // ebp
  unsigned int v3; // eax
  int v4; // eax
  int v5; // ebx
  char v6; // al
  unsigned __int8 v7; // al
  __int16 v8; // cx
  int v9; // eax
  int v10; // eax
  int v11; // eax
  __int16 v12; // dx
  char v13; // ch
  char v14; // dh
  char v15; // al
  __int16 v16; // dx
  int v17; // ecx
  unsigned int v18; // eax
  unsigned int v19; // eax
  int v21; // [esp+0h] [ebp-3Ch]
  int v22; // [esp+4h] [ebp-38h]
  unsigned int v23; // [esp+Ch] [ebp-30h]
  unsigned int v24; // [esp+10h] [ebp-2Ch]
  unsigned int v25; // [esp+18h] [ebp-24h]
  int v26; // [esp+1Ch] [ebp-20h]
  __int16 v27; // [esp+20h] [ebp-1Ch]
  __int16 v28; // [esp+24h] [ebp-18h]
  unsigned __int8 v29; // [esp+28h] [ebp-14h]

  v1 = (int)begBuildTab_AE440_AE430_26C440_26C430 + 6 * *(unsigned __int8 *)(a1 + 71);
  v21 = *(_DWORD *)v1;
  v2 = 0;
  v23 = *(unsigned __int8 *)(v1 + 5);
  v3 = *(unsigned __int8 *)(v1 + 4);
  v24 = v3;
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    v23 >>= 1;
    v24 = v3 >> 1;
  }
  LOBYTE(v26) = ((unsigned __int16)(*(_WORD *)(a1 + 72) + 128) >> 8) - (v24 >> 1);
  BYTE1(v26) = ((unsigned __int16)(*(_WORD *)(a1 + 74) + 128) >> 8) - (v23 >> 1);
  if ( *(_BYTE *)(a1 + 65) )
    LOWORD(v4) = sub_361C0(v26, SBYTE1(v26), v23, v24);
  else
    v4 = *(__int16 *)(a1 + 76) >> 5;
  v5 = v26;
  v25 = v23;
  if ( v23 )
  {
    v27 = 32 * v4;
    v28 = 32 * (v4 - 10);
    while ( 1 )
    {
      v6 = *(_BYTE *)(v21 + v2++);
      if ( v6 )
        break;
      ++BYTE1(v26);
      v5 = v26;
      --v25;
LABEL_44:
      if ( !v25 )
        goto LABEL_45;
    }
    if ( v6 < 0 )
    {
      LOBYTE(v5) = v5 - v6;
      goto LABEL_44;
    }
    v22 = v6;
    while ( 1 )
    {
      v7 = *(_BYTE *)(v21 + v2++);
      v29 = v7;
      if ( v7 )
      {
        word_AE454_AE444.x = (unsigned __int8)v5 << 8;
        word_AE454_AE444.y = BYTE1(v5) << 8;
        word_AE454_AE444.z = v27;
        if ( (v2 & 7) == 0 )
          word_AE454_AE444.z = v28;
        v8 = *(_WORD *)(a1 + 26);
        if ( v8 > 0 )
        {
          *(_WORD *)(a1 + 26) = v8 - 1;
          if ( v8 == 1 )
          {
            v9 = (int)sub_373F0(&word_AE454_AE444, 5, 12);
            if ( v9 )
              *(_BYTE *)(v9 + 70) = 73;
          }
          else if ( (__int16)(v8 - 1) >= 4 )
          {
            sub_28D10((Type_AE400_29795*)a1/*v5, a1*/);
          }
          else
          {
            v10 = (int)sub_373F0(&word_AE454_AE444, 5, 4);
            if ( v10 )
              *(_BYTE *)(v10 + 70) = 25;
          }
        }
        v11 = (int)v29 >> 4;
        if ( v11 )
        {
          if ( v11 != 3 )
          {
            v15 = mapAngle_FC1E0_FC1D0[(unsigned __int16)v5] & 0x70;
            mapAngle_FC1E0_FC1D0[(unsigned __int16)v5] &= ~0x80u;
            mapAngle_FC1E0_FC1D0[(unsigned __int16)v5] = v15 | 1;
            sub_33E10(v5, v5);
            v16 = v29 % 16;
            if ( (_BYTE)v16 )
            {
              v17 = 4 * (unsigned __int8)(v16 - 1);
              if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5] <= v17 )
              {
                mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5] = 0;
              }
              else
              {
                v18 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
                *(_DWORD *)(a1 + 4) = v18;
                if ( (int)(v18 % 0x32) <= 20 )
                {
                  mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5] -= 4 * (v16 - 1);
                }
                else
                {
                  v19 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
                  *(_DWORD *)(a1 + 4) = v19;
                  mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5] -= v17 - v19 % 0x14;
                }
              }
            }
            goto LABEL_43;
          }
          mapAngle_FC1E0_FC1D0[(unsigned __int16)v5] &= ~0x80u;
          v12 = v29 % 16 % 3;
          if ( !(_BYTE)v12 )
            goto LABEL_36;
          if ( (unsigned __int8)v12 <= 1u )
          {
            v13 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5];
            if ( (unsigned __int8)v13 > 0xCu )
              mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5] = v13 - 12;
          }
          else if ( (_BYTE)v12 != 2 )
          {
LABEL_36:
            sub_33E10(v5, v5);
            goto LABEL_43;
          }
          v14 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5];
          if ( (unsigned __int8)v14 > 0x10u )
            mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v5] = v14 - 16;
          goto LABEL_36;
        }
        mapAngle_FC1E0_FC1D0[(unsigned __int16)v5] &= ~0x80u;
      }
LABEL_43:
      LOBYTE(v5) = v5 + 1;
      if ( !--v22 )
        goto LABEL_44;
    }
  }
LABEL_45:
  sub_36080(v26, BYTE1(v26) - v23, (unsigned __int16)v23, (unsigned __int16)v24);
  sub_41E80((Type_AE400_29795*)a1);
}
// 29110: conditional instruction was optimized away because al.1>=1
// 290B7: variable 'v26' is possibly undefined
// AE440: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;
// AE458: using guessed type __int16 word_AE454_AE444.z;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (000293D0) --------------------------------------------------------
void sub_293D0(Type_AE400_29795* a1x)
{
  int v1; // eax
  int v2; // edx
  __int16 v3; // ax

  v1 = a1x->actLife_29807_12;
  a1x->var_u16_29821_26++;
  a1x->actLife_29807_12 = v1 - 1;
  if ( v1 >= 0 )
  {
    sub_42510(a1x);
    if ( (a1x->var_29811_16.byte[0] & 2) == 0 )
    {
        a1x->var_29811_16.byte[0] |= 2u;
      sub_11F50(&a1x->var_u32_29867_72);
      if ( sub_11950(
             a1x,
          (Type_AE400_29795*)(dword_AE400_AE3F0()
           + 29795
           + 164 * *(unsigned __int16 *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * a1x->id_29819_24 + 29955) + 50))) )
      {
        v2 = dword_AE400_AE3F0();
        v3 = a1x->id_29819_24;
        *(_WORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * v3 + 29955) + 50) + 29919) = v3;
        *(_DWORD *)(v2 + 164 * *(unsigned __int16 *)(*(_DWORD *)(v2 + 164 * v3 + 29955) + 50) + 29915) = 10;
        return sub_41E80(a1x);
      }
      sub_46D20(a1x, 0);
    }
  }
  sub_41E80(a1x);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00029540) --------------------------------------------------------
void sub_29540(Type_AE400_29795* a1x)
{
  //int v1; // eax
  __int16 v2; // ax

  sub_41F50_42290(&a1x->var_u32_29867_72, &word_AE454_AE444);
  a1x->var_u32_150.x += word_AE454_AE444.x;
  //v1 = a1x->var_u32_150.x;
  a1x->var_u32_150.y += word_AE454_AE444.y;
  if ((int16)a1x->var_u32_150.x < -128 )
      a1x->var_u32_150.x = -128;
  if ((int16)a1x->var_u32_150.x > 128 )
      a1x->var_u32_150.x = 128;
  if ((int16)a1x->var_u32_150.y < -128 )
      a1x->var_u32_150.y = -128;
  if ((int16)a1x->var_u32_150.y > 128 )
      a1x->var_u32_150.y = 128;
  word_AE454_AE444 = a1x->var_u32_29867_72;
  //word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  v2 = a1x->var_u32_150.y;
  word_AE454_AE444.x += a1x->var_u32_150.x;
  word_AE454_AE444.y += v2;
  word_AE454_AE444.z = sub_11F50(&word_AE454_AE444);
  sub_41C70_41FB0(a1x, &word_AE454_AE444);
  sub_120B0(a1x, 0, a1x->var_u16_29839_44);
}
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00029640) --------------------------------------------------------
int sub_29640(Type_AE400_29795* event)
{
  int v1; // ebx
  int v3; // ecx

  event->var_u16_29835_40 = 0;
  v1 = 0;
  if (event->actLife_29807_12 < 0 )
    return 2;
  if (event->str_29885_90.var_u16_29889_94)
  {
    v3 = event->actLife_29807_12 - event->str_29885_90.var_u16_29885_90;
    event->actLife_29807_12 = v3;
    if ( v3 < 0 )
    {
      event->var_u16_29833_38 = event->str_29885_90.var_u16_29889_94;
      return 2;
    }
    event->var_u16_29835_40 = event->str_29885_90.var_u16_29889_94;
    event->str_29885_90.var_u16_29885_90 = 0;
    v1 = 1;
    event->str_29885_90.var_u16_29889_94 = 0;
  }
  return v1;
}

//----- (000296A0) --------------------------------------------------------
void sub_296A0(Type_AE400_29795* a1x)
{
  int v1; // eax
  __int16 result; // ax

  a1x->var_u32_29867_72.z = sub_11F50(&a1x->var_u32_29867_72);
  v1 = a1x->actLife_29807_12;
  a1x->actLife_29807_12 = v1 - 1;
  if (v1 < 0)
  {
      sub_41E80(a1x);
      return;
  }
  result = a1x->var_u16_29821_26;
  a1x->var_u16_29821_26 = result - 1;
  if ( !result )
  {
    sub_424F0(a1x, 0x39u);
    a1x->maxLife_29803_8 = 5000;
  }
}

//----- (00029700) --------------------------------------------------------
void sub_29700(int a1)
{
  int v1; // ebx
  int v2; // eax

  *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  v1 = (int)sub_373F0(&word_AE454_AE444, 5, 5);
  if ( v1 )
  {
    ++*(int *)((char *)&dword_38C9F + dword_AE400_AE3F0());
    v2 = (int)sub_373F0(&word_AE454_AE444, 10, 1);
    if ( v2 )
      *(_WORD *)(v2 + 24) = *(_WORD *)(v1 + 24);
  }
  sub_41E80((Type_AE400_29795*)a1);
}
// 38C9F: using guessed type int dword_38C9F;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (00029780) --------------------------------------------------------
void sub_29780(Type_AE400_29795* a1x)
{
  int v1; // eax
  int v2; // eax
  int v3; // esi
  unsigned int v4; // eax
  unsigned int v5; // eax
  int v6; // eax
  int v7; // ecx
  __int16 v8; // di
  int v9; // eax
  int result; // eax
  __int16 v11[4]; // [esp+0h] [ebp-20h] BYREF
  int v12; // [esp+8h] [ebp-18h] BYREF
  int v13[5]; // [esp+Ch] [ebp-14h] BYREF

  v1 = a1x->actLife_29807_12;
  a1x->actLife_29807_12 = v1 - 1;
  if (v1 < 0)
  {
      sub_41E80(a1x);
      return;
  }
  sub_37130(a1x, 512, 2048);
  sub_120B0(a1x, 0, a1x->var_u16_29839_44 / a1x->maxLife_29803_8);
  v2 = sub_11410(0, 1);
  v3 = v2;
  if ( v2 )
  {
      a1x->rand_29799_4 = 9377 * a1x->rand_29799_4 + 9439;
    while ( sub_114B0(v3, (uint32*)v13, (uint32*)&v12) == 1 )
    {
      v4 = 9377 * a1x->rand_29799_4 + 9439;
      a1x->rand_29799_4 = v4;
      v11[0] = v4 % 0x81 + a1x->var_u32_29867_72.x - 96 + 112 * LOWORD(v13[0]) - 64;
      v5 = 9377 * a1x->rand_29799_4 + 9439;
      a1x->rand_29799_4 = v5;
      v11[1] = a1x->var_u32_29867_72.y - 96 + 112 * v12 + v5 % 0x81 - 64;
      v11[2] = a1x->var_u32_29867_72.z;
      v6 = (int)sub_373F0((axis_3d*)v11, 10, 6);
      v7 = v6;
      if ( v6 )
      {
        *(_WORD *)(v6 + 24) = a1x->id_29819_24;
        *(_WORD *)(v6 + 44) = a1x->var_u16_29839_44;
        if (a1x->var_u16_29821_26)
          *(_DWORD *)(v6 + 12) = 1;
        else
          *(_DWORD *)(v6 + 12) = 14;
        v8 = *(_WORD *)(v6 + 86) + 7;
        *(_DWORD *)(v6 + 16) |= 0x10080;
        *(_WORD *)(v6 + 86) = v8;
        v9 = a1x->var_u16_29821_26 << 8;
        *(_WORD *)(v7 + 26) = 7;
        *(_WORD *)(v7 + 46) = v9 / 2;
      }
    }
    sub_11490(v3);
  }
  LOWORD(v2) = a1x->var_u16_29821_26;
  result = v2 + 1;
  a1x->var_u16_29821_26 = result;
  if ( (__int16)result > 14 )
    sub_41E80(a1x);
}
// 29780: using guessed type int var_14[5];

//----- (00029920) --------------------------------------------------------
void sub_29920_29960(int a1)
{
  int v1; // eax
  int result; // eax
  unsigned int i; // ebx
  int v4; // eax

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if (v1 < 0)
  {
      sub_41E80((Type_AE400_29795*)a1);
      return;
  }
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36466); ; i = *(_DWORD *)i )
  {
    result = dword_AE400_AE3F0() + 29795;
    if ( i <= dword_AE400_AE3F0() + 29795 )
      break;
    if ( *(_BYTE *)(i + 65) == 39 && sub_42410((_WORD *)(a1 + 72), (_WORD *)(i + 72)) < 12845056 )
    {
      v4 = (a1 - (dword_AE400_AE3F0() + 29795)) / 164;
      *(_DWORD *)(i + 114) = 100;
      *(_WORD *)(i + 118) = v4;
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (000299D0) --------------------------------------------------------
void sub_299D0_29A10(Type_AE400_29795* a1x)
{
  int v1; // eax
  _WORD *v2; // esi
  unsigned int i; // ebx
  //int v4; // edx

  if (a1x->var_u16_29821_26)
  {
    //v4 = dword_AE400_AE3F0() + 29795;
    a1x->var_u16_29821_26--;
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 43);
  }
  else
  {
    v1 = a1x->actLife_29807_12;
    a1x->actLife_29807_12 = v1 - 1;
    if ( v1 >= 0 )
    {
      v2 = (_WORD *)(dword_AE400_AE3F0() + 29867);
      for ( i = dword_AE400_AE3F0() + 29795; i < dword_AE400_AE3F0() + 193795; i += 164 )
      {
        if ( *(_BYTE *)(i + 64) && *(_WORD *)(i + 24) != a1x->id_29819_24)
        {
          switch ( *(_BYTE *)(i + 64) )
          {
            case 2:
            case 5:
              if ( sub_423D0_42710(&a1x->var_u32_29867_72, (axis_3d*)v2) < 0xA00 )
                *(_DWORD *)(i + 12) = -1;
              break;
            case 3:
              if ( sub_423D0_42710(&a1x->var_u32_29867_72, (axis_3d*)v2) < 0xA00 )
                sub_12B50(a1x, i, 0, a1x->var_u16_29839_44);
              break;
            case 9:
            case 0xA:
              if ( sub_423D0_42710(&a1x->var_u32_29867_72, (axis_3d*)v2) < 0xA00 )
                  a1x->actLife_29807_12 = 0;
              break;
            default:
              break;
          }
        }
        v2 += 82;
      }
      sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 44);
      sub_55370_558A0(a1x->id_29819_24, -1, 44);
      sub_44BE0((Type_AE400_29795*)(164 * a1x->id_29819_24 + dword_AE400_AE3F0() + 29795), 3);
      sub_41E80(a1x);
    }
    else
    {
      sub_41E80(a1x);
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00029BA0) --------------------------------------------------------
void sub_29BA0_29BE0(int a1)//1FABA0_
{
	uint32 val = (a1 << 16) - 1;
	for (int i = 0; i < 32; i++)
		for (int j = 0; j < 8; j++)
		{
			if (unk_902DC[i][j])
				unk_902DC[i][j] = val;
		}
}

void PrepRot_29C30_29C70_old(__int16 roll)
{
    int v1; // edx
    int v2; // edi
    int v3; // eax
    int v4; // ebx
    _DWORD* v5; // edi
    int* v6; // esi
    int v7; // eax
    __int16 v8; // bx
    int v9; // ecx
    int v10; // edx
    _BOOL1 v11; // cf
    int v12; // ebx
    int v13; // edx
    int v14; // eax
    _DWORD* v15; // edi
    int* v16; // esi
    int v17; // eax
    int v18; // ecx
    int v19; // edx
    _DWORD* v20; // edi
    int* v21; // esi
    int v22; // eax
    __int16 v23; // bx
    int v24; // ecx
    int v25; // edx
    int v26; // edx
    int v27; // eax
    _DWORD* v28; // edi
    int* v29; // esi
    int v30; // eax
    __int16 v31; // bx
    int v32; // ecx
    int v33; // edx
    int v34; // edx
    void (*v35)(); // eax
    int32 v35x;
    _DWORD* v36; // edi
    int* v37; // esi
    int v38; // eax
    int v39; // ecx
    int v40; // edx
    _DWORD* v41; // edi
    int* v42; // esi
    int v43; // eax
    __int16 v44; // bx
    int v45; // ecx
    int v46; // edx
    int v47; // eax
    _DWORD* v48; // edi
    int* v49; // esi
    int v50; // eax
    __int16 v51; // bx
    int v52; // ecx
    int v53; // edx
    int* v54; // esi
    _DWORD* v55; // edi
    int v56; // eax
    int v57; // ecx
    int v58; // edx
    _DWORD* v59; // edi
    int* v60; // esi
    int v61; // eax
    __int16 v62; // bx
    int v63; // ecx
    int v64; // edx
    _DWORD* v65; // edi
    int* v66; // esi
    int v67; // eax
    __int16 v68; // bx
    int v69; // ecx
    int v70; // edx
    _DWORD* v71; // edi
    int* v72; // esi
    int v73; // eax
    int v74; // ecx
    int v75; // edx
    _DWORD* v76; // edi
    int* v77; // esi
    int v78; // eax
    __int16 v79; // bx
    int v80; // ecx
    int v81; // edx
    _DWORD* result; // eax
    int v83; // edx
    int v84; // ebx
    int v85; // [esp+0h] [ebp-1Ch]
    int v86; // [esp+0h] [ebp-1Ch]
    int v87; // [esp+0h] [ebp-1Ch]
    int v88; // [esp+0h] [ebp-1Ch]
    int v89; // [esp+4h] [ebp-18h]
    int v90; // [esp+4h] [ebp-18h]
    int v91; // [esp+4h] [ebp-18h]
    int v92; // [esp+4h] [ebp-18h]
    int v93; // [esp+8h] [ebp-14h]
    int v94; // [esp+8h] [ebp-14h]
    int v95; // [esp+8h] [ebp-14h]
    int v96; // [esp+8h] [ebp-14h]
    int v97; // [esp+8h] [ebp-14h]
    int v98; // [esp+8h] [ebp-14h]
    int v99; // [esp+8h] [ebp-14h]
    int v100; // [esp+8h] [ebp-14h]
    int v101; // [esp+8h] [ebp-14h]
    int v102; // [esp+Ch] [ebp-10h]
    __int16 v103; // [esp+18h] [ebp-4h]
    __int16 v104; // [esp+18h] [ebp-4h]
    __int16 v105; // [esp+18h] [ebp-4h]
    __int16 v106; // [esp+18h] [ebp-4h]
    __int16 v107; // [esp+18h] [ebp-4h]
    __int16 v108; // [esp+18h] [ebp-4h]
    __int16 v109; // [esp+18h] [ebp-4h]
    __int16 v110; // [esp+18h] [ebp-4h]

    //fix
    v11 = 0;
    //fix

    v1 = roll & 0x7FF;
    roll_B5D28_B5D18 = v1 >> 8;
    v102 = v1 - 512;
    v2 = v1 - 1024;
    v3 = v1 - 512;
    v4 = v1 - 1536;
    switch (v1 >> 8)
    {
    case 0:
        sinRoll_B5D18_B5D08 = sin_90B4C[v1];
        cosRoll_B5CE0_B5CD0 = cos_9134C[v1];
        v89 = pitchViewPort_93AD4;
        v93 = widthViewPort_93AD8;
        sinDivCos_B5CF4_B5CE4 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
        v103 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
        v5 = (_DWORD*)dword_B3EA0_B3E90x;
        v6 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
        v7 = 0;
        v8 = 0;
        v9 = 1;
        v10 = 0;
        do
        {
            v5[1] = v7;
            v5[2] = v10;
            v11 = __CFADD__(v103, v8);
            v8 += v103;
            if (v11)
            {
                v7 += v89;
                ++v10;
                *v6++ = v9;
            }
            v5 += 3;
            ++v7;
            ++v9;
            --v93;
        } while (v93);
        dword_B5D24_B5D14 = v10;
        hwViewPort_B5D2C_B5D1C = -v10;
        v12 = heightViewPort_93ADC - v10;
        whViewPortA_B5D30_B5D20 = heightViewPort_93ADC;
        whViewPortB_B5D34_B5D24 = widthViewPort_93AD8;
        v13 = heightViewPort_93ADC + widthViewPort_93AD8;
        v14 = -1 - hwViewPort_B5D2C_B5D1C;
        goto LABEL_62;
    case 1:
        sinRoll_B5D18_B5D08 = sin_90B4C[v1];
        cosRoll_B5CE0_B5CD0 = cos_9134C[v1];
        v85 = pitchViewPort_93AD4;
        v94 = heightViewPort_93ADC;
        if (v1 == 256)
        {
            v15 = (_DWORD*)dword_B3EA0_B3E90x;
            v16 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
            sinDivCos_B5CF4_B5CE4 = 0x10000;
            v17 = 0;
            v18 = 1;
            v19 = 0;
            do
            {
                v15[1] = v17;
                v15[2] = v19++;
                *v16++ = v18;
                v15 += 3;
                v17 += v85 + 1;
                ++v18;
                --v94;
            } while (v94);
            dword_B5D24_B5D14 = heightViewPort_93ADC;
            hwViewPort_B5D2C_B5D1C = -heightViewPort_93ADC;
        }
        else
        {
            sinDivCos_B5CF4_B5CE4 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
            v104 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
            v20 = (_DWORD*)dword_B3EA0_B3E90x;
            v21 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
            v22 = 0;
            v23 = 0;
            v24 = 1;
            v25 = 0;
            do
            {
                v20[1] = v22;
                v20[2] = v25;
                v11 = __CFADD__(v104, v23);
                v23 += v104;
                if (v11)
                {
                    ++v22;
                    ++v25;
                    *v21++ = v24;
                }
                v20 += 3;
                v22 += v85;
                ++v24;
                --v94;
            } while (v94);
            dword_B5D24_B5D14 = v25;
            hwViewPort_B5D2C_B5D1C = -v25;
        }
        dword_B5D1C_B5D0C = widthViewPort_93AD8 + hwViewPort_B5D2C_B5D1C;
        whViewPortA_B5D30_B5D20 = widthViewPort_93AD8;
        widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
        whViewPortB_B5D34_B5D24 = heightViewPort_93ADC;
        dword_B5D04_B5CF4 = -1;
        begBscreenAdress_B5CD8_B5CC8 = 4 * (-1 - hwViewPort_B5D2C_B5D1C) + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
        break;
    case 2:
        v26 = sin_90B4C[v3];
        v27 = cos_9134C[v3];
        sinRoll_B5D18_B5D08 = v26;
        cosRoll_B5CE0_B5CD0 = v27;
        v86 = pitchViewPort_93AD4;
        v95 = heightViewPort_93ADC;
        sinDivCos_B5CF4_B5CE4 = (v26 << 8) / (v27 >> 8);
        v105 = (v26 << 8) / (v27 >> 8);
        v28 = (_DWORD*)dword_B3EA0_B3E90x;
        v29 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
        v30 = 0;
        v31 = 0;
        v32 = 1;
        v33 = 0;
        do
        {
            v28[1] = v30;
            v28[2] = v33;
            v11 = __CFADD__(v105, v31);
            v31 += v105;
            if (v11)
            {
                --v30;
                ++v33;
                *v29++ = v32;
            }
            v28 += 3;
            v30 += v86;
            ++v32;
            --v95;
        } while (v95);
        dword_B5D24_B5D14 = v33;
        hwViewPort_B5D2C_B5D1C = -v33;
        whViewPortA_B5D30_B5D20 = widthViewPort_93AD8;
        whViewPortB_B5D34_B5D24 = heightViewPort_93ADC;
        widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
        dword_B5D04_B5CF4 = -1;
        dword_B5D1C_B5D0C = widthViewPort_93AD8 - v33;
        begBscreenAdress_B5CD8_B5CC8 = 4 * (v33 - 1) + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
        break;
    case 3:
        v34 = sin_90B4C[v3];
        v35x = cos_9134C[v3];
        sinRoll_B5D18_B5D08 = v34;
        cosRoll_B5CE0_B5CD0 = v35x;
        v90 = pitchViewPort_93AD4;
        v96 = widthViewPort_93AD8;
        if (v102 == 256)
        {
            v36 = (_DWORD*)dword_B3EA0_B3E90x;
            v37 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
            sinDivCos_B5CF4_B5CE4 = 0x10000;
            v38 = 0;
            v39 = 1;
            v40 = 0;
            do
            {
                v36[1] = v38;
                v36[2] = v40++;
                *v37++ = v39;
                v36 += 3;
                v38 = v90 + v38 - 1;
                ++v39;
                --v96;
            } while (v96);
            dword_B5D24_B5D14 = widthViewPort_93AD8;
            hwViewPort_B5D2C_B5D1C = -widthViewPort_93AD8;
        }
        else
        {
            sinDivCos_B5CF4_B5CE4 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
            v106 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
            v41 = (_DWORD*)dword_B3EA0_B3E90x;
            v42 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
            v43 = 0;
            v44 = 0;
            v45 = 1;
            v46 = 0;
            do
            {
                v41[1] = v43;
                v41[2] = v46;
                v11 = __CFADD__(v106, v44);
                v44 += v106;
                if (v11)
                {
                    v43 += v90;
                    ++v46;
                    *v42++ = v45;
                }
                v41 += 3;
                --v43;
                ++v45;
                --v96;
            } while (v96);
            dword_B5D24_B5D14 = v46;
            hwViewPort_B5D2C_B5D1C = -v46;
        }
        dword_B5D1C_B5D0C = heightViewPort_93ADC + hwViewPort_B5D2C_B5D1C;
        whViewPortA_B5D30_B5D20 = heightViewPort_93ADC;
        whViewPortB_B5D34_B5D24 = widthViewPort_93AD8;
        widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
        begBscreenAdress_B5CD8_B5CC8 = 4 * (-1 - hwViewPort_B5D2C_B5D1C) + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
        v47 = -pitchViewPort_93AD4;
        goto LABEL_63;
    case 4:
        sinRoll_B5D18_B5D08 = sin_90B4C[v2];
        cosRoll_B5CE0_B5CD0 = cos_9134C[v2];
        v91 = -pitchViewPort_93AD4;
        v97 = widthViewPort_93AD8;
        sinDivCos_B5CF4_B5CE4 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
        v107 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
        v48 = (_DWORD*)dword_B3EA0_B3E90x;
        v49 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
        v50 = 0;
        v51 = 0;
        v52 = 1;
        v53 = 0;
        do
        {
            v48[1] = v50;
            v48[2] = v53;
            v11 = __CFADD__(v107, v51);
            v51 += v107;
            if (v11)
            {
                v50 += v91;
                ++v53;
                *v49++ = v52;
            }
            v48 += 3;
            --v50;
            ++v52;
            --v97;
        } while (v97);
        dword_B5D24_B5D14 = v53;
        hwViewPort_B5D2C_B5D1C = -v53;
        whViewPortA_B5D30_B5D20 = heightViewPort_93ADC;
        whViewPortB_B5D34_B5D24 = widthViewPort_93AD8;
        widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
        dword_B5D1C_B5D0C = heightViewPort_93ADC - v53;
        v47 = -pitchViewPort_93AD4;
        begBscreenAdress_B5CD8_B5CC8 = 4 * (v53 - 1) + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
        goto LABEL_63;
    case 5:
        sinRoll_B5D18_B5D08 = sin_90B4C[v2];
        cosRoll_B5CE0_B5CD0 = cos_9134C[v2];
        v87 = -pitchViewPort_93AD4;
        v98 = heightViewPort_93ADC;
        if (v1 == 1280)
        {
            sinDivCos_B5CF4_B5CE4 = 0x10000;
            v54 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
            v55 = (_DWORD*)dword_B3EA0_B3E90x;
            v56 = 0;
            v57 = 1;
            v58 = 0;
            do
            {
                v55[1] = v56;
                v55[2] = v58++;
                *v54++ = v57;
                v55 += 3;
                v56 = v87 + v56 - 1;
                ++v57;
                --v98;
            } while (v98);
            dword_B5D24_B5D14 = heightViewPort_93ADC;
            hwViewPort_B5D2C_B5D1C = -heightViewPort_93ADC;
        }
        else
        {
            sinDivCos_B5CF4_B5CE4 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
            v108 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
            v59 = (_DWORD*)dword_B3EA0_B3E90x;
            v60 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
            v61 = 0;
            v62 = 0;
            v63 = 1;
            v64 = 0;
            do
            {
                v59[1] = v61;
                v59[2] = v64;
                v11 = __CFADD__(v108, v62);
                v62 += v108;
                if (v11)
                {
                    --v61;
                    ++v64;
                    *v60++ = v63;
                }
                v59 += 3;
                v61 += v87;
                ++v63;
                --v98;
            } while (v98);
            dword_B5D24_B5D14 = v64;
            hwViewPort_B5D2C_B5D1C = -v64;
        }
        whViewPortA_B5D30_B5D20 = widthViewPort_93AD8;
        whViewPortB_B5D34_B5D24 = heightViewPort_93ADC;
        widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
        dword_B5D1C_B5D0C = widthViewPort_93AD8 + hwViewPort_B5D2C_B5D1C;
        dword_B5D04_B5CF4 = 1;
        begBscreenAdress_B5CD8_B5CC8 = 4 * (-1 - hwViewPort_B5D2C_B5D1C) + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
        break;
    case 6:
        sinRoll_B5D18_B5D08 = sin_90B4C[v4];
        cosRoll_B5CE0_B5CD0 = cos_9134C[v4];
        v88 = -pitchViewPort_93AD4;
        v99 = heightViewPort_93ADC;
        sinDivCos_B5CF4_B5CE4 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
        v109 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
        v65 = (_DWORD*)dword_B3EA0_B3E90x;
        v66 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
        v67 = 0;
        v68 = 0;
        v69 = 1;
        v70 = 0;
        do
        {
            v65[1] = v67;
            v65[2] = v70;
            v11 = __CFADD__(v109, v68);
            v68 += v109;
            if (v11)
            {
                ++v67;
                ++v70;
                *v66++ = v69;
            }
            v65 += 3;
            v67 += v88;
            ++v69;
            --v99;
        } while (v99);
        dword_B5D24_B5D14 = v70;
        hwViewPort_B5D2C_B5D1C = -v70;
        whViewPortA_B5D30_B5D20 = widthViewPort_93AD8;
        whViewPortB_B5D34_B5D24 = heightViewPort_93ADC;
        widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
        dword_B5D1C_B5D0C = widthViewPort_93AD8 - v70;
        dword_B5D04_B5CF4 = 1;
        begBscreenAdress_B5CD8_B5CC8 = 4 * (v70 - 1) + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
        break;
    case 7:
        sinRoll_B5D18_B5D08 = sin_90B4C[v4];
        cosRoll_B5CE0_B5CD0 = cos_9134C[v4];
        v92 = -pitchViewPort_93AD4;
        v100 = widthViewPort_93AD8;
        if (v1 == 1792)
        {
            v71 = (_DWORD*)dword_B3EA0_B3E90x;
            v72 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
            sinDivCos_B5CF4_B5CE4 = 0x10000;
            v73 = 0;
            v74 = 1;
            v75 = 0;
            do
            {
                v71[1] = v73;
                v71[2] = v75++;
                *v72++ = v74;
                v71 += 3;
                v73 += v92 + 1;
                ++v74;
                --v100;
            } while (v100);
            dword_B5D24_B5D14 = widthViewPort_93AD8;
            hwViewPort_B5D2C_B5D1C = -widthViewPort_93AD8;
        }
        else
        {
            sinDivCos_B5CF4_B5CE4 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
            v110 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
            v76 = (_DWORD*)dword_B3EA0_B3E90x;
            v77 = (int*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
            v78 = 0;
            v79 = 0;
            v80 = 1;
            v81 = 0;
            do
            {
                v76[1] = v78;
                v76[2] = v81;
                v11 = __CFADD__(v110, v79);
                v79 += v110;
                if (v11)
                {
                    v78 += v92;
                    ++v81;
                    *v77++ = v80;
                }
                v76 += 3;
                ++v78;
                ++v80;
                --v100;
            } while (v100);
            dword_B5D24_B5D14 = v81;
            hwViewPort_B5D2C_B5D1C = -v81;
        }
        v12 = heightViewPort_93ADC + hwViewPort_B5D2C_B5D1C;
        whViewPortA_B5D30_B5D20 = heightViewPort_93ADC;
        whViewPortB_B5D34_B5D24 = widthViewPort_93AD8;
        v13 = heightViewPort_93ADC + widthViewPort_93AD8;
        v14 = -1 - hwViewPort_B5D2C_B5D1C;
    LABEL_62:
        widthPlusHeightVP_B5D20_B5D10 = v13;
        begBscreenAdress_B5CD8_B5CC8 = 4 * v14 + (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360;
        v47 = pitchViewPort_93AD4;
        dword_B5D1C_B5D0C = v12;
    LABEL_63:
        dword_B5D04_B5CF4 = v47;
        break;
    default:
        break;
    }
    //fix it - size of dword_B3EA0_B3E90
    if (whViewPortB_B5D34_B5D24 > 0x140)
        allert_error();
    //fix it
    v101 = whViewPortB_B5D34_B5D24 - 1;
    for (result = (_DWORD*)dword_B3EA0_B3E90x; v101 >= 0; --v101)
    {
        v83 = result[1];
        v84 = *(result - 2);
        result += 3;
        *(result - 3) = v83 - v84;
    }
}

//SYNCHRONIZED WITH REMC1
void PrepRot_29C30_29C70(__int16 roll)//1FAC30_
{
	int indexv6;
	int par1;
	__int16 par3;
	int par4;
	int par2;
	__int16 par5;

	roll_B5D28_B5D18 = (roll & 0x7FF) >> 8;
	int* tempBegBscreen = (int*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;

	switch ((roll & 0x7FF) >> 8)
	{
	case 0:
		sinRoll_B5D18_B5D08 = sin_90B4C[(roll & 0x7FF)];
		cosRoll_B5CE0_B5CD0 = cos_9134C[(roll & 0x7FF)];
		sinDivCos_B5CF4_B5CE4 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
		par5 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
		indexv6 = 14840;// 59360 / 4;
		par1 = 0;
		par3 = 0;
		par4 = 1;
		par2 = 0;
		for (int indexX = 0; indexX < widthViewPort_93AD8; indexX++)
		{
			dword_B3EA0_B3E90x[indexX][1] = par1;
			dword_B3EA0_B3E90x[indexX][2] = par2;
			par3 += par5;
			if (par5 > (par5 + par3) % 0x10000)
			{
				par1 += pitchViewPort_93AD4;
				par2++;
				tempBegBscreen[indexv6] = par4;
				indexv6++;
			}
			par1++;
			par4++;
		}
		dword_B5D24_B5D14 = par2;
		hwViewPort_B5D2C_B5D1C = -par2;
		whViewPortA_B5D30_B5D20 = heightViewPort_93ADC;
		whViewPortB_B5D34_B5D24 = widthViewPort_93AD8;
		widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
		begBscreenAdress_B5CD8_B5CC8 = tempBegBscreen[14840 - 1 - hwViewPort_B5D2C_B5D1C];
		dword_B5D1C_B5D0C = heightViewPort_93ADC - par2;
		dword_B5D04_B5CF4 = pitchViewPort_93AD4;
		break;
	case 1:
		sinRoll_B5D18_B5D08 = sin_90B4C[(roll & 0x7FF)];
		cosRoll_B5CE0_B5CD0 = cos_9134C[(roll & 0x7FF)];
		if ((roll & 0x7FF) == 256)
		{
			indexv6 = 14840;// 59360 / 4;
			sinDivCos_B5CF4_B5CE4 = 0x10000;
			par1 = 0;
			par4 = 1;
			par2 = 0;
			for (int indexX = 0; indexX < widthViewPort_93AD8; indexX++)
			{
				dword_B3EA0_B3E90x[indexX][1] = par1;
				dword_B3EA0_B3E90x[indexX][2] = par2;
				par2++;
				tempBegBscreen[indexv6] = par4;
				indexv6++;
				par1 += pitchViewPort_93AD4 + 1;
				par4++;
			}
			dword_B5D24_B5D14 = heightViewPort_93ADC;
			hwViewPort_B5D2C_B5D1C = -heightViewPort_93ADC;
		}
		else
		{
			sinDivCos_B5CF4_B5CE4 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
			par5 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
			indexv6 = 14840;// 59360 / 4;
			par1 = 0;
			par3 = 0;
			par4 = 1;
			par2 = 0;
			for (int indexX = 0; indexX < widthViewPort_93AD8; indexX++)
			{
				dword_B3EA0_B3E90x[indexX][1] = par1;
				dword_B3EA0_B3E90x[indexX][2] = par2;
				par3 += par5;
				if (par5 > (par5 + par3) % 0x10000)
				{
					par1++;
					par2++;
					tempBegBscreen[indexv6] = par4;
					indexv6++;
				}
				par1 += pitchViewPort_93AD4;
				par4++;
			}
			dword_B5D24_B5D14 = par2;
			hwViewPort_B5D2C_B5D1C = -par2;
		}
		dword_B5D1C_B5D0C = widthViewPort_93AD8 + hwViewPort_B5D2C_B5D1C;
		whViewPortA_B5D30_B5D20 = widthViewPort_93AD8;
		widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
		whViewPortB_B5D34_B5D24 = heightViewPort_93ADC;
		dword_B5D04_B5CF4 = -1;
		begBscreenAdress_B5CD8_B5CC8 = tempBegBscreen[14840 - 1 - hwViewPort_B5D2C_B5D1C];
		break;
	case 2:
		sinRoll_B5D18_B5D08 = sin_90B4C[(roll & 0x7FF) - 512];
		cosRoll_B5CE0_B5CD0 = cos_9134C[(roll & 0x7FF) - 512];
		sinDivCos_B5CF4_B5CE4 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
		par5 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
		indexv6 = 14840;// 59360 / 4;
		par1 = 0;
		par3 = 0;
		par4 = 1;
		par2 = 0;
		for (int indexX = 0; indexX < widthViewPort_93AD8; indexX++)
		{
			dword_B3EA0_B3E90x[indexX][1] = par1;
			dword_B3EA0_B3E90x[indexX][2] = par2;
			par3 += par5;
			if (par5 > (par5 + par3) % 0x10000)
			{
				par1--;
				par2++;
				tempBegBscreen[indexv6] = par4;
				indexv6++;
			}
			par1 += pitchViewPort_93AD4;
			par4++;
		}
		dword_B5D24_B5D14 = par2;
		hwViewPort_B5D2C_B5D1C = -par2;
		whViewPortA_B5D30_B5D20 = widthViewPort_93AD8;
		whViewPortB_B5D34_B5D24 = heightViewPort_93ADC;
		widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
		dword_B5D04_B5CF4 = -1;
		dword_B5D1C_B5D0C = widthViewPort_93AD8 - par2;
		begBscreenAdress_B5CD8_B5CC8 = tempBegBscreen[14840 - 1 + par2];
		break;
	case 3:
		sinRoll_B5D18_B5D08 = sin_90B4C[(roll & 0x7FF) - 512];
		cosRoll_B5CE0_B5CD0 = cos_9134C[(roll & 0x7FF) - 512];
		if (((roll & 0x7FF) - 512) == 256)
		{
			indexv6 = 14840;// 59360 / 4;
			sinDivCos_B5CF4_B5CE4 = 0x10000;
			par1 = 0;
			par4 = 1;
			par2 = 0;
			for (int indexX = 0; indexX < widthViewPort_93AD8; indexX++)
			{
				dword_B3EA0_B3E90x[indexX][1] = par1;
				dword_B3EA0_B3E90x[indexX][2] = par2;
				par2++;
				tempBegBscreen[indexv6] = par4;
				indexv6++;
				par1 += pitchViewPort_93AD4 - 1;
				par4++;
			}
			dword_B5D24_B5D14 = widthViewPort_93AD8;
			hwViewPort_B5D2C_B5D1C = -widthViewPort_93AD8;
		}
		else
		{
			sinDivCos_B5CF4_B5CE4 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
			par5 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
			indexv6 = 14840;// 59360 / 4;
			par1 = 0;
			par3 = 0;
			par4 = 1;
			par2 = 0;
			for (int indexX = 0; indexX < widthViewPort_93AD8; indexX++)
			{
				dword_B3EA0_B3E90x[indexX][1] = par1;
				dword_B3EA0_B3E90x[indexX][2] = par2;
				par3 += par5;
				if (par5 > (par5 + par3) % 0x10000)
				{
					par1 += pitchViewPort_93AD4;
					par2++;
					tempBegBscreen[indexv6] = par4;
					indexv6++;
				}
				par1--;
				par4++;
			}
			dword_B5D24_B5D14 = par2;
			hwViewPort_B5D2C_B5D1C = -par2;
		}
		dword_B5D1C_B5D0C = heightViewPort_93ADC + hwViewPort_B5D2C_B5D1C;
		whViewPortA_B5D30_B5D20 = heightViewPort_93ADC;
		whViewPortB_B5D34_B5D24 = widthViewPort_93AD8;
		widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
		begBscreenAdress_B5CD8_B5CC8 = tempBegBscreen[14840 - 1 - hwViewPort_B5D2C_B5D1C];
		dword_B5D04_B5CF4 = -pitchViewPort_93AD4;
		break;
	case 4:
		sinRoll_B5D18_B5D08 = sin_90B4C[(roll & 0x7FF) - 1024];
		cosRoll_B5CE0_B5CD0 = cos_9134C[(roll & 0x7FF) - 1024];
		sinDivCos_B5CF4_B5CE4 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
		par5 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
		indexv6 = 14840;// 59360 / 4;
		par1 = 0;
		par3 = 0;
		par4 = 1;
		par2 = 0;
		for (int indexX = 0; indexX < widthViewPort_93AD8; indexX++)
		{
			dword_B3EA0_B3E90x[indexX][1] = par1;
			dword_B3EA0_B3E90x[indexX][2] = par2;
			par3 += par5;
			if (par5 > (par5 + par3) % 0x10000)
			{
				par1 += -pitchViewPort_93AD4;
				par2++;
				tempBegBscreen[indexv6] = par4;
				indexv6++;
			}
			par1--;
			par4++;
		}
		dword_B5D24_B5D14 = par2;
		hwViewPort_B5D2C_B5D1C = -par2;
		whViewPortA_B5D30_B5D20 = heightViewPort_93ADC;
		whViewPortB_B5D34_B5D24 = widthViewPort_93AD8;
		widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
		dword_B5D1C_B5D0C = heightViewPort_93ADC - par2;
		begBscreenAdress_B5CD8_B5CC8 = tempBegBscreen[14840 - 1 + par2];
		dword_B5D04_B5CF4 = -pitchViewPort_93AD4;
		break;
	case 5:
		sinRoll_B5D18_B5D08 = sin_90B4C[(roll & 0x7FF) - 1024];
		cosRoll_B5CE0_B5CD0 = cos_9134C[(roll & 0x7FF) - 1024];
		if ((roll & 0x7FF) == 1280)
		{
			sinDivCos_B5CF4_B5CE4 = 0x10000;
			indexv6 = 14840;// 59360 / 4;
			par1 = 0;
			par4 = 1;
			par2 = 0;
			for (int indexX = 0; indexX < widthViewPort_93AD8; indexX++)
			{
				dword_B3EA0_B3E90x[indexX][1] = par1;
				dword_B3EA0_B3E90x[indexX][2] = par2;
				par2++;
				tempBegBscreen[indexv6] = par4;
				indexv6++;
				par1 += -pitchViewPort_93AD4 - 1;
				par4++;
			}
			dword_B5D24_B5D14 = heightViewPort_93ADC;
			hwViewPort_B5D2C_B5D1C = -heightViewPort_93ADC;
		}
		else
		{
			sinDivCos_B5CF4_B5CE4 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
			par5 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
			indexv6 = 14840;// 59360 / 4;
			par1 = 0;
			par3 = 0;
			par4 = 1;
			par2 = 0;
			for (int indexX = 0; indexX < widthViewPort_93AD8; indexX++)
			{
				dword_B3EA0_B3E90x[indexX][1] = par1;
				dword_B3EA0_B3E90x[indexX][2] = par2;
				par3 += par5;
				if (par5 > (par5 + par3) % 0x10000)
				{
					par1--;
					par2++;
					tempBegBscreen[indexv6] = par4;
					indexv6++;
				}
				par1 += -pitchViewPort_93AD4;
				par4++;
			}
			dword_B5D24_B5D14 = par2;
			hwViewPort_B5D2C_B5D1C = -par2;
		}
		whViewPortA_B5D30_B5D20 = widthViewPort_93AD8;
		whViewPortB_B5D34_B5D24 = heightViewPort_93ADC;
		widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
		dword_B5D1C_B5D0C = widthViewPort_93AD8 + hwViewPort_B5D2C_B5D1C;
		dword_B5D04_B5CF4 = 1;
		begBscreenAdress_B5CD8_B5CC8 = tempBegBscreen[14840 - 1 - hwViewPort_B5D2C_B5D1C];
		break;
	case 6:
		sinRoll_B5D18_B5D08 = sin_90B4C[(roll & 0x7FF) - 1536];
		cosRoll_B5CE0_B5CD0 = cos_9134C[(roll & 0x7FF) - 1536];
		sinDivCos_B5CF4_B5CE4 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
		par5 = (sinRoll_B5D18_B5D08 << 8) / (cosRoll_B5CE0_B5CD0 >> 8);
		indexv6 = 14840;// 59360 / 4;
		par1 = 0;
		par3 = 0;
		par4 = 1;
		par2 = 0;
		for (int indexX = 0; indexX < widthViewPort_93AD8; indexX++)
		{
			dword_B3EA0_B3E90x[indexX][1] = par1;
			dword_B3EA0_B3E90x[indexX][2] = par2;
			par3 += par5;
			if (par5 > (par5 + par3) % 0x10000)
			{
				par1++;
				par2++;
				tempBegBscreen[indexv6] = par4;
				indexv6++;
			}
			par1 += -pitchViewPort_93AD4;
			par4++;
		}
		dword_B5D24_B5D14 = par2;
		hwViewPort_B5D2C_B5D1C = -par2;
		whViewPortA_B5D30_B5D20 = widthViewPort_93AD8;
		whViewPortB_B5D34_B5D24 = heightViewPort_93ADC;
		widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
		dword_B5D1C_B5D0C = widthViewPort_93AD8 - par2;
		dword_B5D04_B5CF4 = 1;
		begBscreenAdress_B5CD8_B5CC8 = tempBegBscreen[14840 - 1 + par2];
		break;
	case 7:
		sinRoll_B5D18_B5D08 = sin_90B4C[(roll & 0x7FF) - 1536];
		cosRoll_B5CE0_B5CD0 = cos_9134C[(roll & 0x7FF) - 1536];
		if ((roll & 0x7FF) == 1792)
		{
			indexv6 = 14840;// 59360 / 4;
			sinDivCos_B5CF4_B5CE4 = 0x10000;
			par1 = 0;
			par4 = 1;
			par2 = 0;
			for (int indexX = 0; indexX < widthViewPort_93AD8; indexX++)
			{
				dword_B3EA0_B3E90x[indexX][1] = par1;
				dword_B3EA0_B3E90x[indexX][2] = par2;
				par2++;
				tempBegBscreen[indexv6] = par4;
				indexv6++;
				par1 += -pitchViewPort_93AD4 + 1;
				par4++;
			}
			dword_B5D24_B5D14 = widthViewPort_93AD8;
			hwViewPort_B5D2C_B5D1C = -widthViewPort_93AD8;
		}
		else
		{
			sinDivCos_B5CF4_B5CE4 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
			par5 = (cosRoll_B5CE0_B5CD0 << 8) / (sinRoll_B5D18_B5D08 >> 8);
			indexv6 = 14840;// 59360 / 4;
			par1 = 0;
			par3 = 0;
			par4 = 1;
			par2 = 0;
			for (int indexX = 0; indexX < widthViewPort_93AD8; indexX++)
			{
				dword_B3EA0_B3E90x[indexX][1] = par1;
				dword_B3EA0_B3E90x[indexX][2] = par2;
				par3 += par5;
				if (par5 > (par5 + par3) % 0x10000)
				{
					par1 += -pitchViewPort_93AD4;
					par2++;
					tempBegBscreen[indexv6] = par4;
					indexv6++;
				}
				par1++;
				par4++;
			}
			dword_B5D24_B5D14 = par2;
			hwViewPort_B5D2C_B5D1C = -par2;
		}
		whViewPortA_B5D30_B5D20 = heightViewPort_93ADC;
		whViewPortB_B5D34_B5D24 = widthViewPort_93AD8;
		widthPlusHeightVP_B5D20_B5D10 = heightViewPort_93ADC + widthViewPort_93AD8;
		begBscreenAdress_B5CD8_B5CC8 = tempBegBscreen[14840 - 1 - hwViewPort_B5D2C_B5D1C];
		dword_B5D1C_B5D0C = heightViewPort_93ADC + hwViewPort_B5D2C_B5D1C;
		dword_B5D04_B5CF4 = pitchViewPort_93AD4;
		break;
	default:
		break;
	}
	//fix it - size of dword_B3EA0_B3E90
	//if (whViewPortB_B5D34_B5D24 > 0x140)allert_error();
	//fix it

	int oldValue = 0;
	for (int index = 0; index < whViewPortB_B5D34_B5D24; index++)
	{
		int actValue = dword_B3EA0_B3E90x[index][1];
		dword_B3EA0_B3E90x[index][0] = actValue - oldValue;
		oldValue = actValue;
	}
}

int compare_index_2A700 = 0;
int compare_index_1FBB90 = 0;
int compare_index_1FBFF0 = 0;
int compare_index_next1 = 0;
int compare_index_1FC68A = 0;
int compare_index_1FBBA0 = 0;
int compare_index_1FBFCB = 0;

void DrawSkyTerrainParticles_2A700_2A740_old(int a1, __int16 a2, __int16 a3, __int16 a4, int a5, int a6, __int16 a7, int a8)
{
    int v8; // eax
    int v9; // edx
    int v10; // ecx
    int v11; // eax
    int v12; // edx
    int v13; // edx
    int v14; // eax
    int v15; // ebp
    int v16; // eax
    int v17; // edi
    char v18; // dl
    int v19; // ecx
    int v20; // edi
    int v21; // esi
    _DWORD* v22; // eax
    char v23; // dl
    int v24; // ebp
    unsigned int v25; // edx
    char v26; // cl
    int v27; // eax
    int v28; // ebx
    int v29; // ebp
    int v30; // ebx
    __int16 v31; // si
    char* v32; // edi
    int v33; // eax
    __int16 v34; // cx
    int v35; // eax
    int v36; // ebx
    int v37; // esi
    int v38; // ebx
    unsigned __int16 v39; // dx
    __int16 v40; // ax
    int v41; // eax
    int v42; // eax
    int v43; // edx
    unsigned __int16 v44; // bx
    unsigned __int8 v45; // al
    char v46; // dl
    _BYTE* v47; // eax
    char v48; // dl
    char v49; // bh
    int v50; // ebx
    int v51; // eax
    int v52; // edi
    int v53; // ecx
    int v54; // esi
    int v55; // edx
    int v56; // edx
    int v57; // ecx
    int v58; // ecx
    int v59; // edi
    int v60; // esi
    int v61; // edi
    int v62; // ebx
    int v63; // eax
    char v64; // dl
    char v65; // ch
    char v66; // dl
    int v67; // eax
    int v68; // ebx
    int v69; // eax
    char v70; // ch
    int v71; // ebx
    char v72; // dl
    int* v73; // esi
    char v74; // dl
    unsigned int v75; // ebp
    unsigned int v76; // ebx
    char v77; // dl
    char v78; // dl
    int v79; // eax
    unsigned int v80; // ebx
    int v81; // eax
    char v82; // cl
    int v83; // eax
    int v84; // ebx
    char v85; // dl
    int* v86; // esi
    int v87; // eax
    char v88; // dh
    int v89; // edi
    int* v90; // esi
    int v91; // ebx
    int v92; // eax
    char v93; // dl
    char v94; // dh
    char v95; // ah
    char v96; // dl
    char v97; // dh
    int v98; // eax
    int v99; // ebx
    char v100; // ch
    int v101; // eax
    int v102; // ebx
    char v103; // dl
    char v104; // dh
    int* v105; // ebp
    int v106; // ebp
    char v107; // ch
    unsigned int v108; // ebp
    unsigned int v109; // ebx
    char v110; // dl
    char v111; // ch
    char v112; // dh
    char v113; // ah
    char v114; // dl
    char v115; // dh
    int v116; // eax
    unsigned int v117; // ebx
    int v118; // eax
    int v119; // eax
    char v120; // ch
    int v121; // ebx
    char v122; // dl
    char v123; // dh
    char v124; // ch
    int v125; // eax
    int v126; // ebx
    int v127; // esi
    int v128; // eax
    int v129; // ebx
    unsigned __int16 v130; // dx
    __int16 v131; // ax
    int v132; // eax
    int v133; // eax
    unsigned __int16 v134; // bx
    unsigned int v135; // eax
    _BYTE* v136; // eax
    char v137; // ch
    int v138; // eax
    int v139; // ebx
    int v140; // edx
    void (*v141)(); // eax
    int32 v141x;
    int v142; // eax
    int v143; // ecx
    int v144; // edx
    int v145; // ecx
    int v146; // edx
    int* v147; // esi
    int v148; // ebp
    int v149; // ebx
    char v150; // dl
    char v151; // dh
    char v152; // al
    char v153; // cl
    unsigned __int8 v154; // dl
    char v155; // dh
    char v156; // dh
    int v157; // ebx
    unsigned int v158; // esi
    unsigned int v159; // ebx
    char v160; // dl
    char v161; // al
    char v162; // dh
    char v163; // cl
    unsigned __int8 v164; // dl
    unsigned int v165; // ebx
    char v166; // dh
    int v167; // ebx
    int v168; // edi
    int v169; // ebx
    char v170; // dl
    char v171; // dh
    char v172; // ah
    char v173; // dl
    char v174; // dh
    int v175; // eax
    int v176; // ebx
    char v177; // ch
    int v178; // eax
    int v179; // ebx
    char v180; // dl
    char v181; // dh
    char v182; // dl
    unsigned int v183; // ebp
    unsigned int v184; // ebx
    char v185; // dl
    char v186; // dh
    char v187; // al
    char v188; // dl
    char v189; // dh
    int v190; // eax
    unsigned int v191; // ebx
    int v192; // eax
    char v193; // cl
    int v194; // ebx
    char v195; // dl
    char v196; // dh
    int v198x[5]; // [esp+0h] [ebp-E0h] BYREF
    //int v199; // [esp+4h] [ebp-DCh]
    //int v200; // [esp+8h] [ebp-D8h]
    //int v201; // [esp+Ch] [ebp-D4h]
    //int *v202; // [esp+10h] [ebp-D0h]
    int v203x[5]; // [esp+18h] [ebp-C8h] BYREF
    //int v204; // [esp+1Ch] [ebp-C4h]
    //int v205; // [esp+20h] [ebp-C0h]
    //int v206; // [esp+24h] [ebp-BCh]
    //int *v207; // [esp+28h] [ebp-B8h]
    int v208x[5]; // [esp+30h] [ebp-B0h] BYREF
    //int v209; // [esp+34h] [ebp-ACh]
    //int v210; // [esp+38h] [ebp-A8h]
    //int v211; // [esp+3Ch] [ebp-A4h]
    //int v212; // [esp+40h] [ebp-A0h]
    int v213x[5]; // [esp+48h] [ebp-98h] BYREF
    //int v214; // [esp+4Ch] [ebp-94h]
    //int v215; // [esp+50h] [ebp-90h]
    //int v216; // [esp+54h] [ebp-8Ch]
    //int v217; // [esp+58h] [ebp-88h]
    int v218; // [esp+60h] [ebp-80h]
    int v219; // [esp+64h] [ebp-7Ch]
    int v220; // [esp+68h] [ebp-78h]
    _BYTE* v221; // [esp+6Ch] [ebp-74h]
    int v222; // [esp+70h] [ebp-70h]
    int v223; // [esp+74h] [ebp-6Ch]
    void (*v224)(); // [esp+78h] [ebp-68h]
    int32 v224x;
    int v225; // [esp+7Ch] [ebp-64h]
    int v226; // [esp+80h] [ebp-60h]
    int v227; // [esp+84h] [ebp-5Ch]
    int v228; // [esp+88h] [ebp-58h]
    int v229; // [esp+8Ch] [ebp-54h]
    int v230; // [esp+90h] [ebp-50h]
    unsigned __int16 v231; // [esp+94h] [ebp-4Ch]
    char v232; // [esp+98h] [ebp-48h]
    char v233; // [esp+9Ch] [ebp-44h]
    char v234; // [esp+A0h] [ebp-40h]
    char v235; // [esp+A4h] [ebp-3Ch]
    char v236; // [esp+A8h] [ebp-38h]
    char v237; // [esp+ACh] [ebp-34h]
    char v238; // [esp+B0h] [ebp-30h]
    char v239; // [esp+B4h] [ebp-2Ch]
    char v240; // [esp+B8h] [ebp-28h]
    char v241; // [esp+BCh] [ebp-24h]
    char v242; // [esp+C0h] [ebp-20h]
    char v243; // [esp+C4h] [ebp-1Ch]
    char v244; // [esp+C8h] [ebp-18h]
    char v245; // [esp+CCh] [ebp-14h]

    byte_B5D3F_B5D2F = *(_BYTE*)(dword_AE400_AE3F0() + 8598);
    heightViewPort_B5CE4_B5CD4 = (int)heightViewPort_93ADC >> 1;
    posX_B5D3C_B5D2C = a2;
    yaw_B5D38_B5D28 = a4 & 0x7FF;
    posY_B5D3A_B5D2A = a3;
    v8 = (a4 & 0x7FF) + 256;
    posZ_B5CF8_B5CE8 = a5;
    v9 = sin_90B4C[v8 + 0x100];
    dword_B5D08_B5CF8 = dword_902B0 + ((int)widthViewPort_93AD8 >> 1);
    sin_B5CDC_B5CCC = v9;
    v10 = dword_9074C[v8];
    v223 = (v8 >> 9) & 3;
    v11 = ((((a4 & 0x7FF) + 256) & 0x1FF) - 256) & 0x7FF;
    v12 = sin_90B4C[v11];
    v224x = cos_9134C[v11];
    cos_B5D10_B5D00 = v10;
    v225 = v12;
    PrepRot_29C30_29C70(-a7 & 0x7FF);
    fowDist_B5D14_B5D04 = (a8
        * Distance_410CE_4140E(
            widthViewPort_93AD8 * widthViewPort_93AD8
            + heightViewPort_93ADC * heightViewPort_93ADC)) >> 8;
    v221 = (uint8*)((char*)&yawQuartal_902B4 + 10 * v223);
    v13 = (unsigned __int8)a3;
    switch (v223)
    {
    case 0:
        a1 = -(unsigned __int8)a2 - 4864;
        v226 = (unsigned __int8)a3 - 256;
        break;
    case 1:
        v13 = -(unsigned __int8)a3;
        v14 = -(unsigned __int8)a2;
        goto LABEL_6;
    case 2:
        a1 = (unsigned __int8)a2 - 4864;
        v226 = -(unsigned __int8)a3;
        break;
    case 3:
        v14 = (unsigned __int8)a2 - 256;
    LABEL_6:
        a1 = v13 - 4864;
        v226 = v14;
        break;
    default:
        break;
    }
    v15 = a1 * v225;
    v235 = 40;
    v218 = v224x << 8;
    v228 = a1 * v224x;
    v229 = v225 << 8;
    v16 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
    v17 = v225 << 8;
    do
    {
        v18 = 21;
        v19 = v228 >> 16;
        do
        {
            *(_DWORD*)v16 = v19;
            *(_DWORD*)(v16 + 12) = v15 >> 16;
            if (a1 < 0)
                *(_WORD*)(v16 + 38) = 0;
            else
                *(_WORD*)(v16 + 38) = 4;
            v16 += 1760;
            --v18;
        } while (v18);
        v16 -= 36916;
        a1 += 256;
        v15 += v17;
        v228 += v218;
        --v235;
    } while (v235);
    v20 = v224x * v226;
    v230 = v224x << 8;
    v219 = v225 << 8;
    v21 = v225 * v226;
    v22 = (_DWORD*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
    v234 = 21;//test next of this
    do
    {
        v23 = 40;
        do
        {
            *v22 -= v21 >> 16;
            v24 = v22[3];
            v22 += 11;
            *(v22 - 8) = (v20 >> 16) + v24;
            --v23;
        } while (v23);
        v20 += v230;
        v21 += v219;
        v226 += 256;
        --v234;
    } while (v234);
    dword_B5D0C_B5CFC = 23658496;
    dword_B5CF0_B5CE0 = 14745600;
    v25 = widthViewPort_93AD8;
    dword_B5D00_B5CF0 = 26214400;
    dword_B5CEC_B5CDC = 8912896;
    v26 = *v221;
    dword_B5CFC_B5CEC = (widthViewPort_93AD8 * a6) >> 8;
    //  adress 1FBA52
    LOBYTE(v231) = v26 + HIBYTE(a2);
    HIBYTE(v231) = v221[1] + HIBYTE(a3);
    v27 = a7 & 0x7FF;
    v28 = sin_90B4C[v27];
    cos_B5CE8_B5CD8 = cos_9134C[v27];
    sin_B5CD4_B5CC4 = v28;
    v29 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
    if (*(_BYTE*)(dword_AE400_AE3F0() + 8603) == 2 && !*(_BYTE*)(dword_AE400_AE3F0() + 8606))
    {
        v30 = pitchViewPort_93AD4 - widthViewPort_93AD8;
        v33 = (int)widthViewPort_93AD8 >> 2;
        v31 = heightViewPort_93ADC;
        v32 = (char*)beginFrame_93ACC;
        v25 = v33;
        LOBYTE(v33) = 64;
        goto LABEL_24;
    }
    if (!*(_BYTE*)(dword_AE400_AE3F0() + 8599))
    {
        v30 = pitchViewPort_93AD4 - widthViewPort_93AD8;
        v33 = (int)widthViewPort_93AD8 >> 2;
        v31 = heightViewPort_93ADC;
        v32 = (char*)beginFrame_93ACC;
        v25 = v33;
        LOBYTE(v33) = -1;
    LABEL_24:
        BYTE1(v33) = v33;
        v34 = v33;
        v35 = v33 << 16;
        LOWORD(v35) = v34;
        do
        {
            memset((char*)v32, v35, v25);
            v32 += 4 * v25 + v30;
            --v31;
        } while (v31);
        goto LABEL_26;
    }
    DrawSky_30730_30770(a7);
    //adress 1FBB02
   //debug
#ifdef debug1
  //add_compare(0x1FBB02, true, true);
#endif debug1
  //debug

LABEL_26:
    if (*(_BYTE*)(dword_AE400_AE3F0() + 8597) && (*(_BYTE*)(dword_AE400_AE3F0() + 8603) != 2 || *(_BYTE*)(dword_AE400_AE3F0() + 8606)))
    {
        v233 = 21;
        while (1)
        {
            //  adress 1FBB90
               //debug
#ifdef debug1
            if (compare_index_1FBB90 == 0x11)
            {
                compare_index_1FBB90++;
                compare_index_1FBB90--;
            }
            //add_compare(0x1FBB90, true, true);
            compare_index_1FBB90++;
#endif debug1
            //debug
            v242 = 40;
            do
            {
#ifdef debug1
                /*if (compare_index_1FBBA0 == 0x183a)
                {
                    compare_index_1FBBA0++;
                    compare_index_1FBBA0--;
                }
                add_compare(0x1FBBA0, true, true);
                compare_index_1FBBA0++;*/
#endif debug1
                v36 = *(_DWORD*)v29 * *(_DWORD*)v29;
                v37 = *(_DWORD*)(v29 + 12);
                v220 = ((unsigned __int8)mapShading_EC1E0_EC1D0[v231] << 8) + 128;
                *(_WORD*)(v29 + 36) = 0;
                v38 = v37 * v37 + v36;
                if (v37 <= -256 || v38 >= dword_B5D00_B5CF0)
                {
                    *(_BYTE*)(v29 + 38) |= 2u;
                    goto LABEL_49;
                }
                if (v37 < 128)
                    v37 = 128;
                v39 = v231;
                *(_DWORD*)(v29 + 16) = fowDist_B5D14_B5D04 * *(int32*)v29 / v37;
                *(_DWORD*)(v29 + 4) = 32 * mapHeightmap_DC1E0_DC1D0[v39] - a5;
                v40 = (unsigned __int16)*(_DWORD*)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 13341) << 6;
                v227 = sin_90B4C[(v40 + (HIBYTE(v231) << 7)) & 0x7FF] >> 8;
                v41 = v227 * (sin_90B4C[(((unsigned __int8)v231 << 7) + v40) & 0x7FF] >> 8);
                v227 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v39];
                *(_DWORD*)(v29 + 8) = -((v227 * ((v41 >> 4) + 0x8000)) >> 10) - a5;
                if ((mapAngle_FC1E0_FC1D0[v39] & 8) != 0)
                    *(_DWORD*)(v29 + 4) -= v41 >> 10;
                else
                    v41 = 0;
                v42 = (v220 << 8) + 8 * v41;
                if (v38 <= dword_B5CF0_B5CE0)
                    goto LABEL_42;
                if (v38 < dword_B5D0C_B5CFC)
                {
                    v42 = v42 * (__int64)(dword_B5D0C_B5CFC - v38) / dword_B5CEC_B5CDC;
                LABEL_42:
                    *(_DWORD*)(v29 + 32) = v42;
                    goto LABEL_43;
                }
                *(_DWORD*)(v29 + 32) = 0;
            LABEL_43:
                v43 = fowDist_B5D14_B5D04 * *(_DWORD*)(v29 + 8);
                *(_DWORD*)(v29 + 20) = dword_B5CFC_B5CEC + fowDist_B5D14_B5D04 * *(int32*)(v29 + 4) / v37;
                *(_DWORD*)(v29 + 28) = dword_B5CFC_B5CEC + v43 / v37;
                LOBYTE(v44) = v221[2] + v231;
                HIBYTE(v44) = v221[3] + HIBYTE(v231);
                v45 = mapTerrainType_CC1E0_CC1D0[v44];
                *(_BYTE*)(v29 + 41) = v45;
                if (byte_9020C[v45])
                    *(_BYTE*)(v29 + 38) |= 0x80u;
                if (byte_90168[*(unsigned __int8*)(v29 + 41)])
                    *(_BYTE*)(v29 + 39) |= 0x10u;
                *(_BYTE*)(v29 + 43) = byte_900C4[*(unsigned __int8*)(v29 + 41)];
                *(_BYTE*)(v29 + 42) = v223 + (((int)(unsigned __int8)mapAngle_FC1E0_FC1D0[v44] >> 2) & 0x1C);
                LOBYTE(v44) = v221[4] + v44;
                HIBYTE(v44) += v221[5];
                *(_WORD*)(v29 + 36) = mapEntityIndex_10C1E0_10C1D0[v44];
            LABEL_49:
                v46 = v231;
                v47 = v221;
                *(_WORD*)(v29 + 38) |= ((_BYTE)v231 + HIBYTE(v231)) & 1;
                LOBYTE(v231) = v47[8] + v46;
                v48 = v221[9] + HIBYTE(v231);
                HIBYTE(v231) = v48;
                v29 += 44;
                --v242;
            } while (v242);
            v49 = v221[6] + v231;
            HIBYTE(v231) = v221[7] + v48;
            LOBYTE(v231) = v49;
            if (!--v233)
            {
                v50 = 840;
                v51 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
                do
                {
                    //adress 1FBEB6
                    if (compare_index_next1 == 0x347)
                    {
                        compare_index_next1++;
                        compare_index_next1--;
                    }
                    compare_index_next1++;
                    v52 = ((cos_B5CE8_B5CD8 * *(int32*)(v51 + 16) - sin_B5CD4_B5CC4 * *(int32*)(v51 + 28)) >> 16) + dword_B5D08_B5CF8;
                    v53 = *(_DWORD*)(v51 + 16) * sin_B5CD4_B5CC4;
                    v54 = heightViewPort_B5CE4_B5CD4 - ((v53 + cos_B5CE8_B5CD8 * *(int32*)(v51 + 20)) >> 16);
                    v55 = cos_B5CE8_B5CD8 * *(_DWORD*)(v51 + 28);
                    *(_DWORD*)(v51 + 16) = ((cos_B5CE8_B5CD8 * *(int32*)(v51 + 16) - sin_B5CD4_B5CC4 * *(int32*)(v51 + 20)) >> 16)
                        + dword_B5D08_B5CF8;
                    v56 = v53 + v55;
                    v57 = heightViewPort_B5CE4_B5CD4;
                    *(_DWORD*)(v51 + 24) = v52;
                    *(_DWORD*)(v51 + 28) = v57 - (v56 >> 16);
                    v58 = *(_DWORD*)(v51 + 16);
                    *(_DWORD*)(v51 + 20) = v54;
                    if (v58 >= 0)
                    {
                        if (widthViewPort_93AD8 <= v58)
                            *(_BYTE*)(v51 + 38) |= 0x10u;
                    }
                    else
                    {
                        *(_BYTE*)(v51 + 38) |= 8u;
                    }
                    v59 = *(_DWORD*)(v51 + 20);
                    if (v59 >= 0)
                    {
                        if (heightViewPort_93ADC <= v59)
                            *(_BYTE*)(v51 + 38) |= 0x40u;
                    }
                    else
                    {
                        *(_BYTE*)(v51 + 38) |= 0x20u;
                    }
                    if (*(int*)(v51 + 24) >= 0)
                    {
                        if (widthViewPort_93AD8 <= *(int*)(v51 + 24))
                            *(_BYTE*)(v51 + 39) |= 2u;
                    }
                    else
                    {
                        *(_BYTE*)(v51 + 39) |= 1u;
                    }
                    v60 = *(_DWORD*)(v51 + 28);
                    if (v60 >= 0)
                    {
                        if (heightViewPort_93ADC <= v60)
                            *(_BYTE*)(v51 + 39) |= 8u;
                    }
                    else
                    {
                        *(_BYTE*)(v51 + 39) |= 4u;
                    }
                    v51 += 44;
                    --v50;
                } while (v50);
                if (a5 < 4096)
                {

                    //adress 0x1FBFCB
                    //debug
#ifdef debug1
                    if (compare_index_1FBFCB == 0x0)
                    {
                        compare_index_1FBFCB++;
                        compare_index_1FBFCB--;
                    }
                    //add_compare(0x1FBFCB, true, true);
                    compare_index_1FBFCB++;
#endif debug1
                    //debug
                    v61 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 35200;
                    v240 = 20;
                    while (1)
                    {
                        v62 = v61;
                        v241 = 39;
                        do
                        {
                            //adress 0x1FBFF0
                                       //debug
#ifdef debug1
                            if (compare_index_1FBFF0 == 0x18f)
                            {
                                compare_index_1FBFF0++;
                                compare_index_1FBFF0--;
                            }
                            //add_compare(0x1FBFF0, true, true);
                            compare_index_1FBFF0++;
#endif debug1
                            //debug

                            v213x[0] = *(_DWORD*)(v62 + 24);
                            v213x[1] = *(_DWORD*)(v62 + 28);
                            v63 = *(_DWORD*)(v62 + 32);
                            v62 += 44;
                            v213x[4] = v63;
                            v64 = *(_BYTE*)(v62 - 6);
                            if ((*(_BYTE*)(v62 + 38) & 4) != 0)
                                break;
                            v208x[0] = *(_DWORD*)(v62 + 24);
                            v208x[1] = *(_DWORD*)(v62 + 28);
                            v208x[4] = *(_DWORD*)(v62 + 32);
                            v65 = *(_BYTE*)(v62 + 38);
                            v203x[0] = *(_DWORD*)(v62 - 1736);
                            v203x[1] = *(_DWORD*)(v62 - 1732);
                            v203x[4] = (int)*(int**)(v62 - 1728);
                            v66 = *(_BYTE*)(v62 - 1722) | v65 | v64;
                            v198x[0] = *(_DWORD*)(v62 - 1780);
                            v67 = *(_DWORD*)(v62 - 1776);
                            v68 = v62 - 1760;
                            v198x[1] = v67;
                            v69 = *(_DWORD*)(v68 - 12);
                            v68 -= 44;
                            v198x[4] = (int)(int*)v69;
                            v70 = *(_BYTE*)(v68 + 38);
                            v71 = v68 + 1760;
                            v72 = v70 | v66;
                            if (*(_BYTE*)(v71 + 41))
                            {
                                if ((*(_BYTE*)(v71 + 39) & 0x10) != 0)
                                {
                                    byte_967E1 = 7;
                                    byte_967E0 = ((int)v198x[4] + (int)v203x[4] + v208x[4] + v213x[4]) >> 18;
                                }
                                else
                                {
                                    byte_967E1 = 5;
                                }
                                if ((v72 & 2) == 0)
                                {
                                    v73 = (int*)((char*)&unk_902DC + 32 * *(unsigned __int8*)(v71 + 42));
                                    v213x[2] = v73[0];
                                    v213x[3] = v73[1];
                                    v208x[2] = v73[2];
                                    v208x[3] = v73[3];
                                    v203x[2] = v73[4];
                                    v203x[3] = v73[5];
                                    v198x[2] = v73[6];
                                    v198x[3] = v73[7];
                                    actTexture_93AD0 = dword_9334C[*(unsigned __int8*)(v71 + 41)].p;
                                    v74 = *(_BYTE*)(v71 + 38);
                                    byte_967E1 = 5;
                                    if ((v74 & 1) != 0)
                                    {
                                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v198x[0], (uint32*)&v208x[0]);
                                        DrawTriangle_729A3_72EB3_old((uint32*)&v198x[0], (uint32*)&v203x[0], (uint32*)&v208x[0]);
                                    }
                                    else
                                    {
                                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v208x[0]);
                                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v198x[0], (uint32*)&v203x[0]);
                                    }
                                }
                                if (!*(_WORD*)(v71 + 36))
                                    goto LABEL_85;
                            LABEL_84:
                                DrawSprite_2FC50_2FC90((Type_BegBscreen*)v71);
                                goto LABEL_85;
                            }
                            if (*(_WORD*)(v71 + 36))
                                goto LABEL_84;
                        LABEL_85:
                            v62 = v71 + 44;
                            --v241;
                        } while (v241);
                        if (v241)
                            break;
                    LABEL_101:
                        v61 -= 1760;
                        if (!--v240)
                            goto LABEL_102;
                    }
                    v75 = v62 - 44;
                    v76 = v61 + 1672;
                    while (2)
                    {
                        v213x[0] = *(_DWORD*)(v76 + 24);
                        v213x[1] = *(_DWORD*)(v76 + 28);
                        v213x[4] = *(_DWORD*)(v76 + 32);
                        v77 = *(_BYTE*)(v76 + 38);
                        v208x[0] = *(_DWORD*)(v76 + 68);
                        v208x[1] = *(_DWORD*)(v76 + 72);
                        v208x[4] = *(_DWORD*)(v76 + 76);
                        v78 = *(_BYTE*)(v76 + 82) | v77;
                        v203x[0] = *(_DWORD*)(v76 - 1692);
                        v79 = *(_DWORD*)(v76 - 1688);
                        v80 = v76 + 44;
                        v203x[1] = v79;
                        v81 = *(_DWORD*)(v80 - 1728);
                        v80 -= 1760;
                        v203x[4] = (int)(int*)v81;
                        v82 = *(_BYTE*)(v80 + 38);
                        v198x[0] = *(_DWORD*)(v80 - 20);
                        v83 = *(_DWORD*)(v80 - 16);
                        v80 -= 44;
                        v198x[1] = v83;
                        v198x[4] = (int)*(int**)(v80 + 32);
                        LOBYTE(v83) = *(_BYTE*)(v80 + 38);
                        v84 = v80 + 1760;
                        v85 = v83 | v82 | v78;
                        if (*(_BYTE*)(v84 + 41))
                        {
                            if ((*(_BYTE*)(v84 + 39) & 0x10) != 0)
                            {
                                byte_967E1 = 7;
                                byte_967E0 = ((int)v198x[4] + (int)v203x[4] + v208x[4] + v213x[4]) >> 18;
                            }
                            else
                            {
                                byte_967E1 = 5;
                            }
                            if ((v85 & 2) == 0)
                            {
                                v86 = (int*)((char*)&unk_902DC + 32 * *(unsigned __int8*)(v84 + 42));
                                v213x[2] = *v86;
                                v213x[3] = v86[1];
                                v208x[2] = v86[2];
                                v208x[3] = v86[3];
                                v203x[2] = v86[4];
                                v203x[3] = v86[5];
                                v198x[2] = v86[6];
                                v198x[3] = v86[7];
                                v87 = *(unsigned __int8*)(v84 + 41);
                                byte_967E1 = 5;
                                v88 = *(_BYTE*)(v84 + 38);
                                actTexture_93AD0 = dword_9334C[v87].p;
                                if ((v88 & 1) != 0)
                                {
                                    DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v198x[0], (uint32*)&v208x[0]);
                                    DrawTriangle_729A3_72EB3_old((uint32*)&v198x[0], (uint32*)&v203x[0], (uint32*)&v208x[0]);
                                }
                                else
                                {
                                    DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v208x[0]);
                                    DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v198x[0], (uint32*)&v203x[0]);
                                }
                            }
                            if (*(_WORD*)(v84 + 36))
                                LABEL_99:
                            DrawSprite_2FC50_2FC90((Type_BegBscreen*)v84);
                        }
                        else if (*(_WORD*)(v84 + 36))
                        {
                            goto LABEL_99;
                        }
                        v76 = v84 - 44;
                        if (v76 < v75)
                            goto LABEL_101;
                        continue;
                    }
                }
            LABEL_102:
                v89 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 35200;
                v239 = 20;
                while (2)
                {
                    //  adress 1FC3D0
           //debug
#ifdef debug1
                    add_compare(0x1FC3D0, true, true);
#endif debug1
                    //debug
                    v90 = (int*)&unk_902DC;
                    v91 = v89;
                    v237 = 39;
                LABEL_104:
                    //  adress 1FC3E0
          //debug
#ifdef debug1
          /*if (compare_index_2A700 == 0xad6)
          {
              compare_index_2A700++;
              compare_index_2A700--;
          }
          add_compare(0x1FC3E0, true, true);
          compare_index_2A700++;*/
#endif debug1
          //debug
#ifdef COMPARE_WITH
                    CompareWith((char*)"tempBegBscreen10", 0, 200, (uint8*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC);
                    CompareWith((char*)"fullframe2", 0, 320 * 200, (uint8*)begWscreen_2ECFF4_2ECFE4);
                    CompareWith((char*)"v91", (v91 - (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC) / 44);
#endif

                    v213x[0] = *(_DWORD*)(v91 + 16);
                    v213x[1] = *(_DWORD*)(v91 + 20);
                    v92 = *(_DWORD*)(v91 + 32);
                    v91 += 44;
                    v213x[4] = v92;
                    v93 = *(_BYTE*)(v91 - 6);
                    v94 = v93;
                    if ((*(_BYTE*)(v91 + 38) & 4) != 0)
                    {
                    LABEL_124:
                        if (!v237)
                        {
                        LABEL_145:
                            v89 -= 1760;
                            LOBYTE(v125) = --v239;
                            if (!v239)
                                return;
                            continue;
                        }
                        v108 = v91 - 44;
                        v109 = v89 + 1672;
                        while (2)
                        {

                            //  adress 1FC68A
                            //debug
#ifdef debug1
                            if (compare_index_1FC68A == 0x20)
                            {
                                compare_index_1FC68A++;
                                compare_index_1FC68A--;
                            }

                            uint8_t origbyte20 = 0;
                            uint8_t remakebyte20 = 0;
                            char buffer1[500];
                            sprintf(buffer1, "%08X-00273CA8", 0x1FC68A);
                            int comp20 = compare_with_sequence(buffer1, (uint8_t*)&scaledSprX_B5CA8_B5C98, 0x1FC68A, compare_index_1FC68A - 0, 4, 4, &origbyte20, &remakebyte20, 0, true);


                            //add_compare(0x1FC68A, true, true);
                            compare_index_1FC68A++;
#endif debug1
                            //debug
#ifdef COMPARE_WITH
                            CompareWith((char*)"fullframe5", 0, 320 * 200, (uint8*)begWscreen_2ECFF4_2ECFE4);
#endif

                            v213x[0] = *(_DWORD*)(v109 + 16);
                            v213x[1] = *(_DWORD*)(v109 + 20);
                            v213x[4] = *(_DWORD*)(v109 + 32);
                            v110 = *(_BYTE*)(v109 + 38);
                            v208x[0] = *(_DWORD*)(v109 + 60);
                            v208x[1] = *(_DWORD*)(v109 + 64);
                            v208x[4] = *(_DWORD*)(v109 + 76);
                            v111 = *(_BYTE*)(v109 + 82);
                            v203x[0] = *(_DWORD*)(v109 - 1700);
                            v203x[1] = *(_DWORD*)(v109 - 1696);
                            v112 = v110;
                            v203x[4] = (int)*(int**)(v109 - 1684);
                            v113 = *(_BYTE*)(v109 - 1678);
                            v114 = v113 | v111 | v110;
                            v115 = v113 & v111 & v112;
                            v116 = *(_DWORD*)(v109 - 1744);
                            v117 = v109 + 44;
                            v198x[0] = v116;
                            v118 = *(_DWORD*)(v117 - 1784);
                            v117 -= 1760;
                            v198x[1] = v118;
                            v119 = *(_DWORD*)(v117 - 12);
                            v117 -= 44;
                            v198x[4] = (int)(int*)v119;
                            v120 = *(_BYTE*)(v117 + 38);
                            v121 = v117 + 1760;
                            v122 = v120 | v114;
                            v123 = v120 & v115;
                            if (*(char*)(v121 + 38) >= 0)
                            {
                                if ((*(_BYTE*)(v121 + 39) & 0x10) != 0)
                                {
                                    byte_967E1 = 7;
                                    v90 = (int*)v203x[4];
                                    byte_967E0 = ((int)v198x[4] + (int)v203x[4] + v208x[4] + v213x[4]) >> 18;
                                }
                                else
                                {
                                    byte_967E1 = 5;
                                }
                                if ((v122 & 2) == 0 && (v123 & 0x78) == 0)
                                {
                                    v90 = (int*)((char*)&unk_902DC + 32 * *(unsigned __int8*)(v121 + 42));
                                    v213x[2] = *v90;
                                    v213x[3] = v90[1];
                                    v208x[2] = v90[2];
                                    v208x[3] = v90[3];
                                    v203x[2] = v90[4];
                                    v203x[3] = v90[5];
                                    v198x[2] = v90[6];
                                    v198x[3] = v90[7];
                                    actTexture_93AD0 = dword_9334C[*(unsigned __int8*)(v121 + 41)].p;
                                    if ((*(_BYTE*)(v121 + 38) & 1) != 0)
                                    {
                                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
                                        DrawTriangle_729A3_72EB3_old((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                                    }
                                    else
                                    {
                                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
                                    }
                                }
                                if (*(_WORD*)(v121 + 36))
                                    LABEL_143:
                                DrawSprite_2DCB0_2DCF0((Type_BegBscreen*)v121);
                            }
                            else
                            {
                                byte_967E1 = 26;
                                if ((v122 & 2) == 0 && (v123 & 0x78) == 0)
                                {
                                    v90 = (int*)((char*)&unk_902DC + 32 * *(unsigned __int8*)(v121 + 42));
                                    v213x[2] = *v90;
                                    v213x[3] = v90[1];
                                    v208x[2] = v90[2];
                                    v208x[3] = v90[3];
                                    v203x[2] = v90[4];
                                    v203x[3] = v90[5];
                                    v198x[2] = v90[6];
                                    v198x[3] = v90[7];
                                    v124 = *(_BYTE*)(v121 + 38);
                                    actTexture_93AD0 = dword_9334C[*(unsigned __int8*)(v121 + 41)].p;
                                    if ((v124 & 1) != 0)
                                    {
                                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
                                        DrawTriangle_729A3_72EB3_old((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                                    }
                                    else
                                    {
                                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
                                    }
                                }
                                if (*(_WORD*)(v121 + 36))
                                    goto LABEL_143;
                            }
                            v109 = v121 - 44;
                            if (v109 < v108)
                                goto LABEL_145;
                            continue;
                        }
                    }
                    break;
                }
                v208x[0] = *(_DWORD*)(v91 + 16);
                v208x[1] = *(_DWORD*)(v91 + 20);
                v208x[4] = *(_DWORD*)(v91 + 32);
                v95 = *(_BYTE*)(v91 + 38);
                v96 = v95 | v93;
                v97 = v95 & v94;
                v203x[0] = *(_DWORD*)(v91 - 1744);
                v203x[1] = *(_DWORD*)(v91 - 1740);
                v98 = *(_DWORD*)(v91 - 1728);
                v99 = v91 - 1760;
                v203x[4] = (int)(int*)v98;
                v100 = *(_BYTE*)(v99 + 38);
                v198x[0] = *(_DWORD*)(v99 - 28);
                v101 = *(_DWORD*)(v99 - 24);
                v99 -= 44;
                v198x[1] = v101;
                v198x[4] = (int)*(int**)(v99 + 32);
                BYTE1(v101) = *(_BYTE*)(v99 + 38);
                v102 = v99 + 1760;
                v103 = BYTE1(v101) | v100 | v96;
                v104 = BYTE1(v101) & v100 & v97;
                if (*(char*)(v102 + 38) >= 0)
                {
                    if ((*(_BYTE*)(v102 + 39) & 0x10) != 0)
                    {
                        byte_967E1 = 7;
                        byte_967E0 = ((int)v198x[4] + (int)v203x[4] + v208x[4] + v213x[4]) >> 18;
                    }
                    else
                    {
                        byte_967E1 = 5;
                    }
                    if ((v103 & 2) == 0 && (v104 & 0x78) == 0)
                    {
                        v106 = 32 * *(unsigned __int8*)(v102 + 42);
                        v213x[2] = *(_DWORD*)((char*)&unk_902DC + v106);
                        v213x[3] = *(_DWORD*)((char*)&unk_902DC + v106 + 4);
                        v208x[2] = *(_DWORD*)((char*)&unk_902DC + v106 + 8);
                        v208x[3] = *(_DWORD*)((char*)&unk_902DC + v106 + 12);
                        v203x[2] = *(_DWORD*)((char*)&unk_902DC + v106 + 16);
                        v203x[3] = *(_DWORD*)((char*)&unk_902DC + v106 + 20);
                        v198x[2] = *(_DWORD*)((char*)&unk_902DC + v106 + 24);
                        v198x[3] = *(_DWORD*)((char*)&unk_902DC + v106 + 28);
                        v107 = *(_BYTE*)(v102 + 38);
                        actTexture_93AD0 = dword_9334C[*(unsigned __int8*)(v102 + 41)].p;
                        if ((v107 & 1) != 0)
                        {
                            DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
                            DrawTriangle_729A3_72EB3_old((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                        }
                        else
                        {
                            DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                            DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
                        }
                    }
                    if (*(_WORD*)(v102 + 36))
                        LABEL_122:
                    DrawSprite_2DCB0_2DCF0((Type_BegBscreen*)v102);
                }
                else
                {
                    byte_967E1 = 26;
                    if ((v103 & 2) == 0 && (v104 & 0x78) == 0)
                    {
                        v105 = (int*)((char*)&unk_902DC + 32 * *(unsigned __int8*)(v102 + 42));
                        v213x[2] = *v105;
                        v213x[3] = v105[1];
                        v208x[2] = v105[2];
                        v208x[3] = v105[3];
                        v203x[2] = v105[4];
                        v203x[3] = v105[5];
                        v198x[2] = v105[6];
                        v198x[3] = v105[7];
                        actTexture_93AD0 = dword_9334C[*(unsigned __int8*)(v102 + 41)].p;
                        if ((*(_BYTE*)(v102 + 38) & 1) != 0)
                        {
                            DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
                            DrawTriangle_729A3_72EB3_old((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                        }
                        else
                        {
                            DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                            DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
                        }
                    }
                    if (*(_WORD*)(v102 + 36))
                        goto LABEL_122;
                }
                v91 = v102 + 44;
                if (!--v237)
                    goto LABEL_124;
                goto LABEL_104;
            }
        }
    }
    //adress 1FC930
  //debug
#ifdef debug1
    add_compare(0x1FC930, true, true);
#endif debug1
    //debug
    v238 = 21;
    do
    {
        v243 = 40;
        do
        {
            v126 = *(_DWORD*)v29 * *(_DWORD*)v29;
            v127 = *(_DWORD*)(v29 + 12);
            v222 = ((unsigned __int8)mapShading_EC1E0_EC1D0[v231] << 8) + 128;
            v128 = v127 * v127;
            *(_WORD*)(v29 + 36) = 0;
            v129 = v127 * v127 + v126;
            if (v127 > -256 && v129 < dword_B5D00_B5CF0)
            {
                if (v127 < 128)
                    v127 = 128;
                v130 = v231;
                *(_DWORD*)(v29 + 16) = fowDist_B5D14_B5D04 * *(_DWORD*)v29 / v127;
                *(_DWORD*)(v29 + 4) = 32 * (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v130] - a5;
                v131 = (unsigned __int16)*(_DWORD*)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 13341) << 6;
                v227 = sin_90B4C[(v131 + (HIBYTE(v231) << 7)) & 0x7FF] >> 8;
                v132 = v227 * (sin_90B4C[(((unsigned __int8)v231 << 7) + v131) & 0x7FF] >> 8);
                if ((mapAngle_FC1E0_FC1D0[v130] & 8) != 0)
                    *(_DWORD*)(v29 + 4) -= v132 >> 10;
                else
                    v132 = 0;
                v133 = (v222 << 8) + 8 * v132;
                if (v129 > dword_B5CF0_B5CE0)
                {
                    if (v129 >= dword_B5D0C_B5CFC)
                    {
                        *(_DWORD*)(v29 + 32) = 0;
                    LABEL_161:
                        *(_DWORD*)(v29 + 20) = dword_B5CFC_B5CEC + fowDist_B5D14_B5D04 * *(_DWORD*)(v29 + 4) / v127;
                        LOBYTE(v134) = v221[2] + v231;
                        HIBYTE(v134) = v221[3] + HIBYTE(v231);
                        *(_BYTE*)(v29 + 41) = mapTerrainType_CC1E0_CC1D0[v134];
                        *(_BYTE*)(v29 + 43) = byte_900C4[*(unsigned __int8*)(v29 + 41)];
                        HIWORD(v25) = HIWORD(v223);
                        *(_BYTE*)(v29 + 42) = v223 + (((int)(unsigned __int8)mapAngle_FC1E0_FC1D0[v134] >> 2) & 0x1C);
                        LOBYTE(v134) = v221[4] + v134;
                        HIWORD(v128) = 0;
                        HIBYTE(v134) += v221[5];
                        *(_WORD*)(v29 + 36) = mapEntityIndex_10C1E0_10C1D0[v134];
                        goto LABEL_163;
                    }
                    v133 = v133 * (__int64)(dword_B5D0C_B5CFC - v129) / dword_B5CEC_B5CDC;
                }
                *(_DWORD*)(v29 + 32) = v133;
                goto LABEL_161;
            }
            *(_BYTE*)(v29 + 38) |= 2u;
        LABEL_163:
            LOWORD(v128) = HIBYTE(v231);
            LOWORD(v25) = (unsigned __int8)v231;
            v135 = v25 + v128;
            LOWORD(v25) = *(_WORD*)(v29 + 38);
            LOWORD(v135) = v135 & 1;
            v25 |= v135;
            v136 = v221;
            *(_WORD*)(v29 + 38) = v25;
            v137 = v136[8] + v231;
            LOBYTE(v136) = v221[9];
            v29 += 44;
            LOBYTE(v231) = v137;
            HIBYTE(v231) += (_BYTE)v136;
            --v243;
        } while (v243);
        LOBYTE(v231) = v221[6] + v137;
        HIBYTE(v231) += v221[7];
        --v238;
    } while (v238);
#ifdef COMPARE_WITH
    CompareWith((char*)"tempBegBscreen6", 0, 200, (uint8*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC);
#endif
    //adress 1FCBE3
  //debug
#ifdef debug1
    add_compare(0x1FCBE3, true, true);
#endif debug1
    //debug
    v138 = a7 & 0x7FF;
    v139 = 840;
    v140 = sin_90B4C[v138];
    v141x = cos_9134C[v138];
    sin_B5CD4_B5CC4 = v140;
    cos_B5CE8_B5CD8 = v141x;
    v142 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
    do
    {
        v143 = heightViewPort_B5CE4_B5CD4;
        v144 = (sin_B5CD4_B5CC4 * *(_DWORD*)(v142 + 16) + cos_B5CE8_B5CD8 * *(_DWORD*)(v142 + 20)) >> 16;
        *(_DWORD*)(v142 + 16) = ((*(_DWORD*)(v142 + 16) * cos_B5CE8_B5CD8 - sin_B5CD4_B5CC4 * *(_DWORD*)(v142 + 20)) >> 16)
            + dword_B5D08_B5CF8;
        v145 = v143 - v144;
        v146 = *(_DWORD*)(v142 + 16);
        *(_DWORD*)(v142 + 20) = v145;
        if (v146 >= 0)
        {
            if (widthViewPort_93AD8 <= *(int*)(v142 + 16))
                *(_BYTE*)(v142 + 38) |= 0x10u;
        }
        else
        {
            *(_BYTE*)(v142 + 38) |= 8u;
        }
        v147 = *(int**)(v142 + 20);
        if ((int)v147 >= 0)
        {
            if (heightViewPort_93ADC <= (int)v147)
                *(_BYTE*)(v142 + 38) |= 0x40u;
        }
        else
        {
            *(_BYTE*)(v142 + 38) |= 0x20u;
        }
        v142 += 44;
        --v139;
    } while (v139);
    //adress 1FCCA3
  //debug
#ifdef debug1
    add_compare(0x1FCCA3, true, true);
#endif debug1
    //debug
    if (*(_BYTE*)(dword_AE400_AE3F0() + 8603) != 2 || *(_BYTE*)(dword_AE400_AE3F0() + 8606))
    {
        v168 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 35200;
        v244 = 20;
        do
        {
            v169 = v168;
            v232 = 39;
            do
            {
                v213x[0] = *(_DWORD*)(v169 + 16);
                v213x[1] = *(_DWORD*)(v169 + 20);
                v125 = *(_DWORD*)(v169 + 32);
                v169 += 44;
                v213x[4] = v125;
                v170 = *(_BYTE*)(v169 - 6);
                LOBYTE(v125) = *(_BYTE*)(v169 + 38);
                v171 = v170;
                if ((v125 & 4) != 0)
                    break;
                v208x[0] = *(_DWORD*)(v169 + 16);
                v208x[1] = *(_DWORD*)(v169 + 20);
                v208x[4] = *(_DWORD*)(v169 + 32);
                v172 = *(_BYTE*)(v169 + 38);
                v173 = v172 | v170;
                v174 = v172 & v171;
                v203x[0] = *(_DWORD*)(v169 - 1744);
                v203x[1] = *(_DWORD*)(v169 - 1740);
                v175 = *(_DWORD*)(v169 - 1728);
                v176 = v169 - 1760;
                v203x[4] = (int)(int*)v175;
                v177 = *(_BYTE*)(v176 + 38);
                v198x[0] = *(_DWORD*)(v176 - 28);
                v178 = *(_DWORD*)(v176 - 24);
                v176 -= 44;
                v198x[1] = v178;
                v125 = *(_DWORD*)(v176 + 32);
                v198x[4] = (int)(int*)v125;
                BYTE1(v125) = *(_BYTE*)(v176 + 38);
                v179 = v176 + 1760;
                v180 = BYTE1(v125) | v177 | v173;
                v181 = BYTE1(v125) & v177 & v174;
                if ((*(_BYTE*)(v179 + 39) & 0x10) != 0)
                {
                    byte_967E1 = 7;
                    v147 = (int*)v203x[4];
                    v125 = ((int)v198x[4] + (int)v203x[4] + v208x[4] + v213x[4]) >> 18;
                    byte_967E0 = v125;
                }
                else
                {
                    byte_967E1 = 5;
                }
                if ((v180 & 2) == 0 && (v181 & 0x78) == 0)
                {
                    v147 = (int*)((char*)&unk_902DC + 32 * *(unsigned __int8*)(v179 + 42));
                    v213x[2] = *v147;
                    v213x[3] = v147[1];
                    v208x[2] = v147[2];
                    v208x[3] = v147[3];
                    v203x[2] = v147[4];
                    v203x[3] = v147[5];
                    v198x[2] = v147[6];
                    v198x[3] = v147[7];
                    v182 = *(_BYTE*)(v179 + 38);
                    actTexture_93AD0 = dword_9334C[*(unsigned __int8*)(v179 + 41)].p;
                    if ((v182 & 1) != 0)
                    {
                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
                        v125 = (int)&v198x[0];
                        DrawTriangle_729A3_72EB3_old((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                    }
                    else
                    {
                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                        v125 = (int)&v213x[0];
                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
                    }
                }
                if (*(_WORD*)(v179 + 36))
                    DrawSprite_2DCB0_2DCF0((Type_BegBscreen*)v179);
                v169 = v179 + 44;
                --v232;
            } while (v232);
            if (v232)
            {
                v183 = v169 - 44;
                v184 = v168 + 1672;
                do
                {
                    v213x[0] = *(_DWORD*)(v184 + 16);
                    v213x[1] = *(_DWORD*)(v184 + 20);
                    v213x[4] = *(_DWORD*)(v184 + 32);
                    v185 = *(_BYTE*)(v184 + 38);
                    v208x[0] = *(_DWORD*)(v184 + 60);
                    v208x[1] = *(_DWORD*)(v184 + 64);
                    v208x[4] = *(_DWORD*)(v184 + 76);
                    v186 = v185;
                    v187 = *(_BYTE*)(v184 + 82);
                    v188 = v187 | v185;
                    v189 = v187 & v186;
                    v203x[0] = *(_DWORD*)(v184 - 1700);
                    v190 = *(_DWORD*)(v184 - 1696);
                    v191 = v184 + 44;
                    v203x[1] = v190;
                    v192 = *(_DWORD*)(v191 - 1728);
                    v191 -= 1760;
                    v203x[4] = (int)(int*)v192;
                    v193 = *(_BYTE*)(v191 + 38);
                    v198x[0] = *(_DWORD*)(v191 - 28);
                    v125 = *(_DWORD*)(v191 - 24);
                    v191 -= 44;
                    v198x[1] = v125;
                    v198x[4] = (int)(int)*(int**)(v191 + 32);
                    LOBYTE(v125) = *(_BYTE*)(v191 + 38);
                    v194 = v191 + 1760;
                    v195 = v125 | v193 | v188;
                    v196 = v125 & v193 & v189;
                    if ((*(_BYTE*)(v194 + 39) & 0x10) != 0)
                    {
                        byte_967E1 = 7;
                        v147 = (int*)v198x[4];
                        v125 = ((int)v198x[4] + (int)v203x[4] + v208x[4] + v213x[4]) >> 18;
                        byte_967E0 = v125;
                    }
                    else
                    {
                        byte_967E1 = 5;
                    }
                    if ((v195 & 2) == 0 && (v196 & 0x78) == 0)
                    {
                        v147 = (int*)((char*)&unk_902DC + 32 * *(unsigned __int8*)(v194 + 42));
                        v213x[2] = *v147;
                        v213x[3] = v147[1];
                        v208x[2] = v147[2];
                        v208x[3] = v147[3];
                        v203x[2] = v147[4];
                        v203x[3] = v147[5];
                        v198x[2] = v147[6];
                        v198x[3] = v147[7];
                        actTexture_93AD0 = dword_9334C[*(unsigned __int8*)(v194 + 41)].p;
                        if ((*(_BYTE*)(v194 + 38) & 1) != 0)
                        {
                            DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
                            v125 = (int)&v198x[0];
                            DrawTriangle_729A3_72EB3_old((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                        }
                        else
                        {
                            DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                            v125 = (int)&v213x[0];
                            DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
                        }
                    }
                    if (*(_WORD*)(v194 + 36))
                        DrawSprite_2DCB0_2DCF0((Type_BegBscreen*)v194);
                    v184 = v194 - 44;
                } while (v184 >= v183);
            }
            v168 -= 1760;
            --v244;
        } while (v244);
    }
    else
    {
        byte_967E1 = 1;
        v148 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 35200;
        v245 = 20;
        do
        {
            v149 = v148;
            v236 = 39;
            do
            {
                v213x[0] = *(_DWORD*)(v149 + 16);
                v213x[1] = *(_DWORD*)(v149 + 20);
                v125 = 350 * (5120 - *(_DWORD*)(v149 + 12));
                v149 += 44;
                v213x[4] = 0x400000 - v125;
                v150 = *(_BYTE*)(v149 - 6);
                v151 = v150;
                if ((*(_BYTE*)(v149 + 38) & 4) != 0)
                    break;
                v208x[0] = *(_DWORD*)(v149 + 16);
                v208x[1] = *(_DWORD*)(v149 + 20);
                v208x[4] = 0x400000 - 350 * (5120 - *(_DWORD*)(v149 + 12));
                v152 = *(_BYTE*)(v149 + 38);
                v203x[0] = *(_DWORD*)(v149 - 1744);
                v203x[1] = *(_DWORD*)(v149 - 1740);
                v203x[4] = (int)(int*)(0x400000 - 350 * (5120 - *(_DWORD*)(v149 - 1748)));
                v153 = *(_BYTE*)(v149 - 1722);
                v198x[0] = *(_DWORD*)(v149 - 1788);
                v154 = v153 | v152 | v150;
                v155 = v153 & v152 & v151;
                v198x[1] = *(_DWORD*)(v149 - 1784);
                v198x[4] = (int)(int*)(0x400000 - 350 * (5120 - *(_DWORD*)(v149 - 1792)));
                LOBYTE(v125) = *(_BYTE*)(v149 - 1766);
                v156 = v125 & v155;
                v157 = v149 - 1804 + 1760;
                if ((((unsigned __int8)v125 | v154) & 2) == 0 && (v156 & 0x78) == 0)
                {
                    if ((*(_BYTE*)(v157 + 38) & 1) != 0)
                    {
                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
                        v125 = (int)&v198x[0];
                        DrawTriangle_729A3_72EB3_old((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                    }
                    else
                    {
                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                        v125 = (int)&v213x[0];
                        DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
                    }
                }
                if (*(_WORD*)(v157 + 36))
                    DrawSprite3D_2F170_2F1B0(/*5120,*/ (Type_BegBscreen*)v157);
                v149 = v157 + 44;
                --v236;
            } while (v236);
            if (v236)
            {
                v158 = v149 - 44;
                v159 = v148 + 1672;
                do
                {
                    v213x[0] = *(_DWORD*)(v159 + 16);
                    v213x[1] = *(_DWORD*)(v159 + 20);
                    v213x[4] = 0x400000 - 350 * (5120 - *(_DWORD*)(v159 + 12));
                    v160 = *(_BYTE*)(v159 + 38);
                    v208x[0] = *(_DWORD*)(v159 + 60);
                    v208x[1] = *(_DWORD*)(v159 + 64);
                    v208x[4] = 0x400000 - 350 * (5120 - *(_DWORD*)(v159 + 56));
                    v161 = *(_BYTE*)(v159 + 82);
                    v162 = v161 & v160;
                    v203x[0] = *(_DWORD*)(v159 - 1700);
                    v203x[1] = *(_DWORD*)(v159 - 1696);
                    v203x[4] = (int)(int*)(0x400000 - 350 * (5120 - *(_DWORD*)(v159 - 1704)));
                    v163 = *(_BYTE*)(v159 - 1678);
                    v198x[0] = *(_DWORD*)(v159 - 1744);
                    v164 = v163 | v161 | v160;
                    v198x[1] = *(_DWORD*)(v159 - 1740);
                    v125 = 350 * (5120 - *(_DWORD*)(v159 - 1748));
                    v165 = v159 + 44;
                    v198x[4] = (int)(int*)(0x400000 - v125);
                    LOBYTE(v125) = *(_BYTE*)(v165 - 1766);
                    v166 = v125 & v163 & v162;
                    v167 = v165 - 1804 + 1760;
                    if ((((unsigned __int8)v125 | v164) & 2) == 0 && (v166 & 0x78) == 0)
                    {
                        if ((*(_BYTE*)(v167 + 38) & 1) != 0)
                        {
                            DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v198x[0]);
                            v125 = (int)&v198x[0];
                            DrawTriangle_729A3_72EB3_old((uint32*)&v198x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                        }
                        else
                        {
                            DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v208x[0], (uint32*)&v203x[0]);
                            v125 = (int)&v213x[0];
                            DrawTriangle_729A3_72EB3_old((uint32*)&v213x[0], (uint32*)&v203x[0], (uint32*)&v198x[0]);
                        }
                    }
                    if (*(_WORD*)(v167 + 36))
                        //DrawSprite_2F170_2F1B0(5120, v167);
                        DrawSprite3D_2F170_2F1B0((Type_BegBscreen*)v167);
                    v159 = v167 - 44;
                } while (v159 >= v158);
            }
            v148 -= 1760;
            --v245;
        } while (v245);
    }
}

int index1fd013 = 0;
int index1FD1D8 = 0;

//DrawSkyTerrainParticles_2A700_2A740(roll, tempFixPosX, tempFixPosY, tempYaw, posZ, pitch, roll, fow);
void DrawSkyTerrainParticles_2A700_2A740(__int16 posX, __int16 posY, __int16 yaw, int posZ, int pitch, __int16 roll, int fow)//1FB700_
{
	int tempYaw; // eax
	int yawAngle; // eax
	int tempSinCount; // ebp
	int tempSinShift; // edi
	//int tempCosCountSh; // ecx
	int powX; // ebx
	int tempY; // esi
	int sumPowXY; // ebx
	__int16 tempDiameter; // ax
	int tempSinXSin; // eax
	int tempShadCos; // eax
	int tempVar20; // esi
	int subTempVar28; // edx
	int tempVar32; // eax
	void (*v141)(); // eax
	int tempSubVar20; // edx
    Type_RenderPoint v198x; // [esp+0h] [ebp-E0h] BYREF
    Type_RenderPoint v203x; // [esp+18h] [ebp-C8h] BYREF
    Type_RenderPoint v208x; // [esp+30h] [ebp-B0h] BYREF
    Type_RenderPoint v213x; // [esp+48h] [ebp-98h] BYREF
	int tempCosShift; // [esp+60h] [ebp-80h]
	int tempShad; // [esp+68h] [ebp-78h]
	_BYTE* yawQuartal; // [esp+6Ch] [ebp-74h]
	int modYaw; // [esp+74h] [ebp-6Ch]
	void (*v224)(); // [esp+78h] [ebp-68h]
	int32 tempCos;
	int32 tempSin; // [esp+7Ch] [ebp-64h]
	int yawX; // [esp+80h] [ebp-60h]
	int tempSinDiaX;
	int tempSinDiaY; // [esp+84h] [ebp-5Ch]
	int tempHeightm;
	int tempCosCount; // [esp+88h] [ebp-58h]
	char v238; // [esp+B0h] [ebp-30h]
	char v243; // [esp+C4h] [ebp-1Ch]
	char v245; // [esp+CCh] [ebp-14h]

	const int textRows = 40;
	const int textColumns = 21;

	int yawY;

	uaxis_2d uPosX;
	uaxis_2d uPosY;

	uPosX.word = posX;
	uPosY.word = posY;

	byte_B5D3F_B5D2F = str_AE400_AE3F0->set.shadowsOn_8598;
	heightViewPort_B5CE4_B5CD4 = heightViewPort_93ADC >> 1;
	posX_B5D3C_B5D2C = posX;
	yaw_B5D38_B5D28 = yaw & 0x7FF;
	posY_B5D3A_B5D2A = posY;
	tempYaw = (yaw & 0x7FF) + 256;
	posZ_B5CF8_B5CE8 = posZ;
	dword_B5D08_B5CF8 = dword_902B0 + (widthViewPort_93AD8 >> 1);
	sin_B5CDC_B5CCC = sin_90B4C[tempYaw + 0x100];
	modYaw = (tempYaw >> 9) & 3;
	yawAngle = ((((yaw & 0x7FF) + 256) & 0x1FF) - 256) & 0x7FF;
	tempCos = cos_9134C[yawAngle];
	cos_B5D10_B5D00 = dword_9074C[tempYaw];
	tempSin = sin_90B4C[yawAngle];
	PrepRot_29C30_29C70(-roll & 0x7FF);
	fowDist_B5D14_B5D04 = (fow
		* Distance_410CE_4140E(
			widthViewPort_93AD8 * widthViewPort_93AD8
			+ heightViewPort_93ADC * heightViewPort_93ADC)) >> 8;
	yawQuartal = yawQuartal_902B4[modYaw];
	switch (modYaw)
	{
	case 0:
		yawY = -uPosX._axis_2d.x - 4864;
		yawX = uPosY._axis_2d.x - 256;
		break;
	case 1:
		yawY = -uPosY._axis_2d.x - 4864;
		yawX = -uPosX._axis_2d.x;
		break;
	case 2:
		yawY = uPosX._axis_2d.x - 4864;
		yawX = -uPosY._axis_2d.x;
		break;
	case 3:
		yawY = uPosY._axis_2d.x - 4864;
		yawX = uPosX._axis_2d.x - 256;
		break;
	default:
		break;
	}

    Type_BegBscreen* tempBegBscreen = (Type_BegBscreen*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
	tempSinCount = yawY * tempSin;	
	tempCosCount = yawY * tempCos;	
    tempCosShift = tempCos << 8;
	tempSinShift = tempSin << 8;
    int index = 0;
	for (int indexR = 0; indexR < textRows; indexR++)
	{
		for (int indexC = 0; indexC < textColumns; indexC++)
		{
			tempBegBscreen[index].x_0 = tempCosCount >> 16;
			tempBegBscreen[index].y_12 = tempSinCount >> 16;
			if (yawY < 0)
				tempBegBscreen[index].triangleDir_38.word = 0;
			else
				tempBegBscreen[index].triangleDir_38.word = 4;
			index += textRows;
		}
		index -= textRows * textColumns - 1;
		yawY += 256;
		tempSinCount += tempSinShift;
		tempCosCount += tempCosShift;
	}
	tempCosCount = tempCos * yawX;
    tempSinCount = tempSin * yawX;
	tempCosShift = tempCos << 8;
	tempSinShift = tempSin << 8;	
	index = 0;
	for (int indexC = 0; indexC < textColumns; indexC++)
	{
		for (int indexR = 0; indexR < textRows; indexR++)
		{
			tempBegBscreen[index].x_0 -= tempSinCount >> 16;
			tempBegBscreen[index].y_12 += tempCosCount >> 16;
			index++;
		}
		tempCosCount += tempCosShift;
		tempSinCount += tempSinShift;
		yawX += 256;
	}
	dword_B5D0C_B5CFC = 23658496;
	dword_B5CF0_B5CE0 = 14745600;
	dword_B5D00_B5CF0 = 26214400;
	dword_B5CEC_B5CDC = 8912896;
	dword_B5CFC_B5CEC = (widthViewPort_93AD8 * pitch) >> 8;
	//  adress 1FBposZ2_
	uaxis_2d yawXY;
	yawXY._axis_2d.x = yawQuartal[0] + uPosX._axis_2d.y;
	yawXY._axis_2d.y = yawQuartal[1] + uPosY._axis_2d.y;
	cos_B5CE8_B5CD8 = cos_9134C[roll & 0x7FF];
	sin_B5CD4_B5CC4 = sin_90B4C[roll & 0x7FF];
	int drawShift = 0;
	uint8 pattern = 0;
	if (str_AE400_AE3F0->set.mod3D_8603 == 2 && !str_AE400_AE3F0->set.var_u8_8606)
	{
		drawShift = pitchViewPort_93AD4 - widthViewPort_93AD8;
		pattern = 0x40;
        uint8* drawBuffer = beginFrame_93ACC;
		for (index = 0; index < heightViewPort_93ADC; index++)
		{
			memset(drawBuffer, pattern, widthViewPort_93AD8);
			drawBuffer += widthViewPort_93AD8 + drawShift;
		}
	}
	else
		if (!str_AE400_AE3F0->set.skyOn_8599)
		{
			drawShift = pitchViewPort_93AD4 - widthViewPort_93AD8;
			pattern = 0xff;
            uint8* drawBuffer = beginFrame_93ACC;
			for (index = 0; index < heightViewPort_93ADC; index++)
			{
				memset(drawBuffer, pattern, widthViewPort_93AD8);
				drawBuffer += widthViewPort_93AD8 + drawShift;
			}
		}
		else
			DrawSky_30730_30770(roll);//draw sky
	//adress 1FBB02_
   //debug
#ifdef debug1
  //add_compare(0x1FBB02, true, true);
#endif debug1

	//debug
	index = 0;
	if (str_AE400_AE3F0->set.reflections_8597 && (str_AE400_AE3F0->set.mod3D_8603 != 2 || str_AE400_AE3F0->set.var_u8_8606))
	{
		for (int indexC = 0; indexC < textColumns; indexC++)
		{
			//  adress 1FBB90_
			   //debug
#ifdef debug1
			if (compare_index_1FBB90 == 0x11)
			{
				compare_index_1FBB90++;
				compare_index_1FBB90--;
			}
			//add_compare(0x1FBB90, true, true);
			compare_index_1FBB90++;
#endif debug1
			//debug      
			for (int indexR = 0; indexR < textRows; indexR++)
			{
#ifdef debug1
				/*if (compare_index_1FBBA0 == 0x183a)
				{
					compare_index_1FBBA0++;
					compare_index_1FBBA0--;
				}
				add_compare(0x1FBBA0, true, true);
				compare_index_1FBBA0++;*/
#endif debug1          
				powX = pow(tempBegBscreen[index].x_0, 2);
				tempY = tempBegBscreen[index].y_12;
				tempShad = (mapShading_EC1E0_EC1D0[yawXY.word] << 8) + 128;
				tempBegBscreen[index].haveSprite_36 = 0;
				sumPowXY = pow(tempY, 2) + powX;
				if (tempY <= -256 || sumPowXY >= dword_B5D00_B5CF0)
				{
					tempBegBscreen[index].triangleDir_38._axis_2d.x |= 2u;
				}
				else
				{
					if (tempY < 128)
						tempY = 128;
					tempBegBscreen[index].pnt1_16 = fowDist_B5D14_B5D04 * tempBegBscreen[index].x_0 / tempY;
					tempBegBscreen[index].var_4 = 32 * mapHeightmap_DC1E0_DC1D0[yawXY.word] - posZ;
					tempDiameter = str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u32_13341_18 << 6;
					tempSinDiaY = sin_90B4C[((yawXY._axis_2d.y << 7) + tempDiameter) & 0x7FF] >> 8;
					tempSinDiaX = sin_90B4C[((yawXY._axis_2d.x << 7) + tempDiameter) & 0x7FF] >> 8;
					tempSinXSin = tempSinDiaY * tempSinDiaX;
					tempHeightm = mapHeightmap_DC1E0_DC1D0[yawXY.word];
					tempBegBscreen[index].var_8 = -((tempHeightm * ((tempSinXSin >> 4) + 0x8000)) >> 10) - posZ;
					if ((mapAngle_FC1E0_FC1D0[yawXY.word] & 8) != 0)
						tempBegBscreen[index].var_4 -= tempSinXSin >> 10;
					else
						tempSinXSin = 0;
					tempShadCos = (tempShad << 8) + 8 * tempSinXSin;
					if (sumPowXY <= dword_B5CF0_B5CE0)
						tempBegBscreen[index].pnt5_32 = tempShadCos;
					else if (sumPowXY < dword_B5D0C_B5CFC)
					{
						tempShadCos = tempShadCos * (__int64)(dword_B5D0C_B5CFC - sumPowXY) / dword_B5CEC_B5CDC;
						tempBegBscreen[index].pnt5_32 = tempShadCos;
					}
					else
						tempBegBscreen[index].pnt5_32 = 0;

					tempBegBscreen[index].pnt2_20 = dword_B5CFC_B5CEC + fowDist_B5D14_B5D04 * tempBegBscreen[index].var_4 / tempY;
					tempBegBscreen[index].pnt4_28 = dword_B5CFC_B5CEC + fowDist_B5D14_B5D04 * tempBegBscreen[index].var_8 / tempY;
					uaxis_2d yawXY2;
					yawXY2._axis_2d.x = yawQuartal[2] + yawXY._axis_2d.x;
					yawXY2._axis_2d.y = yawQuartal[3] + yawXY._axis_2d.y;
					tempBegBscreen[index].haveTexture_41 = mapTerrainType_CC1E0_CC1D0[yawXY2.word];
					if (byte_9020C[tempBegBscreen[index].haveTexture_41])
						tempBegBscreen[index].triangleDir_38._axis_2d.x |= 0x80u;
					if (byte_90168[tempBegBscreen[index].haveTexture_41])
						tempBegBscreen[index].triangleDir_38._axis_2d.y |= 0x10u;
					tempBegBscreen[index].var_43 = byte_900C4[tempBegBscreen[index].haveTexture_41];
					tempBegBscreen[index].var_42 = modYaw + ((mapAngle_FC1E0_FC1D0[yawXY2.word] >> 2) & 0x1C);
					yawXY2._axis_2d.x += yawQuartal[4];
					yawXY2._axis_2d.y += yawQuartal[5];
					tempBegBscreen[index].haveSprite_36 = mapEntityIndex_10C1E0_10C1D0[yawXY2.word];
				}
				tempBegBscreen[index].triangleDir_38.word |= (yawXY._axis_2d.x + yawXY._axis_2d.y) & 1;
				yawXY._axis_2d.x += yawQuartal[8];
				yawXY._axis_2d.y += yawQuartal[9];
				index++;
			}
			yawXY._axis_2d.y += yawQuartal[7];
			yawXY._axis_2d.x += yawQuartal[6];
		}
		for (int indexCR = 0; indexCR < textColumns * textRows; indexCR++)
		{
			//adress 1FBEB6_
			if (compare_index_next1 == 0x347)
			{
				compare_index_next1++;
				compare_index_next1--;
			}
			compare_index_next1++;
			tempBegBscreen[indexCR].pnt3_24 = ((cos_B5CE8_B5CD8 * tempBegBscreen[indexCR].pnt1_16 - sin_B5CD4_B5CC4 * tempBegBscreen[indexCR].pnt4_28) >> 16) + dword_B5D08_B5CF8;
			subTempVar28 = tempBegBscreen[indexCR].pnt1_16 * sin_B5CD4_B5CC4 + cos_B5CE8_B5CD8 * tempBegBscreen[indexCR].pnt4_28;
			tempVar20 = heightViewPort_B5CE4_B5CD4 - ((tempBegBscreen[indexCR].pnt1_16 * sin_B5CD4_B5CC4 + cos_B5CE8_B5CD8 * tempBegBscreen[indexCR].pnt2_20) >> 16);
			tempBegBscreen[indexCR].pnt1_16 = ((cos_B5CE8_B5CD8 * tempBegBscreen[indexCR].pnt1_16 - sin_B5CD4_B5CC4 * tempBegBscreen[indexCR].pnt2_20) >> 16)
				+ dword_B5D08_B5CF8;

			tempBegBscreen[indexCR].pnt4_28 = heightViewPort_B5CE4_B5CD4 - (subTempVar28 >> 16);
			tempBegBscreen[indexCR].pnt2_20 = tempVar20;
			if (tempBegBscreen[indexCR].pnt1_16 >= 0)
			{
				if (widthViewPort_93AD8 <= tempBegBscreen[indexCR].pnt1_16)
					tempBegBscreen[indexCR].triangleDir_38._axis_2d.x |= 0x10u;
			}
			else
			{
				tempBegBscreen[indexCR].triangleDir_38._axis_2d.x |= 8u;
			}
			if (tempBegBscreen[indexCR].pnt2_20 >= 0)
			{
				if (heightViewPort_93ADC <= tempBegBscreen[indexCR].pnt2_20)
					tempBegBscreen[indexCR].triangleDir_38._axis_2d.x |= 0x40u;
			}
			else
			{
				tempBegBscreen[indexCR].triangleDir_38._axis_2d.x |= 0x20u;
			}
			if (tempBegBscreen[indexCR].pnt3_24 >= 0)
			{
				if (widthViewPort_93AD8 <= tempBegBscreen[indexCR].pnt3_24)
					tempBegBscreen[indexCR].triangleDir_38._axis_2d.y |= 2u;
			}
			else
			{
				tempBegBscreen[indexCR].triangleDir_38._axis_2d.y |= 1u;
			}
			if (tempBegBscreen[indexCR].pnt4_28 >= 0)
			{
				if (heightViewPort_93ADC <= tempBegBscreen[indexCR].pnt4_28)
					tempBegBscreen[indexCR].triangleDir_38._axis_2d.y |= 8u;
			}
			else
			{
				tempBegBscreen[indexCR].triangleDir_38._axis_2d.y |= 4u;
			}
		}
		if (posZ < 4096)
		{

			//adress 0x1FBFCB_
			//debug
#ifdef debug1
			if (compare_index_1FBFCB == 0x0)
			{
				compare_index_1FBFCB++;
				compare_index_1FBFCB--;
			}
			//add_compare(0x1FBFCB, true, true);
			compare_index_1FBFCB++;
#endif debug1
			//debug
			int index = 0;
			int index61 = (textColumns - 1) * textRows;
			for (int indexC = 0; indexC < textColumns - 1; indexC++)
			{
                int index62 = index61;
				for (int indexR = 0; indexR < textRows; indexR++)
				{
					//adress 0x1FBFF0_
								//debug
#ifdef debug1
					if (compare_index_1FBFF0 == 0x18f)
					{
						compare_index_1FBFF0++;
						compare_index_1FBFF0--;
					}
					//add_compare(0x1FBFF0, true, true);
					compare_index_1FBFF0++;
#endif debug1
					//debug
					if ((tempBegBscreen[index62 + 1].triangleDir_38._axis_2d.x & 4) != 0)
						break;

					v213x.x_0 = tempBegBscreen[index62].pnt3_24;
					v213x.y_1 = tempBegBscreen[index62].pnt4_28;
					v213x.z_4 = tempBegBscreen[index62].pnt5_32;
					v208x.x_0 = tempBegBscreen[index62 + 1].pnt3_24;
					v208x.y_1 = tempBegBscreen[index62 + 1].pnt4_28;
					v208x.z_4 = tempBegBscreen[index62 + 1].pnt5_32;
					v203x.x_0 = tempBegBscreen[index62 + 1 - textRows].pnt3_24;
					v203x.y_1 = tempBegBscreen[index62 + 1 - textRows].pnt4_28;
					v203x.z_4 = tempBegBscreen[index62 + 1 - textRows].pnt5_32;
					v198x.x_0 = tempBegBscreen[index62 - textRows].pnt3_24;
					v198x.y_1 = tempBegBscreen[index62 - textRows].pnt4_28;
					v198x.z_4 = tempBegBscreen[index62 - textRows].pnt5_32;

					if (tempBegBscreen[index62].haveTexture_41)
					{
						if ((tempBegBscreen[index62].triangleDir_38._axis_2d.y & 0x10) != 0)
						{
							byte_967E1 = 7;
							byte_967E0 = (v198x.z_4 + v203x.z_4 + v208x.z_4 + v213x.z_4) >> 18;
						}
						else
						{
							byte_967E1 = 5;
						}
						if (((tempBegBscreen[index62 - textRows].triangleDir_38.word | tempBegBscreen[index62 + 1 - textRows].triangleDir_38.word | tempBegBscreen[index62 + 1].triangleDir_38.word | tempBegBscreen[index62].triangleDir_38.word) & 2) == 0)
						{
							v213x.u_2 = unk_902DC[tempBegBscreen[index62].var_42][0];
							v213x.v_3 = unk_902DC[tempBegBscreen[index62].var_42][1];
							v208x.u_2 = unk_902DC[tempBegBscreen[index62].var_42][2];
							v208x.v_3 = unk_902DC[tempBegBscreen[index62].var_42][3];
							v203x.u_2 = unk_902DC[tempBegBscreen[index62].var_42][4];
							v203x.v_3 = unk_902DC[tempBegBscreen[index62].var_42][5];
							v198x.u_2 = unk_902DC[tempBegBscreen[index62].var_42][6];
							v198x.v_3 = unk_902DC[tempBegBscreen[index62].var_42][7];
							actTexture_93AD0 = dword_9334C[tempBegBscreen[index62].haveTexture_41].p;
							byte_967E1 = 5;
							if ((tempBegBscreen[index62].triangleDir_38._axis_2d.x & 1) != 0)
							{
								DrawTriangle_729A3_72EB3(&v213x, &v198x, &v208x);
								DrawTriangle_729A3_72EB3(&v198x, &v203x, &v208x);
							}
							else
							{
								DrawTriangle_729A3_72EB3(&v213x, &v203x, &v208x);
								DrawTriangle_729A3_72EB3(&v213x, &v198x, &v203x);
							}
						}
					}
					if (tempBegBscreen[index62].haveSprite_36)
						DrawSprite_2FC50_2FC90(&tempBegBscreen[index62]);
					index62++;
				}
				//int indexv76 = textColumns * textRows - 2;
				//for (int indexR = 0; indexR < textRows; indexR++)
                for (int indexv76 = index61 + textRows - 2; indexv76 >= index62; indexv76--)
				{
					v213x.x_0 = tempBegBscreen[indexv76].pnt3_24;
					v213x.y_1 = tempBegBscreen[indexv76].pnt4_28;
					v213x.z_4 = tempBegBscreen[indexv76].pnt5_32;
					v208x.x_0 = tempBegBscreen[indexv76 + 1].pnt3_24;
					v208x.y_1 = tempBegBscreen[indexv76 + 1].pnt4_28;
					v208x.z_4 = tempBegBscreen[indexv76 + 1].pnt5_32;
					v203x.x_0 = tempBegBscreen[indexv76 + 1 - textRows].pnt3_24;
					v203x.y_1 = tempBegBscreen[indexv76 + 1 - textRows].pnt4_28;
					v203x.z_4 = tempBegBscreen[indexv76 + 1 - textRows].pnt5_32;
					v198x.x_0 = tempBegBscreen[indexv76 - textRows].pnt3_24;
					v198x.y_1 = tempBegBscreen[indexv76 - textRows].pnt4_28;
					v198x.z_4 = tempBegBscreen[indexv76 - textRows].pnt5_32;

					if (tempBegBscreen[indexv76].haveTexture_41)
					{
						if ((tempBegBscreen[indexv76].triangleDir_38._axis_2d.y & 0x10) != 0)
						{
							byte_967E1 = 7;
							byte_967E0 = (v198x.z_4 + v203x.z_4 + v208x.z_4 + v213x.z_4) >> 18;
						}
						else
						{
							byte_967E1 = 5;
						}
						if (((tempBegBscreen[indexv76 - textRows].triangleDir_38.word | tempBegBscreen[indexv76 + 1 - textRows].triangleDir_38.word | tempBegBscreen[indexv76 + 1].triangleDir_38.word | tempBegBscreen[indexv76].triangleDir_38.word) & 2) == 0)
						{
							v213x.u_2 = unk_902DC[tempBegBscreen[indexv76].var_42][0];
							v213x.v_3 = unk_902DC[tempBegBscreen[indexv76].var_42][1];
							v208x.u_2 = unk_902DC[tempBegBscreen[indexv76].var_42][2];
							v208x.v_3 = unk_902DC[tempBegBscreen[indexv76].var_42][3];
							v203x.u_2 = unk_902DC[tempBegBscreen[indexv76].var_42][4];
							v203x.v_3 = unk_902DC[tempBegBscreen[indexv76].var_42][5];
							v198x.u_2 = unk_902DC[tempBegBscreen[indexv76].var_42][6];
							v198x.v_3 = unk_902DC[tempBegBscreen[indexv76].var_42][7];
							byte_967E1 = 5;
							actTexture_93AD0 = dword_9334C[tempBegBscreen[indexv76].haveTexture_41].p;
							if ((tempBegBscreen[indexv76].triangleDir_38._axis_2d.x & 1) != 0)
							{
								DrawTriangle_729A3_72EB3(&v213x, &v198x, &v208x);
								DrawTriangle_729A3_72EB3(&v198x, &v203x, &v208x);
							}
							else
							{
								DrawTriangle_729A3_72EB3(&v213x, &v203x, &v208x);
								DrawTriangle_729A3_72EB3(&v213x, &v198x, &v203x);
							}
						}
					}
					if (tempBegBscreen[indexv76].haveSprite_36)
					{
						DrawSprite_2FC50_2FC90(&tempBegBscreen[indexv76]);//fix it
					}
					//indexv76--;
				}
                index61 -= textRows;
			}
            
		}
		int indexv89x = (textColumns - 1) * textRows;

		for (int indexC = 0; indexC < textColumns - 1; indexC++)
		{
			//  adress 1FC3D0_
	//debug
#ifdef debug1
		//add_compare(0x1FC3D0, true, true);
#endif debug1
		//debug

				//  adress 1FC3E0_
		//debug
#ifdef debug1
		/*if (compare_index_2A700 == 0xad6)
		{
			compare_index_2A700++;
			compare_index_2A700--;
		}
		add_compare(0x1FC3E0, true, true);
		compare_index_2A700++;*/
#endif debug1
		//debug
			int indexv91 = indexv89x;

			int indexR;
			for (indexR = 0; indexR < textRows; indexR++)
			{
				if ((tempBegBscreen[indexv91 + 1].triangleDir_38._axis_2d.x & 4) != 0)
					break;

				v213x.x_0 = tempBegBscreen[indexv91].pnt1_16;
				v213x.y_1 = tempBegBscreen[indexv91].pnt2_20;
				v213x.z_4 = tempBegBscreen[indexv91].pnt5_32;
				v208x.x_0 = tempBegBscreen[indexv91 + 1].pnt1_16;
				v208x.y_1 = tempBegBscreen[indexv91 + 1].pnt2_20;
				v208x.z_4 = tempBegBscreen[indexv91 + 1].pnt5_32;
				v203x.x_0 = tempBegBscreen[indexv91 + 1 - textRows].pnt1_16;
				v203x.y_1 = tempBegBscreen[indexv91 + 1 - textRows].pnt2_20;
				v203x.z_4 = tempBegBscreen[indexv91 + 1 - textRows].pnt5_32;
				v198x.x_0 = tempBegBscreen[indexv91 - textRows].pnt1_16;
				v198x.y_1 = tempBegBscreen[indexv91 - textRows].pnt2_20;
				v198x.z_4 = tempBegBscreen[indexv91 - textRows].pnt5_32;
				if (tempBegBscreen[indexv91].triangleDir_38._axis_2d.x >= 0)
				{
					if ((tempBegBscreen[indexv91].triangleDir_38._axis_2d.y & 0x10) != 0)
					{
						byte_967E1 = 7;
						byte_967E0 = (v198x.z_4 + v203x.z_4 + v208x.z_4 + v213x.z_4) >> 18;
					}
					else
					{
						byte_967E1 = 5;
					}
					if ((((tempBegBscreen[indexv91 - textRows].triangleDir_38.word | tempBegBscreen[indexv91 + 1 - textRows].triangleDir_38.word | tempBegBscreen[indexv91 + 1].triangleDir_38.word | tempBegBscreen[indexv91].triangleDir_38.word)) & 2) == 0 &&
						((tempBegBscreen[indexv91 - textRows].triangleDir_38.word & tempBegBscreen[indexv91 + 1 - textRows].triangleDir_38.word & tempBegBscreen[indexv91 + 1].triangleDir_38.word & tempBegBscreen[indexv91].triangleDir_38.word) & 0x78) == 0)
					{
						v213x.u_2 = unk_902DC[tempBegBscreen[indexv91].var_42][0];
						v213x.v_3 = unk_902DC[tempBegBscreen[indexv91].var_42][1];
						v208x.u_2 = unk_902DC[tempBegBscreen[indexv91].var_42][2];
						v208x.v_3 = unk_902DC[tempBegBscreen[indexv91].var_42][3];
						v203x.u_2 = unk_902DC[tempBegBscreen[indexv91].var_42][4];
						v203x.v_3 = unk_902DC[tempBegBscreen[indexv91].var_42][5];
						v198x.u_2 = unk_902DC[tempBegBscreen[indexv91].var_42][6];
						v198x.v_3 = unk_902DC[tempBegBscreen[indexv91].var_42][7];
						actTexture_93AD0 = dword_9334C[tempBegBscreen[indexv91].haveTexture_41].p;
						if ((tempBegBscreen[indexv91].triangleDir_38._axis_2d.x & 1) != 0)
						{
							DrawTriangle_729A3_72EB3(&v213x, &v208x, &v198x);
							DrawTriangle_729A3_72EB3(&v198x, &v208x, &v203x);
						}
						else
						{
							DrawTriangle_729A3_72EB3(&v213x, &v208x, &v203x);
							DrawTriangle_729A3_72EB3(&v213x, &v203x, &v198x);
						}
					}
					if (tempBegBscreen[indexv91].haveSprite_36)
						DrawSprite_2DCB0_2DCF0(&tempBegBscreen[indexv91]);
				}
				else
				{
					byte_967E1 = 26;
					if ((((tempBegBscreen[indexv91 - textRows].triangleDir_38.word | tempBegBscreen[indexv91 + 1 - textRows].triangleDir_38.word | tempBegBscreen[indexv91 + 1].triangleDir_38.word | tempBegBscreen[indexv91].triangleDir_38.word)) & 2) == 0 &&
						((tempBegBscreen[indexv91 - textRows].triangleDir_38.word & tempBegBscreen[indexv91 + 1 - textRows].triangleDir_38.word & tempBegBscreen[indexv91 + 1].triangleDir_38.word & tempBegBscreen[indexv91].triangleDir_38.word) & 0x78) == 0)
					{
						v213x.u_2 = unk_902DC[tempBegBscreen[indexv91].var_42][0];
						v213x.v_3 = unk_902DC[tempBegBscreen[indexv91].var_42][1];
						v208x.u_2 = unk_902DC[tempBegBscreen[indexv91].var_42][2];
						v208x.v_3 = unk_902DC[tempBegBscreen[indexv91].var_42][3];
						v203x.u_2 = unk_902DC[tempBegBscreen[indexv91].var_42][4];
						v203x.v_3 = unk_902DC[tempBegBscreen[indexv91].var_42][5];
						v198x.u_2 = unk_902DC[tempBegBscreen[indexv91].var_42][6];
						v198x.v_3 = unk_902DC[tempBegBscreen[indexv91].var_42][7];
						actTexture_93AD0 = dword_9334C[tempBegBscreen[indexv91].haveTexture_41].p;
						if ((tempBegBscreen[indexv91].triangleDir_38._axis_2d.x & 1) != 0)
						{
							DrawTriangle_729A3_72EB3(&v213x, &v208x, &v198x);
							DrawTriangle_729A3_72EB3(&v198x, &v208x, &v203x);
						}
						else
						{
							DrawTriangle_729A3_72EB3(&v213x, &v208x, &v203x);
							DrawTriangle_729A3_72EB3(&v213x, &v203x, &v198x);
						}
					}
					if (tempBegBscreen[indexv91].haveSprite_36)
						DrawSprite_2DCB0_2DCF0(&tempBegBscreen[indexv91]);
				}
				indexv91++;
			}
			for (int index109 = indexv89x + textRows - 2; index109 >= indexv91; index109--)
			{
				//  adress 1FC68A_
				//debug
#ifdef debug1
				if (compare_index_1FC68A == 0x603)
				{
					compare_index_1FC68A++;
					compare_index_1FC68A--;
				}

                uint8_t origbyte20 = 0;
                uint8_t remakebyte20 = 0;
                char buffer1[500];
                sprintf(buffer1, "%08X-00273CA8", 0x1FC68A);
                //int comp20 = compare_with_sequence(buffer1, (uint8_t*)&dword_B5CA8_B5C98, 0x1FC68A, compare_index_1FC68A - 0, 4, 4, &origbyte20, &remakebyte20, 0, true);
                sprintf(buffer1, "%08X-FFFFFFF6", 0x1FC68A);
                //comp20 = compare_with_sequence(buffer1, (uint8_t*)&tempBegBscreen[index109].haveSprite_36, 0x1FC68A, compare_index_1FC68A - 0, 2, 2, &origbyte20, &remakebyte20, 0, true);
                //tempBegBscreen[index109].haveSprite_36 [ebx+0x24]
                
				//add_compare(0x1FC68A, true, true);
				compare_index_1FC68A++;
#endif debug1
				//debug
				v213x.x_0 = tempBegBscreen[index109].pnt1_16;
				v213x.y_1 = tempBegBscreen[index109].pnt2_20;
				v213x.z_4 = tempBegBscreen[index109].pnt5_32;
				v208x.x_0 = tempBegBscreen[index109 + 1].pnt1_16;
				v208x.y_1 = tempBegBscreen[index109 + 1].pnt2_20;
				v208x.z_4 = tempBegBscreen[index109 + 1].pnt5_32;
				v203x.x_0 = tempBegBscreen[index109 + 1 - textRows].pnt1_16;
				v203x.y_1 = tempBegBscreen[index109 + 1 - textRows].pnt2_20;
				v203x.z_4 = tempBegBscreen[index109 + 1 - textRows].pnt5_32;
				v198x.x_0 = tempBegBscreen[index109 - textRows].pnt1_16;
				v198x.y_1 = tempBegBscreen[index109 - textRows].pnt2_20;
				v198x.z_4 = tempBegBscreen[index109 - textRows].pnt5_32;
				if (tempBegBscreen[index109].triangleDir_38._axis_2d.x >= 0)
				{
					if ((tempBegBscreen[index109].triangleDir_38._axis_2d.y & 0x10) != 0)
					{
						byte_967E1 = 7;
						byte_967E0 = (v198x.z_4 + v203x.z_4 + v208x.z_4 + v213x.z_4) >> 18;
					}
					else
					{
						byte_967E1 = 5;
					}
					if ((((tempBegBscreen[index109 - textRows].triangleDir_38.word | tempBegBscreen[index109 + 1 - textRows].triangleDir_38.word | tempBegBscreen[index109 + 1].triangleDir_38.word | tempBegBscreen[index109].triangleDir_38.word)) & 2) == 0 &&
						((tempBegBscreen[index109 - textRows].triangleDir_38.word & tempBegBscreen[index109 + 1 - textRows].triangleDir_38.word & tempBegBscreen[index109 + 1].triangleDir_38.word & tempBegBscreen[index109].triangleDir_38.word) & 0x78) == 0)
					{
						v213x.u_2 = unk_902DC[tempBegBscreen[index109].var_42][0];
						v213x.v_3 = unk_902DC[tempBegBscreen[index109].var_42][1];
						v208x.u_2 = unk_902DC[tempBegBscreen[index109].var_42][2];
						v208x.v_3 = unk_902DC[tempBegBscreen[index109].var_42][3];
						v203x.u_2 = unk_902DC[tempBegBscreen[index109].var_42][4];
						v203x.v_3 = unk_902DC[tempBegBscreen[index109].var_42][5];
						v198x.u_2 = unk_902DC[tempBegBscreen[index109].var_42][6];
						v198x.v_3 = unk_902DC[tempBegBscreen[index109].var_42][7];
						actTexture_93AD0 = dword_9334C[tempBegBscreen[index109].haveTexture_41].p;
						if ((tempBegBscreen[index109].triangleDir_38._axis_2d.x & 1) != 0)
						{
							DrawTriangle_729A3_72EB3(&v213x, &v208x, &v198x);
							DrawTriangle_729A3_72EB3(&v198x, &v208x, &v203x);
						}
						else
						{
							DrawTriangle_729A3_72EB3(&v213x, &v208x, &v203x);
							DrawTriangle_729A3_72EB3(&v213x, &v203x, &v198x);
						}
					}
					if (tempBegBscreen[index109].haveSprite_36)
						DrawSprite_2DCB0_2DCF0(&tempBegBscreen[index109]);
				}
				else
				{
					byte_967E1 = 26;
					if ((((tempBegBscreen[index109 - textRows].triangleDir_38.word | tempBegBscreen[index109 + 1 - textRows].triangleDir_38.word | tempBegBscreen[index109 + 1].triangleDir_38.word | tempBegBscreen[index109].triangleDir_38.word)) & 2) == 0 &&
						((tempBegBscreen[index109 - textRows].triangleDir_38.word & tempBegBscreen[index109 + 1 - textRows].triangleDir_38.word & tempBegBscreen[index109 + 1].triangleDir_38.word & tempBegBscreen[index109].triangleDir_38.word) & 0x78) == 0)
					{
						v213x.u_2 = unk_902DC[tempBegBscreen[index109].var_42][0];
						v213x.v_3 = unk_902DC[tempBegBscreen[index109].var_42][1];
						v208x.u_2 = unk_902DC[tempBegBscreen[index109].var_42][2];
						v208x.v_3 = unk_902DC[tempBegBscreen[index109].var_42][3];
						v203x.u_2 = unk_902DC[tempBegBscreen[index109].var_42][4];
						v203x.v_3 = unk_902DC[tempBegBscreen[index109].var_42][5];
						v198x.u_2 = unk_902DC[tempBegBscreen[index109].var_42][6];
						v198x.v_3 = unk_902DC[tempBegBscreen[index109].var_42][7];
						actTexture_93AD0 = dword_9334C[tempBegBscreen[index109].haveTexture_41].p;
						if ((tempBegBscreen[index109].triangleDir_38._axis_2d.x & 1) != 0)
						{
							DrawTriangle_729A3_72EB3(&v213x, &v208x, &v198x);
							DrawTriangle_729A3_72EB3(&v198x, &v208x, &v203x);
						}
						else
						{
							DrawTriangle_729A3_72EB3(&v213x, &v208x, &v203x);
							DrawTriangle_729A3_72EB3(&v213x, &v203x, &v198x);
						}
					}
					if (tempBegBscreen[index109].haveSprite_36)
						DrawSprite_2DCB0_2DCF0(&tempBegBscreen[index109]);
				}
			}
			indexv89x -= textRows;
		}

		return;//fix it
	}
	//adress 1FC930_
  //debug
#ifdef debug1
	//add_compare(0x1FC930, true, true);
#endif debug1
	//debug

	
    for (v238 = textColumns; v238; v238--)
	{		
		for(v243 = textRows; v243; v243--)
		{
			int powX = pow(tempBegBscreen[index].x_0, 2);
            int tempY = tempBegBscreen[index].y_12;
			int powY = pow(tempY, 2);
			tempBegBscreen[index].haveSprite_36 = 0;
			if (tempY > -256 && powY + powX < dword_B5D00_B5CF0)
			{
				if (tempY < 128)
                    tempY = 128;
				tempBegBscreen[index].pnt1_16 = fowDist_B5D14_B5D04 * tempBegBscreen[index].x_0 / tempY;
				tempBegBscreen[index].var_4 = 32 * mapHeightmap_DC1E0_DC1D0[yawXY.word] - posZ;
				tempSinDiaY = sin_90B4C[((str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u32_13341_18 << 6) + (yawXY._axis_2d.y << 7)) & 0x7FF] >> 8;
				tempSinXSin = pow(tempSinDiaY, 2);
				if ((mapAngle_FC1E0_FC1D0[yawXY.word] & 8) != 0)
					tempBegBscreen[index].var_4 -= tempSinXSin >> 10;
				else
					tempSinXSin = 0;
				tempVar32 = (((mapShading_EC1E0_EC1D0[yawXY.word] << 8) + 128) << 8) + 8 * tempSinXSin;
                if (powY + powX > dword_B5CF0_B5CE0)
                {
                    if (powY + powX >= dword_B5D0C_B5CFC)
                        tempBegBscreen[index].pnt5_32 = 0;
                    else
                        tempBegBscreen[index].pnt5_32 = tempVar32 * (__int64)(dword_B5D0C_B5CFC - (powY + powX)) / dword_B5CEC_B5CDC;
                }
                else
                    tempBegBscreen[index].pnt5_32 = tempVar32;
                tempBegBscreen[index].pnt2_20 = dword_B5CFC_B5CEC + fowDist_B5D14_B5D04 * tempBegBscreen[index].var_4 / tempY;
                uaxis_2d tempYawXY = yawXY;
                tempYawXY._axis_2d.x += yawQuartal[2];
                tempYawXY._axis_2d.y += yawQuartal[3];
                tempBegBscreen[index].haveTexture_41 = mapTerrainType_CC1E0_CC1D0[tempYawXY.word];
                tempBegBscreen[index].var_43 = byte_900C4[tempBegBscreen[index].haveTexture_41];
                tempBegBscreen[index].var_42 = modYaw + ((mapAngle_FC1E0_FC1D0[tempYawXY.word] >> 2) & 0x1C);
                tempYawXY._axis_2d.x += yawQuartal[4];
                tempYawXY._axis_2d.y += yawQuartal[5];
                tempBegBscreen[index].haveSprite_36 = mapEntityIndex_10C1E0_10C1D0[tempYawXY.word];
                /*
				if (powY + powX > dword_B5CF0_B5CE0)
				{
					if (powY + powX >= dword_B5D0C_B5CFC)
					{
						tempBegBscreen[index].pnt5_32 = 0;
					LABEL_161:
						tempBegBscreen[index].pnt2_20 = dword_B5CFC_B5CEC + fowDist_B5D14_B5D04 * tempBegBscreen[index].var_4 / tempBegBscreen[index].y_12;
						yawXY._axis_2d.x = yawQuartal[2] + yawXY._axis_2d.x;
						yawXY._axis_2d.y = yawQuartal[3] + yawXY._axis_2d.y;
						tempBegBscreen[index].haveTexture_41 = mapTerrainType_CC1E0_CC1D0[yawXY.word];
						tempBegBscreen[index].var_43 = byte_900C4[tempBegBscreen[index].haveTexture_41];
						tempBegBscreen[index].var_42 = modYaw + ((mapAngle_FC1E0_FC1D0[yawXY.word] >> 2) & 0x1C);
						yawXY._axis_2d.x += yawQuartal[4];
						yawXY._axis_2d.y += yawQuartal[5];
						tempBegBscreen[index].haveSprite_36 = mapEntityIndex_10C1E0_10C1D0[yawXY.word];
						goto LABEL_163;
					}
					tempVar32 = tempVar32 * (__int64)(dword_B5D0C_B5CFC - powY + powX) / dword_B5CEC_B5CDC;
				}
				tempBegBscreen[index].pnt5_32 = tempVar32;
				goto LABEL_161;*/
			}
            else
			    tempBegBscreen[index].triangleDir_38._axis_2d.x |= 2u;
		//LABEL_163:
			tempBegBscreen[index].triangleDir_38.word |= (yawXY._axis_2d.x + yawXY._axis_2d.y) & 1;
			yawXY._axis_2d.x += yawQuartal[8];
			yawXY._axis_2d.y += yawQuartal[9];
			//--v243;
			index++;
		} //while (v243);
		yawXY._axis_2d.x += yawQuartal[6];
		yawXY._axis_2d.y += yawQuartal[7];
		//--v238;
	} //while (v238);

	//adress 1FCBE3_
  //debug
#ifdef debug1
	//add_compare(0x1FCBE3, true, true);
#endif debug1
	//debug	dword_B5CD4_B5CC4 = cos_90B4C[roll & 0x7FF];
	cos_B5CE8_B5CD8 = cos_9134C[roll & 0x7FF];
    for (int index142 = 0; index142 < textRows * textColumns; index142++)
	{
        if (index142 == 0x32)
        {
            index142++;
            index142--;
        }
		tempSubVar20 = (sin_B5CD4_B5CC4 * tempBegBscreen[index142].pnt1_16 + cos_B5CE8_B5CD8 * tempBegBscreen[index142].pnt2_20) >> 16;
		tempBegBscreen[index142].pnt1_16 = ((tempBegBscreen[index142].pnt1_16 * cos_B5CE8_B5CD8 - sin_B5CD4_B5CC4 * tempBegBscreen[index142].pnt2_20) >> 16)
			+ dword_B5D08_B5CF8;
		tempBegBscreen[index142].pnt2_20 = heightViewPort_B5CE4_B5CD4 - tempSubVar20;
		if (tempBegBscreen[index142].pnt1_16 >= 0)
		{
			if (widthViewPort_93AD8 <= tempBegBscreen[index142].pnt1_16)
				tempBegBscreen[index142].triangleDir_38._axis_2d.x |= 0x10u;
		}
		else
		{
			tempBegBscreen[index142].triangleDir_38._axis_2d.x |= 8u;
		}
		if (tempBegBscreen[index142].pnt2_20 >= 0)
		{
			if (heightViewPort_93ADC <= tempBegBscreen[index142].pnt2_20)
				tempBegBscreen[index142].triangleDir_38._axis_2d.x |= 0x40u;
		}
		else
		{
			tempBegBscreen[index142].triangleDir_38._axis_2d.x |= 0x20u;
		}
	}
	//adress 1FCCA5_

	//debug
#ifdef debug1
	//add_compare(0x1FCCA5, true, true);
#endif debug1
	//debug
	if (str_AE400_AE3F0->set.mod3D_8603 != 2 || str_AE400_AE3F0->set.var_u8_8606)
	{
		int index168 = textRows * (textColumns - 1);
		for (int index244 = textColumns - 1; index244; index244--)
		{
            int index169 = index168;
			int index232 = textRows - 1;
			for (; index232; index232--)
			{
                if ((tempBegBscreen[index169 + 1].triangleDir_38._axis_2d.x & 4) != 0)
                    break;

//debug 0x1fd013
#ifdef debug1
    //add_compare(0x1fd013, true, true);
                if (index1fd013 == 0x21)
                {
                    index1fd013++;
                    index1fd013--;
                }
                index1fd013++;
#endif debug1
    //debug

				v213x.x_0 = tempBegBscreen[index169].pnt1_16;
				v213x.y_1 = tempBegBscreen[index169].pnt2_20;
				v213x.z_4 = tempBegBscreen[index169].pnt5_32;
				v208x.x_0 = tempBegBscreen[index169 + 1].pnt1_16;
				v208x.y_1 = tempBegBscreen[index169 + 1].pnt2_20;
				v208x.z_4 = tempBegBscreen[index169 + 1].pnt5_32;
				v203x.x_0 = tempBegBscreen[index169 + 1 - textRows].pnt1_16;
				v203x.y_1 = tempBegBscreen[index169 + 1 - textRows].pnt2_20;
				v203x.z_4 = tempBegBscreen[index169 + 1 - textRows].pnt5_32;
				v198x.x_0 = tempBegBscreen[index169 - textRows].pnt1_16;
				v198x.y_1 = tempBegBscreen[index169 - textRows].pnt2_20;
				v198x.z_4 = tempBegBscreen[index169 - textRows].pnt5_32;
				if ((tempBegBscreen[index169].triangleDir_38._axis_2d.y & 0x10) != 0)
				{
					byte_967E1 = 7;
					byte_967E0 = (v198x.z_4 + v203x.z_4 + v208x.z_4 + v213x.z_4) >> 18;
				}
				else
				{
					byte_967E1 = 5;
				}
				if ((((tempBegBscreen[index169 - textRows].triangleDir_38.word | tempBegBscreen[index169 + 1 - textRows].triangleDir_38.word | tempBegBscreen[index169 + 1].triangleDir_38.word | tempBegBscreen[index169].triangleDir_38.word)) & 2) == 0 &&
					((tempBegBscreen[index169 - textRows].triangleDir_38.word & tempBegBscreen[index169 + 1 - textRows].triangleDir_38.word & tempBegBscreen[index169 + 1].triangleDir_38.word & tempBegBscreen[index169].triangleDir_38.word) & 0x78) == 0)
				{
					v213x.u_2 = unk_902DC[tempBegBscreen[index169].var_42][0];
					v213x.v_3 = unk_902DC[tempBegBscreen[index169].var_42][1];
					v208x.u_2 = unk_902DC[tempBegBscreen[index169].var_42][2];
					v208x.v_3 = unk_902DC[tempBegBscreen[index169].var_42][3];
					v203x.u_2 = unk_902DC[tempBegBscreen[index169].var_42][4];
					v203x.v_3 = unk_902DC[tempBegBscreen[index169].var_42][5];
					v198x.u_2 = unk_902DC[tempBegBscreen[index169].var_42][6];
					v198x.v_3 = unk_902DC[tempBegBscreen[index169].var_42][7];

					actTexture_93AD0 = dword_9334C[tempBegBscreen[index169].haveTexture_41].p;
					if ((tempBegBscreen[index169].triangleDir_38._axis_2d.x & 1) != 0)
					{
						DrawTriangle_729A3_72EB3(&v213x, &v208x, &v198x);
						DrawTriangle_729A3_72EB3(&v198x, &v208x, &v203x);
					}
					else
					{
						DrawTriangle_729A3_72EB3(&v213x, &v208x, &v203x);
						DrawTriangle_729A3_72EB3(&v213x, &v203x, &v198x);
					}
				}
				if (tempBegBscreen[index169].haveSprite_36)
					DrawSprite_2DCB0_2DCF0(&tempBegBscreen[index169]);
                index169++;
			}
			if (index232)
			{
				int index183 = index169;
                for(int index184 = index168 + textRows - 2; index184 >= index183; index184--)
				{
                    //0x1FD1D8
#ifdef debug1
//add_compare(0x1FD1D8, true, true);
                    if (index1FD1D8 == 0x13)
                    {
                        index1FD1D8++;
                        index1FD1D8--;
                    }
                    index1FD1D8++;
#endif debug1
                    //debug
					v213x.x_0 = tempBegBscreen[index184].pnt1_16;
					v213x.y_1 = tempBegBscreen[index184].pnt2_20;
					v213x.z_4 = tempBegBscreen[index184].pnt5_32;
					v208x.x_0 = tempBegBscreen[index184 + 1].pnt1_16;
					v208x.y_1 = tempBegBscreen[index184 + 1].pnt2_20;
					v208x.z_4 = tempBegBscreen[index184 + 1].pnt5_32;
					v203x.x_0 = tempBegBscreen[index184 + 1 - textRows].pnt1_16;
					v203x.y_1 = tempBegBscreen[index184 + 1 - textRows].pnt2_20;
					v203x.z_4 = tempBegBscreen[index184 + 1 - textRows].pnt5_32;
					v198x.x_0 = tempBegBscreen[index184 - textRows].pnt1_16;
					v198x.y_1 = tempBegBscreen[index184 - textRows].pnt2_20;
					v198x.z_4 = tempBegBscreen[index184 - textRows].pnt5_32;
					if ((tempBegBscreen[index184].triangleDir_38._axis_2d.y & 0x10) != 0)
					{
						byte_967E1 = 7;
						byte_967E0 = (v198x.z_4 + v203x.z_4 + v208x.z_4 + v213x.z_4) >> 18;
					}
					else
					{
						byte_967E1 = 5;
					}
					if ((((tempBegBscreen[index184 - textRows].triangleDir_38.word | tempBegBscreen[index184 + 1 - textRows].triangleDir_38.word | tempBegBscreen[index184 + 1].triangleDir_38.word | tempBegBscreen[index184].triangleDir_38.word)) & 2) == 0 &&
						((tempBegBscreen[index184 - textRows].triangleDir_38.word & tempBegBscreen[index184 + 1 - textRows].triangleDir_38.word & tempBegBscreen[index184 + 1].triangleDir_38.word & tempBegBscreen[index184].triangleDir_38.word) & 0x78) == 0)
					{
						v213x.u_2 = unk_902DC[tempBegBscreen[index184].var_42][0];
						v213x.v_3 = unk_902DC[tempBegBscreen[index184].var_42][1];
						v208x.u_2 = unk_902DC[tempBegBscreen[index184].var_42][2];
						v208x.v_3 = unk_902DC[tempBegBscreen[index184].var_42][3];
						v203x.u_2 = unk_902DC[tempBegBscreen[index184].var_42][4];
						v203x.v_3 = unk_902DC[tempBegBscreen[index184].var_42][5];
						v198x.u_2 = unk_902DC[tempBegBscreen[index184].var_42][6];
						v198x.v_3 = unk_902DC[tempBegBscreen[index184].var_42][7];
						actTexture_93AD0 = dword_9334C[tempBegBscreen[index184].haveTexture_41].p;
						if ((tempBegBscreen[index184].triangleDir_38._axis_2d.x & 1) != 0)
						{
							DrawTriangle_729A3_72EB3(&v213x, &v208x, &v198x);
							DrawTriangle_729A3_72EB3(&v198x, &v208x, &v203x);
						}
						else
						{
							DrawTriangle_729A3_72EB3(&v213x, &v208x, &v203x);
							DrawTriangle_729A3_72EB3(&v213x, &v203x, &v198x);
						}
					}
					if (tempBegBscreen[index184].haveSprite_36)
						DrawSprite_2DCB0_2DCF0(&tempBegBscreen[index184]);
                    //index184--;
				}// while (index183 >= 100/*v183*/);//fix
			}
            index168 -= textRows;
		}
	}
	else
	{
    //adress 1FCCC4_
		byte_967E1 = 1;
		int index148 = textRows * (textColumns - 1);
		for (int index245 = textColumns - 1; index245; index245--)
		{
            int index149 = index148;
			int index236;
			for (index236 = textRows - 1; index236; index236--)
			{
                if ((tempBegBscreen[index149 + 1].triangleDir_38._axis_2d.x & 4) != 0)
                    break;
				v213x.x_0 = tempBegBscreen[index149].pnt1_16;
				v213x.y_1 = tempBegBscreen[index149].pnt2_20;
				v213x.z_4 = 0x400000 - 350 * (5120 - tempBegBscreen[index149].y_12);
				v208x.x_0 = tempBegBscreen[index149 + 1].pnt1_16;
				v208x.y_1 = tempBegBscreen[index149 + 1].pnt2_20;
				v208x.z_4 = 0x400000 - 350 * (5120 - tempBegBscreen[index149 + 1].y_12);
				v203x.x_0 = tempBegBscreen[index149 + 1 - textRows].pnt1_16;
				v203x.y_1 = tempBegBscreen[index149 + 1 - textRows].pnt2_20;
				v203x.z_4 = 0x400000 - 350 * (5120 - tempBegBscreen[index149 + 1 - textRows].y_12);
				v198x.x_0 = tempBegBscreen[index149 - textRows].pnt1_16;
				v198x.y_1 = tempBegBscreen[index149 - textRows].pnt2_20;
				v198x.z_4 = 0x400000 - 350 * (5120 - tempBegBscreen[index149 - textRows].y_12);
				if ((((tempBegBscreen[index149 - textRows].triangleDir_38.word | tempBegBscreen[index149 + 1 - textRows].triangleDir_38.word | tempBegBscreen[index149 + 1].triangleDir_38.word | tempBegBscreen[index149].triangleDir_38.word)) & 2) == 0 &&
					((tempBegBscreen[index149 - textRows].triangleDir_38.word & tempBegBscreen[index149 + 1 - textRows].triangleDir_38.word & tempBegBscreen[index149 + 1].triangleDir_38.word & tempBegBscreen[index149].triangleDir_38.word) & 0x78) == 0)
				{
					if ((tempBegBscreen[index149].triangleDir_38._axis_2d.x & 1) != 0)
					{
						DrawTriangle_729A3_72EB3(&v213x, &v208x, &v198x);
						DrawTriangle_729A3_72EB3(&v198x, &v208x, &v203x);
					}
					else
					{
						DrawTriangle_729A3_72EB3(&v213x, &v208x, &v203x);
						DrawTriangle_729A3_72EB3(&v213x, &v203x, &v198x);
					}
				}
				if (tempBegBscreen[index149].haveSprite_36)
					DrawSprite3D_2F170_2F1B0(/*5120,*/ &tempBegBscreen[index149]);
                index149++;
			}
			if (index236)
			{
				int index158 = index149;                
				for(int index159 = index148 + textRows - 2; index159 >= index158;index159--)
				{
					v213x.x_0 = tempBegBscreen[index159].pnt1_16;
					v213x.y_1 = tempBegBscreen[index159].pnt2_20;
					v213x.z_4 = 0x400000 - 350 * (5120 - tempBegBscreen[index159].y_12);
					v208x.x_0 = tempBegBscreen[index159 + 1].pnt1_16;
					v208x.y_1 = tempBegBscreen[index159 + 1].pnt2_20;
					v208x.z_4 = 0x400000 - 350 * (5120 - tempBegBscreen[index159 + 1].y_12);
					v203x.x_0 = tempBegBscreen[index159 + 1 - textRows].pnt1_16;
					v203x.y_1 = tempBegBscreen[index159 + 1 - textRows].pnt2_20;
					v203x.z_4 = 0x400000 - 350 * (5120 - tempBegBscreen[index159 + 1 - textRows].y_12);
					v198x.x_0 = tempBegBscreen[index159 - textRows].pnt1_16;
					v198x.y_1 = tempBegBscreen[index159 - textRows].pnt2_20;
					v198x.z_4 = 0x400000 - 350 * (5120 - tempBegBscreen[index159 - textRows].y_12);
					if ((((tempBegBscreen[index159 - textRows].triangleDir_38.word | tempBegBscreen[index159 + 1 - textRows].triangleDir_38.word | tempBegBscreen[index159 + 1].triangleDir_38.word | tempBegBscreen[index159].triangleDir_38.word)) & 2) == 0 &&
						((tempBegBscreen[index159 - textRows].triangleDir_38.word & tempBegBscreen[index159 + 1 - textRows].triangleDir_38.word & tempBegBscreen[index159 + 1].triangleDir_38.word & tempBegBscreen[index159].triangleDir_38.word) & 0x78) == 0)
					{
						if ((tempBegBscreen[index159].triangleDir_38._axis_2d.x & 1) != 0)
						{
							DrawTriangle_729A3_72EB3(&v213x, &v208x, &v198x);
							DrawTriangle_729A3_72EB3(&v198x, &v208x, &v203x);
						}
						else
						{
							DrawTriangle_729A3_72EB3(&v213x, &v208x, &v203x);
							DrawTriangle_729A3_72EB3(&v213x, &v203x, &v198x);
						}
					}
					if (tempBegBscreen[index159].haveSprite_36)
						DrawSprite3D_2F170_2F1B0(/*5120,*/ &tempBegBscreen[index159]);
					//index158--;
				} //while (index158 >= 100/*v158*/);//fix it
			}
			index148 -= textRows;
		}
	}
}

int counter_sub_2C410_2C450 = 0;
//SYNCHRONIZED WITH REMC1
void sub_2C410_2C450(unsigned int a1)//1FD410_
{
  //int v1; // eax
  //int v2; // edx
  //int v3; // ecx
  //int v4; // ebx
  //int v5; // edi
  //int v6; // esi
  //int v7; // ecx
  //int v8; // ebx
  //int v9; // edi
  //int v10; // ecx
  //_DWORD *v11; // ebx
  char *v12; // ebx
  int v13; // eax
  //_DWORD *v14; // esi
  _BYTE *v15; // edi
  int v16; // ecx
  //char v17; // cf
  int v18; // ecx
  int v19; // ecx
  char v20; // al
  char v21; // al
  char v22; // al
  char v23; // al
  _BYTE *v24; // edi
  int v25; // eax
  int v26; // ecx
  _BYTE *v27; // edi
  int v28; // eax
  int v29; // ecx
  _BYTE *v30; // edi
  int v31; // eax
  int v32; // ecx
  _BYTE *v33; // edi
  int v34; // ecx
  _BYTE *v35; // edi
  int v36; // ecx
  _BYTE *v37; // edi
  int v38; // edx
  int v39; // eax
  int v40; // ecx
  _BYTE *v41; // edi
  int v42; // edx
  int v43; // eax
  int v44; // ecx
  _BYTE *v45; // edi
  int v46; // eax
  int v47; // ecx
  int v48; // ecx
  int v49; // ecx
  char v50; // al
  char v51; // al
  char v52; // al
  char v53; // al
  int result; // eax
  //int v55; // esi
  //int v56; // esi
  //int v57; // edx
  //int v58; // ecx
  //int v59; // eax
  //int v60; // edi
  //int v61; // esi
  //int v62; // edx
  //int *v63; // eax
  //int v64; // edx
  //int v65; // ecx
  //int v66; // ebx
  //int v67; // ebx
  //int v68; // ebx
  //int v69; // ebx
  //_DWORD *v70; // eax
  //_DWORD *v71; // ebx
  //int v72; // ecx
  //_DWORD *v73; // eax
  //_DWORD *v74; // ebx
  //int v75; // ecx
  //int v76; // ebx
  //int i; // eax
  //int v78; // ecx
  //int v79; // edx
  //int v80; // edi
  _BOOL1 j; // zf
  //_DWORD *v82; // esi
  //int v83; // eax
  //_DWORD *v84; // edi
  //uint8* v85; // ebx
  //_BYTE *v86; // edx
  //int v87; // ecx
  //int v88; // ecx
  //int v89; // ecx
  //char v90; // al
  //char v91; // al
  //char v92; // al
  //char v93; // al
  uint8* v94; // ebx
  _BYTE *v95; // edx
  int v96; // eax
  int v97; // ecx
  uint8* v98; // ebx
  _BYTE *v99; // edx
  int v100; // ecx
  uint8* v101; // ebx
  _BYTE *v102; // edx
  int v103; // ecx
  uint8* v104; // ebx
  _BYTE *v105; // edx
  int v106; // eax
  int v107; // ecx
  uint8* v108; // ebx
  _BYTE *v109; // edx
  int v110; // eax
  int v111; // ecx
  uint8* v112; // ebx
  int v113; // ecx
  _BYTE *v114; // edx
  _DWORD *v115; // esi
  _DWORD *v116; // edi
  uint8* v117; // ebx
  int v118; // ecx
  _BYTE *v119; // edx
  _DWORD *v120; // esi
  _DWORD *v121; // edi
  uint8* v122; // ebx
  int v123; // eax
  _BYTE *v124; // edx
  int v125; // ecx
  char v126; // al
  char v127; // al
  uint8* v128; // ebx
  int v129; // eax
  _BYTE *v130; // edx
  int v131; // ecx
  int v132; // ecx
  int v133; // ecx
  char v134; // al
  char v135; // al
  char v136; // al
  char v137; // al
  //int v138; // ecx
  //int *v139; // eax
  //int v140; // edx
  //uint8* v141; // edx
  int v142; // edx
  int v143; // ebx
  int v144; // ebx
  int v145; // ebx
  _DWORD *v146; // eax
  _DWORD *v147; // ecx
  int v148; // ebx
  _DWORD *v149; // eax
  int v150; // ebx
  int v151; // edx
  int v152; // ebx
  int v153; // edx
  int v154; // ebx
  int v155; // ecx
  //int v156; // edx
  //int v157; // ecx
  //int v158; // edx
  //int v159; // edx
  //int v160; // ecx
  //int v161; // edx
  //int v162; // edx
  //int v163; // ebx
  //int v164; // edx
  //int v165; // ecx
  int v166; // edx
  //int v167; // edx
  //int v168; // edx
  int k; // [esp+0h] [ebp-50h]
  //int v170; // [esp+0h] [ebp-50h]
  //int v171; // [esp+0h] [ebp-50h]
  int v172; // [esp+10h] [ebp-40h]
  //int v173; // [esp+14h] [ebp-3Ch]
  //int v174; // [esp+18h] [ebp-38h]
  //int v175; // [esp+1Ch] [ebp-34h]
  //int v176; // [esp+20h] [ebp-30h]
  _DWORD *v177; // [esp+24h] [ebp-2Ch]
  //int v178; // [esp+28h] [ebp-28h]
  int v179; // [esp+2Ch] [ebp-24h]
  //int v180; // [esp+30h] [ebp-20h]
  //int v181; // [esp+34h] [ebp-1Ch]
  //int v182; // [esp+38h] [ebp-18h]
  //_DWORD *v183; // [esp+3Ch] [ebp-14h]
  //int v184; // [esp+40h] [ebp-10h]
  uint8* v185; // [esp+44h] [ebp-Ch]
  //uint8* v186; // [esp+48h] [ebp-8h]

  //debug
#ifdef debug1
  if (counter_sub_2C410_2C450 == 0xe0)
  {
      counter_sub_2C410_2C450++;
      counter_sub_2C410_2C450--;
  }
  //add_compare(0x1FD410, true,true);
  // dword_B5CA8_B5C98 273CA8
  /*
            uint8_t origbyte20 = 0;
            uint8_t remakebyte20 = 0;
            char buffer1[500];
            sprintf(buffer1, "%08X-00273CA8", 0x1FD414);
            int comp20 = compare_with_sequence(buffer1, (uint8_t*)&scaledSprX_B5CA8_B5C98, 0x1FD414, counter_sub_2C410_2C450 - 0, 4, 4, &origbyte20, &remakebyte20, 0, true);
            
            origbyte20 = 0;
            remakebyte20 = 0;
            sprintf(buffer1, "%08X-00273CC8", 0x1FD414);
            comp20 = compare_with_sequence(buffer1, (uint8_t*)&scaledSprY_B5CC8_B5CB8, 0x1FD414, counter_sub_2C410_2C450 - 0, 4, 4, &origbyte20, &remakebyte20, 0, true);

            origbyte20 = 0;
            remakebyte20 = 0;
            sprintf(buffer1, "%08X-00273CB4", 0x1FD414);
            comp20 = compare_with_sequence(buffer1, (uint8_t*)&yRot_B5CB4_B5CA4, 0x1FD414, counter_sub_2C410_2C450 - 0, 4, 4, &origbyte20, &remakebyte20, 0, true);

            origbyte20 = 0;
            remakebyte20 = 0;
            sprintf(buffer1, "%08X-0026C404", 0x1FD414);
            comp20 = compare_with_sequence(buffer1, blurBuffer_AE404_AE3F4, 0x26C404, counter_sub_2C410_2C450 - 0, 320 * 200, 320 * 200, &origbyte20, &remakebyte20, 0, true);
            */
#endif debug1

  counter_sub_2C410_2C450++;
  //debug

  //fix
  //v63 = 0;
  //v68 = 0;
  //fix


  int32 cosScaledX;
  int32 sinScaledX;
  int32 tempCosScaledSprY;
  int32 tempSprY;
  int32 scScaledX;
  int32 yDivSC;
  int32 yDivYdivSC;
  int32 tempRot;
  int32 sinY;
  int32 yRotMinusSinXrot;
  int32 rotYfromEnd;

  Type_32bitAxis* points;
  uint8* beginFrameAdress;
  int32 someXYtemp;

  int32 cosRollY;
  int32 xRotMinusSinYrot;
  int32 tempYdivSC = 0;
  int32 tempPoint1 = 0;
  int32 tempPoint2 = 0;
  uint32* begInt32Adress;
  int32 yCount;

  int32 tempViewPort;

  int32 signXdivsprX;

  uint32* points4;

  int32 tempAxis1;

  if ( !byte_B5D3E_B5D2E )
  {
    if ( a1 )
    {
      if ( a1 <= 1 )
      {
        xRot_B5CB8_B5CA8 -= (sin_B5CD4_B5CC4 * scaledSprY_B5CC8_B5CB8 + ((cos_B5CE8_B5CD8 * scaledSprX_B5CA8_B5C98) >> 1)) >> 16;
        yRot_B5CB4_B5CA4 -= (cos_B5CE8_B5CD8 * scaledSprY_B5CC8_B5CB8 - ((sin_B5CD4_B5CC4 * scaledSprX_B5CA8_B5C98) >> 1)) >> 16;
        goto LABEL_137;
      }
      if ( a1 != 2 )
      {
LABEL_137:
        cosScaledX = (cosRoll_B5CE0_B5CD0 * scaledSprX_B5CA8_B5C98) >> 16;
        tempCosScaledSprY = scaledSprY_B5CC8_B5CB8 << 16;
        tempSprY = sprY_B5CCC_B5CCC << 16;
        sinScaledX = (sinRoll_B5D18_B5D08 * scaledSprX_B5CA8_B5C98) >> 16;
        switch ( roll_B5D28_B5D18 )
        {
          case 0:
            scScaledX = (cosRoll_B5CE0_B5CD0 * scaledSprX_B5CA8_B5C98) >> 16;
            if (scScaledX <= 0 )
              goto LABEL_404;
            yDivSC = (scaledSprY_B5CC8_B5CB8 << 16) / cosRoll_B5CE0_B5CD0;
            if (yDivSC <= 0 )
              goto LABEL_404;
            yDivYdivSC = (sprY_B5CCC_B5CCC << 16) / yDivSC;
            if ( a1 == 1 )
            {
              dword_B5CC0_B5CB0 = 0;
            }
            else
            {
              dword_B5CC0_B5CB0 = (yDivSC - 1) * yDivYdivSC;
              yDivYdivSC = -yDivYdivSC;
            }
            tempRot = xRot_B5CB8_B5CA8 << 16;
            sinY = sinRoll_B5D18_B5D08 * scaledSprY_B5CC8_B5CB8 / yDivSC;
            yRotMinusSinXrot = yRot_B5CB4_B5CA4 - ((sinDivCos_B5CF4_B5CE4 * xRot_B5CB8_B5CA8) >> 16);
            points = (Type_32bitAxis*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[45920];
            if (yRotMinusSinXrot >= hwViewPort_B5D2C_B5D1C )
              goto LABEL_146;
            rotYfromEnd = hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot;
            yDivSC -= rotYfromEnd;
            if (yDivSC <= 0 )
              goto LABEL_404;
            dword_B5CC0_B5CB0 += rotYfromEnd * yDivYdivSC;
            //v65 = tempRot - sinY * rotYfromEnd;
            yRotMinusSinXrot = hwViewPort_B5D2C_B5D1C;
            tempRot -= sinY * rotYfromEnd;
LABEL_146:
            beginFrameAdress = &beginFrame_93ACC[yRotMinusSinXrot * pitchViewPort_93AD4];
            goto LABEL_147;
          case 1:
              scScaledX = (sinRoll_B5D18_B5D08 * scaledSprX_B5CA8_B5C98) >> 16;
            if (scScaledX <= 0 )
              goto LABEL_404;
            yDivSC = (scaledSprY_B5CC8_B5CB8 << 16) / sinRoll_B5D18_B5D08;
            if (yDivSC <= 0 )
              goto LABEL_404;
            yDivYdivSC = (sprY_B5CCC_B5CCC << 16) / yDivSC;
            if ( a1 == 1 )
            {
              dword_B5CC0_B5CB0 = 0;
            }
            else
            {
              dword_B5CC0_B5CB0 = (yDivSC - 1) * yDivYdivSC;
              yDivYdivSC = -yDivYdivSC;
            }
            someXYtemp = yRot_B5CB4_B5CA4 << 16;
            cosRollY = cosRoll_B5CE0_B5CD0 * scaledSprY_B5CC8_B5CB8 / yDivSC;
            xRotMinusSinYrot = xRot_B5CB8_B5CA8 - ((sinDivCos_B5CF4_B5CE4 * yRot_B5CB4_B5CA4) >> 16);
            points = (Type_32bitAxis*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[45920];
            if (xRotMinusSinYrot < whViewPortA_B5D30_B5D20 )
            {
              if (xRotMinusSinYrot < hwViewPort_B5D2C_B5D1C )
                goto LABEL_404;
            }
            else
            {
              //v140 = xRotMinusSinYrot - whViewPortA_B5D30_B5D20;
              yDivSC -= xRotMinusSinYrot - whViewPortA_B5D30_B5D20;
              if (yDivSC <= 0 )
                goto LABEL_404;
              dword_B5CC0_B5CB0 += (xRotMinusSinYrot - whViewPortA_B5D30_B5D20) * yDivYdivSC;
              someXYtemp += cosRollY * (xRotMinusSinYrot - whViewPortA_B5D30_B5D20);
              xRotMinusSinYrot = whViewPortA_B5D30_B5D20;
            }
            //v141 = xRotMinusSinYrot + beginFrame_93ACC;
            beginFrameAdress = &beginFrame_93ACC[xRotMinusSinYrot];
            goto LABEL_310;
          case 2:
              scScaledX = (cosRoll_B5CE0_B5CD0 * scaledSprX_B5CA8_B5C98) >> 16;
            if (cosScaledX <= 0 )
              goto LABEL_404;
            yDivSC = tempCosScaledSprY / cosRoll_B5CE0_B5CD0;
            if (tempCosScaledSprY / cosRoll_B5CE0_B5CD0 <= 0 )
              goto LABEL_404;
            yDivYdivSC = tempSprY / yDivSC;
            if ( a1 == 1 )
            {
              dword_B5CC0_B5CB0 = 0;
            }
            else
            {
              dword_B5CC0_B5CB0 = (yDivSC - 1) * yDivYdivSC;
              yDivYdivSC = -yDivYdivSC;
            }
            tempRot = yRot_B5CB4_B5CA4 << 16;
            sinY = sinRoll_B5D18_B5D08 * scaledSprY_B5CC8_B5CB8 / yDivSC;
            yRotMinusSinXrot = whViewPortA_B5D30_B5D20 - xRot_B5CB8_B5CA8 - ((sinDivCos_B5CF4_B5CE4 * yRot_B5CB4_B5CA4) >> 16);
            points = (Type_32bitAxis*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
            if (yRotMinusSinXrot >= hwViewPort_B5D2C_B5D1C )
              goto LABEL_354;
            //v156 = hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot;
            yDivSC -= hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot;
            if (yDivSC <= 0 )
              goto LABEL_404;
            dword_B5CC0_B5CB0 += (hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot) * yDivYdivSC;
            //v157 = tempRot - sinY * (hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot);
            yRotMinusSinXrot = hwViewPort_B5D2C_B5D1C;
            tempRot -= sinY * (hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot);
LABEL_354:
            beginFrameAdress = &beginFrame_93ACC[whViewPortA_B5D30_B5D20 - 1 - yRotMinusSinXrot];
            goto LABEL_147;
          case 3:
              scScaledX = (sinRoll_B5D18_B5D08 * scaledSprX_B5CA8_B5C98) >> 16;
            if (sinScaledX <= 0 )
              goto LABEL_404;
            yDivSC = tempCosScaledSprY / sinRoll_B5D18_B5D08;
            if (tempCosScaledSprY / sinRoll_B5D18_B5D08 <= 0 )
              goto LABEL_404;
            yDivYdivSC = tempSprY / yDivSC;
            if ( a1 == 1 )
            {
              dword_B5CC0_B5CB0 = 0;
            }
            else
            {
              dword_B5CC0_B5CB0 = (yDivSC - 1) * yDivYdivSC;
              yDivYdivSC = -yDivYdivSC;
            }
            cosRollY = cosRoll_B5CE0_B5CD0 * scaledSprY_B5CC8_B5CB8 / yDivSC;
            points = (Type_32bitAxis*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[45920];
            xRotMinusSinYrot = yRot_B5CB4_B5CA4 - ((sinDivCos_B5CF4_B5CE4 * (whViewPortB_B5D34_B5D24 - xRot_B5CB8_B5CA8)) >> 16);
            someXYtemp = (whViewPortB_B5D34_B5D24 - xRot_B5CB8_B5CA8) << 16;
            if (xRotMinusSinYrot < whViewPortA_B5D30_B5D20 )
            {
              if (xRotMinusSinYrot < hwViewPort_B5D2C_B5D1C )
                goto LABEL_404;
            }
            else
            {
              //v158 = xRotMinusSinYrot - whViewPortA_B5D30_B5D20;
              yDivSC -= xRotMinusSinYrot - whViewPortA_B5D30_B5D20;
              if (yDivSC <= 0 )
                goto LABEL_404;
              dword_B5CC0_B5CB0 += (xRotMinusSinYrot - whViewPortA_B5D30_B5D20) * yDivYdivSC;
              someXYtemp += cosRollY * (xRotMinusSinYrot - whViewPortA_B5D30_B5D20);
              xRotMinusSinYrot = whViewPortA_B5D30_B5D20;
            }
            beginFrameAdress = &beginFrame_93ACC[whViewPortB_B5D34_B5D24 + pitchViewPort_93AD4 * xRotMinusSinYrot - 1];
            goto LABEL_311;
          case 4:
              scScaledX = (cosRoll_B5CE0_B5CD0 * scaledSprX_B5CA8_B5C98) >> 16;
            if (cosScaledX <= 0 )
              goto LABEL_404;
            yDivSC = tempCosScaledSprY / cosRoll_B5CE0_B5CD0;
            if (tempCosScaledSprY / cosRoll_B5CE0_B5CD0 <= 0 )
              goto LABEL_404;
            yDivYdivSC = tempSprY / yDivSC;
            if ( a1 == 1 )
            {
              dword_B5CC0_B5CB0 = 0;
            }
            else
            {
              dword_B5CC0_B5CB0 = (yDivSC - 1) * yDivYdivSC;
              yDivYdivSC = -yDivYdivSC;
            }
            tempRot = (whViewPortB_B5D34_B5D24 - xRot_B5CB8_B5CA8) << 16;
            sinY = sinRoll_B5D18_B5D08 * scaledSprY_B5CC8_B5CB8 / yDivSC;
            yRotMinusSinXrot = whViewPortA_B5D30_B5D20 - yRot_B5CB4_B5CA4 - (((whViewPortB_B5D34_B5D24 - xRot_B5CB8_B5CA8) * sinDivCos_B5CF4_B5CE4) >> 16);
            points = (Type_32bitAxis*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
            if (yRotMinusSinXrot >= hwViewPort_B5D2C_B5D1C )
              goto LABEL_373;
            //v159 = hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot;
            yDivSC -= hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot;
            if (yDivSC <= 0 )
              goto LABEL_404;
            dword_B5CC0_B5CB0 += (hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot) * yDivYdivSC;
            //v160 = tempRot - sinY * (hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot);
            yRotMinusSinXrot = hwViewPort_B5D2C_B5D1C;
            tempRot -= sinY * (hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot);
LABEL_373:
            beginFrameAdress = &beginFrame_93ACC[whViewPortB_B5D34_B5D24 + pitchViewPort_93AD4 * (whViewPortA_B5D30_B5D20 - yRotMinusSinXrot - 1) - 1];
            goto LABEL_147;
          case 5:
              scScaledX = (sinRoll_B5D18_B5D08 * scaledSprX_B5CA8_B5C98) >> 16;
            if (sinScaledX <= 0 )
              goto LABEL_404;
            yDivSC = tempCosScaledSprY / sinRoll_B5D18_B5D08;
            if (tempCosScaledSprY / sinRoll_B5D18_B5D08 <= 0 )
              goto LABEL_404;
            yDivYdivSC = tempSprY / yDivSC;
            if ( a1 == 1 )
            {
              dword_B5CC0_B5CB0 = 0;
            }
            else
            {
              dword_B5CC0_B5CB0 = (yDivSC - 1) * yDivYdivSC;
              yDivYdivSC = -yDivYdivSC;
            }
            cosRollY = cosRoll_B5CE0_B5CD0 * scaledSprY_B5CC8_B5CB8 / yDivSC;
            points = (Type_32bitAxis*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[45920];
            someXYtemp = (whViewPortB_B5D34_B5D24 - yRot_B5CB4_B5CA4) << 16;
            //v161 = whViewPortA_B5D30_B5D20 - xRot_B5CB8_B5CA8 - ((sinDivCos_B5CF4_B5CE4 * (whViewPortB_B5D34_B5D24 - yRot_B5CB4_B5CA4)) >> 16);
            xRotMinusSinYrot = whViewPortA_B5D30_B5D20 - xRot_B5CB8_B5CA8 - ((sinDivCos_B5CF4_B5CE4 * (whViewPortB_B5D34_B5D24 - yRot_B5CB4_B5CA4)) >> 16);
            if (xRotMinusSinYrot < whViewPortA_B5D30_B5D20 )
            {
              if (xRotMinusSinYrot < hwViewPort_B5D2C_B5D1C )
                goto LABEL_404;
            }
            else
            {
              //v162 = xRotMinusSinYrot - whViewPortA_B5D30_B5D20;
              yDivSC -= xRotMinusSinYrot - whViewPortA_B5D30_B5D20;
              if (yDivSC <= 0 )
                goto LABEL_404;
              dword_B5CC0_B5CB0 += (xRotMinusSinYrot - whViewPortA_B5D30_B5D20) * yDivYdivSC;
              someXYtemp += cosRollY * (xRotMinusSinYrot - whViewPortA_B5D30_B5D20);
              xRotMinusSinYrot = whViewPortA_B5D30_B5D20;
            }
            //v141 = (whViewPortB_B5D34_B5D24 - 1) * pitchViewPort_93AD4 + whViewPortA_B5D30_B5D20 + beginFrame_93ACC - 1 - xRotMinusSinYrot;
            beginFrameAdress = &beginFrame_93ACC[(whViewPortB_B5D34_B5D24 - 1) * pitchViewPort_93AD4 + whViewPortA_B5D30_B5D20 - 1 - xRotMinusSinYrot];
LABEL_310:
            //beginFrameAdress = v141;
            goto LABEL_311;
          case 6:
              scScaledX = (cosRoll_B5CE0_B5CD0 * scaledSprX_B5CA8_B5C98) >> 16;
            if (cosScaledX <= 0 )
              goto LABEL_404;
            yDivSC = tempCosScaledSprY / cosRoll_B5CE0_B5CD0;
            if (tempCosScaledSprY / cosRoll_B5CE0_B5CD0 <= 0 )
              goto LABEL_404;
            yDivYdivSC = tempSprY / yDivSC;
            if ( a1 == 1 )
            {
              dword_B5CC0_B5CB0 = 0;
            }
            else
            {
              dword_B5CC0_B5CB0 = (yDivSC - 1) * yDivYdivSC;
              yDivYdivSC = -yDivYdivSC;
            }
            tempRot = (whViewPortB_B5D34_B5D24 - yRot_B5CB4_B5CA4) << 16;
            sinY = sinRoll_B5D18_B5D08 * scaledSprY_B5CC8_B5CB8 / yDivSC;
            //v163 = xRot_B5CB8_B5CA8 - ((sinDivCos_B5CF4_B5CE4 * (whViewPortB_B5D34_B5D24 - yRot_B5CB4_B5CA4)) >> 16);
            points = (Type_32bitAxis*)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920);
            yRotMinusSinXrot = xRot_B5CB8_B5CA8 - ((sinDivCos_B5CF4_B5CE4 * (whViewPortB_B5D34_B5D24 - yRot_B5CB4_B5CA4)) >> 16);
            if (yRotMinusSinXrot >= hwViewPort_B5D2C_B5D1C )
              goto LABEL_392;
            //v164 = hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot;
            yDivSC -= hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot;
            if (yDivSC <= 0 )
              goto LABEL_404;
            dword_B5CC0_B5CB0 += (hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot) * yDivYdivSC;
            //v165 = tempRot - sinY * (hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot);
            yRotMinusSinXrot = hwViewPort_B5D2C_B5D1C;
            tempRot -= sinY * (hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot);
LABEL_392:
            beginFrameAdress = &beginFrame_93ACC[yRotMinusSinXrot + pitchViewPort_93AD4 * (whViewPortB_B5D34_B5D24 - 1)];
LABEL_147:
            //v66 = whViewPortA_B5D30_B5D20 - hwViewPort_B5D2C_B5D1C;
            if (yRotMinusSinXrot <= 0 )
            {
              if (yDivSC > whViewPortA_B5D30_B5D20 - hwViewPort_B5D2C_B5D1C)
                  yDivSC = whViewPortA_B5D30_B5D20 - hwViewPort_B5D2C_B5D1C;
            }
            else if (whViewPortA_B5D30_B5D20 - hwViewPort_B5D2C_B5D1C < yDivSC + yRotMinusSinXrot)
            {
                yDivSC = whViewPortA_B5D30_B5D20 - hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot;
                if (whViewPortA_B5D30_B5D20 - hwViewPort_B5D2C_B5D1C - yRotMinusSinXrot <= 0)
                goto LABEL_404;
            }
            tempYdivSC = yDivSC;
            tempPoint1 = 9999999;
            if ( !yDivSC)
              goto LABEL_163;
            while ( 1 )
            {
              //v67 = tempRot >> 16;
              if (tempRot >> 16 >= 0 )
                break;
              tempPoint2 = -(tempRot >> 16);
              points->a = 0;
              points->b = scScaledX - tempPoint2;
              if (scScaledX - tempPoint2 <= 0 )
              {
                  yDivSC -= tempYdivSC;
LABEL_163:
                if (yDivSC + yRotMinusSinXrot > dword_B5D1C_B5D0C )
                {
                  //v69 = dword_B5D1C_B5D0C - yRotMinusSinXrot;
                  if ( dword_B5D1C_B5D0C - yRotMinusSinXrot <= 0 )
                  {
                    begInt32Adress = &(((uint32*)begBscreenAdress_B5CD8_B5CC8)[dword_B5D1C_B5D0C - yRotMinusSinXrot]);
                    //v72 = yDivSC;
                    points = (Type_32bitAxis*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[45920];
                    yCount = yDivSC;
                    goto LABEL_172;
                  }
                  yCount = yDivSC + yRotMinusSinXrot - dword_B5D1C_B5D0C;
                  points = &((Type_32bitAxis*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[45920])[dword_B5D1C_B5D0C - yRotMinusSinXrot];
                  begInt32Adress = (uint32*)begBscreenAdress_B5CD8_B5CC8;
                  while (yCount)
                  {
                    if (points->a + points->b > begInt32Adress[0])
                    {
                      if (points->a >= begInt32Adress[0])
                      {
                          yDivSC -= yCount;
                        break;
                      }
                      points->b = begInt32Adress[0] - points->a;
                    }
                    points++;
                    //v72 = v181 - 1;
                    begInt32Adress--;
                    yCount--;
LABEL_172:
                    ;//v181 = v72;
                  }
                }
                if (yRotMinusSinXrot < 0 )
                {
                    points = (Type_32bitAxis*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[45920];
                    begInt32Adress = &(((uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[59360])[-1 - yRotMinusSinXrot]);
                  do
                  {
                    if (begInt32Adress[0] > points->a)
                    {
                      if (begInt32Adress[0] <= points->b + points->a)
                      {
                        //v75 = begInt32Adress[0] - points->a;                        
                        points->c += begInt32Adress[0] - points->a;
                        points->b -= begInt32Adress[0] - points->a;
                        points->a = begInt32Adress[0];
                      }
                      else
                      {
                          points->b = 0;
                      }
                    }
                    begInt32Adress--;
                    points++;
                    yRotMinusSinXrot++;
                  }
                  while (yRotMinusSinXrot);
                }
LABEL_181:
                //v76 = (signedSprX_B5CBC_B5CAC << 16) / scScaledX;
                dword_B5CC4_B5CB4 = 0;
                if ( signedSprX_B5CBC_B5CAC < 0 )
                  dword_B5CC4_B5CB4 = -(((signedSprX_B5CBC_B5CAC << 16) / scScaledX) * (scScaledX - 1));
                tempAxis1 = scScaledX - tempPoint1;
                if (scScaledX - tempPoint1 > 0 )
                {
                  if (tempAxis1 > widthPlusHeightVP_B5D20_B5D10 )
                      tempAxis1 = widthPlusHeightVP_B5D20_B5D10;
                  dword_B5CC4_B5CB4 += ((signedSprX_B5CBC_B5CAC << 16) / scScaledX) * tempPoint1;
                  for ( begInt32Adress = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36960]; tempAxis1 >= 0; tempAxis1--)
                  {
                    //v78 = begInt32Adress[-1];
                    begInt32Adress += 2;
                    //v79 = dword_B5CC4_B5CB4 >> 16;
                    //v80 = ((signedSprX_B5CBC_B5CAC << 16) / scScaledX) + dword_B5CC4_B5CB4;
                    begInt32Adress[-1] = dword_B5CC4_B5CB4 >> 16;                    
                    begInt32Adress[-2] = (dword_B5CC4_B5CB4 >> 16)- begInt32Adress[-3];
                    dword_B5CC4_B5CB4 += ((signedSprX_B5CBC_B5CAC << 16) / scScaledX);
                  }
                  int32 tempYdivSC = yDivSC;
                  points = (Type_32bitAxis*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[45920];
                  for ( j = yDivSC == 0; !j; j = tempYdivSC-- == 1 )
                  {
                    int32 tempPointB = points->b;
                    if (tempPointB > 0 )
                    {
                      begInt32Adress = &(((uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36960])[2 * (points->c - tempPoint1)]);
                      uint8* tempSprData = &sprData_B5CB0_B5CA0[(dword_B5CC0_B5CB0 >> 16) * sprX_B5CD0_B5CC0];
                      uint32* tempB3adr = dword_B3EA0_B3E90x[points->a];
                      //uint32* v84 = tempB3adr;
                      int v83x;
                      uint8* sprData;
                      uint8* frameAdress;
                      int32 tempPindex;

                      switch ( dword_B5CAC_B5C9C )
                      {
                        case 0:
                          sprData = &tempSprData[begInt32Adress[1]];
                          frameAdress = &beginFrameAdress[tempB3adr[1]];
                          switch (tempPointB % 4) {
                          case 0:
                              tempPindex = tempPointB >> 2;//0 1 2
                              begInt32Adress += 2;
                              tempB3adr += 3;
                              //goto LABEL_198;//1|0 0(2+0=2)
                              break;
                          case 1:
                              tempPindex = (tempPointB >> 2) + 1;//1 2
                              if (sprData[0])
                                  frameAdress[0] = sprData[0];
                              sprData += begInt32Adress[2];
                              frameAdress += tempB3adr[3];
                              begInt32Adress += 4;
                              tempB3adr += 6;
                              tempPindex--;
                              break;
                          case 2:
                              tempPindex = (tempPointB >> 2) + 1;//1 2
                              begInt32Adress -= 2;
                              tempB3adr -= 3;
                              goto LABEL_204;//3|4 6(4-2=2)
                              break;
                          case 3:
                              tempPindex = (tempPointB >> 2) + 1;//1 2
                              goto LABEL_201;//2|2 3(2=2)
                              break;
                          }
                          /*if (!(tempPointB & 1))//0 2 4 6 8 10
                          {
                            
                            if ((tempPointB >> 1) & 1)//2 6 10
                            {
                              tempPindex = (tempPointB >> 2)+1;
                              begInt32Adress -= 2;
                              tempB3adr -= 3;
                              goto LABEL_204;//3|4 6(4-2=2)
                            }
                            else//0 4 8
                            {
                                tempPindex = tempPointB >> 2;
                                begInt32Adress += 2;
                                tempB3adr += 3;
                                goto LABEL_198;//1|0 0(2+0=2)
                            }
                          }//1 3 5 7 9 11
                          else
                          {                              
                              if ((tempPointB >> 1) & 1)//3 7 11
                              {
                                  tempPindex = ((tempPointB >> 1) + 2) >> 1;
                                  goto LABEL_201;//2|2 3(2=2)
                              }
                              else//1 5 9
                              {
                                  tempPindex = ((tempPointB >> 1) + 2) >> 1;
                                  begInt32Adress -= 4;
                                  tempB3adr -= 6;
                                  goto LABEL_ZEROx;//4|6 9(6-4=2)
                              }
                          }*/
                          while (tempPindex)
                          {
//LABEL_198:
                            if (sprData[0])
                                frameAdress[0] = sprData[0];
                            sprData += begInt32Adress[0];
                            frameAdress += tempB3adr[0];
LABEL_201:
                            if (sprData[0])
                                frameAdress[0] = sprData[0];
                            sprData += begInt32Adress[2];
                            frameAdress += tempB3adr[3];
LABEL_204:
                            if (sprData[0])
                                frameAdress[0] = sprData[0];
                            sprData += begInt32Adress[4];
                            frameAdress += tempB3adr[6];
//LABEL_ZEROx:
                            if (sprData[0])
                                frameAdress[0] = sprData[0];
                            sprData += begInt32Adress[6];
                            frameAdress += tempB3adr[9];

                            begInt32Adress += 8;
                            tempB3adr += 12;
                            tempPindex--;
                            //if (!tempPindex)
                                //break;
                          }
                          break;
                        case 1:
                          v94 = &tempSprData[begInt32Adress[1]];
                          v95 = &beginFrameAdress[tempB3adr[1]];
                          v96 = dword_B5CA4_B5C94;
                          v97 = tempPointB >> 1;
                          if ( !(tempPointB & 1) )
                          {
                            begInt32Adress += 2;
                            tempB3adr += 3;
                            goto LABEL_214;
                          }
                          v97++;
                          while ( 1 )
                          {
                            LOBYTE(v96) = *v94;
                            v94 += begInt32Adress[2];
                            if ( (_BYTE)v96 )
                              *v95 = strPal.fog_B7934_B7924[v96];
                            v95 += tempB3adr[3];
                            begInt32Adress += 4;
                            tempB3adr += 6;
                            if ( !--v97 )
                              break;
LABEL_214:
                            LOBYTE(v96) = *v94;
                            v94 += *begInt32Adress;
                            if ( (_BYTE)v96 )
                              *v95 = strPal.fog_B7934_B7924[v96];
                            v95 += tempB3adr[0];
                          }
                          break;
                        case 2:
                          v98 = &tempSprData[begInt32Adress[1]];
                          v99 = &beginFrameAdress[tempB3adr[1]];
                          HIWORD(v83x) = 0;
                          v100 = tempPointB >> 1;
                          if ( !(tempPointB & 1) )
                          {
                            begInt32Adress += 2;
                            tempB3adr += 3;
                            goto LABEL_224;
                          }
                          v100++;
                          while ( 1 )
                          {
                            BYTE1(v83x) = *v98;
                            v98 += begInt32Adress[2];
                            if ( BYTE1(v83x) )
                            {
                              LOBYTE(v83x) = *v99;
                              *v99 = strPal.byte_BB934_BB924[v83x];
                            }
                            v99 += tempB3adr[3];
                            begInt32Adress += 4;
                            tempB3adr += 6;
                            if ( !--v100 )
                              break;
LABEL_224:
                            BYTE1(v83x) = *v98;
                            v98 += *begInt32Adress;
                            if ( BYTE1(v83x) )
                            {
                              LOBYTE(v83x) = *v99;
                              *v99 = strPal.byte_BB934_BB924[v83x];
                            }
                            v99 += tempB3adr[0];
                          }
                          break;
                        case 3:
                          v101 = &tempSprData[begInt32Adress[1]];
                          v102 = &beginFrameAdress[tempB3adr[1]];
                          HIWORD(v83x) = 0;
                          v103 = tempPointB >> 1;
                          if ( !(tempPointB & 1) )
                          {
                            begInt32Adress += 2;
                            tempB3adr += 3;
                            goto LABEL_234;
                          }
                          v103++;
                          while ( 1 )
                          {
                            LOBYTE(v83x) = *v101;
                            v101 += begInt32Adress[2];
                            if ( (_BYTE)v83x)
                            {
                              BYTE1(v83x) = *v102;
                              *v102 = strPal.byte_BB934_BB924[v83x];
                            }
                            v102 += tempB3adr[3];
                            begInt32Adress += 4;
                            tempB3adr += 6;
                            if ( !--v103 )
                              break;
LABEL_234:
                            LOBYTE(v83x) = *v101;
                            v101 += *begInt32Adress;
                            if ( (_BYTE)v83x)
                            {
                              BYTE1(v83x) = *v102;
                              *v102 = strPal.byte_BB934_BB924[v83x];
                            }
                            v102 += tempB3adr[0];
                          }
                          break;
                        case 4:
                          v104 = &tempSprData[begInt32Adress[1]];
                          v105 = &beginFrameAdress[tempB3adr[1]];
                          v106 = 0;
                          v107 = tempPointB >> 1;
                          if ( !(tempPointB & 1) )
                          {
                            begInt32Adress += 2;
                            tempB3adr += 3;
                            goto LABEL_244;
                          }
                          v107++;
                          while ( 1 )
                          {
                            LOBYTE(v106) = *v104;
                            v104 += begInt32Adress[2];
                            if ( (_BYTE)v106 )
                              *v105 = strPal.byte_BB934_BB924[v106];
                            v105 += tempB3adr[3];
                            begInt32Adress += 4;
                            tempB3adr += 6;
                            if ( !--v107 )
                              break;
LABEL_244:
                            LOBYTE(v106) = *v104;
                            v104 += *begInt32Adress;
                            if ( (_BYTE)v106 )
                              *v105 = strPal.byte_BB934_BB924[v106];
                            v105 += tempB3adr[0];
                          }
                          break;
                        case 5:
                          v108 = &tempSprData[begInt32Adress[1]];
                          v109 = &beginFrameAdress[tempB3adr[1]];
                          v110 = 0;
                          v111 = tempPointB >> 1;
                          if ( !(tempPointB & 1) )
                          {
                            begInt32Adress += 2;
                            tempB3adr += 3;
                            goto LABEL_254;
                          }
                          v111++;
                          while ( 1 )
                          {
                            BYTE1(v110) = *v108;
                            v108 += begInt32Adress[2];
                            if ( BYTE1(v110) )
                              *v109 = strPal.byte_BB934_BB924[v110];
                            v109 += tempB3adr[3];
                            begInt32Adress += 4;
                            tempB3adr += 6;
                            if ( !--v111 )
                              break;
LABEL_254:
                            BYTE1(v110) = *v108;
                            v108 += *begInt32Adress;
                            if ( BYTE1(v110) )
                              *v109 = strPal.byte_BB934_BB924[v110];
                            v109 += tempB3adr[0];
                          }
                          break;
                        case 6:
                          v112 = &tempSprData[begInt32Adress[1]];
                          v113 = dword_B5CA4_B5C94;
                          v114 = &beginFrameAdress[tempB3adr[1]];
                          HIWORD(v83x) = 0;
                          v115 = begInt32Adress + 2;
                          v116 = &tempB3adr[3];
                          do
                          {
                            BYTE1(v83x) = *v112;
                            v112 += *v115;
                            if ( BYTE1(v83x) )
                            {
                              LOBYTE(v83x) = *v114;
                              LOBYTE(v113) = strPal.byte_BB934_BB924[v83x];
                              *v114 = strPal.fog_B7934_B7924[v113];
                            }
                            v114 += *v116;
                            v115 += 2;
                            v116 += 3;
                            tempPointB--;
                          }
                          while (tempPointB);
                          break;
                        case 7:
                          v117 = &tempSprData[begInt32Adress[1]];
                          v118 = dword_B5CA4_B5C94;
                          v119 = &beginFrameAdress[tempB3adr[1]];
                          HIWORD(v83x) = 0;
                          v120 = begInt32Adress + 2;
                          v121 = &tempB3adr[3];
                          do
                          {
                            LOBYTE(v83x) = *v117;
                            v117 += *v120;
                            if ( (_BYTE)v83x)
                            {
                              BYTE1(v83x) = *v119;
                              LOBYTE(v118) = strPal.byte_BB934_BB924[v83x];
                              *v119 = strPal.fog_B7934_B7924[v118];
                            }
                            v119 += *v121;
                            v120 += 2;
                            v121 += 3;
                            tempPointB--;
                          }
                          while (tempPointB);
                          break;
                        case 8:
                          v122 = &tempSprData[begInt32Adress[1]];
                          v123 = dword_B5CA4_B5C94;
                          v124 = &beginFrameAdress[tempB3adr[1]];
                          v125 = tempPointB >> 1;
                          if ( !(tempPointB & 1) )
                          {
                            begInt32Adress += 2;
                            tempB3adr += 3;
                            goto LABEL_274;
                          }
                          v125++;
                          while ( 1 )
                          {
                            v127 = *v122;
                            v122 += begInt32Adress[2];
                            if ( v127 )
                            {
                              LOBYTE(v123) = *v124;
                              *v124 = strPal.fog_B7934_B7924[v123];
                            }
                            v124 += tempB3adr[3];
                            begInt32Adress += 4;
                            tempB3adr += 6;
                            if ( !--v125 )
                              break;
LABEL_274:
                            v126 = *v122;
                            v122 += *begInt32Adress;
                            if ( v126 )
                            {
                              LOBYTE(v123) = *v124;
                              *v124 = strPal.fog_B7934_B7924[v123];
                            }
                            v124 += tempB3adr[0];
                          }
                          break;
                        case 9:
                          v128 = &tempSprData[begInt32Adress[1]];
                          v129 = dword_B5CA4_B5C94 >> 8;
                          v130 = &beginFrameAdress[tempB3adr[1]];
                          v131 = tempPointB >> 1;
                          if ( !(tempPointB & 1) )
                          {
                            //v17 = v131 & 1;
                            v132 = tempPointB >> 2;
                            if (v131 & 1)
                            {
                              v132++;
                              begInt32Adress -= 2;
                              tempB3adr -= 3;
                              goto LABEL_293;
                            }
                            begInt32Adress += 2;
                            tempB3adr += 3;
                            goto LABEL_287;
                          }
                          v133 = v131 + 2;
                          //v17 = v133 & 1;
                          v132 = v133 >> 1;
                          if (v133 & 1)
                            goto LABEL_290;
                          begInt32Adress -= 4;
                          for (tempB3adr -= 6; ; v130 += tempB3adr[6] )
                          {
                            v137 = *v128;
                            v128 += begInt32Adress[6];
                            if ( v137 )
                              *v130 = BYTE1(v129);
                            v130 += tempB3adr[9];
                            begInt32Adress += 8;
                            tempB3adr += 12;
                            if ( !--v132 )
                              break;
LABEL_287:
                            v134 = *v128;
                            v128 += *begInt32Adress;
                            if ( v134 )
                              *v130 = BYTE1(v129);
                            v130 += tempB3adr[0];
LABEL_290:
                            v135 = *v128;
                            v128 += begInt32Adress[2];
                            if ( v135 )
                              *v130 = BYTE1(v129);
                            v130 += tempB3adr[3];
LABEL_293:
                            v136 = *v128;
                            v128 += begInt32Adress[4];
                            if ( v136 )
                              *v130 = BYTE1(v129);
                          }
                          break;
                        default:
                          break;
                      }
                    }
                    dword_B5CC0_B5CB0 += yDivYdivSC;
                    beginFrameAdress += dword_B5D04_B5CF4;
                    points++;
                  }
                }
LABEL_404:
                //JUMPOUT(0x2A6E8_2A728);
                return;
              }
              points->c = tempPoint2;
              if (tempPoint2 < tempPoint1)
                goto LABEL_159;
LABEL_160:
              if (points->b + points->a > whViewPortB_B5D34_B5D24 )
                  points->b = whViewPortB_B5D34_B5D24 - points->a;
              points++;
              tempRot -= sinY;
              if ( !--tempYdivSC)
                goto LABEL_163;
            }
            points->c = 0;
            points->a = tempRot >> 16;
            tempPoint2 = 0;
            points->b = scScaledX;
LABEL_159:
            tempPoint1 = tempPoint2;
            goto LABEL_160;
          case 7:
              scScaledX = (sinRoll_B5D18_B5D08 * scaledSprX_B5CA8_B5C98) >> 16;
            if (sinScaledX <= 0 )
              goto LABEL_404;
            yDivSC = tempCosScaledSprY / sinRoll_B5D18_B5D08;
            if (tempCosScaledSprY / sinRoll_B5D18_B5D08 <= 0 || xRot_B5CB8_B5CA8 >= whViewPortB_B5D34_B5D24 )
              goto LABEL_404;
            yDivYdivSC = tempSprY / yDivSC;
            if ( a1 == 1 )
            {
              dword_B5CC0_B5CB0 = 0;
            }
            else
            {
              v166 = (yDivSC - 1) * yDivYdivSC;
              yDivYdivSC = -yDivYdivSC;
              dword_B5CC0_B5CB0 = v166;
            }
            someXYtemp = xRot_B5CB8_B5CA8 << 16;
            cosRollY = cosRoll_B5CE0_B5CD0 * scaledSprY_B5CC8_B5CB8 / yDivSC;
            points = (Type_32bitAxis*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[45920];
            //v167 = whViewPortA_B5D30_B5D20 - yRot_B5CB4_B5CA4 - ((xRot_B5CB8_B5CA8 * sinDivCos_B5CF4_B5CE4) >> 16);
            xRotMinusSinYrot = whViewPortA_B5D30_B5D20 - yRot_B5CB4_B5CA4 - ((xRot_B5CB8_B5CA8 * sinDivCos_B5CF4_B5CE4) >> 16);
            if (xRotMinusSinYrot < whViewPortA_B5D30_B5D20 )
            {
              if (xRotMinusSinYrot < hwViewPort_B5D2C_B5D1C )
                goto LABEL_404;
            }
            else
            {
              //v168 = xRotMinusSinYrot - whViewPortA_B5D30_B5D20;
              yDivSC -= xRotMinusSinYrot - whViewPortA_B5D30_B5D20;
              if (yDivSC <= 0 )
                goto LABEL_404;
              dword_B5CC0_B5CB0 += (xRotMinusSinYrot - whViewPortA_B5D30_B5D20) * yDivYdivSC;
              someXYtemp += cosRollY * (xRotMinusSinYrot - whViewPortA_B5D30_B5D20);
              xRotMinusSinYrot = whViewPortA_B5D30_B5D20;
            }
            beginFrameAdress = &beginFrame_93ACC[pitchViewPort_93AD4 * (whViewPortA_B5D30_B5D20 - 1 - xRotMinusSinYrot)];
LABEL_311:
            v142 = whViewPortA_B5D30_B5D20 - hwViewPort_B5D2C_B5D1C;
            if (xRotMinusSinYrot < whViewPortA_B5D30_B5D20 )
            {
              if (yDivSC > v142 )
                  yDivSC = whViewPortA_B5D30_B5D20 - hwViewPort_B5D2C_B5D1C;
            }
            else if ( v142 < yDivSC + xRotMinusSinYrot - whViewPortA_B5D30_B5D20 )
            {
                yDivSC = v142 - xRotMinusSinYrot + whViewPortA_B5D30_B5D20;
              if (yDivSC <= 0 )
                goto LABEL_404;
            }
            v179 = yDivSC;
            tempPoint1 = 9999999;
            if ( !yDivSC)
            {
LABEL_325:
              v145 = xRotMinusSinYrot + dword_B5D24_B5D14 - whViewPortA_B5D30_B5D20 + 1;
              if ( v145 > 0 )
              {
                v146 = (_DWORD *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920 + 12 * v145);
                v147 = (_DWORD *)begBscreenAdress_B5CD8_B5CC8;
                v148 = xRotMinusSinYrot + dword_B5D24_B5D14 - whViewPortA_B5D30_B5D20 + 2;
                if (xRotMinusSinYrot + dword_B5D24_B5D14 - whViewPortA_B5D30_B5D20 != -2 )
                {
                  do
                  {
                    v146 -= 3;
                    if ( (unsigned int)v146 < (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920 )
                      break;
                    if ( v146[1] + *v146 - *v147 > 0 )
                    {
                      v146[1] -= v146[1] + *v146 - *v147;
                      if ( (int)v146[1] < 0 )
                        v146[1] = 0;
                    }
                    v147--;
                    v148--;
                  }
                  while ( v148 );
                }
              }
              if (xRotMinusSinYrot - yDivSC >= 0 )
                goto LABEL_181;
              v149 = (_DWORD *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920 + 12 * xRotMinusSinYrot);
              v177 = (_DWORD *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 59360);
              v150 = xRotMinusSinYrot - yDivSC - hwViewPort_B5D2C_B5D1C;
              v151 = yDivSC - xRotMinusSinYrot;
              if ( v150 < 0 )
              {
                  yDivSC = xRotMinusSinYrot - hwViewPort_B5D2C_B5D1C;
                if (xRotMinusSinYrot - hwViewPort_B5D2C_B5D1C <= 0 )
                  goto LABEL_404;
                v151 += v150;
              }
              v152 = v151;
              v153 = v151 - 1;
              if ( v152 > 0 )
              {
                while ( v153 )
                {
                  v149 += 3;
                  if ( (unsigned int)v149 >= (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 45920 )
                  {
                    v154 = *v177 - *v149;
                    if ( v154 > 0 )
                    {
                      *v149 = *v177;
                      v155 = v149[1] - v154;
                      v149[1] = v155;
                      if ( v155 < 0 )
                        v149[1] = 0;
                      v149[2] += v154;
                    }
                  }
                  v153--;
                  v177++;
                }
              }
              goto LABEL_181;
            }
            break;
          default:
            goto LABEL_404;
        }
        while ( 1 )
        {
          v143 = someXYtemp >> 16;
          if (someXYtemp >> 16 >= 0 )
            break;
          v144 = -v143;
          points->a = 0;
          points->b = scScaledX - v144;
          points->c = v144;
          if ( v144 < tempPoint1)
            goto LABEL_321;
LABEL_322:
          if (points->b + points->a > whViewPortB_B5D34_B5D24 )
              points->b = whViewPortB_B5D34_B5D24 - points->a;
          points++;
          someXYtemp += cosRollY;
          if ( !--v179 )
            goto LABEL_325;
        }
        points->c = 0;
        points->a = v143;
        v144 = 0;
        points->b = scScaledX;
LABEL_321:
        tempPoint1 = v144;
        goto LABEL_322;
      }
    }
    //v55 = yRot_B5CB4_B5CA4 - (-(sin_B5CD4_B5CC4 * scaledSprX_B5CA8_B5C98) >> 17);
    xRot_B5CB8_B5CA8 -= (cos_B5CE8_B5CD8 * scaledSprX_B5CA8_B5C98) >> 17;
    //goto LABEL_136;
    yRot_B5CB4_B5CA4 -= -(sin_B5CD4_B5CC4 * scaledSprX_B5CA8_B5C98) >> 17;
    goto LABEL_137;
  }
  int32 scaledXY = (scaledSprY_B5CC8_B5CB8 + scaledSprX_B5CA8_B5C98) >> 2;
  if ( a1 )
  {
    int32 scaledCosXY = (scaledXY * cos_B5CE8_B5CD8) >> 16;
    int32 scaledSinXY = (scaledXY * sin_B5CD4_B5CC4) >> 16;
    if ( a1 <= 1 )
    {
      xRot_B5CB8_B5CA8 += -scaledSinXY - scaledXY;
      yRot_B5CB4_B5CA4 += -scaledCosXY - scaledXY;
    }
    else if ( a1 == 2 )
    {
      xRot_B5CB8_B5CA8 += scaledSinXY - scaledXY;
      yRot_B5CB4_B5CA4 += scaledCosXY - scaledXY;
    }
  }
  tempViewPort = widthViewPort_93AD8;
  if ( widthViewPort_93AD8 <= xRot_B5CB8_B5CA8 )
    goto LABEL_404;
  //v5 = scaledSprX_B5CA8_B5C98;
  signXdivsprX = (signedSprX_B5CBC_B5CAC << 16) / scaledSprX_B5CA8_B5C98;
  if ( -xRot_B5CB8_B5CA8 < 0 || xRot_B5CB8_B5CA8 == 0 )
  {
    dword_B5CC4_B5CB4 = 0;
    if ( scaledSprX_B5CA8_B5C98 + xRot_B5CB8_B5CA8 - widthViewPort_93AD8 <= 0 )
      goto LABEL_16;
    tempViewPort = widthViewPort_93AD8 - xRot_B5CB8_B5CA8;
    goto LABEL_15;
  }
  //v7 = scaledSprX_B5CA8_B5C98 + xRot_B5CB8_B5CA8;
  scaledSprX_B5CA8_B5C98 += xRot_B5CB8_B5CA8;
  if (scaledSprX_B5CA8_B5C98 <= 0 )
    goto LABEL_404;
  dword_B5CC4_B5CB4 = signXdivsprX * -xRot_B5CB8_B5CA8;
  xRot_B5CB8_B5CA8 = 0;
  if ( widthViewPort_93AD8 <= scaledSprX_B5CA8_B5C98)
LABEL_15:
    scaledSprX_B5CA8_B5C98 = tempViewPort;
LABEL_16:
    tempViewPort = heightViewPort_93ADC;
  if ( heightViewPort_93ADC <= yRot_B5CB4_B5CA4 )
    goto LABEL_404;
  //v9 = scaledSprY_B5CC8_B5CB8;
  v172 = (sprY_B5CCC_B5CCC << 16) / scaledSprY_B5CC8_B5CB8;
  if ( -yRot_B5CB4_B5CA4 < 0 || yRot_B5CB4_B5CA4 == 0 )
  {
    dword_B5CC0_B5CB0 = 0;
    if ( yRot_B5CB4_B5CA4 + scaledSprY_B5CC8_B5CB8 - heightViewPort_93ADC <= 0 )
      goto LABEL_24;
    tempViewPort = heightViewPort_93ADC - yRot_B5CB4_B5CA4;
    goto LABEL_23;
  }
  //v10 = scaledSprY_B5CC8_B5CB8 + yRot_B5CB4_B5CA4;
  scaledSprY_B5CC8_B5CB8 += yRot_B5CB4_B5CA4;
  if (scaledSprY_B5CC8_B5CB8 <= 0 )
    goto LABEL_404;
  dword_B5CC0_B5CB0 = -yRot_B5CB4_B5CA4 * v172;
  yRot_B5CB4_B5CA4 = 0;
  if ( heightViewPort_93ADC <= scaledSprY_B5CC8_B5CB8)
LABEL_23:
    scaledSprY_B5CC8_B5CB8 = tempViewPort;
LABEL_24:
  begInt32Adress = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36960];
  for ( k = scaledSprX_B5CA8_B5C98; k; k-- )
  {
      begInt32Adress[1] = dword_B5CC4_B5CB4 >> 16;
    if (begInt32Adress == (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36960])
      *(uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36960] = 22;
    else
        begInt32Adress[0] = begInt32Adress[1] - begInt32Adress[-1];
    begInt32Adress += 2;
    dword_B5CC4_B5CB4 += signXdivsprX;
  }
  v185 = &beginFrame_93ACC[pitchViewPort_93AD4 * yRot_B5CB4_B5CA4 + xRot_B5CB8_B5CA8];
  if ( !scaledSprY_B5CC8_B5CB8 )
    goto LABEL_404;
  do
  {
    v12 = (char *)(*(_DWORD *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 36964) + sprData_B5CB0_B5CA0 + sprX_B5CD0_B5CC0 * (dword_B5CC0_B5CB0 >> 16));
    v13 = dword_B5CAC_B5C9C;
    points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36960];
    switch ( dword_B5CAC_B5C9C )
    {
      case 0:
        v15 = (_BYTE *)v185;
        v16 = scaledSprX_B5CA8_B5C98 >> 1;
        if ( !(scaledSprX_B5CA8_B5C98 & 1) )
        {
          //v17 = v16 & 1;
          v18 = scaledSprX_B5CA8_B5C98 >> 2;
          if (v16 & 1)
          {
            v18++;
            points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36952];
            v15 = (_BYTE *)(v185 - 2);
            goto LABEL_42;
          }
          points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36968];
          goto LABEL_38;
        }
        v19 = v16 + 2;
        //v17 = v19 & 1;
        v18 = v19 >> 1;
        if (!(v19 & 1))
        {
            points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36944];
          v15 = (_BYTE *)(v185 - 3);
          goto LABEL_44;
        }
        v15 = (_BYTE *)(v185 - 1);
        while ( 1 )
        {
          v21 = v12[0];
          v12 += points4[2];
          if ( v21 )
            v15[1] = v21;
LABEL_42:
          v22 = v12[0];
          v12 += points4[4];
          if ( v22 )
            v15[2] = v22;
LABEL_44:
          v23 = v12[0];
          v12 += points4[6];
          if ( v23 )
            v15[3] = v23;
          v15 += 4;
          points4 += 8;
          if ( !--v18 )
            break;
LABEL_38:
          v20 = v12[0];
          v12 += points4[0];
          if ( v20 )
            *v15 = v20;
        }
        break;
      case 1:
        v24 = (_BYTE *)v185;
        v25 = dword_B5CA4_B5C94;
        v26 = scaledSprX_B5CA8_B5C98 >> 1;
        if ( !(scaledSprX_B5CA8_B5C98 & 1) )
        {
            points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36968];
          goto LABEL_51;
        }
        v26++;
        v24 = (_BYTE *)(v185 - 1);
        while ( 1 )
        {
          LOBYTE(v25) = *v12;
          v12 += points4[2];
          if ( (_BYTE)v25 )
            v24[1] = strPal.fog_B7934_B7924[v25];
          v24 += 2;
          points4 += 4;
          if ( !--v26 )
            break;
LABEL_51:
          LOBYTE(v25) = *v12;
          v12 += points4[0];
          if ( (_BYTE)v25 )
            *v24 = strPal.fog_B7934_B7924[v25];
        }
        break;
      case 2:
        v27 = (_BYTE *)v185;
        HIWORD(v28) = 0;
        v29 = scaledSprX_B5CA8_B5C98 >> 1;
        if ( !(scaledSprX_B5CA8_B5C98 & 1) )
        {
            points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36968];
          goto LABEL_60;
        }
        v29++;
        v27 = (_BYTE *)(v185 - 1);
        while ( 1 )
        {
          BYTE1(v28) = *v12;
          v12 += points4[2];
          if ( BYTE1(v28) )
          {
            LOBYTE(v28) = v27[1];
            v27[1] = strPal.byte_BB934_BB924[v28];
          }
          v27 += 2;
          points4 += 4;
          if ( !--v29 )
            break;
LABEL_60:
          BYTE1(v28) = *v12;
          v12 += points4[0];
          if ( BYTE1(v28) )
          {
            LOBYTE(v28) = *v27;
            *v27 = strPal.byte_BB934_BB924[v28];
          }
        }
        break;
      case 3:
        v30 = (_BYTE *)v185;
        HIWORD(v31) = 0;
        v32 = scaledSprX_B5CA8_B5C98 >> 1;
        if ( !(scaledSprX_B5CA8_B5C98 & 1) )
        {
            points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36968];
          goto LABEL_69;
        }
        v32++;
        v30 = (_BYTE *)(v185 - 1);
        while ( 1 )
        {
          LOBYTE(v31) = *v12;
          v12 += points4[2];
          if ( (_BYTE)v31 )
          {
            BYTE1(v31) = v30[1];
            v30[1] = strPal.byte_BB934_BB924[v31];
          }
          v30 += 2;
          points4 += 4;
          if ( !--v32 )
            break;
LABEL_69:
          LOBYTE(v31) = *v12;
          v12 += points4[0];
          if ( (_BYTE)v31 )
          {
            BYTE1(v31) = *v30;
            *v30 = strPal.byte_BB934_BB924[v31];
          }
        }
        break;
      case 4:
        v33 = (_BYTE *)v185;
        BYTE1(v13) = dword_B5CAC_B5C9C;
        v34 = scaledSprX_B5CA8_B5C98 >> 1;
        if ( !(scaledSprX_B5CA8_B5C98 & 1) )
        {
            points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36968];
          goto LABEL_78;
        }
        v34++;
        v33 = (_BYTE *)(v185 - 1);
        while ( 1 )
        {
          LOBYTE(v13) = *v12;
          v12 += points4[2];
          if ( (_BYTE)v13 )
            v33[1] = strPal.byte_BB934_BB924[v13];
          v33 += 2;
          points4 += 4;
          if ( !--v34 )
            break;
LABEL_78:
          LOBYTE(v13) = *v12;
          v12 += points4[0];
          if ( (_BYTE)v13 )
            *v33 = strPal.byte_BB934_BB924[v13];
        }
        break;
      case 5:
        v35 = (_BYTE *)v185;
        v36 = scaledSprX_B5CA8_B5C98 >> 1;
        if ( !(scaledSprX_B5CA8_B5C98 & 1) )
        {
            points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36968];
          goto LABEL_87;
        }
        v36++;
        v35 = (_BYTE *)(v185 - 1);
        while ( 1 )
        {
          BYTE1(v13) = *v12;
          v12 += points4[2];
          if ( BYTE1(v13) )
            v35[1] = strPal.byte_BB934_BB924[v13];
          v35 += 2;
          points4 += 4;
          if ( !--v36 )
            break;
LABEL_87:
          BYTE1(v13) = *v12;
          v12 += points4[0];
          if ( BYTE1(v13) )
            *v35 = strPal.byte_BB934_BB924[v13];
        }
        break;
      case 6:
        v37 = (_BYTE *)v185;
        v38 = dword_B5CA4_B5C94;
        HIWORD(v39) = 0;
        v40 = scaledSprX_B5CA8_B5C98 >> 1;
        if ( !(scaledSprX_B5CA8_B5C98 & 1) )
        {
            points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36968];
          goto LABEL_96;
        }
        v40++;
        v37 = (_BYTE *)(v185 - 1);
        while ( 1 )
        {
          BYTE1(v39) = *v12;
          v12 += points4[2];
          if ( BYTE1(v39) )
          {
            LOBYTE(v39) = v37[1];
            LOBYTE(v38) = strPal.byte_BB934_BB924[v39];
            v37[1] = strPal.fog_B7934_B7924[v38];
          }
          v37 += 2;
          points4 += 4;
          if ( !--v40 )
            break;
LABEL_96:
          BYTE1(v39) = *v12;
          v12 += points4[0];
          if ( BYTE1(v39) )
          {
            LOBYTE(v39) = *v37;
            LOBYTE(v38) = strPal.byte_BB934_BB924[v39];
            *v37 = strPal.fog_B7934_B7924[v38];
          }
        }
        break;
      case 7:
        v41 = (_BYTE *)v185;
        v42 = dword_B5CA4_B5C94;
        HIWORD(v43) = 0;
        v44 = scaledSprX_B5CA8_B5C98 >> 1;
        if ( !(scaledSprX_B5CA8_B5C98 & 1) )
        {
            points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36968];
          goto LABEL_105;
        }
        v44++;
        v41 = (_BYTE *)(v185 - 1);
        while ( 1 )
        {
          LOBYTE(v43) = *v12;
          v12 += points4[2];
          if ( (_BYTE)v43 )
          {
            BYTE1(v43) = v41[1];
            LOBYTE(v42) = strPal.byte_BB934_BB924[v43];
            v41[1] = strPal.fog_B7934_B7924[v42];
          }
          v41 += 2;
          points4 += 4;
          if ( !--v44 )
            break;
LABEL_105:
          LOBYTE(v43) = *v12;
          v12 += points4[0];
          if ( (_BYTE)v43 )
          {
            BYTE1(v43) = *v41;
            LOBYTE(v42) = strPal.byte_BB934_BB924[v43];
            *v41 = strPal.fog_B7934_B7924[v42];
          }
        }
        break;
      case 9:
        v45 = (_BYTE *)v185;
        v46 = dword_B5CA4_B5C94 >> 8;
        v47 = scaledSprX_B5CA8_B5C98 >> 1;
        if ( !(scaledSprX_B5CA8_B5C98 & 1) )
        {
          //v17 = v47 & 1;
          v48 = scaledSprX_B5CA8_B5C98 >> 2;
          if (v47 & 1)
          {
            v48++;
            points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36952];
            v45 = (_BYTE *)(v185 - 2);
            goto LABEL_122;
          }
          points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36968];
          goto LABEL_118;
        }
        v49 = v47 + 2;
        //v17 = v49 & 1;
        v48 = v49 >> 1;
        if (!(v49 & 1))
        {
            points4 = (uint32*)&begBscreen_AE3FC_AE3EC_26C3FC_26C3EC[36944];
          v45 = (_BYTE *)(v185 - 3);
          goto LABEL_124;
        }
        v45 = (_BYTE *)(v185 - 1);
        while ( 1 )
        {
          v51 = *v12;
          v12 += points4[2];
          if ( v51 )
            v45[1] = BYTE1(v46);
LABEL_122:
          v52 = *v12;
          v12 += points4[4];
          if ( v52 )
            v45[2] = BYTE1(v46);
LABEL_124:
          v53 = *v12;
          v12 += points4[6];
          if ( v53 )
            v45[3] = BYTE1(v46);
          v45 += 4;
          points4 += 8;
          if ( !--v48 )
            break;
LABEL_118:
          v50 = *v12;
          v12 += points4[0];
          if ( v50 )
            *v45 = BYTE1(v46);
        }
        break;
      default:
        break;
    }
    result = pitchViewPort_93AD4;
    dword_B5CC0_B5CB0 += v172;
    v185 += pitchViewPort_93AD4;
    scaledSprY_B5CC8_B5CB8--;
  }
  while ( scaledSprY_B5CC8_B5CB8 );
}

int counter_sub_2DCB0_2DCF0 = 0;
int counter_dword_B5CB0_B5CA0 = 0;
//SYNCHRONIZED WITH REMC1
void DrawSprite_2DCB0_2DCF0(Type_BegBscreen* a2x)//1FECB0_
{
    //adress 1FECB0_
	//debug
#ifdef debug1
	if (counter_sub_2DCB0_2DCF0 == 0x5d)
	{
		counter_sub_2DCB0_2DCF0++;
		counter_sub_2DCB0_2DCF0--;
	}
	//add_compare(0x1FECB0, true, true);

	//fixPosX_90710 .. 24e710
	uint8_t origbyte20 = 0;
	uint8_t remakebyte20 = 0;
	char buffer1[500];
	sprintf(buffer1, "%08X-0024e710", 0x1FECB0);
	//int comp20 = compare_with_sequence(buffer1, (uint8_t*)&fixPosX_90710, 0x1FECB0, counter_sub_2DCB0_2DCF0 - 0, 4, 4, &origbyte20, &remakebyte20, 0, true);

	origbyte20 = 0;
	remakebyte20 = 0;
	//char buffer1[500];
	sprintf(buffer1, "%08X-FFFFFFF4", 0x1FECBF);
	//comp20 = compare_with_sequence(buffer1, (uint8_t*)&a2x->haveSprite_36, 0x1FECB0, counter_sub_2DCB0_2DCF0 - 0, 1, 1, &origbyte20, &remakebyte20, 0, true);

	counter_sub_2DCB0_2DCF0++;
#endif debug1
	//debug

	  //fix
	Type_sub168_2_2* a1x = nullptr;
	//fix

	for (int result = a2x->haveSprite_36; result; result = str_AE400_AE3F0->str_29795[result].var_u16_29815_20)
	{
		if ((str_AE400_AE3F0->str_29795[result].var_29811_16.byte[0] & 0x21) == 0)
		{
			bool runPart2 = true;
			int16 diffX = str_AE400_AE3F0->str_29795[result].var_u32_29867_72.x - posX_B5D3C_B5D2C;
			int16 diffY = posY_B5D3A_B5D2A - str_AE400_AE3F0->str_29795[result].var_u32_29867_72.y;
			if (byte_B5D3F_B5D2F)
			{
				if (!a2x->var_43)
				{
					int32 tempZ = sub_724C0_729D0(str_AE400_AE3F0->str_29795[result].var_u32_29867_72.x, str_AE400_AE3F0->str_29795[result].var_u32_29867_72.y) - posZ_B5CF8_B5CE8;
					int32 xRot = (diffX * sin_B5CDC_B5CCC - diffY * cos_B5D10_B5D00) >> 16;
					int32 yRot = (diffX * cos_B5D10_B5D00 + diffY * sin_B5CDC_B5CCC) >> 16;
					int32 sqSize = yRot * yRot + xRot * xRot;
					if (yRot > 64 && sqSize < dword_B5D00_B5CF0)
					{
						if (sqSize <= dword_B5CF0_B5CE0)
							dword_B5CA4_B5C94 = 0x2000;
						else
							dword_B5CA4_B5C94 = sqSize < dword_B5D0C_B5CFC ? (32 * (dword_B5D0C_B5CFC - sqSize) / dword_B5CEC_B5CDC) << 8 : 0;
						Type_99BA0* tempEntType = &unk_99BA0x[str_AE400_AE3F0->str_29795[result].var_u16_29881_86];
						if (!tempEntType->var_10)
						{
							int32 wRotXY = xRot * fowDist_B5D14_B5D04 / yRot;
							int32 wRotZY = tempZ * fowDist_B5D14_B5D04 / yRot + dword_B5CFC_B5CEC;
							xRot_B5CB8_B5CA8 = ((wRotXY * cos_B5CE8_B5CD8 - wRotZY * sin_B5CD4_B5CC4) >> 16) + dword_B5D08_B5CF8;
							yRot_B5CB4_B5CA4 = heightViewPort_B5CE4_B5CD4 - ((cos_B5CE8_B5CD8 * wRotZY + sin_B5CD4_B5CC4 * wRotXY) >> 16);
							byte_B5D3E_B5D2E = 0;
							int32 tmpSprFrameRot;
							int32 tmpSprFrameRot2;
							runPart2 = true;
							switch (tempEntType->var_12)
							{
							case 0:
								if (!dword_12DF8C_12DF7C[tempEntType->var_0] && !sub_59050_59560(tempEntType->var_0))
								{
									runPart2 = false;
									break;
								}
								dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
								a1x = dword_12DF8C_12DF7C[tempEntType->var_0]->var_u32_0;
								sprX_B5CD0_B5CC0 = a1x->xx;
								sprY_B5CCC_B5CCC = a1x->yy;
								scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
								scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
								signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
								sprData_B5CB0_B5CA0 = a1x->datax;
								a1x->var_0 |= 8;
								if (dword_B5CA4_B5C94 == 0x2000)
									dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
								else
									dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
								scaledSprY_B5CC8_B5CB8 >>= 2;
								if (scaledSprX_B5CA8_B5C98 > 0 && scaledSprY_B5CC8_B5CB8 > 0)
								{
									dword_B5CAC_B5C9C = 8;
									dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
									sub_2C410_2C450(0);
								}
								break;
							case 1:
								if (!dword_12DF8C_12DF7C[tempEntType->var_0] && !sub_59050_59560(tempEntType->var_0))
								{
									runPart2 = false;
									break;
								}
								dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
								a1x = dword_12DF8C_12DF7C[tempEntType->var_0]->var_u32_0;
								sprX_B5CD0_B5CC0 = a1x->xx;
								sprY_B5CCC_B5CCC = a1x->yy;
								scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
								scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
								signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
								sprData_B5CB0_B5CA0 = a1x->datax;
								a1x->var_0 |= 8;
								if (dword_B5CA4_B5C94 == 0x2000)
									dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
								else
									dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
								scaledSprY_B5CC8_B5CB8 >>= 2;
								if (scaledSprX_B5CA8_B5C98 > 0 && scaledSprY_B5CC8_B5CB8 > 0)
								{
									dword_B5CAC_B5C9C = 8;
									dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
									sub_2C410_2C450(0);
								}
								break;
							case 2:
							case 3:
							case 4:
							case 5:
							case 6:
							case 7:
							case 8:
							case 9:
							case 0xA:
							case 0xB:
							case 0xC:
							case 0xD:
							case 0xE:
							case 0xF:
							case 0x10:
								if (!dword_12DF8C_12DF7C[str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + tempEntType->var_0]
									&& !sub_59050_59560(tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88))
								{
									runPart2 = false;
									break;
								}
								dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
								a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88]->var_u32_0;
								sprX_B5CD0_B5CC0 = a1x->xx;
								sprY_B5CCC_B5CCC = a1x->yy;
								scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
								scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
								signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
								sprData_B5CB0_B5CA0 = a1x->datax;
								a1x->var_0 |= 8;
								if (dword_B5CA4_B5C94 == 0x2000)
									dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
								else
									dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
								scaledSprY_B5CC8_B5CB8 >>= 2;
								if (scaledSprX_B5CA8_B5C98 > 0 && scaledSprY_B5CC8_B5CB8 > 0)
								{
									dword_B5CAC_B5C9C = 8;
									dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
									sub_2C410_2C450(0);
								}
							case 0x11:
								tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
								if (tmpSprFrameRot2 < 8)
								{
									if (!dword_12DF8C_12DF7C[tmpSprFrameRot2 + tempEntType->var_0] && !sub_59050_59560(tmpSprFrameRot2 + tempEntType->var_0))
									{
										runPart2 = false;
										break;
									}
									dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tmpSprFrameRot2 + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
									a1x = dword_12DF8C_12DF7C[tmpSprFrameRot2 + tempEntType->var_0]->var_u32_0;
									sprX_B5CD0_B5CC0 = a1x->xx;
									sprY_B5CCC_B5CCC = a1x->yy;
									scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
									scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
									signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
									sprData_B5CB0_B5CA0 = a1x->datax;
									a1x->var_0 |= 8;
									if (dword_B5CA4_B5C94 == 0x2000)
										dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
									else
										dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
									scaledSprY_B5CC8_B5CB8 >>= 2;
									if (scaledSprX_B5CA8_B5C98 > 0 && scaledSprY_B5CC8_B5CB8 > 0)
									{
										dword_B5CAC_B5C9C = 8;
										dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
										sub_2C410_2C450(0);
									}
									break;
								}
								if (!dword_12DF8C_12DF7C[tempEntType->var_0 + 15 - tmpSprFrameRot2]
									&& !sub_59050_59560(tempEntType->var_0 + 15 - tmpSprFrameRot2))
								{
									runPart2 = false;
									break;
								}
								dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0 + 15 - tmpSprFrameRot2].var_8] = str_AE408_AE3F8->var_u32_4.dword;
								a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + 15 - tmpSprFrameRot2]->var_u32_0;
								sprX_B5CD0_B5CC0 = a1x->xx;
								sprY_B5CCC_B5CCC = a1x->yy;
								scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
								scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
								signedSprX_B5CBC_B5CAC = -sprX_B5CD0_B5CC0;
								sprData_B5CB0_B5CA0 = a1x->datax;
								a1x->var_0 |= 8;
								if (dword_B5CA4_B5C94 == 0x2000)
									dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
								else
									dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
								scaledSprY_B5CC8_B5CB8 >>= 2;
								if (scaledSprX_B5CA8_B5C98 > 0 && scaledSprY_B5CC8_B5CB8 > 0)
								{
									dword_B5CAC_B5C9C = 8;
									dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
									sub_2C410_2C450(0);
								}
								break;
							case 0x12:
								tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
								if (!dword_12DF8C_12DF7C[tmpSprFrameRot2 + tempEntType->var_0]
									&& !sub_59050_59560(tmpSprFrameRot2 + tempEntType->var_0))
								{
									runPart2 = false;
									break;
								}
								dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tmpSprFrameRot2 + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
								a1x = dword_12DF8C_12DF7C[tmpSprFrameRot2 + tempEntType->var_0]->var_u32_0;
								sprX_B5CD0_B5CC0 = a1x->xx;
								sprY_B5CCC_B5CCC = a1x->yy;
								scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
								scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
								signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
								sprData_B5CB0_B5CA0 = a1x->datax;
								a1x->var_0 |= 8;
								if (dword_B5CA4_B5C94 == 0x2000)
									dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
								else
									dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
								scaledSprY_B5CC8_B5CB8 >>= 2;
								if (scaledSprX_B5CA8_B5C98 > 0 && scaledSprY_B5CC8_B5CB8 > 0)
								{
									dword_B5CAC_B5C9C = 8;
									dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
									sub_2C410_2C450(0);
								}
								break;
							case 0x13:
								tmpSprFrameRot = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
								if (tmpSprFrameRot < 8)
								{
									if (!dword_12DF8C_12DF7C[byte_906E8[tmpSprFrameRot] + tempEntType->var_0]
										&& !sub_59050_59560(tempEntType->var_0 + byte_906E8[tmpSprFrameRot]))
									{
										runPart2 = false;
										break;
									}
									dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0 + byte_906E8[tmpSprFrameRot]].var_8] = str_AE408_AE3F8->var_u32_4.dword;
									a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906E8[tmpSprFrameRot]]->var_u32_0;
									sprX_B5CD0_B5CC0 = a1x->xx;
									sprY_B5CCC_B5CCC = a1x->yy;
									scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
									scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
									signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
									sprData_B5CB0_B5CA0 = a1x->datax;
									a1x->var_0 |= 8;
									if (dword_B5CA4_B5C94 == 0x2000)
										dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
									else
										dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
									scaledSprY_B5CC8_B5CB8 >>= 2;
									if (scaledSprX_B5CA8_B5C98 > 0 && scaledSprY_B5CC8_B5CB8 > 0)
									{
										dword_B5CAC_B5C9C = 8;
										dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
										sub_2C410_2C450(0);
									}
									break;
								}
								if (!dword_12DF8C_12DF7C[byte_906E8[tmpSprFrameRot] + tempEntType->var_0]
									&& !sub_59050_59560(tempEntType->var_0 + byte_906E8[tmpSprFrameRot]))
								{
									runPart2 = false;
									break;
								}
								dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[byte_906E8[tmpSprFrameRot] + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
								a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906F8[tmpSprFrameRot]]->var_u32_0;
								sprX_B5CD0_B5CC0 = a1x->xx;
								sprY_B5CCC_B5CCC = a1x->yy;
								scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
								scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
								signedSprX_B5CBC_B5CAC = -sprX_B5CD0_B5CC0;
								sprData_B5CB0_B5CA0 = a1x->datax;
								a1x->var_0 |= 8;
								if (dword_B5CA4_B5C94 == 0x2000)
									dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
								else
									dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
								scaledSprY_B5CC8_B5CB8 >>= 2;
								if (scaledSprX_B5CA8_B5C98 > 0 && scaledSprY_B5CC8_B5CB8 > 0)
								{
									dword_B5CAC_B5C9C = 8;
									dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
									sub_2C410_2C450(0);
								}
								break;
							case 0x14:
								tmpSprFrameRot = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
								if (tmpSprFrameRot >= 8)
								{
									if (!dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906F8[tmpSprFrameRot]]
										&& !sub_59050_59560(tempEntType->var_0 + byte_906F8[tmpSprFrameRot]))
									{
										runPart2 = false;
										break;
									}
									dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0 + byte_906F8[tmpSprFrameRot]].var_8] = str_AE408_AE3F8->var_u32_4.dword;
									a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906F8[tmpSprFrameRot]]->var_u32_0;
									sprX_B5CD0_B5CC0 = a1x->xx;
									sprY_B5CCC_B5CCC = a1x->yy;
									scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
									scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
									signedSprX_B5CBC_B5CAC = -sprX_B5CD0_B5CC0;
								}
								else
								{
									if (!dword_12DF8C_12DF7C[byte_906F8[tmpSprFrameRot] + tempEntType->var_0]
										&& !sub_59050_59560(tempEntType->var_0 + byte_906F8[tmpSprFrameRot]))
									{
										runPart2 = false;
										break;
									}
									dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[byte_906F8[tmpSprFrameRot] + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
									a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906F8[tmpSprFrameRot]]->var_u32_0;
									sprX_B5CD0_B5CC0 = a1x->xx;
									sprY_B5CCC_B5CCC = a1x->yy;
									scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
									scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
									signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
								}
								sprData_B5CB0_B5CA0 = a1x->datax;
								a1x->var_0 |= 8;
								if (dword_B5CA4_B5C94 == 0x2000)
									dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
								else
									dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
								scaledSprY_B5CC8_B5CB8 >>= 2;
								if (scaledSprX_B5CA8_B5C98 > 0 && scaledSprY_B5CC8_B5CB8 > 0)
								{
									dword_B5CAC_B5C9C = 8;
									dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
									sub_2C410_2C450(0);
								}
								break;
							case 0x15:
								if (!dword_12DF8C_12DF7C[tempEntType->var_0] && !sub_59050_59560(tempEntType->var_0))
								{
									runPart2 = false;
									break;
								}
								dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
								a1x = dword_12DF8C_12DF7C[tempEntType->var_0]->var_u32_0;
								sprX_B5CD0_B5CC0 = a1x->xx;
								sprY_B5CCC_B5CCC = a1x->yy;
								scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
								scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
								signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
								sprData_B5CB0_B5CA0 = a1x->datax;
								a1x->var_0 |= 8;
								if (dword_B5CA4_B5C94 == 0x2000)
									dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
								else
									dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
								scaledSprY_B5CC8_B5CB8 >>= 2;
								if (scaledSprX_B5CA8_B5C98 > 0 && scaledSprY_B5CC8_B5CB8 > 0)
								{
									dword_B5CAC_B5C9C = 8;
									dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
									sub_2C410_2C450(0);
								}
								break;
							case 0x16:
							case 0x17:
							case 0x18:
							case 0x19:
							case 0x1A:
							case 0x1B:
							case 0x1C:
							case 0x1D:
							case 0x1E:
							case 0x1F:
							case 0x20:
							case 0x21:
							case 0x22:
							case 0x23:
							case 0x24:
								byte_B5D3E_B5D2E = 1;
								if (!dword_12DF8C_12DF7C[str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + tempEntType->var_0]
									&& !sub_59050_59560(tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88))
								{
									runPart2 = false;
									break;
								}
								dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
								a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88]->var_u32_0;
								sprX_B5CD0_B5CC0 = a1x->xx;
								sprY_B5CCC_B5CCC = a1x->yy;
								scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
								scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
								signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
								sprData_B5CB0_B5CA0 = a1x->datax;
								a1x->var_0 |= 8;
								if (dword_B5CA4_B5C94 == 0x2000)
									dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
								else
									dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
								scaledSprY_B5CC8_B5CB8 >>= 2;
								if (scaledSprX_B5CA8_B5C98 > 0 && scaledSprY_B5CC8_B5CB8 > 0)
								{
									dword_B5CAC_B5C9C = 8;
									dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
									sub_2C410_2C450(0);
								}
								break;
							default:
								sprData_B5CB0_B5CA0 = a1x->datax;
								a1x->var_0 |= 8;
								if (dword_B5CA4_B5C94 == 0x2000)
									dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
								else
									dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
								scaledSprY_B5CC8_B5CB8 >>= 2;
								if (scaledSprX_B5CA8_B5C98 > 0 && scaledSprY_B5CC8_B5CB8 > 0)
								{
									dword_B5CAC_B5C9C = 8;
									dword_B5CA4_B5C94 = (dword_B5CA4_B5C94 >> 2) + 0x2000;
									sub_2C410_2C450(0);
								}
								break;
							}
						}
					}
				}
			}
			if (runPart2)
			{
				int32 tempZ = str_AE400_AE3F0->str_29795[result].var_u32_29867_72.z - posZ_B5CF8_B5CE8;
				int32 xRot = (diffX * sin_B5CDC_B5CCC - diffY * cos_B5D10_B5D00) >> 16;
				int32 yRot = (diffX * cos_B5D10_B5D00 + diffY * sin_B5CDC_B5CCC) >> 16;
				int32 sqSize = yRot * yRot + xRot * xRot;
				if (yRot > 64 && sqSize < dword_B5D00_B5CF0)
				{
					if (sqSize <= dword_B5CF0_B5CE0)
					{
						dword_B5CA4_B5C94 = 0x2000;
					}
					else if (sqSize < dword_B5D0C_B5CFC)
					{
						dword_B5CA4_B5C94 = (32 * (dword_B5D0C_B5CFC - sqSize) / dword_B5CEC_B5CDC) << 8;
					}
					else
					{
						dword_B5CA4_B5C94 = 0;
					}
					Type_99BA0* temp_99BA0 = &unk_99BA0x[str_AE400_AE3F0->str_29795[result].var_u16_29881_86];
					int32 wRotXY = xRot * fowDist_B5D14_B5D04 / yRot;
					int32 wRotZY = tempZ * fowDist_B5D14_B5D04 / yRot + dword_B5CFC_B5CEC;
					xRot_B5CB8_B5CA8 = ((wRotXY * cos_B5CE8_B5CD8 - wRotZY * sin_B5CD4_B5CC4) >> 16) + dword_B5D08_B5CF8;
					yRot_B5CB4_B5CA4 = heightViewPort_B5CE4_B5CD4 - ((cos_B5CE8_B5CD8 * wRotZY + sin_B5CD4_B5CC4 * wRotXY) >> 16);
					byte_B5D3E_B5D2E = 0;

					int32 tmpSprFrameRot2;
					switch (temp_99BA0->var_12)
					{
					case 0:
					case 1:
						if (!dword_12DF8C_12DF7C[temp_99BA0->var_0] && !sub_59050_59560(temp_99BA0->var_0))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[temp_99BA0->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[temp_99BA0->var_0]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)temp_99BA0->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[temp_99BA0->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[temp_99BA0->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(1u);
						break;
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 9:
					case 10:
					case 11:
					case 12:
					case 13:
					case 14:
					case 15:
					case 16:
						if (!dword_12DF8C_12DF7C[str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + temp_99BA0->var_0]
							&& !sub_59050_59560(temp_99BA0->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + temp_99BA0->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[temp_99BA0->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)temp_99BA0->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[temp_99BA0->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[temp_99BA0->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(1u);
						break;
					case 17:
						tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
						if (tmpSprFrameRot2 < 8)
						{
							if (!dword_12DF8C_12DF7C[tmpSprFrameRot2 + temp_99BA0->var_0]
								&& !sub_59050_59560(tmpSprFrameRot2 + temp_99BA0->var_0))
								break;
							a1x = dword_12DF8C_12DF7C[tmpSprFrameRot2 + temp_99BA0->var_0]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)temp_99BA0->var_8) / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
							sprData_B5CB0_B5CA0 = a1x->datax;
							a1x->var_0 |= 8;
							if (dword_B5CA4_B5C94 == 0x2000)
								dword_B5CAC_B5C9C = byte_906DC[temp_99BA0->var_10];
							else
								dword_B5CAC_B5C9C = byte_906E2[temp_99BA0->var_10];
							scaledSprX_B5CA8_B5C98++;
							scaledSprY_B5CC8_B5CB8++;
							sub_2C410_2C450(1u);
							break;
						}
						if (!dword_12DF8C_12DF7C[temp_99BA0->var_0 + 15 - tmpSprFrameRot2]
							&& !sub_59050_59560(temp_99BA0->var_0 + 15 - tmpSprFrameRot2))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[temp_99BA0->var_0 + 15 - tmpSprFrameRot2].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[temp_99BA0->var_0 + 15 - tmpSprFrameRot2]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)temp_99BA0->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = -sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[temp_99BA0->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[temp_99BA0->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(1u);
						break;
					case 18:
						tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
						if (!dword_12DF8C_12DF7C[tmpSprFrameRot2 + temp_99BA0->var_0]
							&& !sub_59050_59560(tmpSprFrameRot2 + temp_99BA0->var_0))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tmpSprFrameRot2 + temp_99BA0->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tmpSprFrameRot2 + temp_99BA0->var_0]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)temp_99BA0->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[temp_99BA0->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[temp_99BA0->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(1u);
						break;
					case 19:
						tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
						if (tmpSprFrameRot2 < 8)
						{
							if (!dword_12DF8C_12DF7C[byte_906E8[tmpSprFrameRot2] + temp_99BA0->var_0]
								&& !sub_59050_59560(temp_99BA0->var_0 + byte_906E8[tmpSprFrameRot2]))
								break;
							dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[byte_906E8[tmpSprFrameRot2] + temp_99BA0->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
							a1x = dword_12DF8C_12DF7C[temp_99BA0->var_0 + byte_906E8[tmpSprFrameRot2]]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)temp_99BA0->var_8) / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
							sprData_B5CB0_B5CA0 = a1x->datax;
							a1x->var_0 |= 8;
							if (dword_B5CA4_B5C94 == 0x2000)
								dword_B5CAC_B5C9C = byte_906DC[temp_99BA0->var_10];
							else
								dword_B5CAC_B5C9C = byte_906E2[temp_99BA0->var_10];
							scaledSprX_B5CA8_B5C98++;
							scaledSprY_B5CC8_B5CB8++;
							sub_2C410_2C450(1u);
							break;
						}
						if (!dword_12DF8C_12DF7C[byte_906E8[tmpSprFrameRot2] + temp_99BA0->var_0]
							&& !sub_59050_59560(temp_99BA0->var_0 + byte_906E8[tmpSprFrameRot2]))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[byte_906E8[tmpSprFrameRot2] + temp_99BA0->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[temp_99BA0->var_0 + byte_906E8[tmpSprFrameRot2]]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)temp_99BA0->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = -sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[temp_99BA0->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[temp_99BA0->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(1u);
						break;
					case 20:
						tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
						if (tmpSprFrameRot2 >= 8)
						{
							if (!dword_12DF8C_12DF7C[temp_99BA0->var_0 + byte_906F8[tmpSprFrameRot2]]
								&& !sub_59050_59560(temp_99BA0->var_0 + byte_906F8[tmpSprFrameRot2]))
								break;
							dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[temp_99BA0->var_0 + byte_906F8[tmpSprFrameRot2]].var_8] = str_AE408_AE3F8->var_u32_4.dword;
							a1x = dword_12DF8C_12DF7C[byte_906F8[tmpSprFrameRot2] + temp_99BA0->var_0]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)temp_99BA0->var_8) / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = -sprX_B5CD0_B5CC0;
						}
						else
						{
							if (!dword_12DF8C_12DF7C[temp_99BA0->var_0 + byte_906F8[tmpSprFrameRot2]]
								&& !sub_59050_59560(temp_99BA0->var_0 + byte_906F8[tmpSprFrameRot2]))
								break;
							dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[temp_99BA0->var_0 + byte_906F8[tmpSprFrameRot2]].var_8] = str_AE408_AE3F8->var_u32_4.dword;
							a1x = dword_12DF8C_12DF7C[temp_99BA0->var_0 + byte_906F8[tmpSprFrameRot2]]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)temp_99BA0->var_8) / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						}
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[temp_99BA0->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[temp_99BA0->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(1u);
						break;
					case 21:
						if (!dword_12DF8C_12DF7C[temp_99BA0->var_0] && !sub_59050_59560(temp_99BA0->var_0))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[temp_99BA0->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						byte_B5D3E_B5D2E = 1;
						a1x = dword_12DF8C_12DF7C[temp_99BA0->var_0]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)temp_99BA0->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[temp_99BA0->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[temp_99BA0->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(1u);
						break;
					case 22:
					case 23:
					case 24:
					case 25:
					case 26:
					case 27:
					case 28:
					case 29:
					case 30:
					case 31:
					case 32:
					case 33:
					case 34:
					case 35:
					case 36:
						byte_B5D3E_B5D2E = 1;
						if (!dword_12DF8C_12DF7C[str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + temp_99BA0->var_0]
							&& !sub_59050_59560(temp_99BA0->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + temp_99BA0->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[temp_99BA0->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)temp_99BA0->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[temp_99BA0->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[temp_99BA0->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(1u);
						break;
					default:
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[temp_99BA0->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[temp_99BA0->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(1u);
						break;
					}
				}
			}
		}
	}
}

//SYNCHRONIZED WITH REMC1
void DrawSprite3D_2F170_2F1B0(/*int a1,*/ Type_BegBscreen* a2x)//200170_
{
	//fix
	Type_sub168_2_2* a1x = nullptr;
	//fix

	for (int result = a2x->haveSprite_36; result; result = str_AE400_AE3F0->str_29795[result].var_u16_29815_20)
	{
		if (result < 0x3E8u)
		{
			if ((str_AE400_AE3F0->str_29795[result].var_29811_16.byte[0] & 0x21) == 0)
			{
				int16 diffX = str_AE400_AE3F0->str_29795[result].var_u32_29867_72.x - posX_B5D3C_B5D2C;
				int16 diffY = posY_B5D3A_B5D2A - str_AE400_AE3F0->str_29795[result].var_u32_29867_72.y;
				int32 tempZ = str_AE400_AE3F0->str_29795[result].var_u32_29867_72.z - posZ_B5CF8_B5CE8;
				int32 xRot = (diffX * sin_B5CDC_B5CCC - diffY * cos_B5D10_B5D00) >> 16;
				int32 yRot = (diffX * cos_B5D10_B5D00 + diffY * sin_B5CDC_B5CCC) >> 16;
				if (yRot > 64)
				{
					dword_B5CA4_B5C94 = 0x400000 - 350 * (5120 - yRot);
					Type_99BA0* tempEntType = &unk_99BA0x[str_AE400_AE3F0->str_29795[result].var_u16_29881_86];
					int32 wRotXY = xRot * fowDist_B5D14_B5D04 / yRot;
					int32 wRotZY = tempZ * fowDist_B5D14_B5D04 / yRot + dword_B5CFC_B5CEC;
					xRot_B5CB8_B5CA8 = ((wRotXY * cos_B5CE8_B5CD8 - wRotZY * sin_B5CD4_B5CC4) >> 16) + dword_B5D08_B5CF8;
					yRot_B5CB4_B5CA4 = heightViewPort_B5CE4_B5CD4 - ((sin_B5CD4_B5CC4 * wRotXY + cos_B5CE8_B5CD8 * wRotZY) >> 16);
					byte_B5D3E_B5D2E = 0;
					int32 tmpSprFrameRot2;
					switch (tempEntType->var_12)
					{
					case 0:
					case 1:
						if (!dword_12DF8C_12DF7C[tempEntType->var_0] && !sub_59050_59560(tempEntType->var_0))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tempEntType->var_0]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						dword_B5CAC_B5C9C = 9;
						a1x->var_0 |= 8;
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sprData_B5CB0_B5CA0 = a1x->datax;
						sub_2C410_2C450(1u);
						break;
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 9:
					case 10:
					case 11:
					case 12:
					case 13:
					case 14:
					case 15:
					case 16:
						if (!dword_12DF8C_12DF7C[str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + tempEntType->var_0]
							&& !sub_59050_59560(tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						dword_B5CAC_B5C9C = 9;
						a1x->var_0 |= 8;
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sprData_B5CB0_B5CA0 = a1x->datax;
						sub_2C410_2C450(1u);
						break;
					case 17:
						tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
						if (tmpSprFrameRot2 < 8)
						{
							if (!dword_12DF8C_12DF7C[tmpSprFrameRot2 + tempEntType->var_0]
								&& !sub_59050_59560(tmpSprFrameRot2 + tempEntType->var_0))
								break;
							dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tmpSprFrameRot2 + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
							a1x = dword_12DF8C_12DF7C[tmpSprFrameRot2 + tempEntType->var_0]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
							dword_B5CAC_B5C9C = 9;
							a1x->var_0 |= 8;
							scaledSprX_B5CA8_B5C98++;
							scaledSprY_B5CC8_B5CB8++;
							sprData_B5CB0_B5CA0 = a1x->datax;
							sub_2C410_2C450(1u);
							break;
						}
						if (dword_12DF8C_12DF7C[tempEntType->var_0 + 15 - tmpSprFrameRot2] || sub_59050_59560(tempEntType->var_0 + 15 - tmpSprFrameRot2))
						{
							dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0 + 15 - tmpSprFrameRot2].var_8] = str_AE408_AE3F8->var_u32_4.dword;
							a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + 15 - tmpSprFrameRot2]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = fowDist_B5D14_B5D04 * (__int64)tempEntType->var_8 / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = -sprX_B5CD0_B5CC0;
							dword_B5CAC_B5C9C = 9;
							a1x->var_0 |= 8;
							scaledSprX_B5CA8_B5C98++;
							scaledSprY_B5CC8_B5CB8++;
							sprData_B5CB0_B5CA0 = a1x->datax;
							sub_2C410_2C450(1u);
							break;
						}
						break;
					case 18:
						tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
						if (!dword_12DF8C_12DF7C[tmpSprFrameRot2 + tempEntType->var_0]
							&& !sub_59050_59560(tmpSprFrameRot2 + tempEntType->var_0))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tmpSprFrameRot2 + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tmpSprFrameRot2 + tempEntType->var_0]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						dword_B5CAC_B5C9C = 9;
						a1x->var_0 |= 8;
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sprData_B5CB0_B5CA0 = a1x->datax;
						sub_2C410_2C450(1u);
						break;
					case 19:
						tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
						if (tmpSprFrameRot2 < 8)
						{
							if (!dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906E8[tmpSprFrameRot2]]
								&& !sub_59050_59560(tempEntType->var_0 + byte_906E8[tmpSprFrameRot2]))
								break;
							dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0 + byte_906E8[tmpSprFrameRot2]].var_8] = str_AE408_AE3F8->var_u32_4.dword;
							a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906E8[tmpSprFrameRot2]]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
							dword_B5CAC_B5C9C = 9;
							a1x->var_0 |= 8;
							scaledSprX_B5CA8_B5C98++;
							scaledSprY_B5CC8_B5CB8++;
							sprData_B5CB0_B5CA0 = a1x->datax;
							sub_2C410_2C450(1u);
							break;
						}
						if (!dword_12DF8C_12DF7C[byte_906E8[tmpSprFrameRot2] + tempEntType->var_0]
							&& !sub_59050_59560(tempEntType->var_0 + byte_906E8[tmpSprFrameRot2]))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[byte_906E8[tmpSprFrameRot2] + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906E8[tmpSprFrameRot2]]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = fowDist_B5D14_B5D04 * (__int64)tempEntType->var_8 / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = -sprX_B5CD0_B5CC0;
						dword_B5CAC_B5C9C = 9;
						a1x->var_0 |= 8;
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sprData_B5CB0_B5CA0 = a1x->datax;
						sub_2C410_2C450(1u);
						break;
					case 20:
						tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
						if (tmpSprFrameRot2 >= 8)
						{
							if (!dword_12DF8C_12DF7C[byte_906F8[tmpSprFrameRot2] + tempEntType->var_0]
								&& !sub_59050_59560(tempEntType->var_0 + byte_906F8[tmpSprFrameRot2]))
								break;
							dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[byte_906F8[tmpSprFrameRot2] + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
							a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906F8[tmpSprFrameRot2]]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = fowDist_B5D14_B5D04 * (__int64)tempEntType->var_8 / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = -sprX_B5CD0_B5CC0;
						}
						else
						{
							if (!dword_12DF8C_12DF7C[byte_906F8[tmpSprFrameRot2] + tempEntType->var_0]
								&& !sub_59050_59560(tempEntType->var_0 + byte_906F8[tmpSprFrameRot2]))
								break;
							dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[byte_906F8[tmpSprFrameRot2] + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
							a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906F8[tmpSprFrameRot2]]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						}
						dword_B5CAC_B5C9C = 9;
						a1x->var_0 |= 8;
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sprData_B5CB0_B5CA0 = a1x->datax;
						sub_2C410_2C450(1u);
						break;
					case 21:
						if (!dword_12DF8C_12DF7C[tempEntType->var_0] && !sub_59050_59560(tempEntType->var_0))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						byte_B5D3E_B5D2E = 1;
						a1x = dword_12DF8C_12DF7C[tempEntType->var_0]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						dword_B5CAC_B5C9C = 9;
						a1x->var_0 |= 8;
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sprData_B5CB0_B5CA0 = a1x->datax;
						sub_2C410_2C450(1u);
						break;
					case 22:
					case 23:
					case 24:
					case 25:
					case 26:
					case 27:
					case 28:
					case 29:
					case 30:
					case 31:
					case 32:
					case 33:
					case 34:
					case 35:
					case 36:
						byte_B5D3E_B5D2E = 1;
						if (!dword_12DF8C_12DF7C[str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + tempEntType->var_0]
							&& !sub_59050_59560(tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						dword_B5CAC_B5C9C = 9;
						a1x->var_0 |= 8;
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sprData_B5CB0_B5CA0 = a1x->datax;
						sub_2C410_2C450(1u);
						break;
					default:
						dword_B5CAC_B5C9C = 9;
						a1x->var_0 |= 8;
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sprData_B5CB0_B5CA0 = a1x->datax;
						sub_2C410_2C450(1u);
						break;
					}
				}
			}
		}
	}
}

int counter_2FC50_2FC90 = 0;
int counter_2FC50_2FC90_2 = 0;
//SYNCHRONIZED WITH REMC1
void DrawSprite_2FC50_2FC90(Type_BegBscreen* a2x)//200C50_
{
	//fix
	Type_sub168_2_2* a1x = nullptr;
	//fix

	//debug
	counter_2FC50_2FC90++;
	//debug

	for (int result = a2x->haveSprite_36; result; result = str_AE400_AE3F0->str_29795[result].var_u16_29815_20)
	{
		//debug
		counter_2FC50_2FC90_2++;
		//debug
		if (result < 0x3E8u)
		{
			if ((str_AE400_AE3F0->str_29795[result].var_29811_16.byte[0] & 0x21) == 0)
			{
				int16 diffX = str_AE400_AE3F0->str_29795[result].var_u32_29867_72.x - posX_B5D3C_B5D2C;
				int16 diffY = posY_B5D3A_B5D2A - str_AE400_AE3F0->str_29795[result].var_u32_29867_72.y;
				int32 tempZ = -str_AE400_AE3F0->str_29795[result].var_u32_29867_72.z - posZ_B5CF8_B5CE8;
				int32 xRot = (diffX * sin_B5CDC_B5CCC - diffY * cos_B5D10_B5D00) >> 16;
				int32 yRot = (diffX * cos_B5D10_B5D00 + diffY * sin_B5CDC_B5CCC) >> 16;
				int32 sqSize = yRot * yRot + xRot * xRot;
				if (yRot > 64 && sqSize < dword_B5D00_B5CF0)
				{
					if (sqSize <= dword_B5CF0_B5CE0)
					{
						dword_B5CA4_B5C94 = 0x2000;
					}
					else if (sqSize < dword_B5D0C_B5CFC)
					{
						dword_B5CA4_B5C94 = (32 * (dword_B5D0C_B5CFC - sqSize) / dword_B5CEC_B5CDC) << 8;
					}
					else
					{
						dword_B5CA4_B5C94 = 0;
					}
					Type_99BA0* tempEntType = &unk_99BA0x[str_AE400_AE3F0->str_29795[result].var_u16_29881_86];
					int32 wRotXY = xRot * fowDist_B5D14_B5D04 / yRot;
					int32 wRotZY = tempZ * fowDist_B5D14_B5D04 / yRot + dword_B5CFC_B5CEC;
					xRot_B5CB8_B5CA8 = dword_B5D08_B5CF8 + ((wRotXY * cos_B5CE8_B5CD8 - wRotZY * sin_B5CD4_B5CC4) >> 16);
					yRot_B5CB4_B5CA4 = heightViewPort_B5CE4_B5CD4 - ((wRotXY * sin_B5CD4_B5CC4 + wRotZY * cos_B5CE8_B5CD8) >> 16);
					byte_B5D3E_B5D2E = 0;
					int32 tmpSprFrameRot2;
					switch (tempEntType->var_12)
					{
					case 0:
						if (!dword_12DF8C_12DF7C[tempEntType->var_0] && !sub_59050_59560(tempEntType->var_0))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tempEntType->var_0]->var_u32_0;

						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(2u);
						break;
					case 1:
						if (!dword_12DF8C_12DF7C[tempEntType->var_0] && !sub_59050_59560(tempEntType->var_0))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tempEntType->var_0]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(2u);
						break;
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
					case 7:
					case 8:
					case 9:
					case 10:
					case 11:
					case 12:
					case 13:
					case 14:
					case 15:
					case 16:
						if (!dword_12DF8C_12DF7C[tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88]
							&& !sub_59050_59560(tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(2u);
						break;
					case 17:
						tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
						if (tmpSprFrameRot2 < 8)
						{
							if (!dword_12DF8C_12DF7C[tmpSprFrameRot2 + tempEntType->var_0]
								&& !sub_59050_59560(tmpSprFrameRot2 + tempEntType->var_0))
								break;
							dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tmpSprFrameRot2 + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
							a1x = dword_12DF8C_12DF7C[tmpSprFrameRot2 + tempEntType->var_0]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
							sprData_B5CB0_B5CA0 = a1x->datax;
							a1x->var_0 |= 8;
							if (dword_B5CA4_B5C94 == 0x2000)
								dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
							else
								dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
							scaledSprX_B5CA8_B5C98++;
							scaledSprY_B5CC8_B5CB8++;
							sub_2C410_2C450(2u);
							break;
						}
						if (!dword_12DF8C_12DF7C[tempEntType->var_0 + 15 - tmpSprFrameRot2]
							&& !sub_59050_59560(tempEntType->var_0 + 15 - tmpSprFrameRot2))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0 + 15 - tmpSprFrameRot2].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + 15 - tmpSprFrameRot2]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = -sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(2u);
						break;
					case 18:
						tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
						if (!dword_12DF8C_12DF7C[tmpSprFrameRot2 + tempEntType->var_0]
							&& !sub_59050_59560(tmpSprFrameRot2 + tempEntType->var_0))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tmpSprFrameRot2 + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tmpSprFrameRot2 + tempEntType->var_0]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(2u);
						break;
					case 19:
						tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
						if (tmpSprFrameRot2 < 8)
						{
							if (!dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906E8[tmpSprFrameRot2]]
								&& !sub_59050_59560(tempEntType->var_0 + byte_906E8[tmpSprFrameRot2]))
								break;
							dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0 + byte_906E8[tmpSprFrameRot2]].var_8] = str_AE408_AE3F8->var_u32_4.dword;
							a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906E8[tmpSprFrameRot2]]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
							sprData_B5CB0_B5CA0 = a1x->datax;
							a1x->var_0 |= 8;
							if (dword_B5CA4_B5C94 == 0x2000)
								dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
							else
								dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
							scaledSprX_B5CA8_B5C98++;
							scaledSprY_B5CC8_B5CB8++;
							sub_2C410_2C450(2u);
							break;
						}
						if (!dword_12DF8C_12DF7C[byte_906E8[tmpSprFrameRot2] + tempEntType->var_0]
							&& !sub_59050_59560(tempEntType->var_0 + byte_906E8[tmpSprFrameRot2]))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[byte_906E8[tmpSprFrameRot2] + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906E8[tmpSprFrameRot2]]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = -sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(2u);
						break;
					case 20:
						tmpSprFrameRot2 = (((str_AE400_AE3F0->str_29795[result].var_u16_29825_30 - (unsigned __int16)yaw_B5D38_B5D28) >> 3) & 0xF0) >> 4;
						if (tmpSprFrameRot2 >= 8)
						{
							if (!dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906F8[tmpSprFrameRot2]]
								&& !sub_59050_59560(tempEntType->var_0 + byte_906F8[tmpSprFrameRot2]))
								break;
							dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0 + byte_906F8[tmpSprFrameRot2]].var_8] = str_AE408_AE3F8->var_u32_4.dword;
							a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906F8[tmpSprFrameRot2]]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = -sprX_B5CD0_B5CC0;
						}
						else
						{
							if (!dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906F8[tmpSprFrameRot2]]
								&& !sub_59050_59560(tempEntType->var_0 + byte_906F8[tmpSprFrameRot2]))
								break;
							dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0 + byte_906F8[tmpSprFrameRot2]].var_8] = str_AE408_AE3F8->var_u32_4.dword;
							a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + byte_906F8[tmpSprFrameRot2]]->var_u32_0;
							sprX_B5CD0_B5CC0 = a1x->xx;
							sprY_B5CCC_B5CCC = a1x->yy;
							scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
							scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
							signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						}
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(2u);
						break;
					case 21:
						if (!dword_12DF8C_12DF7C[tempEntType->var_0] && !sub_59050_59560(tempEntType->var_0))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						byte_B5D3E_B5D2E = 1;
						a1x = dword_12DF8C_12DF7C[tempEntType->var_0]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(2u);
						break;
					case 22:
					case 23:
					case 24:
					case 25:
					case 26:
					case 27:
					case 28:
					case 29:
					case 30:
					case 31:
					case 32:
					case 33:
					case 34:
					case 35:
					case 36:
						byte_B5D3E_B5D2E = 1;
						if (!dword_12DF8C_12DF7C[tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88]
							&& !sub_59050_59560(tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88))
							break;
						dword_12CF00_12CEF0[begTmapsTab_12D744_12D734_2EB744_2EB734x[str_AE400_AE3F0->str_29795[result].var_u8_29883_88 + tempEntType->var_0].var_8] = str_AE408_AE3F8->var_u32_4.dword;
						a1x = dword_12DF8C_12DF7C[tempEntType->var_0 + str_AE400_AE3F0->str_29795[result].var_u8_29883_88]->var_u32_0;
						sprX_B5CD0_B5CC0 = a1x->xx;
						sprY_B5CCC_B5CCC = a1x->yy;
						scaledSprY_B5CC8_B5CB8 = (__int64)(fowDist_B5D14_B5D04 * (unsigned __int64)tempEntType->var_8) / yRot;
						scaledSprX_B5CA8_B5C98 = scaledSprY_B5CC8_B5CB8 * sprX_B5CD0_B5CC0 / sprY_B5CCC_B5CCC;
						signedSprX_B5CBC_B5CAC = sprX_B5CD0_B5CC0;
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(2u);
						break;
					default:
						sprData_B5CB0_B5CA0 = a1x->datax;
						a1x->var_0 |= 8;
						if (dword_B5CA4_B5C94 == 0x2000)
							dword_B5CAC_B5C9C = byte_906DC[tempEntType->var_10];
						else
							dword_B5CAC_B5C9C = byte_906E2[tempEntType->var_10];
						scaledSprX_B5CA8_B5C98++;
						scaledSprY_B5CC8_B5CB8++;
						sub_2C410_2C450(2u);
						break;
					}
				}
			}
		}
	}
}

void DrawSky_30730_30770(int16_t roll)
{
    int v1; // ebx
    int v2; // edx
    __int64 v3; // rtt
    int v4; // ebp
    int v5; // ebx
    _BYTE* v6; // edx
    int v7; // eax
    unsigned __int8 v8; // ch
    int v9; // edx
    int v10; // eax
    __int16 result; // ax
    int v12; // ebp
    int v13; // eax
    _BYTE* v14; // esi
    int* v15; // edi
    int v16; // edx
    int v17; // ecx
    int v18; // ebx
    int v19; // eax
    _BYTE v20[1280]; // [esp+0h] [ebp-538h] BYREF
    int v21; // [esp+500h] [ebp-38h]
    int v22; // [esp+504h] [ebp-34h]
    int v23; // [esp+508h] [ebp-30h]
    int v24; // [esp+50Ch] [ebp-2Ch]
    int v25; // [esp+510h] [ebp-28h]
    int v26; // [esp+514h] [ebp-24h]
    int v27; // [esp+518h] [ebp-20h]
    unsigned __int8 v28; // [esp+51Ch] [ebp-1Ch]
    unsigned __int8 v29; // [esp+520h] [ebp-18h]
    char v30; // [esp+524h] [ebp-14h]

    v1 = roll & 0x7FF;
    v2 = (_DWORD)cos_9134C[v1] << 8;
    v26 = (sin_90B4C[v1] << 8) / (unsigned __int16)widthViewPort_93AD8;
    v3 = v2;
    v4 = 0;
    v30 = 0;
    v29 = 0;
    v5 = (unsigned __int16)widthViewPort_93AD8;
    v6 = v20;
    v25 = v3 / (unsigned __int16)widthViewPort_93AD8;
    v7 = 0;
    if ((_WORD)widthViewPort_93AD8)
    {
        do
        {
            LOBYTE(v23) = BYTE2(v4);
            *v6 = BYTE2(v7) - v30;
            v8 = v23;
            v23 = (unsigned __int8)v23 - v29;
            v28 = v8;
            v6 += 2;
            v30 = BYTE2(v7);
            *(v6 - 1) = v23;
            v29 = v28;
            v4 += v26;
            v7 += v25;
            --v5;
        } while (v5);
    }
    v9 = (-(sin_B5CD4_B5CC4 * dword_B5CFC_B5CEC) >> 16) + dword_B5D08_B5CF8;
    v10 = heightViewPort_B5CE4_B5CD4 - ((cos_B5CE8_B5CD8 * dword_B5CFC_B5CEC) >> 16);
    v21 = ((unsigned __int16)yaw_B5D38_B5D28 << 15) - (v9 * v25 - v10 * v26);
    v27 = -(v26 * v9 + v25 * v10);
    result = heightViewPort_93ADC;
    v12 = (int)beginFrame_93ACC;
    v22 = (unsigned __int16)heightViewPort_93ADC;
    if ((_WORD)heightViewPort_93ADC)
    {
        do
        {
            v13 = (int)(unsigned __int16)widthViewPort_93AD8 >> 2;
            v14 = v20;
            v23 = v27 >> 16;
            v15 = (int*)v12;
            v24 = v21 >> 16;
            v16 = (int)begSky_AE3D8_AE3C8_26C3D8_26C3C8;
            BYTE1(v18) = BYTE2(v27);
            v17 = v13;
            LOBYTE(v18) = BYTE2(v21);
            v18 = (unsigned __int16)v18;
            do
            {
                LOBYTE(v13) = *(_BYTE*)(v18 + v16);
                LOBYTE(v18) = *v14 + v18;
                BYTE1(v18) += v14[1];
                BYTE1(v13) = *(_BYTE*)(v18 + v16);
                LOBYTE(v18) = v14[2] + v18;
                BYTE1(v18) += v14[3];
                v19 = v13 << 16;
                LOBYTE(v19) = *(_BYTE*)(v18 + v16);
                LOBYTE(v18) = v14[4] + v18;
                BYTE1(v18) += v14[5];
                BYTE1(v19) = *(_BYTE*)(v18 + v16);
                LOBYTE(v18) = v14[6] + v18;
                BYTE1(v18) += v14[7];
                v13 = __ROL4__(v19, 16);
                *v15++ = v13;
                v14 += 8;
                --v17;
            } while (v17);
            result = v25;
            v12 += pitchViewPort_93AD4;
            v21 -= v26;
            v27 += v25;
            --v22;
        } while (v22);
    }
}

//SYNCHRONIZED WITH REMC1
/*
void DrawSky_30730_30770(int16_t roll)//201730_
{
    int skyTextSize = 256;
    int lineWidthSQ = skyTextSize * skyTextSize;
    bsaxis_2d errLine[3840]; // for 4K
    int roundRoll = roll & 0x7FF;
    int cosRoll = (sin_90B4C[roundRoll] << 8) / widthViewPort_93AD8;
    int sinRoll = (cos_9134C[roundRoll] << 8) / widthViewPort_93AD8;
    int errorX = 0;
    int errorY = 0;
    int8_t oldErrorX = 0;
    int8_t oldErrorY = 0;
    int index = 0;
    uint16_t width = widthViewPort_93AD8;
    while (width)
    {
        errLine[index].x = BYTE2(errorY) - oldErrorX;
        errLine[index].y = BYTE2(errorX) - oldErrorY;
        oldErrorX = BYTE2(errorY);
        oldErrorY = BYTE2(errorX);
        errorX += cosRoll;
        errorY += sinRoll;
        index++;
        width--;
    }
    uint8_t* viewPortRenderBufferStart = beginFrame_93ACC;
    int addX = (-(dword_B5CD4_B5CC4 * dword_B5CFC_B5CEC) >> 16) + dword_B5D08_B5CF8;
    int addY = heightViewPort_B5CE4_B5CD4 - ((dword_B5CE8_B5CD8 * dword_B5CFC_B5CEC) >> 16);
    int beginX = (yaw_B5D38_B5D28 << 15) - (addX * sinRoll - addY * cosRoll);
    int beginY = -(cosRoll * addX + sinRoll * addY);
    for (int height = heightViewPort_93ADC - 1; height >= 0; height--)
    {
        index = 0;
        uint8_t* viewPortLineRenderBufferStart = viewPortRenderBufferStart;
        int texturePixelIndex = ((uint32)beginX / (256 * 256)) % skyTextSize + ((uint32)beginY / (256 * 256)) * skyTextSize;
        texturePixelIndex = (texturePixelIndex + lineWidthSQ * 2) % lineWidthSQ;

        int texturePixelIndexX = texturePixelIndex % skyTextSize;
        int texturePixelIndexY = (int32)(texturePixelIndex / skyTextSize);

        for (uint8_t* endLine = viewPortLineRenderBufferStart + widthViewPort_93AD8; viewPortLineRenderBufferStart < endLine; viewPortLineRenderBufferStart++)
        {
            *viewPortLineRenderBufferStart = begSky_AE3D8_AE3C8_26C3D8_26C3C8[texturePixelIndexX + skyTextSize * texturePixelIndexY];
            texturePixelIndexX = (texturePixelIndexX + errLine[index].x + skyTextSize) % skyTextSize;
            texturePixelIndexY = (texturePixelIndexY + errLine[index].y + skyTextSize) % skyTextSize;
            index++;
        }
        viewPortRenderBufferStart += pitchViewPort_93AD4;
        beginX -= cosRoll;
        beginY += sinRoll;
    }
}
*/

//SYNCHRONIZED WITH REMC1
/*
void DrawSky_30730_30770(int16_t roll)//201730_
{
  int skyTextSize = 256;

  int lineWidthSQ = skyTextSize * skyTextSize;

  bsaxis_2d errLine[3840]; // for 4K
  uint32 beginX;
  uint32 beginY;
  int roundRoll = roll & 0x7FF;
  int sinRoll = (sin_90B4C[roundRoll] * skyTextSize) / widthViewPort_93AD8;
  int cosRoll = (cos_9134C[roundRoll] * skyTextSize) / widthViewPort_93AD8;
  int errorX = 0;
  int errorY = 0;
  int8_t oldErrorX = 0;
  int8_t oldErrorY = 0;

  // prepare sky texture lookup table
  for (uint16_t width = 0; width < widthViewPort_93AD8; width++)
    {
          errLine[width].x = (errorX >> 16) - oldErrorX;
          errLine[width].y = (errorY >> 16) - oldErrorY;
          oldErrorX = (errorX >> 16);
          oldErrorY = (errorY >> 16);
        errorY += sinRoll;
        errorX += cosRoll;
    }

  uint8_t* viewPortRenderBufferStart = beginFrame_93ACC;
  int addX = (-(dword_B5CD4_B5CC4 * dword_B5CFC_B5CEC) >> 16) + dword_B5D08_B5CF8;
  int addY = heightViewPort_B5CE4_B5CD4 - ((dword_B5CE8_B5CD8 * dword_B5CFC_B5CEC) >> 16);
  beginX = (yaw_B5D38_B5D28 << 15) * (skyTextSize / 256) - (addX * cosRoll - addY * sinRoll);
  beginY = -(sinRoll * addX + cosRoll * addY);

  for (int height = 0; height < heightViewPort_93ADC; height++)
  {
      uint8* viewPortLineRenderBufferStart = viewPortRenderBufferStart;

      uint32 texturePixelIndexX = (beginX >> 16);
      uint32 texturePixelIndexY = (beginY >> 16);
      if (skyTextSize == 0x100)
      {
          texturePixelIndexX %= (skyTextSize - 1);
          texturePixelIndexY %= (skyTextSize - 1);
      }

      //Scales sky texture to viewport
      for (uint16_t width = 0; width < widthViewPort_93AD8; width++)
      {
          *viewPortLineRenderBufferStart = begSky_AE3D8_AE3C8_26C3D8_26C3C8[(texturePixelIndexX + skyTextSize * texturePixelIndexY) % lineWidthSQ];
          texturePixelIndexX = (texturePixelIndexX + errLine[width].x + skyTextSize) % skyTextSize;
          texturePixelIndexY = (texturePixelIndexY + errLine[width].y + skyTextSize) % skyTextSize;
          viewPortLineRenderBufferStart++;
      }
      viewPortRenderBufferStart += pitchViewPort_93AD4;
      beginX -= sinRoll;
      beginY += cosRoll;
  }
}
*/

//----- (000309D0) --------------------------------------------------------
void sub_309D0_30A10(int a1)
{
  uint8* result; // eax

  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    dword_B5CA0_B5C90 = scrWidth_12EFF0_12EFE0 - 8 * a1;
    result = scrWidth_12EFF0_12EFE0 - 8 * a1 + begWscreen_2ECFF4_2ECFE4;
    SetViewPort2_79495_799A5(result, 0, scrWidth_12EFF0_12EFE0, (unsigned __int16)(8 * a1), (unsigned __int16)(5 * a1));
  }
  else
  {
    dword_B5CA0_B5C90 = scrWidth_12EFF0_12EFE0 - 16 * a1;
    result = scrWidth_12EFF0_12EFE0 - 16 * a1 + begWscreen_2ECFF4_2ECFE4;
    SetViewPort2_79495_799A5(result, 0, scrWidth_12EFF0_12EFE0, (unsigned __int16)(16 * a1), (unsigned __int16)(12 * a1));
  }
}
// B5CA0: using guessed type int dword_B5CA0_B5C90;
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//SYNCHRONIZED WITH REMC1
void setViewPort_30A70_30AB0(int viewPortSize)//201A70_
{
	int frameShift;
	int viewPortHeight;
	int viewPortWidth;
	int result;

	int frameSize = 40 - viewPortSize;
	if ((typeResolution_12F02E_12F01E & 1) != 0)
	{
		frameShift = scrWidth_12EFF0_12EFE0 * (5 * frameSize / 2) + 4 * frameSize;
		viewPortHeight = 5 * viewPortSize;
		viewPortWidth = 8 * viewPortSize;
	}
	else
	{
		frameShift = scrWidth_12EFF0_12EFE0 * (12 * frameSize / 2) + 8 * frameSize;
		viewPortHeight = 12 * viewPortSize;
		viewPortWidth = 16 * viewPortSize;
	}
	dword_B5CA0_B5C90 = frameShift;
	SetViewPort2_79495_799A5(frameShift + begWscreen_2ECFF4_2ECFE4, 0, scrWidth_12EFF0_12EFE0, viewPortWidth, viewPortHeight);
}

//----- (00030B30) --------------------------------------------------------
void sub_30B30_30B70()
{
  int v0; // eax
  int v1; // ebp
  int v2; // ecx
  _BYTE *v3; // edi
  _BYTE *v4; // esi
  int v5; // edx
  int v6; // ebx
  _BYTE *v7; // ebp
  _BYTE *v8; // esi
  int v9; // edx
  int v10; // ecx
  _BYTE *v11; // edi
  int v12; // ebx
  int v13; // [esp+0h] [ebp-1Ch]
  int i; // [esp+4h] [ebp-18h]
  uint8* v15; // [esp+8h] [ebp-14h]
  _BYTE *v16; // [esp+8h] [ebp-14h]

  if ( str_AE400_AE3F0->set.mod3D_8603 == 1 && !byte_90708 )
  {
    v13 = (int)widthViewPort_93AD8 >> 2;
    v15 = beginFrame_93ACC;
    v0 = heightViewPort_93ADC / 2;
    v1 = (int)blurBuffer_AE404_AE3F4;
    for ( i = v0; i; --i )
    {
      v2 = v13;
      v3 = (_BYTE *)v15;
      v4 = (_BYTE *)v1;
      v5 = 0;
      v6 = 0;
      do
      {
        LOBYTE(v6) = v4[2];
        LOBYTE(v5) = v3[2];
        LOBYTE(v0) = byte_B36A0_B3690[v5] + byte_B37A0_B3790[v6];
        LOBYTE(v6) = v4[3];
        LOBYTE(v5) = v3[3];
        BYTE1(v0) = byte_B39A0_B3990[v5] + byte_B34A0_B3490[v6];
        v0 <<= 16;
        LOBYTE(v6) = *v4;
        LOBYTE(v5) = *v3;
        LOBYTE(v0) = byte_B36A0_B3690[v5] + byte_B37A0_B3790[v6];
        LOBYTE(v6) = v4[1];
        LOBYTE(v5) = v3[1];
        BYTE1(v0) = byte_B39A0_B3990[v5] + byte_B34A0_B3490[v6];
        *(_DWORD *)v3 = v0;
        v3 += 4;
        v4 += 4;
        --v2;
      }
      while ( v2 );
      v7 = (_BYTE *)(pitchViewPort_93AD4 + v1);
      v16 = (_BYTE *)(pitchViewPort_93AD4 + v15);
      v8 = v7;
      v9 = 0;
      v10 = v13;
      v11 = v16;
      v12 = 0;
      do
      {
        LOBYTE(v12) = v8[2];
        LOBYTE(v9) = v11[2];
        LOBYTE(v0) = byte_B33A0_B3390[v9] + byte_B32A0_B3290[v12];
        LOBYTE(v12) = v8[3];
        LOBYTE(v9) = v11[3];
        BYTE1(v0) = byte_B38A0_B3890[v9] + byte_B35A0_B3590[v12];
        v0 <<= 16;
        LOBYTE(v12) = *v8;
        LOBYTE(v9) = *v11;
        LOBYTE(v0) = byte_B33A0_B3390[v9] + byte_B32A0_B3290[v12];
        LOBYTE(v12) = v8[1];
        LOBYTE(v9) = v11[1];
        BYTE1(v0) = byte_B38A0_B3890[v9] + byte_B35A0_B3590[v12];
        *(_DWORD *)v11 = v0;
        v11 += 4;
        v8 += 4;
        --v10;
      }
      while ( v10 );
      v1 = (int)&v7[pitchViewPort_93AD4];
      v15 = (uint8*)&v16[pitchViewPort_93AD4];
      v0 = i - 1;
    }
  }
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    if ( byte_90708 )
    {
      sub_79A1B(unk_B3AA0_B3A90x);
      return;
    }
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    {
LABEL_20:
      Blit_5CDA0_5D2B0();
      return;
    }
  }
  else
  {
    if ( str_AE400_AE3F0->set.var_u8_8606 && str_AE400_AE3F0->set.mod3D_8603 )
    {
      sub_79B2D();
      return;
    }
    if ( byte_90708 )
    {
      sub_79906(unk_B3AA0_B3A90x);
      return;
    }
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      goto LABEL_20;
  }
  Blit_599B0_59EC0(480);
}
// 90708: using guessed type char byte_90708;
// 93ACC: using guessed type int beginFrame_93ACC;
// 93AD4: using guessed type int pitchViewPort_93AD4;
// 93AD8: using guessed type int widthViewPort_93AD8;
// 93ADC: using guessed type int heightViewPort_93ADC;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE404: using guessed type int blurBuffer_AE404_AE3F4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//SYNCHRONIZED WITH REMC1
int sub_30D30_30D70(__int16 videoMode)
{
  //_WORD *v1; // eax
  //__int16 v3; // si

  if ( sub_61AB0_61FC0() )
    return 0;
  /*v1 = (_WORD*)(16 * dword_12F080_12F070x->y + dword_12F080_12F070x->x);
  if ( *v1 == 0xFFFF )
    return 0;*/
  int i = 0;
while (videoMode != videoModes_12F080[i])
{
    if (videoModes_12F080[i + 1] == 0xffff)
        return 0;
    i++;
}
  return 1;
/*
  while ( a1 != *v1 )
  {
    v3 = v1[1];
    ++v1;
    if ( v3 == -1 )
      return 0;
  }
  return 1;*/
}

int counter_30D90_30DD0;
int counter_30D90_30DD0_2;
int counter_30D90_30DD0_3;
//SYNCHRONIZED WITH REMC1
void DrawWorld_30D90_30DD0(int posX, int posY, __int16 yaw, int posZ, int pitch, int roll, int fow)//201D90_
{
	//unsigned __int16 v8; // ax
	//unsigned __int16 v9; // cx
	//int v10; // edx
	//int v11; // ecx
	//int v12; // ebx
	//int v13; // edx
	//int v14; // ecx
	//int v15; // ebx
	//int v16; // edx
	//int v17; // ecx
	//int v18; // ebx
	//int v19; // edx
	//int v20; // edi
	//int v21; // edx
	//int v22; // esi
	//int v23; // ebx
	//int v24; // eax
	//uint8* v25; // esi
	//int v26; // ecx
	//uint8* v27; // esi
	//int v28; // eax
	//uint8* v29; // ebx
	//char v30; // dl
	//int v31; // eax
	//int v32; // esi
	//uint8* v33; // ebx
	//uint8* v34; // ecx
	int i; // eax
	//uint8* v36; // edi
	//int v37; // edx
	//int v38; // esi
	//uint8* v39; // ebx
	//uint8* v40; // ecx
	//_BOOL1 j; // zf
	//int v42; // eax
	//_BYTE* k; // ebx
	//char v44; // dl
	//int tempCos; // edx
	//int modX; // esi
	//int modY; // ebx
	//int v48; // eax
	__int64 actSpeed; // rax
	//int v50; // eax
	//_BYTE *v51; // edi
	//_BYTE *v52; // esi
	//int v55; // ecx
	//_BYTE *v56; // edi
	//_BYTE *v57; // esi
	//int v58; // edx
	//int v59; // ebx
	//int v60; // ecx
	//_BYTE *v61; // edi
	//int v62; // esi
	//int v63; // ecx
	uaxis_2d point13; // eax
	uaxis_2d point24; // ebx
	uaxis_2d point1234; // edx
	int frameViewp; // [esp+0h] [ebp-24h]
	int indexY; // [esp+4h] [ebp-20h]
	int halfViewpX; // [esp+8h] [ebp-1Ch]
	//uint8* v71; // [esp+Ch] [ebp-18h]
	char temp8604; // [esp+10h] [ebp-14h]
	//uint8* v73; // [esp+14h] [ebp-10h]
	//uint8* v74; // [esp+18h] [ebp-Ch]
	//int v75; // [esp+1Ch] [ebp-8h]
	//unsigned __int8 v76; // [esp+20h] [ebp-4h]
	int tempFixPosX; // [esp+3Ch] [ebp+18h]
	int tempFixPosY; // [esp+40h] [ebp+1Ch]

	uaxis_2d tempX;
	uaxis_2d tempY;
	tempX.word = posX;
	tempY.word = posY;
	uaxis_2d pos;
	pos._axis_2d.x = tempX._axis_2d.y;
	pos._axis_2d.y = tempY._axis_2d.y;

	if (tempX._axis_2d.x < 0x80u)
		pos._axis_2d.x = tempX._axis_2d.y - 1;
	if (tempY._axis_2d.x < 0x80u)
		pos._axis_2d.y = tempY._axis_2d.y - 1;
	uint8 point1 = mapHeightmap_DC1E0_DC1D0[pos.word];
	pos._axis_2d.x += 2;
	uint8 point2 = mapHeightmap_DC1E0_DC1D0[pos.word];
	pos._axis_2d.y += 2;
	int diff1 = point1 - point2;
	int diff2 = point2 + point1;
	uint8 point3 = mapHeightmap_DC1E0_DC1D0[pos.word];
	pos._axis_2d.x -= 2;
	int diff3 = diff1 - point3;
	int diff4 = diff2 - point3;
	uint8 point4 = mapHeightmap_DC1E0_DC1D0[pos.word];
	int diff5 = 2 * (point4 + diff3);
	int diff6 = 2 * (diff4 - point4);
	if (diff5 <= 100)
	{
		if (diff5 < -100)
			diff5 = -100;
	}
	else
	{
		diff5 = 100;
	}
	if (diff6 <= 100)
	{
		if (diff6 < -100)
			diff6 = -100;
	}
	else
	{
		diff6 = 100;
	}
	fixPosX_90710 += (diff5 - fixPosX_90710) >> 3;
	fixPosY_90714 += (diff6 - fixPosY_90714) >> 3;
	tempFixPosX = fixPosX_90710 + posX;
	tempFixPosY = fixPosY_90714 + posY;
	int tempYaw = yaw & 0x7FF;
	if (str_AE400_AE3F0->set.var_u8_8606 && str_AE400_AE3F0->set.mod3D_8603 && scrWidth_12EFF0_12EFE0 == 640)
	{
		SetViewPort2_79495_799A5(begWscreen_2ECFF4_2ECFE4, 0, 2 * scrWidth_12EFF0_12EFE0, scrWidth_12EFF0_12EFE0 / 2 - 8, scrHeight_12EFF8_12EFE8 / 2 - 40);
		dword_9070C = 20;
		dword_902B0 = -5;
		int tempSin = (5 * cos_9134C[tempYaw]) >> 14;
		int tempCos = (5 * sin_90B4C[tempYaw]) >> 14;
		DrawSkyTerrainParticles_2A700_2A740(tempFixPosX - tempSin, tempFixPosY - tempCos, tempYaw, posZ, pitch, roll, fow);
		SetViewPort2_79495_799A5(begWscreen_2ECFF4_2ECFE4 + scrWidth_12EFF0_12EFE0 / 2, 0, 0, 0, 0);
		dword_902B0 = 5;
		DrawSkyTerrainParticles_2A700_2A740(tempFixPosX + tempSin, tempFixPosY + tempCos, tempYaw, posZ, pitch, roll, fow);
		dword_902B0 = 0;
		SetViewPort2_79495_799A5(begWscreen_2ECFF4_2ECFE4, 0, scrWidth_12EFF0_12EFE0, scrWidth_12EFF0_12EFE0, scrHeight_12EFF8_12EFE8);
	}
	else if (str_AE400_AE3F0->set.mod3D_8603 != 2 || str_AE400_AE3F0->set.var_u8_8606)
	{
		if (str_AE400_AE3F0->set.mod3D_8603 != 1 || str_AE400_AE3F0->set.var_u8_8606)
		{
			temp8604 = str_AE400_AE3F0->set.blur_8604;
			if (typeResolution_12F02E_12F01E == 1)
			{
				if (!str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_14421_1098)
				{
					if (str_AE408_AE3F8->var_u8_8)
					{
						if (blurBuffer_AE404_AE3F4)
						{
							if (str_AE400_AE3F0->set.var_u8_8600 == 40)
							{
								actSpeed = str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333].actSpeed_29921_126;
								if ((int)((HIDWORD(actSpeed) ^ actSpeed) - HIDWORD(actSpeed)) > 80)//fix it
									str_AE400_AE3F0->set.blur_8604 = 1;
							}
						}
					}
				}
			}
			if (str_AE400_AE3F0->set.blur_8604 && blurBuffer_AE404_AE3F4)
			{
				//v73 = beginFrame_93ACC;
				uint8* tempBeginFrame = beginFrame_93ACC;
				SetViewPort2_79495_799A5(blurBuffer_AE404_AE3F4, 0, 0, 0, 0);
				DrawSkyTerrainParticles_2A700_2A740(tempFixPosX, tempFixPosY, tempYaw, posZ, pitch, roll, fow);
				SetViewPort2_79495_799A5(tempBeginFrame, 0, 0, 0, 0);
				halfViewpX = widthViewPort_93AD8 >> 2;
				frameViewp = pitchViewPort_93AD4 - widthViewPort_93AD8;
				//indexY = heightViewPort_93ADC;
				//fix
				//int tempFix = dword_AE400_AE3F0();
				//fix
				//HIWORD(v50) = HIWORD(tempFix);
				if (str_AE400_AE3F0->set.blur_8604 == 1)
				{
					uint8* tempFrame = tempBeginFrame;
					uint8* tempBlurBuffer = blurBuffer_AE404_AE3F4;
					//HIWORD(v53) = 0;
					//HIWORD(v54) = 0;
					for (indexY = heightViewPort_93ADC; indexY; indexY--)
					{

						for (int indexX = halfViewpX; indexX; indexX--)
						{
							uaxis_2d point0;
							uaxis_2d point1;
							uaxis_2d point2;
							uaxis_2d point3;
							point0._axis_2d.x = tempBlurBuffer[0];
							point0._axis_2d.y = tempFrame[0];
							point1._axis_2d.x = tempBlurBuffer[1];
							point1._axis_2d.y = tempFrame[1];
							point2._axis_2d.x = tempBlurBuffer[2];
							point2._axis_2d.y = tempFrame[2];
							point3._axis_2d.x = tempBlurBuffer[3];
							point3._axis_2d.y = tempFrame[3];
							tempFrame[0] = strPal.byte_BB934_BB924[point0.word];
							tempFrame[1] = strPal.byte_BB934_BB924[point1.word];
							tempFrame[2] = strPal.byte_BB934_BB924[point2.word];
							tempFrame[3] = strPal.byte_BB934_BB924[point3.word];

							//v50 <<= 16;


							//*(_DWORD *)tempFrame = v50;
							tempFrame += 4;
							tempBlurBuffer += 4;
							//v55--;
						}
						//while ( v55 );
						//HIWORD(v50) = HIWORD(frameViewp);
						tempBlurBuffer += frameViewp;
						tempFrame += frameViewp;
						//indexY--;
					}
					//while ( indexY );
				}
				else
				{
					uint8* tempFrame = tempBeginFrame;
					uint8* tempBlurBuffer = blurBuffer_AE404_AE3F4;
					//HIWORD(v58) = 0;
					//HIWORD(v59) = 0;
					for (indexY = heightViewPort_93ADC; indexY; indexY--)
					{
						//v60 = halfViewpX;
						for (int indexX = halfViewpX; indexX; indexX--)
							//do
						{
							uaxis_2d point0;
							uaxis_2d point1;
							uaxis_2d point2;
							uaxis_2d point3;
							point0._axis_2d.x = tempFrame[0];
							point0._axis_2d.y = tempBlurBuffer[0];
							point1._axis_2d.x = tempFrame[1];
							point1._axis_2d.y = tempBlurBuffer[1];
							point2._axis_2d.x = tempFrame[2];
							point2._axis_2d.y = tempBlurBuffer[2];
							point3._axis_2d.x = tempFrame[3];
							point3._axis_2d.y = tempBlurBuffer[3];
							tempFrame[0] = strPal.byte_BB934_BB924[point0.word];
							tempFrame[1] = strPal.byte_BB934_BB924[point1.word];
							tempFrame[2] = strPal.byte_BB934_BB924[point2.word];
							tempFrame[3] = strPal.byte_BB934_BB924[point3.word];
							/*
						  BYTE1(v59) = tempBlurBuffer[2];
						  LOBYTE(v59) = tempFrame[2];
						  BYTE1(v58) = tempBlurBuffer[3];
						  LOBYTE(v50) = strPal.byte_BB934_BB924[v59];
						  LOBYTE(v58) = tempFrame[3];
						  BYTE1(v50) = strPal.byte_BB934_BB924[v58];
						  v50 <<= 16;
						  BYTE1(v59) = tempBlurBuffer[0];
						  LOBYTE(v59) = tempFrame[0];
						  BYTE1(v58) = tempBlurBuffer[1];
						  LOBYTE(v50) = strPal.byte_BB934_BB924[v59];
						  LOBYTE(v58) = tempFrame[1];
						  BYTE1(v50) = strPal.byte_BB934_BB924[v58];
						  *(_DWORD *)tempFrame = v50;
						  */
							tempFrame += 4;
							tempBlurBuffer += 4;
							//v60--;
						}
						//while ( v60 );
						//HIWORD(v50) = HIWORD(frameViewp);
						tempBlurBuffer += frameViewp;
						tempFrame += frameViewp;
						//indexY--;
					}
					//while ( indexY );
				}
			}
			else
			{
				//adress 202509_
				//debug
#ifdef debug1
		  //add_compare(0x202509, true);
#endif debug1
//debug
				DrawSkyTerrainParticles_2A700_2A740(tempFixPosX, tempFixPosY, tempYaw, posZ, pitch, roll, fow);//draw screen without minimap
				//adress 202527_
				//debug
#ifdef debug1
		//add_compare(0x202527, true, true);
#endif debug1
//debug
				if (str_AE400_AE3F0->set.softenOn_8605)
				{
					if (heightViewPort_93ADC != 1)
					{
						int posY = 0;
						for (int indexY = heightViewPort_93ADC - 1; indexY; indexY--)
						{
							int posX = posY;
							for (int indexX = widthViewPort_93AD8 - 1; indexX; indexX--)
							{
								point13._axis_2d.x = beginFrame_93ACC[posX];
								point13._axis_2d.y = beginFrame_93ACC[posX + pitchViewPort_93AD4];
								point24._axis_2d.x = beginFrame_93ACC[posX + 1];
								point24._axis_2d.y = beginFrame_93ACC[posX + pitchViewPort_93AD4 + 1];
								point1234._axis_2d.x = strPal.byte_BB934_BB924[point13.word];
								point1234._axis_2d.y = strPal.byte_BB934_BB924[point24.word];
								beginFrame_93ACC[posX] = strPal.byte_BB934_BB924[point1234.word];
								posX++;
							}
							posY += pitchViewPort_93AD4;
						}
					}
				}
			}
			str_AE400_AE3F0->set.blur_8604 = temp8604;
		}
		else
		{
			//tempCos = cos_90B4C[tempYaw];
			dword_9070C = 20;
			dword_902B0 = pitchViewPort_93AD4 / 0x28u;
			int tempSin = (5 * cos_9134C[tempYaw]) >> 14;
			int tempCos = (5 * sin_90B4C[tempYaw]) >> 14;
			//LOWORD(v46) = v46 >> 14;
			DrawSkyTerrainParticles_2A700_2A740(tempSin + tempFixPosX, tempCos + tempFixPosY, tempYaw, posZ, pitch, roll, fow);
			//v71 = beginFrame_93ACC;
			SetViewPort2_79495_799A5(blurBuffer_AE404_AE3F4, 0, 0, 0, 0);
			dword_902B0 = 0 - (pitchViewPort_93AD4 / 0x28u);
			DrawSkyTerrainParticles_2A700_2A740(tempFixPosX - tempSin, tempFixPosY - tempCos, tempYaw, posZ, pitch, roll, fow);
			SetViewPort2_79495_799A5(beginFrame_93ACC, 0, 0, 0, 0);
			dword_902B0 = 0;
		}
	}
	else
	{
		//adress 0x202022
        uint8* tempBeginFrame = beginFrame_93ACC;
		SetViewPort2_79495_799A5(blurBuffer_AE404_AE3F4, 0, 0, 0, 0);
		DrawSkyTerrainParticles_2A700_2A740(tempFixPosX, tempFixPosY, tempYaw, posZ, pitch, roll, fow);
		SetViewPort2_79495_799A5(tempBeginFrame, 0, 0, 0, 0);
        //adress 0x20206F
        //debug
        uint8_t origbyte20 = 0;
        uint8_t remakebyte20 = 0;
        int comp20;
        char buffer1[500];
        //sprintf(buffer1, "%08X-0026C404", 0x20206F);
        //int comp20 = compare_with_sequence(buffer1, blurBuffer_AE404_AE3F4, 0x26C404, counter_30D90_30DD0 - 0, 320*200, 320 * 200, &origbyte20, &remakebyte20, 0, true);
        
        counter_30D90_30DD0++;
        //debug
		int maxEyeDistanceInPixels = 64;//can be fixed for bigger resolutions
		int index27 = widthViewPort_93AD8 / 2 - maxEyeDistanceInPixels;
		if (heightViewPort_93ADC)
		{
			for (int index26 = heightViewPort_93ADC; index26; index26--)//add noise
			{
				pseudoRand_12C1E0_12C1D0 = 9377 * pseudoRand_12C1E0_12C1D0 + 9439;
				int index29 = 256 * (index26 & 0x1F) + pseudoRand_12C1E0_12C1D0 % 7u;
				for (int index28 = maxEyeDistanceInPixels; index28; index28--)
					beginFrame_93ACC[index27++] = dword_9334C[148].p[index29++];
				index27 += pitchViewPort_93AD4 - maxEyeDistanceInPixels;
			}

            //adress 0x202109
            //debug
            /*
            origbyte20 = 0;
            remakebyte20 = 0;
            sprintf(buffer1, "%08X-00251ACC", 0x202109);
            comp20 = compare_with_sequence(buffer1, beginFrame_93ACC, 0x251ACC, counter_30D90_30DD0_2 - 0, 320 * 200, 320 * 200, &origbyte20, &remakebyte20, 0, true);
            */
            //debug

			int index33 = widthViewPort_93AD8 / 2;
			for (int index32 = heightViewPort_93ADC; index32; index32--)//extend to right
			{
				for (i = widthViewPort_93AD8 / 2; i; i--)
				{
					beginFrame_93ACC[index33] = beginFrame_93ACC[index33 - blurBuffer_AE404_AE3F4[index33]];
					index33++;
				}
				index33 += pitchViewPort_93AD4 - widthViewPort_93AD8 / 2;
			}

            //adress 0x202181
            //debug
            /*origbyte20 = 0;
            remakebyte20 = 0;
            sprintf(buffer1, "%08X-00251ACC", 0x202181);
            comp20 = compare_with_sequence(buffer1, beginFrame_93ACC, 0x251ACC, counter_30D90_30DD0_2 - 0, 320 * 200, 320 * 200, &origbyte20, &remakebyte20, 0, true);
            */
            counter_30D90_30DD0_2++;
            //debug

            int index40 = widthViewPort_93AD8 / 2;
            int index41 = widthViewPort_93AD8 / 2;
            for (int index39 = heightViewPort_93ADC; index39; index39--)
            {
                uint8 oldDiff = blurBuffer_AE404_AE3F4[index41];
                index40 -= oldDiff;
                for (int index43 = widthViewPort_93AD8 / 2 - blurBuffer_AE404_AE3F4[index41]; index43; index43--)
                {
                    //adress 0x2021CE
                    //debug
                    //origbyte20 = 0;
                    //remakebyte20 = 0;
                    //sprintf(buffer1, "%08X-00251ACC", 0x2021CE);
                    //comp20 = compare_with_sequence(buffer1, beginFrame_93ACC, 0x251ACC, counter_30D90_30DD0_3 - 0, 320 * 200, 320 * 200, &origbyte20, &remakebyte20, 0, true);
                    //origbyte20 = 0;
                    //remakebyte20 = 0;
                    //sprintf(buffer1, "%08X-002ECFF4", 0x2021CE);
                    //comp20 = compare_with_sequence(buffer1, begWscreen_2ECFF4_2ECFE4, 0x251ACC, counter_30D90_30DD0_3 - 0, 320 * 200, 320 * 200, &origbyte20, &remakebyte20, 0, true);
                    if (counter_30D90_30DD0_3==0x00004de4)
                    {
                        counter_30D90_30DD0_3++;
                        counter_30D90_30DD0_3--;
                    }
                    counter_30D90_30DD0_3++;
                    //debug
                    index40--;
                    index41--;
                    beginFrame_93ACC[index40] = beginFrame_93ACC[index40 + blurBuffer_AE404_AE3F4[index41]];

                }
                index40 += pitchViewPort_93AD4 + widthViewPort_93AD8 / 2;
                index41 += pitchViewPort_93AD4 + widthViewPort_93AD8 / 2 - oldDiff;
            }
		}
	}
}

void sub_315C0_31600()//2025C0_
{
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_61B90_620A0(begPalDat_AE428_AE418_26C428_26C418);
  else
    sub_61C30_62140(begPalDat_AE428_AE418_26C428_26C418);
  byte_90708 = 0;
}

//SYNCHRONIZED WITH REMC1
void sub_31600_31640()//202600_
{
	__int16 videoMode;
	_WORD* tempColor1;
	_WORD* tempColor2;
	TColor* tempPal;
	char* tempColorB1;
	char* tempColorB2;
	char tempR;
	char tempG;
	char tempB;
	TColor* tempPal3;
	TColor tempPal2[256];

	if (str_AE400_AE3F0->set.mod3D_8603 && pitchViewPort_93AD4 == 640)
		ClearScr_5B500_5BA10();
	if (blurBuffer_AE404_AE3F4 && !str_AE400_AE3F0->set.var_u8_8606)
	{
		if (scrWidth_12EFF0_12EFE0 == 320)
            videoMode = 0x10e;//320x200 65536?
		else
            videoMode = 0x111;//640x480 65536?
		if (sub_30D30_30D70(videoMode))
		{
			tempColor1 = unk_B3AA0_B3A90x[0];
			tempColor2 = unk_B3AA0_B3A90x[1];
			sub_619B8_61EC8(videoMode);
			byte_90708 = 1;
			tempPal = begPalDat_AE428_AE418_26C428_26C418;
			scrWidth_12EFF0_12EFE0 = pitchViewPort_93AD4;
			for (int i = 256; i; i--)
			{
				tempColor1[0] = (tempPal->red & 0x3E) << 10;
				tempColor2[0] = 32 * (((3 * tempPal->green) >> 2) & 0x3F) + ((((3 * tempPal->blue) >> 2) & 0x3E) >> 1);
				tempPal++;
				tempColor2++;
				tempColor1++;
			}
		}
		else
		{
			tempColorB1 = byte_B37A0_B3790;
			tempColorB2 = byte_B36A0_B3690;
			tempPal = begPalDat_AE428_AE418_26C428_26C418;
			for (int i = 256; i; i--)
			{
				tempR = tempPal->red + 3;
				if (tempR > 63)
					tempR = 63;
				tempColorB1[0] = 4 * (tempR & 0x38);
				tempG = tempPal->green - 3;
				if (tempG < 0)
					tempG = 0;
				tempColorB2[0] = (tempG & 0x38) >> 1;
				tempB = tempPal->blue + 3;
				if (tempB > 63)
					tempB = 63;
				tempColorB2[0] += (tempB & 0x30) >> 4;
				tempPal++;
				tempColorB2++;
				tempColorB1++;
			}
			tempColorB1 = byte_B35A0_B3590;
			tempColorB2 = byte_B38A0_B3890;
			tempPal = begPalDat_AE428_AE418_26C428_26C418;
			for (int i = 256; i; i--)
			{
				tempR = tempPal->red + 1;
				if (tempR > 63)
					tempR = 63;
				tempColorB1[0] = 4 * (tempR & 0x38);
				tempG = tempPal->green - 1;
				if (tempG < 0)
					tempG = 0;
				tempColorB2[0] = (tempG & 0x38) >> 1;
				tempB = tempPal->blue + 1;
				if (tempB > 63)
					tempB = 63;
				tempPal++;
				tempColorB2[0] += (tempB & 0x30) >> 4;
				tempColorB2++;
				tempColorB1++;
			}
			tempColorB1 = byte_B34A0_B3490;
			tempColorB2 = byte_B39A0_B3990;
			tempPal = begPalDat_AE428_AE418_26C428_26C418;
			for (int i = 256; i; i--)
			{
				tempR = tempPal->red - 1;
				if (tempR < 0)
					tempR = 0;
				tempColorB1[0] = 4 * (tempR & 0x38);
				tempG = tempPal->green + 1;
				if (tempG > 63)
					tempG = 63;
				tempColorB2[0] = (tempG & 0x38) >> 1;
				tempB = tempPal->blue - 1;
				if (tempB < 0)
					tempB = 0;
				tempColorB2[0] += (tempB & 0x30) >> 4;
				tempPal++;
				tempColorB2++;
				tempColorB1++;
			}
			tempColorB1 = byte_B32A0_B3290;
			tempColorB2 = byte_B33A0_B3390;
			tempPal = begPalDat_AE428_AE418_26C428_26C418;
			for (int i = 256; i; i--)
			{
				tempR = tempPal->red - 3;
				if (tempR < 0)
					tempR = 0;
				tempColorB1[0] = 4 * (tempR & 0x38);
				tempG = tempPal->green + 3;
				if (tempG > 63)
					tempG = 63;
				tempColorB2[0] = (tempG & 0x38) >> 1;
				tempB = tempPal->blue - 3;
				if (tempB < 0)
					tempB = 0;
				tempColorB2[0] += (tempB & 0x30) >> 4;
				tempPal++;
				tempColorB2++;
				tempColorB1++;
			}
			tempPal3 = tempPal2;
			tempR = 0;
			for (int i = 0; i < 8; i++)
			{
				tempG = 0;
				for (int j = 0; j < 8; j++)
				{
					tempB = 0;
					for (int k = 0; k < 4; k++)
					{
						tempPal3->red = tempR;
						tempPal3->green = tempG;
						tempPal3->blue = tempB;
						tempPal3++;
						tempB += 14;
					}
					tempG += 7;
				}
				tempR += 9;
			}
			SetPalette_319A0_319E0(tempPal2);
		}
	}
}

//----- (000319A0) --------------------------------------------------------
void SetPalette_319A0_319E0(TColor* palette)//2029A0_
{
    FixPerifery((char*)"port0x3C8");
    VGA_Set_Palette((uint8_t*)palette);
    if (byte_9AD08)
        sub_5B310_5B820(2, 0);
    /*
  unsigned __int8 *v1; // ebx
  int v2; // ecx
  unsigned __int8 v3; // al
  unsigned __int8 *v4; // ebx
  unsigned __int8 v5; // al
  unsigned __int8 result; // al

  v1 = a1;
  __outbyte(0x3C6u, 0xFFu);
  v2 = 0;
  do
  {
    __outbyte(0x3C8u, v2);
    v3 = *v1;
    v4 = v1 + 1;
    __outbyte(0x3C9u, v3);
    v5 = *v4++;
    __outbyte(0x3C9u, v5);
    ++v2;
    result = *v4;
    v1 = v4 + 1;
    __outbyte(0x3C9u, result);
  }
  while ( (unsigned __int16)v2 < 0x100u );
  if ( byte_9AD08 )
    return sub_5B310_5B820(2, a1);
    if (byte_9AD08)
        sub_5B310_5B820(2, 0);
    */
}
// 9AD08: using guessed type char byte_9AD08;

//----- (00031A00) --------------------------------------------------------
void sub_31A00_31A40()
{
  unsigned __int8 result; // al
  //unsigned __int8 *v1; // [esp-4h] [ebp-8h]

  result = dword_AE400_AE3F0();
  if ( str_AE400_AE3F0->set.mod3D_8603 )
  {
    if ( str_AE400_AE3F0->set.var_u8_8606 )
    {
      if ( pitchViewPort_93AD4 == 640 )
        ClearScr_5B560();
    }
    byte_90754 = str_AE400_AE3F0->set.mod3D_8603;
    sub_315C0_31600();
    //v1 = (unsigned __int8 *)begPalDat_AE428_AE418_26C428_26C418;
    str_AE400_AE3F0->set.mod3D_8603 = 0;
    SetPalette_319A0_319E0(begPalDat_AE428_AE418_26C428_26C418);
  }
}
// 90754: using guessed type char byte_90754;
// 93AD4: using guessed type int pitchViewPort_93AD4;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE428: using guessed type int begPalDat_AE428_AE418_26C428_26C418;

//----- (00031A60) --------------------------------------------------------
void sub_31A60_31AA0()//202A60_
{
  str_AE400_AE3F0->set.mod3D_8603 = byte_90754;
  if (byte_90754 == 1 )
    sub_31600_31640();
  byte_90754 = 0;
}
// 90754: using guessed type char byte_90754;
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00031AA0) --------------------------------------------------------
void sub_31AA0(int a1)//202AA0_
{
  pseudoRand_12C1E0_12C1D0 = *(_WORD *)(a1 + 4);
  str_AE400_AE3F0->rand_4 = *(_DWORD *)(a1 + 4);
  if ( sub_3EEA0_3F1E0((char*)"c:/carpet.cd/save/scanned.rmd", (uint8_t*)mapHeightmap_DC1E0_DC1D0) != 0x10000 )
  {
      //202AF1
        //debug
#ifdef debug1
      //add_compare(0x202AF1, true);
#endif debug1
  //debug
    sub_725C8(pseudoRand_12C1E0_12C1D0, *(_WORD *)(a1 + 8), *(_WORD *)(a1 + 12));
    //202AF7 
      //debug
#ifdef debug1
    //add_compare(0x202AF7, true);
#endif debug1
  //debug
    sub_32A50();//!!
    //202AFF
//debug
#ifdef debug1
    //add_compare(0x202AFF, true);
#endif debug1
  //debug
  }
  memset(mapEntityIndex_10C1E0_10C1D0, 0, 0x20000);
  sub_32AE0(*(_DWORD *)(a1 + 20), *(_WORD *)(a1 + 24));
  sub_33500();
  //debug
#ifdef debug1
  //add_compare(0x202B31, true);
#endif debug1
  //debug
  sub_320A0(*(_WORD *)(a1 + 32));
  //debug
#ifdef debug1
  //add_compare(0x202B47, true);
#endif debug1
  //debug
  sub_32D00(*(_WORD *)(a1 + 36), *(_WORD *)(a1 + 40));
  //debug
#ifdef debug1
  //add_compare(0x202B4D, true);
#endif debug1
  //debug
  sub_32300();
  //debug
#ifdef debug1
  //add_compare(0x202B62, true);
#endif debug1
  //debug
  sub_32EB0(*(_WORD *)(a1 + 36), *(_WORD *)(a1 + 40));
  //debug
#ifdef debug1
  //add_compare(0x202B71, true);
#endif debug1
  //debug
  sub_33180(*(_WORD *)(a1 + 44));
  //debug
#ifdef debug1
  //add_compare(0x202B77, true);
#endif debug1
  //debug
  sub_31FA0();
  memset(mapTerrainType_CC1E0_CC1D0, 0, 0x10000);
  //debug
#ifdef debug1
  //add_compare(0x202B90, true);
#endif debug1
  //debug
  sub_31BB0();
  //debug
#ifdef debug1
  //add_compare(0x202B98, true);
#endif debug1
  //debug
  sub_31EC0();
  //debug
#ifdef debug1
  //add_compare(0x202B9D, true);
#endif debug1
  //debug
  sub_32560();//!!
  //debug
#ifdef debug1
  //add_compare(0x202BA2, true);
#endif debug1
  //debug
  sub_31D40();
  //debug
#ifdef debug1
  //add_compare(0x202BA7, true);
#endif debug1
  //debug
  sub_329C0();
}
// 10000: using guessed type void sub_10000();
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE400: using guessed type int dword_AE400_AE3F0();
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];
// 12C1E0: using guessed type __int16 pseudoRand_12C1E0_12C1D0;

//----- (00031BB0) --------------------------------------------------------
unsigned __int16 sub_31BB0()
{
  unsigned __int16 result; // ax
  int v1; // edx
  unsigned __int8 v2; // dl
  unsigned __int8 v3; // dh
  unsigned __int8 v4; // ch
  unsigned __int8 v5; // cl
  int v6; // ebx
  unsigned __int8 v7; // cl
  int v8; // ebx
  unsigned __int8 v9; // cl
  int v10; // ebx
  unsigned __int8 v11; // cl
  int v12; // ebx
  unsigned __int8 v13; // cl
  int v14; // ebx
  unsigned __int8 v15; // cl
  int v16; // ebx
  unsigned __int8 v17; // cl
  int v18; // ebx
  unsigned __int8 v19; // cl
  unsigned int v20; // ebx
  unsigned int v21; // ebx
  unsigned __int8 v22; // dl

  result = 0;
  do
  {
    while ( 1 )
    {
      v1 = result;
      if ( (mapAngle_FC1E0_FC1D0[result] & 7) == 0 )
        goto LABEL_44;
      --HIBYTE(result);
      v2 = mapHeightmap_DC1E0_DC1D0[v1];
      v3 = v2;
      v4 = v2;
      v5 = mapHeightmap_DC1E0_DC1D0[result];
      v6 = v5;
      if ( v5 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v5 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result + 1;
      v7 = mapHeightmap_DC1E0_DC1D0[result];
      v8 = v7 + v6;
      if ( v7 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v7 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      ++HIBYTE(result);
      v9 = mapHeightmap_DC1E0_DC1D0[result];
      v10 = v9 + v8;
      if ( v9 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v9 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      ++HIBYTE(result);
      v11 = mapHeightmap_DC1E0_DC1D0[result];
      v12 = v11 + v10;
      if ( v11 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v11 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result - 1;
      v13 = mapHeightmap_DC1E0_DC1D0[result];
      v14 = v13 + v12;
      if ( v13 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v13 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result - 1;
      v15 = mapHeightmap_DC1E0_DC1D0[result];
      v16 = v15 + v14;
      if ( v15 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v15 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      --HIBYTE(result);
      v17 = mapHeightmap_DC1E0_DC1D0[result];
      v18 = v17 + v16;
      if ( v17 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v17 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      --HIBYTE(result);
      v19 = mapHeightmap_DC1E0_DC1D0[result];
      v20 = v19 + v18;
      if ( v19 > v2 )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v19 < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result + 1;
      v21 = v20 >> 3;
      ++HIBYTE(result);
      if ( (unsigned __int8)(v4 - v3) > 4u )
        break;
      v22 = v2 - v4;
      if ( v22 <= 4u )
        goto LABEL_44;
      if ( v22 <= 0xAu )
      {
        mapHeightmap_DC1E0_DC1D0[result] = (v21 + v4) >> 1;
        goto LABEL_44;
      }
      mapHeightmap_DC1E0_DC1D0[result++] = v21;
      if ( !result )
        return result;
    }
    if ( (unsigned __int8)(v4 - v3) <= 0xAu )
      LOBYTE(v21) = (v21 + v4) >> 1;
    mapHeightmap_DC1E0_DC1D0[result] = v21;
LABEL_44:
    ++result;
  }
  while ( result );
  return result;
}

//----- (00031D40) --------------------------------------------------------
unsigned __int16 sub_31D40()
{
  unsigned __int16 result; // ax
  _BOOL1 v1; // dl
  unsigned __int16 v2; // bx
  char v3; // dl
  unsigned __int16 v4; // bx
  char v5; // dl
  unsigned __int16 v6; // bx
  char v7; // dl
  unsigned __int16 v8; // bx
  char v9; // dl
  unsigned __int16 v10; // bx
  char v11; // dl
  unsigned __int16 v12; // bx
  char v13; // dl
  unsigned __int16 v14; // dx
  unsigned __int16 v15; // bx
  unsigned __int16 v16; // bx

  result = 0;
  do
  {
    mapAngle_FC1E0_FC1D0[result] &= ~8u;
    if ( !mapHeightmap_DC1E0_DC1D0[result] )
    {
      --HIBYTE(result);
      v1 = mapHeightmap_DC1E0_DC1D0[result] != 0;
      LOBYTE(result) = result + 1;
      v2 = result;
      ++HIBYTE(result);
      v3 = (mapHeightmap_DC1E0_DC1D0[v2] != 0) + v1;
      v4 = result;
      ++HIBYTE(result);
      v5 = (mapHeightmap_DC1E0_DC1D0[v4] != 0) + v3;
      v6 = result;
      LOBYTE(result) = result - 1;
      v7 = (mapHeightmap_DC1E0_DC1D0[v6] != 0) + v5;
      v8 = result;
      LOBYTE(result) = result - 1;
      v9 = (mapHeightmap_DC1E0_DC1D0[v8] != 0) + v7;
      v10 = result;
      --HIBYTE(result);
      v11 = (mapHeightmap_DC1E0_DC1D0[v10] != 0) + v9;
      v12 = result;
      --HIBYTE(result);
      v13 = (mapHeightmap_DC1E0_DC1D0[v12] != 0) + v11;
      LOBYTE(v12) = mapHeightmap_DC1E0_DC1D0[result] != 0;
      LOBYTE(result) = result + 1;
      ++HIBYTE(result);
      if ( !((_BYTE)v12 + v13) )
      {
        v14 = result;
        LOBYTE(result) = result - 1;
        v15 = result;
        --HIBYTE(result);
        LOBYTE(v14) = (mapTerrainType_CC1E0_CC1D0[v15] != 0) + (mapTerrainType_CC1E0_CC1D0[v14] != 0);
        v16 = result;
        LOBYTE(result) = result + 1;
        LOBYTE(v14) = (mapTerrainType_CC1E0_CC1D0[result] != 0) + (mapTerrainType_CC1E0_CC1D0[v16] != 0) + v14;
        ++HIBYTE(result);
        if ( !(_BYTE)v14 )
          mapAngle_FC1E0_FC1D0[result] |= 8u;
      }
    }
    ++result;
  }
  while ( result );
  return result;
}

//----- (00031EC0) --------------------------------------------------------
unsigned __int16 sub_31EC0()
{
  unsigned __int16 result; // ax
  unsigned __int16 v1; // cx
  char v2; // dh
  unsigned __int8 v3; // dl
  int v4; // ecx
  char v5; // bl
  char v6; // bh
  unsigned __int8 v7; // cl
  char v8; // bh
  char v9; // bh
  unsigned __int16 v10; // cx
  unsigned __int16 v11; // cx
  unsigned __int16 v12; // cx
  unsigned __int16 v13; // cx

  result = 0;
  do
  {
    v1 = result;
    v2 = 0;
    LOBYTE(result) = result + 1;
    v3 = mapHeightmap_DC1E0_DC1D0[v1];
    v4 = v1;
    LOWORD(v4) = result;
    v5 = 0;
    v6 = mapAngle_FC1E0_FC1D0[result];
    if ( v6 )
    {
      if ( v6 == 4 )
        v2 = 1;
    }
    else
    {
      v7 = mapHeightmap_DC1E0_DC1D0[v4];
      v5 = 1;
      if ( v7 < v3 )
        v3 = v7;
    }
    ++HIBYTE(result);
    v8 = mapAngle_FC1E0_FC1D0[result];
    if ( v8 )
    {
      if ( v8 == 4 )
        ++v2;
    }
    else
    {
      ++v5;
      if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
    }
    LOBYTE(result) = result - 1;
    v9 = mapAngle_FC1E0_FC1D0[result];
    if ( v9 )
    {
      if ( v9 == 4 )
        ++v2;
    }
    else
    {
      ++v5;
      if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] < v3 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
    }
    --HIBYTE(result);
    if ( v2 && v5 && !v3 )
    {
      v10 = result;
      LOBYTE(result) = result + 1;
      mapHeightmap_DC1E0_DC1D0[v10] = 0;
      v11 = result;
      ++HIBYTE(result);
      mapHeightmap_DC1E0_DC1D0[v11] = 0;
      v12 = result;
      LOBYTE(result) = result - 1;
      mapHeightmap_DC1E0_DC1D0[v12] = 0;
      v13 = result;
      --HIBYTE(result);
      mapHeightmap_DC1E0_DC1D0[v13] = 0;
    }
    ++result;
  }
  while ( result );
  return result;
}

//----- (00031FA0) --------------------------------------------------------
unsigned __int16 sub_31FA0()
{
  unsigned __int16 result; // ax
  unsigned __int16 v1; // dx
  unsigned __int16 v2; // bx
  char v3; // cl
  char v4; // dh
  //unsigned __int16 v5; // bx
  //unsigned __int16 v6; // bx
  //unsigned __int16 v7; // bx
  //unsigned __int16 v8; // bx
  //unsigned __int16 v9; // bx
  char v10; // bl
  //unsigned __int16 v11; // ax

  result = 0;
  do
  {
    --HIBYTE(result);
    v1 = result;
    LOBYTE(result) = result + 1;
    v2 = result;
    ++HIBYTE(result);
    v3 = mapAngle_FC1E0_FC1D0[v2];
    v4 = mapAngle_FC1E0_FC1D0[v1];
    v2 = result;
    ++HIBYTE(result);
    LOBYTE(v1) = (v4 == mapAngle_FC1E0_FC1D0[v2]) + (v4 == v3);
    v2 = result;
    LOBYTE(result) = result - 1;
    LOBYTE(v1) = (v4 == mapAngle_FC1E0_FC1D0[v2]) + v1;
    v2 = result;
    LOBYTE(result) = result - 1;
    LOBYTE(v1) = (v4 == mapAngle_FC1E0_FC1D0[v2]) + v1;
    v2 = result;
    --HIBYTE(result);
    LOBYTE(v1) = (v4 == mapAngle_FC1E0_FC1D0[v2]) + v1;
    v2 = result;
    --HIBYTE(result);
    v10 = (v4 == mapAngle_FC1E0_FC1D0[result]) + (v4 == mapAngle_FC1E0_FC1D0[v2]) + v1;
    LOBYTE(result) = result + 1;
    HIBYTE(result) = HIBYTE(result) + 1;
    if ( v4 )
    {
      if ( v10 == 7 )
        mapAngle_FC1E0_FC1D0[result] = v4;
    }
    result = result + 1;
  }
  while ( result );
  return result;
}

//----- (000320A0) --------------------------------------------------------
unsigned __int16 sub_320A0(unsigned __int16 a1)//2030A0_
{
  unsigned __int16 result; // ax
  unsigned __int8 v2; // dh
  unsigned __int8 v3; // dl
  //unsigned __int16 v4; // ax
  //unsigned __int16 v5; // ax
  int v6; // edx
  char v7; // bl
  char v8; // dl
  char v9; // dh

  //fix
  //v4 = 0;
  //v5 = 0;
  //fix

  result = 0;
  do
  {
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
    {
      v2 = 0;
      v3 = -1;
      if ( mapHeightmap_DC1E0_DC1D0[result] )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( mapHeightmap_DC1E0_DC1D0[result] != -1 )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      --HIBYTE(result);
      if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result + 1;
      ++HIBYTE(result);
      if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result - 1;
      ++HIBYTE(result);
      if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result - 1;
      HIBYTE(result) = HIBYTE(result) - 1;
      if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v2 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      v6 = v2 - v3;
      LOBYTE(result) = result + 1;
      if ( v6 <= a1 )
      {
        if ( v6 == a1 )
        {
          LOWORD(v6) = result;
          mapAngle_FC1E0_FC1D0[v6] = 4;
        }
        else
        {
          mapAngle_FC1E0_FC1D0[result] = 3;
        }
      }
    }
    ++result;
  }
  while ( result );
  do
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      v7 = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      v8 = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      v9 = 1;
    LOBYTE(result) = result + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++v7;
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v8;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    ++HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++v7;
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v8;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    LOBYTE(result) = result - 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++v7;
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v8;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v9;
    --HIBYTE(result);
    if ( !v8 && v7 && v9 )
    {
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result + 1;
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      ++HIBYTE(result);
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result - 1;
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      --HIBYTE(result);
    }
    ++result;
  }
  while ( result );
  return result;
}

//----- (00032300) --------------------------------------------------------
unsigned __int16 sub_32300()
{
  unsigned __int16 result; // ax
  char v1; // bl
  char v2; // dh
  char v3; // dl

  result = 0;
  do
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    if ( !mapAngle_FC1E0_FC1D0[result] )
      v1 = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      v3 = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      v2 = 1;
    LOBYTE(result) = result + 1;
    if ( !mapAngle_FC1E0_FC1D0[result] )
      ++v1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v3;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++v2;
    ++HIBYTE(result);
    if ( !mapAngle_FC1E0_FC1D0[result] )
      ++v1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v3;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++v2;
    LOBYTE(result) = result - 1;
    if ( !mapAngle_FC1E0_FC1D0[result] )
      ++v1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      ++v3;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++v2;
    --HIBYTE(result);
    if ( v2 && v3 )
    {
      if ( mapAngle_FC1E0_FC1D0[result] == 5 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result + 1;
      if ( mapAngle_FC1E0_FC1D0[result] == 5 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      ++HIBYTE(result);
      if ( mapAngle_FC1E0_FC1D0[result] == 5 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result - 1;
      if ( mapAngle_FC1E0_FC1D0[result] == 5 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      --HIBYTE(result);
    }
    if ( v2 && v1 )
    {
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result + 1;
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      ++HIBYTE(result);
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result - 1;
      if ( mapAngle_FC1E0_FC1D0[result] == 3 )
        mapAngle_FC1E0_FC1D0[result] = 4;
      --HIBYTE(result);
    }
    if ( v1 && v3 )
    {
      if ( mapAngle_FC1E0_FC1D0[result] )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result + 1;
      if ( mapAngle_FC1E0_FC1D0[result] )
        mapAngle_FC1E0_FC1D0[result] = 4;
      ++HIBYTE(result);
      if ( mapAngle_FC1E0_FC1D0[result] )
        mapAngle_FC1E0_FC1D0[result] = 4;
      LOBYTE(result) = result - 1;
      if ( mapAngle_FC1E0_FC1D0[result] )
        mapAngle_FC1E0_FC1D0[result] = 4;
      --HIBYTE(result);
    }
    ++result;
  }
  while ( result );
  return result;
}

//----- (00032560) --------------------------------------------------------
char sub_32560()//203560_
{
  _BYTE *v0; // edx
  int v1; // ebx
  char *v2; // edi
  int v3; // esi
  unsigned __int16 i; // bx
  char v5; // al
  char v6; // ah
  char v7; // dh
  char v8; // dl
  unsigned __int8 *v9; // ebp
  unsigned __int8 *v10; // ebp
  char v11; // cl
  char v12; // al
  char v13; // ah
  char v14; // cl
  char v15; // dl
  char v16; // dh
  unsigned __int8 *v17; // ebp
  unsigned __int8 *v18; // ebp
  char v19; // cl
  char v20; // al
  char v21; // dl
  char v22; // cl
  char v23; // ah
  char v24; // dh
  unsigned __int8 *v25; // ebp
  unsigned __int8 v26; // cl
  char v27; // cl
  char v28; // al
  char v29; // ah
  char v30; // cl
  char v31; // dl
  char v32; // dh
  unsigned __int8 *v33; // ebp
  unsigned __int8 v34; // cl
  char v35; // cl
  char v36; // al
  char v37; // dh
  unsigned __int8 *v38; // ebp
  unsigned __int8 *v39; // ebp
  char v40; // cl
  char v41; // al
  char v42; // ah
  char v43; // cl
  char v44; // dl
  char v45; // dh
  unsigned __int8 *v46; // ebp
  unsigned __int8 v47; // cl
  unsigned __int8 *v48; // ebp
  unsigned __int8 *v49; // ebp
  unsigned __int8 *v50; // edx
  unsigned __int8 v51; // al
  char *v52; // edx
  char m; // al
  char *v54; // ebx
  char v55; // ah
  char result; // al
  unsigned __int16 v57; // cx
  int v58; // edx
  char v59; // al
  unsigned __int16 v60; // dx
  char v61; // al
  unsigned __int16 v62; // dx
  int v63; // edi
  unsigned __int8 v64; // al
  int v65; // ebx
  char v66; // [esp+4h] [ebp-38h]
  unsigned __int8 v67; // [esp+8h] [ebp-34h]
  char v68; // [esp+10h] [ebp-2Ch]
  char j; // [esp+14h] [ebp-28h]
  char k; // [esp+18h] [ebp-24h]
  unsigned __int8 v71; // [esp+1Ch] [ebp-20h]
  unsigned __int8 v72; // [esp+20h] [ebp-1Ch]
  unsigned __int8 v73; // [esp+24h] [ebp-18h]
  unsigned __int8 v74; // [esp+28h] [ebp-14h]

  v0 = (_BYTE *)begWscreen_2ECFF4_2ECFE4;
  v1 = 0;
  do
  {
    ++v1;
    *v0 = 0;
    v0 += 25;
  }
  while ( (unsigned __int16)v1 < 0x961u );
  v2 = (char *)&unk_9075C;
  v3 = (int)begWscreen_2ECFF4_2ECFE4;
  for ( i = 0; i < 0x94u; ++i )
  {
    v5 = v2[0];
    if ( v2[0] >= 0 )
    {
      v6 = v2[1];
      if ( v6 >= 0 )
      {
        v7 = v2[2];
        if ( v7 >= 0 )
        {
          v8 = v2[3];
          if ( v8 >= 0 )
          {
            v9 = (unsigned __int8 *)(v3 + 25 * (49 * v6 + 7 * v7 + v8 + 343 * v5));
            v72 = *v9;
            if ( *v9 < 0xCu )
            {
              ++*v9;
              v10 = &v9[v72];
              v10[13] = 0;
              v10[1] = i;
            }
            v11 = v5;
            v12 = v6;
            v13 = v11;
            v14 = v8;
            v15 = v7;
            v16 = v14;
            v17 = (unsigned __int8 *)(v3 + 25 * (49 * v13 + 7 * v14 + v15 + 343 * v12));
            v73 = *v17;
            if ( *v17 < 0xCu )
            {
              ++*v17;
              v18 = &v17[v73];
              v18[13] = 16;
              v18[1] = i;
            }
            v19 = v12;
            v20 = v15;
            v21 = v19;
            v22 = v13;
            v23 = v16;
            v24 = v22;
            v25 = (unsigned __int8 *)(v3 + 25 * (49 * v23 + v21 + 7 * v22 + 343 * v20));
            v26 = *v25;
            if ( *v25 < 0xCu )
            {
              *v25 = v26 + 1;
              v25[v26 + 13] = 48;
              v25[v26 + 1] = i;
            }
            v27 = v20;
            v28 = v23;
            v29 = v27;
            v30 = v21;
            v31 = v24;
            v32 = v30;
            v33 = (unsigned __int8 *)(v3 + 25 * (49 * v29 + 7 * v30 + v31 + 343 * v28));
            v34 = *v33;
            if ( *v33 < 0xCu )
            {
              *v33 = v34 + 1;
              v33[v34 + 13] = 32;
              v33[v34 + 1] = i;
            }
            v35 = v28;
            v36 = v32;
            v37 = v35;
            v38 = (unsigned __int8 *)(v3 + 25 * (v31 + 7 * v35 + 49 * v29 + 343 * v36));
            v71 = *v38;
            if ( *v38 < 0xCu )
            {
              ++*v38;
              v39 = &v38[v71];
              v39[13] = 96;
              v39[1] = i;
            }
            v40 = v36;
            v41 = v29;
            v42 = v40;
            v43 = v31;
            v44 = v37;
            v45 = v43;
            v46 = (unsigned __int8 *)(v3 + 25 * (49 * v42 + v44 + 7 * v43 + 343 * v41));
            v47 = *v46;
            if ( *v46 < 0xCu )
            {
              *v46 = v47 + 1;
              v46[v47 + 13] = 112;
              v46[v47 + 1] = i;
            }
            v48 = (unsigned __int8 *)(v3 + 25 * (49 * v45 + 7 * v42 + v41 + 343 * v44));
            v67 = *v48;
            if ( *v48 < 0xCu )
            {
              ++*v48;
              v49 = &v48[v67];
              v49[13] = 80;
              v49[1] = i;
            }
            v50 = (unsigned __int8 *)(v3 + 25 * (343 * v45 + v42 + 7 * v41 + 49 * v44));
            v51 = *v50;
            if ( *v50 < 0xCu )
            {
              *v50 = v51 + 1;
              v50[v51 + 13] = 64;
              v50[v51 + 1] = i;
            }
          }
        }
      }
    }
    v2 += 4;
  }
  v52 = (char*)&byte_B5D40x;
  v66 = 0;
  do
  {
    for ( j = 0; j < 7; ++j )
    {
      for ( k = 0; k < 7; ++k )
      {
        for ( m = 0; m < 7; ++m )
        {
          v54 = (char *)(v3 + 25 * (49 * j + m + 7 * k + 343 * v66));
          v55 = *v54;
          if ( *v54 )
          {
            v52[0] = v54[1];
            v55 = v54[13];
          }
          else
          {
            v52[0] = 1;
          }
          v52[1] = v55;
          v52 += 2;
        }
      }
    }
    result = v66 + 1;
    v66 = result;
  }
  while ( result < 7 );
  v57 = 0;
  do
  {
    v58 = v57;
    if ( !mapTerrainType_CC1E0_CC1D0[v57] )
    {
      LOBYTE(v57) = v57 + 1;
      v59 = mapAngle_FC1E0_FC1D0[v58];
      v60 = v57;
      v68 = v59 & 7;
      ++HIBYTE(v57);
      v61 = mapAngle_FC1E0_FC1D0[v60];
      v62 = v57;
      LOBYTE(v57) = v57 - 1;
      v63 = 49 * (v61 & 7) + 7 * (mapAngle_FC1E0_FC1D0[v62] & 7) + (mapAngle_FC1E0_FC1D0[v57] & 7) + 343 * v68;
      result = *(_BYTE *)(25 * v63 + v3);
      --HIBYTE(v57);
      v74 = result;
      if ( result )
      {
        pseudoRand_12C1E0_12C1D0 = 9377 * pseudoRand_12C1E0_12C1D0 + 9439;
        v64 = (unsigned __int16)pseudoRand_12C1E0_12C1D0 % (unsigned __int16)((unsigned __int8)result + 1);
        if ( v64 >= v74 )
          v64 = 0;
        v65 = v64 + v3 + 25 * v63;
        mapTerrainType_CC1E0_CC1D0[v57] = *(_BYTE *)(v65 + 1);
        result = *(_BYTE *)(v65 + 13) + (mapAngle_FC1E0_FC1D0[v57] & 7);
        mapAngle_FC1E0_FC1D0[v57] = result;
      }
      else
      {
        mapTerrainType_CC1E0_CC1D0[v57] = 1;
      }
    }
    ++v57;
  }
  while ( v57 );
  return result;
}
// B5D40: using guessed type char byte_B5D40;
// 12C1E0: using guessed type __int16 pseudoRand_12C1E0_12C1D0;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (000329C0) --------------------------------------------------------
void sub_329C0()
{
  unsigned __int16 v0; // cx
  unsigned __int16 v1; // dx
  int result; // eax
  //unsigned __int16 v3; // cx
  unsigned __int16 v4; // tt

  v0 = 0;
  pseudoRand_12C1E0_12C1D0 = 0;
  do
  {
    LOBYTE(v0) = v0 + 1;
    HIWORD(result) = 0;
    ++HIBYTE(v0);
    LOWORD(result) = v0;
    LOBYTE(v0) = v0 - 2;
    HIBYTE(v0) -= 2;
    v1 = v0;
    LOBYTE(v0) = v0 + 1;
    LOBYTE(result) = mapHeightmap_DC1E0_DC1D0[v1] - mapHeightmap_DC1E0_DC1D0[(unsigned __int16)result] + 32;
    HIBYTE(v0) = HIBYTE(v0) + 1;
    if ( (_BYTE)result == 32 )
    {
      result = 9377 * (unsigned __int16)pseudoRand_12C1E0_12C1D0;
      pseudoRand_12C1E0_12C1D0 = result + 9439;
      v4 = result + 9439;
      BYTE1(result) = (unsigned __int16)(result + 9439) / 0x900u;
      LOBYTE(result) = v4 % 9u + 28;
    }
    else if ( (char)result >= 28 )
    {
      if ( (char)result > 40 )
        LOBYTE(result) = (result & 7) + 40;
    }
    else
    {
      LOBYTE(result) = (result & 3) + 28;
    }
    mapShading_EC1E0_EC1D0[v0] = result;
    v0 = v0 + 1;
  }
  while ( v0 );
}
// 12C1E0: using guessed type __int16 pseudoRand_12C1E0_12C1D0;

//----- (00032A50) --------------------------------------------------------
int sub_32A50()//203A50_
{
  __int16 v0; // dx
  __int16 v1; // cx
  unsigned __int16 v2; // bx
  __int16 v3; // ax
  int v4; // ecx
  int result; // eax

  v0 = -32000;
  v1 = 32000;
  v2 = 0;
  do
  {
    v3 = mapEntityIndex_10C1E0_10C1D0[v2];
    if ( v3 > v0 )
      v0 = mapEntityIndex_10C1E0_10C1D0[v2];
    if ( v3 < v1 )
      v1 = mapEntityIndex_10C1E0_10C1D0[v2];
    ++v2;
  }
  while ( v2 );
  if ( v0 )
    v4 = 12845056 / v0;
  else
    v4 = 0;
  do
  {
    result = (v4 * mapEntityIndex_10C1E0_10C1D0[v2]) >> 16;
    mapEntityIndex_10C1E0_10C1D0[v2] = 0;
    if ( (result & 0x8000u) != 0 )
      result = 0;
    if ( (__int16)result > 196 )
      result = 196;
    mapHeightmap_DC1E0_DC1D0[v2++] = result;
  }
  while ( v2 );
  return result;
}
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (00032AE0) --------------------------------------------------------
unsigned __int16 sub_32AE0(int a1, unsigned __int8 a2)
{
  unsigned __int16 v3; // si
  int v4; // ecx
  int v5; // eax
  int v6; // ebx
  unsigned __int16 result; // ax

  v3 = 0;
  do
  {
    if ( mapHeightmap_DC1E0_DC1D0[v3] )
      mapAngle_FC1E0_FC1D0[v3] = 5;
    else
      mapAngle_FC1E0_FC1D0[v3] = 0;
    ++v3;
  }
  while ( v3 );
LABEL_12:
  if ( a1 > 0 )
  {
    v4 = 1000;
    while ( 1 )
    {
      v6 = 0xFFFF;
      pseudoRand_12C1E0_12C1D0 = 9377 * pseudoRand_12C1E0_12C1D0 + 9439;
      HIWORD(v5) = 0;
      LOBYTE(v6) = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)pseudoRand_12C1E0_12C1D0 % 0xFFFFu];
      if ( !--v4 )
        break;
      if ( (unsigned __int8)v6 > a2 )
      {
        LOWORD(v5) = (unsigned __int16)pseudoRand_12C1E0_12C1D0 % 0xFFFFu;
        if ( mapAngle_FC1E0_FC1D0[v5] )
        {
          --a1;
          sub_32B90_sub_32F80(v6, (unsigned __int16)pseudoRand_12C1E0_12C1D0 % 0xFFFFu);
          goto LABEL_12;
        }
      }
    }
  }
  do
  {
    result = v3;
    mapTerrainType_CC1E0_CC1D0[v3++] = -1;
  }
  while ( v3 );
  return result;
}
// 12C1E0: using guessed type __int16 pseudoRand_12C1E0_12C1D0;

//----- (00032B90) --------------------------------------------------------
unsigned __int16 sub_32B90_sub_32F80(int a1, int a2)
{
  int v2; // eax
  unsigned __int16 v3; // dx
  unsigned __int8 v4; // dh
  unsigned __int16 v5; // si
  int v6; // esi
  unsigned __int8 v7; // dl
  unsigned __int16 result; // ax

  v2 = a2;
  v3 = 0;
  do
    mapTerrainType_CC1E0_CC1D0[v3++] = 3;
  while ( v3 );
  v4 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)a2];
  do
  {
    v5 = v2;
    --BYTE1(v2);
    mapTerrainType_CC1E0_CC1D0[v5] = 0;
    v6 = v5;
    LOWORD(v6) = v2;
    v7 = -1;
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && mapHeightmap_DC1E0_DC1D0[v6] != -1 )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[v6];
      a1 = v2;
    }
    LOBYTE(v2) = v2 + 1;
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    ++BYTE1(v2);
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    ++BYTE1(v2);
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    LOBYTE(v2) = v2 - 1;
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    LOBYTE(v2) = v2 - 1;
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    --BYTE1(v2);
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    --BYTE1(v2);
    if ( mapTerrainType_CC1E0_CC1D0[(unsigned __int16)v2] && v7 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2] )
    {
      v7 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)v2];
      a1 = v2;
    }
    if ( !mapAngle_FC1E0_FC1D0[(unsigned __int16)a1] || v7 == 0xFF )
      break;
    if ( v7 > v4 )
      mapHeightmap_DC1E0_DC1D0[(unsigned __int16)a1] = v4;
    v4 = mapHeightmap_DC1E0_DC1D0[(unsigned __int16)a1];
    v2 = a1;
  }
  while ( v4 );
  result = 0;
  do
  {
    if ( !mapTerrainType_CC1E0_CC1D0[result] )
      mapAngle_FC1E0_FC1D0[result] = 0;
    ++result;
  }
  while ( result );
  return result;
}

//----- (00032D00) --------------------------------------------------------
unsigned __int8 sub_32D00(unsigned __int8 a1, unsigned __int8 a2)
{
  unsigned __int16 v2; // dx
  unsigned __int8 v3; // ah
  unsigned __int8 result; // al
  //unsigned __int16 v5; // dx

  qmemcpy(mapTerrainType_CC1E0_CC1D0, mapAngle_FC1E0_FC1D0, 0x10000);
  v2 = 0;
  do
  {
    v3 = 0;
    result = -1;
    if ( mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapHeightmap_DC1E0_DC1D0[v2] != -1 )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    --HIBYTE(v2);
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    LOBYTE(v2) = v2 + 1;
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    ++HIBYTE(v2);
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    ++HIBYTE(v2);
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    LOBYTE(v2) = v2 - 1;
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    LOBYTE(v2) = v2 - 1;
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    --HIBYTE(v2);
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    --HIBYTE(v2);
    if ( v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
    if ( result > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      result = mapHeightmap_DC1E0_DC1D0[v2];
    LOBYTE(v2) = v2 + 1;
    HIBYTE(v2) = HIBYTE(v2) + 1;
    if ( v3 < a1 && v3 - result <= a2 )
    {
      if ( mapAngle_FC1E0_FC1D0[v2] )
        mapAngle_FC1E0_FC1D0[v2] = 5;
    }
    v2 = v2 + 1;
  }
  while ( v2 );
  return result;
}
// 10000: using guessed type void sub_10000();

//----- (00032EB0) --------------------------------------------------------
char sub_32EB0(unsigned __int8 a1, unsigned __int8 a2)
{
  unsigned __int16 v2; // dx
  int v3; // eax
  unsigned __int8 v4; // bh
  unsigned __int8 v5; // bl
  //unsigned __int16 v6; // dx
  int v7; // ecx

  qmemcpy(mapTerrainType_CC1E0_CC1D0, mapAngle_FC1E0_FC1D0, 0x10000);
  v2 = 0;
  do
  {
    LOWORD(v3) = -256;
    v4 = 0;
    v5 = 0;
    if ( mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapHeightmap_DC1E0_DC1D0[v2] != -1 )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    --HIBYTE(v2);
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      v5 = 1;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      v4 = 1;
    LOBYTE(v2) = v2 + 1;
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    ++HIBYTE(v2);
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    ++HIBYTE(v2);
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    LOBYTE(v2) = v2 - 1;
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    LOBYTE(v2) = v2 - 1;
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    --HIBYTE(v2);
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    --HIBYTE(v2);
    if ( (unsigned __int8)v3 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      LOBYTE(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( BYTE1(v3) > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v2] )
      BYTE1(v3) = mapHeightmap_DC1E0_DC1D0[v2];
    if ( mapAngle_FC1E0_FC1D0[v2] == 5 )
      ++v5;
    if ( mapAngle_FC1E0_FC1D0[v2] == 2 )
      ++v4;
    LOBYTE(v2) = v2 + 1;
    HIBYTE(v2) = HIBYTE(v2) + 1;
    if ( (unsigned __int8)v3 < a1 )
    {
      v7 = (unsigned __int8)v3 - BYTE1(v3);
      LOBYTE(v3) = a2;
      if ( v7 <= a2 && mapAngle_FC1E0_FC1D0[v2] == 5 )
      {
        v3 = v4 + v5;
        if ( v3 == 8 )
          mapAngle_FC1E0_FC1D0[v2] = 2;
      }
    }
    v2 = v2 + 1;
  }
  while ( v2 );
  return v3;
}
// 10000: using guessed type void sub_10000();

//----- (00033180) --------------------------------------------------------
unsigned __int16 sub_33180(unsigned __int8 a1)
{
  unsigned __int16 result; // ax
  unsigned __int8 v2; // dh
  unsigned __int8 v3; // dl
  //unsigned __int16 v4; // ax
  //unsigned __int16 v5; // ax
  //unsigned __int16 v6; // ax
  __int16 v7; // bx
  char v8; // dl
  char v9; // dh

  //fix
  //v4 = 0;
  //v5 = 0;
  //v6 = 0;
  //fix

  qmemcpy(mapTerrainType_CC1E0_CC1D0, mapAngle_FC1E0_FC1D0, 0x10000);
  result = 0;
  do
  {
    v2 = 0;
    v3 = -1;
    if ( mapHeightmap_DC1E0_DC1D0[result] )
      v2 = mapHeightmap_DC1E0_DC1D0[result];
    if ( mapHeightmap_DC1E0_DC1D0[result] != -1 )
      v3 = mapHeightmap_DC1E0_DC1D0[result];
    --HIBYTE(result);
    if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
      v2 = mapHeightmap_DC1E0_DC1D0[result];
    if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
      v3 = mapHeightmap_DC1E0_DC1D0[result];
    LOBYTE(result) = result + 1;
    ++HIBYTE(result);
    if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
      v2 = mapHeightmap_DC1E0_DC1D0[result];
    if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
      v3 = mapHeightmap_DC1E0_DC1D0[result];
    ++HIBYTE(result);
    LOBYTE(result) = result - 1;
    if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
      v2 = mapHeightmap_DC1E0_DC1D0[result];
    if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
      v3 = mapHeightmap_DC1E0_DC1D0[result];
    LOBYTE(result) = result - 1;
    --HIBYTE(result);
    if ( v2 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
      v2 = mapHeightmap_DC1E0_DC1D0[result];
    if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
      v3 = mapHeightmap_DC1E0_DC1D0[result];
    LOBYTE(result) = result + 1;
    if ( mapAngle_FC1E0_FC1D0[result] && v2 - v3 >= a1 )
      mapAngle_FC1E0_FC1D0[result] = 6;
    result = result + 1;
  }
  while ( result );
  do
  {
    if ( mapAngle_FC1E0_FC1D0[result] != 6 )
      goto LABEL_100;
    v7 = 0;
    --HIBYTE(result);
    v8 = 0;
    v9 = 0;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      HIBYTE(v7) = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      v9 = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      v8 = 1;
    LOBYTE(result) = result + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    ++HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    ++HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    LOBYTE(result) = result - 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    LOBYTE(result) = result - 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    --HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    --HIBYTE(result);
    if ( mapAngle_FC1E0_FC1D0[result] == 3 )
      ++HIBYTE(v7);
    if ( mapAngle_FC1E0_FC1D0[result] == 2 )
      ++v9;
    if ( mapAngle_FC1E0_FC1D0[result] == 5 )
      LOBYTE(v7) = v7 + 1;
    if ( mapAngle_FC1E0_FC1D0[result] == 4 )
      ++v8;
    LOBYTE(result) = result + 1;
    ++HIBYTE(result);
    if ( HIBYTE(v7) )
    {
      if ( v9 || (_BYTE)v7 || v8 )
        goto LABEL_99;
    }
    else if ( v9 || (_BYTE)v7 && v8 )
    {
LABEL_99:
      mapAngle_FC1E0_FC1D0[result] = 1;
    }
LABEL_100:
    ++result;
  }
  while ( result );
  return result;
}
// 10000: using guessed type void sub_10000();

//----- (00033500) --------------------------------------------------------
unsigned __int16 sub_33500()
{
  unsigned __int16 result; // ax
  char v1; // dh
  unsigned __int16 v2; // cx
  unsigned __int8 v3; // dl
  unsigned __int8 v4; // bl
  unsigned __int16 v5; // cx
  unsigned __int16 v6; // cx
  unsigned __int16 v7; // cx
  unsigned __int16 v8; // cx
  char v9; // [esp+0h] [ebp-8h]

  do
  {
    result = 0;
    v9 = 0;
    do
    {
      v1 = mapAngle_FC1E0_FC1D0[result] == 0;
      v2 = result;
      LOBYTE(result) = result + 1;
      v3 = mapHeightmap_DC1E0_DC1D0[v2];
      v4 = v3;
      if ( !mapAngle_FC1E0_FC1D0[result] )
        ++v1;
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v4 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v4 = mapHeightmap_DC1E0_DC1D0[result];
      ++HIBYTE(result);
      if ( !mapAngle_FC1E0_FC1D0[result] )
        ++v1;
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v4 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v4 = mapHeightmap_DC1E0_DC1D0[result];
      LOBYTE(result) = result - 1;
      if ( !mapAngle_FC1E0_FC1D0[result] )
        ++v1;
      if ( v3 > (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v3 = mapHeightmap_DC1E0_DC1D0[result];
      if ( v4 < (unsigned __int8)mapHeightmap_DC1E0_DC1D0[result] )
        v4 = mapHeightmap_DC1E0_DC1D0[result];
      --HIBYTE(result);
      if ( v4 != v3 && v1 == 4 )
      {
        v9 = 1;
        v5 = result;
        LOBYTE(result) = result + 1;
        mapHeightmap_DC1E0_DC1D0[v5] = v3;
        v6 = result;
        ++HIBYTE(result);
        mapHeightmap_DC1E0_DC1D0[v6] = v3;
        v7 = result;
        LOBYTE(result) = result - 1;
        mapHeightmap_DC1E0_DC1D0[v7] = v3;
        v8 = result;
        --HIBYTE(result);
        mapHeightmap_DC1E0_DC1D0[v8] = v3;
      }
      ++result;
    }
    while ( result );
  }
  while ( v9 );
  return result;
}

//----- (00033640) --------------------------------------------------------
char sub_33640(char a1, char a2, unsigned __int16 a3)
{
  unsigned __int16 v3; // ax
  unsigned __int8 v4; // bl
  unsigned __int8 v5; // dh
  unsigned __int8 v6; // bh
  unsigned __int8 v7; // al
  char result; // al

  HIBYTE(v3) = HIBYTE(a3);
  v4 = -1;
  v5 = 0;
  if ( mapHeightmap_DC1E0_DC1D0[a3] )
  {
    v5 = mapHeightmap_DC1E0_DC1D0[a3];
    a1 = 0;
  }
  if ( mapHeightmap_DC1E0_DC1D0[a3] != -1 )
    v4 = mapHeightmap_DC1E0_DC1D0[a3];
  LOBYTE(v3) = a3 + 1;
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] > v5 )
  {
    v5 = mapHeightmap_DC1E0_DC1D0[v3];
    a1 = 1;
  }
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] < v4 )
    v4 = mapHeightmap_DC1E0_DC1D0[v3];
  HIBYTE(v3) = HIBYTE(a3) + 1;
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] > v5 )
  {
    v5 = mapHeightmap_DC1E0_DC1D0[v3];
    a1 = 2;
  }
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] < v4 )
    v4 = mapHeightmap_DC1E0_DC1D0[v3];
  LOBYTE(v3) = a3;
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] > v5 )
  {
    v5 = mapHeightmap_DC1E0_DC1D0[v3];
    a1 = 3;
  }
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] < v4 )
    v4 = mapHeightmap_DC1E0_DC1D0[v3];
  HIBYTE(v3) = HIBYTE(a3);
  v6 = 0;
  if ( a1 && mapHeightmap_DC1E0_DC1D0[v3] )
  {
    v6 = mapHeightmap_DC1E0_DC1D0[v3];
    a2 = 0;
  }
  LOBYTE(v3) = a3 + 1;
  if ( a1 != 1 && (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] > v6 )
  {
    v6 = mapHeightmap_DC1E0_DC1D0[v3];
    a2 = 1;
  }
  HIBYTE(v3) = HIBYTE(a3) + 1;
  if ( a1 != 2 && (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v3] > v6 )
  {
    v6 = mapHeightmap_DC1E0_DC1D0[v3];
    a2 = 2;
  }
  LOBYTE(v3) = a3;
  if ( a1 != 3 )
  {
    v7 = mapHeightmap_DC1E0_DC1D0[v3];
    if ( v7 > v6 )
    {
      a2 = 3;
      v6 = v7;
    }
  }
  dword_90758 = v5 - v4 <= 8;
  if ( v5 - v6 >= 8 )
    return a1;
  switch ( a1 )
  {
    case 0:
      if ( a2 != 1 )
        goto LABEL_39;
      goto LABEL_33;
    case 1:
      if ( a2 == 2 )
        goto LABEL_35;
LABEL_33:
      result = 4;
      break;
    case 2:
      if ( a2 == 3 )
        goto LABEL_37;
LABEL_35:
      result = 5;
      break;
    case 3:
      if ( a2 )
LABEL_37:
        result = 6;
      else
LABEL_39:
        result = 7;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}
// 90758: using guessed type int dword_90758;

//----- (00033800) --------------------------------------------------------
void sub_33800_33BF0(char a1, char a2, unsigned __int16 a3, unsigned __int8 a4)//204800_
{
  unsigned __int16 v4; // bx
  char result; // al
  char v6; // dl
  uint8* v7; // eax
  char v8; // al
  char v9; // ah
  unsigned __int8 v10; // al
  unsigned __int16 v11; // ax
  char v12; // dl
  unsigned __int16 v13; // ax
  char v14; // dh
  unsigned __int8 v15; // [esp+0h] [ebp-14h]

  HIBYTE(v4) = HIBYTE(a3);
  v15 = 8 * ((HIBYTE(a3) + a3) & 1);
  if ( a4 >= 8u )
  {
    switch ( a4 )
    {
      case 8u:
        mapTerrainType_CC1E0_CC1D0[a3] = 8;
        goto LABEL_30;
      case 9u:
        mapTerrainType_CC1E0_CC1D0[a3] = 9;
        goto LABEL_30;
      case 0xAu:
        v8 = sub_33640(a1, a2, a3);
        v9 = v8;
        if ( dword_90758 )
          v9 = v8 + 8;
        v10 = v9;
        goto LABEL_28;
      case 0xBu:
        v10 = sub_33640(a1, a2, a3) + 16;
        if ( dword_90758 )
          v10 += 8;
        goto LABEL_28;
      case 0xCu:
        v10 = sub_33640(a1, a2, a3) + 32;
        if ( dword_90758 )
          v10 += 8;
        goto LABEL_28;
      case 0xDu:
        v10 = sub_33640(a1, a2, a3) + 48;
        if ( dword_90758 )
          v10 += 8;
        goto LABEL_28;
      case 0xEu:
        v10 = sub_33640(a1, a2, a3) + 64;
        if ( dword_90758 )
          v10 += 8;
LABEL_28:
        //v7 = (uint8*)&unk_90A2C + 2 * v10;
        v7 = unk_909FCx[3 + (int)(v10 / 8)][v10 % 8];
        goto LABEL_29;
      case 0xFu:
        mapTerrainType_CC1E0_CC1D0[a3] = 11;
        goto LABEL_30;
      case 0x10u:
        v6 = mapTerrainType_CC1E0_CC1D0[a3];
        if ( v6 == 10 || v6 == 11 || v6 == 12 )
          goto LABEL_30;
        v7 = unk_909ACx[0][sub_33640(v6, a2, a3)];
LABEL_29:
        mapTerrainType_CC1E0_CC1D0[a3] = v7[0];
        mapAngle_FC1E0_FC1D0[a3] = mapAngle_FC1E0_FC1D0[a3] & 0x8F | v7[1];
LABEL_30:
        LOBYTE(v4) = a3 + 1;
        mapAngle_FC1E0_FC1D0[a3] = mapAngle_FC1E0_FC1D0[a3] & 0x77 | 0x80;
        v11 = v4;
        v12 = mapAngle_FC1E0_FC1D0[v4] & 0xF7;
        HIBYTE(v4) = HIBYTE(a3) + 1;
        mapAngle_FC1E0_FC1D0[v11] = v12;
        v13 = v4;
        v14 = mapAngle_FC1E0_FC1D0[v4] & 0xF7;
        LOBYTE(v4) = a3;
        mapAngle_FC1E0_FC1D0[v13] = v14;
        result = a3;
        mapAngle_FC1E0_FC1D0[v4] &= ~8u;
        break;
      case 0x11u:
        v7 = unk_909ECx[0][sub_33640(a1, a2, a3)];
        goto LABEL_29;
      case 0x12u:
        v7 = unk_909FCx[0 + v15 / 8][sub_33640(a1, a2, a3)];
        goto LABEL_29;
      case 0x13u:
        v7 = unk_909FCx[1 + v15 / 8][sub_33640(a1, a2, a3)];
        goto LABEL_29;
      case 0x14u:
        v7 = unk_909BCx[0][sub_33640(a1, a2, a3)];
        goto LABEL_29;
      case 0x15u:
        v7 = unk_909BCx[1][sub_33640(a1, a2, a3)];
        goto LABEL_29;
      case 0x16u:
        v7 = unk_909BCx[2][sub_33640(a1, a2, a3)];
        goto LABEL_29;
      default:
        goto LABEL_30;
    }
  }
  else
  {
    mapAngle_FC1E0_FC1D0[a3] = a4 | mapAngle_FC1E0_FC1D0[a3] & 0xF0;
    uaxis_2d a3x;
    a3x.word = a3;
    sub_33B90(a3x, a3x);
  }
}
// 90758: using guessed type int dword_90758;

//----- (00033AE0) --------------------------------------------------------
unsigned __int16 sub_33AE0(unsigned __int16 a1, char a2)
{
  unsigned __int16 v2; // ax
  unsigned __int16 v3; // bx
  unsigned __int16 v4; // bx
  unsigned __int16 v5; // bx
  char v6; // cl
  unsigned __int16 result; // ax
  char v8; // dh
  unsigned __int16 v9; // bx
  char v10; // dl
  unsigned __int16 v11; // bx
  char v12; // dl
  unsigned __int16 v13; // bx
  char v14; // dl

  HIBYTE(v2) = HIBYTE(a1);
  LOBYTE(v2) = a1 - 1;
  mapTerrainType_CC1E0_CC1D0[a1] = a2;
  v3 = v2;
  HIBYTE(result) = HIBYTE(a1) - 1;
  mapTerrainType_CC1E0_CC1D0[v3] = a2;
  v4 = result;
  LOBYTE(result) = a1;
  mapTerrainType_CC1E0_CC1D0[v4] = a2;
  v5 = result;
  v6 = 3;
  LOBYTE(result) = a1 - 1;
  mapTerrainType_CC1E0_CC1D0[v5] = a2;
  do
  {
    v8 = 3;
    do
    {
      LOBYTE(result) = result + 1;
      ++HIBYTE(result);
      v9 = result;
      LOBYTE(result) = result - 2;
      v10 = mapHeightmap_DC1E0_DC1D0[v9];
      HIBYTE(result) -= 2;
      v11 = result;
      LOBYTE(result) = result + 1;
      v12 = mapHeightmap_DC1E0_DC1D0[v11] - v10 + 32;
      ++HIBYTE(result);
      if ( v12 >= 32 )
      {
        if ( v12 > 40 )
          v12 = (v12 & 7) + 40;
      }
      else
      {
        v12 = 32;
      }
      v13 = result;
      mapShading_EC1E0_EC1D0[result] = v12;
      v14 = mapAngle_FC1E0_FC1D0[result] & 0xF7;
      LOBYTE(result) = result + 1;
      mapAngle_FC1E0_FC1D0[v13] = v14;
      --v8;
    }
    while ( v8 );
    LOBYTE(result) = result - 3;
    ++HIBYTE(result);
    --v6;
  }
  while ( v6 );
  return result;
}

int counter_33B90 = 0;
//----- (00033B90) --------------------------------------------------------
void sub_33B90(uaxis_2d inAxis2dA, uaxis_2d inAxis2dB)//204B90_
{
	uaxis_2d tempAxis;
	uint8_t nextAngle;
	int terModIndex;
	char tempShad;
	char yAdd;
	char xAdd;
	uint8_t point1;
	uint8_t point2;
	uint8_t point3;
	uint8_t point4;

    //204B93
            //debug
#ifdef debug1
    if (counter_33B90 == 0x11a)
    {
        counter_33B90++;
        counter_33B90--;
    }
    counter_33B90++;
        //add_compare(0x204B93, true);
#endif debug1
        //debug

	tempAxis.word = inAxis2dA.word;
    for (uint8 indexY = inAxis2dB._axis_2d.y - inAxis2dA._axis_2d.y + 1; indexY; indexY--)
	{
		for (uint8 indexX = inAxis2dB._axis_2d.x - inAxis2dA._axis_2d.x + 1; indexX; indexX--)
		{
			if ((mapAngle_FC1E0_FC1D0[tempAxis.word] & 0x80) == 0)
				mapTerrainType_CC1E0_CC1D0[tempAxis.word] = 1;
			tempAxis._axis_2d.x--;
			if ((mapAngle_FC1E0_FC1D0[tempAxis.word] & 0x80) == 0)
				mapTerrainType_CC1E0_CC1D0[tempAxis.word] = 1;
			tempAxis._axis_2d.y--;
			if ((mapAngle_FC1E0_FC1D0[tempAxis.word] & 0x80) == 0)
				mapTerrainType_CC1E0_CC1D0[tempAxis.word] = 1;
			tempAxis._axis_2d.x++;
			if ((mapAngle_FC1E0_FC1D0[tempAxis.word] & 0x80) == 0)
				mapTerrainType_CC1E0_CC1D0[tempAxis.word] = 1;
			tempAxis._axis_2d.x++;
			tempAxis._axis_2d.y++;
		}
		tempAxis._axis_2d.x -= inAxis2dB._axis_2d.x - inAxis2dA._axis_2d.x + 1;
		tempAxis._axis_2d.y++;
	}
    xAdd = inAxis2dB._axis_2d.x - inAxis2dA._axis_2d.x + 2;
    yAdd = inAxis2dB._axis_2d.y - inAxis2dA._axis_2d.y + 2;
    inAxis2dA._axis_2d.x--;
    inAxis2dA._axis_2d.y--;
    tempAxis.word = inAxis2dA.word;
    for (int indexY = yAdd; indexY; indexY--)
	{
        for (int indexX = xAdd; indexX; indexX--)
		{
			if (mapTerrainType_CC1E0_CC1D0[tempAxis.word] == 1)
			{
                point1 = mapAngle_FC1E0_FC1D0[tempAxis.word];
                tempAxis._axis_2d.x++;
                point2 = mapAngle_FC1E0_FC1D0[tempAxis.word];
                tempAxis._axis_2d.y++;
                point3 = mapAngle_FC1E0_FC1D0[tempAxis.word];
                tempAxis._axis_2d.x--;
                point4 = mapAngle_FC1E0_FC1D0[tempAxis.word];
                tempAxis._axis_2d.y--;
                terModIndex = (point4 & 7) + 7 * (point3 & 7) + 49 * (point2 & 7) + 343 * (point1 & 7);
				mapTerrainType_CC1E0_CC1D0[tempAxis.word] = byte_B5D40x[terModIndex][0];
				if (byte_B5D40x[terModIndex][0] >= 8u)
				{
                    nextAngle = byte_B5D40x[terModIndex][1] + (mapAngle_FC1E0_FC1D0[tempAxis.word] & 0x87);
				}
				else
				{
                    pseudoRand_12C1E0_12C1D0 = 9377 * pseudoRand_12C1E0_12C1D0 + 9439;
                    nextAngle = (mapAngle_FC1E0_FC1D0[tempAxis.word] & 0x87) + 16 * ((uint16_t)pseudoRand_12C1E0_12C1D0 % 7u);
				}
                mapAngle_FC1E0_FC1D0[tempAxis.word] = nextAngle;
			}
            tempAxis._axis_2d.x++;
		}
        tempAxis._axis_2d.x -= xAdd;
        tempAxis._axis_2d.y++;
	}
    xAdd++;
    yAdd++;
    tempAxis.word = inAxis2dA.word;
    if (yAdd != 0)
	{
        for (int indexY = yAdd; indexY; indexY--)
        {
            for (int indexX = xAdd; indexX; indexX--)
			{
                tempAxis._axis_2d.x++;
                tempAxis._axis_2d.y++;
                point1 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
                tempAxis._axis_2d.x -= 2;
                tempAxis._axis_2d.y -= 2;
                point2 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
                tempAxis._axis_2d.x++;
                tempShad = point2 - point1 + 32;
                tempAxis._axis_2d.y++;
                if (tempShad >= 28)
                {
                    if (tempShad > 40)
                        tempShad = (tempShad & 7) + 40;
                }
                else
                {
                    tempShad = (tempShad & 3) + 28;
                }
                mapShading_EC1E0_EC1D0[tempAxis.word] = tempShad;
                mapAngle_FC1E0_FC1D0[tempAxis.word] &= 0xF7u;
                tempAxis._axis_2d.x++;
			}
            tempAxis._axis_2d.x -= xAdd;
            tempAxis._axis_2d.y++;
		}
	}
}
// 12C1E0: using guessed type __int16 pseudoRand_12C1E0_12C1D0;

//----- (00033E10) --------------------------------------------------------
char sub_33E10(unsigned __int16 a1, __int16 a2)
{
  unsigned __int16 v2; // cx
  char v3; // ah
  char v4; // al
  unsigned __int16 v5; // dx
  unsigned __int16 v6; // dx
  unsigned __int16 v7; // dx
  unsigned __int16 v8; // dx
  int v9; // eax
  unsigned __int16 v10; // cx
  _BOOL1 v11; // zf
  unsigned __int16 v12; // dx
  int v13; // eax
  unsigned __int16 v14; // dx
  int v15; // eax
  unsigned __int16 v16; // dx
  int v17; // edx
  unsigned __int16 v18; // cx
  char v19; // bl
  unsigned __int16 v20; // dx
  char v21; // al
  unsigned __int16 v22; // dx
  unsigned __int16 v23; // si
  char v24; // dh
  char v26; // [esp+0h] [ebp-20h]
  char v27; // [esp+4h] [ebp-1Ch]
  char v28; // [esp+4h] [ebp-1Ch]
  char v29; // [esp+8h] [ebp-18h]
  char v30; // [esp+Ch] [ebp-14h]
  char v31; // [esp+Ch] [ebp-14h]
  char v32; // [esp+Ch] [ebp-14h]
  char i; // [esp+10h] [ebp-10h]
  unsigned __int16 v34; // [esp+24h] [ebp+4h]

  //fix
  v34 = 0;
  //fix

  v2 = a1;
  v30 = a2 - a1 + 1;
  v3 = HIBYTE(a2) - HIBYTE(a1) + 1;
  v27 = v3;
  if ( HIBYTE(a2) - HIBYTE(a1) != 0xFF )
  {
    do
    {
      v4 = a2 - a1 + 1;
      if ( (_BYTE)a2 - (_BYTE)a1 != 0xFF )
      {
        do
        {
          v5 = v2;
          LOBYTE(v2) = v2 - 1;
          mapTerrainType_CC1E0_CC1D0[v5] = 1;
          v6 = v2;
          --HIBYTE(v2);
          mapTerrainType_CC1E0_CC1D0[v6] = 1;
          v7 = v2;
          LOBYTE(v2) = v2 + 1;
          mapTerrainType_CC1E0_CC1D0[v7] = 1;
          v8 = v2;
          ++HIBYTE(v2);
          mapTerrainType_CC1E0_CC1D0[v8] = 1;
          LOBYTE(v2) = v2 + 1;
          --v4;
        }
        while ( v4 );
      }
      LOBYTE(v2) = v2 - v30;
      ++HIBYTE(v2);
      --v3;
    }
    while ( v3 );
  }
  LOBYTE(a1) = a1 - 1;
  LOBYTE(v9) = v30 + 1;
  v31 = v30 + 1;
  --HIBYTE(a1);
  v10 = a1;
  v11 = v27 == -1;
  v28 = v27 + 1;
  v29 = v28;
  if ( !v11 )
  {
    do
    {
      LOBYTE(v9) = v31;
      for ( i = v31; i; --i )
      {
        v9 = v10;
        if ( mapTerrainType_CC1E0_CC1D0[v10] == 1 )
        {
          LOBYTE(v10) = v10 + 1;
          v12 = v10;
          ++HIBYTE(v10);
          v13 = 49 * (mapAngle_FC1E0_FC1D0[v12] & 7) + 343 * (mapAngle_FC1E0_FC1D0[v9] & 7);
          v14 = v10;
          LOBYTE(v10) = v10 - 1;
          v15 = 7 * (mapAngle_FC1E0_FC1D0[v14] & 7) + v13;
          v16 = v10;
          --HIBYTE(v10);
          v17 = 2 * ((mapAngle_FC1E0_FC1D0[v16] & 7) + v15);
          LOBYTE(v15) = byte_B5D40x[v17/2][0];
          mapTerrainType_CC1E0_CC1D0[v10] = v15;
          if ( (unsigned __int8)v15 >= 8u )
          {
            LOBYTE(v9) = byte_B5D40x[v17 / 2][1] + (mapAngle_FC1E0_FC1D0[v10] & 0x87);
          }
          else
          {
            v26 = mapAngle_FC1E0_FC1D0[v10] & 0x87;
            pseudoRand_12C1E0_12C1D0 = 9377 * pseudoRand_12C1E0_12C1D0 + 9439;
            LOBYTE(v9) = v26 + 16 * ((unsigned __int16)pseudoRand_12C1E0_12C1D0 % 7u);
          }
          mapAngle_FC1E0_FC1D0[v10] = v9;
        }
        LOBYTE(v10) = v10 + 1;
      }
      LOBYTE(v10) = v10 - v31;
      ++HIBYTE(v10);
      --v29;
    }
    while ( v29 );
  }
  v18 = v34;
  v32 = v31 + 1;
  v19 = v28 + 1;
  if ( v28 != -1 )
  {
    do
    {
      for ( BYTE1(v9) = v32; BYTE1(v9); --BYTE1(v9) )
      {
        LOBYTE(v18) = v18 + 1;
        ++HIBYTE(v18);
        v20 = v18;
        LOBYTE(v18) = v18 - 2;
        v21 = mapHeightmap_DC1E0_DC1D0[v20];
        HIBYTE(v18) -= 2;
        v22 = v18;
        LOBYTE(v18) = v18 + 1;
        LOBYTE(v9) = mapHeightmap_DC1E0_DC1D0[v22] - v21 + 32;
        ++HIBYTE(v18);
        if ( (char)v9 >= 28 )
        {
          if ( (char)v9 > 40 )
            LOBYTE(v9) = (v9 & 7) + 40;
        }
        else
        {
          LOBYTE(v9) = (v9 & 3) + 28;
        }
        v23 = v18;
        LOBYTE(v18) = v18 + 1;
        v24 = mapAngle_FC1E0_FC1D0[v23] & 0xF7;
        mapShading_EC1E0_EC1D0[v23] = v9;
        mapAngle_FC1E0_FC1D0[v23] = v24;
      }
      LOBYTE(v18) = v18 - v32;
      ++HIBYTE(v18);
      --v19;
    }
    while ( v19 );
  }
  return v9;
}
// 12C1E0: using guessed type __int16 pseudoRand_12C1E0_12C1D0;

//----- (00034070) --------------------------------------------------------
unsigned __int16 sub_34070()//205070_
{
  unsigned __int16 result; // ax

  result = str_AE408_AE3F8->var_u16_17;
  if ( result >= 0x1Cu )
  {
    if ( result > 0x1Cu && (result < 0x21u || result > 0x21u && result != 39) )
      return result;
LABEL_10:
    result = dword_AE408_AE3F8();
    ++str_AE408_AE3F8->var_u16_17;
    return result;
  }
  if ( result >= 8u && (result <= 8u || result == 17) )
    goto LABEL_10;
  return result;
}
// AE408: using guessed type int dword_AE408_AE3F8();

/*
void test_malloc() {
    void* test = malloc(4096);
    if (!test)
    {
        printf("malloc Failed\n");
    }
    printf("malloc OK\n");
    free(test);
};*/

void TopProcedure_340B0_34470(int argc, const char** argv)//2050B0_205470
{
  int someVar;
  uint16_t pseudoRand = 0;

  if ( ProcessCommandLine_34DD0_35190(argc, (char**)argv) == -1 )
    return;
  sub_34B40_34F00();
  if ( (str_AE408_AE3F8->var_u8_0 & 8) != 0 )
  {
    nullsub_2();
  }
  else
  {
    str_AE408_AE3F8->var_u8_23 = 0;
    sub_3F1D0_3F510();
    sub_58F90_594A0();
    sub_41230_41570();
    sub_44730_44A70();
    if ( (str_AE408_AE3F8->var_u8_1 & 1) != 0 )
    {
      byte_939CD = 0;
      byte_939E5 = 0;
      byte_939CC = 0;
      byte_939E4 = 0;
      sub_40440_40780(&pathStrArray[PSdataftextdat]);
      sub_44700_44A40((char*)begTextDat_AE41C_AE40C_26C41C_26C40C, dword_AE238_AE228, 80);
    }
    else
    {
      sub_4A980_4ACC0();
    }
    str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 = 0;
    while ( 1 )
    {
      if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327)
        break;
      FadeInOut_61CC0_621D0(0, 0x10u, 0);
      if ( (str_AE408_AE3F8->var_u8_1 & 1) == 0 )
      {
        sub_31A00_31A40();
        someVar = 1;
        if ( typeResolution_12F02E_12F01E == 8 )
        {
          sub_34C80_35040();
          someVar = 8;
        }
        sub_41490_417D0();
        sub_42530_42870(2);
        byte_939E5 = byte_939E4;
        bool_12CA7C_12CA6C = true;
        byte_939CD = byte_939CC;
        bool_96880 = false;
        do
          sub_4AB20_4AE60();
        while ( !bool_96880 );
        if (!IsHiddenWord)
            sub_34070();
        FadeInOut_61CC0_621D0(0, 0x10u, 0);
        sub_5C05C_5C56C(&begPointersTab_AE450_AE440_26C450_26C440[0]);
        if ( !str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 )
          sub_34460_34820();
        sub_34B00_34EC0();//find here 205241
        sub_61610_61B20(&pathStrArray_258E00[PS25datasnds00dat]);
        sub_61610_61B20(&pathStrArray_258E00[PS25datamusic00dat]);
        sub_41540_41880();
        if ( !str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 )
        {
          sub_5D070_5D580(0);
          sub_5CEF0_5D400(0);
        }
        if ( (str_AE408_AE3F8->var_u8_0 & 4) == 0 )
        {
          sub_31A00_31A40();
          if (someVar == 8 )
            sub_34C80_35040();
          sub_31A60_31AA0();
        }
        sub_42530_42870(3);
      }
      if ( !str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 )
      {
        pseudoRand = str_AE408_AE3F8->var_u16_17;
        sub_407A0_40AE0();
        if ( typeResolution_12F02E_12F01E == 1 && !blurBuffer_AE404_AE3F4 )
          blurBuffer_AE404_AE3F4 = (uint8*)malloc_42540_42880(64000);
      }
      while ( 1 )
      {
        if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327)
          break;
        if ( byte_939CC && byte_939CD && word_939D6 )
        {
          pseudoRand = 9377 * pseudoRand + 9439;
          str_AE400_AE3F0->var_u32_576.a32 = pseudoRand % 3u + 1;
          sub_5D290_5D7A0(str_AE400_AE3F0->var_u32_576.a16[0]);
        }
        sub_59720_59C30();
        //205367
                //debug
#ifdef debug1
        //add_compare(0x205367, true);
#endif debug1
        //debug
        GameLoop_34610_349D0();
        sub_5D010_5D520();
        sub_20E60_20E60();
        FadeInOut_61CC0_621D0(0, 0x10u, 0);
        if ( (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 & 6) != 4 )
        {
          if ( (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 & 2) != 0 )
          {
              str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 = 2;
            sub_448E0_44C20();
            str_AE408_AE3F8->var_u16_17++;
          }
          else
          {
              str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 = 8;
          }
          break;
        }
        sub_408D0_40C10();
        str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 = 4;
      }
      FadeInOut_61CC0_621D0(0, 0x10u, 0);
    }
    sub_358A0_35C60();
  }
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_34C60_35020();
  sub_433C0_43700();
}

//----- (00034460) --------------------------------------------------------
int sub_34460_34820()//205460_
{
  int result; // eax

  sub_3EEA0_3F1E0((char*)"data/smatitle.dat", (uint8_t*)begWscreen_2ECFF4_2ECFE4);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sub_3EEA0_3F1E0((char*)"data/smatitle.pal", (uint8_t*)begPalDat_AE428_AE418_26C428_26C418);
  FadeInOut_61CC0_621D0(begPalDat_AE428_AE418_26C428_26C418, 0x20u, 0);
  result = dword_AE400_AE3F0();
  *(_DWORD *)(dword_AE400_AE3F0() + 581) = 1;
  *(_DWORD *)(result + 585) = 0;
  *(_DWORD *)(result + 589) = 0;
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE428: using guessed type int begPalDat_AE428_AE418_26C428_26C418;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (000344F0) --------------------------------------------------------
void sub_344F0()
{
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  str_AE400_AE3F0->var_u32_581 = 0;
  sub_3EEA0_3F1E0((char*)"data/pal0-0.dat", (uint8*)begPalDat_AE428_AE418_26C428_26C418);
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE428: using guessed type int begPalDat_AE428_AE418_26C428_26C418;

int counter_34530 = 0;
//SYNCHRONIZED WITH REMC1
void DrawAndEventsInGame_34530_348F0()//205530_
{
	//debug
#ifdef debug1
		//add_compare(0x205530, true);
#endif debug1
		//debug
	if (!str_AE400_AE3F0->set.mod3D_8603)
		sub_34690_34A50();
	if ((str_AE408_AE3F8->var_u8_2 & 1) == 0)
		sub_590D0_595E0();
	if ((str_AE408_AE3F8->var_u8_0 & 4) == 0)
		sub_17C20();
	sub_3C9D0_3CD10();
	if ((str_AE408_AE3F8->var_u8_2 & 1) == 0)
		sub_415C0_41900();
	switch (str_AE408_AE3F8->gameSpeed_150)
	{
	case 1:
	{
		for (int i = 0; i < 4; i++)
			sub_41780_41AC0();
		break;
	}
	case 2:
	{
		for (int j = 0; j < 16; j++)
			sub_41780_41AC0();
		break;
	}
	default:
	{
		sub_41780_41AC0();
	}
	}
	//2055C1
			//debug
#ifdef debug1
		//add_compare(0x2055C1, true);
#endif debug1
		//debug
	sub_55100_55630();
	//2055C6
			//debug
#ifdef debug1
		//add_compare(0x2055C6, true);
#endif debug1
		//debug
	DrawGameFrame_20FB0();
	//2055DE
		//debug
#ifdef debug1
	if (counter_34530 == 0x1)
	{
		counter_34530++;
		counter_34530--;
	}
	add_compare(0x2055DE, true, true);
	counter_34530++;
#endif debug1
	//debug
	str_AE408_AE3F8->var_u32_153 = dword_AC5D4_AC5C4 - str_AE408_AE3F8->var_u32_153;
	sub_5A560_5AA70();
	//2055F4
	    //debug
#ifdef debug1
		//add_compare(0x2055F4, true, true);
#endif debug1
		//debug
	str_AE408_AE3F8->var_u32_153 = dword_AC5D4_AC5C4;
	sub_30B30_30B70();
}

//----- (00034610) --------------------------------------------------------
void GameLoop_34610_349D0()//205610_
{
  //int v3; // ebx
  //int result; // eax
#ifdef MODIFY_SETTINGS
    //modset_used_precount = 20;
    /* // for load/save
    modset_used_count = 1;
    modset_key = 0x26;//load
    //modset_key = 0x1f;//save
    modset_key_alt = true;
    */
    
    //for 3D
    modset_used_count = 2;
    modset_key = 0x44;

    //byte_90754 = 1;// str_AE400_AE3F0->mod3D_8603 = 1;

    //clean scr
    /*
    for (int i = 0; i < 320 * 200; i++)
        begWscreen_2ECFF4_2ECFE4[i] = 0;
        */
#endif //MODIFY_SETTINGS

  //v3 = dword_AE400_AE3F0();
    str_AE408_AE3F8->var_u8_23 = 0;
    str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 = 0;
  while ( 1 )
  {
    //result = 2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0();
    if (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 || (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 & 8) != 0 )
      break;
    DrawAndEventsInGame_34530_348F0();
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00034690) --------------------------------------------------------
void sub_34690_34A50()
{
  //int v0; // ebx
  //__int16 v1; // ax
  int i; // eax
  int v3; // edx
  int j; // eax
  int v5; // edx
  int k; // eax
  int v7; // edx
  int m; // eax
  int n; // eax
  int ii; // ebx
  char v11; // al

  //v0 = dword_AE408_AE3F8();
  //LOBYTE(v1) = str_AE408_AE3F8->var_u8_23;
  if (str_AE408_AE3F8->var_u8_23 < 2u )
  {
    sub_344F0();
    //LOBYTE(v1) = dword_AE408_AE3F8();
    str_AE408_AE3F8->var_u8_23++;
  }
  else if (str_AE408_AE3F8->var_u8_23 <= 2u )
  {
    //LOBYTE(v1) = v1 + 1;
    str_AE408_AE3F8->var_u8_152 = 1;
    str_AE408_AE3F8->var_u8_23++;
  }
  else if (str_AE408_AE3F8->var_u8_23 == 3 )
  {
    if ( str_AE400_AE3F0->set.mod3D_8603 )
      sub_61EC8();
    //LOBYTE(v1) = *(_BYTE *)(dword_AE408_AE3F8() + 152);
    switch (str_AE408_AE3F8->var_u8_152)
    {
      case 1:
        FadeInOut_61CC0_621D0(begPalDat_AE428_AE418_26C428_26C418, 4u, 1);
        //v1 = word_12F690_12F680;
        if (word_12F690_12F680 == 4 )
        {
          //LOBYTE(v1) = dword_AE408_AE3F8();
          str_AE408_AE3F8->var_u8_152 = 0;
        }
        return;// v1;
      case 2:
        for ( i = 3; i != 768; byte_B700F[i] = *(_BYTE *)(v3 + i - 1) )
        {
          v3 = (int)begPalDat_AE428_AE418_26C428_26C418;
          i += 3;
          dword_B7310 = 255;
          byte_B700D[i] = 63;
          byte_B700E[i] = *(_BYTE *)(v3 + i - 2);
        }
        goto LABEL_61;
      case 3:
        for ( j = 3; j != 768; byte_B700F[j] = dword_B7310 )
        {
          dword_B7310 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + j) + 48;
          if ( dword_B7310 < 0 )
            dword_B7310 = 0;
          if ( dword_B7310 > 63 )
            dword_B7310 = 63;
          byte_B7010[j] = dword_B7310;
          v5 = (int)begPalDat_AE428_AE418_26C428_26C418;
          byte_B7010[j+1] = *(_BYTE *)(begPalDat_AE428_AE418_26C428_26C418 + j + 1);
          dword_B7310 = *(unsigned __int8 *)(v5 + j + 2) + 64;
          if ( dword_B7310 < 0 )
            dword_B7310 = 0;
          if ( dword_B7310 > 63 )
            dword_B7310 = 63;
          j += 3;
        }
        goto LABEL_61;
      case 4:
        for ( k = 3; k != 768; byte_B700F[k] = 63 )
        {
          v7 = (int)begPalDat_AE428_AE418_26C428_26C418;
          k += 3;
          dword_B7310 = 255;
          byte_B700D[k] = *(_BYTE *)(begPalDat_AE428_AE418_26C428_26C418 + k - 3);
          byte_B700E[k] = *(_BYTE *)(v7 + k - 2);
        }
        goto LABEL_61;
      case 5:
        for ( m = 3; m != 768; byte_B700F[m] = dword_B7310 )
        {
          dword_B7310 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + m + 2) - 32;
          if ( dword_B7310 < 0 )
            dword_B7310 = 0;
          if ( dword_B7310 > 63 )
            dword_B7310 = 63;
          byte_B7010[m] = dword_B7310;
          dword_B7310 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + m + 1) - 32;
          if ( dword_B7310 < 0 )
            dword_B7310 = 0;
          if ( dword_B7310 > 63 )
            dword_B7310 = 63;
          byte_B7010[m+1] = dword_B7310;
          dword_B7310 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + m + 2) - 32;
          if ( dword_B7310 < 0 )
            dword_B7310 = 0;
          if ( dword_B7310 > 63 )
            dword_B7310 = 63;
          m += 3;
        }
        goto LABEL_61;
      case 6:
        for ( n = 3; n != 768; byte_B700F[n] = dword_B7310 )
        {
          dword_B7310 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + n + 2) + 48;
          if ( dword_B7310 < 0 )
            dword_B7310 = 0;
          if ( dword_B7310 > 63 )
            dword_B7310 = 63;
          byte_B7010[n] = dword_B7310;
          dword_B7310 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + n + 1) + 32;
          if ( dword_B7310 < 0 )
            dword_B7310 = 0;
          if ( dword_B7310 > 63 )
            dword_B7310 = 63;
          byte_B7010[n+1] = dword_B7310;
          dword_B7310 = *(unsigned __int8 *)(begPalDat_AE428_AE418_26C428_26C418 + n + 2) + 32;
          if ( dword_B7310 < 0 )
            dword_B7310 = 0;
          if ( dword_B7310 > 63 )
            dword_B7310 = 63;
          n += 3;
        }
        goto LABEL_61;
      case 7:
        for ( ii = 3; ii != 768; byte_B700F[ii] = v11 )
        {
          dword_B7310 = (*(unsigned __int8 *)(ii + begPalDat_AE428_AE418_26C428_26C418 + 1)
                       + *(unsigned __int8 *)(ii + begPalDat_AE428_AE418_26C428_26C418)
                       + *(unsigned __int8 *)(ii + begPalDat_AE428_AE418_26C428_26C418 + 2))
                      / 3;
          ii += 3;
          v11 = dword_B7310;
          byte_B700D[ii] = dword_B7310;
          byte_B700E[ii] = v11;
        }
LABEL_61:
        sub_61EC8();
        SetPalette_319A0_319E0((TColor*)byte_B7010);
        //LOBYTE(v1) = dword_AE408_AE3F8();
        str_AE408_AE3F8->var_u8_152 = 1;
        break;
      default:
          return;// v1;
    }
  }
  //return v1;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE428: using guessed type int begPalDat_AE428_AE418_26C428_26C418;
// B7310: using guessed type int dword_B7310;

void sub_34B00_34EC0()//205b00_
{
  sub_40440_40780(&pathStrArray[PSSearchD]);
  if ( typeResolution_12F02E_12F01E == 1 )
    sub_40440_40780(&pathStrArray[PSWScreen]);
  else
    sub_40440_40780(&pathStrArray[PSWScreen2]);
  sub_59500_59A10(off_99974);
  sub_11540();
}

void sub_34B40_34F00()//205B40_205F00
{
	DrawStartGameTexts_5ACA0_5B1B0();
	DrawTextLine_5AD10_5B220((char*)"Load all data files");
	sub_34B00_34EC0();
	DrawTextLine_5AD10_5B220((char*)"Initialise Colour Lookup");
    int index1 = 0;
    uint8_t indexB1 = 3;
	for (int i = 0; i < 16; i++)
	{
		int index2 = index1;
		uint8_t indexB2 = 3;
		for (int j = 0; j < 16; j++)
		{
			int index3 = index2;
			uint8_t indexB3 = 3;
			for (int k = 0; k < 16; k++)
			{
				index3++;
				byte_AD167_AD157[index3] = sub_5CC70_5D180(begPalDat_AE428_AE418_26C428_26C418, indexB1, indexB2, indexB3);
				indexB3 += 4;
			}
			index2 += 16;
			indexB2 += 4;
		}
		index1 += 256;
		indexB1 += 4;
	}
	str_AE408_AE3F8->var_u8_23 = 1;
	sub_5A3C0_5A8D0(0);
}

//----- (00034C60) --------------------------------------------------------
void sub_34C60_35020()//205C60
{
    sub_58F00_59410();
    sub_44840_44B80();
    sub_61610_61B20(&pathStrArray[PSSearchD]);
    DrawStartGameTexts_5ACA0_5B1B0();
}

//----- (00034C80) --------------------------------------------------------
void sub_34C80_35040()//205C80_
{
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_315C0_31600();
  free_426E0_42A20((void*)blurBuffer_AE404_AE3F4);
  blurBuffer_AE404_AE3F4 = 0;
  sub_3F370_3F6B0();
  sub_59560_59A70(off_99974);
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    sub_61610_61B20(&pathStrArray[PSWScreen]);
    typeResolution_12F02E_12F01E = 8;
    sub_40440_40780(&pathStrArray[PSWScreen2]);
    blurBuffer_AE404_AE3F4 = (uint8*)malloc_42540_42880(307200);
  }
  else
  {
    sub_61610_61B20(&pathStrArray[PSWScreen2]);//735a98 clean begWscreen_2ECFF4_2ECFE4
    typeResolution_12F02E_12F01E = 1;
    sub_40440_40780(&pathStrArray[PSWScreen]);//735a98 set begWscreen_2ECFF4_2ECFE4
    blurBuffer_AE404_AE3F4 = (uint8*)malloc_42540_42880(64000);
  }
  sub_59500_59A10(off_99974);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_61B90_620A0((TColor*)begWscreen_2ECFF4_2ECFE4);
  else
    sub_61C30_62140((TColor*)begWscreen_2ECFF4_2ECFE4);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  sub_5C214_5C724();
  sub_5C05C_5C56C(&begPointersTab_AE450_AE440_26C450_26C440[0]);
  str_AE408_AE3F8->var_u8_23 = 0;
}
// 99974: using guessed type int *off_99974;
// AE404: using guessed type int blurBuffer_AE404_AE3F4;
// AE408: using guessed type int dword_AE408_AE3F8();
// AE450: using guessed type int begPointersTab_AE450_AE440_26C450_26C440;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

int StrToInt(char* a1)//232f36_
{    
    while ((IsTable[(uint8_t)(*a1 + 1)] & 2) != 0)
        a1++;
    char specChar = *a1;
    if (specChar == '-' || specChar == '/')
        a1++;
    int result = 0;
    while ((IsTable[(uint8_t)(*a1 + 1)] & 0x20) != 0)
    {
        result = (uint8_t)*a1++ - '0' + 10 * result;
    }
    if (specChar == '/')
        return -result;
    return result;
}

int ProcessCommandLine_34DD0_35190(int argc, char** argv)//205DD0_
{
	char textBuffer4[32];
	char textBuffer1[32];
	char textBuffer2[32];
	char textBuffer3[32];
	char result2 = 0;
	char firstChar = 0;
	char result = 0;
	bool varHelp = false;
	bool varCustom = false;
	bool varNetwork = false;
	bool neverRun2 = false;
	int varSome = 1;
	bool varSetsound = false;
	int varDetail = 1;
	int varCheat = 0;
	int varLevel = 0;
	int varMovie = 0;
	int varRoll = 0;
	bool varTime = false;
	int varPassword = 0;
	bool varVfx = false;
	int varDemo = 0;
	origDebug_AE45A_AE44A = 0;
	int varPlayers = 2;
	bool varDigijoy = false;
	bool varAnojoy = false;
	strcpy(textBuffer2, "PLAYER");
	strcpy(textBuffer3, "CARPET");
	bool neverRun = 0;
	for (int i = 1; i < argc; i++)
	{
		firstChar = argv[i][0];
		if (firstChar != '-' && firstChar != '/')
		{
			printf("ERROR : Incorrect command : %d\n", i);
			result = -1;
			break;
		}
		strcpy(textBuffer1, &argv[i][1]);
		textBuffer4[0] = 0;
		if (i + 1 < argc)
		{
			strcpy(textBuffer4, &argv[i + 1][0]);
		}
		if (!stricmp("digijoy", textBuffer1))
		{
			varDigijoy = true;
		}
		else if (!stricmp("anojoy", textBuffer1))
		{
			varAnojoy = true;
		}
		else if (!stricmp("anojoy4", textBuffer1))
		{
			varAnojoy = true;
		}
		else if (!stricmp("vfx", textBuffer1))
		{
			varVfx = true;
		}
		else if (!stricmp("help", textBuffer1))
		{
			varHelp = true;
		}
		else if (!stricmp("debug", textBuffer1))
		{
			origDebug_AE45A_AE44A = 1;
		}
		else if (!stricmp("network", textBuffer1))
		{
			varNetwork = true;
		}
		else if (!stricmp("custom", textBuffer1))
		{
			varCustom = true;
		}
		else if (!stricmp("setsound", textBuffer1))
		{
			varSetsound = true;
		}
		else if (!stricmp("demo", textBuffer1))
		{
			varDemo = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("detail", textBuffer1))
		{
			varDetail = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("cheat", textBuffer1))
		{
			varCheat = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("name", textBuffer1))
		{
			strcpy(textBuffer2, textBuffer4);
			i++;
		}
		else if (!stricmp("level", textBuffer1))
		{
			varLevel = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("movie", textBuffer1))
		{
			varMovie = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("roll", textBuffer1))
		{
			varRoll = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("time", textBuffer1))
		{
			varTime = true;
		}
		else if (!stricmp("password", textBuffer1))
		{
			varPassword = StrToInt(textBuffer4);
			i++;
		}
		else if (!stricmp("players", textBuffer1))
		{
			varPlayers = StrToInt(textBuffer4);
			i++;
		}
		else
		{
			if (stricmp("session", textBuffer1))
			{
				printf("ERROR : Incorrect command : %d\n", i);
				result2 = -1;
				result = -1;
				break;
			}
			strcpy(textBuffer3, textBuffer4);
			i++;
		}
	}
	if (result != -1)
	{
		if (varNetwork)
		{
			InitNetwork_43270_435B0();
			varNetwork = false;
		}
		if (varVfx)
		{
			if (InitVfx_5AF50_5B460())
			{
				str_AE400_AE3F0->set.var_u8_8606 = 1;
				byte_90B23 |= 8;
				printf("VFX\n");
			}
		}
		if (varDigijoy)
		{
			InitDigijoy_3F7D0_3FB10(textBuffer4);
			if (byte_B7700_B76F0)
				byte_90B23 |= 2u;
		}
		if (varAnojoy)
		{
			InitAnojoy_3F820_sub_3FB60(firstChar, textBuffer4[0], textBuffer4[1], textBuffer4[2], textBuffer4[3]);
			if (byte_B7700_B76F0)
			{
				byte_B7700_B76F0 = 1;
				byte_90B23 |= 1u;
			}
		}
		if (neverRun)
		{
			InitAnojoy_3F820_sub_3FB60(firstChar, textBuffer4[0], textBuffer4[1], textBuffer4[2], textBuffer4[3]);
			if (byte_B7700_B76F0)
			{
				byte_B7700_B76F0 = 1;
				byte_90B23 |= 0x20u;
			}
		}
        		dword_12F080_12F070x = (vesa_str*)malloc_425C0_42900(sizeof(vesa_str));
		str_AE400_AE3F0 = (Type_str_AE400_AE3F0*)malloc_42540_42880(sizeof(Type_str_AE400_AE3F0));
		str_AE408_AE3F8 = (Type_str_AE408_AE3F8*)malloc_42540_42880(sizeof(Type_str_AE408_AE3F8));
		str_AE400_AE3F0->set.var_u8_8621 = 1;
		str_AE400_AE3F0->set.var_u8_8622 = 1;
		str_AE400_AE3F0->set.var_u8_8623 = 1;
		str_AE400_AE3F0->set.var_u8_8624 = 1;
		str_AE400_AE3F0->set.var_u8_8625 = 1;
		str_AE400_AE3F0->set.var_u8_8626 = 1;
		str_AE400_AE3F0->set.var_u8_8627 = 1;
		str_AE400_AE3F0->set.var_u8_8628 = 1;
		str_AE400_AE3F0->set.var_u8_8629 = 1;
		str_AE400_AE3F0->set.var_u8_8630 = 1;
		str_AE400_AE3F0->set.var_u8_8631 = 1;
		sub_19470();
		if (str_AE408_AE3F8->var_u8_8)
		{
			str_AE400_AE3F0->set.reflections_8597 = 1;
			str_AE400_AE3F0->set.skyOn_8599 = 1;
		}
		else
		{
			str_AE400_AE3F0->set.reflections_8597 = 0;
			str_AE400_AE3F0->set.skyOn_8599 = 0;
		}
		str_AE400_AE3F0->set.shadowsOn_8598 = 1;
		str_AE400_AE3F0->set.iconsOn_8602 = 1;
		str_AE400_AE3F0->set.mapOn_8601 = 1;
		str_AE400_AE3F0->set.var_u8_8600 = 40;
		str_AE400_AE3F0->var_u16_10 = varPlayers;
		strcpy(str_AE408_AE3F8->textBuffer_117, textBuffer3);
		str_AE408_AE3F8->var_u8_29[0] = 0;
		if (!varDetail)
		{
			str_AE400_AE3F0->set.reflections_8597 = 0;
			str_AE400_AE3F0->set.skyOn_8599 = 0;
			str_AE400_AE3F0->set.shadowsOn_8598 = 0;
			str_AE400_AE3F0->set.var_u8_8600 = 40;
		}
		if (varDemo)
		{
			switch (varDemo)
			{
			case 1:
				str_AE400_AE3F0->var_0.var_u8_1 |= 2u;
				break;
			case 2:
				str_AE400_AE3F0->var_0.var_u8_1 |= 4u;
				break;
			case 3:
				str_AE400_AE3F0->var_0.var_u8_1 |= 8u;
				break;
			case 4:
				str_AE400_AE3F0->var_0.var_u8_1 |= 0x10u;
				break;
			case 5:
				str_AE400_AE3F0->var_0.var_u8_1 |= 0x20u;
				break;
			default:
				break;
			}
			str_AE400_AE3F0->var_0.var_u8_1 |= 1u;
		}
		if (varTime)
			str_AE408_AE3F8->var_u8_0 |= 0x40u;
		if (varCustom)
			str_AE400_AE3F0->var_0.var_u8_1 |= 1u;
		if (varHelp)
			result = -1;
		if (varNetwork)
		{
			if (str_AE400_AE3F0->var_u16_10 > 1u)
			{
				str_AE400_AE3F0->var_u16_8 = sub_43430_43770(str_AE408_AE3F8->textBuffer_117, str_AE400_AE3F0->var_u16_10);
				if (str_AE400_AE3F0->var_u16_8 >= 0)
					str_AE408_AE3F8->var_u8_0 |= 0x10u;
				else
					str_AE400_AE3F0->var_u16_8 = 0;
			}
			str_AE400_AE3F0->var_0.var_u8_1 |= 1u;
		}
		if (neverRun2)
		{
			varSome = 8;
			varSetsound = false;
			str_AE408_AE3F8->var_u8_0 |= 8;
		}
		str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u32_13347_24 = varCheat;
		//*(_DWORD*)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 13347) = varCheat;
		str_AE408_AE3F8->var_u16_17 = varLevel;
		if (varMovie)
			str_AE408_AE3F8->var_u16_13 = varMovie;
		if (varRoll)
		{
			str_AE408_AE3F8->var_u16_13 = 0;
			str_AE408_AE3F8->var_u16_15 = varRoll;
			str_AE408_AE3F8->var_u8_0 |= 0x120;
		}
		if (origDebug_AE45A_AE44A)
		{
			origDebug_AE45A_AE44A = 0;
			str_AE408_AE3F8->var_u8_0 |= 0x80u;
		}
		str_AE408_AE3F8->var_u32_25 = varPassword;
		if (result != -1)
			typeResolution_12F02E_12F01E = varSome;
	}
	return result;
}

//----- (000356E0) --------------------------------------------------------
int FlvInitSet_356E0_35AA0()
{
  int result; // eax

  word_B7314 = mouse_9AD90.x;
  word_B7316 = mouse_9AD90.y;
  result = (unsigned __int8)lastPressedKey_12EF70_12EF60;
  word_B7318 = (unsigned __int8)lastPressedKey_12EF70_12EF60;
  dword_AE410 = 0;
  return result;
}
// 9AD90: using guessed type __int16 mouse_9AD90.x;
// 9AD92: using guessed type __int16 mouse_9AD90.y;
// AE410: using guessed type int dword_AE410;
// B7314: using guessed type __int16 word_B7314;
// B7316: using guessed type __int16 word_B7316;
// B7318: using guessed type __int16 word_B7318;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;

//----- (00035710) --------------------------------------------------------
int sub_35710()
{
  __int16 v0; // ax

  if ( !dword_AE410 )
  {
    if ( mouse_9AD90.x != word_B7314
      || mouse_9AD90.y != word_B7316
      || mouseLeftButton2_12EFE4_12EFD4
      || mouseRightButton2_12EFE2_12EFD2
      || (HIBYTE(v0) = HIBYTE(word_B7316) ^ HIBYTE(mouse_9AD90.y), LOBYTE(v0) = lastPressedKey_12EF70_12EF60, v0 != word_B7318) )
    {
      word_B7314 = mouse_9AD90.x;
      word_B7316 = mouse_9AD90.y;
      word_B7318 = (unsigned __int8)lastPressedKey_12EF70_12EF60;
      dword_AE410 = 1;
    }
  }
  return dword_AE410;
}
// 9AD90: using guessed type __int16 mouse_9AD90.x;
// 9AD92: using guessed type __int16 mouse_9AD90.y;
// AE410: using guessed type int dword_AE410;
// B7314: using guessed type __int16 word_B7314;
// B7316: using guessed type __int16 word_B7316;
// B7318: using guessed type __int16 word_B7318;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFE2: using guessed type __int16 mouseRightButton2_12EFE2_12EFD2;
// 12EFE4: using guessed type __int16 mouseLeftButton2_12EFE4_12EFD4;

//----- (000357C0) --------------------------------------------------------
void sub_357C0_35B80()
{
  if ( !byte_90AD4 )
  {
    byte_90AD4 = 1;
    if ( (str_AE408_AE3F8->var_u8_0 & 0x48) != 0 )
    {
      DrawTextLine_5AD10_5B220((char*)"Sound Disabled");
      byte_939CD = 0;
      byte_939E5 = 0;
      byte_939CC = 0;
      byte_939E4 = 0;
    }
    else
    {
      DrawTextLine_5AD10_5B220((char*)"Initialise Music");
      sub_3C570();
      DrawTextLine_5AD10_5B220((char*)"Initialise Sound");
      sub_3C800_sub_3CB40();
    }
    if ( byte_939E4 || byte_939CC )
    {
        //fix sub_5D97B(0x78u, (int)sub_357A0, __CS__, (unsigned int)&dword_80010);
      byte_90AD5 = 1;
    }
    else
    {
      sub_5A459_5A969();
    }
    switch (str_AE408_AE3F8->var_u8_151)
    {
      case 0:
        if ( !byte_939E4 )
            byte_90090 = 1;
        break;
      case 1:
      case 2:
      case 3:
        byte_90090 = 1;
        break;
      default:
        return;
    }
  }
}
// 357A0: using guessed type int sub_357A0();
// 80010: using guessed type int dword_80010;
// 90090: using guessed type char byte_90090;
// 90AD4: using guessed type char byte_90AD4;
// 90AD5: using guessed type char byte_90AD5;
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (000358A0) --------------------------------------------------------
void sub_358A0_35C60()
{
    if (!byte_90AD5)
        sub_5A4EA_5A9FA();
    else
    {
        sub_5DC91(dword_80010);
        sub_61F90();
        sub_62020();
    }
}
// 80010: using guessed type int dword_80010;
// 90AD5: using guessed type char byte_90AD5;

//----- (000358D0) --------------------------------------------------------
int sub_358D0(__int16 a1, __int16 a2, __int16 a3)
{
  int result; // eax
  int v4; // ebx
  int v5; // edx

  LOWORD(result) = a2 - a1;
  v4 = (__int16)(a2 - a1);
  v5 = a3 >> 1;
  if ( v4 > v5 )
    return (__int16)(result - a3);
  if ( v4 < -v5 )
    LOWORD(result) = a3 + result;
  return (__int16)result;
}

//----- (00035900) --------------------------------------------------------
int sub_35900(__int16 a1, int a2, char a3, char a4)
{
  unsigned __int16 v4; // ax
  __int16 v5; // bx
  unsigned __int16 v6; // ax
  int result; // eax

  LOBYTE(v4) = a1;
  HIBYTE(v4) = a2;
  LOBYTE(v5) = mapHeightmap_DC1E0_DC1D0[v4];
  LOBYTE(v6) = a3;
  v5 = (unsigned __int8)v5;
  HIBYTE(v6) = a4;
  if ( (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v6] > (int)(unsigned __int8)v5 )
    LOBYTE(v5) = mapHeightmap_DC1E0_DC1D0[v6];
  word_AE454_AE444.x = a1 << 8;
  result = a2 << 8;
  word_AE454_AE444.z = 32 * v5;
  word_AE454_AE444.y = (_WORD)a2 << 8;
  return result;
}
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00035960) --------------------------------------------------------
int sub_35960(__int16 a1, unsigned __int16 a2, __int16 a3, __int16 a4)
{
  __int16 v4; // si
  int result; // eax
  int v6; // edi
  char v7; // al
  int v8; // ebp
  int v9; // ebx
  int v10; // edi
  _BOOL1 i; // zf
  int v12; // eax
  int v13; // eax
  int v14; // edx
  signed int v15; // ebp
  int v16; // ebx
  int v17; // edi
  int v18; // eax
  int v19; // edx
  __int16 v20; // dx
  int v21; // [esp+0h] [ebp-28h]
  int v22; // [esp+10h] [ebp-18h]
  int v23; // [esp+10h] [ebp-18h]
  int v24; // [esp+14h] [ebp-14h]
  int v25; // [esp+14h] [ebp-14h]

  v4 = a1;
  v21 = sub_358D0(a1, a3, 256);
  result = sub_358D0(a2, a4, 256);
  v6 = result;
  if ( v21 || result )
  {
    if ( v21 < 0 )
    {
      v6 = -result;
      v4 = a3;
      v21 = -v21;
      LOBYTE(a3) = a1;
      v7 = a2;
      a2 = a4;
      LOBYTE(a4) = v7;
    }
    if ( (int)abs32(v6) >= v21 )
    {
      v15 = abs32(v6 / 10) + 1;
      v16 = v6 / v15;
      v17 = v6 % v15;
      v25 = v21 / v15;
      v23 = v21 % v15;
      do
      {
        sub_35900(v4, a2, a3, a4);
        v18 = (int)sub_373F0(&word_AE454_AE444, 10, 27);
        if ( v16 >= 0 )
        {
          *(_BYTE *)(v18 + 70) = 28;
          LOWORD(v19) = v17 + v16;
        }
        else
        {
          *(_BYTE *)(v18 + 70) = 27;
          v19 = -v16 - v17;
        }
        *(_WORD *)(v18 + 26) = v19;
        a2 += v16 + v17;
        sub_35900(v4, a2, a3, a4);
        result = (int)sub_373F0(&word_AE454_AE444, 10, 27);
        v17 = 0;
        *(_BYTE *)(result + 70) = 29;
        v20 = v23 + v25;
        LOWORD(v23) = 0;
        v4 += v20;
        *(_WORD *)(result + 26) = v20;
        --v15;
      }
      while ( v15 );
    }
    else
    {
      v8 = v21 / 10 + 1;
      v24 = v21 / v8;
      v22 = v21 % v8;
      v9 = v6 / v8;
      result = v8 * (v6 / v8);
      v10 = v6 % v8;
      for ( i = v8 == 0; !i; i = v8 == 0 )
      {
        sub_35900(v4, a2, a3, a4);
        v12 = (int)sub_373F0(&word_AE454_AE444, 10, 27);
        v4 += v22 + v24;
        *(_WORD *)(v12 + 26) = v22 + v24;
        *(_BYTE *)(v12 + 70) = 29;
        sub_35900(v4, a2, a3, a4);
        v13 = (int)sub_373F0(&word_AE454_AE444, 10, 27);
        if ( v9 >= 0 )
        {
          *(_BYTE *)(v13 + 70) = 28;
          LOWORD(v14) = v10 + v9;
        }
        else
        {
          *(_BYTE *)(v13 + 70) = 27;
          v14 = -v9 - v10;
        }
        *(_WORD *)(v13 + 26) = v14;
        a2 += v9 + v10;
        result = 0;
        v10 = 0;
        LOWORD(v22) = 0;
        --v8;
      }
    }
  }
  return result;
}
// 35B20: conditional instruction was optimized away because ebp.4!=0
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (00035BF0) --------------------------------------------------------
_WORD *sub_35BF0(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  int v4; // ebx
  int v5; // edi
  __int16 v6; // si
  int v7; // eax
  __int16 v8; // bx
  signed int v9; // ecx
  __int16 v10; // di
  _WORD *v11; // eax
  _WORD *result; // eax
  signed int v13; // [esp+0h] [ebp-18h]
  __int16 v14; // [esp+4h] [ebp-14h]
  __int16 v15; // [esp+8h] [ebp-10h]

  v4 = sub_358D0(a1, a3, 256);
  v5 = v4;
  v6 = 0;
  v7 = sub_358D0(a2, a4, 256);
  if ( v4 )
  {
    v6 = -1;
    if ( v4 > 0 )
      v6 = 1;
  }
  v8 = 0;
  if ( v7 )
  {
    v8 = -1;
    if ( v7 > 0 )
      v8 = 1;
  }
  v9 = abs32(v7);
  v13 = abs32(v5);
  v14 = abs32(v9 - v13);
  if ( v13 <= v9 )
  {
    v15 = v8;
    v10 = 0;
  }
  else
  {
    LOWORD(v13) = v9;
    v10 = v6;
    v15 = 0;
  }
  word_AE454_AE444.x = a1 << 8;
  word_AE454_AE444.y = a2 << 8;
  v11 = (_WORD *)sub_373F0(&word_AE454_AE444, 10, 30);
  if ( v11 )
  {
    v11[15] = v6;
    v11[16] = v8;
    v11[13] = v13;
  }
  word_AE454_AE444.x = ((_WORD)v13 * v6 + a1) << 8;
  word_AE454_AE444.y = ((_WORD)v13 * v8 + a2) << 8;
  result = (_WORD *)sub_373F0(&word_AE454_AE444, 10, 30);
  if ( result )
  {
    result[15] = v10;
    result[13] = v14;
    result[16] = v15;
  }
  return result;
}
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;

//----- (00035D30) --------------------------------------------------------
int sub_35D30(unsigned __int16 a1, unsigned __int16 a2, __int16 a3, __int16 a4)
{
  __int16 v4; // bx
  unsigned __int16 v5; // si
  int result; // eax
  __int16 v7[4]; // [esp+0h] [ebp-18h] BYREF
  __int16 v8[8]; // [esp+8h] [ebp-10h] BYREF

  v7[0] = a1 << 8;
  v7[1] = a2 << 8;
  v7[2] = 32 * (unsigned __int8)mapHeightmap_DC1E0_DC1D0[256 * a2 + a1];
  v8[0] = a3 << 8;
  v8[1] = a4 << 8;
  v4 = sub_42150_42490((axis_3d*)(uint16*)v7, (axis_3d*)(uint16*)v8);
  v5 = sub_423D0_42710((axis_3d*)(uint16*)v7, (axis_3d*)(uint16*)v8);
  result = (int)sub_373F0((axis_3d*)v7, 10, 32);
  if ( result )
  {
    *(_WORD *)(result + 30) = v4;
    *(_DWORD *)(result + 12) = (int)v5 >> 8;
  }
  return result;
}

//----- (00035DE0) --------------------------------------------------------
int sub_35DE0(unsigned __int16 a1, unsigned __int16 a2, __int16 a3, __int16 a4)
{
  __int16 v4; // si
  unsigned __int16 v5; // di
  int result; // eax
  int v7; // ebx
  int v8; // ecx
  __int16 v9[4]; // [esp+0h] [ebp-1Ch] BYREF
  __int16 v10[10]; // [esp+8h] [ebp-14h] BYREF

  v9[0] = a1 << 8;
  v9[1] = a2 << 8;
  v9[2] = 16 * (unsigned __int8)mapHeightmap_DC1E0_DC1D0[256 * a2 + a1];
  v10[0] = a3 << 8;
  v10[1] = a4 << 8;
  v4 = sub_42150_42490((axis_3d*)(uint16*)v9, (axis_3d*)(uint16*)v10);
  v5 = sub_423D0_42710((axis_3d*)(uint16*)v9, (axis_3d*)(uint16*)v10);
  result = (int)sub_373F0((axis_3d*)v9, 10, 51);
  v7 = result;
  if ( result )
  {
    v8 = *(__int16 *)(result + 126);
    *(_WORD *)(result + 30) = v4;
    result = v5 / v8;
    *(_DWORD *)(v7 + 12) = result;
  }
  return result;
}

//----- (00035EA0) --------------------------------------------------------
unsigned int sub_35EA0(char a1, char a2, char a3, char a4)
{
  unsigned __int16 v4; // ax
  unsigned __int16 v5; // dx
  unsigned int v6; // eax
  unsigned int v7; // ebx
  unsigned int v8; // ecx
  unsigned int v9; // ecx
  unsigned int v10; // ecx

  LOBYTE(v4) = a1;
  HIBYTE(v4) = a2;
  HIBYTE(v5) = a2;
  LOBYTE(v5) = a4 + a1;
  v6 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v4];
  v7 = v6;
  v8 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  if ( v8 <= v6 )
  {
    if ( v8 < v6 )
      v7 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  }
  else
  {
    v6 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  }
  HIBYTE(v5) = a3 + a2;
  v9 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  if ( v9 <= v6 )
  {
    if ( v9 < v7 )
      v7 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  }
  else
  {
    v6 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  }
  LOBYTE(v5) = a1;
  v10 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  if ( v10 > v6 )
    return v10 - v7;
  if ( v10 < v7 )
    v7 = (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v5];
  return v6 - v7;
}

//----- (00035F30) --------------------------------------------------------
char sub_35F30_362F0(int a1, char a2, char a3, int a4, int a5, unsigned __int8 a6)
{
  int v6; // eax
  int v7; // edi
  unsigned __int16 v8; // bx
  unsigned __int16 v9; // bx
  int v10; // edi
  char result; // al
  char v12; // [esp+0h] [ebp-24h]
  char v13; // [esp+1h] [ebp-23h]
  __int16 v14; // [esp+2h] [ebp-22h]
  unsigned __int16 v15; // [esp+4h] [ebp-20h]
  unsigned __int16 v16; // [esp+4h] [ebp-20h]

  //fix
  v14 = 0;
  //fix

  v12 = a2 - a5;
  v13 = a3 - a4;
  HIWORD(v6) = v14;
  v7 = 2 * a4;
  HIBYTE(v15) = a3 - a4;
  HIBYTE(v8) = a3 - a4;
  LOBYTE(v8) = a2 - a5 - a6;
  LOBYTE(v15) = 2 * a5 + a2 - a5;
  while ( (_WORD)--v7 != 0xFFFF )
  {
    LOWORD(a1) = a6;
    ++a1;
    while ( (_WORD)--a1 != 0xFFFF )
    {
      sub_360C0(v8);
      v6 = sub_360C0(v15);
      LOBYTE(v8) = v8 + 1;
      LOBYTE(v15) = v15 + 1;
    }
    LOBYTE(v8) = a2 - a5 - a6;
    LOBYTE(v15) = 2 * a5 + a2 - a5;
    ++HIBYTE(v8);
    ++HIBYTE(v15);
  }
  LOBYTE(v9) = v12 - a6;
  HIBYTE(v16) = 2 * a4 + v13;
  LOBYTE(v16) = v12 - a6;
  LOWORD(v6) = a6;
  HIBYTE(v9) = v13 - a6;
  v10 = 2 * v6 + 2 * a5;
  result = HIBYTE(v16);
  while ( (_WORD)--v10 != 0xFFFF )
  {
    LOWORD(a1) = a6;
    ++a1;
    while ( (_WORD)--a1 != 0xFFFF )
    {
      sub_360C0(v9);
      sub_360C0(v16);
      ++HIBYTE(v9);
      ++HIBYTE(v16);
    }
    result = 2 * a4 + v13;
    HIBYTE(v16) = result;
    HIBYTE(v9) = v13 - a6;
    LOBYTE(v9) = v9 + 1;
    LOBYTE(v16) = v16 + 1;
  }
  return result;
}
// 35F53: variable 'v14' is possibly undefined

//----- (00036080) --------------------------------------------------------
void sub_36080(unsigned __int8 a1, char a2, int a3, int a4)
{
  unsigned __int16 v5; // bx
  int v6; // esi

  LOBYTE(v5) = a1;
  HIBYTE(v5) = a2;
  while ( (_WORD)--a3 != 0xFFFF )
  {
    v6 = a4;
    while ( (_WORD)--v6 != 0xFFFF )
    {
      sub_360C0(v5);
      LOBYTE(v5) = v5 + 1;
    }
    v5 = __PAIR16__(HIBYTE(v5), a1) + 256;
  }
  JUMPOUT(0x36079);
  //fix sub_35F30_362F0(int a1, char a2, char a3, int a4, int a5, unsigned __int8 a6);
}
// 36094: control flows out of bounds to 36079

//----- (000360C0) --------------------------------------------------------
int sub_360C0(int a1)//2070C0_
{
  int result; // eax
  unsigned int v2; // ecx
  unsigned int v3; // esi
  char v4; // dl
  char v5; // dl
  char v6; // dl
  char v7; // dl
  char v8; // dl
  char v9; // dh
  char v10; // [esp+0h] [ebp-10h]

  result = a1;
  v2 = 0;
  v3 = 0;
  if ( (mapAngle_FC1E0_FC1D0[(unsigned __int16)a1] & 7) != 0 )
  {
    if ( mapHeightmap_DC1E0_DC1D0[(unsigned __int16)a1] )
    {
      v4 = mapTerrainType_CC1E0_CC1D0[(unsigned __int16)a1-257];
      if ( (unsigned __int8)v4 <= 5u || (unsigned __int8)v4 > 0x22u )
      {
        v5 = mapTerrainType_CC1E0_CC1D0[(unsigned __int16)a1 - 256];
        if ( (unsigned __int8)v5 <= 5u || (unsigned __int8)v5 > 0x22u )
        {
          v6 = mapTerrainType_CC1E0_CC1D0[(unsigned __int16)a1-1];
          if ( (unsigned __int8)v6 <= 5u || (unsigned __int8)v6 > 0x22u )
          {
            v7 = mapTerrainType_CC1E0_CC1D0[(unsigned __int16)a1];
            if ( (unsigned __int8)v7 <= 5u || (unsigned __int8)v7 > 0x22u )
            {
              result = a1 - 257;
              v10 = 3;
              while ( --v10 != -1 )
              {
                v8 = 3;
                while ( --v8 != -1 )
                {
                  v9 = mapTerrainType_CC1E0_CC1D0[(unsigned __int16)result];
                  if ( (unsigned __int8)v9 <= 5u || (unsigned __int8)v9 > 0x22u )
                  {
                    ++v3;
                    v2 += (unsigned __int8)mapHeightmap_DC1E0_DC1D0[(unsigned __int16)result];
                  }
                  ++result;
                }
                result += 253;
              }
              if ( v3 )
              {
                result = v2 / v3;
                mapHeightmap_DC1E0_DC1D0[(unsigned __int16)a1] = v2 / v3;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

//----- (000361C0) --------------------------------------------------------
uint16_t sub_361C0(uint8_t a1, uint8_t a2, uint8_t a3, uint8_t a4)
{
    uaxis_2d varA;
    varA._axis_2d.x = a1;
    varA._axis_2d.y = a2;
    uint8_t point1 = mapHeightmap_DC1E0_DC1D0[varA.word];
    varA._axis_2d.x += a4;
    uint8_t point2 = mapHeightmap_DC1E0_DC1D0[varA.word];
    varA._axis_2d.y += a3;
    uint8_t point3 = mapHeightmap_DC1E0_DC1D0[varA.word];
    varA._axis_2d.x -= a4;
    uint8_t point4 = mapHeightmap_DC1E0_DC1D0[varA.word];
    return (point1 + point2 + point3 + point4) >> 2;
}

//----- (000362C0) --------------------------------------------------------
void sub_362C0(Type_AE400_193795* a1, Type_1090* a2)
{
  Type_1090* result; // eax
  unsigned __int16 v3; // di
  Type_1090* v4; // ebx
  unsigned __int16 v5; // si
  unsigned __int16 v6; // cx
  unsigned __int16 v7; // dx
  void *v8; // [esp+4h] [ebp-14h]
  __int16 v9; // [esp+8h] [ebp-10h]

  result = a2;
  v9 = a2->data_0;
  v8 = 0;
  v3 = a2->data_2;
  if ( a2->data_0 == 10 )
  {
    if ( v3 < 0x1Du )
    {
      if ( v3 == 28 )
        v8 = sub_35960;
    }
    else if ( v3 <= 0x1Du )
    {
      v8 = sub_35BF0;
    }
    else if ( v3 >= 0x1Fu )
    {
      if ( v3 <= 0x1Fu )
      {
        v8 = sub_35D30;
      }
      else if ( v3 == 50 )
      {
        v8 = sub_35DE0;
      }
    }
  }
  if ( v8 )
  {
    v4 = a2;
    if ( a2->data_14 )
    {
      result = a1->str_1072;
      do
          v4 = &result[v4->data_14];//(_WORD *)(result + 18 * v4->data_14);
      while ( v4->data_14 );
    }
    do
    {
      if ( v9 == v4->data_0 && v3 == v4->data_2 && (v5 = v4->data_16, v4->data_12 = 0, v5) )
      {
        v6 = v4->data_4;
        v7 = v4->data_6;
        v4 = &a1->str_1072[v5]; //(_WORD *)(a1 + 1072 + 18 * v5);
        /*result = */((int (*)(_DWORD, _DWORD, _DWORD, _DWORD))v8)(
                   v6,
                   v7,
                   v4->data_4,
                   v4->data_6);
      }
      else
      {
        v4 = 0;
      }
    }
    while ( v4 );
  }
}

//----- (00036430) --------------------------------------------------------
void GenerateFeatures_36430(Type_AE400_193795* a1)//207430_
{
  //Type_1090* v1; // ebx
  //int v1x = 0;
  //int v1 = a1->var_u16_1090;
  //if (a1->var_u16_1090 < (Type_1090*)a1->stub_37072)
  {
    //do
    for (int i = 1; i < 2000; i++)
    { 
        //debug
#ifdef debug1
        //add_compare(0x207447, true);
#endif debug1
        //debug
      if (a1->str_1072[i].data_8 == 0xFFFF && a1->str_1072[i].data_0 == 10 )
      {
        sub_36480(a1, &a1->str_1072[i]);
        a1->str_1072[i].data_0 = 0;
      }
      //v1++;
      //v1x++;
    }
    //while (v1x < 1999);
  }
  sub_36620();
}

//----- (00036480) --------------------------------------------------------
void sub_36480(Type_AE400_193795* a1, Type_1090* a2)//207480_
{
  if (a2->data_2 < 0x1Fu )
  {
    if (a2->data_2 < 0x1Cu || a2->data_2 > 0x1Du )
    {
      word_AE454_AE444.x = a2->data_4 << 8;
      word_AE454_AE444.y = a2->data_6 << 8;
      word_AE454_AE444.z = sub_11F50(&word_AE454_AE444);
      if (off_97D12[a2->data_2].adress)
        off_97D12[a2->data_2].adress(&word_AE454_AE444);
      return;
    }
    if ( a2->data_12 )
    {
      sub_362C0(a1, a2);
      return;
    }
    word_AE454_AE444.x = a2->data_4 << 8;
    word_AE454_AE444.y = a2->data_6 << 8;
    word_AE454_AE444.z = sub_11F50(&word_AE454_AE444);
    if (off_97D12[a2->data_2].adress)
        off_97D12[a2->data_2].adress(&word_AE454_AE444);
    return;
  }
  if (a2->data_2 <= 0x1Fu)
  {
      if (a2->data_12)
      {
          sub_362C0(a1, a2);
          return;
      }
      word_AE454_AE444.x = a2->data_4 << 8;
      word_AE454_AE444.y = a2->data_6 << 8;
      word_AE454_AE444.z = sub_11F50(&word_AE454_AE444);
      if (off_97D12[a2->data_2].adress)
          off_97D12[a2->data_2].adress(&word_AE454_AE444);
      return;
  }
  if (a2->data_2 < 0x2Du)
  {
      word_AE454_AE444.x = a2->data_4 << 8;
      word_AE454_AE444.y = a2->data_6 << 8;
      word_AE454_AE444.z = sub_11F50(&word_AE454_AE444);
      if (off_97D12[a2->data_2].adress)
          off_97D12[a2->data_2].adress(&word_AE454_AE444);
      return;
  }
  if (a2->data_2 > 0x2Du )
  {
      if (a2->data_2 != 50)
      {
          word_AE454_AE444.x = a2->data_4 << 8;
          word_AE454_AE444.y = a2->data_6 << 8;
          word_AE454_AE444.z = sub_11F50(&word_AE454_AE444);
          if (off_97D12[a2->data_2].adress)
              off_97D12[a2->data_2].adress(&word_AE454_AE444);
          return;
      }
    if (a2->data_12)
    {
        sub_362C0(a1, a2);
        return;
    }
    word_AE454_AE444.x = a2->data_4 << 8;
    word_AE454_AE444.y = a2->data_6 << 8;
    word_AE454_AE444.z = sub_11F50(&word_AE454_AE444);
    if (off_97D12[a2->data_2].adress)
        off_97D12[a2->data_2].adress(&word_AE454_AE444);
    return;
  }
  word_AE454_AE444.x = a2->data_4 << 8;
  word_AE454_AE444.y = a2->data_6 << 8;
  word_AE454_AE444.z = sub_11F50(&word_AE454_AE444);
  if (off_97D12[a2->data_2].adress)
  {
    Type_AE400_29795* event = off_97D12[a2->data_2].adress(&word_AE454_AE444);
    if (event)
      sub_36DF0(event, a2->data_14 + 16);
  }
}
// 97D12: using guessed type int (*off_97D12)(int);
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (000365C0) --------------------------------------------------------
_WORD *sub_365C0(int a1)
{
  _WORD *result; // eax
  unsigned __int16 v2; // dx

  result = (_WORD *)(a1 + 1090);
  if ( a1 + 1090 < (unsigned int)(a1 + 37072) )
  {
    do
    {
      if ( result[4] != 0xFFFF || *result != 10 )
        goto LABEL_11;
      v2 = result[1];
      if ( v2 < 0x1Fu )
      {
        if ( v2 < 0x1Cu || v2 > 0x1Du )
          goto LABEL_11;
      }
      else if ( v2 > 0x1Fu && v2 != 50 )
      {
        goto LABEL_11;
      }
      result[6] = 1;
LABEL_11:
      result += 9;
    }
    while ( (unsigned int)result < a1 + 37072 );
  }
  return result;
}

int counter_sub_36620 = 0;
void sub_36620()//207620_
{
    bool runAgain;
    void (*locFunction)(Type_AE400_29795*);
    str_AE400_AE3F0->rand_4 = 9377 * str_AE400_AE3F0->rand_4 + 9439;
    do
    {
        runAgain = false;
        for (int i = 1; i < 1000; i++)
        {
    //2076e4
    //debug
            if (counter_sub_36620 == 0xb09)
                //if (counter_sub_36620 == 0x3ed)
                {
                    counter_sub_36620++;
                    counter_sub_36620--;
                }
                counter_sub_36620++;
    #ifdef debug1
                //add_compare(0x207653, true);
    #endif debug1
    //debug
                if (str_AE400_AE3F0->str_29795[i].var_u8_29859_64)
                {
                    if (str_AE400_AE3F0->str_29795[i].var_u8_29859_64 != 10)
                    {
                        sub_41E80(&str_AE400_AE3F0->str_29795[i]);
                        //goto LABEL_20;
                    }
                    else
                    if (str_AE400_AE3F0->str_29795[i].var_u8_29860_65 < 0x1Bu)
                    {
                        if (str_AE400_AE3F0->str_29795[i].var_u8_29860_65 >= 9u && str_AE400_AE3F0->str_29795[i].var_u8_29860_65 <= 0xBu)
                        {
                        //LABEL_16:
                            runAgain = true;
                            locFunction = dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data6;
                            if (locFunction && dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data10)
                                locFunction(&str_AE400_AE3F0->str_29795[i]);
                            //goto LABEL_20;
                        }
                        else
                            sub_41E80(&str_AE400_AE3F0->str_29795[i]);
                        //goto LABEL_20;
                    }
                    else if (str_AE400_AE3F0->str_29795[i].var_u8_29860_65 <= 0x20u)
                    {
                        runAgain = true;
                        locFunction = dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data6;
                        if (locFunction && dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data10)
                            locFunction(&str_AE400_AE3F0->str_29795[i]);
                        //goto LABEL_20;
                    }
                    else if (str_AE400_AE3F0->str_29795[i].var_u8_29860_65 < 0x2Du)
                    {
                        sub_41E80(&str_AE400_AE3F0->str_29795[i]);
                        //goto LABEL_20;
                    }
                    else if (str_AE400_AE3F0->str_29795[i].var_u8_29860_65 > 0x2Du)
                    {
                        if (str_AE400_AE3F0->str_29795[i].var_u8_29860_65 >= 0x32u && str_AE400_AE3F0->str_29795[i].var_u8_29860_65 <= 0x33u)
                        {
                            runAgain = true;
                            locFunction = dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data6;
                            if (locFunction && dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data10)
                                locFunction(&str_AE400_AE3F0->str_29795[i]);
                            //goto LABEL_20;
                        }
                        else
                    //LABEL_19:
                        sub_41E80(&str_AE400_AE3F0->str_29795[i]);
                        //goto LABEL_20;
                    }
                    else if (str_AE400_AE3F0->str_29795[i].var_u8_29865_70 == 51)
                    {
                        runAgain = true;
                        locFunction = dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data6;
                        if (locFunction && dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data10)
                            locFunction(&str_AE400_AE3F0->str_29795[i]);
                        //goto LABEL_20;
                    }
                //LABEL_20:
                    if ((str_AE400_AE3F0->str_29795[i].var_29811_16.byte[1] & 4) != 0)
                        sub_41E90_421D0(&str_AE400_AE3F0->str_29795[i]);
                }
        }
    } while (runAgain);
}

void sub_36620_new()//207620_
{
	bool runAgain;
	//_WORD v2w; // eax
    void (*locFunction)(Type_AE400_29795*);
	str_AE400_AE3F0->rand_4 = 9377 * str_AE400_AE3F0->rand_4 + 9439;
	do
	{
		runAgain = false;
		for (int i = 1; i < 1000; i++)
		{
            //2076e4
            //debug
            if (i == 8)
            {
                i++;
                i--;
            }
            #ifdef debug1
            add_compare(0x2076e9, true);
            #endif debug1
            //debug
			if (str_AE400_AE3F0->str_29795[i].var_u8_29859_64)
			{
				if (str_AE400_AE3F0->str_29795[i].var_u8_29859_64 != 10)
				{
					sub_41E80(&str_AE400_AE3F0->str_29795[i]);
					if ((str_AE400_AE3F0->str_29795[i].var_29811_16.byte[1] & 4) != 0)
						sub_41E90_421D0(&str_AE400_AE3F0->str_29795[i]);
				}
				if (str_AE400_AE3F0->str_29795[i].var_u8_29860_65 < 0x1Bu)
				{
					if (str_AE400_AE3F0->str_29795[i].var_u8_29860_65 >= 9u && str_AE400_AE3F0->str_29795[i].var_u8_29860_65 <= 0xBu)
					{
						runAgain = true;
                        locFunction = dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data6;
						if (locFunction && dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data10)
							locFunction(&str_AE400_AE3F0->str_29795[i]);
						if ((str_AE400_AE3F0->str_29795[i].var_29811_16.byte[1] & 4) != 0)
							sub_41E90_421D0(&str_AE400_AE3F0->str_29795[i]);
					}
					sub_41E80(&str_AE400_AE3F0->str_29795[i]);
					if ((str_AE400_AE3F0->str_29795[i].var_29811_16.byte[1] & 4) != 0)
						sub_41E90_421D0(&str_AE400_AE3F0->str_29795[i]);
				}
				if (str_AE400_AE3F0->str_29795[i].var_u8_29860_65 <= 0x20u)
				{
					runAgain = true;
                    locFunction = dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data6;// *(int (**)(_BYTE*, _DWORD))(v2 + 6);
					if (locFunction && dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data10)
						locFunction(&str_AE400_AE3F0->str_29795[i]);
					if ((str_AE400_AE3F0->str_29795[i].var_29811_16.byte[1] & 4) != 0)
						sub_41E90_421D0(&str_AE400_AE3F0->str_29795[i]);
				}
				if (str_AE400_AE3F0->str_29795[i].var_u8_29860_65 < 0x2Du)
				{
					sub_41E80(&str_AE400_AE3F0->str_29795[i]);
					if ((str_AE400_AE3F0->str_29795[i].var_29811_16.byte[1] & 4) != 0)
						sub_41E90_421D0(&str_AE400_AE3F0->str_29795[i]);
				}
				if (str_AE400_AE3F0->str_29795[i].var_u8_29860_65 > 0x2Du)
				{
					if (str_AE400_AE3F0->str_29795[i].var_u8_29860_65 >= 0x32u && str_AE400_AE3F0->str_29795[i].var_u8_29860_65 <= 0x33u)
					{
						runAgain = true;
                        locFunction = dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data6;// *(int (**)(_BYTE*, _DWORD))(v2 + 6);
						if (locFunction && dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data10)
							locFunction(&str_AE400_AE3F0->str_29795[i]);
						if ((str_AE400_AE3F0->str_29795[i].var_29811_16.byte[1] & 4) != 0)
							sub_41E90_421D0(&str_AE400_AE3F0->str_29795[i]);
					}
					sub_41E80(&str_AE400_AE3F0->str_29795[i]);
					if ((str_AE400_AE3F0->str_29795[i].var_29811_16.byte[1] & 4) != 0)
						sub_41E90_421D0(&str_AE400_AE3F0->str_29795[i]);
				}
				if (str_AE400_AE3F0->str_29795[i].var_u8_29865_70 == 51)
				{
					runAgain = true;
                    locFunction = dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data6;// *(int (**)(_BYTE*, _DWORD))(v2 + 6);
					if (locFunction && dword_96902[str_AE400_AE3F0->str_29795[i].var_u8_29859_64].str_0[str_AE400_AE3F0->str_29795[i].var_u8_29865_70].data10)
						locFunction(&str_AE400_AE3F0->str_29795[i]);
					if ((str_AE400_AE3F0->str_29795[i].var_29811_16.byte[1] & 4) != 0)
						sub_41E90_421D0(&str_AE400_AE3F0->str_29795[i]);
				}
				if ((str_AE400_AE3F0->str_29795[i].var_29811_16.byte[1] & 4) != 0)
					sub_41E90_421D0(&str_AE400_AE3F0->str_29795[i]);
			}
		}
	} while (runAgain);
}

//SYNCHRONIZED WITH REMC1
Type_sub168* sub_36700_36AC0(int a1, unsigned __int16 a2, Type_168* a3x)//207700_
{
	//unsigned __int16 v3; // bx
	int v5; // edx
	Type_sub168* v6; // esi
	Type_sub168_3* v7; // edx
	Type_sub168* v8; // edi
	uint8* v9; // eax
	Type_sub168_2* v10; // eax
	Type_sub168_3* v11; // eax

	if (a3x)
	{
		v5 = a1 - (sizeof(Type_sub168_3) * a2 + sizeof(Type_sub168_2) * a2 + sizeof(Type_sub168));
		if (a1 == (sizeof(Type_sub168_3) * a2 + sizeof(Type_sub168_2) * a2 + sizeof(Type_sub168)))
		{
			return 0;
		}
		else
		{
			a3x->sub_0.var_20 = 0;
			a3x->sub_0.var_24 = 2;
			a3x->sub_0.var_0 = v5;
			a3x->sub_0.var_4x = v5;
			v6 = &a3x->sub_0;
			a3x->sub_0.var_22 = a2;
			//a3x[0]->var_8 = a3 + 26;
			a3x->sub_0.var_8 = a3x->sub_26;
			//v7 = 14 * a2 + a3 + 26;
			v7 = a3x->sub_7432;
			a3x->sub_0.var_12 = v7;
			a3x->sub_0.var_16 = a3x->last;//4 * a2 + v7;
		}
	}
	else
	{
		v8 = (Type_sub168*)malloc_42540_42880(sizeof(Type_sub168));
		v6 = v8;
		if (!v8
			|| (v9 = (uint8*)malloc_42540_42880(a1), (v8->var_16 = v9) == 0)
			|| (v10 = (Type_sub168_2*)malloc_42540_42880(sizeof(Type_sub168_2) * a2), (v8->var_8 = v10) == 0)
			|| (v11 = (Type_sub168_3*)malloc_42540_42880(sizeof(Type_sub168_3) * a2), (v8->var_12 = v11) == 0))
		{
			if (v8)
			{
				if (v8->var_16)
				{
					if (v8->var_8)
					{
						free_426E0_42A20((void*)v8->var_8);
						//fixed
						if (v8->var_12)
							free_426E0_42A20((void*)v8->var_12);
						//fixed
					}
					free_426E0_42A20((void*)v8->var_16);
				}
				free_426E0_42A20((void*)v8);
			}
			exit(1);
		}
		v8->var_20 = 0;
		v8->var_24 = 1;
		v8->var_22 = a2;
		v8->var_0 = a1;
		v8->var_4x = a1;
		//v3 = a2;
		//while ( --v3 != 0xFFFF )
		for (int i = 0; i < a2; i++)
			v8->var_8[i].var_u32_4 = 0;
	}
	return v6;
}

//SYNCHRONIZED WITH REMC1
int sub_36850_36C10(Type_sub168* a1x)
{
  for ( int result = 0; result < a1x->var_22; result++ )
  {
    if ( !a1x->var_8[result].var_u32_4 )
      return result;
  }
  return -1;
}

int counter_sub_369E0_36DA0 = 0;
//SYNCHRONIZED WITH REMC1
Type_sub168_2* sub_369E0_36DA0(Type_sub168* a1x, unsigned int a2, __int16 a3)//2079E0_
{
  __int16 v3; // si
  __int16 v4; // ax
  __int16 v5; // dx
  int v6; // ecx
  //int v7; // eax

  //debug
  if (counter_sub_369E0_36DA0 == 0x80)
  {
      counter_sub_369E0_36DA0++;
      counter_sub_369E0_36DA0--;
  }
  counter_sub_369E0_36DA0++;
  //debug

  v3 = -1;
  if ( a2 < a1x->var_4x)
  {
    v4 = sub_36850_36C10(a1x);
    v5 = v4;
    v6 = v4;
    v3 = v4;
    if ( v4 > -1 )
    {
      //v7 = 14 * v4;
      a1x->var_8[v4].var_u16_8[1] = v5;
      a1x->var_8[v4].var_u32_4 = a2;
      a1x->var_8[v4].var_u32_0 = (Type_sub168_2_2*)&a1x->var_16[a1x->var_0 - a1x->var_4x];
      a1x->var_8[v4].var_u16_8[2] = a3;
      a1x->var_4x -= a2;
      a1x->var_8[v4].var_u16_8[0] = a1x->var_20;
      a1x->var_12[a1x->var_20].var_u32_0 = &a1x->var_8[v6];
      a1x->var_20++;
    }
  }
  if ( v3 <= -1 )
    return nullptr;
  else
    return /*14 * v3 +*/ &a1x->var_8[v3];
}

__int16 __cdecl sub_36A90_36E50_old(int a1, int a2)
{
    int v2; // ecx
    int v3; // eax
    int v4; // ebx
    int v5; // esi
    int v6; // ebx
    char* v7; // ebp
    unsigned __int16 v8; // di
    __int16 v9; // cx
    int v10; // esi
    unsigned __int16 v11; // bx
    int v12; // eax
    const void* v13; // esi
    int v15; // [esp+0h] [ebp-18h]
    int v16; // [esp+4h] [ebp-14h]

    LOWORD(v3) = *(_WORD*)(a2 + 10);
    if ((unsigned __int16)v3 < *(_WORD*)(a1 + 22))
    {
        v3 = 14 * (unsigned __int16)v3;
        v4 = v3 + *(_DWORD*)(a1 + 8);
        if (*(_DWORD*)(v4 + 4))
        {
            LOWORD(v2) = *(_WORD*)(v4 + 8);
            v5 = *(_DWORD*)(v4 + 4) + *(_DWORD*)(a1 + 4);
            v6 = *(_DWORD*)(a1 + 8);
            *(_DWORD*)(a1 + 4) = v5;
            *(_DWORD*)(v6 + v3 + 4) = 0;
            v7 = *(char**)(*(_DWORD*)(a1 + 8) + v3);
            v15 = v2;
            v16 = v2 - 1;
            while (1)
            {
                v8 = *(_WORD*)(a1 + 20);
                v9 = v16 + 1;
                v10 = v15 + 1;
                ++v16;
                v15 = v10;
                if ((unsigned __int16)v10 >= v8)
                    break;
                v11 = v10;
                *(_DWORD*)(*(_DWORD*)(a1 + 12) + 4 * (unsigned __int16)v10 - 4) = *(_DWORD*)(*(_DWORD*)(a1 + 12)
                    + 4 * (unsigned __int16)v10);
                v12 = *(_DWORD*)(*(_DWORD*)(a1 + 12) + 4 * (unsigned __int16)v10);
                *(_WORD*)(v12 + 8) = v9;
                v13 = *(const void**)v12;
                **(_DWORD**)(*(_DWORD*)(a1 + 12) + 4 * v11) = (uint32)v7;
                qmemcpy(v7, v13, *(_DWORD*)(*(_DWORD*)(*(_DWORD*)(a1 + 12) + 4 * v11) + 4));
                v7 += *(_DWORD*)(*(_DWORD*)(*(_DWORD*)(a1 + 12) + 4 * v11) + 4);
            }
            LOWORD(v3) = v8 - 1;
            *(_WORD*)(a1 + 20) = v8 - 1;
        }
    }
    return v3;
}

//SYNChRONIZED WITH REMC1
void sub_36A90_36E50(Type_sub168* a1x, Type_sub168_2* a2x)//207A90_
{
	Type_sub168_2_2* v7x; // ebp
	Type_sub168_2* v12x; // eax
	int v15; // [esp+0h] [ebp-18h]

	if (a2x->var_u16_8[1] < a1x->var_22)
	{
		if (a1x->var_8[a2x->var_u16_8[1]].var_u32_4)
		{
			a1x->var_4x += a1x->var_8[a2x->var_u16_8[1]].var_u32_4;
			a1x->var_8[a2x->var_u16_8[1]].var_u32_4 = 0;
			v7x = a1x->var_8[a2x->var_u16_8[1]].var_u32_0;
			v15 = a1x->var_8[a2x->var_u16_8[1]].var_u16_8[0];
			while (1)
			{
				v15++;
				if (v15 >= a1x->var_20)
					break;
				a1x->var_12[v15 - 1].var_u32_0 = a1x->var_12[v15].var_u32_0;
				v12x = a1x->var_12[v15].var_u32_0;
				v12x->var_u16_8[0] = v15 - 1;
				a1x->var_12[v15].var_u32_0->var_u32_0 = v7x;
				qmemcpy(v7x, v12x->var_u32_0, a1x->var_12[v15].var_u32_0->var_u32_4);
				v7x = (Type_sub168_2_2*)((uint8*)v7x + a1x->var_12[v15].var_u32_0->var_u32_4);
			}
			a1x->var_20--;
		}
	}
}

//SYNChRONIZED WITH REMC1
void sub_36C10_36FD0(Type_sub168* a1)
{
    allert_error();//test it

  if ( a1 )
  {
    if (a1->var_24 == 1 )
    {
      free_426E0_42A20(a1->var_16);
      free_426E0_42A20(a1->var_8);
      free_426E0_42A20(a1->var_12);
      free_426E0_42A20(a1);
    }
    a1 = nullptr;
  }
}

//----- (00036C65) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_36C65(
    int a1,
    int a2,
    int a3,
    int a4,
    int a5,
    int a6,
    int a7)
{

    FixPerifery();
    /*
    char v1; // bl

    lastPressedKey_12EF70_12EF60 = inp(96);
    if (byte_B7326 == -32 && (lastPressedKey_12EF70_12EF60 == 42 || lastPressedKey_12EF70_12EF60 == -86))
    {
        byte_B7326 = lastPressedKey_12EF70_12EF60;
        lastPressedKey_12EF70_12EF60 = 0x80;
    }
    else
    {
        byte_B7326 = lastPressedKey_12EF70_12EF60;
        pressedKeys_12EEF0_12EEE0[lastPressedKey_12EF70_12EF60 & 0x7F] = (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x7Fu;
    }
    v1 = inp(97);
    outp(97, v1 | 0x80);
    outp(97, v1);
    if ((unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x80u && !byte_B7327)
        byte_B7327 = lastPressedKey_12EF70_12EF60;
    if (lastPressedKey_12EF70_12EF60 == 15 && *(char*)dword_AE408 < 0)
    {
        sub_41144(0, 63, 0, 0);
        byte_AE45A = 1;
    }
    if (byte_AE45A)
        chain_intr(a1);
    outp(32, 32);
    __asm { iret }
    */
  //int v7; // [esp-4h] [ebp-4h] BYREF
  //fix
  /*
  ((void (*)(_DWORD, _DWORD, _DWORD, _DWORD, int, int, int, int, int *, int, int, int))_GETDS)(
    (unsigned __int16)__GS__,
    (unsigned __int16)__FS__,
    (unsigned __int16)__ES__,
    (unsigned __int16)__DS__,
    a1,
    a2,
    a3,
    a4,
    &v7,
    a5,
    a6,
    a7);*/
}
// 36D82: positive sp value 4 has been found
// 6244D: using guessed type _DWORD inp(_DWORD);
// 62455: using guessed type _DWORD outp(_DWORD, char);
// 62460: using guessed type _DWORD chain_intr(_DWORD);
// AE408: using guessed type int dword_AE408_AE3F8();
// AE45A: using guessed type char origDebug_AE45A_AE44A;
// B7320: using guessed type int keysVect2_B7320;
// B7324: using guessed type __int16 keysVect1_B7324;
// B7326: using guessed type char byte_B7326;
// B7327: using guessed type char byte_B7327;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;

//----- (00036D83) --------------------------------------------------------
void cleanPressedKeys_36D83()
{
    FixPerifery((char*)"CLEAN_KEYS");
  __int16 lastPressedKey;
  for ( int i = 0; i < 128; i++ )
  {
    pressedKeys_12EEF0_12EEE0[i] = 0;
  }
  keysVect1_B7324 = 127;
  keysVect2_B7320 = dos_getvect(9);
  //fix return dos_setvect(9, sub_36C65, (unsigned __int16)__CS__);
}
// 62481: using guessed type _DWORD dos_getvect(_DWORD);
// 624B5: using guessed type _DWORD dos_setvect(_DWORD, _DWORD, _DWORD);
// B7320: using guessed type int keysVect2_B7320;
// B7324: using guessed type __int16 keysVect1_B7324;

//----- (00036DC2) --------------------------------------------------------
int sub_36DC2_37182()
{
    FixPerifery();
  return dos_setvect(9, keysVect2_B7320, (unsigned __int16)keysVect1_B7324);
}
// 624B5: using guessed type _DWORD dos_setvect(_DWORD, _DWORD, _DWORD);
// B7320: using guessed type int keysVect2_B7320;
// B7324: using guessed type __int16 keysVect1_B7324;

//----- (00036DE0) --------------------------------------------------------
void RefillLife_36DE0(Type_AE400_29795* event)
{
    event->actLife_29807_12 = event->maxLife_29803_8;
}

//----- (00036DF0) --------------------------------------------------------
void sub_36DF0(Type_AE400_29795* event, unsigned __int16 a2)//207DF0_
{
  uint16_t pomX = begBuildTab_AE440_AE430_26C440_26C430[a2].dim.x;
  uint16_t pomY = begBuildTab_AE440_AE430_26C440_26C430[a2].dim.y;
  event->var_u16_29821_26 = 2;
  event->actSpeed_29923_128 = (pomX * pomY) >> 4;
  if (typeResolution_12F02E_12F01E == 1 )
  {
    pomX >>= 1;
    pomY >>= 1;    
  }
  word_AE454_AE444 = event->var_u32_29867_72;
  word_AE454_AE444.x = event->var_u32_29867_72.x >> 8 << 8;
  word_AE454_AE444.y = event->var_u32_29867_72.y >> 8 << 8;
  sub_41C70_41FB0(event, &word_AE454_AE444);
  uint8_t pomX2 = (event->var_u32_29867_72.x >> 8) - (pomX >> 1);
  uint8_t pomY2 = (event->var_u32_29867_72.y >> 8) - (pomY >> 1);
  if ( (pomX2 + pomY2) % 2 )
  {
    word_AE454_AE444 = event->var_u32_29867_72;
    word_AE454_AE444.x += 0x100;
    sub_41C70_41FB0(event, &word_AE454_AE444);
    pomX2++;
  }
  sub_37150(event, a2);
  event->actLife_29807_12 = 30;
  event->var_u16_29839_44 = 2000;
  event->var_u32_29867_72.z = 32 * sub_361C0(pomX2, pomY2, pomY, pomX);
  event->var_u16_29823_28 |= 2;
  event->var_u8_29866_71 = a2;
}
// AE440: using guessed type int begBuildTab_AE440_AE430_26C440_26C430;
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00036F90) --------------------------------------------------------
int sub_36F90(int a1)
{
  int result; // eax

  result = *(int *)(a1 + 8) >> 1;
  *(_DWORD *)(a1 + 140) = result;
  return result;
}

//----- (00036FA0) --------------------------------------------------------
void sub_36FA0(Type_AE400_29795* event, __int16 a2)//207FA0_
{
  event->var_u8_29883_88 = 0;
  event->var_u16_29881_86 = a2;
  event->var_u8_29884_89 = byte_90AD8[*(uint8_t*)&word_99BA6[3 + 7 * a2]];
  event->var_u16_29873_78.var_u16_29873_78 = word_99BA6[1 + 7 * a2] / 2;
  event->var_u16_29873_78.var_u16_29875_80 = word_99BA6[7 * a2] / 2;
  event->var_u16_29873_78.var_u16_29877_82 = word_99BA6[7 * a2] / 2;
  event->var_u16_29873_78.var_u16_29879_84 = word_99BA6[1 + 7 * a2] / 2;
}
// 99BA6: using guessed type __int16 word_99BA6[];
// 99BA8: using guessed type __int16 word_99BA8[];

//----- (00037030) --------------------------------------------------------
void sub_37030(Type_AE400_29795* a1x, __int16 a2)
{
  sub_36FA0(a1x, a2);
  a1x->var_u16_29873_78.var_u16_29875_80 = word_99BA6[7 * a2] / 2;
  a1x->var_u16_29873_78.var_u16_29877_82 = word_99BA6[7 * a2] / 2;
  a1x->var_u16_29873_78.var_u16_29879_84 = word_99BA6[1 + 7 * a2] / 2;
}
// 99BA6: using guessed type __int16 word_99BA6[];
// 99BA8: using guessed type __int16 word_99BA8[];

//----- (000370A0) --------------------------------------------------------
void sub_370A0(Type_AE400_29795* a1x, __int16 a2)
{
  sub_36FA0(a1x, a2);
  a1x->var_u16_29873_78.var_u16_29875_80 *= 2;
  a1x->var_u16_29873_78.var_u16_29877_82 *= 2;
  a1x->var_u16_29873_78.var_u16_29879_84 *= 2;
}

//----- (000370E0) --------------------------------------------------------
void sub_370E0(Type_AE400_29795* a1x, __int16 a2)
{
  sub_36FA0(a1x, a2);
  a1x->var_u16_29873_78.var_u16_29875_80 /= 2;
  a1x->var_u16_29873_78.var_u16_29877_82 /= 2;
  a1x->var_u16_29873_78.var_u16_29879_84 /= 2;
}

//----- (00037130) --------------------------------------------------------
void sub_37130(Type_AE400_29795* a1x, __int16 a2, __int16 a3)
{  
    a1x->var_u16_29873_78.var_u16_29875_80 = a2;
    a1x->var_u16_29873_78.var_u16_29877_82 = a2;
    a1x->var_u16_29873_78.var_u16_29879_84 = a3;
}

void sub_37150(Type_AE400_29795* event, __int16 a2)//208150_
{
  uint8_t pomX = begBuildTab_AE440_AE430_26C440_26C430[a2].dim.x;
  uint8_t pomY = begBuildTab_AE440_AE430_26C440_26C430[a2].dim.y;
  if ( typeResolution_12F02E_12F01E == 1 )
  {
      pomX >>= 1;
      pomY >>= 1;
  }
  event->var_u16_29873_78.var_u16_29873_78 = 0xE000;
  event->var_u16_29873_78.var_u16_29875_80 = ((pomX << 8) + 1280) >> 1;
  event->var_u16_29873_78.var_u16_29877_82 = ((pomY << 8) + 1280) >> 1;
  event->var_u16_29873_78.var_u16_29879_84 = 0x4000;
}

void sub_371C0()//2081C0_
{
  str_AE400_AE3F0->str_29795[0].var_u32_29955_160 = unk_B7330x;
  str_AE400_AE3F0->var_u32_40 = -1;
  str_AE400_AE3F0->var_u32_4593 = -1;
  for (int i = 999; i > 0; i--)
    {
        str_AE400_AE3F0->var_u32_593[++str_AE400_AE3F0->var_u32_40] = &str_AE400_AE3F0->str_29795[i];
    }
}

//----- (00037220) --------------------------------------------------------
void sub_37220_375E0()//208220_
{
  //Type_str_AE400_AE3F0* v0; // edi
  //int v1; // edx
  //Type_str_AE400_AE3F0* result; // eax
  //Type_AE400_29795* v3; // esi
  //int v4; // ebx
  //int v5; // ebp

  //v0 = str_AE400_AE3F0;
  
  str_AE400_AE3F0->var_u32_40 = -1;
  //result = v0;
  str_AE400_AE3F0->var_u32_4593 = -1;
  for(int i = 999;i;i--)
  {
    //v3 = &str_AE400_AE3F0->str_29795[v1];
    if (str_AE400_AE3F0->str_29795[i].var_u8_29859_64)
    {
      if ( (0x20400 & str_AE400_AE3F0->str_29795[i].var_29811_16.dword) != 0 )
      {
        //v5 = str_AE400_AE3F0->var_u32_4593 + 1;
        str_AE400_AE3F0->var_u32_4593++;
        str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593] = &str_AE400_AE3F0->str_29795[i];
      }
    }
    else
    {
      //v4 = str_AE400_AE3F0->var_u32_40 + 1;
      str_AE400_AE3F0->var_u32_40++;
      str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40] = &str_AE400_AE3F0->str_29795[i];
    }
    //v1--;
  }
  //while ( v1 );
  //str_AE400_AE3F0 = v0;
}
// AE400: using guessed type int dword_AE400_AE3F0();

Type_AE400_29795* NewEvent_372C0()//2082C0_
{
	if (str_AE400_AE3F0->var_u32_40 >= 0)
	{
		memset((void*)str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40], 0, sizeof(Type_AE400_29795));
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->maxLife_29803_8 = 300;
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->var_29811_16.dword = 8;
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->actSpeed_29921_126 = 16;
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->var_u16_29839_44 = 100;
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->id_29819_24 = str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40] - str_AE400_AE3F0->str_29795;
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->sClass_29861_66 = -1;
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->sModel_29862_67 = -1;
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->var_u32_29951_156 = unk_98F38;
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->var_u32_29955_160 = unk_B7330x;
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->var_u8_29863_68 = 10;
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->var_u8_29853_58 = -6;
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->rand_29799_4 = str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40] - str_AE400_AE3F0->str_29795 + str_AE400_AE3F0->rand_4;
		str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40]->var_u8_29858_63 = str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40] - str_AE400_AE3F0->str_29795;
		return str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40--];
	}
	if (str_AE400_AE3F0->var_u32_4593 >= 0)
	{
		memset(&str_AE408_AE3F8->str_36382x, 0, sizeof(Type_AE400_29795*)*20);
		str_AE408_AE3F8->var_u32_36462[1] = nullptr;
		str_AE408_AE3F8->var_u32_36462[2] = nullptr;
		str_AE408_AE3F8->var_u32_36462[0] = nullptr;
		str_AE408_AE3F8->var_u32_36462[3] = nullptr;
		sub_41DD0_42110(str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]);
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->var_u8_29859_64 = 0;
		memset((void*)str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593], 0, sizeof(Type_AE400_29795));
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->maxLife_29803_8 = 300;
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->var_29811_16.dword = 8;
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->actSpeed_29921_126 = 16;
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->var_u16_29839_44 = 100;
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->id_29819_24 = str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593] - str_AE400_AE3F0->str_29795;
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->sClass_29861_66 = -1;
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->sModel_29862_67 = -1;
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->var_u32_29951_156 = unk_98F38;
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->var_u32_29955_160 = unk_B7330x;
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->var_u8_29863_68 = 10;
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->var_u8_29853_58 = -6;
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->rand_29799_4 = str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593] - str_AE400_AE3F0->str_29795 + str_AE400_AE3F0->rand_4;
		str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593]->var_u8_29858_63 = str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593] - str_AE400_AE3F0->str_29795;
		return str_AE400_AE3F0->var_u32_4597[str_AE400_AE3F0->var_u32_4593--];
	}
	return 0;
}

//----- (000373F0) --------------------------------------------------------
Type_AE400_29795* sub_373F0(axis_3d* a1, int a2, int a3)//2083F0_
{
  /*int v3; // eax
  v3 = *(int *)((char *)&dword_96906 + 18 * a2) + 14 * a3;
  if ( *(_DWORD *)(v3 + 10) && *(__int16 *)(v3 + 4) == a3 )
    return (*(int (**)(int))(v3 + 6))(a1);
  else
    return 0;*/
        //int v3 = 0; // eax
        //dword_96906[a2].data0[a3].data6
    if (dword_96902[a2].str_4[a3].data10 && dword_96902[a2].str_4[a3].data4 == a3 )
        return dword_96902[a2].str_4[a3].data6(a1);
      //return (*(int (**)(int))(v3 + 6))(a1);
    else
      return nullptr;
}
// 96906: using guessed type int dword_96906;

int counter_37440 = 0;
//----- (00037440) --------------------------------------------------------
void sub_37440(int a1, char a2)//208440_
{
  //Type_1090* i; // ebx
  unsigned __int16 v3; // dx
  //Type_1090* j; // ebx
  //char *v6; // [esp-Ch] [ebp-14h]

  if ( !a1 )
  {
    str_AE400_AE3F0->str_232607.var_u32_232607 = 0;
    memset(str_AE400_AE3F0->str_232607.var_u8_232611, 0, 96);
    sub_59140_59650();
    //for ( i = str_AE400_AE3F0->str_193795.var_u16_1090; i < &str_AE400_AE3F0->str_193795.var_u16_1090[1999]; i++ )
    for (int i = 1; i < 2000; i++)
    {
        //debug
#ifdef debug1
        //add_compare(0x20847D, true);
#endif debug1
        //debug
      sub_59160(str_AE400_AE3F0->str_193795.str_1072[i].data_0, str_AE400_AE3F0->str_193795.str_1072[i].data_2, -1);
      if (str_AE400_AE3F0->str_193795.str_1072[i].data_0 >= 5u )
      {
        if (str_AE400_AE3F0->str_193795.str_1072[i].data_0 <= 5u )
        {
          v3 = str_AE400_AE3F0->str_193795.str_1072[i].data_2;
          if ( v3 != 12 && v3 != 13 && v3 != 14 && v3 != 15 && v3 != 9 )
              str_AE400_AE3F0->str_232607.var_u32_232607++;
        }
        else if (str_AE400_AE3F0->str_193795.str_1072[i].data_0 == 12 )
        {
            str_AE400_AE3F0->str_232607.var_u8_232611[str_AE400_AE3F0->str_193795.str_1072[i].data_2]++;
        }
      }
    }
    sub_59230();
  }
  sub_37220_375E0();
  for (int i = 1; i < 2000; i++)
  //for ( j = str_AE400_AE3F0->str_193795.var_u16_1090; ; j++ )
  {
      //debug
#ifdef debug1
      if (counter_37440 == 0xa3)
      {
          counter_37440++;
          counter_37440--;
      }
      counter_37440++;
      //add_compare(0x208549, true);
#endif debug1
      //debug
    //if ( j >= &str_AE400_AE3F0->str_193795.var_u16_1090[1999])
//      break;
    if (str_AE400_AE3F0->str_193795.str_1072[i].data_0)
    {
      if (str_AE400_AE3F0->str_193795.str_1072[i].data_8 == a1 )
      {
        sub_37560(&str_AE400_AE3F0->str_193795.str_1072[i]);
        if ( a2 )
            str_AE400_AE3F0->str_193795.str_1072[i].data_0 = 0;
      }
    }
  }
  str_AE400_AE3F0->var_u32_4593 = -1;
}
// 38C9F: using guessed type int dword_38C9F;
// 38CA3: using guessed type int dword_38CA3[];
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00037560) --------------------------------------------------------
void sub_37560(Type_1090* type1090)
{
  //int v1; // eax
  Type_AE400_29795* v2; // ebx
  int v2z;
  char v3; // dh
  uint16_t v5[8]; // [esp+0h] [ebp-10h] BYREF

  //fix
  v2 = 0;
  //fix

  //v1 = *(int *)((char *)&dword_96906 + 18 * *a1);
  //dword_96906[a1[0]].data0[a1[1]].data10
  if (dword_96902[type1090->data_0].str_4[type1090->data_2].data10)
  {
    v5[0] = (type1090->data_4 << 8) + 128;
    v5[1] = (type1090->data_6 << 8) + 128;
    v5[2] = sub_11F50((axis_3d*)v5);
    v2 = sub_373F0((axis_3d*)v5, type1090->data_0, type1090->data_2);
    if (v2)
    {
        v2z = *(_BYTE *)(v2 + 64);
      if (v2z < 0xBu )
      {
        if (v2z == 10 )
        {
            v2z = *(_BYTE *)(v2 + 65);
          if (v2z < 0x22u )
          {
            if (v2z == 4 )
            {
              *(_WORD *)(v2 + 24) = type1090->data_12;
              sub_37130(v2, type1090->data_10 << 8, type1090->data_10 << 8);
              RefillLife_36DE0((Type_AE400_29795*)v2);
            }
          }
          else if (v2z <= 0x22u )
          {
            *(_WORD *)(v2 + 150) = (type1090->data_16 << 8) + 128;
            v2z = (type1090->data_14 << 8) + 128;
            *(_WORD *)(v2 + 152) = v2z;
          }
          else if (v2z == 45 )
          {
            sub_36DF0(v2, type1090->data_14 + 16);
          }
        }
      }
      else if (v2z <= 0xBu )
      {
        *(_WORD *)(v2 + 24) = type1090->data_12;
        sub_37130(v2, type1090->data_10 << 8, 4096);
        RefillLife_36DE0(v2);
        *(_BYTE *)(v2 + 16) |= 1u;
      }
      else if (v2z == 12 )
      {
        LOBYTE(v2z) = type1090->data_12 & 0xffu;
        BYTE1(v2z) = v2z + *(_BYTE *)(v2 + 70);
        *(_BYTE *)(v2 + 70) = BYTE1(v2z);
        if (type1090->data_12 >= 3u )
        {
          *(_BYTE *)(v2 + 70) = BYTE1(v2z) - 3;
          v3 = *(_BYTE *)(v2 + 18);
          *(_WORD *)(v2 + 86) = 280;
          *(_BYTE *)(v2 + 18) = v3 | 4;
        }
      }
    }
  }
}
// 96906: using guessed type int dword_96906;

//----- (00037710) --------------------------------------------------------
int sub_37710()
{
  return *(_DWORD *)(dword_AE400_AE3F0() + 40) + 1;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00037720) --------------------------------------------------------
int sub_37720(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9177;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9177) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00037740) --------------------------------------------------------
int sub_37740(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9183;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9183) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00037760) --------------------------------------------------------
int sub_37760(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9189;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9189) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00037780) --------------------------------------------------------
int sub_37780(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9195;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9195) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000377A0) --------------------------------------------------------
int sub_377A0(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9201;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9201) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000377C0) --------------------------------------------------------
int sub_377C0(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9207;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9207) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000377E0) --------------------------------------------------------
int sub_377E0(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9213;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9213) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00037800) --------------------------------------------------------
int sub_37800(int a1)
{
  int v1; // edi
  int result; // eax

  v1 = dword_AE400_AE3F0() + 9219;
  result = 0;
  *(_DWORD *)(dword_AE400_AE3F0() + 9219) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 4) = *(_WORD *)(a1 + 4);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

Type_AE400_29795* sub_37820(axis_3d* position)//208820_
{
	Type_AE400_29795* event = NewEvent_372C0();
	if (event)
	{
		event->var_u8_29865_70 = 0;
		event->var_u8_29859_64 = 3;
		event->var_u8_29860_65 = 0;
		event->maxLife_29803_8 = 10000;
		event->actSpeed_29923_128 = 80;
		event->var_u32_29951_156 = &unk_98F38[7];
		event->var_u16_29823_28 = 29;
		event->id_29819_24 = event - str_AE400_AE3F0->str_29795;
		sub_41CF0_42030(event, position);
		sub_36FA0(event, 44);
		RefillLife_36DE0(event);
	}
	return event;
}

//----- (000378A0) --------------------------------------------------------
int sub_378A0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 1;
    *(_BYTE *)(result + 64) = 3;
    v3 = dword_AE400_AE3F0();
    *(_BYTE *)(result + 65) = 1;
    *(_DWORD *)(result + 8) = 10000;
    *(_WORD *)(result + 128) = 80;
    *(_DWORD *)(result + 156) = (uint32)&unk_98F38[8];
    *(_WORD *)(result + 28) = 29;
    *(_WORD *)(result + 24) = (result - (v3 + 29795)) / 164;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    sub_36FA0((Type_AE400_29795*)v2, 44);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    return v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00037920) --------------------------------------------------------
int sub_37920(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // [esp+0h] [ebp-14h] BYREF
  __int16 v4; // [esp+4h] [ebp-10h]

  *(_DWORD *)&word_AE454_AE444.x = *(_DWORD *)a1;
  word_AE454_AE444.z = *(_WORD *)(a1 + 4);
  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 5;
    *(_BYTE *)(result + 64) = 3;
    *(_BYTE *)(result + 65) = 2;
    *(_DWORD *)(result + 8) = 40000;
    *(_WORD *)(result + 26) = 0;
    *(_WORD *)(result + 28) = 33;
    LOWORD(v3) = HIBYTE(word_AE454_AE444);
    HIWORD(v3) = HIBYTE(word_AE454_AE444.y);
    v4 = sub_11F50(&word_AE454_AE444);
    if ( ((__int16)v3 + SHIWORD(v3)) % 2 )
      LOWORD(v3) = v3 + 1;
    LOWORD(v3) = (_WORD)v3 << 8;
    HIWORD(v3) <<= 8;
    *(_DWORD *)(v2 + 150) = v3;
    *(_WORD *)(v2 + 154) = v4;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)&v3);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 177);
    return v2;
  }
  return result;
}
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;

//----- (00037A00) --------------------------------------------------------
int sub_37A00(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 7;
    *(_BYTE *)(v1 + 64) = 3;
    *(_BYTE *)(v1 + 65) = 3;
    *(_DWORD *)(v1 + 8) = 10000;
    *(_WORD *)(v1 + 126) = 48;
    *(_DWORD *)(v1 + 136) = 10000;
    *(_DWORD *)(v1 + 140) = 0;
    *(_WORD *)(v1 + 28) = 1;
    *(_DWORD *)(v1 + 156) = (uint32)&unk_98F38[9];
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 169);
  }
  return v2;
}

//----- (00037A80) --------------------------------------------------------
int sub_37A80(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00037AA0) --------------------------------------------------------
int sub_37AA0(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00037AC0) --------------------------------------------------------
int sub_37AC0(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00037AE0) --------------------------------------------------------
int sub_37AE0(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00037B00) --------------------------------------------------------
int sub_37B00(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00037B20) --------------------------------------------------------
int sub_37B20(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00037B40) --------------------------------------------------------
int sub_37B40(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00037B60) --------------------------------------------------------
int sub_37B60(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00037B80) --------------------------------------------------------
int sub_37B80(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00037BA0) --------------------------------------------------------
int sub_37BA0(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00037BC0) --------------------------------------------------------
int sub_37BC0(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // ebp
  int v4; // edx
  int v5; // ecx
  unsigned int v6; // edx
  int v7; // edx
  int v9; // [esp+0h] [ebp-18h] BYREF
  __int16 v10; // [esp+4h] [ebp-14h]

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  v3 = v1;
  if ( !v1 )
    return 0;
  v4 = dword_AE400_AE3F0();
  *(_BYTE *)(v1 + 70) = 0;
  *(_BYTE *)(v1 + 64) = 2;
  *(_BYTE *)(v1 + 65) = 0;
  v5 = *(_DWORD *)(v1 + 4);
  *(_WORD *)(v1 + 26) = (v1 - (v4 + 29795)) / 164 % 11;
  *(_DWORD *)(v1 + 4) = 9377 * v5 + 9439;
  v6 = *(_DWORD *)(v1 + 4) % 0x1388u;
  *(_WORD *)(v1 + 28) = 1;
  *(_DWORD *)(v1 + 12) = v6 + 2500;
  v9 = *(int*)a1;
  v10 = *((_WORD *)a1 + 2);
  LOBYTE(v5) = -95 * *(_BYTE *)(v1 + 4) - 33;
  *(_DWORD *)(v1 + 4) = 9377 * *(_DWORD *)(v1 + 4) + 9439;
  LOWORD(v9) = (v5 & 0x3F) - 32 + v9;
  LOBYTE(v5) = -95 * *(_BYTE *)(v1 + 4) - 33;
  *(_DWORD *)(v1 + 4) = 9377 * *(_DWORD *)(v1 + 4) + 9439;
  HIWORD(v9) += (v5 & 0x3F) - 32;
  sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)&v9);
  RefillLife_36DE0((Type_AE400_29795*)v2);
  v7 = 9377 * *(_DWORD *)(v2 + 4) + 9439;
  *(_DWORD *)(v2 + 4) = v7;
  if ( (v7 & 1) != 0 )
    sub_37030((Type_AE400_29795*)(_WORD *)v2, 84);
  else
    sub_37030((Type_AE400_29795*)(_WORD *)v2, 83);
  return v3;
}
// 37CBD: conditional instruction was optimized away because edx.4==1
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00037CF0) --------------------------------------------------------
int sub_37CF0(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = (int)NewEvent_372C0();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 16) &= ~8u;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    *(_BYTE *)(result + 70) = 3;
    *(_BYTE *)(result + 64) = 2;
    *(_BYTE *)(result + 65) = 1;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_37030((Type_AE400_29795*)(uint16*)v2, 79);
    return (int)v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00037D70) --------------------------------------------------------
int sub_37D70(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = (int)NewEvent_372C0();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 16) &= ~8u;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    *(_BYTE *)(result + 70) = 6;
    *(_BYTE *)(result + 64) = 2;
    *(_BYTE *)(result + 65) = 2;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_37030((Type_AE400_29795*)v2, 39);
    sub_37130((Type_AE400_29795*)v2, 1024, 1024);
    return (int)v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00037E00) --------------------------------------------------------
int sub_37E00(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = (int)NewEvent_372C0();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 16) &= ~8u;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    *(_BYTE *)(result + 70) = 9;
    *(_BYTE *)(result + 64) = 2;
    *(_BYTE *)(result + 65) = 3;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_37030((Type_AE400_29795*)v2, 270);
    return (int)v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00037E80) --------------------------------------------------------
int sub_37E80(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = (int)NewEvent_372C0();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 12;
    *(_BYTE *)(result + 64) = 2;
    *(_BYTE *)(result + 65) = 4;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_37030((Type_AE400_29795*)v2, 48);
    return (int)v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00037EF0) --------------------------------------------------------
int sub_37EF0(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = (int)NewEvent_372C0();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 15;
    *(_BYTE *)(result + 64) = 2;
    *(_BYTE *)(result + 65) = 5;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_37030((Type_AE400_29795*)v2, 48);
    return (int)v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00038030) --------------------------------------------------------
int sub_38030(int a1)
{
  int v1; // eax
  int v2; // ebx
  _DWORD *v3; // ebp
  __int64 v4; // rax
  int v5; // ecx
  int v6; // ecx
  int v7; // eax
  int v8; // ebx
  int v9; // edx
  int v11; // [esp+0h] [ebp-20h]
  int v12; // [esp+4h] [ebp-1Ch]
  int v13; // [esp+8h] [ebp-18h]
  __int16 v14; // [esp+Ch] [ebp-14h]

  if ( sub_37710() < 16 )
    return 0;
  v1 = (int)NewEvent_372C0();
  v2 = v1;
  v3 = (_DWORD *)v1;
  if ( !v1 )
    return 0;
  *(_BYTE *)(v1 + 70) = 1;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 0;
  *(_WORD *)(v1 + 128) = 80;
  *(_WORD *)(v1 + 130) = 16;
  *(_WORD *)(v1 + 126) = 30;
  *(_DWORD *)(v1 + 8) = 9000;
  sub_36F90(v1);
  v4 = *(int *)(v2 + 140);
  *(_DWORD *)(v2 + 136) = v4;
  LODWORD(v4) = ((int)v4 - HIDWORD(v4)) >> 1;
  HIDWORD(v4) = *(_DWORD *)(v2 + 4);
  *(_DWORD *)(v2 + 140) = v4;
  LODWORD(v4) = 9377 * HIDWORD(v4) + 9439;
  *(_DWORD *)(v2 + 4) = v4;
  LOWORD(v4) = (v4 & 0x7FF) - 1;
  *(_WORD *)(v2 + 34) = v4;
  *(_WORD *)(v2 + 30) = v4;
  v5 = dword_AE400_AE3F0();
  HIDWORD(v4) = dword_AE400_AE3F0() + 29795;
  *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
  *(_WORD *)(v2 + 36) = 0;
  *(_WORD *)(v2 + 56) = 96;
  LODWORD(v4) = *(char *)(v2 + 65);
  *(_WORD *)(v2 + 28) = 1;
  v6 = v4 + v5;
  *(_WORD *)(v2 + 26) = (v2 - HIDWORD(v4)) / 164 % 100;
  LOBYTE(v4) = *(_BYTE *)(v6 + 12);
  *(_BYTE *)(v6 + 12) = v4 + 1;
  *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[12];
  *(_BYTE *)(v2 + 63) = v4;
  *(_BYTE *)(v2 + 58) = *(_WORD *)(*(_DWORD *)(v2 + 156) + 26)
                      - *(unsigned __int8 *)(v2 + 63) % *(_WORD *)(*(_DWORD *)(v2 + 156) + 26)
                      + 4;
  v13 = 0;
  v11 = v2;
  *(_BYTE *)(v2 + 66) = 3;
  v14 = 19;
  do
  {
    v7 = (int)NewEvent_372C0();
    v8 = v7;
    v12 = v7;
    if ( v7 )
    {
      qmemcpy((void *)v7, v3, 0xA4u);
      v9 = v7 - (dword_AE400_AE3F0() + 29795);
      *(_WORD *)(v7 + 52) = (v11 - (dword_AE400_AE3F0() + 29795)) / 164;
      *(_WORD *)(v11 + 54) = v9 / 164;
      *(_WORD *)(v7 + 54) = 0;
      *(_BYTE *)(v7 + 70) = 120;
      v3[35] = (v3[34] - (__CFSHL__((int)v3[34] >> 31, 5) + 32 * ((int)v3[34] >> 31))) >> 5;
      *(_BYTE *)(v7 + 63) = v13;
      sub_36FA0((Type_AE400_29795*)v7, v14);
      *(_WORD *)(v8 + 56) = *(_WORD *)(v8 + 80);
      sub_41CF0_42030((Type_AE400_29795*)v8, (axis_3d*)a1);
      RefillLife_36DE0((Type_AE400_29795*)v8);
    }
    v11 = v12;
    ++v14;
    ++v13;
  }
  while ( v13 <= 15 );
  sub_41CF0_42030((Type_AE400_29795*)v3, (axis_3d*)a1);
  RefillLife_36DE0((Type_AE400_29795*)v3);
  sub_36FA0((Type_AE400_29795*)v3, 40);
  return (int)v3;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00038270) --------------------------------------------------------
int sub_38270(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // ecx
  int v5; // edx
  int v6; // eax

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( !v1 )
    return 0;
  *(_BYTE *)(v1 + 70) = 7;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 1;
  *(_WORD *)(v1 + 128) = 100;
  v3 = *(__int16 *)(v1 + 128);
  *(_WORD *)(v1 + 130) = 16;
  *(_DWORD *)(v1 + 8) = 2000;
  *(_WORD *)(v1 + 126) = v3 / 2;
  sub_36F90(v1);
  *(_WORD *)(v2 + 34) = 0;
  *(_WORD *)(v2 + 30) = *(_WORD *)(v2 + 34);
  v4 = dword_AE400_AE3F0();
  v5 = dword_AE400_AE3F0() + 29795;
  *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
  *(_WORD *)(v2 + 36) = 0;
  *(_WORD *)(v2 + 28) = 1;
  v6 = *(char *)(v2 + 65);
  *(_WORD *)(v2 + 26) = (v2 - v5) / 164 % 100;
  LOBYTE(v5) = *(_BYTE *)(v4 + v6 + 12);
  *(_BYTE *)(v4 + v6 + 12) = v5 + 1;
  *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[13];
  *(_BYTE *)(v2 + 63) = v5;
  *(_BYTE *)(v2 + 58) = *(_BYTE *)(*(_DWORD *)(v2 + 156) + 26) + 1;
  *(_BYTE *)(v2 + 66) = 3;
  sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
  RefillLife_36DE0((Type_AE400_29795*)v2);
  sub_36FA0((Type_AE400_29795*)v2, 86);
  return v2;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00038370) --------------------------------------------------------
int sub_38370(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax
  int v8; // ecx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( !v1 )
    return 0;
  *(_BYTE *)(v1 + 70) = 13;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 2;
  *(_WORD *)(v1 + 128) = 70;
  v3 = *(__int16 *)(v1 + 128);
  *(_WORD *)(v1 + 130) = 30;
  *(_DWORD *)(v1 + 8) = 3000;
  *(_WORD *)(v1 + 126) = v3 / 2;
  sub_36F90(v1);
  v4 = 9377 * *(_DWORD *)(v2 + 4) + 9439;
  *(_DWORD *)(v2 + 4) = v4;
  LOWORD(v4) = (v4 & 0x7FF) - 1;
  *(_WORD *)(v2 + 34) = v4;
  *(_WORD *)(v2 + 30) = v4;
  v5 = dword_AE400_AE3F0();
  v6 = dword_AE400_AE3F0() + 29795;
  *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
  *(_WORD *)(v2 + 36) = 0;
  *(_WORD *)(v2 + 44) = 350;
  *(_BYTE *)(v2 + 66) = 3;
  *(_BYTE *)(v2 + 67) = 0;
  v7 = *(char *)(v2 + 65);
  *(_WORD *)(v2 + 28) = 1;
  v8 = v7 + v5;
  *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
  LOBYTE(v6) = *(_BYTE *)(v8 + 12);
  *(_BYTE *)(v8 + 12) = v6 + 1;
  *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[14];
  *(_BYTE *)(v2 + 63) = v6;
  *(_BYTE *)(v2 + 58) = *(_WORD *)(*(_DWORD *)(v2 + 156) + 26)
                      - *(unsigned __int8 *)(v2 + 63) % *(_WORD *)(*(_DWORD *)(v2 + 156) + 26)
                      + 4;
  *(_BYTE *)(v2 + 66) = 3;
  sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
  RefillLife_36DE0((Type_AE400_29795*)v2);
  sub_36FA0((Type_AE400_29795*)v2, 3);
  sub_37130((Type_AE400_29795*)v2, 128, 128);
  return v2;
}
// AE400: using guessed type int dword_AE400_AE3F0();

/*
uint16_t unk_99118[] = {
0x000F,0x0022,0x0005,0x0055,0x0005,0x0100,0x0000,0xFFC0,
0x0014,0x0155,0x80FE,0xFFF0,0x1400,0x001E,0x1400,0x00AA,
0x0010,0x0016,0x0005,0x0071,0x0000,0x0100,0x0000,0xFF80,
0x0014,0x0200,0x80FE,0xFFF0,0x0A00,0x001E,0x1400,0x0200,
0x0011,0x0038,0x0005,0x0016,0x0005,0x0100,0x0000,0xFFC0,
0x0014,0x0200,0x80FE,0xFFF0,0x0900,0x001E,0x1400,0x0200,
0x0012,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFFE0,
0x0014,0x0000,0x0001,0x0000,0x0900,0x0023,0x1400,0x02AA,
0x0013,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,
0x0014,0x0200,0x80FE,0xFFF0,0x0900,0x0028,0x0F00,0x0200,
0x0014,0x0038,0x0005,0x0016,0x0005,0x0500,0x0000,0xFFE7,
0x0050,0x0200,0xFFFF,0xFFFF,0x0900,0x0028,0x1900,0x0200,
0x0015,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,
0x0014,0x0200,0x80FE,0xFFF0,0x0900,0x0019,0x0800,0x0200,
0x0016,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,
0x0014,0x0200,0x80FE,0xFFF0,0x0900,0x0028,0x0C00,0x0200,
0x0017,0x002D,0x0005,0x0016,0x0005,0x0700,0x0000,0xFFFC,
0x003C,0x0200,0xFFFF,0xFFFF,0x0900,0x000A,0x1E00,0x07C7,
0x0018,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF00,
0x0014,0x0200,0x0000,0x0002,0x0900,0x000F,0x0F00,0x0200,
0x0019,0x0044,0x0005,0x0016,0x0005,0x0700,0x0100,0xFFF8,
0x0046,0x0200,0xFFFF,0xFFFF,0x0900,0x0028,0x1200,0x0200,
0x001A,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,
0x0014,0x0200,0xFFFF,0xFFFF,0x0900,0x0028,0x0C00,0x0200,
0x001B,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,
0x0014,0x0200,0xFFFF,0xFFFF,0x0900,0x0028,0x0C00,0x0200,
0x001C,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,
0x0014,0x0200,0xFFFF,0xFFFF,0x0900,0x0028,0x0C00,0x0200,
0x001D,0x0016,0x0005,0x0016,0x0005,0x0100,0x0000,0xFF80,
0x0014,0x0200,0xFFFF,0xFFFF,0x0900,0x0028,0x0C00,0x0200,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
};*/
int sub_384B0(uint16_t* a1)//2094B0_
{
    int result; // eax
    int v2; // ebx
    _DWORD* v3; // ebp
    __int64 v4; // rax
    int v5; // ecx
    int v6; // eax
    int v7; // eax
    int v8; // ebx
    int v9; // edx
    int v10; // [esp+0h] [ebp-20h]
    int v11; // [esp+4h] [ebp-1Ch]
    int v12; // [esp+8h] [ebp-18h]
    __int16 v13; // [esp+Ch] [ebp-14h]

    result = ((int (*)(void))NewEvent_372C0)();
    v2 = result;
    v3 = (_DWORD*)result;
    if (result)
    {
        *(_BYTE*)(result + 70) = 19;
        *(_BYTE*)(result + 64) = 5;
        *(_BYTE*)(result + 65) = 3;
        *(_WORD*)(result + 128) = 64;
        *(_WORD*)(result + 130) = 16;
        *(_WORD*)(result + 126) = 30;
        *(_DWORD*)(result + 8) = 9000;
        sub_36F90(result);
        v4 = *(int*)(v2 + 140);
        *(_DWORD*)(v2 + 136) = v4;
        LODWORD(v4) = ((int)v4 - HIDWORD(v4)) >> 1;
        HIDWORD(v4) = *(_DWORD*)(v2 + 4);
        *(_DWORD*)(v2 + 140) = v4;
        LODWORD(v4) = 9377 * HIDWORD(v4) + 9439;
        *(_DWORD*)(v2 + 4) = v4;
        LOWORD(v4) = (v4 & 0x7FF) - 1;
        *(_WORD*)(v2 + 34) = v4;
        *(_WORD*)(v2 + 30) = v4;
        v5 = dword_AE400_AE3F0();
        HIDWORD(v4) = dword_AE400_AE3F0() + 29795;
        *(_WORD*)(v2 + 32) = *(_WORD*)(v2 + 34);
        *(_WORD*)(v2 + 36) = 0;
        *(_WORD*)(v2 + 56) = 96;
        *(_WORD*)(v2 + 26) = (v2 - HIDWORD(v4)) / 164 % 100;
        HIDWORD(v4) = *(char*)(v2 + 65);
        *(_WORD*)(v2 + 28) = 1;
        LOBYTE(v4) = *(_BYTE*)(v5 + HIDWORD(v4) + 12);
        *(_BYTE*)(v5 + HIDWORD(v4) + 12) = v4 + 1;
        *(_DWORD*)(v2 + 156) = (uint32)&unk_98F38[15];
        *(_BYTE*)(v2 + 63) = v4;
        *(_BYTE*)(v2 + 58) = *(_WORD*)(*(_DWORD*)(v2 + 156) + 26)
            - *(unsigned __int8*)(v2 + 63) % *(_WORD*)(*(_DWORD*)(v2 + 156) + 26)
            + 4;
        v11 = 0;
        v12 = v2;
        v6 = 89;
        *(_BYTE*)(v2 + 66) = 3;
        v13 = 89;
        do
        {
            v7 = (int)NewEvent_372C0();//NewEvent_372C0(v6);
            v8 = v7;
            v10 = v7;
            if (v7)
            {
                qmemcpy((void*)v7, v3, 0xA4u);
                v9 = v7 - (dword_AE400_AE3F0() + 29795);
                *(_WORD*)(v7 + 52) = (v12 - (dword_AE400_AE3F0() + 29795)) / 164;
                *(_WORD*)(v12 + 54) = v9 / 164;
                *(_WORD*)(v7 + 54) = 0;
                *(_BYTE*)(v7 + 70) = 120;
                *(_DWORD*)(v7 + 140) = (v3[34] - (__CFSHL__((int)v3[34] >> 31, 5) + 32 * ((int)v3[34] >> 31))) >> 5;
                *(_BYTE*)(v7 + 63) = v11;
                sub_36FA0((Type_AE400_29795*)v7, v13);
                *(_WORD*)(v8 + 56) = *(_WORD*)(v8 + 80);
                sub_41CF0_42030((Type_AE400_29795*)v8, (axis_3d*)a1);
                RefillLife_36DE0((Type_AE400_29795*)v8);
            }
            v6 = v10;
            v12 = v10;
            ++v13;
            ++v11;
        } while (v11 <= 15);
        sub_41CF0_42030((Type_AE400_29795*)v3, (axis_3d*)a1);
        RefillLife_36DE0((Type_AE400_29795*)v3);
        sub_36FA0((Type_AE400_29795*)v3, 88);
        return (int)v3;
    }
    return result;
}

//int unk_99138;//fix
int sub_386DE(uint16_t* a1)
{
    int v1; // eax
    int v2; // ebx
    int v3; // edx
    int v4; // ecx
    int v5; // edx
    int v6; // ecx
    int v7; // ecx

    v1 = (int)NewEvent_372C0();// v1 = NewEvent_372C0(a1);
    v2 = v1;
    if (!v1)
        return 0;
    *(_BYTE*)(v1 + 70) = 25;
    *(_BYTE*)(v1 + 64) = 5;
    *(_BYTE*)(v1 + 65) = 4;
    *(_WORD*)(v1 + 128) = 30;
    *(_WORD*)(v1 + 130) = 0;
    *(_DWORD*)(v1 + 8) = 1000;
    *(_WORD*)(v1 + 126) = *(_WORD*)(v1 + 128);
    sub_36F90(v1);
    v3 = 9377 * *(_DWORD*)(v2 + 4) + 9439;
    *(_DWORD*)(v2 + 4) = v3;
    LOWORD(v3) = (v3 & 0x7FF) - 1;
    *(_WORD*)(v2 + 34) = v3;
    *(_WORD*)(v2 + 30) = v3;
    v4 = dword_AE400_AE3F0();
    *(_WORD*)(v2 + 32) = *(_WORD*)(v2 + 34);
    *(_WORD*)(v2 + 36) = 0;
    *(_WORD*)(v2 + 26) = (v2 - (v4 + 29795)) / 164 % 100;
    v5 = *(char*)(v2 + 65);
    *(_WORD*)(v2 + 44) = 500;
    v6 = v5 + v4;
    *(_WORD*)(v2 + 28) = 1;
    LOBYTE(v5) = *(_BYTE*)(v6 + 12);
    *(_BYTE*)(v6 + 12) = v5 + 1;
    *(_DWORD*)(v2 + 156) = (uint32)&unk_98F38[0];
    *(_BYTE*)(v2 + 63) = v5;
    v7 = *(__int16*)(*(_DWORD*)(v2 + 156) + 26)
        - *(unsigned __int8*)(v2 + 63) % *(__int16*)(*(_DWORD*)(v2 + 156) + 26);
    *(_BYTE*)(v2 + 66) = 3;
    *(_BYTE*)(v2 + 58) = v7 + 4;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 0);
    sub_37130((Type_AE400_29795*)v2, 128, 128);
    return v2;
}

//----- (00038820) --------------------------------------------------------
void sub_38820(Type_AE400_29795* a1x)
{
  int v1; // eax

  v1 = a1x->var_u32_29935_140
     / ((a1x->var_u32_29931 - (__CFSHL__(a1x->var_u32_29931 >> 31, 3) + 8 * (a1x->var_u32_29931 >> 31))) >> 3);
  if ( (v1 & 0x8000u) != 0 )
    LOWORD(v1) = 0;
  if ( (__int16)v1 > 7 )
    LOWORD(v1) = 7;
  if ( (__int16)v1 > a1x->var_u16_29881_86 - 185 )
      a1x->maxLife_29803_8 += 5000;
  sub_36FA0(a1x, v1 + 185);
}

//----- (00038890) --------------------------------------------------------
int sub_38890(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // ecx
  int v4; // edx
  int v5; // ecx
  int v6; // edx
  int v7; // ecx
  int v8; // ecx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( !v1 )
    return 0;
  *(_WORD *)(v1 + 128) = 30;
  v3 = *(_DWORD *)(v1 + 4);
  *(_WORD *)(v1 + 126) = *(_WORD *)(v1 + 128);
  *(_BYTE *)(v1 + 70) = 31;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 5;
  *(_WORD *)(v1 + 130) = 3;
  *(_DWORD *)(v1 + 8) = 5000;
  v4 = 9377 * v3 + 9439;
  *(_DWORD *)(v1 + 4) = v4;
  *(_DWORD *)(v1 + 140) = 500;
  LOWORD(v4) = (v4 & 0x7FF) - 1;
  *(_WORD *)(v1 + 34) = v4;
  *(_WORD *)(v1 + 30) = v4;
  v5 = dword_AE400_AE3F0();
  *(_WORD *)(v1 + 32) = *(_WORD *)(v1 + 34);
  *(_DWORD *)(v1 + 136) = 12000;
  *(_WORD *)(v1 + 36) = 0;
  *(_WORD *)(v1 + 26) = (v1 - (v5 + 29795)) / 164 % 100;
  v6 = *(char *)(v1 + 65);
  *(_WORD *)(v1 + 44) = 500;
  v7 = v6 + v5;
  *(_WORD *)(v1 + 28) = 1;
  LOBYTE(v6) = *(_BYTE *)(v7 + 12);
  *(_BYTE *)(v7 + 12) = v6 + 1;
  *(_DWORD *)(v1 + 156) = (uint32)&unk_98F38[17];
  *(_BYTE *)(v1 + 63) = v6;
  v8 = *(__int16 *)(*(_DWORD *)(v1 + 156) + 26)
     - *(unsigned __int8 *)(v1 + 63) % *(__int16 *)(*(_DWORD *)(v1 + 156) + 26);
  *(_BYTE *)(v1 + 66) = 3;
  *(_BYTE *)(v1 + 58) = v8 + 4;
  sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
  RefillLife_36DE0((Type_AE400_29795*)v2);
  sub_36FA0((Type_AE400_29795*)v2, 185);
  sub_37130((Type_AE400_29795*)v2, 128, 128);
  *(_DWORD *)(v2 + 12) = 5000;
  return v2;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000389E0) --------------------------------------------------------
int sub_389E0(int a1)
{
  int v1; // eax
  int v2; // ebx
  __int64 v3; // rax
  int v4; // ecx
  int v5; // eax
  int v6; // ebp
  int v7; // edx
  int v9; // [esp+0h] [ebp-1Ch]
  _DWORD *v10; // [esp+4h] [ebp-18h]
  int i; // [esp+8h] [ebp-14h]

  if ( sub_37710() < 16 )
    return 0;
  v1 = (int)NewEvent_372C0();
  v2 = v1;
  v10 = (_DWORD *)v1;
  if ( !v1 )
    return 0;
  *(_BYTE *)(v1 + 70) = 37;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 6;
  *(_WORD *)(v1 + 128) = 80;
  *(_WORD *)(v1 + 130) = 16;
  *(_WORD *)(v1 + 126) = 30;
  *(_DWORD *)(v1 + 8) = 9000;
  sub_36F90(v1);
  v3 = *(int *)(v2 + 140);
  *(_DWORD *)(v2 + 136) = v3;
  LODWORD(v3) = v3 / 3;
  HIDWORD(v3) = *(_DWORD *)(v2 + 4);
  *(_DWORD *)(v2 + 140) = v3;
  LODWORD(v3) = 9377 * HIDWORD(v3) + 9439;
  *(_DWORD *)(v2 + 4) = v3;
  LOWORD(v3) = (v3 & 0x7FF) - 1;
  *(_WORD *)(v2 + 34) = v3;
  *(_WORD *)(v2 + 30) = v3;
  v4 = dword_AE400_AE3F0();
  HIDWORD(v3) = dword_AE400_AE3F0() + 29795;
  *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
  *(_WORD *)(v2 + 36) = 0;
  *(_WORD *)(v2 + 56) = 96;
  *(_WORD *)(v2 + 28) = 1;
  LODWORD(v3) = *(char *)(v2 + 65);
  *(_WORD *)(v2 + 26) = (v2 - HIDWORD(v3)) / 164 % 100;
  BYTE4(v3) = *(_BYTE *)(v4 + v3 + 12);
  *(_BYTE *)(v4 + v3 + 12) = BYTE4(v3) + 1;
  *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[18];
  *(_BYTE *)(v2 + 58) = 64;
  v9 = v2;
  *(_BYTE *)(v2 + 66) = 3;
  *(_BYTE *)(v2 + 63) = BYTE4(v3);
  for ( i = 0; i <= 1; ++i )
  {
    v5 = (int)NewEvent_372C0();
    v6 = v5;
    if ( v5 )
    {
      qmemcpy((void *)v5, v10, 0xA4u);
      v7 = v5 - (dword_AE400_AE3F0() + 29795);
      *(_WORD *)(v5 + 52) = (v9 - (dword_AE400_AE3F0() + 29795)) / 164;
      *(_WORD *)(v9 + 54) = v7 / 164;
      *(_WORD *)(v5 + 54) = 0;
      *(_BYTE *)(v5 + 70) = 120;
      *(_DWORD *)(v5 + 140) = v10[34] / 3;
      *(_BYTE *)(v5 + 63) = i;
      if ( i )
        sub_36FA0((Type_AE400_29795*)v5, 193);
      else
        sub_36FA0((Type_AE400_29795*)v5, 50);
      *(_WORD *)(v6 + 56) = 4 * *(_WORD *)(v6 + 80);
      sub_41CF0_42030((Type_AE400_29795*)v6, (axis_3d*)a1);
      RefillLife_36DE0((Type_AE400_29795*)v6);
    }
    v9 = v6;
  }
  sub_41CF0_42030((Type_AE400_29795*)v10, (axis_3d*)a1);
  sub_41CF0_42030((Type_AE400_29795*)v10, (axis_3d*)a1);
  RefillLife_36DE0((Type_AE400_29795*)v10);
  sub_36FA0((Type_AE400_29795*)v10, 49);
  return (int)v10;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00038C00) --------------------------------------------------------
int sub_38C00(int a1)
{
  int result; // eax

  if ( *(unsigned __int8 *)(a1 + 63) % 2 )
  {
    sub_36FA0((Type_AE400_29795*)a1, 85);
    *(_BYTE *)(a1 + 71) = 1;
    *(_DWORD *)(a1 + 8) = 4000;
  }
  else
  {
    sub_36FA0((Type_AE400_29795*)a1, 199);
    *(_BYTE *)(a1 + 71) = 2;
    *(_DWORD *)(a1 + 8) = 2000;
  }
  result = sub_36F90(a1);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
  return result;
}

//int unk_99198;//fix
int sub_38C60(uint16_t* a1)
{
    int result; // eax
    int v2; // ebx
    int v3; // edx
    int v4; // eax
    int v5; // ecx
    int v6; // edx
    int v7; // eax

    result = (int)NewEvent_372C0();
    v2 = result;
    if (result)
    {
        *(_BYTE*)(result + 70) = 43;
        *(_BYTE*)(result + 64) = 5;
        *(_BYTE*)(result + 65) = 7;
        *(_WORD*)(result + 128) = 20;
        *(_WORD*)(result + 130) = 3;
        v3 = *(_DWORD*)(result + 4);
        *(_WORD*)(result + 126) = *(_WORD*)(result + 128);
        v4 = 9377 * v3 + 9439;
        *(_DWORD*)(v2 + 4) = v4;
        LOWORD(v4) = (v4 & 0x7FF) - 1;
        *(_WORD*)(v2 + 34) = v4;
        *(_WORD*)(v2 + 30) = v4;
        v5 = dword_AE400_AE3F0();
        v6 = dword_AE400_AE3F0() + 29795;
        *(_WORD*)(v2 + 32) = *(_WORD*)(v2 + 34);
        *(_WORD*)(v2 + 36) = 0;
        *(_WORD*)(v2 + 44) = 500;
        *(_WORD*)(v2 + 28) = 1;
        v7 = *(char*)(v2 + 65);
        *(_WORD*)(v2 + 26) = (v2 - v6) / 164 % 100;
        LOBYTE(v6) = *(_BYTE*)(v5 + v7 + 12);
        *(_BYTE*)(v5 + v7 + 12) = v6 + 1;
        *(_DWORD*)(v2 + 156) = (uint32)&unk_98F38[19];
        *(_BYTE*)(v2 + 58) = 64;
        *(_BYTE*)(v2 + 66) = 3;
        *(_BYTE*)(v2 + 63) = v6;
        sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
        sub_38C00(v2);
        sub_37130((Type_AE400_29795*)v2, 128, 128);
        return v2;
    }
    return result;
}

// positive sp value has been detected, the output may be wrong!
int sub_38D09(/*int a1@<eax>, __int16 a2@<dx>, int a3@<ecx>, int a4@<ebx>, int a5*/)//209D09_
{
    //fix
    int a1 = 0;
    __int16 a2 = 0;
    int a3 = 0;
    int a4 = 0;
    int a5 = 0;
    //fix

    *(_BYTE*)(a3 + a1 + 12) = HIBYTE(a2) + 1;
    *(_DWORD*)(a4 + 156) = (uint32)&unk_98F38[19];
    *(_BYTE*)(a4 + 58) = 64;
    *(_BYTE*)(a4 + 66) = 3;
    *(_BYTE*)(a4 + 63) = a2;
    sub_41CF0_42030((Type_AE400_29795*)a4, (axis_3d*)a5);
    sub_38C00(a4);
    sub_37130((Type_AE400_29795*)a4, 128, 128);
    return a4;
}

//----- (00038D60) --------------------------------------------------------
int sub_38D60(int a1)
{
  int result; // eax
  int v2; // ebx
  __int16 v3; // ax
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 49;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 8;
    *(_WORD *)(result + 128) = 40;
    *(_WORD *)(result + 130) = 20;
    v3 = *(_WORD *)(result + 128);
    *(_DWORD *)(v2 + 8) = 10000;
    *(_WORD *)(v2 + 126) = v3;
    sub_36F90(v2);
    v4 = 9377 * *(_DWORD *)(v2 + 4) + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    LOWORD(v4) = (v4 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v4;
    *(_WORD *)(v2 + 30) = v4;
    v5 = dword_AE400_AE3F0();
    v6 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 1000;
    *(_WORD *)(v2 + 28) = 1;
    v7 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
    LOBYTE(v6) = *(_BYTE *)(v5 + v7 + 12);
    *(_BYTE *)(v5 + v7 + 12) = v6 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[20];
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_BYTE *)(v2 + 63) = v6;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 47);
    sub_37130((Type_AE400_29795*)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00038E70) --------------------------------------------------------
int sub_38E70(int a1)
{
  int v1; // eax
  int v2; // ebx
  __int16 v3; // ax
  __int16 v4; // dx
  int v5; // esi
  int v6; // ecx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( !v1 )
    return 0;
  *(_BYTE *)(v1 + 70) = 54;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 9;
  *(_WORD *)(v1 + 128) = 20;
  *(_WORD *)(v1 + 130) = 0;
  v3 = *(_WORD *)(v1 + 128);
  *(_DWORD *)(v2 + 8) = 1000;
  *(_WORD *)(v2 + 126) = v3;
  sub_36F90(v2);
  *(_DWORD *)(v2 + 4) = 9377 * *(_DWORD *)(v2 + 4) + 9439;
  v4 = *(_DWORD *)(v2 + 4) % 0x832u;
  *(_WORD *)(v2 + 36) = 0;
  *(_WORD *)(v2 + 44) = 500;
  *(_WORD *)(v2 + 28) = 1;
  *(_WORD *)(v2 + 34) = --v4;
  *(_WORD *)(v2 + 30) = v4;
  v5 = dword_AE400_AE3F0();
  v6 = *(char *)(v2 + 65);
  *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
  LOBYTE(v4) = *(_BYTE *)(v6 + v5 + 12);
  *(_BYTE *)(v6 + v5 + 12) = v4 + 1;
  *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[21];
  *(_BYTE *)(v2 + 63) = v4;
  *(_BYTE *)(v2 + 58) = *(_WORD *)(*(_DWORD *)(v2 + 156) + 26)
                      - *(unsigned __int8 *)(v2 + 63) % *(_WORD *)(*(_DWORD *)(v2 + 156) + 26)
                      + 4;
  *(_BYTE *)(v2 + 66) = 3;
  *(_WORD *)(v2 + 26) = (v2 - (v5 + 29795)) / 164 % 10 + 29;
  sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
  *(_WORD *)(v2 + 76) = sub_11F50((axis_3d*)(v2 + 72));
  RefillLife_36DE0((Type_AE400_29795*)v2);
  sub_36FA0((Type_AE400_29795*)v2, 220);
  sub_37130((Type_AE400_29795*)v2, 128, 128);
  return v2;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00038FC0) --------------------------------------------------------
int sub_38FC0(int a1)
{
  int result; // eax
  int v2; // ebx
  __int16 v3; // ax
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 61;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 10;
    *(_WORD *)(result + 128) = 60;
    *(_WORD *)(result + 130) = 20;
    v3 = *(_WORD *)(result + 128);
    *(_DWORD *)(v2 + 8) = 2000;
    *(_WORD *)(v2 + 126) = v3;
    sub_36F90(v2);
    v4 = 9377 * *(_DWORD *)(v2 + 4) + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    LOWORD(v4) = (v4 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v4;
    *(_WORD *)(v2 + 30) = v4;
    v5 = dword_AE400_AE3F0();
    v6 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 500;
    *(_WORD *)(v2 + 28) = 1;
    v7 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
    LOBYTE(v6) = *(_BYTE *)(v5 + v7 + 12);
    *(_BYTE *)(v5 + v7 + 12) = v6 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[22];
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_BYTE *)(v2 + 63) = v6;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 208);
    sub_37130((Type_AE400_29795*)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000390D0) --------------------------------------------------------
int sub_390D0(int a1)
{
  int result; // eax
  int v2; // ebx
  __int16 v3; // ax
  int v4; // edx
  int v5; // eax
  int v6; // ecx
  int v7; // edx
  int v8; // edx

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 66;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 11;
    *(_WORD *)(result + 128) = 60;
    *(_WORD *)(result + 130) = 20;
    v3 = *(_WORD *)(result + 128);
    *(_DWORD *)(v2 + 8) = 20000;
    *(_WORD *)(v2 + 126) = v3;
    sub_36F90(v2);
    v4 = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v2 + 136) = 2 * *(_DWORD *)(v2 + 140);
    v5 = 9377 * v4 + 9439;
    *(_DWORD *)(v2 + 4) = v5;
    LOWORD(v5) = (v5 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v5;
    *(_WORD *)(v2 + 30) = v5;
    v6 = dword_AE400_AE3F0();
    v7 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 500;
    *(_WORD *)(v2 + 26) = (v2 - v7) / 164 % 100;
    v8 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 28) = 1;
    LOBYTE(v5) = *(_BYTE *)(v6 + v8 + 12);
    *(_BYTE *)(v6 + v8 + 12) = v5 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[23];
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_WORD *)(v2 + 26) = 0;
    *(_BYTE *)(v2 + 63) = v5;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 200);
    sub_37130((Type_AE400_29795*)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00039200) --------------------------------------------------------
int sub_39200(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 73;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 12;
    *(_WORD *)(result + 128) = 40;
    *(_WORD *)(result + 130) = 20;
    v3 = *(_DWORD *)(result + 4);
    *(_WORD *)(result + 126) = *(_WORD *)(result + 128);
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    LOWORD(v4) = (v4 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v4;
    *(_WORD *)(v2 + 30) = v4;
    v5 = dword_AE400_AE3F0();
    v6 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_DWORD *)(v2 + 8) = 1000;
    *(_DWORD *)(v2 + 140) = 0;
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 500;
    *(_WORD *)(v2 + 28) = 1;
    v7 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
    LOBYTE(v6) = *(_BYTE *)(v5 + v7 + 12);
    *(_BYTE *)(v5 + v7 + 12) = v6 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[10];
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_WORD *)(v2 + 26) = 2;
    *(_BYTE *)(v2 + 63) = v6;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 221);
    sub_37130((Type_AE400_29795*)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

int sub_39340(uint16_t* a1)
{
    int result; // eax
    int v2; // ebx
    int v3; // esi
    int v4; // edx
    int v5; // eax
    int v6; // ecx
    int v7; // edx
    int v8; // eax
    int v9; // ecx
    unsigned int v10; // eax

    result = (int)NewEvent_372C0();
    v2 = result;
    v3 = result;
    if (result)
    {
        *(_BYTE*)(result + 70) = 79;
        *(_BYTE*)(result + 64) = 5;
        *(_BYTE*)(result + 65) = 13;
        *(_WORD*)(result + 128) = 40;
        *(_WORD*)(result + 130) = 20;
        v4 = *(_DWORD*)(result + 4);
        *(_WORD*)(result + 126) = *(_WORD*)(result + 128);
        v5 = 9377 * v4 + 9439;
        *(_DWORD*)(v2 + 4) = v5;
        LOWORD(v5) = (v5 & 0x7FF) - 1;
        *(_WORD*)(v2 + 34) = v5;
        *(_WORD*)(v2 + 30) = v5;
        v6 = dword_AE400_AE3F0();
        v7 = dword_AE400_AE3F0() + 29795;
        *(_WORD*)(v2 + 32) = *(_WORD*)(v2 + 34);
        *(_DWORD*)(v2 + 8) = 1000;
        *(_DWORD*)(v2 + 140) = 0;
        *(_WORD*)(v2 + 36) = 0;
        *(_WORD*)(v2 + 44) = 500;
        v8 = *(char*)(v2 + 65);
        *(_WORD*)(v2 + 28) = 1;
        v9 = v8 + v6;
        *(_WORD*)(v2 + 26) = (v2 - v7) / 164 % 100;
        LOBYTE(v8) = *(_BYTE*)(v9 + 12);
        *(_BYTE*)(v9 + 12) = v8 + 1;
        *(_DWORD*)(v2 + 156) = (uint32)&unk_98F38[10];
        *(_BYTE*)(v2 + 58) = 64;
        *(_BYTE*)(v2 + 66) = 3;
        *(_WORD*)(v2 + 26) = 2;
        *(_BYTE*)(v2 + 63) = v8;
        sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
        RefillLife_36DE0((Type_AE400_29795*)v2);
        v10 = 9377 * *(_DWORD*)(v2 + 4) + 9439;
        *(_DWORD*)(v2 + 4) = v10;
        switch (v10 % 7)
        {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
            sub_36FA0((Type_AE400_29795*)v3, 217);
            break;
        case 4u:
        case 5u:
        case 6u:
            sub_36FA0((Type_AE400_29795*)v3, 218);
            break;
        default:
            break;
        }
        sub_37130((Type_AE400_29795*)v3, 128, 128);
        return v3;
    }
    return result;
}

//----- (00039490) --------------------------------------------------------
int sub_39490(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 85;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 14;
    *(_WORD *)(result + 128) = 40;
    *(_WORD *)(result + 130) = 20;
    v3 = *(_DWORD *)(result + 4);
    *(_WORD *)(result + 126) = *(_WORD *)(result + 128);
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    LOWORD(v4) = (v4 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v4;
    *(_WORD *)(v2 + 30) = v4;
    v5 = dword_AE400_AE3F0();
    v6 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_DWORD *)(v2 + 8) = 1000;
    *(_DWORD *)(v2 + 140) = 0;
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 500;
    *(_WORD *)(v2 + 28) = 1;
    v7 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
    LOBYTE(v6) = *(_BYTE *)(v5 + v7 + 12);
    *(_BYTE *)(v5 + v7 + 12) = v6 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[10];
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_WORD *)(v2 + 26) = 2;
    *(_BYTE *)(v2 + 63) = v6;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 219);
    sub_37130((Type_AE400_29795*)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000395B0) --------------------------------------------------------
int sub_395B0(int a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // ecx
  int v4; // edx
  int v5; // ecx
  char v6; // ah

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( !v1 )
    return 0;
  *(_BYTE *)(v1 + 70) = 91;
  *(_BYTE *)(v1 + 64) = 5;
  *(_BYTE *)(v1 + 65) = 15;
  *(_WORD *)(v1 + 128) = 30;
  *(_WORD *)(v1 + 130) = 0;
  *(_DWORD *)(v1 + 8) = 1000;
  *(_WORD *)(v1 + 34) = 0;
  *(_WORD *)(v1 + 126) = *(_WORD *)(v1 + 128);
  *(_WORD *)(v1 + 30) = *(_WORD *)(v1 + 34);
  v3 = dword_AE400_AE3F0();
  *(_WORD *)(v1 + 32) = *(_WORD *)(v1 + 34);
  *(_DWORD *)(v1 + 140) = 0;
  *(_WORD *)(v1 + 36) = 0;
  *(_WORD *)(v1 + 26) = (v1 - (v3 + 29795)) / 164 % 100;
  v4 = *(char *)(v1 + 65);
  *(_WORD *)(v1 + 44) = 500;
  v5 = v4 + v3;
  *(_WORD *)(v1 + 28) = 1;
  LOBYTE(v4) = *(_BYTE *)(v5 + 12);
  *(_BYTE *)(v5 + 12) = v4 + 1;
  *(_DWORD *)(v1 + 156) = (uint32)&unk_98F38[24];
  *(_BYTE *)(v1 + 63) = v4;
  LOWORD(v5) = *(_WORD *)(*(_DWORD *)(v1 + 156) + 26);
  LOWORD(v4) = *(unsigned __int8 *)(v1 + 63) % (__int16)v5;
  *(_BYTE *)(v1 + 66) = 3;
  v6 = *(_BYTE *)(v1 + 18) | 2;
  *(_BYTE *)(v2 + 58) = v5 - v4 + 4;
  *(_BYTE *)(v2 + 18) = v6;
  sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
  RefillLife_36DE0((Type_AE400_29795*)v2);
  sub_36FA0((Type_AE400_29795*)v2, 0);
  sub_37130((Type_AE400_29795*)v2, 128, 128);
  return v2;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000396E0) --------------------------------------------------------
int sub_396E0(int a1)
{
  int result; // eax
  int v2; // ebx
  __int16 v3; // ax
  int v4; // eax
  int v5; // ecx
  int v6; // edx
  int v7; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 97;
    *(_BYTE *)(result + 64) = 5;
    *(_BYTE *)(result + 65) = 16;
    *(_WORD *)(result + 128) = 60;
    *(_WORD *)(result + 130) = 20;
    v3 = *(_WORD *)(result + 128);
    *(_DWORD *)(v2 + 8) = 100000;
    *(_WORD *)(v2 + 126) = v3;
    sub_36F90(v2);
    v4 = 9377 * *(_DWORD *)(v2 + 4) + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    LOWORD(v4) = (v4 & 0x7FF) - 1;
    *(_WORD *)(v2 + 34) = v4;
    *(_WORD *)(v2 + 30) = v4;
    v5 = dword_AE400_AE3F0();
    v6 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v2 + 32) = *(_WORD *)(v2 + 34);
    *(_WORD *)(v2 + 36) = 0;
    *(_WORD *)(v2 + 44) = 500;
    *(_WORD *)(v2 + 28) = 1;
    v7 = *(char *)(v2 + 65);
    *(_WORD *)(v2 + 26) = (v2 - v6) / 164 % 100;
    LOBYTE(v6) = *(_BYTE *)(v5 + v7 + 12);
    *(_BYTE *)(v5 + v7 + 12) = v6 + 1;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[25];
    *(_BYTE *)(v2 + 58) = 64;
    *(_BYTE *)(v2 + 66) = 3;
    *(_WORD *)(v2 + 26) = 0;
    *(_BYTE *)(v2 + 63) = v6;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 207);
    sub_37130((Type_AE400_29795*)v2, 128, 128);
    return v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00039800) --------------------------------------------------------
int sub_39800(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00039820) --------------------------------------------------------
int sub_39820(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00039840) --------------------------------------------------------
int sub_39840(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00039860) --------------------------------------------------------
int sub_39860(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00039880) --------------------------------------------------------
int sub_39880(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (000398A0) --------------------------------------------------------
int sub_398A0(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (000398C0) --------------------------------------------------------
int sub_398C0(int a1)
{
  int result; // eax
  int v1; // ebx
  int v2; // edx
  int v3; // eax
  int v4; // edx
  int v5; // eax

  result = (int)NewEvent_372C0();
  v1 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 4;
    *(_BYTE *)(result + 64) = 7;
    *(_BYTE *)(result + 65) = 4;
    *(_WORD *)(result + 128) = 80;
    v2 = *(__int16 *)(result + 128);
    *(_WORD *)(result + 130) = 16;
    v3 = v2 / 2;
    v4 = *(_DWORD *)(v1 + 4);
    *(_WORD *)(v1 + 126) = v3;
    v5 = 9377 * v4 + 9439;
    *(_DWORD *)(v1 + 4) = v5;
    LOWORD(v5) = (v5 & 0x7FF) - 1;
    *(_WORD *)(v1 + 34) = v5;
    *(_WORD *)(v1 + 30) = v5;
    *(_BYTE *)(v1 + 16) &= ~8u;
    RefillLife_36DE0((Type_AE400_29795*)v1);
    return v1;
  }
  return result;
}

//----- (00039940) --------------------------------------------------------
int sub_39940(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00039960) --------------------------------------------------------
int sub_39960(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00039980) --------------------------------------------------------
int sub_39980(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (000399A0) --------------------------------------------------------
int sub_399A0(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (000399C0) --------------------------------------------------------
int sub_399C0(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (000399E0) --------------------------------------------------------
int sub_399E0(int a1)
{
  int v0; // eax

  v0 = (int)NewEvent_372C0();
  if ( v0 )
    RefillLife_36DE0((Type_AE400_29795*)v0);
  return 0;
}

//----- (00039A10) --------------------------------------------------------
int sub_39A10(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 0;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 0;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[5];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 42);
    return v2;
  }
  return result;
}
// 98FD8: using guessed type void *off_98FD8;

//----- (00039A90) --------------------------------------------------------
int sub_39A90(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 1;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 1;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 4096 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[2];
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_BYTE *)(v2 + 66) = 10;
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 209);
    sub_37130((Type_AE400_29795*)v2, 2 * *(_WORD *)(v2 + 80), 2 * *(_WORD *)(v2 + 84));
    return v2;
  }
  return result;
}

//----- (00039B40) --------------------------------------------------------
int sub_39B40(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 2;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 2;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[1];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 211);
    return v2;
  }
  return result;
}

//----- (00039BC0) --------------------------------------------------------
int sub_39BC0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 3;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 3;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[1];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 76);
    return v2;
  }
  return result;
}

//----- (00039C40) --------------------------------------------------------
int sub_39C40(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 4;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 4;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[1];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 210);
    return v2;
  }
  return result;
}

//----- (00039CC0) --------------------------------------------------------
int sub_39CC0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 5;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 5;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[1];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 211);
    return v2;
  }
  return result;
}

//----- (00039D40) --------------------------------------------------------
int sub_39D40(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 6;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 6;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[1];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 212);
    return v2;
  }
  return result;
}

//----- (00039DC0) --------------------------------------------------------
int sub_39DC0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 7;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 7;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[1];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 213);
    return v2;
  }
  return result;
}

//----- (00039E40) --------------------------------------------------------
int sub_39E40(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 8;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 8;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[4];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 214);
    return v2;
  }
  return result;
}
// 98FB8: using guessed type void *off_98FB8;

//----- (00039EC0) --------------------------------------------------------
int sub_39EC0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 9;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 9;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 3584 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[4];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 216);
    return v2;
  }
  return result;
}
// 98FB8: using guessed type void *off_98FB8;

//----- (00039F40) --------------------------------------------------------
int sub_39F40(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 10;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 10;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[1];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 18);
    return v2;
  }
  return result;
}

//----- (00039FC0) --------------------------------------------------------
int sub_39FC0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 11;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 11;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[1];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 281);
    return v2;
  }
  return result;
}

//----- (0003A040) --------------------------------------------------------
int sub_3A040(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 12;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 12;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 2048 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[1];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 216);
    return v2;
  }
  return result;
}

//----- (0003A0C0) --------------------------------------------------------
int sub_3A0C0(int a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = (int)NewEvent_372C0();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 13;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 13;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    *(_DWORD *)(result + 8) = 5120 / *(__int16 *)(result + 126);
    *(_BYTE *)(result + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_370A0((Type_AE400_29795*)v2, 195);
    return (int)v2;
  }
  return result;
}

//----- (0003A1A0) --------------------------------------------------------
int sub_3A1A0(int a1)
{
  int result; // eax
  int v2; // ebx

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 15;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 14;
    *(_WORD *)(result + 126) = 128;
    *(_WORD *)(result + 128) = 128;
    *(_DWORD *)(result + 8) = 4096 / *(__int16 *)(result + 126);
    *(_BYTE *)(result + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 196);
    return v2;
  }
  return result;
}

//----- (0003A210) --------------------------------------------------------
int sub_3A210(int a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 80;
    *(_BYTE *)(v1 + 70) = 16;
    *(_BYTE *)(v1 + 64) = 9;
    *(_BYTE *)(v1 + 65) = 15;
    *(_WORD *)(v1 + 126) = 128;
    *(_WORD *)(v1 + 128) = 128;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 215);
  }
  return v2;
}

//----- (0003A270) --------------------------------------------------------
int sub_3A270(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 17;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 16;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[5];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 42);
    return v2;
  }
  return result;
}
// 98FD8: using guessed type void *off_98FD8;

//----- (0003A2F0) --------------------------------------------------------
int sub_3A2F0(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 18;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 17;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 4096 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[2];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 209);
    sub_37130((Type_AE400_29795*)v2, 2 * *(_WORD *)(v2 + 80), 2 * *(_WORD *)(v2 + 84));
    return v2;
  }
  return result;
}

//----- (0003A390) --------------------------------------------------------
int sub_3A390(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 19;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 18;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[5];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 42);
    return v2;
  }
  return result;
}
// 98FD8: using guessed type void *off_98FD8;

//----- (0003A410) --------------------------------------------------------
int sub_3A410(int a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 20;
    *(_BYTE *)(result + 64) = 9;
    *(_BYTE *)(result + 65) = 19;
    *(_WORD *)(result + 126) = 384;
    *(_WORD *)(result + 128) = 384;
    v3 = 0x2000 / *(__int16 *)(result + 126);
    *(_DWORD *)(v2 + 140) = 50;
    *(_DWORD *)(v2 + 8) = v3;
    BYTE1(v3) = *(_BYTE *)(v2 + 16);
    *(_DWORD *)(v2 + 156) = (uint32)&unk_98F38[5];
    *(_BYTE *)(v2 + 16) = BYTE1(v3) & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 42);
    return v2;
  }
  return result;
}
// 98FD8: using guessed type void *off_98FD8;

//----- (0003A490) --------------------------------------------------------
int sub_3A490(uint16_t* a1)
{
  int v1; // eax
  _WORD *v2; // ebx
  int v3; // edx

  v1 = (int)NewEvent_372C0();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 8;
    *(_BYTE *)(v1 + 70) = 0;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 0;
    *(_WORD *)(v1 + 44) = 400;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 28) = 0;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 7);
    sub_37130((Type_AE400_29795*)v2, 128, 128);
  }
  return (int)v2;
}

//----- (0003A510) --------------------------------------------------------
int sub_3A510(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 1;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 1;
    *(_DWORD *)(v1 + 8) = 1;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 400;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 41);
  }
  return v2;
}

//----- (0003A570) --------------------------------------------------------
int sub_3A570(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  unsigned int v3; // edx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 8;
    *(_BYTE *)(v1 + 70) = 2;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 2;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    v3 = *(_DWORD *)(v1 + 16) & 0xFFFDFFF6;
    *(_WORD *)(v1 + 26) = 0;
    *(_DWORD *)(v1 + 16) = v3 | 0x20001;
    RefillLife_36DE0((Type_AE400_29795*)v1);
  }
  return v2;
}

//----- (0003A5D0) --------------------------------------------------------
int sub_3A5D0(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  char v4; // ah

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 7;
    *(_BYTE *)(v1 + 70) = 3;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 3;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 0;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    v4 = *(_BYTE *)(v1 + 18) | 2;
    *(_WORD *)(v2 + 26) = 0;
    *(_BYTE *)(v2 + 18) = v4;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 36);
  }
  return v2;
}

//----- (0003A640) --------------------------------------------------------
int sub_3A640(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 100;
    *(_BYTE *)(v1 + 70) = 4;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 4;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 0;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    *(_WORD *)(v1 + 26) = 0;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_WORD *)(v1 + 76) = sub_11F50((axis_3d*)(__int16 *)(v1 + 72));
    RefillLife_36DE0((Type_AE400_29795*)v2);
  }
  return v2;
}

//----- (0003A6B0) --------------------------------------------------------
int sub_3A6B0(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  char v4; // ah

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 8;
    *(_BYTE *)(v1 + 70) = 5;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 5;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 0;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    v4 = *(_BYTE *)(v1 + 18) | 2;
    *(_WORD *)(v2 + 26) = 0;
    *(_BYTE *)(v2 + 18) = v4;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    *(_WORD *)(v2 + 76) = sub_11F50((axis_3d*)(__int16 *)(v2 + 72));
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 244);
  }
  return v2;
}

//----- (0003A730) --------------------------------------------------------
int sub_3A730(uint16_t* a1)
{
  int v1; // eax
  _WORD *v2; // ebx
  int v3; // edx

  v1 = (int)NewEvent_372C0();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 6;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 6;
    *(_WORD *)(v1 + 44) = 50;
    *(_DWORD *)(v1 + 8) = 240;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 46) = 0;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    v2[38] = sub_11F50((axis_3d*)(short*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 228);
    sub_37130((Type_AE400_29795*)v2, 272, 1536);
    v2[13] = 0;
  }
  return (int)v2;
}

//----- (0003A7D0) --------------------------------------------------------
int sub_3A7D0(uint16_t* a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // ecx
  unsigned int v5; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 7;
    *(_BYTE *)(result + 64) = 10;
    *(_BYTE *)(result + 65) = 7;
    v3 = *(_DWORD *)(result + 16);
    *(_DWORD *)(result + 8) = 12;
    *(_DWORD *)(result + 16) = v3 & 0xFFFDFFF7;
    v4 = *(_DWORD *)(result + 4);
    *(_BYTE *)(result + 18) |= 2u;
    v5 = 9377 * v4 + 9439;
    *(_DWORD *)(v2 + 4) = v5;
    *(_BYTE *)(v2 + 66) = 10;
    *(_BYTE *)(v2 + 67) = 7;
    *(_WORD *)(v2 + 126) = v5 % 0x14 + 20;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    *(_WORD *)(v2 + 76) = sub_11F50((axis_3d*)(short*)a1);
    sub_37030((Type_AE400_29795*)(_WORD *)v2, 78);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    result = v2;
    *(_BYTE *)(v2 + 16) |= 1u;
  }
  return result;
}

//----- (0003A870) --------------------------------------------------------
int sub_3A870(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  char v3; // ah

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 8;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 8;
    *(_DWORD *)(v1 + 8) = 8;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    v3 = *(_BYTE *)(v1 + 16) & 0xF7;
    *(_WORD *)(v2 + 44) = 100;
    *(_BYTE *)(v2 + 16) = v3;
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_37130((Type_AE400_29795*)v2, 512, 512);
  }
  return v2;
}

//----- (0003A8D0) --------------------------------------------------------
int sub_3A8D0(uint16_t* a1)
{
  int v1; // eax
  _WORD *v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 9;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 9;
    *(_DWORD *)(v1 + 8) = 17;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_WORD *)(v1 + 44) = 2000;
    *(_BYTE *)(v1 + 16) &= ~8u;
    RefillLife_36DE0((Type_AE400_29795*)v1);
    sub_37130((Type_AE400_29795*)v2, 768, 0x2000);
  }
  return (int)v2;
}

//----- (0003A930) --------------------------------------------------------
int sub_3A930(uint16_t* a1)
{
  int v1; // eax
  _WORD *v2; // ebx
  int v3; // edx

  v1 = (int)NewEvent_372C0();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 10;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 10;
    *(_DWORD *)(v1 + 8) = 1;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 100;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    RefillLife_36DE0((Type_AE400_29795*)v1);
    sub_37130((Type_AE400_29795*)v2, 128, 128);
  }
  return (int)v2;
}

//----- (0003A9A0) --------------------------------------------------------
int sub_3A9A0(uint16_t* a1)
{
  int v1; // eax
  _WORD *v2; // ebx
  int v3; // edx

  v1 = (int)NewEvent_372C0();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 11;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 11;
    *(_DWORD *)(v1 + 8) = 40;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 200;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    RefillLife_36DE0((Type_AE400_29795*)v1);
    sub_37130((Type_AE400_29795*)v2, 2304, 0x2000);
  }
  return (int)v2;
}

//----- (0003AA10) --------------------------------------------------------
int sub_3AA10(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 12;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 12;
    *(_DWORD *)(v1 + 8) = 8;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_WORD *)(v1 + 44) = -1536;
    *(_BYTE *)(v1 + 16) = *(_BYTE *)(v1 + 16) & 0xF6 | 1;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 41);
    *(_BYTE *)(v2 + 16) |= 1u;
    sub_37130((Type_AE400_29795*)v2, 512, 512);
  }
  return v2;
}

//----- (0003AAA0) --------------------------------------------------------
int sub_3AAA0(uint16_t* a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  unsigned int v4; // eax
  unsigned int v5; // edx
  unsigned int v6; // eax
  unsigned int v7; // ecx
  unsigned int v8; // et2

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 13;
    *(_BYTE *)(result + 64) = 10;
    v3 = *(_DWORD *)(result + 4);
    *(_BYTE *)(result + 65) = 13;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    v5 = v4 % 0x17;
    v6 = 9377 * *(_DWORD *)(v2 + 4);
    v7 = *(_DWORD *)(v2 + 16) & 0xFFFDFFF7;
    *(_DWORD *)(v2 + 8) = v5 + 17;
    *(_DWORD *)(v2 + 16) = v7;
    v6 += 9439;
    *(_DWORD *)(v2 + 4) = v6;
    v8 = v6 % 0x35;
    *(_BYTE *)(v2 + 66) = 10;
    *(_BYTE *)(v2 + 67) = 13;
    BYTE1(v6) = *(_BYTE *)(v2 + 18) | 2;
    *(_WORD *)(v2 + 126) = v8 + 51;
    *(_BYTE *)(v2 + 18) = BYTE1(v6);
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_37030((Type_AE400_29795*)(_WORD *)v2, 67);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    return v2;
  }
  return result;
}

//----- (0003AB40) --------------------------------------------------------
int sub_3AB40(uint16_t* a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  unsigned int v4; // eax
  unsigned int v5; // edx
  unsigned int v6; // eax
  unsigned int v7; // ecx
  unsigned int v8; // et2

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 14;
    *(_BYTE *)(result + 64) = 10;
    v3 = *(_DWORD *)(result + 4);
    *(_BYTE *)(result + 65) = 14;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    v5 = v4 % 0x21;
    v6 = 9377 * *(_DWORD *)(v2 + 4);
    v7 = *(_DWORD *)(v2 + 16) & 0xFFFDFFF7;
    *(_DWORD *)(v2 + 8) = v5 + 28;
    *(_DWORD *)(v2 + 16) = v7;
    v6 += 9439;
    *(_DWORD *)(v2 + 4) = v6;
    v8 = v6 % 0x35;
    *(_BYTE *)(v2 + 66) = 10;
    *(_BYTE *)(v2 + 67) = 14;
    BYTE1(v6) = *(_BYTE *)(v2 + 18) | 2;
    *(_WORD *)(v2 + 126) = v8 + 51;
    *(_BYTE *)(v2 + 18) = BYTE1(v6);
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    sub_37030((Type_AE400_29795*)(_WORD *)v2, 9);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    return v2;
  }
  return result;
}

//----- (0003ABE0) --------------------------------------------------------
int sub_3ABE0(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 15;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 15;
    *(_DWORD *)(v1 + 8) = 128;
    *(_WORD *)(v1 + 126) = 256;
    v3 = *(_DWORD *)(v1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_WORD *)(v1 + 44) = 100;
    *(_WORD *)(v1 + 26) = 0;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    *(_WORD *)(v2 + 30) = v4 & 0x7FF;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v2 + 76) = *(_WORD *)(a1 + 4);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_37130((Type_AE400_29795*)v2, 1024, 0x4000);
  }
  return v2;
}

//----- (0003AC70) --------------------------------------------------------
int sub_3AC70(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 17;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 17;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_DWORD *)(v1 + 8) = 10;
    *(_WORD *)(v1 + 44) = 3000;
    *(_BYTE *)(v1 + 16) &= ~8u;
    RefillLife_36DE0((Type_AE400_29795*)v1);
  }
  return v2;
}

//----- (0003ACC0) --------------------------------------------------------
int sub_3ACC0(uint16_t* a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // ecx
  unsigned int v5; // eax
  unsigned int v6; // edx
  unsigned int v7; // eax
  unsigned int v8; // edx
  int v9; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 16;
    *(_BYTE *)(result + 64) = 10;
    *(_BYTE *)(result + 65) = 16;
    v3 = *(_DWORD *)(result + 16);
    *(_WORD *)(result + 44) = 200;
    v4 = *(_DWORD *)(result + 4);
    *(_DWORD *)(result + 16) = v3 & 0xFFFDFFF7;
    v5 = 9377 * v4 + 9439;
    *(_DWORD *)(v2 + 4) = v5;
    v6 = v5 % 0x64;
    v7 = 9377 * *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v2 + 8) = v6 + 100;
    v7 += 9439;
    *(_DWORD *)(v2 + 4) = v7;
    v8 = v7 % 0x32;
    v9 = 9377 * *(_DWORD *)(v2 + 4);
    *(_WORD *)(v2 + 46) = 256;
    v9 += 9439;
    *(_DWORD *)(v2 + 4) = v9;
    *(_WORD *)(v2 + 30) = v9 & 0x7FF;
    BYTE1(v9) = *(_BYTE *)(v2 + 18);
    *(_WORD *)(v2 + 126) = v8 + 52;
    *(_BYTE *)(v2 + 18) = BYTE1(v9) | 2;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    *(_WORD *)(v2 + 76) = sub_11F50((axis_3d*)a1) + 64;
    sub_41EC0_42200((axis_3d*)(_WORD *)(v2 + 150), *(_WORD *)(v2 + 30), 0, *(_WORD *)(v2 + 126));
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 210);
    return v2;
  }
  return result;
}

//----- (0003ADB0) --------------------------------------------------------
int sub_3ADB0(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  char v3; // ah

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 18;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 18;
    *(_WORD *)(v1 + 44) = 200;
    v3 = *(_BYTE *)(v1 + 16);
    *(_WORD *)(v2 + 26) = 0;
    *(_DWORD *)(v2 + 8) = 10000;
    *(_BYTE *)(v2 + 16) = v3 & 0xF7;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v2 + 76) = *(_WORD *)(a1 + 4);
    RefillLife_36DE0((Type_AE400_29795*)v2);
  }
  return v2;
}

//----- (0003AE00) --------------------------------------------------------
int sub_3AE00(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 19;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 19;
    *(_WORD *)(v1 + 44) = 200;
    v3 = *(_DWORD *)(v1 + 16);
    *(_DWORD *)(v1 + 8) = 240;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    *(_BYTE *)(v2 + 16) |= 1u;
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 228);
    sub_37130((Type_AE400_29795*)v2, 512, 512);
  }
  return v2;
}

//----- (0003AE80) --------------------------------------------------------
int sub_3AE80(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 8;
    *(_BYTE *)(v1 + 70) = 23;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 23;
    v3 = *(_DWORD *)(v1 + 16);
    *(_WORD *)(v1 + 44) = 25;
    *(_DWORD *)(v1 + 16) = v3 & 0xFFFDFFF7;
    *(_BYTE *)(v1 + 18) |= 2u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 7);
    sub_37130((Type_AE400_29795*)v2, 200, 200);
    *(_BYTE *)(v2 + 16) |= 1u;
  }
  return v2;
}

//----- (0003AF00) --------------------------------------------------------
int sub_3AF00(uint16_t* a1)
{
  int v1; // eax
  _WORD *v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 25;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 25;
    *(_DWORD *)(v1 + 8) = 8;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_WORD *)(v1 + 44) = 2000;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 283);
    sub_37130((Type_AE400_29795*)v2, 512, 512);
  }
  return (int)v2;
}

//----- (0003AF80) --------------------------------------------------------
int sub_3AF80(uint16_t* a1)
{
  int v1; // eax
  _WORD *v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 26;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 26;
    *(_DWORD *)(v1 + 8) = 8;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_WORD *)(v1 + 44) = 200;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 284);
    sub_37130((Type_AE400_29795*)v2, 512, 512);
  }
  return (int)v2;
}

//----- (0003B000) --------------------------------------------------------
int sub_3B000(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  char v3; // ah

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 2;
    *(_BYTE *)(v1 + 70) = 27;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 27;
    *(_WORD *)(v1 + 44) = (*(__int16 *)(a1 + 4) >> 5) + 48;
    v3 = *(_BYTE *)(v1 + 16);
    *(_WORD *)(v2 + 26) = 10;
    *(_BYTE *)(v2 + 16) = v3 & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
  }
  return v2;
}

//----- (0003B060) --------------------------------------------------------
int sub_3B060(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 30;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 28;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
  }
  return v2;
}

//----- (0003B0C0) --------------------------------------------------------
Type_AE400_29795* sub_3B0C0(axis_3d* position)
{
	Type_AE400_29795* event = NewEvent_372C0();
	if (event)
	{
		event->maxLife_29803_8 = 0;
		event->var_u8_29865_70 = 32;
		event->var_u8_29859_64 = 10;
		event->var_u8_29860_65 = 30;
		event->var_u32_29867_72 = *position;
		event->var_29811_16.byte[0] &= ~8u;
		sub_41CF0_42030(event, position);
		RefillLife_36DE0(event);
	}
	return event;
}

//----- (0003B120) --------------------------------------------------------
int sub_3B120(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 31;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 29;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
  }
  return v2;
}

//----- (0003B180) --------------------------------------------------------
int sub_3B180(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  char v3; // ah

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 34;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 32;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    v3 = *(_BYTE *)(v1 + 16) & 0xF7;
    *(_WORD *)(v2 + 126) = 256;
    *(_BYTE *)(v2 + 16) = v3;
    RefillLife_36DE0((Type_AE400_29795*)v2);
  }
  return v2;
}

//----- (0003B1D0) --------------------------------------------------------
int sub_3B1D0(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 33;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 31;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
  }
  return v2;
}

//----- (0003B230) --------------------------------------------------------
int sub_3B230(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  char v3; // ah

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 55;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 51;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    v3 = *(_BYTE *)(v1 + 16);
    *(_WORD *)(v2 + 26) = 256;
    *(_WORD *)(v2 + 126) = 1024;
    *(_BYTE *)(v2 + 16) = v3 & 0xF7;
    sub_37130((Type_AE400_29795*)v2, 768, 768);
    RefillLife_36DE0((Type_AE400_29795*)v2);
  }
  return v2;
}

//----- (0003B2A0) --------------------------------------------------------
int sub_3B2A0(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 70) = 54;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 50;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
  }
  return v2;
}

//----- (0003B300) --------------------------------------------------------
int sub_3B300(uint16_t* a1)
{
  int result; // eax
  int v2; // ebx
  int v3; // eax

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 36;
    *(_BYTE *)(result + 64) = 10;
    *(_BYTE *)(result + 65) = 34;
    *(_DWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 66) = 3;
    *(_BYTE *)(result + 67) = -1;
    *(_BYTE *)(result + 16) &= ~8u;
    *(_DWORD *)(result + 72) = *(_DWORD *)a1;
    *(_WORD *)(result + 76) = *(_WORD *)(a1 + 4);
    sub_36FA0((Type_AE400_29795*)result, 223);
    sub_37130((Type_AE400_29795*)v2, 256, 256);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    *(_WORD *)(v2 + 76) = sub_11F50((axis_3d*)(__int16 *)(v2 + 72)) + 640;
    *(_DWORD *)(v2 + 150) = *(_DWORD *)(v2 + 72);
    *(_WORD *)(v2 + 154) = *(_WORD *)(v2 + 76);
    v3 = 9377 * *(_DWORD *)(v2 + 4) + 9439;
    *(_DWORD *)(v2 + 4) = v3;
    sub_41EC0_42200((axis_3d*)(_WORD *)(v2 + 150), v3 & 0x7FF, 0, -32768);
    return v2;
  }
  return result;
}

//----- (0003B3D0) --------------------------------------------------------
int sub_3B3D0(uint16_t* a1)
{
  return (int)NewEvent_372C0();
}

//----- (0003B3E0) --------------------------------------------------------
int sub_3B3E0(uint16_t* a1)
{
  int v1; // eax
  _WORD *v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 38;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 36;
    *(_DWORD *)(v1 + 8) = 8;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_WORD *)(v1 + 44) = -1536;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 41);
    sub_37130((Type_AE400_29795*)v2, 512, 512);
  }
  return (int)v2;
}

//----- (0003B460) --------------------------------------------------------
int sub_3B460(uint16_t* a1)
{
  _BYTE *v1; // eax
  int v2; // ebx
  char v3; // ah

  v1 = (_BYTE *)(int)NewEvent_372C0();
  v2 = (int)v1;
  if ( v1 )
  {
    v1[70] = 40;
    v1[64] = 10;
    v1[65] = 38;
    v3 = v1[16] & 0xF7;
    *(_DWORD *)(v2 + 8) = 32;
    *(_BYTE *)(v2 + 16) = v3;
    sub_41CF0_42030((Type_AE400_29795*)v2, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 272);
    sub_37130((Type_AE400_29795*)v2, 512, 512);
  }
  return v2;
}

//----- (0003B4D0) --------------------------------------------------------
int sub_3B4D0(uint16_t* a1)
{
  int v1; // eax
  _WORD *v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 35;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 33;
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    RefillLife_36DE0((Type_AE400_29795*)v1);
    sub_37130((Type_AE400_29795*)v2, 512, 512);
  }
  return (int)v2;
}

//----- (0003B5A0) --------------------------------------------------------
int sub_3B5A0(uint16_t* a1)//20C5A0_
{
  int result; // eax
  int v2; // ebx
  int v3; // edx

  result = (int)NewEvent_372C0();
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 41;
    *(_BYTE *)(result + 64) = 10;
    *(_BYTE *)(result + 65) = 39;
    *(_BYTE *)(result + 66) = 10;
    *(_BYTE *)(result + 67) = 39;
    *(_WORD *)(result + 46) = 128;
    v3 = dword_AE408_AE3F8();
    *(_DWORD *)(result + 140) = 512;
    if ( (*(_BYTE *)(v3 + 1) & 2) != 0 )
      *(_DWORD *)(result + 140) = 2500;
    *(_WORD *)(result + 126) = 32;
    *(_WORD *)(result + 28) = 3;
    *(_BYTE *)(result + 58) = 0x80;
    *(_BYTE *)(result + 59) = 0;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_274D0((Type_AE400_29795*)v2);
    return v2;
  }
  return result;
}
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0003B620) --------------------------------------------------------
int sub_3B620(uint16_t* a1)
{
  int result; // eax
  _WORD *v2; // ebx

  result = (int)NewEvent_372C0();
  v2 = (_WORD *)result;
  if ( result )
  {
    *(_BYTE *)(result + 70) = 42;
    *(_BYTE *)(result + 64) = 10;
    *(_BYTE *)(result + 65) = 40;
    *(_WORD *)(result + 26) = (result - (dword_AE400_AE3F0() + 29795)) / 164 % 11;
    *(_WORD *)(result + 28) = 2;
    sub_41CF0_42030((Type_AE400_29795*)result, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_37030((Type_AE400_29795*)v2, 65);
    return (int)v2;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0003B690) --------------------------------------------------------
Type_AE400_29795* sub_3B690(axis_3d* position)//20C690_
{
  Type_AE400_29795* event = NewEvent_372C0();
  if (event)
  {
      event->maxLife_29803_8 = 30;
      event->var_u8_29865_70 = 51;
      event->var_u8_29859_64 = 10;
      event->var_u8_29860_65 = 45;
      event->var_u16_29839_44 = 100;
      event->var_u16_29821_26 = 4;
      event->var_29811_16.dword = 9;
      event->var_u16_29823_28 = 33;
    sub_41CF0_42030(event, position);
    sub_36FA0(event, 177);
  }
  return event;
}

//----- (0003B6F0) --------------------------------------------------------
int sub_3B6F0(uint16_t* a1)
{
  int v1; // eax
  _WORD *v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = (_WORD *)v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 45;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 43;
    *(_DWORD *)(v1 + 8) = 8;
    *(_WORD *)(v1 + 44) = -1536;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 41);
    sub_37130((Type_AE400_29795*)v2, 512, 512);
  }
  return (int)v2;
}

//----- (0003B760) --------------------------------------------------------
int sub_3B760(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 43;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 41;
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    RefillLife_36DE0((Type_AE400_29795*)v1);
  }
  return v2;
}

//----- (0003B7B0) --------------------------------------------------------
int sub_3B7B0(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 44;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 42;
    *(_DWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_DWORD *)(v1 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v1 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v1 + 60) = 1;
    RefillLife_36DE0((Type_AE400_29795*)v1);
  }
  return v2;
}

//----- (0003B800) --------------------------------------------------------
int sub_3B800(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 46;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 44;
    *(_DWORD *)(v1 + 8) = 500;
    *(_WORD *)(v1 + 44) = 500;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 8);
  }
  return v2;
}

//----- (0003B860) --------------------------------------------------------
int sub_3B860(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 56;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 52;
    *(_DWORD *)(v1 + 8) = 100000;
    *(_WORD *)(v1 + 44) = 500;
    *(_WORD *)(v1 + 26) = 600;
    *(_DWORD *)(v1 + 140) = 500;
    *(_DWORD *)(v1 + 136) = 2000;
    *(_BYTE *)(v1 + 16) &= ~8u;
    sub_41CF0_42030((Type_AE400_29795*)v1, (axis_3d*)a1);
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_36FA0((Type_AE400_29795*)v2, 205);
  }
  return v2;
}

//----- (0003B8E0) --------------------------------------------------------
int sub_3B8E0(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 58;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 53;
    *(_DWORD *)(v1 + 8) = 128;
    *(_WORD *)(v1 + 126) = 256;
    v3 = *(_DWORD *)(v1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_WORD *)(v1 + 44) = 100;
    *(_WORD *)(v1 + 26) = 0;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    *(_WORD *)(v2 + 30) = v4 & 0x7FF;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v2 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v2 + 16) |= 1u;
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_37130((Type_AE400_29795*)v2, 1024, 0x4000);
  }
  return v2;
}

//----- (0003B970) --------------------------------------------------------
int sub_3B970(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 59;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 54;
    *(_DWORD *)(v1 + 8) = 128;
    *(_WORD *)(v1 + 126) = 256;
    v3 = *(_DWORD *)(v1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_WORD *)(v1 + 44) = 100;
    *(_WORD *)(v1 + 26) = 0;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    *(_WORD *)(v2 + 30) = v4 & 0x7FF;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v2 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v2 + 16) |= 1u;
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_37130((Type_AE400_29795*)v2, 1024, 0x4000);
  }
  return v2;
}

//----- (0003BA00) --------------------------------------------------------
int sub_3BA00(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 60;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 55;
    *(_DWORD *)(v1 + 8) = 19;
    *(_WORD *)(v1 + 126) = 256;
    v3 = *(_DWORD *)(v1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_WORD *)(v1 + 44) = 100;
    *(_WORD *)(v1 + 26) = 32;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    *(_WORD *)(v2 + 30) = v4 & 0x7FF;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v2 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v2 + 16) |= 1u;
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_37130((Type_AE400_29795*)v2, 1024, 0x4000);
  }
  return v2;
}

//----- (0003BA90) --------------------------------------------------------
int sub_3BA90(uint16_t* a1)
{
  int v1; // eax
  int v2; // ebx
  int v3; // edx
  int v4; // eax

  v1 = (int)NewEvent_372C0();
  v2 = v1;
  if ( v1 )
  {
    *(_BYTE *)(v1 + 70) = 61;
    *(_BYTE *)(v1 + 64) = 10;
    *(_BYTE *)(v1 + 65) = 56;
    *(_DWORD *)(v1 + 8) = 128;
    *(_WORD *)(v1 + 126) = 256;
    v3 = *(_DWORD *)(v1 + 4);
    *(_BYTE *)(v1 + 16) &= ~8u;
    *(_WORD *)(v1 + 44) = 100;
    *(_WORD *)(v1 + 26) = 0;
    v4 = 9377 * v3 + 9439;
    *(_DWORD *)(v2 + 4) = v4;
    *(_WORD *)(v2 + 30) = v4 & 0x7FF;
    *(_DWORD *)(v2 + 72) = *(_DWORD *)a1;
    *(_WORD *)(v2 + 76) = *(_WORD *)(a1 + 4);
    *(_BYTE *)(v2 + 16) |= 1u;
    RefillLife_36DE0((Type_AE400_29795*)v2);
    sub_37130((Type_AE400_29795*)v2, 1024, 0x4000);
  }
  return v2;
}

//----- (0003BB20) --------------------------------------------------------
Type_AE400_29795* sub_3BB20(axis_3d* position, char a2, char a3)
{
	Type_AE400_29795* event = NewEvent_372C0();
	if (event)
	{
		event->var_u8_29859_64 = 11;
		event->var_u8_29860_65 = a2;
		event->var_u8_29865_70 = a3;
		event->var_29811_16.byte[0] &= 0xF6u;
		event->var_u16_29821_26 = 0;
		event->var_29811_16.byte[0] |= 1;
		event->var_u32_29867_72 = *position;
		RefillLife_36DE0(event);
	}
	return event;
}

//----- (0003BB70) --------------------------------------------------------
Type_AE400_29795* sub_3BB70(axis_3d* position)
{
  return sub_3BB20(position, 0, 0);
}

//----- (0003BB90) --------------------------------------------------------
Type_AE400_29795* sub_3BB90(axis_3d* position)
{
  return sub_3BB20(position, 1, 1);
}

//----- (0003BBB0) --------------------------------------------------------
Type_AE400_29795* sub_3BBB0(axis_3d* position)
{
  return sub_3BB20(position, 2, 2);
}

//----- (0003BBD0) --------------------------------------------------------
Type_AE400_29795* sub_3BBD0(axis_3d* position)
{
  return sub_3BB20(position, 3, 3);
}

//----- (0003BBF0) --------------------------------------------------------
Type_AE400_29795* sub_3BBF0(axis_3d* position)
{
  return sub_3BB20(position, 4, 4);
}

//----- (0003BC10) --------------------------------------------------------
Type_AE400_29795* sub_3BC10(axis_3d* position)
{
  return sub_3BB20(position, 5, 5);
}

//----- (0003BC30) --------------------------------------------------------
Type_AE400_29795* sub_3BC30(axis_3d* position)
{
  return sub_3BB20(position, 6, 6);
}

//----- (0003BC50) --------------------------------------------------------
Type_AE400_29795* sub_3BC50(axis_3d* position)
{
  return sub_3BB20(position, 7, 7);
}

//----- (0003BC70) --------------------------------------------------------
Type_AE400_29795* sub_3BC70(axis_3d* position)
{
  return sub_3BB20(position, 8, 8);
}

//----- (0003BC90) --------------------------------------------------------
Type_AE400_29795* sub_3BC90(axis_3d* position)
{
  return sub_3BB20(position, 9, 9);
}

//----- (0003BCB0) --------------------------------------------------------
Type_AE400_29795* sub_3BCB0(axis_3d* position)
{
  return sub_3BB20(position, 10, 10);
}

//----- (0003BCD0) --------------------------------------------------------
Type_AE400_29795* sub_3BCD0(axis_3d* position)
{
  return sub_3BB20(position, 11, 11);
}

//----- (0003BCF0) --------------------------------------------------------
Type_AE400_29795* sub_3BCF0(axis_3d* position)
{
  return sub_3BB20(position, 12, 12);
}

//----- (0003BD10) --------------------------------------------------------
Type_AE400_29795* sub_3BD10(axis_3d* position)
{
  return sub_3BB20(position, 13, 13);
}

//----- (0003BD30) --------------------------------------------------------
Type_AE400_29795* sub_3BD30(axis_3d* position)
{
  return sub_3BB20(position, 14, 14);
}

//----- (0003BD50) --------------------------------------------------------
Type_AE400_29795* sub_3BD50(axis_3d* position)
{
  return sub_3BB20(position, 15, 15);
}

//----- (0003BD70) --------------------------------------------------------
Type_AE400_29795* sub_3BD70(axis_3d* position)
{
  return sub_3BB20(position, 16, 16);
}

//----- (0003BD90) --------------------------------------------------------
Type_AE400_29795* sub_3BD90(axis_3d* position)
{
  return sub_3BB20(position, 17, 17);
}

//----- (0003BDB0) --------------------------------------------------------
Type_AE400_29795* sub_3BDB0(axis_3d* position)
{
  return sub_3BB20(position, 18, 18);
}

//----- (0003BDD0) --------------------------------------------------------
Type_AE400_29795* sub_3BDD0(axis_3d* position)
{
  return sub_3BB20(position, 19, 19);
}

//----- (0003BDF0) --------------------------------------------------------
Type_AE400_29795* sub_3BDF0(axis_3d* position)
{
  return sub_3BB20(position, 20, 20);
}

//----- (0003BE10) --------------------------------------------------------
Type_AE400_29795* sub_3BE10(axis_3d* position)
{
  return sub_3BB20(position, 21, 21);
}

//----- (0003BE30) --------------------------------------------------------
Type_AE400_29795* sub_3BE30(axis_3d* position)
{
  return sub_3BB20(position, 22, 22);
}

//----- (0003BE50) --------------------------------------------------------
Type_AE400_29795* sub_3BE50(axis_3d* position)
{
  return sub_3BB20(position, 23, 23);
}

//----- (0003BE70) --------------------------------------------------------
Type_AE400_29795* sub_3BE70(axis_3d* position)
{
  return sub_3BB20(position, 24, 24);
}

//----- (0003BE90) --------------------------------------------------------
Type_AE400_29795* sub_3BE90(axis_3d* position)
{
  return sub_3BB20(position, 25, 25);
}

//----- (0003BEB0) --------------------------------------------------------
Type_AE400_29795* sub_3BEB0(axis_3d* position)
{
  return sub_3BB20(position, 26, 26);
}

//----- (0003BED0) --------------------------------------------------------
Type_AE400_29795* sub_3BED0(axis_3d* position)
{
  return sub_3BB20(position, 27, 27);
}

//----- (0003BEF0) --------------------------------------------------------
Type_AE400_29795* sub_3BEF0(axis_3d* position)
{
  return sub_3BB20(position, 28, 28);
}

//----- (0003BF10) --------------------------------------------------------
Type_AE400_29795* sub_3BF10(axis_3d* position)
{
  return sub_3BB20(position, 29, 29);
}

//----- (0003BF30) --------------------------------------------------------
Type_AE400_29795* sub_3BF30(axis_3d* position)
{
  return sub_3BB20(position, 30, 30);
}

//----- (0003BF50) --------------------------------------------------------
Type_AE400_29795* sub_3BF50(axis_3d* position)
{
  return sub_3BB20(position, 31, 31);
}

//----- (0003BF70) --------------------------------------------------------
int sub_3BF70(int a1, char a2, char a3, int a4, __int16 a5, char a6, char a7, int a8, __int16 a9)
{
  int result; // eax
  int v10; // ebx
  int v11; // ecx
  char v12; // ah

  result = (int)NewEvent_372C0();
  v10 = result;
  if ( result )
  {
    *(_BYTE *)(result + 64) = 12;
    *(_BYTE *)(result + 65) = a2;
    *(_BYTE *)(result + 70) = a3;
    *(_WORD *)(result + 44) = a9;
    *(_WORD *)(result + 50) = a5;
    *(_BYTE *)(result + 62) = a7;
    if ( a7 )
      a6 = 0;
    v11 = *(__int16 *)(result + 50);
    *(_BYTE *)(result + 60) = a6;
    *(_BYTE *)(result + 61) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(result + 140) = a4 / v11;
    *(_DWORD *)(result + 132) = a8;
    v12 = *(_BYTE *)(result + 16);
    *(_DWORD *)(v10 + 136) = a4;
    *(_BYTE *)(v10 + 16) = v12 & 0xF7;
    sub_41CF0_42030((Type_AE400_29795*)v10, (axis_3d*)a1);
    sub_36FA0((Type_AE400_29795*)v10, 77);
    sub_37130((Type_AE400_29795*)v10, 4 * *(_WORD *)(v10 + 80), 4 * *(_WORD *)(v10 + 84));
    RefillLife_36DE0((Type_AE400_29795*)v10);
    return v10;
  }
  return result;
}

//----- (0003C040) --------------------------------------------------------
int sub_3C040(int a1)
{
  return sub_3BF70(a1, 3, 9, 50, 3, 1, 0, 0, 100);
}

//----- (0003C060) --------------------------------------------------------
int sub_3C060(int a1)
{
  return sub_3BF70(a1, 16, 48, 1000, 101, 1, 0, 0, 10000);
}

//----- (0003C090) --------------------------------------------------------
int sub_3C090(int a1)
{
  return sub_3BF70(a1, 0, 0, 200, 5, 1, 0, 0, 125);
}

//----- (0003C0C0) --------------------------------------------------------
int sub_3C0C0(int a1)
{
  return sub_3BF70(a1, 2, 6, 1000, 251, 0, 0, 0, 100);
}

//----- (0003C0F0) --------------------------------------------------------
int sub_3C0F0(int a1)
{
  return sub_3BF70(a1, 1, 3, 1000, 21, 1, 0, 0, 100);
}

//----- (0003C120) --------------------------------------------------------
int sub_3C120(int a1)
{
  return sub_3BF70(a1, 10, 30, 5000, 51, 1, 0, 10000, 100);
}

//----- (0003C150) --------------------------------------------------------
int sub_3C150(int a1)
{
  return sub_3BF70(a1, 6, 18, 6000, 51, 1, 0, 120000, 6000);
}

//----- (0003C180) --------------------------------------------------------
int sub_3C180(int a1)
{
  return sub_3BF70(a1, 19, 57, 4000, 17, 1, 0, 10000, 100);
}

//----- (0003C1B0) --------------------------------------------------------
int sub_3C1B0(int a1)
{
  return sub_3BF70(a1, 4, 12, 2000, 251, 1, 0, 0, 100);
}

//----- (0003C1E0) --------------------------------------------------------
int sub_3C1E0(int a1)
{
  return sub_3BF70(a1, 7, 21, 10000, 11, 1, 0, 100000, 10000);
}

//----- (0003C210) --------------------------------------------------------
int sub_3C210(int a1)
{
  return sub_3BF70(a1, 14, 42, 1000, 101, 1, 0, 8000, 100);
}

//----- (0003C240) --------------------------------------------------------
int sub_3C240(int a1)
{
  return sub_3BF70(a1, 15, 45, 1000, 2, 0, 0, 25000, 500);
}

//----- (0003C270) --------------------------------------------------------
int sub_3C270(int a1)
{
  return sub_3BF70(a1, 11, 33, 2500, 17, 1, 0, 16000, 100);
}

//----- (0003C2A0) --------------------------------------------------------
int sub_3C2A0(int a1)
{
  return sub_3BF70(a1, 13, 39, 500, 11, 1, 0, 20000, 100);
}

//----- (0003C2D0) --------------------------------------------------------
int sub_3C2D0(int a1)
{
  return sub_3BF70(a1, 12, 36, 5000, 251, 1, 0, 50000, 100);
}

//----- (0003C300) --------------------------------------------------------
int sub_3C300(int a1)
{
  return sub_3BF70(a1, 9, 27, 12000, 31, 1, 0, 100000, 6000);
}

//----- (0003C330) --------------------------------------------------------
int sub_3C330(int a1)
{
  return sub_3BF70(a1, 5, 15, 3000, 101, 1, 0, 0, 100);
}

//----- (0003C360) --------------------------------------------------------
int sub_3C360(int a1)
{
  return sub_3BF70(a1, 18, 54, 20000, 33, 1, 0, 90000, 2000);
}

//----- (0003C390) --------------------------------------------------------
int sub_3C390(int a1)
{
  return sub_3BF70(a1, 8, 24, 30000, 65, 1, 0, 180000, 1000);
}

//----- (0003C3C0) --------------------------------------------------------
int sub_3C3C0(int a1)
{
  return sub_3BF70(a1, 17, 51, 13000, 13, 1, 0, 150000, 100);
}

//----- (0003C3F0) --------------------------------------------------------
int sub_3C3F0(int a1)
{
  return sub_3BF70(a1, 20, 60, 5000, 51, 1, 0, 12000, 24464);
}

//----- (0003C420) --------------------------------------------------------
int sub_3C420(int a1)
{
  return sub_3BF70(a1, 21, 63, 1000, 251, 0, 0, 0, 100);
}

//----- (0003C450) --------------------------------------------------------
int sub_3C450(int a1)
{
  return sub_3BF70(a1, 22, 66, 75000, 101, 1, 0, (int)&loc_30D40, 7000);
}

//----- (0003C480) --------------------------------------------------------
int sub_3C480(int a1)
{
  return sub_3BF70(a1, 23, 69, 600, 3, 0, 0, 50000, 50);
}

//----- (0003C4B0) --------------------------------------------------------
int sub_3C4B0(int a1)
{
  int v0; // eax
  int v1; // ebx
  int v2; // edx

  v0 = (int)NewEvent_372C0();
  v1 = v0;
  if ( v0 )
  {
    *(_BYTE *)(v0 + 70) = 0;
    *(_BYTE *)(v0 + 64) = 13;
    v2 = *(_DWORD *)(v0 + 16);
    *(_BYTE *)(v0 + 65) = 0;
    *(_DWORD *)(v0 + 16) = v2 & 1;
    RefillLife_36DE0((Type_AE400_29795*)v0);
  }
  return v1;
}

//----- (0003C4E0) --------------------------------------------------------
int sub_3C4E0(int a1)
{
  int v0; // eax
  int v1; // ebx
  int v2; // edx

  v0 = (int)NewEvent_372C0();
  v1 = v0;
  if ( v0 )
  {
    *(_BYTE *)(v0 + 70) = 1;
    *(_BYTE *)(v0 + 64) = 13;
    v2 = *(_DWORD *)(v0 + 16);
    *(_BYTE *)(v0 + 65) = 1;
    *(_DWORD *)(v0 + 16) = v2 & 1;
    RefillLife_36DE0((Type_AE400_29795*)v0);
  }
  return v1;
}

//----- (0003C510) --------------------------------------------------------
int sub_3C510(int a1)
{
  int v0; // eax
  int v1; // ebx
  int v2; // edx

  v0 = (int)NewEvent_372C0();
  v1 = v0;
  if ( v0 )
  {
    *(_BYTE *)(v0 + 70) = 2;
    *(_BYTE *)(v0 + 64) = 13;
    v2 = *(_DWORD *)(v0 + 16);
    *(_BYTE *)(v0 + 65) = 2;
    *(_DWORD *)(v0 + 16) = v2 & 1;
    RefillLife_36DE0((Type_AE400_29795*)v0);
  }
  return v1;
}

//----- (0003C540) --------------------------------------------------------
int sub_3C540(int a1)
{
  int v0; // eax
  int v1; // ebx
  int v2; // edx

  v0 = (int)NewEvent_372C0();
  v1 = v0;
  if ( v0 )
  {
    *(_BYTE *)(v0 + 70) = 3;
    *(_BYTE *)(v0 + 64) = 13;
    v2 = *(_DWORD *)(v0 + 16);
    *(_BYTE *)(v0 + 65) = 3;
    *(_DWORD *)(v0 + 16) = v2 & 1;
    RefillLife_36DE0((Type_AE400_29795*)v0);
  }
  return v1;
}

//----- (0003C570) --------------------------------------------------------
void sub_3C570()
{
  //int v0; // ebx
  //int v1; // ebx
  char* varBfMusic; // eax
  char v5[64]; // [esp+0h] [ebp-ACh] BYREF
  char pathBuffer[64];
  uint32_t v7; // [esp+A4h] [ebp-8h] BYREF

  sprintf(pathBuffer, "%s%s/sndsetup.inf", "C:", "\\carpet.cd");
  FILE* file = fopen(FixPath(pathBuffer), "r");
  if ( !file)
  {
    file = fopen(FixPath(pathBuffer), "w+t");
    fprintf(file, "SOUNDFX = none 0 0 0\n");
    fprintf(file, "MUSIC = none 388 0 0\n");
    fclose(file);
    file = fopen(FixPath(pathBuffer), "r");
  }
  fscanf(file, "%s = %s %x %d %d", &v5, &v5, &v7, &v7, &v7);
  fscanf(file, "%s = %s %x", &v5, &unk_CBF74, &dword_CBF70);
  fclose(file);
  varBfMusic = getenv("BF_MUSIC");
  if (varBfMusic)
    sscanf(varBfMusic, "%s %x", &unk_CBF74, &dword_CBF70);
  if ( !stricmp(&unk_CBF74, "none"))
  {
    byte_939CC = 0;
    byte_939CD = 0;
  }
  if ( byte_939CC )
  {
    if ( !stricmp(&unk_CBF74, "ADLIB")
      || !stricmp(&unk_CBF74, "SBLAST")
      || !stricmp(&unk_CBF74, "SBPRO")
      || !stricmp(&unk_CBF74, "ADLIBG")
      || !stricmp(&unk_CBF74, "SB16FM")
      || !stricmp(&unk_CBF74, "GRAVIS")
      || !stricmp(&unk_CBF74, "PASFM")
      || !stricmp(&unk_CBF74, "COMPATIBLE") )
    {
      sub_43B20_sub_43E60(0xA002u);
    }
    else if ( !stricmp(&unk_CBF74, "ROLAND") )
    {
      sub_43B20_sub_43E60(0xA004u);
    }
    else if ( !stricmp(&unk_CBF74, "SBAWE32") )
    {
      sub_43B20_sub_43E60(0xA008u);
    }
    else if ( !stricmp(&unk_CBF74, "GENERAL") || !stricmp(&unk_CBF74, "WBLAST") )
    {
      sub_43B20_sub_43E60(0xA001u);
    }
  }
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 61EF5: using guessed type _DWORD stricmp(_DWORD, _DWORD);
// 626D2: using guessed type __int64 fopen(_DWORD, _DWORD);
// 62781: using guessed type _DWORD fprintf(_DWORD, _DWORD, char);
// 627A6: using guessed type _DWORD fclose(_DWORD);
// 629CF: using guessed type _DWORD fscanf(_DWORD, _DWORD, ...);
// 629F4: using guessed type _DWORD getenv(_DWORD);
// 62ABD: using guessed type _DWORD sscanf(_DWORD, _DWORD, ...);
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// CBF70: using guessed type int dword_CBF70;

//----- (0003C800) --------------------------------------------------------
void sub_3C800_sub_3CB40()
{
    //__int64 v3; // rax
    //int v4; // ebx
    //int v5; // ebx
    char* v6; // eax
    //int result; // eax
    char v8[64]; // [esp+0h] [ebp-A8h] BYREF
    char pathBuffer[68]; // [esp+64h] [ebp-44h] BYREF

    sprintf(pathBuffer, "%s%s/sndsetup.inf", "C:", "\\carpet.cd");
    FILE* file = fopen(FixPath(pathBuffer), "r");
  //v4 = v3;
  if ( !file)
  {
      file = fopen(FixPath(pathBuffer), "w+t");
    fprintf(file, "SOUNDFX = none 0 0 0\n");
    fprintf(file, "MUSIC = none 388 0 0\n");
    fclose(file);
    file = fopen(FixPath(pathBuffer), "r");
    //v4 = v3;
  }
  fscanf(file, "%s = %s %x %d %d", &v8, unk_CC158x, &dword_CC14C, &dword_CC150, &dword_CC1BC);
  fclose(file);
  v6 = getenv("BF_SOUND");
  if ( v6 )
    sscanf((const char*)v6, "%s %x %d %d", unk_CC158x, &dword_CC14C, &dword_CC150, &dword_CC1BC);
  //result = stricmp(&unk_CC158, "none");
  if ( !stricmp(unk_CC158x, "none"))
  {
    byte_939E4 = 0;
    byte_939E5 = 0;
  }
  if ( byte_939E4 )
    sub_43EC0_44200();
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 61EF5: using guessed type _DWORD stricmp(_DWORD, _DWORD);
// 626D2: using guessed type __int64 fopen(_DWORD, _DWORD);
// 62781: using guessed type _DWORD fprintf(_DWORD, _DWORD, char);
// 627A6: using guessed type _DWORD fclose(_DWORD);
// 629CF: using guessed type _DWORD fscanf(_DWORD, _DWORD, ...);
// 629F4: using guessed type _DWORD getenv(_DWORD);
// 62ABD: using guessed type _DWORD sscanf(_DWORD, _DWORD, ...);
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CC14C: using guessed type int dword_CC14C;
// CC150: using guessed type int dword_CC150;
// CC1BC: using guessed type int dword_CC1BC;

//----- (0003C9D0) --------------------------------------------------------
void sub_3C9D0_3CD10()//20D9D0_
{
  //int v0; // ebx
  //_BYTE *v1; // ebp
  char *v2; // edx
  //int i; // ebx
  char *v4; // esi
  char* v5; // edi
  //int v6; // eax
  //int v7; // edx
  //int v8; // eax
  int v9; // ebx
  //int v10; // ecx
  int v11; // eax
  //int v12; // ebx
  //_BYTE *v13; // edi
  Type_AE400_29795* actEvent; // ebp
  //int v15; // eax
  char *v16; // esi
  //_BYTE *v17; // eax
  //char v18; // dh
  char *v19; // esi
  char *v20; // edi
  //char v21; // al
  //char v22; // al
  //int v23; // eax
  char v24; // dh
  unsigned int v25; // kr08_4
  char *v26; // esi
  const char *v27; // edi
  char *v28; // edi
  //char v29; // al
  //char v30; // al
  //int v31; // eax
  //char v32; // cl
  //char v33; // dl
  //char v34; // bl
  //char v35; // cl
  //int v36; // eax
  //unsigned __int16 v37; // dx
  //int v38; // ebx
  //int v39; // eax
  //int v40; // edx
  //_BYTE *v41; // ebx
  __int16 j; // di
  //int v43; // eax
  //int v44; // eax
  //int v45; // edx
  //int v46; // eax
  //int v47; // edx
  unsigned __int16 v48; // di
  //int k; // eax
  //int v50; // eax
  int v51x; // esi
  int v52x; // ebx
  Type_AE400_29795* v53x; // eax
  Type_AE400_29795* v54x; // ecx
  //int v55; // esi
  __int16 v56; // ax
  __int16 v57; // bx
  int v58; // ecx
  //unsigned int m; // ecx
  //int v60; // eax
  //int v61; // ebx
  //int v62; // edx
  Type_AE400_29795* ifsEvent; // eax
  //int v64; // eax
  //int v65; // ebx
  //int v66; // edx
  //unsigned int n; // eax
  int v68; // edx
  int v69; // ebx
  int v70; // eax
  //Type_AE400_29795* iix; // eax
  //int v72; // edx
  //int v73; // ebx
  //int v74; // eax
  //unsigned int jj; // eax
  //int v76; // edx
  //int v77; // ebx
  //int v78; // eax
  //int v79; // eax
  //int v80; // edx
  //int v81; // ebx
  //int v82; // edx
  //int v83; // eax
  //int v84; // ebx
  //int v85; // edx
  //int v86; // ebx
  //int v87; // ecx
  //int v88; // esi
  //__int64 v89; // rax
  //int v90; // esi
  //__int64 v91; // rax
  char v92; // bl
  //int v93; // eax
  //__int16 v94; // cx
  //_BYTE *v95; // esi
  //int result; // eax
  __int16 v97; // [esp-4h] [ebp-144h]
  __int16 v98; // [esp-4h] [ebp-144h]
  __int16 v99; // [esp-4h] [ebp-144h]
  char v100[256]; // [esp+0h] [ebp-140h] BYREF
  int v101; // [esp+100h] [ebp-40h]
  //_BYTE *v102; // [esp+104h] [ebp-3Ch]
  int v102x;
  //int v103; // [esp+108h] [ebp-38h]
  int v104x; // [esp+10Ch] [ebp-34h]
  //char *v105; // [esp+110h] [ebp-30h]
  int v105x;
  //int v106; // [esp+114h] [ebp-2Ch]
  int v106x;
  int v107; // [esp+118h] [ebp-28h]
  int v108; // [esp+11Ch] [ebp-24h]
  unsigned __int16 v109; // [esp+120h] [ebp-20h]
  char v110; // [esp+124h] [ebp-1Ch]
  char v111; // [esp+128h] [ebp-18h]
  char v112; // [esp+12Ch] [ebp-14h]


  //adress 20D9DC
         //debug
#ifdef debug1
  //add_compare(0x20D9DC, true);
#endif debug1
  //debug

  //fix
  v19 = 0;
  //fix

  v112 = 0;
  //str_AE408_AE3F8->var_u8_29
  //str_AE400_AE3F0->str_13323->str_14357
  if ( (str_AE408_AE3F8->var_u8_0 & 0x10) != 0 )
  {
      str_AE408_AE3F8->var_u32_157 = dword_AC5D4_AC5C4;
    sub_43930((uint8**)&str_AE400_AE3F0->var_29715, 0xAu);
    //v0 = dword_AE400_AE3F0();
    str_AE408_AE3F8->var_u32_157 = dword_AC5D4_AC5C4 - str_AE408_AE3F8->var_u32_157;
    //v1 = str_AE400_AE3F0->var_29715;
    int v1x = 0;
    v111 = 0;
    //v2 = str_AE400_AE3F0->str_13323->str_14357;
    int v2x = 0;
    v109 = 0;
    //for ( i = v0 + 13323; ; i += 2049 )
    //str_AE400_AE3F0->str_13323[ix]
    for(int ix = 0 ; v109 < str_AE400_AE3F0->var_u16_10; ix++)
    {
      //v6 = dword_AE400_AE3F0();
      if (str_AE400_AE3F0->var_29715[v1x][0] == 1 )
      {
        str_AE400_AE3F0->str_13323[ix].var_u8_13329_6 = 1;
        if ( v109 == str_AE400_AE3F0->var_u16_8)
        {
          if (str_AE408_AE3F8->var_u8_29)
          {
            v4 = str_AE408_AE3F8->var_u8_61;
            v5 = str_AE400_AE3F0->str_13323[v2x].str_14357;
          }
          else
          {
            v5 = str_AE400_AE3F0->str_13323[v2x].str_14357;
            v4 = off_99B68[v109];
          }
          qmemcpy(v5, v4, 0xCu);
          str_AE400_AE3F0->str_13323[ix].str_14369_1046[0] = 0;
        }
        v111 = 1;
      }
      //v1 += 10;
      v1x++;
      //v2 += 2049;
      v2x++;
      v109++;
    }
    if ( v111 )
      sub_43930((uint8**)&str_AE400_AE3F0->str_13323, 0x801u);
  }
      //v7 = dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8;
      //v8 = dword_AE408_AE3F8();
      //++*(_DWORD *)(v7 + 13341);
  str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u32_13341_18++;
  str_AE408_AE3F8->var_u32_4.dword++;
  for(v9 = 1; v9 < 16; v9++)
  {
    //v10 = dword_AE400_AE3F0();
    v110 = (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u32_13341_18 / v9) & 1;
    str_AE408_AE3F8->str_93.var_u8[v9] = v110;
    
    //v11 = dword_AE408_AE3F8() + (__int16)v9++;
    //*(_BYTE *)(v11 + 93) = v110;
  }
  //v102 = (uint8*)&str_AE400_AE3F0->var_29715;
  v102x = 0;
  //str_AE400_AE3F0->var_29715[v102x];
  //v102 = (_BYTE *)(v10 + 29715);
  //v106 = v10 + 13323;
  //v106 = str_AE400_AE3F0->str_13323;
  //str_AE400_AE3F0->str_13323[v106x]
  v106x = 0;
  v108 = 0;
  //v105 = (char *)(v10 + 14357);
  //v105 = str_AE400_AE3F0->str_13323[xxx].str_14357;
  //str_AE400_AE3F0->str_13323[v105x].str_14357
  v105x = 0;
  //while ( 1 )
  for(; v108 < str_AE400_AE3F0->var_u16_10;)
  {
    //v12 = (int)&str_AE400_AE3F0->str_13323[v106x];
    //v13 = (uint8*)&str_AE400_AE3F0->var_29715[v102x];
    //str_AE400_AE3F0->str_29795[];
    //v14 = dword_AE400_AE3F0() + 29795 + 164 * str_AE400_AE3F0->str_13323[v106x].var_u16_13333;
    actEvent = &str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[v106x].playIndex_13333];
    sub_3E9D0(str_AE400_AE3F0->var_29715[v102x]);
    str_AE400_AE3F0->str_13323[v106x].var_14422_1099 = 0;
    switch (str_AE400_AE3F0->var_29715[v102x][0])
    {
      case 1:
        //v15 = dword_AE400_AE3F0();
        str_AE400_AE3F0->str_13323[v106x].var_u8_13329_6 = 1;
        if ( v108 == str_AE400_AE3F0->var_u16_8)
        {
          if (str_AE408_AE3F8->var_u8_29[0])
            v16 = str_AE408_AE3F8->var_u8_61;
          else
            v16 = off_99B68[(unsigned __int16)v108];
          qmemcpy(str_AE400_AE3F0->str_13323[v105x].str_14357, v16, 0xCu);
          //*(_BYTE *)(v106 + 1046) = 0;
          str_AE400_AE3F0->str_13323[v106x].str_14369_1046[0] = 0;
        }
        goto LABEL_23;
      case 2:
        sub_3DD10();
        if ( str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
            str_AE400_AE3F0->str_13323[v106x].var_u8_13327 = 1;
        v97 = v108;
        actEvent->actLife_29807_12 = -1;
        sub_43760(v97);
        //*(_BYTE *)(v106 + 6) = 0;
        str_AE400_AE3F0->str_13323[v106x].var_u8_13329_6 = 0;
        goto LABEL_150;
      case 3:
        goto LABEL_23;
      case 4:
          str_AE400_AE3F0->str_13323[v106x].v_13328_5 ^= str_AE400_AE3F0->var_29715[v102x][1];
        goto LABEL_150;
      case 7:
        if (str_AE400_AE3F0->var_29715[v102x][1] + str_AE400_AE3F0->str_13323[v106x].var_u16_13337_14 >= 0
          && str_AE400_AE3F0->var_29715[v102x][1] + str_AE400_AE3F0->str_13323[v106x].var_u16_13337_14 < str_AE400_AE3F0->str_13323[v106x].var_u16_13339_16 - 1 )
        {
            str_AE400_AE3F0->str_13323[v106x].var_u16_13337_14 += str_AE400_AE3F0->var_29715[v102x][1];
        }
        goto LABEL_150;
      case 8:
          str_AE400_AE3F0->str_13323[v106x].str_13895_572[0].fov_12 += str_AE400_AE3F0->var_29715[v102x][1];
        goto LABEL_150;
      case 0xA:
        if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
          sub_3E410_3E750(10000);
        goto LABEL_150;
      case 0xB:
        if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
          sub_3E350(10000);
        goto LABEL_150;
      case 0xC:
        if ( (str_AE408_AE3F8->var_u8_0 & 0x20) == 0 && v108 == str_AE400_AE3F0->var_u16_8 )
        {
            str_AE408_AE3F8->var_u32_36378 = 0;
            str_AE408_AE3F8->var_u8_0 |= 2;
        }
        goto LABEL_150;
      case 0xE:
        v112 = 1;
        goto LABEL_150;
      case 0xF:
        if (actEvent->var_u32_29955_160->var_50)
          goto LABEL_23;
        if ( (str_AE408_AE3F8->var_u8_0 & 0x10) != 0 )
          goto LABEL_45;
        //*(_BYTE *)(v106 + 2) |= 0xCu;
        str_AE400_AE3F0->str_13323[v106x].var_u16_13325 |= 0xCu;
    LABEL_23:
        //adress 20D9D0
        //debug
#ifdef debug1
        //add_compare(0x20DC7D, true);
#endif debug1
        //debug

        sub_44D30(&str_AE400_AE3F0->str_13323[v106x], actEvent);
        //adress 0x20DC8F
        //debug
#ifdef debug1
        //add_compare(0x20DC8F, true);
#endif debug1
        //debug
        sub_3DC90(&str_AE400_AE3F0->str_13323[v106x], 0);
        goto LABEL_150;
      case 0x10:
        memset((void*)&str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108], 0, 68);
        sub_3DC90(&str_AE400_AE3F0->str_13323[v106x], 3);
        str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].periods_13415 = 32000;
        str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].drawType_13417 = 1;
        goto LABEL_150;
      case 0x11:
        v24 = str_AE400_AE3F0->var_29715[v102x][1];
        if ( v24 == 8 )
        {
          v25 = strlen(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28) + 1;
          if ( v25 != 1 )
              str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28[v25-2] = 0;
            //*(_BYTE *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 68 * (unsigned __int16)v108 + v25 - 1 + 13350) = 0;
        }
        else if ( v24 && strlen(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28) < 0x3F )
        {
          sprintf(v100, "%c", (char)str_AE400_AE3F0->var_29715[v102x][1]);
          v26 = v100;
          v27 = str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28;
          v28 = (char *)&v27[strlen(v27)];
          strcpy(v28,v26);
          /*do
          {
            v29 = *v26;
            *v28 = *v26;
            if ( !v29 )
              break;
            v30 = v26[1];
            v26 += 2;
            v28[1] = v30;
            v28 += 2;
          }
          while ( v30 );*/
        }
        //v31 = v106 + 68 * (unsigned __int16)v108;
        str_AE400_AE3F0->str_13323[v106x].messages_13351_28[v108].periods_13415 = 32000;
        str_AE400_AE3F0->str_13323[v106x].messages_13351_28[v108].drawType_13417 = 1;
        goto LABEL_150;
      case 0x12:
        memset((void*)&str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108], 0, 68);
        str_AE400_AE3F0->str_13323[v106x].messages_13351_28[v108].periods_13415 = 0;
        str_AE400_AE3F0->str_13323[v106x].messages_13351_28[v108].drawType_13417 = 0;
        sub_3DC90(&str_AE400_AE3F0->str_13323[v106x], 0);
        goto LABEL_150;
      case 0x13:
        if ( (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28[0] == 'Q'
           || str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28[0] == 'q')
          && (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28[1] == 'U'
           || str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28[1] == 'u')
          && (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28[2] == 'I'
           || str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28[2] == 'i')
          && (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28[3] == 'C'
           || str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28[3] == 'c')
          && (str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28[4] == 'K'
           || str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28[4] == 'k') )
        {
          //v36 = dword_AE400_AE3F0();
          //v37 = v108;
          //v38 = 68 * v108;
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].periods_13415 = 0;
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].drawType_13417 = 0;
          if (v108 == str_AE400_AE3F0->var_u16_8)
              str_AE408_AE3F8->var_u8_1 |= 0x80u;
        }
        else
        {
          //v39 = dword_AE400_AE3F0();
          //v40 = 68 * v108;
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].periods_13415 = 200;
            str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].drawType_13417 = 3;
        }
        sub_3DC90(&str_AE400_AE3F0->str_13323[v106x], 0);
        goto LABEL_150;
      case 0x14:
        sub_3DC90(&str_AE400_AE3F0->str_13323[v106x], str_AE400_AE3F0->var_29715[v102x][1]);
        goto LABEL_150;
      case 0x15:
        if (str_AE400_AE3F0->var_29715[v102x][1] != -1 )
        {
          actEvent->var_u32_29955_160->var_u16_2043_940 = str_AE400_AE3F0->var_29715[v102x][1];
          sub_55370_558A0(0, str_AE400_AE3F0->str_13323[v106x].var_u16_13330_7, 14);
          sub_3DC90(&str_AE400_AE3F0->str_13323[v106x], 0);
        }
        goto LABEL_150;
      case 0x16:
        if (str_AE400_AE3F0->var_29715[v102x][1] != -1 )
        {
          actEvent->var_u32_29955_160->var_u16_2047_944 = str_AE400_AE3F0->var_29715[v102x][1];
          sub_55370_558A0(0, str_AE400_AE3F0->str_13323[v106x].var_u16_13330_7, 14);
          sub_3DC90(&str_AE400_AE3F0->str_13323[v106x], 0);
        }
        goto LABEL_150;
      case 0x17:
        if (str_AE400_AE3F0->var_29715[v102x][2] != -1 )
        {
          //v41 = (uint8*)&str_AE400_AE3F0->var_29715[v102x];
          for ( j = 0; j < 24; j++ )
          {
            //v43 = actEvent->var_u32_29955_160 + j;
            if (str_AE400_AE3F0->var_29715[v102x][2] == actEvent->var_u32_29955_160->var_15198_1875_772[j])
                actEvent->var_u32_29955_160->var_15198_1875_772[j] = -1;
          }
          actEvent->var_u32_29955_160->var_15198_1875_772[str_AE400_AE3F0->var_29715[v102x][1]] = str_AE400_AE3F0->var_29715[v102x][2];
          sub_55370_558A0(0, str_AE400_AE3F0->str_13323[v106x].var_u16_13330_7, 14);
        }
        goto LABEL_150;
      case 0x18:
        sub_3DD10();
        //v44 = *(_DWORD *)(v14 + 160);
        //v45 = v44 + (char)v13[1];
        //actEvent->var_u32_29955_160->var_772[v13[1]] = v102[2];
        if (actEvent->var_u32_29955_160->var_15198_1875_772[str_AE400_AE3F0->var_29715[v102x][1]] != -1 )
        {
          actEvent->var_u32_29955_160->var_u16_2043_940 = actEvent->var_u32_29955_160->var_15198_1875_772[str_AE400_AE3F0->var_29715[v102x][1]];
          actEvent->var_u32_29955_160->var_844[str_AE400_AE3F0->str_29795[actEvent->var_u32_29955_160->var_14958_1635_532[actEvent->var_u32_29955_160->var_15198_1875_772[str_AE400_AE3F0->var_29715[v102x][1]]]].var_u8_29860_65] = 32;
          /* *(_BYTE *)(*(char *)(164
                             * *(_DWORD *)(*(_DWORD *)(v14 + 160)
                                         + 4 * *(char *)((char)v13[1] + *(_DWORD *)(v14 + 160) + 772)
                                         + 532)
                             + dword_AE400_AE3F0()
                             + 29860)
                   + *(_DWORD *)(v14 + 160)
                   + 844) = 32;*/
        }
        goto LABEL_87;
      case 0x19:
        sub_3DD10();
        //v46 = *(_DWORD *)(v14 + 160);
        //v47 = v46 + (char)v13[1];
        if (actEvent->var_u32_29955_160->var_15198_1875_772[str_AE400_AE3F0->var_29715[v102x][1]] != -1 )
        {
          actEvent->var_u32_29955_160->var_u16_2047_944 = actEvent->var_u32_29955_160->var_15198_1875_772[str_AE400_AE3F0->var_29715[v102x][1]];
          //str_AE400_AE3F0->str_29795[actEvent->var_u32_29955_160->u32_532[actEvent->var_u32_29955_160->var_772[v13[1]]]].var_u8_29860_65 = 32;
          //x = actEvent->var_u32_29955_160->var_772[v13[1]]
          //y = actEvent->var_u32_29955_160->var_532[x]
          //z = str_AE400_AE3F0->str_29795[0].var_u8_29860_65
          actEvent->var_u32_29955_160->var_844[str_AE400_AE3F0->str_29795[actEvent->var_u32_29955_160->var_14958_1635_532[actEvent->var_u32_29955_160->var_15198_1875_772[str_AE400_AE3F0->var_29715[v102x][1]]]].var_u8_29860_65] = 32;
          /**(_BYTE *)(*(char *)(164
                             * *(_DWORD *)(*(_DWORD *)(v14 + 160)
                                         + 4 * *(char *)((char)v13[1] + *(_DWORD *)(v14 + 160) + 772)
                                         + 532)
                             + dword_AE400_AE3F0()
                             + 29860)
                   + *(_DWORD *)(v14 + 160)
                   + 844) = 32;*/
        }
LABEL_87:
        sub_55370_558A0(0, str_AE400_AE3F0->str_13323[v106x].var_u16_13330_7, 14);
        
        goto LABEL_150;
      case 0x1A:        
        for (v48 = 0; v48 < str_AE400_AE3F0->var_u16_10; v48++ )
        {
          //v50 = 2049 * v48 + dword_AE400_AE3F0();
          if (str_AE400_AE3F0->str_13323[v48].var_u8_13329_6)
          {
              str_AE400_AE3F0->str_13323[v48].var_u8_13327 = 1;
            sub_43760(v48);
          }
        }
        goto LABEL_150;
      case 0x1B:
        sub_3DD10();
        v98 = v108;
        str_AE400_AE3F0->str_13323[v106x].var_u16_13325 = 10;
        sub_43760(v98);
        goto LABEL_150;
      case 0x1C:
        v99 = v108;
        str_AE400_AE3F0->str_13323[v106x].var_u16_13325 = 12;
        sub_43760(v99);
        goto LABEL_150;
      case 0x1D:
      LABEL_45:
        v19 = dword_AE238_AE228[62];
        v20 = str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[actEvent->var_u32_29955_160->var_48].messageText_13351_28;
        strcpy(v20,v19);
        //v23 = dword_AE400_AE3F0();
        //str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13415;
        //str_AE400_AE3F0->var_u16_8
        //actEvent->var_u32_29955_160->var_48
        str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[actEvent->var_u32_29955_160->var_48].periods_13415 = 100;
        str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[actEvent->var_u32_29955_160->var_48].drawType_13417 = 0;
        str_AE400_AE3F0->str_13323[v106x].var_u16_13325 = 8;
        sub_43760(v108);
        str_AE400_AE3F0->str_13323[v106x].var_u8_13329_6 = 0;
        goto LABEL_150;
      case 0x1E:
        sub_3DD10();
        if (actEvent->var_u8_29865_70 || actEvent->actLife_29807_12 <= 0 )
          goto LABEL_150;
        break;
      default:
        goto LABEL_150;
    }
    int v103x;
    switch (str_AE400_AE3F0->var_29715[v102x][1] )
    {
      case 1:
        v103x = 0;
        v104x = 0;
        do
        {
          if ( !actEvent->var_u32_29955_160->var_676.var_u16[v103x] )
          {
            v51x = v104x;
            v52x = 0;
            v101 = 0;
            while ( 1 )
            {
              if ( !actEvent->var_u32_29955_160->var_14958_1635_532[v52x] )
              {
                //v53x = (Type_AE400_29795*)(*(int (**)(int))((char *)&off_987DE + v51))((int)&actEvent->var_u32_29867_72);
                v53x = off_987DE[v51x].adress(&actEvent->var_u32_29867_72);
                v54x = v53x;
                if ( v53x )
                  break;
              }
              //v52 += 4;
              v52x++;
              ++v101;
              if ( v52x >= 24 )
                goto LABEL_110;
            }
            v53x->var_29811_16.dword |= 0x40001;
            //str_AE400_AE3F0->str_29795
            //v55 = dword_AE400_AE3F0() + 29795;
            v107 = 164;
            v56 = actEvent - str_AE400_AE3F0->str_29795;
            v54x->var_u16_29927_132 = 0;
            v54x->var_u16_29837_42 = v56;
            actEvent->var_u32_29955_160->var_14958_1635_532[v52x] = v54x - str_AE400_AE3F0->str_29795;
            v57 = 0;
            while ( 1 )
            {
              //v58 = (int)actEvent->var_u32_29955_160 + v57;
              //if ( *(char *)(v58 + 772) == -1 )
              if (actEvent->var_u32_29955_160->var_15198_1875_772[v57] == -1)
                break;
              if ( ++v57 >= 10 )
                goto LABEL_110;
            }
            actEvent->var_u32_29955_160->var_15198_1875_772[v57] = v101;
          }
LABEL_110:
          v103x++;
          v104x++;
        }
        while ( v103x != 24 );
        //str_AE400_AE3F0->str_29795[mx]
        //for ( m = dword_AE400_AE3F0() + 29959; ; m += 164 )
        for (int mx = 1; mx< 1000; mx++)
        {
          //v60 = dword_AE400_AE3F0();
          //if ( m >= dword_AE400_AE3F0() + 193795 )
            //break;
          if (str_AE400_AE3F0->str_29795[mx].var_u8_29859_64 == 11 )
              str_AE400_AE3F0->str_29795[mx].var_29811_16.byte[0] &= ~1u;
        }
        //v61 = (unsigned __int16)v108;
        if (str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
        {
          //v62 = 68 * v108;
          str_AE400_AE3F0->str_13323[v108].messages_13351_28[v108].periods_13415 = 100;
          str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].drawType_13417 = 0;
          strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28, ".. CHEAT: access all spells");
        }
        break;
      case 2:
          ifsEvent = sub_373F0(&actEvent->var_u32_29867_72, 10, 39);
        if (ifsEvent)
        {
            ifsEvent->var_u32_29935_140 = 100000;
            ifsEvent->var_u16_29939_144 = actEvent - str_AE400_AE3F0->str_29795;
        }
        //HIWORD(v65) = 0;
        actEvent->var_u32_29935_140 = actEvent->var_u32_29931;
        //v64 = dword_AE400_AE3F0();
        //LOWORD(v65) = v108;
        if (str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
        {
          //v66 = 68 * v65;
          str_AE400_AE3F0->str_13323[v108].messages_13351_28[v108].periods_13415 = 100;
          //*(_WORD *)(dword_AE400_AE3F0() + 2049 * v108 + 68 * v108 + 13415) = 100;
          //*(_WORD *)(68 * v108 + dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13417) = 0;
          str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].drawType_13417 = 0;
          strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28, ".. CHEAT: more mana");
        }
        break;
      case 3:
          for (Type_AE400_29795* evLoop = str_AE408_AE3F8->var_u32_36462[0]; evLoop > str_AE400_AE3F0->str_29795; evLoop= evLoop->next)
        //for ( n = *(_DWORD *)(dword_AE408_AE3F8() + 36462); ; n = *(_DWORD *)n )
        {
          v68 = dword_AE400_AE3F0();
          //if ( n <= str_AE400_AE3F0->str_29795)
          //  break;
          if (evLoop->id_29819_24 != actEvent->id_29819_24 && evLoop->var_u8_29860_65 <= 1u )
          evLoop->actLife_29807_12 = -1;
        }
        v69 = (unsigned __int16)v108;
        if ( str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
        {
          v70 = 68 * (unsigned __int16)v108;
          *(_WORD *)(dword_AE400_AE3F0() + 2049 * (unsigned __int16)v108 + v70 + 13415) = 100;
          *(_WORD *)(v68 + 2049 * *(__int16 *)(v68 + 8) + v70 + 13417) = 0;
          strcpy((char *)(2049 * *(__int16 *)(v68 + 8) + v68 + 68 * v69 + 13351), ".. CHEAT: destroy all players");
        }
        break;
      case 4:
        for (Type_AE400_29795* evLoop = str_AE408_AE3F8->var_u32_36462[0]; evLoop > str_AE400_AE3F0->str_29795; evLoop = evLoop->next )
        {
          if (evLoop->id_29819_24 != actEvent->id_29819_24 && evLoop->var_u8_29860_65 == 2 )
              evLoop->actLife_29807_12 = -1;
        }
        //v73 = (unsigned __int16)v108;
        if ( str_AE400_AE3F0->var_u16_8 == v108 )
        {
          //v74 = 68 * (unsigned __int16)v108;

          //*(_WORD *)(dword_AE400_AE3F0() + 2049 * (unsigned __int16)v108 + v74 + 13415) = 100;
          //*(_WORD *)(dword_AE400_AE3F0() + 2049 * *(__int16 *)(v72 + 8) + v74 + 13417) = 0;
          //strcpy((char *)(2049 * *(__int16 *)(v72 + 8) + v72 + 68 * v73 + 13351), ".. CHEAT: destroy all castles");

          str_AE400_AE3F0->str_13323[v108].messages_13351_28[v108].periods_13415 = 100;
          str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].drawType_13417 = 0;
          strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28, ".. CHEAT: destroy all castles");
        }
        break;
      case 5:
        for (Type_AE400_29795* evLoop = str_AE408_AE3F8->var_u32_36462[0]; evLoop > str_AE400_AE3F0->str_29795; evLoop = evLoop->next)
        {
          //v76 = dword_AE400_AE3F0();
          if (evLoop->id_29819_24 != actEvent->id_29819_24 && evLoop->var_u8_29860_65 == 3 )
              evLoop->actLife_29807_12 = -1;
        }
        //v77 = (unsigned __int16)v108;
        if (str_AE400_AE3F0->var_u16_8 == v108 )
        {
          //v78 = 68 * (unsigned __int16)v108;
          //*(_WORD *)(dword_AE400_AE3F0() + 2049 * (unsigned __int16)v108 + v78 + 13415) = 100;
          //*(_WORD *)(v76 + 2049 * *(__int16 *)(v76 + 8) + v78 + 13417) = 0;
          //strcpy((char *)(2049 * *(__int16 *)(v76 + 8) + v76 + 68 * v77 + 13351), ".. CHEAT: destroy all balloons");

          str_AE400_AE3F0->str_13323[v108].messages_13351_28[v108].periods_13415 = 100;
          str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].drawType_13417 = 0;
          strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28, ".. CHEAT: destroy all balloons");
        }
        break;
      case 6:
        //HIWORD(v80) = 0;
        actEvent->actLife_29807_12 = str_AE400_AE3F0->var_u16_8;
        //v79 = dword_AE400_AE3F0();
        //LOWORD(v80) = v108;
        if (str_AE400_AE3F0->var_u16_8 == (unsigned __int16)v108 )
        {
          //v81 = 2049 * v80;
          //v82 = 68 * v80;
          str_AE400_AE3F0->str_13323[v108].messages_13351_28[v108].periods_13415 = 100;
          str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].drawType_13417 = 0;
          strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28, ".. CHEAT: heal");
        }
        break;
      case 7:
        sub_194F0();
        //v83 = dword_AE400_AE3F0();
        //v84 = (unsigned __int16)v108;
        if (str_AE400_AE3F0->var_u16_8 == v108 )
        {
          str_AE400_AE3F0->str_13323[v108].messages_13351_28[v108].periods_13415 = 100;
          str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].drawType_13417 = 0;
          strcpy(str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].messages_13351_28[v108].messageText_13351_28, ".. CHEAT: Kill all creatures");
        }
        break;
      default:
        break;
    }
LABEL_150:
    //20EB27
    int rollEnv = 2 * str_AE400_AE3F0->var_29715[v102x][3] - actEvent->var_u32_29955_160->u16_327;
    actEvent->var_u32_29955_160->word_0x4_4 = (rollEnv - (my_sign32(rollEnv) << 2) + my_sign32(rollEnv)) >> 2;
    int pitchEnv = 2 * str_AE400_AE3F0->var_29715[v102x][4] - actEvent->var_u32_29955_160->u16_329;
    actEvent->var_u32_29955_160->word_0x6_6 = (pitchEnv - (my_sign32(pitchEnv) << 2) + my_sign32(pitchEnv)) >> 2;
    actEvent->var_u32_29955_160->dw_0.dword = str_AE400_AE3F0->var_29715[v102x][5];
    if ( str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 || v112 )
    {
      v92 = v112;
      sub_3EC50();
      if ( v92 )
      {
        str_AE408_AE3F8->var_u8_0 &= ~2u;
        str_AE408_AE3F8->var_u16_13++;
      }
    }
    //adress 20DC0E
       //debug
#ifdef debug1
    //add_compare(0x20EC0E, true);
#endif debug1
    //debug
    //str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[v106x].var_u16_13333]

    // 164 * str_AE400_AE3F0->str_13323[v106x].var_u16_13333y + dword_AE400 + 29795)

    sub_41B20(&str_AE400_AE3F0->str_13323[v106x], &str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[v106x].playIndex_13333]);
    //v95 = str_AE400_AE3F0->var_29715[v102x];
    memset(str_AE400_AE3F0->var_29715[v102x], 0, 10);
    //str_AE400_AE3F0->var_29715[v102x] = v95 + 10;
    v102x++;
    //v105 += 2049;
    v105x++;
    //v106 += 2049;
    v106x++;
    v108++;
  }
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 987DE: using guessed type int (*off_987DE)(int);
// 99B68: using guessed type char *off_99B68[8];
// AC5D4: using guessed type int dword_AC5D4_AC5C4;
// AE330: using guessed type int dword_AE330;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0003DC90) --------------------------------------------------------
void sub_3DC90(TypeStrAE400_13323* a1x, char a2)
{
    a1x->var_14421_1098 = a2;
  if (a1x->var_u16_13330_7 == str_AE400_AE3F0->var_u16_8)
  {
    if (a1x->var_14421_1098 == 2 )
    {
      sub_5C05C_5C56C(&begPointersTab_AE450_AE440_26C450_26C440[1]);
      sub_31A00_31A40();
    }
    else
    {
      sub_5C05C_5C56C(&begPointersTab_AE450_AE440_26C450_26C440[0]);
      sub_59720_59C30();
      sub_31A60_31AA0();
    }
    sub_55370_558A0(0, a1x->var_u16_13330_7, 14);
  }
  sub_3DD10();
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE450: using guessed type int begPointersTab_AE450_AE440_26C450_26C440;

//----- (0003DD10) --------------------------------------------------------
void sub_3DD10()
{
  if ( (str_AE408_AE3F8->var_u32_4.byte[0] & 7) == 0 )
  {
    if ( (str_AE408_AE3F8->var_u8_24 & 3) == 1 )
    {
      if ( !sub_11050())
      {
          str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 = 2;
      }
    }
  }
}
// 3DD2C: variable 'v0' is possibly undefined
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0003DD50) --------------------------------------------------------
void sub_3DD50()//20ED50_
{
  //int v0; // ebx
  int v1; // edi
  //int v2; // eax
  //char *v3; // edi
  //char *v4; // esi
  //char v5; // al
  //char v6; // al
  //__int16 v7; // ax
  //int v8; // esi
  //int v9; // esi
  //_BYTE *v10; // eax
  int v11; // esi
  __int16 v12; // dx
  char v13; // cl
  uint8 v14; // eax
  //int v15; // edi
  int result; // eax
  //char *v17; // [esp+0h] [ebp-44h]
  //int v18; // [esp+4h] [ebp-40h]
  //int v19; // [esp+Ch] [ebp-38h]
  //int v20; // [esp+10h] [ebp-34h]
  int v21; // [esp+14h] [ebp-30h]
  //int v22; // [esp+1Ch] [ebp-28h]
  //_BYTE *v23; // [esp+20h] [ebp-24h]
  //int v24; // [esp+24h] [ebp-20h]
  //int v25; // [esp+28h] [ebp-1Ch]
  unsigned __int16 v26; // [esp+2Ch] [ebp-18h]
  unsigned __int16 v27; // [esp+30h] [ebp-14h]

  //str_AE400_AE3F0->str_11274[v23x];
  int v23x = 0;
  //v0 = str_AE400_AE3F0->str_13323;
  int v0x = 0;
  //v17 = str_AE400_AE3F0->str_13323[v23x].var_15318_1995_892;
  //&str_AE400_AE3F0->str_13323[v23x].var_15318_1995_892[v17x]
  int v17x = 0;
  //v18 = str_AE400_AE3F0->str_13323[v23x].str_14357;
  //&str_AE400_AE3F0->str_13323[v23x].str_14357[v18x];
  int v18x = 0;
  v27 = 0;
  //v22 = str_AE400_AE3F0->str_13323[v23x].var_u32_13419;
  //&str_AE400_AE3F0->str_13323[v23x].var_u32_13419[v22x];
  int v22x = 0;
  do
  {
    memset(str_AE400_AE3F0->var_29715[v23x], 0, 10);
    //v1 = str_AE400_AE3F0->str_11274.var_u32_13347_24;
    qmemcpy((void*)&str_AE400_AE3F0->str_11274, (const void *)&str_AE400_AE3F0->str_13323[v0x], 2049);
    //*(_BYTE *)(v1 + 2048) = *(_BYTE *)(v0 + 2048);
    memset((void*)&str_AE400_AE3F0->str_13323[v0x], 0, 2049);
    qmemcpy(&str_AE400_AE3F0->str_13323[v23x].str_1103.var_15318_1995_892[v17x], str_AE400_AE3F0->str_11274.str_1103.var_15318_1995_892, 24);
    //v2 = dword_AE400_AE3F0();
    str_AE400_AE3F0->str_13323[v0x].var_u32_13347_24 = str_AE400_AE3F0->str_11274.var_u32_13347_24;
    str_AE400_AE3F0->var_29715[v23x][0] = 1;
    str_AE400_AE3F0->str_13323[v0x].var_u16_13330_7 = v27;
    if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 && v27 != str_AE400_AE3F0->var_u16_8)
        str_AE400_AE3F0->str_13323[v0x].var_u8_13332_9 = 1;
    str_AE400_AE3F0->str_13323[v0x].var_u16_13339_16 = 32;
    str_AE400_AE3F0->str_13323[v0x].var_u16_13337_14 = str_AE400_AE3F0->str_13323[v0x].var_u16_13339_16 - 1;
    str_AE400_AE3F0->str_13323[v0x].str_13895_572[0].fov_12 = 128;
    strcpy(str_AE400_AE3F0->str_13323[v23x].str_14357, off_99B68[v27]);
    /*v3 = &str_AE400_AE3F0->str_13323[v23x].str_14357[v18x];
    v4 = off_99B68[v27];
    do
    {
      v5 = *v4;
      *v3 = *v4;
      if ( !v5 )
        break;
      v6 = v4[1];
      v4 += 2;
      v3[1] = v6;
      v3 += 2;
    }
    while ( v6 );*/
    for(int i = 0; i < str_AE400_AE3F0->str_13323[v0x].var_u16_13339_16; i++)
    //v7 = 0;
    //while ( 1 )
    {
      //v8 = v7;
      //if ( v7 >= str_AE400_AE3F0->str_13323[v0x].var_u16_13339_16)
      //  break;
      //str_AE400_AE3F0->str_13323[v0x].str_13909_586[v8].var_u32_13895_572
      str_AE400_AE3F0->str_13323[v0x].str_13895_572[i+1] = str_AE400_AE3F0->str_13323[v0x].str_13895_572[0];
      //str_AE400_AE3F0->str_13323[v0x].str_13909_586[i].var_u32_13899_576 = str_AE400_AE3F0->str_13323[v0x].str_13895_572.var_u32_13899_576;
      //str_AE400_AE3F0->str_13323[v0x].str_13909_586[i].var_u32_13903_580 = str_AE400_AE3F0->str_13323[v0x].str_13895_572.var_u32_13903_580;
      //str_AE400_AE3F0->str_13323[v0x].str_13909_586[i].var_u16_13907_584 = str_AE400_AE3F0->str_13323[v0x].str_13895_572.var_u16_13907_584;
      //++v7;
    }
    //v9 = v0;//str_AE400_AE3F0->str_13323[v0x].str_1103.var_u16_2047_944
    //int v9x = 0;
    for (int i = 0; i < 24; i++)
    //do
    {
        //v9 += 4;
        str_AE400_AE3F0->str_13323[v0x].str_1103.var_14958_1635_532[i] = -1;
        //v9x++;
      //*(_DWORD *)(v9 + 1631) = -1;
    }
    //while ((int)&str_AE400_AE3F0->str_13323[v0x+v9x] != str_AE400_AE3F0->str_13323[v23x].var_u32_13419[v22x]);//fix it!!
    str_AE400_AE3F0->str_13323[v0x].str_1103.var_u16_2043_940 = 255;
    //v10 = (_BYTE *)dword_AE408_AE3F8();
    str_AE400_AE3F0->str_13323[v0x].str_1103.var_u16_2047_944 = 255;
    if ( (str_AE408_AE3F8->var_u8_0 & 0x10) != 0 )
      v26 = 0;
    else
      v26 = v27;
    //v19 = v0;
    //v24 = v0;
    //v20 = v0;
    int v19x = 0;
    int v24x = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = 0;
      v14 = byte_99B88[v11];
      str_AE400_AE3F0->str_13323[v0x].str_1103.var_15198_1875_772[v19x] = -1;
      //v21 = v0 + v14;
      if (str_AE400_AE3F0->str_13323[v0x].var_u8_13332_9 == 1 )
      {
        //v15 = dword_AE400_AE3F0();
          //str_AE400_AE3F0->str_193795.str_230867_37072[v26].var_230983[v14]
        str_AE400_AE3F0->str_13323[v0x].str_1103.var_15222_1899_796[v14] = str_AE400_AE3F0->str_193795.str_230867_37072[v26].var_230983[v14];//tj. 0x38647 230983
        if (str_AE400_AE3F0->str_193795.str_230867_37072[v26].var_230883[v14] && str_AE400_AE3F0->str_13323[v0x].str_1103.var_15222_1899_796[v14])//385e3 tj. 230883
          goto LABEL_27;
      }
      else
      {
        //v25 = v14 + 216 * v26 + dword_AE400_AE3F0();
        if (str_AE400_AE3F0->str_193795.str_230867_37072[v26].var_230983[v14] != 1 )//fix it may be v25 + 0x38647 tj. 230983
          goto LABEL_28;
        if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
        {
          if ( !str_AE400_AE3F0->str_13323[v0x].str_1103.var_15318_1995_892[v14])
            goto LABEL_28;
LABEL_27:
          v13 = 1;
          goto LABEL_28;
        }
        if (str_AE400_AE3F0->str_193795.str_230867_37072[v26].var_230883[v14] && str_AE400_AE3F0->str_193795.str_230867_37072[v26].var_230983[v14])
          goto LABEL_27;
      }
LABEL_28:
      if ( v13 )
      {
        str_AE400_AE3F0->str_13323[v0x].str_1103.var_14958_1635_532[v24x] = v14;
        if (str_AE400_AE3F0->str_13323[v0x].str_1103.var_u16_2043_940 == 255 )
        {
            str_AE400_AE3F0->str_13323[v0x].str_1103.var_u16_2043_940 = v12;
        }
        else if (str_AE400_AE3F0->str_13323[v0x].str_1103.var_u16_2047_944 == 255 )
        {
            str_AE400_AE3F0->str_13323[v0x].str_1103.var_u16_2047_944 = v12;
        }
        str_AE400_AE3F0->str_13323[v0x].str_1103.var_15198_1875_772[v12] = v12;//fix v20
        //++v20;
        ++v12;
        //v24 += 4;
        v24x++;
      }
      //result = v19 + 1;
      ++v11;
      v19x++;
    }
    while ( v11 < 24 );
    //v0 += 2049;
    v0x++;
    //v23 += 10;
    v23x++;
    //v17 += 2049;
    v17x++;
    //v18 += 2049;
    v18x++;
    //v22 += 2049;
    v22x++;
    ++v27;
  }
  while ( v27 < 8u );
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 99B68: using guessed type char *off_99B68[8];
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

void LoadLevel_3E100(int level, void* buffer)
{
  char pathBuffer[80];
  uint32_t* tabBuffer = (uint32_t*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  if (level < 1000 )
  {
    sprintf(pathBuffer, "%s%s/%s/levels.dat", "C:", "\\carpet.cd", "levels");
    FILE* fileDat = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 512);
    if (fileDat == nullptr )
    {
        fileDat = DataFileIO::CreateOrOpenFile(FixPath((char*)"levels/levels.dat"), 512);
      if (fileDat == nullptr)
        return;
    }
    sprintf(pathBuffer, "%s%s/%s/levels.tab", "C:", "\\carpet.cd", "levels");
    FILE* fileTab = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 512);
    if (fileTab == nullptr)
    {
        fileTab = DataFileIO::CreateOrOpenFile(FixPath((char*)"levels/levels.tab"), 512);
      if (fileTab == nullptr)
      {
        DataFileIO::Close(fileDat);
        return;
      }
    }
    DataFileIO::Read(fileTab, (uint8_t*)tabBuffer, 4000);
    DataFileIO::Close(fileTab);
    if ( DataFileIO::FileLengthBytes )
    {
      DataFileIO::Seek(fileDat, tabBuffer[level], 0);
      DataFileIO::Read(fileDat, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, tabBuffer[level + 1] - tabBuffer[level]);
      if ( RncUnpack_62B60_63070(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC) < 0 )
      {
        printf("ERROR decompressing levels.dat\n");
        return;
      }
      qmemcpy(buffer, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 38812);
      memset((void*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0, 38812);
    }
    DataFileIO::Close(fileDat);
  }
}

//----- (0003E350) --------------------------------------------------------
char sub_3E350(__int16 saveSlot)//20F350_
{
  char result; // al
  //int v2; // ebx
  //_DWORD *v3; // eax
  //_DWORD *v4; // edi
  char pathBuffer[512];
  //int v6; // [esp+40h] [ebp-30h]
  //int v7; // [esp+44h] [ebp-2Ch]
  //int v8; // [esp+48h] [ebp-28h]
  //int v9; // [esp+4Ch] [ebp-24h]
  //int v10; // [esp+50h] [ebp-20h]
  //int v11; // [esp+54h] [ebp-1Ch]
  //int v12; // [esp+58h] [ebp-18h]
  //int v13; // [esp+5Ch] [ebp-14h]
  //int v14; // [esp+60h] [ebp-10h]

  result = sub_3E460(saveSlot);
  if ( result )
  {
    sprintf(pathBuffer, "%s/gam%05d.dat", "movie", saveSlot);
    //str_AE400_AE3F0->rand_4
    Type_str_AE400_AE3F0_0 temp0 = str_AE400_AE3F0->var_0;
    //v2 = *(_DWORD *)dword_AE400_AE3F0();

    Type_settings tempSet = str_AE400_AE3F0->set;
    /*
    v12 = *(_DWORD*)(dword_AE400_AE3F0() + 8597);
    v13 = *(_DWORD *)(dword_AE400_AE3F0() + 8601);
    v14 = *(_DWORD *)(dword_AE400_AE3F0() + 8605);
    v9 = *(_DWORD *)(dword_AE400_AE3F0() + 8609);
    v10 = *(_DWORD *)(dword_AE400_AE3F0() + 8613);
    v11 = *(_DWORD *)(dword_AE400_AE3F0() + 8617);
    v6 = *(_DWORD *)(dword_AE400_AE3F0() + 8621);
    v7 = *(_DWORD *)(dword_AE400_AE3F0() + 8625);
    v8 = *(_DWORD *)(dword_AE400_AE3F0() + 8629);*/
    sub_3EEA0_3F1E0(pathBuffer, (uint8_t*)str_AE400_AE3F0);
    str_AE400_AE3F0->var_0 = temp0;
    str_AE400_AE3F0->set = tempSet;
    /*
    v3 = (_DWORD *)dword_AE400_AE3F0();
    v4 = (_DWORD *)(dword_AE400_AE3F0() + 8597);
    *(_DWORD *)(dword_AE400_AE3F0() + 8597) = v12;
    *++v4 = v13;
    v4[1] = v14;
    *(_DWORD *)((char *)v3 + 8609) = v9;
    *(_DWORD *)((char *)v3 + 8613) = v10;
    *(_DWORD *)((char *)v3 + 8617) = v11;
    *(_DWORD *)((char *)v3 + 8621) = v6;
    *(_DWORD *)((char *)v3 + 8625) = v7;
    *(_DWORD *)((char *)v3 + 8629) = v8;*/
    //*v3 = v2;
    sub_416B0();
    sub_37220_375E0();
    str_AE400_AE3F0->var_u32_4593 = -1;
    return 1;
  }
  return result;
}

//----- (0003E410) --------------------------------------------------------
void sub_3E410_3E750(__int16 saveSlot)
{
  char pathBuffer[512];
  sprintf(pathBuffer, "%s/gam%05d.dat", "movie", saveSlot);
  sub_62E60_63370(pathBuffer, (uint8*)str_AE400_AE3F0, sizeof(str_AE400_AE3F0));
}

//----- (0003E460) --------------------------------------------------------
char sub_3E460(__int16 saveSlot)
{
  char pathBuffer[512];
  sprintf(pathBuffer, "%s/gam%05d.dat", "movie", saveSlot);
  FILE* file = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 512);
  if (file == nullptr )
    return 0;
  DataFileIO::Close(file);
  return 1;
}

//----- (0003E4B0) --------------------------------------------------------
char sub_3E4B0(__int16 saveSlot)
{
  char result;
  char pathBuffer[512];
  result = sub_3E640(saveSlot);
  if ( result )
  {
    sprintf(pathBuffer, "%s/map%05d.dat", "movie", saveSlot);
    FILE* file = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 512);
    DataFileIO::Read(file, (uint8_t*)mapTerrainType_CC1E0_CC1D0, 0x10000);
    DataFileIO::Read(file, (uint8_t*)mapHeightmap_DC1E0_DC1D0, 0x10000);
    DataFileIO::Read(file, (uint8_t*)mapShading_EC1E0_EC1D0, 0x10000);
    DataFileIO::Read(file, (uint8_t*)mapAngle_FC1E0_FC1D0, 0x10000);
    DataFileIO::Read(file, (uint8_t*)mapEntityIndex_10C1E0_10C1D0, 0x20000);
    DataFileIO::Read(file, (uint8_t*)byte_B5D40x, 4802);
    DataFileIO::Close(file);
    return 1;
  }
  return result;
}

//----- (0003E580) --------------------------------------------------------
char sub_3E580(__int16 saveSlot)
{
  char pathBuffer[512];
  sprintf(pathBuffer, "%s/map%05d.dat", "movie", saveSlot);
  FILE* file = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 546);
  FileWrite_62ED0_633E0(file, (uint8_t*)mapTerrainType_CC1E0_CC1D0, 0x10000);
  FileWrite_62ED0_633E0(file, (uint8_t*)mapHeightmap_DC1E0_DC1D0, 0x10000);
  FileWrite_62ED0_633E0(file, (uint8_t*)mapShading_EC1E0_EC1D0, 0x10000);
  FileWrite_62ED0_633E0(file, (uint8_t*)mapAngle_FC1E0_FC1D0, 0x10000);
  FileWrite_62ED0_633E0(file, (uint8_t*)mapEntityIndex_10C1E0_10C1D0, 0x20000);
  FileWrite_62ED0_633E0(file, (uint8_t*)byte_B5D40x, 4802);
  DataFileIO::Close(file);
  return 0;
}

//----- (0003E640) --------------------------------------------------------
char sub_3E640(__int16 saveSlot)
{
  char pathBuffer[512];
  sprintf(pathBuffer, "%s/map%05d.dat", "movie", saveSlot);
  FILE* file = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 512);
  if (file == nullptr )
    return 0;
  DataFileIO::Close(file);
  return 1;
}

//----- (0003E690) --------------------------------------------------------
char sub_3E690_3E9D0(__int16 saveSlot)//20F690_
{
  char result; // al
  //int v2; // ebx
  //_DWORD *v3; // eax
  //_DWORD *v4; // edi
  char pathBuffer[512];
  //int v6; // [esp+40h] [ebp-30h]
  //int v7; // [esp+44h] [ebp-2Ch]
  //int v8; // [esp+48h] [ebp-28h]
  //int v9; // [esp+4Ch] [ebp-24h]
  //int v10; // [esp+50h] [ebp-20h]
  //int v11; // [esp+54h] [ebp-1Ch]
  //int v12; // [esp+58h] [ebp-18h]
  //int v13; // [esp+5Ch] [ebp-14h]
  //int v14; // [esp+60h] [ebp-10h]

  result = sub_3E7A0(saveSlot);
  if ( result )
  {
    sprintf(pathBuffer, "c:/CARPET.CD/%s/gam%05d.dat", "save", saveSlot);
    Type_str_AE400_AE3F0_0 temp0 = str_AE400_AE3F0->var_0;
    //str_AE400_AE3F0->reflections_8597
    Type_settings tempSet = str_AE400_AE3F0->set;
    /*v12 = *(_DWORD*)(dword_AE400_AE3F0() + 8597);
    v13 = *(_DWORD *)(dword_AE400_AE3F0() + 8601);
    v14 = *(_DWORD *)(dword_AE400_AE3F0() + 8605);
    v9 = *(_DWORD *)(dword_AE400_AE3F0() + 8609);
    v10 = *(_DWORD *)(dword_AE400_AE3F0() + 8613);
    v11 = *(_DWORD *)(dword_AE400_AE3F0() + 8617);
    v6 = *(_DWORD *)(dword_AE400_AE3F0() + 8621);
    v7 = *(_DWORD *)(dword_AE400_AE3F0() + 8625);
    v8 = *(_DWORD *)(dword_AE400_AE3F0() + 8629);*/
    sub_3EEA0_3F1E0(pathBuffer, (uint8_t*)str_AE400_AE3F0);
    //v3 = (_DWORD *)dword_AE400_AE3F0();
    //v4 = (_DWORD *)(dword_AE400_AE3F0() + 8597);
    str_AE400_AE3F0->var_0 = temp0;
    str_AE400_AE3F0->set = tempSet;
    //*(_DWORD *)(dword_AE400_AE3F0() + 8597) = v12;
    //*++v4 = v13;
    //v4[1] = v14;
    /*
    *(_DWORD *)((char *)dword_AE400_AE3F0() + 8609) = v9;
    *(_DWORD *)((char *)dword_AE400_AE3F0() + 8613) = v10;
    *(_DWORD *)((char *)dword_AE400_AE3F0() + 8617) = v11;
    *(_DWORD *)((char *)dword_AE400_AE3F0() + 8621) = v6;
    *(_DWORD *)((char *)dword_AE400_AE3F0() + 8625) = v7;
    *(_DWORD *)((char *)dword_AE400_AE3F0() + 8629) = v8;*/
    
    sub_416B0();
    //adress 20F733_
                //debug
#ifdef debug1
        //add_compare(0x20F733, true);
#endif debug1
        //debug
    sub_37220_375E0();
    str_AE400_AE3F0->var_u32_4593 = -1;
    return 1;
  }
  return result;
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (0003E750) --------------------------------------------------------
void sub_3E750_3EA90(__int16 saveSlot)
{
  char pathBuffer[512];
  sprintf(pathBuffer, "c:/CARPET.CD/%s/gam%05d.dat", "save", saveSlot);
  sub_62E60_63370(pathBuffer, (uint8*)str_AE400_AE3F0, sizeof(Type_str_AE400_AE3F0));
}

//----- (0003E7A0) --------------------------------------------------------
char sub_3E7A0(__int16 saveSlot)
{
  char pathBuffer[512];
  sprintf(pathBuffer, "c:/CARPET.CD/%s/gam%05d.dat", "save", saveSlot);
  FILE* file = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 512);
  if (file == nullptr )
    return 0;
  DataFileIO::Close(file);
  return 1;
}

//----- (0003E7F0) --------------------------------------------------------
char sub_3E7F0_3EB30(__int16 saveSlot)
{
  char pathBuffer[512];
  char result = sub_3E980(saveSlot);
  if ( result )
  {
    sprintf(pathBuffer, "c:/CARPET.CD/%s/map%05d.dat", "save", saveSlot);
    FILE* file = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 512);
    DataFileIO::Read(file, (uint8_t*)mapTerrainType_CC1E0_CC1D0, 0x10000);
    DataFileIO::Read(file, (uint8_t*)mapHeightmap_DC1E0_DC1D0, 0x10000);
    DataFileIO::Read(file, (uint8_t*)mapShading_EC1E0_EC1D0, 0x10000);
    DataFileIO::Read(file, (uint8_t*)mapAngle_FC1E0_FC1D0, 0x10000);
    DataFileIO::Read(file, (uint8_t*)mapEntityIndex_10C1E0_10C1D0, 0x20000);
    DataFileIO::Read(file, (uint8_t*)byte_B5D40x, 4802);
    DataFileIO::Close(file);
    return 1;
  }
  return result;
}

//----- (0003E8C0) --------------------------------------------------------
char sub_3E8C0_3EC00(__int16 saveSlot)
{
  char pathBuffer[512];
  sprintf(pathBuffer, "c:/CARPET.CD/%s/map%05d.dat", "save", saveSlot);
  FILE* file = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 546);
  FileWrite_62ED0_633E0(file, (uint8_t*)mapTerrainType_CC1E0_CC1D0, 0x10000);
  FileWrite_62ED0_633E0(file, (uint8_t*)mapHeightmap_DC1E0_DC1D0, 0x10000);
  FileWrite_62ED0_633E0(file, (uint8_t*)mapShading_EC1E0_EC1D0, 0x10000);
  FileWrite_62ED0_633E0(file, (uint8_t*)mapAngle_FC1E0_FC1D0, 0x10000);
  FileWrite_62ED0_633E0(file, (uint8_t*)mapEntityIndex_10C1E0_10C1D0, 0x20000);
  FileWrite_62ED0_633E0(file, (uint8_t*)byte_B5D40x, 7*7*7*7*2);
  DataFileIO::Close(file);
  return 0;
}

//----- (0003E980) --------------------------------------------------------
char sub_3E980(__int16 saveSlot)
{
  char pathBuffer[512];
  sprintf(pathBuffer, "c:/CARPET.CD/%s/map%05d.dat", "save", saveSlot);
  FILE* file = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 512);
  if (file == nullptr )
    return 0;
  DataFileIO::Close(file);
  return 1;
}

//----- (0003E9D0) --------------------------------------------------------
void sub_3E9D0(char a1[10])
{
  char pathBuffer[512];  
  if ( (str_AE408_AE3F8->var_u8_0 & 4) != 0 )
  {
    if (!str_AE408_AE3F8->var_u32_9 && !((a1- str_AE400_AE3F0->var_29715[0]) / 10))
    {
      sprintf(pathBuffer, "%s/mvi%05d.dat", "movie", str_AE408_AE3F8->var_u16_13);
      str_AE408_AE3F8->var_u32_9 = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 512);
      if (str_AE408_AE3F8->var_u32_9 == nullptr )
      {
        str_AE408_AE3F8->var_u32_9 = nullptr;
        str_AE408_AE3F8->var_u8_0 &= 0xFB;
        return;
      }
      sub_3E350(str_AE408_AE3F8->var_u16_13);
      sub_3E4B0(str_AE408_AE3F8->var_u16_13);
      sub_59420_59930();
      FlvInitSet_356E0_35AA0();
    }
    if (str_AE408_AE3F8->var_u32_9)
    {
      if ( a1[0] == 2 )
      {
        sub_3EC50();
        str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 = 8;
        a1[0] = 0;
        return;
      }
      if ( DataFileIO::Read(str_AE408_AE3F8->var_u32_9, (uint8*)a1, 10) != 10 )
      {
        sub_3EC50();
        str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 = 8;
        a1[0] = 0;
      }
      if ( a1[0] == 2 || sub_35710() )
      {
        sub_3EC50();
        str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u16_13325 = 8;
        a1[0] = 0;
      }
    }
  }
  else
  {
    if ( (str_AE408_AE3F8->var_u8_0 & 2) == 0 )
      return;
    if (!str_AE408_AE3F8->var_u32_9 && !((a1 - str_AE400_AE3F0->var_29715[0]) / 10))
    {
      sprintf(pathBuffer, "%s/mvi%05d.dat", "movie", str_AE408_AE3F8->var_u16_13);
      str_AE408_AE3F8->var_u32_9 = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 546);
      if (str_AE408_AE3F8->var_u32_9 == nullptr )
      {
        str_AE408_AE3F8->var_u32_9 = nullptr;
        str_AE408_AE3F8->var_u8_0 &= 0xFD;
        return;
      }
      sub_593B0_598C0();
      sub_3E410_3E750(str_AE408_AE3F8->var_u16_13);
      sub_3E580(str_AE408_AE3F8->var_u16_13);
      sub_37220_375E0();
      str_AE400_AE3F0->var_u32_4593 = -1;
      str_AE408_AE3F8->var_u8_161 = 3;
      str_AE408_AE3F8->var_u32_162 = 200;
    }
    if (str_AE408_AE3F8->var_u32_9)
    {
      if ( FileWrite_62ED0_633E0(str_AE408_AE3F8->var_u32_9, (uint8*)a1, 10) != 10 )
        sub_3EC50();
      if ( a1[0] == 12 )
          a1[0] = 0;
    }
  }
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0003EC50) --------------------------------------------------------
_BYTE *sub_3EC50()
{
  _BYTE *result; // eax
  char v1; // dl

  result = (_BYTE *)dword_AE408_AE3F8();
  if ( *(_DWORD *)(dword_AE408_AE3F8() + 9) )
  {
    DataFileIO::Close((FILE*)(*(_DWORD *)(dword_AE408_AE3F8() + 9)));
    result = (_BYTE *)dword_AE408_AE3F8();
    v1 = str_AE408_AE3F8->var_u8_0;
    *(_DWORD *)(dword_AE408_AE3F8() + 9) = 0;
    *result = v1 & 0xF9;
  }
  return result;
}
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0003EC80) --------------------------------------------------------
int access_3EC80_3EFC0(char* a1)
{
  return access(a1, 0);
}
// 62F18: using guessed type _DWORD access(_DWORD, _DWORD);

void CreateGameDir_3EC90_3EFD0(uint8_t diskChar, char* dir1, char* dir2)
{
    char textBuffer1[144];
    char textBuffer2[144];

    if (dos_getdiskfree(diskChar - 64, 0))
        return;
    sprintf(textBuffer1, "%c:%s", diskChar, dir1);
    if (access_3EC80_3EFC0(FixPath(textBuffer1)) <= -1)
    {
        if (mkdir(FixPath(textBuffer1)))
            return;
        strcpy(textBuffer2, textBuffer1);
        strcpy(&textBuffer2[strlen(textBuffer2)], "/");
        strcpy(&textBuffer2[strlen(textBuffer2)], dir2);
        if ((access_3EC80_3EFC0(FixPath(textBuffer2)) & 0x8000u) != 0 && mkdir(FixPath(textBuffer2)))
            return;
    }
    else
    {
        strcpy(textBuffer2, textBuffer1);
        strcpy(&textBuffer2[strlen(textBuffer2)], "/");
        strcpy(&textBuffer2[strlen(textBuffer2)], dir2);
        if ((access_3EC80_3EFC0(FixPath(textBuffer2)) & 0x8000u) != 0 && mkdir(FixPath(textBuffer2)))
            return;
    }
}

int counter_3EEA0_3F1E0 = 0;
//----- (0003EEA0) --------------------------------------------------------
int sub_3EEA0_3F1E0(char* path, uint8_t* buffer)//20FEA0_
{
    if (dword_12DF8C_12DF7C[0xfb] != 0)
    {
        counter_3EEA0_3F1E0++;
        counter_3EEA0_3F1E0--;
    }
    if (counter_3EEA0_3F1E0 == 0x33)
    {
        counter_3EEA0_3F1E0++;
        counter_3EEA0_3F1E0--;
    }
    counter_3EEA0_3F1E0++;
  FILE* file = DataFileIO::CreateOrOpenFile(FixPath(path), 512);
  if (file != nullptr )
  {
      int fileLenght = DataFileIO::FileLengthBytes(file);
    DataFileIO::Read(file, buffer, fileLenght);
    DataFileIO::Close(file);
    int fileLenght2 = RncUnpack_62B60_63070(buffer, buffer);
    if (fileLenght2 >= 0 )
    {
      if ( !fileLenght2)
        return fileLenght;
      return fileLenght2;
    }
    else
    {
        //if (fileLenght2 == -1) return fileLenght;
      printf("ERROR decompressing %s\n", path);
      return -2;
    }
  }
  return -1;
}
// 5CC03: using guessed type _DWORD printf(const char *, ...);
// 62AE2: using guessed type _DWORD DataFileIO::FileLengthBytes(_DWORD);

//----- (0003EF20) --------------------------------------------------------
int sub_3EF20_3F260()
{
  return 1;
}

bool access_3EF30_3F270(char* a1)
{
  return (unsigned __int16)access(a1, 0) == 0;
}

char sub_3EF50_3F290(char *a1, char *a2, const char *a3)
{
  int writed;
  int blockSize;
  int percent;
  char textBuffer1[144];
  char textBuffer2[144];
  char textBuffer3[100];
  int index;

  if ( !access_3EF30_3F270(a1) )
    return 2;
  if ( !access_3EF30_3F270(a2) )
    return 1;
  sprintf(textBuffer1, "%s/%s.tab", a1, a3);
  sprintf(textBuffer2, "%s/%s.tab", a2, a3);
  FILE* file = DataFileIO::CreateOrOpenFile(textBuffer1, 512);
  if (file == nullptr )
    return 3;
  FILE* file2 = DataFileIO::CreateOrOpenFile(textBuffer2, 546);
  if (file2 == nullptr )
    return 3;
  int filesize = DataFileIO::FileLengthBytes(file);
  int filesize2 = DataFileIO::Read(file, begWscreen_2ECFF4_2ECFE4, filesize);
  FileWrite_62ED0_633E0(file2, begWscreen_2ECFF4_2ECFE4, filesize2);
  DataFileIO::Close(file);
  DataFileIO::Close(file2);
  sprintf(textBuffer1, "%s/%s.dat", a1, a3);
  sprintf(textBuffer2, "%s/%s.dat", a2, a3);
  file = DataFileIO::CreateOrOpenFile(textBuffer1, 512);
  if (file != nullptr )
  {
      file2 = DataFileIO::CreateOrOpenFile(textBuffer2, 546);
    if (file2 != nullptr )
    {
        writed = 0;
      filesize = DataFileIO::FileLengthBytes(file);
      index = filesize;
      while (index)
      {
        if (index <= 64000 )
            blockSize = index;
        else
            blockSize = 64000;
        filesize2 = DataFileIO::Read(file, begWscreen_2ECFF4_2ECFE4, blockSize);
        index -= filesize2;
        FileWrite_62ED0_633E0(file2, begWscreen_2ECFF4_2ECFE4, filesize2);
        writed += filesize2;
        settextposition((__int16)dword_B76F0_B76E0, SHIWORD(dword_B76F0_B76E0));
        percent = 100 * writed / filesize;
        if (percent > 100 )
            percent = 100;
        sprintf(textBuffer3, "%d%c", percent, 37);
        outtext(textBuffer3);
      }
      DataFileIO::Close(file);
      DataFileIO::Close(file2);
    }
  }
  memset((void*)begWscreen_2ECFF4_2ECFE4, 0, 64000);
  return 0;
}

void sub_3F1D0_3F510()
{
	//fixed
	char helpStr1[20];
	char helpStr2[20];
	if (IsHiddenWord)
	{
		strcpy(helpStr1, "tmaps1-0");
		strcpy(helpStr2, "ddlevels");
	}
	else
	{
		strcpy(helpStr1, "tmaps0-0");
		strcpy(helpStr2, "levels");
	}
	//fixed

	//char textBuffer1[64];
	char textBuffer2[64];

	sprintf(textBuffer2, "%s%s/%s/%s.dat", "C:", "\\carpet.cd", "data", helpStr1);
	//sprintf(textBuffer1, "data/%s.dat", helpStr1);
	if (sub_3EF20_3F260())
	{
		sprintf(textBuffer2, "%s%s/%s", "C:", "\\carpet.cd", "data");
		dword_B76F0_B76E0 = gettextposition(outtext((char*)"Creating Setup Directories.."));
		if (!sub_3EF50_3F290((char*)"data", textBuffer2, helpStr1))
			sprintf(textBuffer2, "%s%s/%s/%s.dat", "C:", "\\carpet.cd", "data", helpStr1);
	}
	outtext((char*)"\n");
	sprintf(textBuffer2, "%s%s/%s/%s.dat", "C:", "\\carpet.cd", "levels", helpStr2);
	if (sub_3EF20_3F260())
	{
		sprintf(textBuffer2, "%s%s/%s", "C:", "\\carpet.cd", "levels");
		dword_B76F0_B76E0 = gettextposition(outtext((char*)"Setup levels.."));
		if (!sub_3EF50_3F290((char*)"levels", textBuffer2, helpStr2))
			sprintf(textBuffer2, "%s%s/%s/%s.dat", "C:", "\\carpet.cd", "levels", helpStr2);
	}
}

//----- (0003F370) --------------------------------------------------------
void sub_3F370_3F6B0()
{
  /*int result; // eax
  int v1; // [esp+0h] [ebp-38h] BYREF
  __int16 v2[14]; // [esp+1Ch] [ebp-1Ch] BYREF
  */
  FixPerifery((char*)"MOUSE RESET");
  /*
  v2[0] = 0;
  result = int386(0x33, (uint32)v2, (uint32)&v1);
  dword_9AD98 = 0;
  */
}
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 9AD98: using guessed type int dword_9AD98;
// 3F370: using guessed type __int16 var_1C[14];

//----- (0003F398) --------------------------------------------------------
void sub_3F398_3F6D8()
{
  unsigned __int16 v1; // bx
  unsigned __int16 v2; // si
  int v3; // ecx
  unsigned __int8 v4; // al

    //fix
    __int16 a1 = 0;
    //fix

    FixPerifery();

  v1 = 0;
  v2 = 0;
  __outbyte(0x201u, a1);
  v3 = 10000;
  _disable();
  while ( 1 )
  {
    v4 = __inbyte(0x201u);
    if ( (v4 & 3) == 0 )
      break;
    if ( (v4 & 1) != 0 )
      ++v1;
    if ( (v4 & 2) != 0 )
      ++v2;
    if ( !--v3 )
    {
      _enable();
      byte_B7700_B76F0 = 0;
      return;
    }
  }
  _enable();
  byte_B7700_B76F0 = 2;
  word_B770A_B76FA = v1 >> 1;
  word_B7706_B76F6 = v1 + (v1 >> 1);
  word_B770C_B76FC = v2 >> 1;
  word_B7708_B76F8 = v2 + (v2 >> 1);
}
// B7700: using guessed type char byte_B7700_B76F0;
// B7706: using guessed type __int16 word_B7706_B76F6;
// B7708: using guessed type __int16 word_B7708_B76F8;
// B770A: using guessed type __int16 word_B770A_B76FA;
// B770C: using guessed type __int16 word_B770C_B76FC;

//----- (0003F413) --------------------------------------------------------
void sub_3F413(unsigned __int8 a1)
{
  __int16 v1; // bx
  __int16 v2; // si
  int v3; // ecx
  unsigned __int8 v4; // al
  __int16 v5; // ax
  __int16 v6; // ax

  FixPerifery();

  if ( byte_B7700_B76F0 )
  {
    v1 = 0;
    v2 = 0;
    __outbyte(0x201u, a1);
    v3 = 10000;
    _disable();
    while ( 1 )
    {
      v4 = __inbyte(0x201u);
      if ( (v4 & 3) == 0 )
        break;
      if ( (v4 & 1) != 0 )
        ++v1;
      if ( (v4 & 2) != 0 )
        ++v2;
      if ( !--v3 )
      {
        _enable();
        byte_B7700_B76F0 = 0;
        goto LABEL_19;
      }
    }
    _enable();
    byte_B772A = v4;
    v5 = 0;
    if ( v1 >= word_B770A_B76FA )
    {
      if ( v1 > word_B7706_B76F6 )
        v5 = 1;
    }
    else
    {
      v5 = -1;
    }
    word_B7702_B76F2 = v5;
    v6 = 0;
    if ( v2 >= word_B770C_B76FC )
    {
      if ( v2 > word_B7708_B76F8 )
        v6 = 1;
    }
    else
    {
      v6 = -1;
    }
    word_B7704_B76F4 = v6;
  }
  else
  {
LABEL_19:
    word_B7702_B76F2 = 0;
    word_B7704_B76F4 = 0;
    byte_B772A = -1;
  }
}
// B7700: using guessed type char byte_B7700_B76F0;
// B7702: using guessed type __int16 word_B7702_B76F2;
// B7704: using guessed type __int16 word_B7704_B76F4;
// B7706: using guessed type __int16 word_B7706_B76F6;
// B7708: using guessed type __int16 word_B7708_B76F8;
// B770A: using guessed type __int16 word_B770A_B76FA;
// B770C: using guessed type __int16 word_B770C_B76FC;
// B772A: using guessed type char byte_B772A;

//----- (0003F4CE) --------------------------------------------------------
void sub_3F4CE_3F80E()
{
  __int16 v1; // bx
  __int16 v2; // cx
  __int16 v3; // si
  __int16 v4; // di
  unsigned __int8 v5; // al
  int v8; // [esp+0h] [ebp-4h]

  FixPerifery();

  v8 = 10000;
  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  __outbyte(0x201u, 0x10u);
  _disable();
  do
  {
    v5 = __inbyte(0x201u);
    if ( (v5 & 0xF) == 0 )
      break;
    if ( (v5 & 1) != 0 )
      ++v1;
    if ( (v5 & 2) != 0 )
      ++v3;
    if ( (v5 & 4) != 0 )
      ++v2;
    if ( (v5 & 8) != 0 )
      ++v4;
    --v8;
  }
  while ( v8 >= 0 );
  _enable();
  byte_B7700_B76F0 = (v5 & 3) == 0;
  byte_B7701 = (v5 & 0xC) == 0;
}
// B7700: using guessed type char byte_B7700_B76F0;
// B7701: using guessed type char byte_B7701;

//----- (0003F54D) --------------------------------------------------------
void sub_3F54D_3F88D(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  int savedregs; // [esp+8h] [ebp+0h] BYREF

  byte_B772A = sub_3F76D_3FAAD((int)&savedregs);
  word_B7702_B76F2 = a2;
  word_B7704_B76F4 = a4;
  word_B7716 = a1;
  word_B7718 = a3;
}
// B7702: using guessed type __int16 word_B7702_B76F2;
// B7704: using guessed type __int16 word_B7704_B76F4;
// B7716: using guessed type __int16 word_B7716;
// B7718: using guessed type __int16 word_B7718;
// B772A: using guessed type char byte_B772A;

//----- (0003F587) --------------------------------------------------------
void sub_3F587(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int savedregs; // [esp+8h] [ebp+0h] BYREF

  if ( byte_B7700_B76F0 )
  {
    byte_B772A = sub_3F76D_3FAAD((int)&savedregs) & 0xF0;
    if ( byte_B7700_B76F0 )
    {
      v4 = 0;
      if ( a2 >= word_B770A_B76FA )
      {
        if ( a2 > word_B7706_B76F6 )
        {
          LOWORD(v4) = a2 - word_B7706_B76F6;
          v4 = ((unsigned __int16)word_B770E_B76FE * v4) >> 11;
          if ( (unsigned int)v4 > 0x80 )
            LOWORD(v4) = 128;
        }
      }
      else
      {
        v4 = (word_B7712_B7702 * (__int16)(a2 - word_B770A_B76FA)) >> 11;
        if ( v4 < -128 )
          LOWORD(v4) = -128;
      }
      word_B7702_B76F2 = v4;
      v5 = 0;
      if ( a4 >= word_B770C_B76FC )
      {
        if ( a4 > word_B7708_B76F8 )
        {
          LOWORD(v5) = a4 - word_B7708_B76F8;
          v5 = ((unsigned __int16)word_B7710_B7700 * v5) >> 11;
          if ( (unsigned int)v5 > 0x80 )
            LOWORD(v5) = 128;
        }
      }
      else
      {
        v5 = (word_B7714_B7704 * (__int16)(a4 - word_B770C_B76FC)) >> 11;
        if ( v5 < -128 )
          LOWORD(v5) = -128;
      }
      word_B7704_B76F4 = v5;
    }
    if ( byte_B7701 )
    {
      v6 = 0;
      if ( a1 >= word_B771E )
      {
        if ( a1 > word_B771A )
        {
          LOWORD(v6) = a1 - word_B771A;
          v6 = ((unsigned __int16)word_B7722 * v6) >> 11;
          if ( (unsigned int)v6 > 0x80 )
            LOWORD(v6) = 128;
        }
      }
      else
      {
        v6 = (word_B7726 * (__int16)(a1 - word_B771E)) >> 11;
        if ( v6 < -128 )
          LOWORD(v6) = -128;
      }
      word_B7716 = v6;
      v7 = 0;
      if ( a3 >= word_B7720 )
      {
        if ( a3 > word_B771C )
        {
          LOWORD(v7) = a3 - word_B771C;
          v7 = ((unsigned __int16)word_B7724 * v7) >> 11;
          if ( (unsigned int)v7 > 0x80 )
            LOWORD(v7) = 128;
        }
      }
      else
      {
        v7 = (word_B7728 * (__int16)(a3 - word_B7720)) >> 11;
        if ( v7 < -128 )
          LOWORD(v7) = -128;
      }
      word_B7718 = v7;
    }
  }
  else
  {
    word_B7702_B76F2 = 0;
    word_B7704_B76F4 = 0;
    byte_B772A = -1;
  }
}
// B7700: using guessed type char byte_B7700_B76F0;
// B7701: using guessed type char byte_B7701;
// B7702: using guessed type __int16 word_B7702_B76F2;
// B7704: using guessed type __int16 word_B7704_B76F4;
// B7706: using guessed type __int16 word_B7706_B76F6;
// B7708: using guessed type __int16 word_B7708_B76F8;
// B770A: using guessed type __int16 word_B770A_B76FA;
// B770C: using guessed type __int16 word_B770C_B76FC;
// B770E: using guessed type __int16 word_B770E_B76FE;
// B7710: using guessed type __int16 word_B7710_B7700;
// B7712: using guessed type __int16 word_B7712_B7702;
// B7714: using guessed type __int16 word_B7714_B7704;
// B7716: using guessed type __int16 word_B7716;
// B7718: using guessed type __int16 word_B7718;
// B771A: using guessed type __int16 word_B771A;
// B771C: using guessed type __int16 word_B771C;
// B771E: using guessed type __int16 word_B771E;
// B7720: using guessed type __int16 word_B7720;
// B7722: using guessed type __int16 word_B7722;
// B7724: using guessed type __int16 word_B7724;
// B7726: using guessed type __int16 word_B7726;
// B7728: using guessed type __int16 word_B7728;
// B772A: using guessed type char byte_B772A;

//----- (0003F76D) --------------------------------------------------------
unsigned __int8 sub_3F76D_3FAAD(int a1)
{
  __int16 v1; // bx
  __int16 v2; // cx
  __int16 v3; // si
  __int16 v4; // di
  unsigned __int8 result; // al

  FixPerifery();

  if ( byte_B7701 )
    *(_BYTE *)(a1 - 5) = 15;
  else
    *(_BYTE *)(a1 - 5) = 3;
  *(_DWORD *)(a1 - 4) = 10000;
  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  _disable();
  __outbyte(0x201u, 0x10u);
  while ( 1 )
  {
    result = __inbyte(0x201u);
    if ( (result & *(_BYTE *)(a1 - 5)) == 0 )
      break;
    if ( (result & 1) != 0 )
      ++v1;
    if ( (result & 2) != 0 )
      ++v3;
    if ( (result & 4) != 0 )
      ++v2;
    if ( (result & 8) != 0 )
      ++v4;
    if ( --*(_DWORD *)(a1 - 4) < 0 )
    {
      byte_B7700_B76F0 = 0;
      break;
    }
  }
  _enable();
  return result;
}
// B7700: using guessed type char byte_B7700_B76F0;
// B7701: using guessed type char byte_B7701;

void InitDigijoy_3F7D0_3FB10(char* textBuffer)
{
	memset(&byte_B7700_B76F0, 0, 43);
	sub_3F4CE_3F80E();
	sub_3F398_3F6D8();
	if (byte_B7700_B76F0)
	{
		sub_3F398_3F6D8();
		sub_3FB30_3FE70(word_90B34, word_90B36, textBuffer);
		byte_90B23 = 2;
	}
}

void InitAnojoy_3F820_sub_3FB60(__int16 a2, int a3, int a4, int a5, char a6)
{
	char result; // al
	int v17; // edi
	int v18; // ebx
	__int64 v19; // rtt
	__int64 v20; // rtt
	__int64 v21; // rtt
	__int64 v22; // rtt
	int v23; // [esp+0h] [ebp-1Ch]
	int v24; // [esp+4h] [ebp-18h]
	int v25; // [esp+8h] [ebp-14h]
	int v26; // [esp+Ch] [ebp-10h]

	sub_3F4CE_3F80E();
	sub_3F398_3F6D8();
	if (byte_B7700_B76F0)
	{
		byte_B7700_B76F0 = 1;
		int index1 = 0;
		int index2 = 0;
		int index3 = 0;
		sub_3FB30_3FE70(word_90B24, word_90B26, (char*)a3);
		do
		{
			sub_3F54D_3F88D(a2, index1, index2, index3);
			a2 = word_B7704_B76F4;
			index1 += word_B7702_B76F2;
			index2++;
			index3 += word_B7704_B76F4;
		} while ((unsigned __int16)index2 < 0x10u);
		v24 = (int)(index1 - (__CFSHL__((unsigned __int64)index1 >> 32, 4) + 16 * ((unsigned __int64)index1 >> 32))) >> 4;
		v25 = (int)(index3 - (__CFSHL__((unsigned __int64)index3 >> 32, 4) + 16 * ((unsigned __int64)index3 >> 32))) >> 4;
		index2 = 0;
		index1 = 0;
		index3 = 0;
		sub_3FB30_3FE70(word_90B2C, word_90B2E, (char*)a4);
		do
		{
			sub_3F54D_3F88D(a4, index1, index2, index3);
			index1 += word_B7702_B76F2;
			index2++;
			index3 += word_B7704_B76F4;
		} while ((unsigned __int16)index2 < 0x10u);
		v26 = (int)(index1 - (__CFSHL__((unsigned __int64)index1 >> 32, 4) + 16 * ((unsigned __int64)index1 >> 32))) >> 4;
		v23 = (int)(index3 - (__CFSHL__((unsigned __int64)index3 >> 32, 4) + 16 * ((unsigned __int64)index3 >> 32))) >> 4;
		index1 = 0;
		index2 = 0;
		index3 = 0;
		sub_3FB30_3FE70(word_90B34, word_90B36, (char*)a5);
		do
		{
			sub_3F54D_3F88D(a4, index1, index2, index3);
			index1 += word_B7702_B76F2;
			index2++;
			index3 += word_B7704_B76F4;
		} while ((unsigned __int16)index2 < 0x10u);
		v17 = (int)(index1 - (__CFSHL__((unsigned __int64)index1 >> 32, 4) + 16 * ((unsigned __int64)index1 >> 32))) >> 4;
		v18 = (int)(index3 - (__CFSHL__((unsigned __int64)index3 >> 32, 4) + 16 * ((unsigned __int64)index3 >> 32))) >> 4;
		if ((unsigned __int16)(v26 - v17) <= 0x1Eu)
		{
			word_B7706_B76F6 = 10000;
		}
		else
		{
			word_B7706_B76F6 = v17 + 3 * (unsigned __int16)(v26 - v17) / 10;
			LODWORD(v19) = (uint32)&loc_40000;
			HIDWORD(v19) = (int)&loc_40000 >> 31;
			word_B770E_B76FE = v19 / ((unsigned __int16)v26 - word_B7706_B76F6);
		}
		if ((unsigned __int16)(v23 - v18) <= 0x1Eu)
		{
			word_B7708_B76F8 = 10000;
		}
		else
		{
			word_B7708_B76F8 = v18 + 3 * (unsigned __int16)(v23 - v18) / 10;
			LODWORD(v20) = (uint32)&loc_40000;
			HIDWORD(v20) = (int)&loc_40000 >> 31;
			word_B7710_B7700 = v20 / ((unsigned __int16)v23 - word_B7708_B76F8);
		}
		if ((unsigned __int16)(v18 - v25) <= 0x1Eu)
		{
			word_B770C_B76FC = 0;
		}
		else
		{
			word_B770C_B76FC = v18 - 3 * (unsigned __int16)(v18 - v25) / 10;
			LODWORD(v21) = (uint32)&loc_40000;
			HIDWORD(v21) = (int)&loc_40000 >> 31;
			word_B7714_B7704 = v21 / (word_B770C_B76FC - (unsigned __int16)v25);
		}
		if ((unsigned __int16)(v17 - v24) <= 0x1Eu)
		{
			word_B770A_B76FA = 0;
		}
		else
		{
			word_B770A_B76FA = v17 - 3 * (unsigned __int16)(v17 - v24) / 10;
			LODWORD(v22) = (uint32)&loc_40000;
			HIDWORD(v22) = (int)&loc_40000 >> 31;
			word_B7712_B7702 = v22 / (word_B770A_B76FA - (unsigned __int16)v24);
		}
		result = a6;
		byte_90B23 = a6;
	}
}

//----- (0003FB30) --------------------------------------------------------
void sub_3FB30_3FE70(__int16 a1, __int16 a2, char* a3)
{
  unsigned __int8 v3; // al
  unsigned __int8 v4; // al

  do
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
    else
      CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
    sub_4B560_4B8A0();
    v3 = a2;
    if ( a3 + 6 * (a1 + a2) )
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(a1, a2, (TypeTab*)a3);
      else
        DrawBitmap_60D18_61228(a1, a2, (TypeTab*)a3);
    }
    sub_3F413(v3);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
  }
  while ( (byte_B772A & 0x10) != 0 );
  WaitForBeam_5CC54_5D164();
  allert_error();//fix beam
  do
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
    else
      CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
    sub_4B560_4B8A0();
    v4 = a2;
    if ( a3 + 6 * (a1 + a2) )
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(a1, a2, (TypeTab*)a3);
      else
        DrawBitmap_60D18_61228(a1, a2, (TypeTab*)a3);
    }
    sub_3F413(v4);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
  }
  while ( (byte_B772A & 0x10) == 0 );
  WaitForBeam_5CC54_5D164();
  allert_error();//fix beam
}
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// B772A: using guessed type char byte_B772A;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0003FCA0) --------------------------------------------------------
char sub_3FCA0_3FFE0(
        char a5,
        __int16 a6,
        __int16 a7,
        __int16 a8,
        __int16 a9,
        __int16 a10,
        __int16 a11)
{
  __int16 v11; // bx
  int v12; // eax
  int v13; // edx
  __int16 *v14; // eax
  __int16 v15; // dx
  __int16 v16; // ax
  int v17; // edx
  __int16 *v18; // eax
  __int16 v19; // dx
  __int64 v20; // rax
  __int16 v21; // ax

    //fix
    int a1 = 0;
    __int16 a2 = 0;
    __int16 a3 = 0;
    __int16 a4 = 0;
    //fix

  v11 = 0;
  if ( a5 )
  {
    if ( (byte_90B23 & 2) != 0 || (byte_90B23 & 1) != 0 )
    {
      if ( byte_B772A >= 0 )
      {
        LOBYTE(a2) = dword_AE400_AE3F0();
        //a1 = 2049 * str_AE400_AE3F0->var_u16_8;
        if ( (*(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13341) & 3) == 0 )
          lastPressedKey_12EF70_12EF60 = 28;
      }
      if ( dword_9AD98 )
        sub_3F370_3F6B0();
      HIBYTE(a2) = byte_90B20;
      mouseRightButton_12EFDC_12EFCC = 0;
      mouseRightButton2_12EFE2_12EFD2 = 0;
      mouseLeftButton_12EFDE_12EFCE = 0;
      mouseLeftButton2_12EFE4_12EFD4 = 0;
      if ( !byte_90B20 )
      {
        LOBYTE(a1) = 1;
        mouse_9AD90.x = 0;
        mouse_9AD90.y = 0;
        byte_90B20 = 1;
      }
      if ( (byte_90B23 & 2) != 0 )
        sub_3F413(a1);
      else
        sub_3F587(a2, 0, a3, a4);
      if ( word_B7704_B76F4 >= 0 )
      {
        if ( word_B7704_B76F4 <= 0 )
        {
          if ( word_B7702_B76F2 <= 0 )
          {
            if ( word_B7702_B76F2 < 0 )
              mouse_9AD90.x = mouse_9AD90.x - a10;
          }
          else
          {
            mouse_9AD90.x = a10 + mouse_9AD90.x;
          }
        }
        else
        {
          mouse_9AD90.y += a11;
        }
      }
      else
      {
        mouse_9AD90.y -= a11;
      }
      if ( mouse_9AD90.x >= a6 )
      {
        if ( mouse_9AD90.x > a8 )
          mouse_9AD90.x = a8;
      }
      else
      {
        mouse_9AD90.x = a6;
      }
      LOBYTE(a1) = mouse_9AD90.y;
      if ( mouse_9AD90.y >= a7 )
      {
        if ( mouse_9AD90.y > a9 )
          mouse_9AD90.y = a9;
      }
      else
      {
        mouse_9AD90.y = a7;
      }
      if ( (byte_B772A & 0x10) == 0 )
      {
        mouseLeftButton2_12EFE4_12EFD4 = 1;
        mouseLeftButton_12EFDE_12EFCE = 1;
      }
      if ( (byte_B772A & 0x20) == 0 )
      {
        mouseRightButton2_12EFE2_12EFD2 = 1;
        mouseRightButton_12EFDC_12EFCC = 1;
      }
    }
  }
  else
  {
    LOBYTE(a2) = 0;
    byte_90B20 = 0;
    if ( byte_9AD08 )
    {
      if ( dword_9AD98 )
        sub_3F370_3F6B0();
      sub_5B210();
      v12 = dword_90B14;
      word_90B0C[dword_90B14] = word_12EE9C_12EE8C[1];
      v13 = (v12 + 1) % 2;
      v14 = word_90B0C;
      dword_90B14 = v13;
      v15 = 2;
      do
      {
        a4 = *v14++;
        v11 += a4;
        --v15;
      }
      while ( v15 );
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        v16 = 400 * (v11 / 2) / 12743 + 200;
      else
        v16 = 480 * (v11 / 2) / 12743 + 240;
      mouse_9AD90.y = v16;
      v17 = dword_90B18 + 1;
      word_90B02[v17] = word_12EE9C_12EE8C[2];
      v11 = 0;
      v18 = (__int16 *)&unk_90B04;
      dword_90B18 = v17 % 2;
      v19 = 2;
      do
      {
        a3 = *v18++;
        v11 += a3;
        --v19;
      }
      while ( v19 );
      a2 = 12743;
      a1 = 640 * (v11 / 2) / 12743 + 320;
      mouse_9AD90.x = 640 * (v11 / 2) / 12743 + 320;
    }
    if ( (byte_90B23 & 2) != 0 || (byte_90B23 & 1) != 0 || (byte_90B23 & 0x20) != 0 )
    {
      if ( dword_9AD98 )
        sub_3F370_3F6B0();
      LOBYTE(a1) = byte_B7700_B76F0;
      if ( byte_B7700_B76F0 )
      {
        if ( (unsigned __int8)byte_B7700_B76F0 <= 1u )
        {
          sub_3F587(a2, v11, a3, a4);
          if ( (byte_90B23 & 0x20) != 0 || byte_9AD08 )
          {
            pressedKeys_12EEF0_12EEE0[72] = 0;//byte_12EF38_12EF28 Up Arrow
            pressedKeys_12EEF0_12EEE0[80] = 0;//byte_12EF40_12EF30 Down Arrow
            pressedKeys_12EEF0_12EEE0[75] = 0;//byte_12EF3B_12EF2B Left Arrow
            pressedKeys_12EEF0_12EEE0[77] = 0;//byte_12EF3D Right Arrow
          }
          if ( byte_B772A >= 0 )
          {
            //a1 = 2049 * str_AE400_AE3F0->var_u16_8;
            if ( (*(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13341) & 3) == 0 )
              lastPressedKey_12EF70_12EF60 = 28;
          }
          if ( (byte_B772A & 0x40) == 0 || byte_9AD08 )
          {
            if ( ((byte_B772A & 0x40) != 0 || byte_9AD08) && (!byte_9AD08 || (byte_B772A & 0x40) == 0) )
            {
              if ( byte_9AD08 && (byte_B772A & 0x40) == 0 )
                LOBYTE(a1) = sub_5B2B0();
            }
            else
            {
              if ( word_B7704_B76F4 >= 0 )
              {
                if ( word_B7704_B76F4 > 0 )
                    pressedKeys_12EEF0_12EEE0[80] = 1;//byte_12EF40_12EF30 Down Arrow
              }
              else
              {
                  pressedKeys_12EEF0_12EEE0[72] = 1;//byte_12EF38_12EF28 Up Arrow
              }
              if ( word_B7702_B76F2 <= 0 )
              {
                if ( word_B7702_B76F2 < 0 )
                    pressedKeys_12EEF0_12EEE0[75] = 1;//byte_12EF3B_12EF2B Left Arrow
              }
              else
              {
                  pressedKeys_12EEF0_12EEE0[77] = 1;//byte_12EF3D Right Arrow
              }
            }
          }
          else
          {
            word_90B1C = 2 * word_B7702_B76F2;
            word_90B1E = 2 * word_B7704_B76F4;
            mouse_9AD90.x = 2 * word_B7702_B76F2 + 320;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              LOWORD(a1) = word_90B1E + 200;
            else
              LOWORD(a1) = word_90B1E + 240;
            mouse_9AD90.y = a1;
          }
          if ( (byte_B772A & 0x10) != 0 || byte_90B21 )
          {
            if ( byte_90B21 && (byte_B772A & 0x10) != 0 )
            {
              byte_90B21 = 0;
              LOBYTE(a1) = 0;
              mouseLeftButton_12EFDE_12EFCE = 0;
              mouseLeftButton2_12EFE4_12EFD4 = 0;
            }
          }
          else
          {
            byte_90B21 = 1;
            mouseLeftButton2_12EFE4_12EFD4 = 1;
            mouseLeftButton_12EFDE_12EFCE = 1;
          }
          if ( (byte_B772A & 0x20) != 0 || byte_90B22 )
          {
            if ( byte_90B22 && (byte_B772A & 0x20) != 0 )
            {
              byte_90B22 = 0;
              mouseRightButton2_12EFE2_12EFD2 = 0;
              mouseRightButton_12EFDC_12EFCC = 0;
            }
          }
          else
          {
            byte_90B22 = 1;
            LOBYTE(a1) = 1;
            mouseRightButton2_12EFE2_12EFD2 = 1;
            mouseRightButton_12EFDC_12EFCC = 1;
          }
        }
        else if ( byte_B7700_B76F0 == 2 )
        {
          sub_3F413(2u);
          pressedKeys_12EEF0_12EEE0[72] = 0;//byte_12EF38_12EF28 Up Arrow
          pressedKeys_12EEF0_12EEE0[80] = 0;//byte_12EF40_12EF30 Down Arrow
          pressedKeys_12EEF0_12EEE0[75] = 0;//byte_12EF3B_12EF2B Left Arrow
          pressedKeys_12EEF0_12EEE0[77] = 0;//byte_12EF3D Right Arrow
          if ( byte_B772A >= 0 )
          {
            //a1 = 2049 * str_AE400_AE3F0->var_u16_8;
            if ( (*(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13341) & 3) == 0 )
              lastPressedKey_12EF70_12EF60 = 28;
          }
          if ( (byte_B772A & 0x40) == 0 || byte_9AD08 )
          {
            if ( ((byte_B772A & 0x40) != 0 || byte_9AD08) && (!byte_9AD08 || (byte_B772A & 0x40) == 0) )
            {
              if ( byte_9AD08 && (byte_B772A & 0x40) == 0 )
                LOBYTE(a1) = sub_5B2B0();
            }
            else
            {
              if ( word_B7704_B76F4 >= 0 )
              {
                if ( word_B7704_B76F4 > 0 )
                    pressedKeys_12EEF0_12EEE0[80] = 1;//byte_12EF40_12EF30 Down Arrow
              }
              else
              {
                  pressedKeys_12EEF0_12EEE0[72] = 1;//byte_12EF38_12EF28 Up Arrow
              }
              if ( word_B7702_B76F2 <= 0 )
              {
                if ( word_B7702_B76F2 < 0 )
                    pressedKeys_12EEF0_12EEE0[75] = 1;//byte_12EF3B_12EF2B Left Arrow
              }
              else
              {
                  pressedKeys_12EEF0_12EEE0[77] = 1;//byte_12EF3D Right Arrow
              }
            }
          }
          else
          {
            word_90B1C = (28 * (__int16)(32 * word_B7702_B76F2 + word_90B1C)
                        - (__CFSHL__((28 * (__int16)(32 * word_B7702_B76F2 + word_90B1C)) >> 31, 5)
                         + 32 * ((28 * (__int16)(32 * word_B7702_B76F2 + word_90B1C)) >> 31))) >> 5;
            v20 = 31 * (__int16)(16 * word_B7704_B76F4 + word_90B1E);
            word_90B1E = (int)(v20 - (__CFSHL__(HIDWORD(v20), 5) + 32 * HIDWORD(v20))) >> 5;
            mouse_9AD90.x = 2 * word_90B1C + 320;
            v21 = 2 * word_90B1E;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              LOWORD(a1) = v21 + 200;
            else
              LOWORD(a1) = v21 + 240;
            mouse_9AD90.y = a1;
          }
          if ( (byte_B772A & 0x10) != 0 || byte_90B21 )
          {
            if ( byte_90B21 && (byte_B772A & 0x10) != 0 )
            {
              LOBYTE(a1) = 0;
              byte_90B21 = 0;
              mouseLeftButton2_12EFE4_12EFD4 = 0;
              mouseLeftButton_12EFDE_12EFCE = 0;
            }
          }
          else
          {
            LOBYTE(a1) = 1;
            byte_90B21 = 1;
            mouseLeftButton2_12EFE4_12EFD4 = 1;
            mouseLeftButton_12EFDE_12EFCE = 1;
          }
          if ( (byte_B772A & 0x20) != 0 || byte_90B22 )
          {
            if ( byte_90B22 && (byte_B772A & 0x20) != 0 )
            {
              byte_90B22 = 0;
              mouseRightButton2_12EFE2_12EFD2 = 0;
              mouseRightButton_12EFDC_12EFCC = 0;
            }
          }
          else
          {
            LOBYTE(a1) = 1;
            byte_90B22 = 1;
            mouseRightButton2_12EFE2_12EFD2 = 1;
            mouseRightButton_12EFDC_12EFCC = 1;
          }
        }
      }
    }
  }
  return a1;
}
// 90B02: using guessed type __int16 word_90B02[];
// 90B0C: using guessed type __int16 word_90B0C[4];
// 90B14: using guessed type int dword_90B14;
// 90B18: using guessed type int dword_90B18;
// 90B1C: using guessed type __int16 word_90B1C;
// 90B1E: using guessed type __int16 word_90B1E;
// 90B20: using guessed type char byte_90B20;
// 90B21: using guessed type char byte_90B21;
// 90B22: using guessed type char byte_90B22;
// 90B23: using guessed type char byte_90B23;
// 9AD08: using guessed type char byte_9AD08;
// 9AD90: using guessed type int dmouse_9AD90.x;
// 9AD98: using guessed type int dword_9AD98;
// AE400: using guessed type int dword_AE400_AE3F0();
// B7700: using guessed type char byte_B7700_B76F0;
// B7702: using guessed type __int16 word_B7702_B76F2;
// B7704: using guessed type __int16 word_B7704_B76F4;
// B772A: using guessed type char byte_B772A;
// 12EE9E: using guessed type __int16 word_12EE9E;
// 12EEA0: using guessed type __int16 word_12EEA0;
// 12EF38: using guessed type char byte_12EF38_12EF28;
// 12EF3B: using guessed type char byte_12EF3B_12EF2B;
// 12EF3D: using guessed type char byte_12EF3D;
// 12EF40: using guessed type char byte_12EF40_12EF30;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFE2: using guessed type __int16 mouseRightButton2_12EFE2_12EFD2;
// 12EFE4: using guessed type __int16 mouseLeftButton2_12EFE4_12EFD4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

void sub_40440_40780(Pathstruct* pathstruct)//211440_211780
{
	char input[20];
	sub_63010_63520();
	if (pathstruct->colorPalette_var28)
	{
		for (int i = 0; pathstruct[i].colorPalette_var28; i++)
			sub_634A0_639B0(&pathstruct[i]);
	}
	if (pathstruct->colorPalette_var28)
	{
		for (int i = 0; pathstruct[i].colorPalette_var28; i++)
		{
			int compVar = sub_634E0_639F0(&pathstruct[i]);
			if (compVar < 0)
			{
				SetPalette_319A0_319E0(begPalDat_AE428_AE418_26C428_26C418);
				printf("ERROR: Allocation %s.\n", &pathstruct[i]);
				printf("Press return to continue\n");
				gets_s(input);
			}
			else if (!compVar)
			{
				SetPalette_319A0_319E0(begPalDat_AE428_AE418_26C428_26C418);
				printf("ERROR: File %s.\n", &pathstruct[i]);
				printf("Press return to continue\n");
				gets_s(input);
			}
		}
	}
}

char inbytes[] = {
0x05,0x00,0x00,0x00,0x13,0x00,0x28,0x00,0x2A,0x00,0x07,0x00,0xF4,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x05,0x00,0x01,0x00,0x56,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x05,0x00,0x02,0x00,0x03,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x03,0x00,0x59,0x00,0x58,0x00,0x2A,0x00,
0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x04,0x00,0x00,0x00,0x01,0x00,
0xCE,0x00,0xC2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x05,0x00,0xB9,0x00,
0x2A,0x00,0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x06,0x00,
0xC1,0x00,0x32,0x00,0x31,0x00,0xD8,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,
0x07,0x00,0x55,0x00,0xC6,0x00,0x55,0x00,0xC4,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x08,0x00,0x2F,0x00,0x2A,0x00,0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x05,0x00,0x09,0x00,0xDC,0x00,0xED,0x00,0xCA,0x00,0xC9,0x00,0xF5,0x00,
0xC9,0x00,0xCB,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x05,0x00,0x0A,0x00,0xD0,0x00,0xC2,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x0B,0x00,0xC8,0x00,0x2A,0x00,0x07,0x00,
0xF4,0x00,0xD1,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x0C,0x00,0xDD,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x0D,0x00,0xD9,0x00,
0xDA,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x0E,0x00,
0xDB,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,
0x0F,0x00,0x00,0x00,0x01,0x00,0xCE,0x00,0xC3,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x05,0x00,0x10,0x00,0xCF,0x00,0x2A,0x00,0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x05,0x00,0x11,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x05,0x00,0x12,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x13,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x09,0x00,0xD2,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x22,0x00,0xD4,0x00,
0xDF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,0x27,0x00,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0A,0x00,
0x2C,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0A,0x00,0x34,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x0C,0x00,0x00,0x00,0x2A,0x00,0x07,0x00,0xF4,0x00,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x0C,0x00,0x03,0x00,0xD1,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x06,0x00,0xD3,0x00,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x07,0x00,0x4C,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x08,0x00,0xD2,0x00,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x09,0x00,
0xD3,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,
0x0A,0x00,0xD4,0x00,0xDF,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0C,0x00,0x0B,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x0C,0x00,0x0C,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x0C,0x00,0x0D,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x0E,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x0F,0x00,0xFF,0xFF,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x10,0x00,0xFF,0xFF,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x11,0x00,
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,
0x13,0x00,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,
0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x0C,0x32,0x00,0x00,0x10,
0x00,0x02,0x01,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,
0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,
0x00,0x02,0x02,0x00,0x71,0x00,0x05,0x00,0x71,0x00,0x05,0x00,0x00,0x07,0x00,0x00,
0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,
0x00,0x02,0x03,0x00,0x11,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,
0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,
0x00,0x02,0x04,0x00,0x0B,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,
0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,
0x00,0x02,0x05,0x00,0x05,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,
0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,
0x00,0x02,0x06,0x00,0x00,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,
0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x10,
0x00,0x02,0x07,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,0x80,0x00,
0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFE,0xFF,0xFF,0x00,0x18,0x28,0x00,0x00,0x20,
0x00,0x02,0x08,0x00,0x00,0x01,0x05,0x00,0x00,0x01,0x05,0x00,0x00,0x03,0x80,0x00,
0xFC,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x18,0x28,0x00,0x00,0x20,
0x00,0x02,0x09,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x06,0x00,0x02,
0xF0,0xFF,0x00,0x01,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x0C,0x32,0x00,0x00,0x10,
0x00,0x02,0x0A,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0x00,0xFF,0x0F,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,
0x00,0x02,0x0B,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x02,
0xFC,0xFF,0x46,0x00,0x55,0x01,0xFF,0xFF,0xFF,0xFF,0x00,0x0F,0x28,0x00,0x00,0x0F,
0x00,0x02,0x0C,0x00,0x22,0x00,0x05,0x00,0x55,0x00,0x05,0x00,0x00,0x00,0x00,0x00,
0xFC,0xFF,0x1E,0x00,0x55,0x01,0xFF,0xFF,0xFF,0xFF,0x00,0x14,0x1E,0x00,0x00,0x14,
0xAA,0x00,0x0D,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x05,0x00,0x02,
0xFC,0xFF,0x46,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x1E,0x00,0x00,0x0C,
0x00,0x02,0x0E,0x00,0x71,0x00,0x11,0x00,0x71,0x00,0x11,0x00,0x00,0x07,0x33,0x00,
0xE0,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x06,0x1E,0x00,0x00,0x14,
0xAA,0x02,0x0F,0x00,0x22,0x00,0x05,0x00,0x55,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0xC0,0xFF,0x14,0x00,0x55,0x01,0xFE,0x80,0xF0,0xFF,0x00,0x14,0x1E,0x00,0x00,0x14,
0xAA,0x00,0x10,0x00,0x16,0x00,0x05,0x00,0x71,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x0A,0x1E,0x00,0x00,0x14,
0x00,0x02,0x11,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0xC0,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x1E,0x00,0x00,0x14,
0x00,0x02,0x12,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0xE0,0xFF,0x14,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x09,0x23,0x00,0x00,0x14,
0xAA,0x02,0x13,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0F,
0x00,0x02,0x14,0x00,0x38,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x05,0x00,0x00,
0xE7,0xFF,0x50,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x19,
0x00,0x02,0x15,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x19,0x00,0x00,0x08,
0x00,0x02,0x16,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0x80,0xFF,0x14,0x00,0x00,0x02,0xFE,0x80,0xF0,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,
0x00,0x02,0x17,0x00,0x2D,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x00,
0xFC,0xFF,0x3C,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x0A,0x00,0x00,0x1E,
0xC7,0x07,0x18,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0x00,0xFF,0x14,0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x00,0x09,0x0F,0x00,0x00,0x0F,
0x00,0x02,0x19,0x00,0x44,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x07,0x00,0x01,
0xF8,0xFF,0x46,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x12,
0x00,0x02,0x1A,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0x80,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,
0x00,0x02,0x1B,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0x80,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,
0x00,0x02,0x1C,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0x80,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,
0x00,0x02,0x1D,0x00,0x16,0x00,0x05,0x00,0x16,0x00,0x05,0x00,0x00,0x01,0x00,0x00,
0x80,0xFF,0x14,0x00,0x00,0x02,0xFF,0xFF,0xFF,0xFF,0x00,0x09,0x28,0x00,0x00,0x0C,
0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x2A,0x53,0x65,0x61,0x72,0x63,0x68,0x44,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF4,0xC3,
0x26,0x00,0x14,0xC4,0x26,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x62,0x75,0x69,0x6C,0x64,0x30,0x2D,0x30,0x2E,0x64,0x61,0x74,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0xC4,0x26,0x00,0x38,0xC4,
0x26,0x00,0x49,0x49,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x62,
0x75,0x69,0x6C,0x64,0x30,0x2D,0x30,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xC4,0x26,0x00,0x0C,0xC4,0x26,0x00,0x9E,0x01,
0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x66,0x6F,0x6E,0x74,0x30,
0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x78,0xC3,0x26,0x00,0x00,0x00,0x00,0x00,0xF1,0x1F,0x00,0x00,0x00,0x00,
0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x66,0x6F,0x6E,0x74,0x30,0x2E,0x74,0x61,0x62,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB8,0xC3,
0x26,0x00,0x98,0xC3,0x26,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x66,0x6F,0x6E,0x74,0x31,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0xC3,0x26,0x00,0x00,0x00,
0x00,0x00,0x70,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x66,
0x6F,0x6E,0x74,0x31,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xBC,0xC3,0x26,0x00,0x9C,0xC3,0x26,0x00,0x66,0x06,
0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x74,0x6D,0x61,0x70,0x73,
0x30,0x2D,0x30,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x44,0xB7,0x2E,0x00,0x00,0x00,0x00,0x00,0xB4,0x14,0x00,0x00,0x00,0x00,
0x00,0x00,0x2A,0x50,0x61,0x6C,0x44,0x61,0x74,0x61,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0xC4,
0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x2A,0x50,
0x61,0x6C,0x4D,0x65,0x6D,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xC4,0x26,0x00,0x00,0x00,
0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x70,
0x6F,0x69,0x6E,0x74,0x65,0x72,0x73,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x48,0xC4,0x26,0x00,0x00,0x00,0x00,0x00,0x87,0x07,
0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x70,0x6F,0x69,0x6E,0x74,
0x65,0x72,0x73,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x50,0xC4,0x26,0x00,0x3C,0xC4,0x26,0x00,0x36,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x70,0x61,0x6C,0x30,0x2D,0x30,0x2E,0x64,0x61,
0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28,0xC4,
0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x65,
0x74,0x65,0x78,0x74,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0xC4,0x26,0x00,0x00,0x00,0x00,0x00,0xA6,0x08,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x66,0x74,0x65,0x78,0x74,0x2E,0x64,0x61,0x74,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0xC4,
0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x67,
0x74,0x65,0x78,0x74,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0xC4,0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x69,0x74,0x65,0x78,0x74,0x2E,0x64,0x61,0x74,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0xC4,
0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x62,
0x6C,0x6B,0x30,0x2D,0x30,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xC3,0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x62,0x6C,0x6B,0x30,0x2D,0x31,0x2E,0x64,0x61,
0x74,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xC3,
0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x02,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x73,0x6B,0x79,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD8,0xC3,0x26,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x2A,0x57,0x53,0x63,0x72,0x65,0x65,0x6E,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xF4,0xCF,0x2E,0x00,0x00,0x00,0x00,0x00,0x80,0x15,0x01,0x00,0x00,0x00,
0x00,0x00,0x2A,0x42,0x53,0x63,0x72,0x65,0x65,0x6E,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xC3,
0x26,0x00,0x00,0x00,0x00,0x00,0x70,0x11,0x01,0x00,0x00,0x00,0x00,0x00,0x64,0x61,
0x74,0x61,0x2F,0x6D,0x73,0x70,0x72,0x30,0x2D,0x30,0x2E,0x64,0x61,0x74,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0xC4,0x26,0x00,0x00,0x00,
0x00,0x00,0xCD,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x6D,
0x73,0x70,0x72,0x30,0x2D,0x30,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x2C,0xC4,0x26,0x00,0x34,0xC4,0x26,0x00,0x0A,0x02,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x2A,0x57,0x53,0x63,0x72,0x65,0x65,0x6E,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF4,0xCF,
0x2E,0x00,0x00,0x00,0x00,0x00,0x00,0xB0,0x04,0x00,0x00,0x00,0x00,0x00,0x2A,0x42,
0x53,0x63,0x72,0x65,0x65,0x6E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xC3,0x26,0x00,0x00,0x00,
0x00,0x00,0x70,0x11,0x01,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x68,
0x73,0x70,0x72,0x30,0x2D,0x30,0x2E,0x64,0x61,0x74,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x44,0xC4,0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x61,0x74,0x61,0x2F,0x68,0x73,0x70,0x72,0x30,
0x2D,0x30,0x2E,0x74,0x61,0x62,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x2C,0xC4,0x26,0x00,0x34,0xC4,0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0xC4,
0x26,0x00,0x3C,0xC4,0x26,0x00,0x48,0xC4,0x26,0x00,0xB8,0xC3,0x26,0x00,0x98,0xC3,
0x26,0x00,0x78,0xC3,0x26,0x00,0xBC,0xC3,0x26,0x00,0x9C,0xC3,0x26,0x00,0x7C,0xC3,
0x26,0x00,0x2C,0xC4,0x26,0x00,0x34,0xC4,0x26,0x00,0x44,0xC4,0x26,0x00,0x40,0xC4,
0x26,0x00,0x0C,0xC4,0x26,0x00,0x30,0xC4,0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xB0,0x7C,0x26,0x00,0xBC,0x7C,0x26,0x00,0xCC,0x7C,
0x26,0x00,0xD8,0x7C,0x26,0x00,0xE4,0x7C,0x26,0x00,0xF0,0x7C,0x26,0x00,0xFC,0x7C,
0x26,0x00,0x08,0x7D,0x26,0x00,0x14,0x7D,0x26,0x00,0x20,0x7D,0x26,0x00,0x30,0x7D,
0x26,0x00,0x40,0x7D,0x26,0x00,0x4C,0x7D,0x26,0x00,0x5C,0x7D,0x26,0x00,0x6C,0x7D,
0x26,0x00,0x7C,0x7D,0x26,0x00,0x8C,0x7D,0x26,0x00,0x9C,0x7D,0x26,0x00,0xAC,0x7D,
0x26,0x00,0xBC,0x7D,0x26,0x00,0xCC,0x7D,0x26,0x00,0xDC,0x7D,0x26,0x00,0xEC,0x7D,
0x26,0x00,0xF8,0x7D,0x26,0x00,0x08,0x7E,0x26,0x00,0x18,0x7E,0x26,0x00,0x24,0x7E,
0x26,0x00,0x34,0x7E,0x26,0x00,0x44,0x7E,0x26,0x00,0x54,0x7E,0x26,0x00,0x64,0x7E,
0x26,0x00,0x70,0x7E,0x26,0x00,0x7C,0x7E,0x26,0x00,0x88,0x7E,0x26,0x00,0x94,0x7E,
0x26,0x00,0xA4,0x7E,0x26,0x00,0xB0,0x7E,0x26,0x00,0xBC,0x7E,0x26,0x00,0xC8,0x7E,
0x26,0x00,0xD8,0x7E,0x26,0x00,0xE4,0x7E,0x26,0x00,0xF4,0x7E,0x26,0x00,0x04,0x7F,
0x26,0x00,0x10,0x7F,0x26,0x00,0x1C,0x7F,0x26,0x00,0x28,0x7F,0x26,0x00,0x38,0x7F,
0x26,0x00,0x44,0x7F,0x26,0x00,0x50,0x7F,0x26,0x00,0x60,0x7F,0x26,0x00,0x70,0x7F,
0x26,0x00,0x7C,0x7F,0x26,0x00,0x88,0x7F,0x26,0x00,0x90,0x7F,0x26,0x00,0x98,0x7F,
0x26,0x00,0xA0,0x7F,0x26,0x00,0xA8,0x7F,0x26,0x00,0xB0,0x7F,0x26,0x00,0xB8,0x7F,
0x26,0x00,0xC0,0x7F,0x26,0x00,0xC8,0x7F,0x26,0x00,0xD0,0x7F,0x26,0x00,0xD8,0x7F,
0x26,0x00,0xE0,0x7F,0x26,0x00,0xE8,0x7F,0x26,0x00,0xF0,0x7F,0x26,0x00,0xF4,0x7F,
0x26,0x00,0xFC,0x7F,0x26,0x00,0x04,0x80,0x26,0x00,0x0C,0x80,0x26,0x00,0x14,0x80,
0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,
0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,
0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,
0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,
0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,
0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,
0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,0x26,0x00,0x14,0x80,
0x26,0x00,0x14,0x80,0x26,0x00,0x00,0x01,0x00,0x01,0x02,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xB7,0x71,0x7D,0x7A,0x9D,0x9A,0x07,0x5A,0x1D,0x1B,0xDD,0xDA,0x3C,0x39,
0x10,0x0E,0x18,0x80,0x26,0x00,0x24,0x80,0x26,0x00,0x2C,0x80,0x26,0x00,0x38,0x80,
0x26,0x00,0x40,0x80,0x26,0x00,0x48,0x80,0x26,0x00,0x50,0x80,0x26,0x00,0x5C,0x80,
0x26,0x00,0x00,0x03,0x02,0x10,0x01,0x0E,0x04,0x0C,0x06,0x09,0x07,0x08,0x0F,0x12,
0x11,0x13,0x0D,0x05,0x0B,0x0A,0x14,0x15,0x16,0x17,0x08,0x00,0x6C,0x80,0x26,0x00,
0xA1,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,0x0B,0x00,0x80,0x80,0x26,0x00,0xA6,0x00,
0xFA,0x00,0x00,0x01,0x14,0x00,0x2E,0x00,0x9C,0x80,0x26,0x00,0xB3,0x00,0x96,0x00,
0x00,0x01,0x11,0x00,0x26,0x00,0xB0,0x80,0x26,0x00,0x97,0x00,0x96,0x00,0x00,0x01,
0x11,0x00,0x26,0x00,0xC0,0x80,0x26,0x00,0x97,0x00,0x96,0x00,0x00,0x01,0x11,0x00,
0x26,0x00,0xD4,0x80,0x26,0x00,0x97,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x26,0x00,
0xE8,0x80,0x26,0x00,0x97,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x5E,0x00,0xFC,0x80,
0x26,0x00,0xFA,0x00,0xFA,0x00,0x00,0xFF,0x24,0x00,0x75,0x00,0x10,0x81,0x26,0x00,
0xC0,0x00,0x96,0x00,0x00,0xFF,0x15,0x00,0x7F,0x00,0x28,0x81,0x26,0x00,0x3C,0x00,
0x32,0x00,0x02,0x01,0x15,0x00,0x7F,0x00,0x44,0x81,0x26,0x00,0x78,0x00,0x64,0x00,
0x02,0x01,0x15,0x00,0x7F,0x00,0x60,0x81,0x26,0x00,0xB5,0x00,0x96,0x00,0x02,0x01,
0x15,0x00,0x7F,0x00,0x7C,0x81,0x26,0x00,0xF1,0x00,0xC8,0x00,0x02,0x01,0x15,0x00,
0x7F,0x00,0x98,0x81,0x26,0x00,0x2D,0x01,0xFA,0x00,0x02,0x01,0x15,0x00,0x7F,0x00,
0xB4,0x81,0x26,0x00,0x6A,0x01,0x2C,0x01,0x02,0x01,0x15,0x00,0x7F,0x00,0xD0,0x81,
0x26,0x00,0xA6,0x01,0x5E,0x01,0x02,0x01,0x15,0x00,0x7F,0x00,0xEC,0x81,0x26,0x00,
0xE3,0x01,0x90,0x01,0x02,0x01,0x15,0x00,0x8B,0x00,0x08,0x82,0x26,0x00,0x49,0x02,
0x96,0x00,0x00,0x01,0x00,0x00,0x76,0x00,0x20,0x82,0x26,0x00,0x9A,0x00,0x96,0x00,
0x00,0x01,0x15,0x00,0x70,0x00,0x38,0x82,0x26,0x00,0xC4,0x00,0x96,0x00,0x00,0xFF,
0x15,0x00,0x70,0x00,0x4C,0x82,0x26,0x00,0xD7,0x00,0xA5,0x00,0x00,0x01,0x15,0x00,
0x70,0x00,0x60,0x82,0x26,0x00,0xF1,0x00,0xB9,0x00,0x00,0x01,0x15,0x00,0x70,0x00,
0x74,0x82,0x26,0x00,0x05,0x01,0xC8,0x00,0x00,0x01,0x15,0x00,0x70,0x00,0x88,0x82,
0x26,0x00,0x12,0x01,0xD2,0x00,0x00,0x01,0x15,0x00,0x70,0x00,0x9C,0x82,0x26,0x00,
0x12,0x01,0xD2,0x00,0x00,0x01,0x15,0x00,0x70,0x00,0xB0,0x82,0x26,0x00,0x05,0x01,
0xC8,0x00,0x00,0x01,0x15,0x00,0x70,0x00,0xC4,0x82,0x26,0x00,0xF8,0x00,0xBE,0x00,
0x00,0x01,0x15,0x00,0x70,0x00,0xD8,0x82,0x26,0x00,0xDE,0x00,0xAA,0x00,0x00,0x01,
0x15,0x00,0x70,0x00,0xEC,0x82,0x26,0x00,0xD1,0x00,0xA0,0x00,0x00,0x01,0x15,0x00,
0x70,0x00,0x00,0x83,0x26,0x00,0xC4,0x00,0x96,0x00,0x00,0x01,0x15,0x00,0x70,0x00,
0x14,0x83,0x26,0x00,0xAA,0x00,0x82,0x00,0x00,0x01,0x15,0x00,0x70,0x00,0x28,0x83,
0x26,0x00,0x8F,0x00,0x6E,0x00,0x00,0x01,0x15,0x00,0x70,0x00,0x3C,0x83,0x26,0x00,
0x75,0x00,0x5A,0x00,0x00,0x01,0x15,0x00,0x70,0x00,0x50,0x83,0x26,0x00,0x5B,0x00,
0x46,0x00,0x00,0x01,0x15,0x00,0x70,0x00,0x64,0x83,0x26,0x00,0x4E,0x00,0x3C,0x00,
0x00,0x01,0x15,0x00,0x8D,0x00,0x78,0x83,0x26,0x00,0xBB,0x00,0x2C,0x01,0x00,0x03,
0x00,0x00,0x8F,0x00,0x90,0x83,0x26,0x00,0xF4,0x01,0x96,0x00,0x00,0x01,0x00,0x00,
0x90,0x00,0xA4,0x83,0x26,0x00,0x1C,0x02,0x96,0x00,0x00,0x01,0x00,0x00,0x91,0x00,
0xB8,0x83,0x26,0x00,0xE4,0x01,0x96,0x00,0x00,0x01,0x00,0x00,0x93,0x00,0xCC,0x83,
0x26,0x00,0x9A,0x02,0x90,0x01,0x00,0x01,0x00,0x00,0x36,0x00,0xE0,0x83,0x26,0x00,
0x22,0x01,0xC8,0x00,0x00,0x01,0x11,0x00,0x6E,0x00,0xF4,0x83,0x26,0x00,0x08,0x01,
0xFA,0x00,0x00,0xFF,0x15,0x00,0x6F,0x00,0x08,0x84,0x26,0x00,0x58,0x00,0x64,0x00,
0x00,0xFF,0x15,0x00,0x97,0x00,0x1C,0x84,0x26,0x00,0x4C,0x00,0x96,0x00,0x00,0xFF,
0x00,0x00,0x00,0x00,0x34,0x84,0x26,0x00,0xEE,0x00,0xC8,0x00,0x00,0xFF,0x11,0x00,
0x7C,0x00,0x48,0x84,0x26,0x00,0x9A,0x00,0x96,0x00,0x00,0xFF,0x15,0x00,0x7D,0x00,
0x5C,0x84,0x26,0x00,0x96,0x00,0x96,0x00,0x00,0xFF,0x15,0x00,0x0E,0x00,0x74,0x84,
0x26,0x00,0x69,0x01,0x2C,0x01,0x00,0x01,0x11,0x00,0x95,0x00,0x88,0x84,0x26,0x00,
0x56,0x00,0x64,0x00,0x00,0x01,0x00,0x00,0x16,0x00,0x9C,0x84,0x26,0x00,0x3F,0x01,
0x2C,0x01,0x00,0x01,0x11,0x00,0x77,0x00,0xB0,0x84,0x26,0x00,0x8E,0x00,0x64,0x00,
0x00,0x01,0x14,0x00,0x81,0x00,0xC8,0x84,0x26,0x00,0x96,0x00,0x96,0x00,0x00,0xFF,
0x15,0x00,0x73,0x00,0xE4,0x84,0x26,0x00,0x3D,0x00,0x32,0x00,0x00,0xFF,0x15,0x00,
0x73,0x00,0xE4,0x84,0x26,0x00,0x7B,0x00,0x64,0x00,0x00,0x01,0x15,0x00,0x73,0x00,
0xE4,0x84,0x26,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,0x15,0x00,0x73,0x00,0xE4,0x84,
0x26,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,0x73,0x00,0xE4,0x84,0x26,0x00,
0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x73,0x00,0xE4,0x84,0x26,0x00,0x71,0x01,
0x2C,0x01,0x00,0x01,0x15,0x00,0x73,0x00,0xE4,0x84,0x26,0x00,0xAE,0x01,0x5E,0x01,
0x00,0x01,0x15,0x00,0x73,0x00,0xE4,0x84,0x26,0x00,0xEC,0x01,0x90,0x01,0x00,0x01,
0x15,0x00,0x98,0x00,0xFC,0x84,0x26,0x00,0xCF,0x00,0x96,0x00,0x00,0x04,0x00,0x00,
0x99,0x00,0x14,0x85,0x26,0x00,0xB1,0x00,0x96,0x00,0x00,0x04,0x00,0x00,0x7A,0x00,
0x2C,0x85,0x26,0x00,0xB2,0x00,0x96,0x00,0x00,0x01,0x15,0x00,0x4E,0x00,0x44,0x85,
0x26,0x00,0x45,0x01,0x64,0x00,0x00,0x01,0x11,0x00,0x7E,0x00,0x58,0x85,0x26,0x00,
0xB4,0x01,0x96,0x00,0x00,0x01,0x15,0x00,0x96,0x00,0x70,0x85,0x26,0x00,0xF9,0x01,
0xC8,0x00,0x00,0xFF,0x00,0x00,0x94,0x00,0x80,0x85,0x26,0x00,0xE3,0x00,0xC8,0x00,
0x00,0x01,0x00,0x00,0x72,0x00,0x94,0x85,0x26,0x00,0x3C,0x00,0x32,0x00,0x02,0xFF,
0x15,0x00,0x72,0x00,0xA8,0x85,0x26,0x00,0x78,0x00,0x64,0x00,0x02,0x01,0x15,0x00,
0x72,0x00,0xBC,0x85,0x26,0x00,0xB5,0x00,0x96,0x00,0x02,0x01,0x15,0x00,0x72,0x00,
0xD0,0x85,0x26,0x00,0xF1,0x00,0xC8,0x00,0x02,0x01,0x15,0x00,0x72,0x00,0xE4,0x85,
0x26,0x00,0x2D,0x01,0xFA,0x00,0x02,0x01,0x15,0x00,0x72,0x00,0xF8,0x85,0x26,0x00,
0x6A,0x01,0x2C,0x01,0x02,0x01,0x15,0x00,0x72,0x00,0x0C,0x86,0x26,0x00,0xA6,0x01,
0x5E,0x01,0x02,0x01,0x15,0x00,0x72,0x00,0x20,0x86,0x26,0x00,0xE3,0x01,0x90,0x01,
0x02,0x01,0x15,0x00,0x46,0x00,0x34,0x86,0x26,0x00,0x71,0x00,0x96,0x00,0x00,0x01,
0x11,0x00,0x80,0x00,0x48,0x86,0x26,0x00,0xA4,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,
0x74,0x00,0x60,0x86,0x26,0x00,0xB8,0x00,0x96,0x00,0x00,0xFF,0x01,0x00,0x71,0x00,
0x78,0x86,0x26,0x00,0x28,0x00,0x96,0x00,0x03,0xFF,0x15,0x00,0x92,0x00,0x8C,0x86,
0x26,0x00,0xC3,0x00,0x90,0x01,0x00,0xFF,0x00,0x00,0x9B,0x00,0xA0,0x86,0x26,0x00,
0x99,0x00,0x96,0x00,0x00,0xFF,0x00,0x00,0x9A,0x00,0xB8,0x86,0x26,0x00,0x75,0x00,
0x96,0x00,0x00,0xFF,0x00,0x00,0x7B,0x00,0xD4,0x86,0x26,0x00,0xB2,0x00,0x96,0x00,
0x00,0x01,0x15,0x00,0x8C,0x00,0xF0,0x86,0x26,0x00,0x63,0x01,0x2C,0x01,0x00,0x04,
0x00,0x00,0x9C,0x00,0x04,0x87,0x26,0x00,0x63,0x01,0x2C,0x01,0x00,0x04,0x00,0x00,
0x56,0x00,0x18,0x87,0x26,0x00,0x91,0x00,0xFA,0x00,0x00,0x01,0x11,0x00,0x1E,0x00,
0x2C,0x87,0x26,0x00,0xB1,0x00,0x64,0x00,0x00,0x01,0x11,0x00,0x3E,0x00,0x40,0x87,
0x26,0x00,0xC9,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x3E,0x00,0x54,0x87,0x26,0x00,
0xC9,0x00,0x96,0x00,0x00,0x01,0x11,0x00,0x82,0x00,0x68,0x87,0x26,0x00,0xBE,0x00,
0x96,0x00,0x00,0x01,0x00,0x00,0x82,0x00,0x80,0x87,0x26,0x00,0xD2,0x00,0xA5,0x00,
0x00,0x01,0x00,0x00,0x82,0x00,0x98,0x87,0x26,0x00,0xEB,0x00,0xB9,0x00,0x00,0x01,
0x00,0x00,0x82,0x00,0xB0,0x87,0x26,0x00,0xFE,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0xC8,0x87,0x26,0x00,0x0B,0x01,0xD2,0x00,0x00,0x01,0x00,0x00,0x82,0x00,
0xE0,0x87,0x26,0x00,0x0B,0x01,0xD2,0x00,0x00,0x01,0x00,0x00,0x82,0x00,0xF8,0x87,
0x26,0x00,0xFE,0x00,0xC8,0x00,0x00,0x01,0x00,0x00,0x82,0x00,0x10,0x88,0x26,0x00,
0xF1,0x00,0xBE,0x00,0x00,0x01,0x00,0x00,0x82,0x00,0x28,0x88,0x26,0x00,0xD8,0x00,
0xAA,0x00,0x00,0x01,0x00,0x00,0x82,0x00,0x40,0x88,0x26,0x00,0xCB,0x00,0xA0,0x00,
0x00,0x01,0x00,0x00,0x82,0x00,0x58,0x88,0x26,0x00,0xBE,0x00,0x96,0x00,0x00,0x01,
0x00,0x00,0x82,0x00,0x70,0x88,0x26,0x00,0xA5,0x00,0x82,0x00,0x00,0x01,0x00,0x00,
0x82,0x00,0x88,0x88,0x26,0x00,0x8C,0x00,0x6E,0x00,0x00,0x01,0x00,0x00,0x82,0x00,
0xA0,0x88,0x26,0x00,0x72,0x00,0x5A,0x00,0x00,0x01,0x00,0x00,0x82,0x00,0xB8,0x88,
0x26,0x00,0x59,0x00,0x46,0x00,0x00,0x01,0x00,0x00,0x82,0x00,0xD0,0x88,0x26,0x00,
0x4C,0x00,0x3C,0x00,0x00,0x01,0x00,0x00,0x83,0x00,0xE8,0x88,0x26,0x00,0x3D,0x00,
0x32,0x00,0x00,0xFF,0x15,0x00,0x83,0x00,0xE8,0x88,0x26,0x00,0x7B,0x00,0x64,0x00,
0x00,0x01,0x15,0x00,0x83,0x00,0xE8,0x88,0x26,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,
0x15,0x00,0x83,0x00,0xE8,0x88,0x26,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,
0x83,0x00,0xE8,0x88,0x26,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x83,0x00,
0xE8,0x88,0x26,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x83,0x00,0xE8,0x88,
0x26,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x83,0x00,0xE8,0x88,0x26,0x00,
0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x84,0x00,0x00,0x89,0x26,0x00,0x3D,0x00,
0x32,0x00,0x00,0xFF,0x15,0x00,0x84,0x00,0x00,0x89,0x26,0x00,0x7B,0x00,0x64,0x00,
0x00,0x01,0x15,0x00,0x84,0x00,0x00,0x89,0x26,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,
0x15,0x00,0x84,0x00,0x00,0x89,0x26,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,
0x84,0x00,0x00,0x89,0x26,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x84,0x00,
0x00,0x89,0x26,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x84,0x00,0x00,0x89,
0x26,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x84,0x00,0x00,0x89,0x26,0x00,
0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x85,0x00,0x18,0x89,0x26,0x00,0x3D,0x00,
0x32,0x00,0x00,0xFF,0x15,0x00,0x85,0x00,0x18,0x89,0x26,0x00,0x7B,0x00,0x64,0x00,
0x00,0x01,0x15,0x00,0x85,0x00,0x18,0x89,0x26,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,
0x15,0x00,0x85,0x00,0x18,0x89,0x26,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,
0x85,0x00,0x18,0x89,0x26,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x85,0x00,
0x18,0x89,0x26,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x85,0x00,0x18,0x89,
0x26,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x85,0x00,0x18,0x89,0x26,0x00,
0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x86,0x00,0x30,0x89,0x26,0x00,0x3D,0x00,
0x32,0x00,0x00,0xFF,0x15,0x00,0x86,0x00,0x30,0x89,0x26,0x00,0x7B,0x00,0x64,0x00,
0x00,0x01,0x15,0x00,0x86,0x00,0x30,0x89,0x26,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,
0x15,0x00,0x86,0x00,0x30,0x89,0x26,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,
0x86,0x00,0x30,0x89,0x26,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x86,0x00,
0x30,0x89,0x26,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x86,0x00,0x30,0x89,
0x26,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x86,0x00,0x30,0x89,0x26,0x00,
0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x87,0x00,0x48,0x89,0x26,0x00,0x3D,0x00,
0x32,0x00,0x00,0xFF,0x15,0x00,0x87,0x00,0x48,0x89,0x26,0x00,0x7B,0x00,0x64,0x00,
0x00,0x01,0x15,0x00,0x87,0x00,0x48,0x89,0x26,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,
0x15,0x00,0x87,0x00,0x48,0x89,0x26,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,
0x87,0x00,0x48,0x89,0x26,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x87,0x00,
0x48,0x89,0x26,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x87,0x00,0x48,0x89,
0x26,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x87,0x00,0x48,0x89,0x26,0x00,
0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x88,0x00,0x60,0x89,0x26,0x00,0x3D,0x00,
0x32,0x00,0x00,0xFF,0x15,0x00,0x88,0x00,0x60,0x89,0x26,0x00,0x7B,0x00,0x64,0x00,
0x00,0x01,0x15,0x00,0x88,0x00,0x60,0x89,0x26,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,
0x15,0x00,0x88,0x00,0x60,0x89,0x26,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,
0x88,0x00,0x60,0x89,0x26,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x88,0x00,
0x60,0x89,0x26,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x88,0x00,0x60,0x89,
0x26,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x88,0x00,0x60,0x89,0x26,0x00,
0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x89,0x00,0x78,0x89,0x26,0x00,0x3D,0x00,
0x32,0x00,0x00,0xFF,0x15,0x00,0x89,0x00,0x78,0x89,0x26,0x00,0x7B,0x00,0x64,0x00,
0x00,0x01,0x15,0x00,0x89,0x00,0x78,0x89,0x26,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,
0x15,0x00,0x89,0x00,0x78,0x89,0x26,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,
0x89,0x00,0x78,0x89,0x26,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x89,0x00,
0x78,0x89,0x26,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x89,0x00,0x78,0x89,
0x26,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x89,0x00,0x78,0x89,0x26,0x00,
0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x8A,0x00,0x90,0x89,0x26,0x00,0x3D,0x00,
0x32,0x00,0x00,0xFF,0x15,0x00,0x8A,0x00,0x90,0x89,0x26,0x00,0x7B,0x00,0x64,0x00,
0x00,0x01,0x15,0x00,0x8A,0x00,0x90,0x89,0x26,0x00,0xB8,0x00,0x96,0x00,0x00,0x01,
0x15,0x00,0x8A,0x00,0x90,0x89,0x26,0x00,0xF6,0x00,0xC8,0x00,0x00,0x01,0x15,0x00,
0x8A,0x00,0x90,0x89,0x26,0x00,0x33,0x01,0xFA,0x00,0x00,0x01,0x15,0x00,0x8A,0x00,
0x90,0x89,0x26,0x00,0x71,0x01,0x2C,0x01,0x00,0x01,0x15,0x00,0x8A,0x00,0x90,0x89,
0x26,0x00,0xAE,0x01,0x5E,0x01,0x00,0x01,0x15,0x00,0x8A,0x00,0x90,0x89,0x26,0x00,
0xEC,0x01,0x90,0x01,0x00,0x01,0x15,0x00,0x9D,0x00,0xA8,0x89,0x26,0x00,0x34,0x02,
0x20,0x03,0x00,0xF0,0x00,0x00,0x9E,0x00,0xC0,0x89,0x26,0x00,0x34,0x02,0x20,0x03,
0x00,0xF0,0x00,0x00,0x9F,0x00,0xD8,0x89,0x26,0x00,0x34,0x02,0x20,0x03,0x00,0xF0,
0x00,0x00,0xA0,0x00,0xF0,0x89,0x26,0x00,0x34,0x02,0x20,0x03,0x00,0x01,0x00,0x00,
0xA1,0x00,0x08,0x8A,0x26,0x00,0x34,0x02,0x20,0x03,0x00,0x01,0x00,0x00,0xA2,0x00,
0x20,0x8A,0x26,0x00,0x34,0x02,0x20,0x03,0x00,0x01,0x00,0x00,0xA3,0x00,0x38,0x8A,
0x26,0x00,0x34,0x02,0x20,0x03,0x00,0x01,0x00,0x00,0xA4,0x00,0x50,0x8A,0x26,0x00,
0x34,0x02,0x20,0x03,0x00,0x01,0x00,0x00,0xA5,0x00,0x68,0x8A,0x26,0x00,0x71,0x01,
0x90,0x01,0x00,0xFF,0x00,0x00,0xA6,0x00,0x7C,0x8A,0x26,0x00,0x9B,0x01,0x90,0x01,
0x00,0xFF,0x00,0x00,0xA7,0x00,0x90,0x8A,0x26,0x00,0xA7,0x01,0x90,0x01,0x00,0xFF,
0x00,0x00,0xA8,0x00,0xA4,0x8A,0x26,0x00,0xB4,0x01,0x90,0x01,0x00,0x01,0x00,0x00,
0xA9,0x00,0xB8,0x8A,0x26,0x00,0x90,0x01,0x90,0x01,0x00,0x01,0x00,0x00,0xAA,0x00,
0xCC,0x8A,0x26,0x00,0x90,0x01,0x90,0x01,0x00,0x01,0x00,0x00,0xAB,0x00,0xE0,0x8A,
0x26,0x00,0x9B,0x01,0x90,0x01,0x00,0x01,0x00,0x00,0xAC,0x00,0xF4,0x8A,0x26,0x00,
0x90,0x01,0x90,0x01,0x00,0x01,0x00,0x00,0xAD,0x00,0x08,0x8B,0x26,0x00,0x98,0x00,
0x50,0x00,0x00,0x01,0x11,0x00,0xAD,0x00,0x1C,0x8B,0x26,0x00,0x0A,0x01,0x8C,0x00,
0x00,0x01,0x11,0x00,0xAD,0x00,0x30,0x8B,0x26,0x00,0x7C,0x01,0xC8,0x00,0x00,0x01,
0x11,0x00,0xAD,0x00,0x44,0x8B,0x26,0x00,0x15,0x02,0x18,0x01,0x00,0x01,0x11,0x00,
0xAD,0x00,0x58,0x8B,0x26,0x00,0xAD,0x02,0x68,0x01,0x00,0x01,0x11,0x00,0xAD,0x00,
0x6C,0x8B,0x26,0x00,0x46,0x03,0xB8,0x01,0x00,0x01,0x11,0x00,0xAD,0x00,0x80,0x8B,
0x26,0x00,0xDE,0x03,0x08,0x02,0x00,0x01,0x11,0x00,0xAD,0x00,0x94,0x8B,0x26,0x00,
0x76,0x04,0x58,0x02,0x00,0x01,0x11,0x00,0x77,0x00,0xA8,0x8B,0x26,0x00,0x47,0x00,
0x32,0x00,0x00,0x01,0x14,0x00,0xC0,0x00,0xC4,0x8B,0x26,0x00,0x64,0x00,0x64,0x00,
0x00,0x01,0x15,0x00,0xC1,0x00,0xD8,0x8B,0x26,0x00,0x2D,0x00,0x3C,0x00,0x00,0xFF,
0x13,0x00,0x75,0x00,0xEC,0x8B,0x26,0x00,0x80,0x00,0x64,0x00,0x00,0xFF,0x15,0x00,
0xBF,0x00,0x04,0x8C,0x26,0x00,0x7B,0x00,0x64,0x00,0x00,0xFF,0x15,0x00,0xC6,0x00,
0x1C,0x8C,0x26,0x00,0x9B,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,0xB5,0x00,0x34,0x8C,
0x26,0x00,0x7C,0x01,0x90,0x01,0x00,0x01,0x11,0x00,0xC9,0x00,0x44,0x8C,0x26,0x00,
0x35,0x01,0x00,0x01,0x00,0x01,0x11,0x00,0xD1,0x00,0x58,0x8C,0x26,0x00,0x79,0x00,
0x00,0x01,0x00,0x01,0x14,0x00,0xD4,0x00,0x70,0x8C,0x26,0x00,0xC4,0x00,0x00,0x01,
0x00,0x01,0x14,0x00,0xD7,0x00,0x8C,0x8C,0x26,0x00,0x2D,0x00,0x3C,0x00,0x00,0xFF,
0x13,0x00,0xDC,0x00,0xA4,0x8C,0x26,0x00,0x11,0x02,0x00,0x01,0x00,0x01,0x11,0x00,
0xE4,0x00,0xB8,0x8C,0x26,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0xE5,0x00,
0xD0,0x8C,0x26,0x00,0xC4,0x00,0xF0,0x00,0x00,0x01,0x14,0x00,0xE8,0x00,0xEC,0x8C,
0x26,0x00,0x2B,0x0A,0xDC,0x05,0x00,0x01,0x11,0x00,0xF0,0x00,0x04,0x8D,0x26,0x00,
0x9B,0x00,0x2C,0x01,0x00,0x01,0x13,0x00,0x04,0x01,0x1C,0x8D,0x26,0x00,0xB4,0x00,
0x96,0x00,0x03,0xFF,0x15,0x00,0x05,0x01,0x34,0x8D,0x26,0x00,0x9A,0x00,0x96,0x00,
0x00,0xFF,0x15,0x00,0x06,0x01,0x48,0x8D,0x26,0x00,0x9A,0x00,0x96,0x00,0x00,0xFF,
0x15,0x00,0x07,0x01,0x5C,0x8D,0x26,0x00,0x9A,0x00,0x96,0x00,0x00,0xFF,0x01,0x00,
0x08,0x01,0x74,0x8D,0x26,0x00,0xA8,0x00,0x96,0x00,0x00,0xFF,0x15,0x00,0x09,0x01,
0x8C,0x8D,0x26,0x00,0x96,0x00,0x96,0x00,0x00,0xFF,0x15,0x00,0x0A,0x01,0xA4,0x8D,
0x26,0x00,0x9A,0x00,0x96,0x00,0x00,0xFF,0x15,0x00,0x0B,0x01,0xBC,0x8D,0x26,0x00,
0x32,0x00,0x32,0x00,0x03,0xFF,0x15,0x00,0xF8,0x00,0xD4,0x8D,0x26,0x00,0x74,0x00,
0xFA,0x00,0x00,0x01,0x14,0x00,0xFB,0x00,0xE8,0x8D,0x26,0x00,0x6D,0x00,0xFA,0x00,
0x00,0x01,0x14,0x00,0xFE,0x00,0xFC,0x8D,0x26,0x00,0x78,0x00,0xFA,0x00,0x00,0x01,
0x14,0x00,0x14,0x01,0x14,0x8E,0x26,0x00,0x78,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,
0x01,0x01,0x2C,0x8E,0x26,0x00,0x6B,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,0x15,0x01,
0x40,0x8E,0x26,0x00,0x19,0x01,0xFA,0x00,0x00,0x01,0x24,0x00,0x1E,0x01,0x5C,0x8E,
0x26,0x00,0x93,0x01,0xF4,0x01,0x00,0x01,0x01,0x00,0x1E,0x01,0x78,0x8E,0x26,0x00,
0x93,0x01,0xF4,0x01,0x03,0x01,0x01,0x00,0x1E,0x01,0x94,0x8E,0x26,0x00,0x93,0x01,
0xF4,0x01,0x00,0x01,0x01,0x00,0x2B,0x01,0xB0,0x8E,0x26,0x00,0x60,0x01,0x2C,0x01,
0x00,0x04,0x00,0x00,0x2C,0x01,0xC8,0x8E,0x26,0x00,0x63,0x01,0x2C,0x01,0x00,0x04,
0x00,0x00,0x8E,0x00,0xE0,0x8E,0x26,0x00,0x19,0x00,0x32,0x00,0x00,0xFF,0x01,0x00,
0x8E,0x00,0xF4,0x8E,0x26,0x00,0x32,0x00,0x64,0x00,0x00,0x01,0x01,0x00,0x8E,0x00,
0x08,0x8F,0x26,0x00,0x4B,0x00,0x96,0x00,0x00,0x01,0x01,0x00,0x8E,0x00,0x1C,0x8F,
0x26,0x00,0x64,0x00,0xC8,0x00,0x00,0x01,0x01,0x00,0x8E,0x00,0x30,0x8F,0x26,0x00,
0x7D,0x00,0xFA,0x00,0x00,0x01,0x01,0x00,0x8E,0x00,0x44,0x8F,0x26,0x00,0x96,0x00,
0x2C,0x01,0x00,0x01,0x01,0x00,0x8E,0x00,0x58,0x8F,0x26,0x00,0xAF,0x00,0x5E,0x01,
0x00,0x01,0x01,0x00,0x8E,0x00,0x6C,0x8F,0x26,0x00,0xC8,0x00,0x90,0x01,0x00,0x01,
0x01,0x00,0x1F,0x01,0x80,0x8F,0x26,0x00,0x9F,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,
0x22,0x01,0x94,0x8F,0x26,0x00,0xBE,0x00,0xFA,0x00,0x00,0x01,0x10,0x00,0x0E,0x01,
0xA8,0x8F,0x26,0x00,0x9F,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,0x11,0x01,0xBC,0x8F,
0x26,0x00,0x70,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,0x2D,0x01,0xD4,0x8F,0x26,0x00,
0xE6,0x00,0xFA,0x00,0x00,0x01,0x00,0x00,0x2E,0x01,0xEC,0x8F,0x26,0x00,0x74,0x00,
0xFA,0x00,0x00,0x01,0x14,0x00,0x31,0x01,0x08,0x90,0x26,0x00,0x74,0x00,0xFA,0x00,
0x00,0x01,0x14,0x00,0x34,0x01,0x24,0x90,0x26,0x00,0x80,0x01,0xFA,0x00,0x00,0x01,
0x00,0x00,0x45,0x01,0x38,0x90,0x26,0x00,0x21,0x01,0x2C,0x01,0x00,0xFF,0x0B,0x00,
0x50,0x01,0x4C,0x90,0x26,0x00,0x6F,0x00,0xA0,0x00,0x00,0xFF,0x00,0x00,0x51,0x01,
0x64,0x90,0x26,0x00,0x76,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,0x54,0x01,0x78,0x90,
0x26,0x00,0xC0,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,0x57,0x01,0x90,0x90,0x26,0x00,
0xBE,0x00,0xFA,0x00,0x00,0x01,0x10,0x00,0x60,0x01,0xA8,0x90,0x26,0x00,0x76,0x00,
0xFA,0x00,0x00,0x01,0x14,0x00,0x63,0x01,0xBC,0x90,0x26,0x00,0xC0,0x00,0xFA,0x00,
0x00,0x01,0x14,0x00,0x66,0x01,0xD4,0x90,0x26,0x00,0xBE,0x00,0xFA,0x00,0x00,0x01,
0x10,0x00,0x6F,0x01,0xEC,0x90,0x26,0x00,0x76,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,
0x72,0x01,0x00,0x91,0x26,0x00,0xC0,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,0x75,0x01,
0x18,0x91,0x26,0x00,0xBE,0x00,0xFA,0x00,0x00,0x01,0x10,0x00,0x7E,0x01,0x30,0x91,
0x26,0x00,0x76,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,0x81,0x01,0x44,0x91,0x26,0x00,
0xC0,0x00,0xFA,0x00,0x00,0x01,0x14,0x00,0x84,0x01,0x5C,0x91,0x26,0x00,0xBE,0x00,
0xFA,0x00,0x00,0x01,0x10,0x00,0x8D,0x01,0x74,0x91,0x26,0x00,0x76,0x00,0xFA,0x00






};

Pathstruct outbytes[100];

Type_dword_96884 outbytes2[255];

#pragma pack (1)
Type_254A34 outbytes3[255];

struct {
    uint32_t data0;//0
    uint32_t data1;//4
    uint16_t data2;//6
    uint32_t data3;//10
    uint16_t data4;//14
    uint16_t data5;//16
}
outbytes4[255];

struct {
    uint32_t data0;
    uint16_t data1;
    uint16_t data2;
    uint16_t data3;
    uint16_t data4;
    uint16_t data5;
}
outbytes5[255];
Type_96902 outbytes6[255];

Type_97D12 outbytes7[255];

Type_254A34x outbytes8[255];

Type_99BA0 outbytes9[500];

Type_989C6 outbytes10[500];

#pragma pack (16)

void convert() {
    /*memcpy(outbytes, inbytes, 100 * 5);
    for (int i = 0; i < 100; i++)
        printf("{ \"%s\",%x,%x,%d,%d };\n", outbytes[i].path, outbytes[i].colorPalette_var28, outbytes[i].var32_end_buffer,outbytes[i].var36_size_buffer,outbytes[i].var40_alloc_type);
      */  /*
    memcpy(outbytes2, inbytes, 255 * 8);
    for (int i = 0; i < 255; i++)
        printf("{ \"%x\",%d,%d,%d,%d };\n", outbytes2[i].var32_0, outbytes2[i].var8_4, outbytes2[i].var8_5, outbytes2[i].var8_6, outbytes2[i].var8_7);
         */   
    /*
         memcpy(outbytes3, inbytes, 500 * 4-1);
     for (int i = 0; i < 100; i++)
         printf("{ 0x%08X,0x%04X,(Type_AE400_29795* (*)(axis_3d*))sub_%08X,0x%04X,0x%04X },\n", outbytes3[i].data0, outbytes3[i].data4, (int)outbytes3[i].data6 - 0x1d1000, outbytes3[i].data10, outbytes3[i].data12);
      */
    /*memcpy(outbytes4, inbytes, 100 * 5);
    for (int i = 0; i < 100; i++)
        printf("{ %08X,%08X,%08X,%08X,%04X },\n", outbytes4[i].data0, outbytes4[i].data1, outbytes4[i].data2, outbytes4[i].data3, outbytes4[i].data4);
    */
    /*
     memcpy(outbytes5, inbytes, 100 * 5);
     for (int i = 0; i < 100; i++)
         printf("{ 0x%08X,0x%04X,0x%04X,0x%04X,0x%04X,0x%04X },\n", outbytes5[i].data0, outbytes5[i].data1, outbytes5[i].data2, outbytes5[i].data3, outbytes5[i].data4, outbytes5[i].data5);
     */
     /*
      memcpy(outbytes6, inbytes, 500 * 4-1);
  for (int i = 0; i < 100; i++)
    printf("{ str_%08X, str_%08X, 0x%08X, 0x%04X, 0x%08X},\n", (int)outbytes6[i].str_0 - 0x1d1000, (int)outbytes6[i].str_4 - 0x1d1000, outbytes6[i].data4x, outbytes6[i].data8x, outbytes6[i].data14x);
    */
    /*memcpy(outbytes7, inbytes, 500 * 4 - 1);
    for (int i = 0; i < 100; i++)
        printf("{ (Type_AE400_29795* (*)(axis_3d*))&sub_%08X, %d, 0x%08X, %d },\n", (int)outbytes7[i].adress - 0x1d1000, outbytes7[i].data1, outbytes7[i].data2, outbytes7[i].data3);
    */
    /*
    memcpy(outbytes9, unk_99BA0, 14 * 286);
    for (int i = 0; i < 286; i++)
        printf("{ 0x%04X, 0x%04X, 0x%04X, 0x%04X, 0x%04X, 0x%02X, 0x%02X, 0x%02X, 0x%02X },\n", outbytes9[i].var_0, outbytes9[i].var_2,
            outbytes9[i].var_4, outbytes9[i].var_6, outbytes9[i].var_8, outbytes9[i].var_10, outbytes9[i].var_11, outbytes9[i].var_12, outbytes9[i].var_13);
            */
    memcpy(outbytes10, &inbytes, 34 * 50);
    for (int i = 0; i < 50; i++)
    {
        printf("{ 0x%04X, 0x%04X, ", outbytes10[i].var_0, outbytes10[i].var_2);
        for (int j = 0; j < 15; j++)
            printf("0x%04X, ", outbytes10[i].i16_4[j]);
        printf(" },\n");
    }
    

};

//----- (000404F0_00040830) --------------------------------------------------------
int sub_main(int argc, char* argv[])//2114f0_211830
{
    //convert();
    /*for (int16 i = 0xffff; i!=0xfff0; i--)
    {
        int16 y = (250 * i - (((250 * i) >> 31) << 8) + ((250 * i) >> 31)) >> 8;
        int16 y2 = (int16)(((249 * i) >> 8) + 1);
        if(y!=y2)
            printf("%04X %04X %04X\n", i, y, y2);
        printf("%04X %04X %04X\n", i, y,y2);
    }*/

	//fix
	mkdir(gameDataPath2.c_str());
	//fix

	//VGA_Init(0, 1280, 960, true);
	VGA_Init(0, 640, 480, true);
	VGA_Resize(320, 200);

	CreateGameDir_3EC90_3EFD0('C', (char*)"\\carpet.cd", (char*)"save");
	CreateGameDir_3EC90_3EFD0('C', (char*)"\\carpet.cd", (char*)"data");
	CreateGameDir_3EC90_3EFD0('C', (char*)"\\carpet.cd", (char*)"levels");
	TopProcedure_340B0_34470(argc, (const char**)argv);
	return 0;
}

//----- (00040550) --------------------------------------------------------
void sub_40550()//211550_
{
  memset((void*)(&str_AE400_AE3F0->str_12), 0, 20);
  memset((void*)(&str_AE400_AE3F0->var_u32_32), 0, 4);
  memset((void*)(&str_AE400_AE3F0->var_u16_36), 0, 2);
  memset((void*)(&str_AE400_AE3F0->var_u16_38), 0, 2);
  memset((void*)(&str_AE400_AE3F0->var_u32_40), 0, 4);
  memset((void*)(&str_AE400_AE3F0->var_u8_580), 0, 1);
  memset((void*)(&str_AE400_AE3F0->str_232607), 0, 106);
  memset((void*)(&str_AE400_AE3F0->str_9177), 0, 48);
  memset((void*)(&str_AE400_AE3F0->str_29795), 0, 164000);
  memset((void*)(&str_AE408_AE3F8->var_u8_23), 0, 1);
  memset((void*)(&str_AE408_AE3F8->str_93), 0, 16);
  memset((void*)(&str_AE408_AE3F8->gameSpeed_150), 0, 1);
  memset((void*)(&str_AE408_AE3F8->var_u8_152), 0, 1);
  memset((void*)(&str_AE408_AE3F8->str_184), 0, 14);
  memset((void*)(&str_AE408_AE3F8->var_u32_36378), 0, 4);
  memset((void*)(&str_AE408_AE3F8->str_36382x), 0, 80);
  memset((void*)(&str_AE408_AE3F8->var_u32_36462[0]), 0, 4);
  memset((void*)(&str_AE408_AE3F8->var_u32_36462[1]), 0, 4);
  memset((void*)(&str_AE408_AE3F8->var_u32_36462[2]), 0, 4);
  memset((void*)(&str_AE408_AE3F8->var_u32_36462[3]), 0, 4);
  memset((void*)(mapEntityIndex_10C1E0_10C1D0), 0, 0x20000);
  memset(mapTerrainType_CC1E0_CC1D0, 0, 0x10000);
  memset(mapHeightmap_DC1E0_DC1D0, 0, 0x10000);
  memset(mapShading_EC1E0_EC1D0, 0, 0x10000);
  memset(mapAngle_FC1E0_FC1D0, 0, 0x10000);
  memset((void*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0, 64000);
  //str_AE408_AE3F8->var_u8_0
  //*(_DWORD *)dword_AE408_AE3F8() &= 0xFFFE3FFF;
  str_AE408_AE3F8->var_u8_0 &= 0xFF;
  str_AE408_AE3F8->var_u8_1 &= 0x3F;
  str_AE408_AE3F8->var_u8_2 &= 0xFE;
  str_AE408_AE3F8->var_u8_3 &= 0xFF;
}
// 10000: using guessed type void sub_10000();
// 38C9F: using guessed type int dword_38C9F;
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (000407A0) --------------------------------------------------------
void sub_407A0_40AE0()//2117A0_
{
    //debug
#ifdef debug1
    //add_compare(0x2117A1, true);
#endif debug1
    //debug

  char tempByte_939E5 = byte_939E5;
  byte_939E5 = 0;
  sub_40550();
  DrawTextLine_5AD10_5B220((char*)"Load Level");
  LoadLevel_3E100(str_AE408_AE3F8->var_u16_17, (void *)&str_AE400_AE3F0->str_193795);
  if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
    str_AE400_AE3F0->var_u16_10 = str_AE400_AE3F0->str_193795.var_u16_232597_38802;
  //debug
#ifdef debug1
  //add_compare(0x2117FA, true);
#endif debug1
  //debug
  DrawTextLine_5AD10_5B220((char*)"Generate map");
  sub_31AA0((int)&str_AE400_AE3F0->str_193795);
#ifdef debug1
  //add_compare(0x211817, true);
#endif debug1
  sub_371C0();
  //debug
#ifdef debug1
  //add_compare(0x21181F, true);
#endif debug1
  //debug
  DrawTextLine_5AD10_5B220((char*)"Generate features");
  GenerateFeatures_36430(&str_AE400_AE3F0->str_193795);
  //debug
#ifdef debug1
  //add_compare(0x21183F, true);
#endif debug1
  //debug
  DrawTextLine_5AD10_5B220((char*)"Initialise Models");
  memset(&word_AE454_AE444, 0, 6);
  sub_37220_375E0();
  //debug
#ifdef debug1
  //add_compare(0x21186B, true);
#endif debug1
  //debug
  str_AE400_AE3F0->var_u32_4593 = -1;
  sub_37440(0, 1);
  //debug
#ifdef debug1
  //add_compare(0x21187D, true);
#endif debug1
  //debug
  byte_939E5 = tempByte_939E5;
  sub_3DD50();
  //debug
#ifdef debug1
  //add_compare(0x2118C4, true);
#endif debug1
  //debug
  //return sub_48230(dword_AE400_AE3F0() + 29795 + 164
  //                                     * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333));
  sub_48230(&str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333]);
  //debug
#ifdef debug1
  //add_compare(0x2118CA, true);
#endif debug1
  //debug
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 939E5: using guessed type char byte_939E5;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (000408D0) --------------------------------------------------------
void sub_408D0_40C10()
{
  char temp939E5 = byte_939E5;
  byte_939E5 = 0;
  sub_40550();
  LoadLevel_3E100(str_AE408_AE3F8->var_u16_17, (void *)&str_AE400_AE3F0->str_193795);
  str_AE400_AE3F0->var_u16_10 = str_AE400_AE3F0->str_193795.var_u16_232597_38802;
  sub_31AA0((int)&str_AE400_AE3F0->str_193795);
  sub_371C0();
  GenerateFeatures_36430(&str_AE400_AE3F0->str_193795);
  memset(&word_AE454_AE444, 0, 6);
  sub_37220_375E0();
  str_AE400_AE3F0->var_u32_4593 = -1;
  sub_37440(0, 1);
  byte_939E5 = temp939E5;
  sub_3DD50();
  sub_48230(&str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333]);
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 939E5: using guessed type char byte_939E5;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (000409E0) --------------------------------------------------------
_BOOL1 sub_409E0(unsigned __int16 a1)
{
  char v1; // al

  v1 = mapAngle_FC1E0_FC1D0[a1] & 7;
  return v1 != 5 && v1 != 2 && v1 != 3;
}

//----- (00040A10) --------------------------------------------------------
char sub_40A10(__int16 a1, __int16 a2, __int16 a3, char a4)
{
  __int16 v4; // bx
  char v5; // al
  unsigned __int16 v6; // bx
  char v8; // [esp+0h] [ebp-10h]
  unsigned __int16 v9; // [esp+4h] [ebp-Ch]

  LOBYTE(v9) = a1;
  HIBYTE(v9) = a2;
  v8 = 0;
  v4 = a3 + (unsigned __int8)mapHeightmap_DC1E0_DC1D0[v9];
  if ( v4 > 200 )
  {
    v4 = 200;
    if ( !a1 && !a2 )
      v8 = 1;
  }
  if ( v4 < 0 )
  {
    v4 = 0;
    if ( !a1 && !a2 )
      v8 = 1;
  }
  if ( a4 && mapAngle_FC1E0_FC1D0[v9] < 0 )
    return 1;
  mapHeightmap_DC1E0_DC1D0[v9] = v4;
  if ( v4 )
  {
    v5 = mapAngle_FC1E0_FC1D0[v9] & 0xF8 | 1;
  }
  else
  {
    LOBYTE(v6) = a1 - 1;
    HIBYTE(v6) = a2 - 1;
    if ( !sub_409E0(v6) )
      goto LABEL_24;
    LOBYTE(v6) = v6 + 1;
    if ( !sub_409E0(v6) )
      goto LABEL_24;
    LOBYTE(v6) = v6 + 1;
    if ( !sub_409E0(v6) )
      goto LABEL_24;
    HIBYTE(v6) = a2;
    if ( !sub_409E0(v6) )
      goto LABEL_24;
    LOBYTE(v6) = v6 - 2;
    if ( !sub_409E0(v6) )
      goto LABEL_24;
    HIBYTE(v6) = a2 + 1;
    if ( !sub_409E0(v6) )
      goto LABEL_24;
    LOBYTE(v6) = v6 + 1;
    if ( !sub_409E0(v6) )
      goto LABEL_24;
    LOBYTE(v6) = v6 + 1;
    if ( !sub_409E0(v6) )
      goto LABEL_24;
    v5 = mapAngle_FC1E0_FC1D0[v9] & 0xF0;
  }
  mapAngle_FC1E0_FC1D0[v9] = v5;
LABEL_24:
  uaxis_2d v9x;
  v9x.word = v9;
  if ( a4 )
    sub_33B90(v9x, v9x);
  else
    sub_33E10(v9, v9);
  return v8;
}

//----- (00040D30) --------------------------------------------------------
int sub_40D30(Type_AE400_29795* a1x, __int16 a2, __int16 a3, __int16 a4, char a5)
{
  int v5; // ebx
  int v6; // esi
  int v7; // edi
  int v8; // eax
  int v9; // ebx
  int v10; // eax
  int v12; // [esp+0h] [ebp-14h] BYREF
  int v13[4]; // [esp+4h] [ebp-10h] BYREF

  LOWORD(v5) = a3;
  v6 = (a1x->var_u32_29867_72.x + 128) >> 8;
  v7 = (a1x->var_u32_29867_72.y + 128) >> 8;
  if ( a3 > (int)(a1x->var_u16_29873_78.var_u16_29875_80 - (__CFSHL__((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32, 8) + ((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32 << 8))) >> 8 )
    v5 = (int)(a1x->var_u16_29873_78.var_u16_29875_80 - (__CFSHL__((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32, 8) + ((unsigned __int64)a1x->var_u16_29873_78.var_u16_29875_80 >> 32 << 8))) >> 8;
  v8 = sub_11410(a2, (__int16)v5);
  v9 = v8;
  if ( v8 )
  {
    while ( sub_114B0(v9, (uint32*)v13, (uint32*)&v12) == 1 )
    {
      if ( sub_40A10(v6 + LOWORD(v13[0]), v7 + v12, a4, a5) )
      {
        sub_11490(v9);
        LOBYTE(v10) = 1;
        return nullsub_3(v10);
      }
    }
    sub_11490(v9);
  }
  LOBYTE(v8) = 0;
  return nullsub_3(v8);
}
// 40DF0: using guessed type int nullsub_3(_DWORD);
// 40D30: using guessed type int var_10[4];

//----- (00040E20) --------------------------------------------------------
int sub_40E20(unsigned __int16 a1, unsigned __int16 a2)
{
  int v2; // eax
  int i; // ebx
  char v4; // ah
  int v5; // ebx
  int result; // eax

  v2 = dword_AE400_AE3F0() + 29795;
  for ( i = 164 * mapEntityIndex_10C1E0_10C1D0[a1]; ; i = dword_AE400_AE3F0() + 29795 )
  {
    v5 = v2 + i;
    result = dword_AE400_AE3F0() + 29795;
    if ( v5 == dword_AE400_AE3F0() + 29795 )
      break;
    if ( *(__int16 *)(v5 + 24) != a2 )
    {
      switch ( *(_BYTE *)(v5 + 64) )
      {
        case 2:
          sub_41E80((Type_AE400_29795*)v5);
          break;
        case 5:
          v4 = *(_BYTE *)(v5 + 65);
          if ( v4 != 16 && v4 != 6 && v4 != 8 )
          {
            *(_DWORD *)(v5 + 12) = -1;
            *(_WORD *)(v5 + 38) = a2;
            *(_WORD *)(v5 + 40) = a2;
          }
          break;
        default:
          break;
      }
    }
    v2 = 164 * *(unsigned __int16 *)(v5 + 20);
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (00040EDC) --------------------------------------------------------
char sub_40EDC_4121C(_BYTE *a1, _BYTE *a2, char a3, char a4, char a5, __int16 a6, __int16 a7, __int16 a8)
{
  _BYTE *v8; // esi
  char v10; // bl
  char v11; // bh
  char v12; // cl
  _BYTE *v13; // esi
  char v14; // ch
  __int16 v15; // ax
  char result; // al
  _BYTE *v17; // [esp-14h] [ebp-20h]
  char v18; // [esp+7h] [ebp-5h]
  __int16 v19; // [esp+8h] [ebp-4h]
  __int16 v20; // [esp+Ah] [ebp-2h]

  v8 = a1;
  v20 = 256;
  do
  {
    v10 = ((unsigned __int16)(a6 * (char)(a3 - *v8)) >> 8) + *v8;
    v11 = ((unsigned __int16)(a7 * (char)(a4 - v8[1])) >> 8) + v8[1];
    v12 = ((unsigned __int16)(a8 * (char)(a5 - v8[2])) >> 8) + v8[2];
    v17 = v8;
    v13 = a1;
    v19 = 0x7FFF;
    v14 = 0;
    do
    {
      v15 = (char)(v13[2] - v12) * (char)(v13[2] - v12);
      if ( (__int16)(v15 + 2 * (char)(v13[1] - v11) * (char)(v13[1] - v11) + 2 * (char)(*v13 - v10) * (char)(*v13 - v10)) < v19 )
      {
        v18 = v14;
        v19 = v15 + 2 * (char)(v13[1] - v11) * (char)(v13[1] - v11) + 2 * (char)(*v13 - v10) * (char)(*v13 - v10);
      }
      v13 += 3;
      ++v14;
    }
    while ( v14 );
    result = v18;
    *a2++ = v18;
    v8 = v17 + 3;
    --v20;
  }
  while ( v20 );
  return result;
}
// 40F6E: variable 'v18' is possibly undefined

//----- (00040F87) --------------------------------------------------------
__int16 sub_40F87_412C7(__int16 a1, __int16 a2)
{
  int v2; // ebx
  int v4; // ebx
  int v5; // eax
  int v6; // ebx

  if ( a1 )
  {
    v2 = a2;
  }
  else
  {
    v2 = a2;
    if ( !a2 )
      return 0;
  }
  if ( a1 < 0 )
  {
    v5 = -a1;
    if ( v2 < 0 )
    {
      v6 = -v2;
      if ( v5 < v6 )
        return 2048 - word_9374C[-256 * a1 / (unsigned int)v6];
      else
        return word_9374C[(v6 << 8) / (unsigned int)v5] + 1536;
    }
    else if ( v5 < v2 )
    {
      return word_9374C[-256 * a1 / (unsigned int)v2] + 1024;
    }
    else
    {
      return 1536 - word_9374C[(v2 << 8) / (unsigned int)v5];
    }
  }
  else if ( v2 < 0 )
  {
    v4 = -v2;
    if ( a1 < v4 )
      return word_9374C[(a1 << 8) / (unsigned int)v4];
    else
      return 512 - word_9374C[(v4 << 8) / (unsigned int)a1];
  }
  else if ( a1 < v2 )
  {
    return 1024 - word_9374C[(a1 << 8) / (unsigned int)v2];
  }
  else
  {
    return word_9374C[(v2 << 8) / (unsigned int)a1] + 512;
  }
}
// 9374C: using guessed type __int16 word_9374C[258];

unsigned int Distance_410CE_4140E(unsigned int square)//2120CE_
{
  unsigned int bitcount;
  int i;
  if ( !square)
    return 0;
  _BitScanReverse((unsigned long*)&bitcount, square);
  for (i = bitSqrt_41104[bitcount]; (square / i) < i; i = (square / i + i) >> 1);
  return i;
}

//----- (00041144) --------------------------------------------------------
void sub_41144(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4)
{
    FixPerifery();

  __outbyte(0x3C8u, a1);
  __outbyte(0x3C9u, a2);
  __outbyte(0x3C9u, a3);
  __outbyte(0x3C9u, a4);
}

//----- (000411D7) --------------------------------------------------------
int sub_411D7_41517(void *a2, unsigned __int16 a3, char a4)
{
  int v4; // eax
  int v6; // [esp-8h] [ebp-Ch]

  //fix
  int a1 = 0;
  //fix

  v6 = a1;
  LOBYTE(a1) = a4;
  BYTE1(a1) = a4;
  v4 = a1 << 16;
  LOBYTE(v4) = a4;
  BYTE1(v4) = a4;
  memset((char*)a2, v4, 80 * a3);
  return v6;
}

//----- (000411FD) --------------------------------------------------------
int sub_411FD_4153D(void *a2, unsigned __int16 a3, char a4)
{
  int v4; // eax
  int v6; // [esp-8h] [ebp-Ch]

  //fix
  int a1 = 0;
  //fix

  v6 = a1;
  LOBYTE(a1) = a4;
  BYTE1(a1) = a4;
  v4 = a1 << 16;
  LOBYTE(v4) = a4;
  BYTE1(v4) = a4;
  memset((char*)a2, v4, 160 * a3);
  return v6;
}

void sub_41230_41570()//212230_
{
	if (!str_AE408_AE3F8->var_u32_168)
	{
		void* testAlloc = malloc_42540_42880(60000);
		byte_968F0 = 1;
		str_AE400_AE3F0->set.var_u8_8608 = 32;

		//fix
		if (testAlloc)
			freeMem_1314AC_13149C = 0x1000000;
		else
			freeMem_1314AC_13149C = 0;
		//fix

		if (freeMem_1314AC_13149C <= 0x800000)
		{
			if (freeMem_1314AC_13149C <= 0x700000)
			{
				if (freeMem_1314AC_13149C <= 0x600000)
				{
					if (freeMem_1314AC_13149C <= 0x500000)
					{
						if (freeMem_1314AC_13149C <= 0x400000)
						{
							if (freeMem_1314AC_13149C <= 0x300000)
							{
								if (freeMem_1314AC_13149C <= 0x200000)
								{
									if (freeMem_1314AC_13149C <= 0x100000)
									{
										printf("ERROR : NOT ENOUGH MEMORY.\n");
										exit(1);
									}
									str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 430000;
									str_AE400_AE3F0->set.var_u8_8608 = 16;
									str_AE400_AE3F0->set.var_u8_8631 = 0;
									byte_939EC = 3;
								}
								else
								{
									str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 1398576;
									byte_939EC = 0;
									str_AE400_AE3F0->set.var_u8_8631 = 0;
								}
							}
							else
							{
								str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 1398576;
								byte_939EC = 0;
								str_AE400_AE3F0->set.var_u8_8631 = 0;
							}
						}
						else
						{
							str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 2398576;
							str_AE400_AE3F0->set.var_u8_8631 = 0;
							byte_939EC = 1;
						}
					}
					else
					{
						str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 2398576;
						str_AE400_AE3F0->set.var_u8_8631 = 0;
						byte_939EC = 1;
					}
				}
				else
				{
					str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 2398576;
					str_AE400_AE3F0->set.var_u8_8631 = 0;
					byte_939EC = 1;
				}
			}
			else
			{
				str_AE408_AE3F8->var_u32_172 = freeMem_1314AC_13149C - 3398576;
				byte_939EC = 1;
			}
		}
		else
		{
			byte_939EC = 1;
			str_AE408_AE3F8->var_u32_172 = 0x400000;
		}
		str_AE408_AE3F8->var_u32_168 = (Type_168*)malloc_42540_42880(str_AE408_AE3F8->var_u32_172);
		if (str_AE408_AE3F8->var_u32_172 <= 0x96000)
		{
			printf("ERROR : NOT ENOUGH MEMORY.\n");
			exit(1);
		}
		if (str_AE400_AE3F0->set.var_u8_8608 >= 0x10u)
		{
			if (str_AE400_AE3F0->set.var_u8_8608 <= 0x10u)
			{
				sub_40440_40780(&pathStrArray[PSdatablk0dat]);
			}
			else if (str_AE400_AE3F0->set.var_u8_8608 == 32)
			{
				sub_40440_40780(&pathStrArray[PSdatablk1dat]);
			}
		}
		sub_44470_447B0();
		free_426E0_42A20(testAlloc);
	}
}

//----- (00041490) --------------------------------------------------------
void sub_41490_417D0()
{
  _DWORD v0; // eax
  int v1; // ebx
  int i; // esi

  //fix
  v1 = 0;
  //fix

  if ( freeMem_1314AC_13149C <= 0x96000 )
  {
    byte_93950 = 0;
    v0 = 0x96000;
    if ( dword_AE3EC_AE3DC )
    {
      v1 = GetVar4_369D0_36D90(dword_AE3EC_AE3DC);
      if ( v1 <= 0x96000)
      {
        for ( i = 0; i < 10; ++i )
        {
          if ( v1 >= 0x96000)
            break;
          v1 += GetAllSumaSpriteSizes_58C30_59140(0x96000 - v1 + 1024);
        }
      }
      v0 = (uint32)GetVar4_369D0_36D90(dword_AE3EC_AE3DC);
    }
    sub_42730_42A70(*(_DWORD *)(dword_AE408_AE3F8() + 168), *(_DWORD *)(dword_AE408_AE3F8() + 172) - ((_DWORD)v0 + 256));
  }
  else
  {
    byte_93950 = 1;
  }
}
// 369D0: using guessed type _DWORD ios::failure::cause(_DWORD);
// 93950: using guessed type char byte_93950;
// AE3EC: using guessed type int dword_AE3EC_AE3DC;
// AE408: using guessed type int dword_AE408_AE3F8();
// 1314AC: using guessed type int freeMem_1314AC_13149C;

//----- (00041540) --------------------------------------------------------
void sub_41540_41880()
{
  if ( !byte_93950 && !sub_427A0(*(_DWORD *)(dword_AE408_AE3F8() + 168), *(_DWORD *)(dword_AE408_AE3F8() + 172)) )
  {
    sub_44840_44B80();
    printf("ERROR : UNABLE TO GROW MEMORY.\n");
    exit(1);
  }
}
// 5CC03: using guessed type _DWORD printf(const char *, ...);
// 93950: using guessed type char byte_93950;
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (000415C0) --------------------------------------------------------
unsigned __int16 sub_415C0_41900()
{
  unsigned __int16 result; // ax
  int v1; // edi
  int i; // esi
  int v3; // ebx
  int v4; // eax
  __int16 v5; // cx

  result = dword_AE408_AE3F8();
  if ( (*(_WORD *)dword_AE408_AE3F8() & 0x110) == 0 )
  {
    v1 = 0;
    for ( i = 0; ; i += 2049 )
    {
      result = str_AE400_AE3F0->var_u16_10;
      if ( v1 >= result )
        break;
      v3 = dword_AE400_AE3F0() + i;
      if ( *(_BYTE *)(dword_AE400_AE3F0() + i + 13329) )
      {
        v4 = *(_DWORD *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v3 + 13333) + 160);
        if ( *(_WORD *)(v4 + 50) )
        {
          if ( str_AE408_AE3F8->str_184.var_u32_188 )
          {
            if ( 100
               * (*(_DWORD *)(v4 + 308) + *(_DWORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(v4 + 50) + 29935))
               / str_AE408_AE3F8->str_184.var_u32_188 <= *(unsigned __int16 *)&byte_38C93[dword_AE400_AE3F0()] )
            {
              *(_WORD *)(v3 + 13323) = 0;
            }
            else
            {
              v5 = *(_WORD *)(v3 + 13323);
              if ( v5 < 16 )
                *(_WORD *)(v3 + 13323) = v5 + 1;
              else
                *(_BYTE *)(v3 + 13325) |= 2u;
            }
          }
        }
      }
      ++v1;
    }
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (000416B0) --------------------------------------------------------
void sub_416B0()//2126B0_
{
  //int v0; // edi
  //int v1; // ecx
  //int v2; // ebx
  //int v3; // edx
  //int v4; // esi
  //int v5; // eax
  //unsigned int result; // eax
  //int v7; // esi

  //v0 = dword_AE400_AE3F0();
  //v1 = dword_AE400_AE3F0() + 29795;
  //v2 = 0;
  //v3 = 0;  
  for (int i = 0; i < str_AE400_AE3F0->var_u16_10;i++)
  {
    //v4 = 164 * *(unsigned __int16 *)(v3 + dword_AE400_AE3F0() + 13333);
    //v2++;
    //v5 = v3 + dword_AE400_AE3F0() + 13323 + 1103;
    //v3 += 2049;
    str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[i].playIndex_13333].var_u32_29955_160 = &str_AE400_AE3F0->str_13323[i].str_1103;
  }
  //result = dword_AE400_AE3F0() + 29959;
  //999
  //v7 = &unk_98F38[7] - str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[0].playIndex_13333].var_u32_29951_156;
  //v7 = str_AE400_AE3F0->str_29795[0].var_u32_29951_156 - str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[0].playIndex_13333].var_u32_29951_156;
  //v7 = ((int64)0x257018 - (int64)str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[0].playIndex_13333].var_u32_29951_156) / sizeof(Type_156);
  for(int i=1;i<1000;i++)
  //while ( result < dword_AE400_AE3F0() + 193795 )
  {
    if (str_AE400_AE3F0->str_29795[i].var_u8_29859_64)
        //str_AE400_AE3F0->str_29795[i].var_u32_29951_156 += v7;
        //str_AE400_AE3F0->str_29795[i].var_u32_29951_156 = &unk_98F38[7+v7+i];
        str_AE400_AE3F0->str_29795[i].var_u32_29951_156 = &unk_98F38[&str_AE400_AE3F0->str_29795[i].var_u32_29951_156[7] - str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[0].playIndex_13333].var_u32_29951_156];
    //result += 164;
  }
  //dword_AE400_AE3F0(dword_AE400_AE3F0());
  //compare with sub_57680_FixPointersAfterLoad
}
// AE400: using guessed type int dword_AE400_AE3F0();

int compareindex_41780 = 0;
int compareindex_41780_2 = 0;
//----- (00041780) --------------------------------------------------------
void sub_41780_41AC0()//212780_
{
  char v3; // dh
  Type_AE400_29795* v4; // edi
  //int v5; // eax
  //int v6; // esi
  Type_AE400_29795* v7; // ecx
  Type_AE400_29795* v8; // edx
  //int *v9; // eax
  char v10; // bl
  Type_AE400_29795* v11; // ebp
  unsigned __int8 v12; // bl
  Type_AE400_29795* v13; // ebx
  //int v14; // eax
  //char v15; // ch
  char v17; // cl
 char v24[256]; // [esp+0h] [ebp-168h] BYREF
 Type_AE400_29795* v25[20]; // [esp+100h] [ebp-68h] BYREF
 Type_AE400_29795* v26; // [esp+150h] [ebp-18h]

 //21278A
 //debug
#ifdef debug1
    //add_compare(0x212790, true);
#endif debug1
//debug
  str_AE400_AE3F0->rand_4 = 9377 * str_AE400_AE3F0->rand_4 + 9439;
  if ( (str_AE400_AE3F0->var_0.var_u8_2 & 1) != 0 )
    goto LABEL_52;
  for(int ix = 1; ix < 1000 ; ix++)
  {
    v3 = str_AE400_AE3F0->str_29795[ix].var_u8_29859_64;
    if ( v3 && (str_AE400_AE3F0->str_29795[ix].var_29811_16.byte[1] & 4) != 0 )
      sub_41E90_421D0(&str_AE400_AE3F0->str_29795[ix]);
  }
  memset(v25, 0, sizeof(v25));
  v4 = nullptr;
  memset(str_AE408_AE3F8->str_36382x, 0, 20*sizeof(Type_AE400_29795*));
  //v5 = dword_AE408_AE3F8();
  //v6 = dword_AE400_AE3F0();
  str_AE408_AE3F8->var_u32_36462[1] = nullptr;
  v7 = nullptr;
  str_AE408_AE3F8->var_u32_36462[2] = nullptr;
  v8 = nullptr;
  str_AE408_AE3F8->var_u32_36462[0] = nullptr;
  v26 = nullptr;
  str_AE408_AE3F8->var_u32_36462[3] = nullptr;
  //str_AE400_AE3F0->str_29795[1]
  //v9 = (int *)(v6 + 29959);
  //while ( (unsigned int)v9 < v6 + 193795 )
  for(int v9x = 1 ; v9x < 1000 ; v9x++)
  {
      //str_AE400_AE3F0->str_29795[v9x].str_12.u32_12
    v10 = str_AE400_AE3F0->str_29795[v9x].var_u8_29859_64;
    if ( !v10 )
      goto LABEL_40;
    switch ( v10 )
    {
      case 3:
          //str_AE400_AE3F0->str_29795[v9x].var_29811_16.dword
        if (str_AE400_AE3F0->str_29795[v9x].actLife_29807_12 >= 0 && (str_AE400_AE3F0->str_29795[v9x].var_29811_16.dword & 0x10) == 0 )
        {
          if ( v7 )
            v7->next = &str_AE400_AE3F0->str_29795[v9x];
          else
              str_AE408_AE3F8->var_u32_36462[0] = &str_AE400_AE3F0->str_29795[v9x];
          //v13 = (int)&str_AE400_AE3F0->str_29795;
          v13 = str_AE400_AE3F0->str_29795;
          v7 = &str_AE400_AE3F0->str_29795[v9x];
          goto LABEL_39;
        }
        goto LABEL_40;
      case 5:
        if (str_AE400_AE3F0->str_29795[v9x].actLife_29807_12 >= 0 && str_AE400_AE3F0->str_29795[v9x].var_u8_29865_70 != 120 )
        {
          v11 = v25[str_AE400_AE3F0->str_29795[v9x].var_u8_29860_65];
          if ( v11 )
            v11->next = &str_AE400_AE3F0->str_29795[v9x];
          else
              str_AE408_AE3F8->var_u32_36462[str_AE400_AE3F0->str_29795[v9x].var_u8_29860_65] = &str_AE400_AE3F0->str_29795[v9x];
          //*v9 = v6 + 29795;
          str_AE400_AE3F0->str_29795[v9x].next = str_AE400_AE3F0->str_29795;
          v25[str_AE400_AE3F0->str_29795[v9x].var_u8_29860_65] = &str_AE400_AE3F0->str_29795[v9x];
        }
        goto LABEL_40;
      case 9:
        if ( v8 )
          v8->next = &str_AE400_AE3F0->str_29795[v9x];
        else
            str_AE408_AE3F8->var_u32_36462[3] = &str_AE400_AE3F0->str_29795[v9x];
        //*v9 = v6 + 29795;
        str_AE400_AE3F0->str_29795[v9x].next = str_AE400_AE3F0->str_29795;
        v8 = &str_AE400_AE3F0->str_29795[v9x];
        goto LABEL_40;
      case 10:
        v12 = str_AE400_AE3F0->str_29795[v9x].var_u8_29860_65;
        if ( v12 < 0x27u )
          goto LABEL_40;
        if ( v12 <= 0x28u )
        {
          if ( v4 )
            v4->next = &str_AE400_AE3F0->str_29795[v9x];
          else
              str_AE408_AE3F8->var_u32_36462[1] = &str_AE400_AE3F0->str_29795[v9x];
          //v13 = v6 + 29795;
          v13 = str_AE400_AE3F0->str_29795;
          v4 = &str_AE400_AE3F0->str_29795[v9x];
          goto LABEL_39;
        }
        if ( v12 == 45 )
        {
          if ( v26 )
            v26->next = &str_AE400_AE3F0->str_29795[v9x];
          else
              str_AE408_AE3F8->var_u32_36462[2] = &str_AE400_AE3F0->str_29795[v9x];
          //v13 = v6 + 29795;
          v13 = str_AE400_AE3F0->str_29795;
          v26 = &str_AE400_AE3F0->str_29795[v9x];
LABEL_39:
          str_AE400_AE3F0->str_29795[v9x].next = v13;
        }
LABEL_40:
        //v9 += 41;
        break;
      default:
        goto LABEL_40;
    }
  }
  //v14 = dword_AE408_AE3F8();
  //v15 = str_AE408_AE3F8->var_u8_0;
  //dword_AE400_AE3F0(v6);
  if ( (str_AE408_AE3F8->var_u8_0 & 0x10) == 0 )
    sub_54F00();
  sub_16540();

  sub_48230(&str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333]);
  for ( int jx = 1; jx < 1000; jx++ )
  {
      //adress 212A70
//debug
#ifdef debug1

      if ((word_AE454_AE444.x == 0x2e7f) &&
          (word_AE454_AE444.y == 0x4c80) &&
          (word_AE454_AE444.z == 0x0818))
      {
          compareindex_41780++;
          compareindex_41780--;
      }

      if (compareindex_41780 == 0x194e)
      {
          compareindex_41780++;
          compareindex_41780--;
      }
      //add_compare(0x212A0A, true);
      compareindex_41780++;
#endif debug1
      //debug
    v17 = str_AE400_AE3F0->str_29795[jx].var_u8_29859_64;
    if ( v17 )
    {
      if (dword_96902[v17].str_0[str_AE400_AE3F0->str_29795[jx].var_u8_29865_70].data4 == str_AE400_AE3F0->str_29795[jx].var_u8_29865_70)
      {
        if (dword_96902[v17].str_0[str_AE400_AE3F0->str_29795[jx].var_u8_29865_70].data10)
        {
            //adress 212A70
            //debug
#ifdef debug1
            if (compareindex_41780_2 == 0x00002bb1)
            //if (compareindex_41780_2 == 0x00008648)
            {
                compareindex_41780_2++;
                compareindex_41780_2--;
                //str_AE400_AE3F0->str_29795[jx].id_29819_24
            }      
            
            //add_compare(0x212A70, true);
            /*
            uint8_t origbyte20 = 0;
            uint8_t remakebyte20 = 0;
            char buffer1[500];
            sprintf(buffer1, "%08X-FFFFFFF6", 0x212A70);
            int comp20 = compare_with_sequence(buffer1, (uint8_t*)&str_AE400_AE3F0->str_29795[jx].id_29819_24, 0xFFFFFFF6, compareindex_41780_2 - 0, 2, 2, &origbyte20, &remakebyte20, 0, true);
            */

            /*
            uint8_t origbyte20 = 0;
            uint8_t remakebyte20 = 0;
            char buffer1[500];
            sprintf(buffer1, "%08X-00039C2B", 0x212A70);
            int comp20 = compare_with_sequence(buffer1, (uint8_t*)&str_AE400_AE3F0->str_29795[0x1dc].var_u32_29867_72, 0x0003A1EF, compareindex_41780_2 - 0, 6, 6, &origbyte20, &remakebyte20, 0, true);
            sprintf(buffer1, "%08X-00039C79", 0x212A70);
            comp20 = compare_with_sequence(buffer1, (uint8_t*)&str_AE400_AE3F0->str_29795[0x1dc].var_u32_150, 0x0003A23D, compareindex_41780_2 - 0, 6, 6, &origbyte20, &remakebyte20, 0, true);
            sprintf(buffer1, "%08X-00039C11", 0x212A70);
            comp20 = compare_with_sequence(buffer1, (uint8_t*)&str_AE400_AE3F0->str_29795[0x1dc].var_u16_29841_46, 0x0003A23D, compareindex_41780_2 - 0, 2, 2, &origbyte20, &remakebyte20, 0, true);
            */

            /*
            uint8_t origbyte20 = 0;
            uint8_t remakebyte20 = 0;
            char buffer1[500];
            sprintf(buffer1, "%08X-0003A1EF", 0x212A70);
            int comp20 = compare_with_sequence(buffer1, (uint8_t*)&str_AE400_AE3F0->str_29795[0x1dc].var_u32_29867_72, 0x0003A1EF, compareindex_41780_2 - 0, 6, 6, &origbyte20, &remakebyte20, 0, true);
            sprintf(buffer1, "%08X-0003A23D", 0x212A70);
            comp20 = compare_with_sequence(buffer1, (uint8_t*)&str_AE400_AE3F0->str_29795[0x1dc].var_u32_150, 0x0003A23D, compareindex_41780_2 - 0, 6, 6, &origbyte20, &remakebyte20, 0, true);
            sprintf(buffer1, "%08X-0026C454", 0x212A70);
            comp20 = compare_with_sequence(buffer1, (uint8_t*)&word_AE454_AE444, 0x0026C454, compareindex_41780_2 - 0, 6, 6, &origbyte20, &remakebyte20, 0, true);
            */

            compareindex_41780_2++;
#endif debug1
            //debug
            dword_96902[v17].str_0[str_AE400_AE3F0->str_29795[jx].var_u8_29865_70].data6(&str_AE400_AE3F0->str_29795[jx]);
            str_AE400_AE3F0->str_29795[jx].var_u8_29858_63++;
        }
      }
      else
      {
        sprintf(v24, "STATE-ID does not match. CLASS %d, MODEL %d, STATE %d", v17, str_AE400_AE3F0->str_29795[jx].var_u8_29860_65, str_AE400_AE3F0->str_29795[jx].var_u8_29865_70);
        sub_41E80(&str_AE400_AE3F0->str_29795[jx]);
        
        allert_error();//fix non exist function, delete this line after this
      }
    }
  }
LABEL_52:
  if (pressedKeys_12EEF0_12EEE0[20] && pressedKeys_12EEF0_12EEE0[38])//byte_12EF04 t  byte_12EF16 l
    nullsub_3(0);
}
// 40DF0: using guessed type int nullsub_3(_DWORD);
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 96902: using guessed type int dword_96902;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 12EF04: using guessed type char byte_12EF04;
// 12EF16: using guessed type char byte_12EF16;
// 41780: using guessed type int var_68[20];
// 41780: using guessed type char var_168[256];

//----- (00041B20) --------------------------------------------------------
void sub_41B20(TypeStrAE400_13323* a1x, Type_AE400_29795* a2x)//212B20_
{
  if ( (str_AE408_AE3F8->var_u8_2 & 1) == 0 )
  {      
      sub_11F50(&a2x->var_u32_29867_72);
      a1x->str_13895_572[a1x->var_u16_13339_16].axis = a2x->var_u32_29867_72;
      a1x->str_13895_572[a1x->var_u16_13339_16].yaw_6 = a2x->var_u16_29825_30;
      a1x->str_13895_572[a1x->var_u16_13339_16].fov_12 = a1x->str_13895_572[0].fov_12;
      a1x->str_13895_572[a1x->var_u16_13339_16].roll_10 = a2x->var_u32_29955_160->u16_327;

          /*
    *(_WORD *)(a1 + 14 * (*(unsigned __int16 *)(a1 + 16) - 1) + 586) = *(_WORD *)(a2 + 72);
    *(_WORD *)(a1 + 14 * (*(unsigned __int16 *)(a1 + 16) - 1) + 588) = *(_WORD *)(a2 + 74);
    sub_11F50((axis_3d*)(__int16 *)(a2 + 72));
    *(_WORD *)(14 * (*(unsigned __int16 *)(a1 + 16) - 1) + a1 + 590) = *(_WORD *)(a2 + 76);
    *(_WORD *)(a1 + 14 * (*(unsigned __int16 *)(a1 + 16) - 1) + 592) = *(_WORD *)(a2 + 30);
    *(_WORD *)(a1 + 14 * (*(unsigned __int16 *)(a1 + 16) - 1) + 598) = *(_WORD *)(a1 + 584);
    *(_WORD *)(a1 + 14 * (*(unsigned __int16 *)(a1 + 16) - 1) + 596) = *(_WORD *)(*(_DWORD *)(a2 + 160) + 327);
    */
    //v2 = *(_DWORD *)(a2 + 160);
      int v4 = a2x->var_u32_29955_160->v_22;
    a1x->str_13895_572[a1x->var_u16_13339_16].pitch_8 = a2x->var_u32_29955_160->u16_329 / 2
        + str_AE408_AE3F8->str_93.var_u8[1]
        * ((v4 - (my_sign32(v4) << 4) + my_sign32(v4)) >> 4)
        - ((v4 - (my_sign32(v4) << 3) + my_sign32(v4)) >> 3);
    /*
    *(_WORD *)(a1 + 14 * (a1x->var_u16_13339_16 - 1) + 594) = a2x->var_u32_29955_160->u16_329 / 2
                                                                     + ((int)(v4
                                                                            - (__CFSHL__(
                                                                                 (unsigned __int64)v4 >> 32,
                                                                                 4)
                                                                             + 16
                                                                             * ((unsigned __int64)v4 >> 32))) >> 4)
                                                                     * str_AE408_AE3F8->str_93.var_u8[1]
                                                                     - ((int)(v4
                                                                            - (__CFSHL__(
                                                                                 (unsigned __int64)v4 >> 32,
                                                                                 3)
                                                                             + 8
                                                                             * ((unsigned __int64)v4 >> 32))) >> 3);
    */
  }
}
// AE408: using guessed type int dword_AE408_AE3F8();

//SYNCHRONIZED WITH REMC1
int sub_41C70_41FB0(Type_AE400_29795* event, axis_3d* position)
{
  int result; // eax
  if ((event->var_u32_29867_72.x >> 8) == (position->x >> 8) && (event->var_u32_29867_72.y >> 8) == (position->y >> 8))
  {
    result = 0;
    event->var_u32_29867_72 = *position;
  }
  else
  {
    sub_41DD0_42110(event);
    sub_41CF0_42030(event, position);
    return 1;
  }
  return result;
}

//----- (00041CC0) --------------------------------------------------------
int sub_41CC0(__int16 a1, int a2, int a3)
{
  sub_41DD0_42110((Type_AE400_29795*)a2);
  sub_41CF0_42030((Type_AE400_29795*)a2, (axis_3d*)a3);
  return 1;
}

//SYNCHRONIZED WITH REMC1
void sub_41CF0_42030(Type_AE400_29795* a1, axis_3d* a2)//212CF0_
{
  if ( (a1->var_29811_16.byte[0] & 4) == 0 )
  {
    a1->var_u16_29817_22 = 0;
    uaxis_2d tempPos;
    tempPos._axis_2d.x = (a2->x >> 8);
    tempPos._axis_2d.y = (a2->y >> 8);
    a1->var_u16_29815_20 = mapEntityIndex_10C1E0_10C1D0[tempPos.word];
    if (a1->var_u16_29815_20)
        str_AE400_AE3F0->str_29795[a1->var_u16_29815_20].var_u16_29817_22 = a1 - str_AE400_AE3F0->str_29795;
    mapEntityIndex_10C1E0_10C1D0[tempPos.word] = a1 - str_AE400_AE3F0->str_29795;
    a1->var_u32_29867_72 = *a2;
    a1->var_29811_16.byte[0] |= 4u;
  }
}

//SYNCHRONIZED WITH REMC1
void sub_41DD0_42110(Type_AE400_29795* a2)
{
  if ( (a2->var_29811_16.byte[0] & 4) != 0 )
  {
    if (a2->var_u16_29817_22)
        str_AE400_AE3F0->str_29795[a2->var_u16_29817_22].var_u16_29815_20 = a2->var_u16_29815_20;
    else
    {
        uaxis_2d tempPos;
        tempPos._axis_2d.x = (a2->var_u32_29867_72.x >> 8);
        tempPos._axis_2d.y = (a2->var_u32_29867_72.y >> 8);
        mapEntityIndex_10C1E0_10C1D0[tempPos.word] = a2->var_u16_29815_20;
    }
    if (a2->var_u16_29815_20)
    {
      str_AE400_AE3F0->str_29795[a2->var_u16_29815_20].var_u16_29817_22 = a2->var_u16_29817_22;
    }
    a2->var_29811_16.byte[0] &= ~4u;
  }
}

//----- (00041E80) --------------------------------------------------------
void sub_41E80(Type_AE400_29795* event)
{
    event->var_29811_16.byte[1] |= 4u;
}

//SYNCHRONIZED WITH REMC1
void sub_41E90_421D0(Type_AE400_29795* a2)
{
  sub_41DD0_42110(a2);
  a2->var_u8_29859_64 = 0;
  str_AE400_AE3F0->var_u32_40++;
  str_AE400_AE3F0->var_u32_593[str_AE400_AE3F0->var_u32_40] = a2;
}

//----- (00041EC0) --------------------------------------------------------
void sub_41EC0_42200(axis_3d* a1x, unsigned __int16 a2, __int16 a3, __int16 a4)//212EC0_
{
  //_WORD *result; // eax
  unsigned __int16 v5; // bx
  int v6; // edx

  //result = a1;
  LOBYTE(v5) = a3;
  LOWORD(v6) = a4;
  if ( a4 )
  {
    HIBYTE(v5) = HIBYTE(a3) & 7;
    HIBYTE(a2) &= 7u;
    if ( v5 )
    {
      a1x->z -= (unsigned int)(a4 * sin_90B4C[v5]) >> 16;
      v6 = (a4 * cos_9134C[v5]) >> 16;
    }
    a1x->x += (unsigned int)((__int16)v6 * sin_90B4C[a2]) >> 16;
    a1x->y -= (unsigned int)(cos_9134C[a2] * (__int16)v6) >> 16;
  }
}
// 90B4C: using guessed type int cos_90B4C[256];
// 9134C: using guessed type void (*off_9134C[2])();

//----- (00041F50) --------------------------------------------------------
void sub_41F50_42290(axis_3d* pos1, axis_3d* pos2)
{
  //_WORD *result; // eax
  unsigned __int16 v3; // dx
  unsigned __int8 v4; // cl
  unsigned __int8 v5; // bl
  unsigned __int8 v6; // bl

  //result = a2;
  LOBYTE(v3) = pos1->x >> 8;
  HIBYTE(v3) = pos1->y >> 8;
  v4 = mapHeightmap_DC1E0_DC1D0[v3];
  pos2->x = v4;
  LOBYTE(v3) = v3 + 1;
  pos2->y = v4;
  pos2->x -= mapHeightmap_DC1E0_DC1D0[v3];
  v5 = mapHeightmap_DC1E0_DC1D0[v3];
  ++HIBYTE(v3);
  pos2->y += v5;
  pos2->x -= mapHeightmap_DC1E0_DC1D0[v3];
  v6 = mapHeightmap_DC1E0_DC1D0[v3];
  LOBYTE(v3) = v3 - 1;
  pos2->y -= v6;
  pos2->x += mapHeightmap_DC1E0_DC1D0[v3];
  pos2->y -= mapHeightmap_DC1E0_DC1D0[v3];
  //return result;
}

//----- (00042000) --------------------------------------------------------
int sub_42000(axis_3d* a1x, int a2, int a3, int a4, int a5)
{
  int v5; // ecx
  int result; // eax

  v5 = a1x->z;
  result = 0;
  if ( v5 <= a2 + a4 )
  {
    if ( v5 > a2 + a3 )
    {
        a1x->z = v5 + 25 * a5 / 100;
      result = 1;
    }
  }
  else
  {
    result = 1;
    a1x->z += a5;
  }
  if (a1x->z < a2 + a3 )
  {
    result = 1;
    a1x->z = a3 + a2;
  }
  return result;
}

//----- (00042090) --------------------------------------------------------
int sub_42090(axis_3d* a1x, int a2, int a3, int a4, int a5)
{
  int v5; // esi
  int v6; // ecx

  v5 = 0;
  if ( (sub_11760(a1x) & 1) != 0 && !a2 )
    a3 = -768;
  v6 = a1x->z;
  if ( v6 <= a2 + a4 )
  {
    if ( v6 > a2 + a3 )
    {
      v5 = 1;
      a1x->z = v6 + 25 * a5 / 100;
    }
  }
  else
  {
    v5 = 1;
    a1x->z += a5;
  }
  if (a1x->z < a2 + a3 )
  {
    v5 = 1;
    a1x->z = a2 + a3;
  }
  if (a1x->z == -768 )
    return -1;
  return v5;
}

//----- (00042150) --------------------------------------------------------
__int16 sub_42150_42490(axis_3d* a1x, axis_3d* a2x)
{
  return sub_40F87_412C7(a2x->x - a1x->x, a2x->y - a1x->y);
}

//----- (00042180) --------------------------------------------------------
__int16 sub_42180(axis_3d* a1x, axis_3d* a2x)
{
  __int16 v3; // [esp-4h] [ebp-8h]

  v3 = -(__int16)sub_423D0_42710(a1x, a2x);
  return sub_40F87_412C7(a1x->z - a2x->z, v3);
}

//----- (00042210) --------------------------------------------------------
int sub_42210(__int16 a1, __int16 a2)
{
  __int64 v2; // rax
  int result; // eax

  v2 = (a1 & 0x7FF) - (a2 & 0x7FF);
  result = (HIDWORD(v2) ^ v2) - HIDWORD(v2);
  if ( (unsigned __int16)result > 0x400u )
    return 2048 - result;
  return result;
}

//----- (00042240) --------------------------------------------------------
int sub_42240(int a1, __int16 a2)
{
  int v2; // ecx
  int v3; // ebx

  v2 = a1;
  BYTE1(v2) = BYTE1(a1) & 7;
  v3 = (a2 & 0x7FF) - (unsigned __int16)v2;
  if ( !v3 )
    return v2 ^ (unsigned __int16)v2;
  if ( (int)abs32(v3) > 1024 )
  {
    if ( v3 >= 0 )
      v3 -= 2048;
    else
      v3 += 2048;
  }
  if ( v3 )
    return v3 / (int)abs32(v3);
  else
    return 0;
}

//----- (000422A0) --------------------------------------------------------
int sub_422A0(unsigned __int16 a1, __int16 a2, int a3, unsigned __int16 a4)
{
  int v4; // ebx
  int v5; // esi
  int v6; // eax

  if ( a1 == a2 )
    return 0;
  v4 = sub_42210(a1, a2);
  v5 = sub_42240(a1, a2);
  v6 = v4;
  if ( (__int16)v4 > (int)a4 )
    v6 = a4;
  return v5 * v6;
}

//----- (00042300) --------------------------------------------------------
int sub_42300(_WORD *a1, _WORD *a2)
{
  int v2; // ebx
  __int64 v3; // rax
  int v4; // eax

  v2 = abs16(*a2 - *a1);
  v3 = (__int16)(a2[1] - a1[1]);
  v4 = (HIDWORD(v3) ^ v3) - HIDWORD(v3);
  if ( v2 < v4 )
    return v4;
  return v2;
}

//----- (00042340) --------------------------------------------------------
unsigned int sub_42340(axis_3d* a1x, axis_3d* a2x)
{
  int v2; // edx

  v2 = (__int16)(a2x->y - a1x->y);
  return Distance_410CE_4140E((__int16)(a2x->x - a1x->x) * (__int16)(a2x->x - a1x->x) + v2 * v2 + (__int16)(a2x->z - a1x->z)
                                                                         * (__int16)(a2x->z - a1x->z));
  //(x1-x2)^2+(y1-y2)^2+(z1-z2)^2
}

//----- (00042390) --------------------------------------------------------
int sub_42390(_WORD *a1, _WORD *a2)
{
  int v2; // edx

  v2 = (__int16)(a2[1] - a1[1]);
  return (__int16)(*a2 - *a1) * (__int16)(*a2 - *a1) + v2 * v2 + (__int16)(a2[2] - a1[2]) * (__int16)(a2[2] - a1[2]);
}

//----- (000423D0) --------------------------------------------------------
unsigned int sub_423D0_42710(axis_3d* a1x, axis_3d* a2x)
{
  int v2; // edx

  v2 = (__int16)(a2x->y - a1x->y);
  return Distance_410CE_4140E((__int16)(a2x->x - a1x->x) * (__int16)(a2x->x - a1x->x) + v2 * v2);
}

//----- (00042410) --------------------------------------------------------
int sub_42410(_WORD *a1, _WORD *a2)
{
  int v2; // edx

  v2 = (__int16)(a2[1] - a1[1]);
  return v2 * v2 + (__int16)(*a2 - *a1) * (__int16)(*a2 - *a1);
}

//----- (000424F0) --------------------------------------------------------
void sub_424F0(Type_AE400_29795* a1x, unsigned __int8 a2)
{
  a1x->var_u8_29865_70 = a2;
}

//----- (00042510) --------------------------------------------------------
int sub_42510(Type_AE400_29795* a1x)
{
  int result; // eax

  if (a1x->var_u8_29883_88 >= a1x->var_u8_29884_89)
    return 1;
  result = 0;
  a1x->var_u8_29883_88++;
  return result;
}

void sub_42530_42870(char a1)
{
  byte_93954 = a1;
}

void* malloc_42540_42880(size_t size) {
    void* result = malloc(size);
    memset(result, 0, size);
    return result;
}

//----- (00042540) --------------------------------------------------------
void* malloc_42540_42880_orig(size_t size)
{
  unsigned int v1; // edi
  int result; // eax
  int *v3; // edx
  unsigned int v4; // ebx
  int *i; // esi
  unsigned int v6; // ecx

  v1 = size + 3;
  LOWORD(v1) = (size + 3) & 0xFFFC;
  sub_63010_63520();
  result = (int)malloc_425C0_42900(v1);
  if ( !result )
  {
    v3 = &dword_1302A0_130290;
    v4 = -1;
    for ( i = 0; v3; v3 = (int *)v3[2] )
    {
      v6 = v3[1];
      if ( v1 <= v6 && v4 > v6 && !*((_BYTE *)v3 + 16) )
      {
        v4 = v3[1];
        i = v3;
      }
    }
    if ( i && sub_42650((int)i, v1) )
    {
      sub_63338_63848();
      memset((void*)*i, 0, v1);
      return (void*)*i;
    }
    else
    {
      return 0;
    }
  }
  return (void*)result;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 1302A0: using guessed type int dword_1302A0_130290;

//----- (000425C0) --------------------------------------------------------
void* malloc_425C0_42900(size_t size)
{
    void* result = malloc(size);
    memset(result, 0, size);
    return result;
}

int malloc_425C0_42900_orig(int a1)
{
  int *v1; // edx
  unsigned int v2; // ebx
  int *v3; // esi
  unsigned int v4; // edi
  unsigned int v5; // ecx

  sub_63010_63520();
  v1 = &dword_1302A0_130290;
  v2 = -1;
  v4 = a1 + 15;
  v3 = 0;
  for ( LOWORD(v4) = (a1 + 15) & 0xFFF0; v1; v1 = (int *)v1[2] )
  {
    v5 = v1[1];
    if ( v4 <= v5 && v2 > v5 && !*((_BYTE *)v1 + 16) && dword_12F6A4_12F694[3 * *((unsigned __int8 *)v1 + 17)] )
    {
      v3 = v1;
      v2 = v1[1];
    }
  }
  if ( !v3 || !sub_42650((int)v3, v4) )
    return 0;
  sub_63338_63848();
  memset((void*)*v3, 0, v4);
  return *v3;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12F6A4: using guessed type int dword_12F6A4_12F694[];
// 1302A0: using guessed type int dword_1302A0_130290;

//----- (00042650) --------------------------------------------------------
char sub_42650(int a1, int a2)
{
  char result; // al
  int *i; // edx
  char v4; // al
  int v5; // edi

  if ( a2 == *(_DWORD *)(a1 + 4) )
  {
    *(_BYTE *)(a1 + 16) = byte_93954;
    return 1;
  }
  else
  {
    for ( i = &dword_1302A0_130290; i < &dword_1314A0; i = (int *)((char *)i + 18) )
    {
      if ( !i[1] )
        break;
    }
    if ( i == &dword_1314A0 )
    {
      return 0;
    }
    else
    {
      i[1] = *(_DWORD *)(a1 + 4) - a2;
      *i = a2 + *(_DWORD *)a1;
      v4 = byte_93954;
      *(_DWORD *)(a1 + 4) = a2;
      *(_BYTE *)(a1 + 16) = v4;
      *((_BYTE *)i + 17) = *(_BYTE *)(a1 + 17);
      i[2] = *(_DWORD *)(a1 + 8);
      i[3] = a1;
      v5 = *(_DWORD *)(a1 + 8);
      if ( v5 )
        *(_DWORD *)(v5 + 12) = (uint32)i;
      result = 1;
      *(_DWORD *)(a1 + 8) = (uint32)i;
    }
  }
  return result;
}
// 93954: using guessed type char byte_93954;
// 1302A0: using guessed type int dword_1302A0_130290;
// 1314A0: using guessed type int dword_1314A0;

void free_426E0_42A20(void* buffer)
{
    free(buffer);
}

//----- (000426E0) --------------------------------------------------------
void free_426E0_42A20_orig(int a1)
{
  int *v1; // ebx
  char v2; // cl
  int *i; // ebx

  v1 = &dword_1302A0_130290;
  v2 = 0;
  if ( &dword_1302A0_130290 )
  {
    while ( a1 != *v1 )
    {
      v1 = (int *)v1[2];
      if ( !v1 )
        goto LABEL_5;
    }
    v2 = 1;
    *((_BYTE *)v1 + 16) = 0;
  }
LABEL_5:
  if ( v2 == 1 )
  {
    for ( i = &dword_1302A0_130290; i; i = (int *)i[2] )
    {
      if ( !*((_BYTE *)i + 16) )
        sub_42860((int)i);
    }
  }
  return sub_63338_63848();
}
// 1302A0: using guessed type int dword_1302A0_130290;

//----- (00042730) --------------------------------------------------------
int sub_42730_42A70(int a1, int a2)
{
  int v2; // eax
  int *v3; // ebx
  char v4; // cl
  int *i; // ebx

  v2 = a2 + 3;
  v3 = &dword_1302A0_130290;
  v4 = 0;
  if ( &dword_1302A0_130290 )
  {
    while ( a1 != *v3 )
    {
      v3 = (int *)v3[2];
      if ( !v3 )
        goto LABEL_5;
    }
    *((_BYTE *)v3 + 16) = 0;
    LOBYTE(v2) = (a2 + 3) & 0xFC;
    sub_42650((int)v3, v2);
    v4 = 1;
  }
LABEL_5:
  if ( v4 == 1 )
  {
    for ( i = &dword_1302A0_130290; i; i = (int *)i[2] )
    {
      if ( !*((_BYTE *)i + 16) )
        sub_42860((int)i);
    }
  }
  sub_63338_63848();
  return 1;
}
// 1302A0: using guessed type int dword_1302A0_130290;

//----- (000427A0) --------------------------------------------------------
int sub_427A0(int a1, int a2)
{
  int *v2; // ebx
  unsigned int v3; // ecx
  int v4; // edi
  unsigned int v5; // edx
  int v6; // edx
  char v7; // al
  int *i; // ebx
  char v10; // [esp+0h] [ebp-Ch]

  v2 = &dword_1302A0_130290;
  v3 = a2 + 3;
  LOBYTE(v3) = (a2 + 3) & 0xFC;
  v10 = 0;
  if ( &dword_1302A0_130290 )
  {
    while ( a1 != *v2 )
    {
      v2 = (int *)v2[2];
      if ( !v2 )
        goto LABEL_13;
    }
    v4 = v2[2];
    *((_BYTE *)v2 + 16) = 0;
    if ( !v4 || *(_BYTE *)(v4 + 16) )
      return 0;
    v5 = v2[1] + *(_DWORD *)(v4 + 4);
    if ( v5 <= v3 )
    {
      if ( v5 < v3 )
        return 0;
      sub_42860(v4);
    }
    else
    {
      *(_DWORD *)(v4 + 4) = v5 - v3;
      v6 = v2[2];
      v7 = byte_93954;
      v2[1] = v3;
      *(_BYTE *)(v6 + 16) = v7;
    }
    v10 = 1;
    *((_BYTE *)v2 + 16) = byte_93954;
  }
LABEL_13:
  if ( v10 == 1 )
  {
    for ( i = &dword_1302A0_130290; i; i = (int *)i[2] )
    {
      if ( !*((_BYTE *)i + 16) )
        sub_42860((int)i);
    }
  }
  sub_63338_63848();
  return 1;
}
// 93954: using guessed type char byte_93954;
// 1302A0: using guessed type int dword_1302A0_130290;

//----- (00042860) --------------------------------------------------------
int sub_42860(int a1)
{
  int result; // eax
  int v2; // edx
  int v3; // ebx

  result = a1;
  if ( *(_DWORD *)(a1 + 12) )
  {
    *(_BYTE *)(a1 + 16) = 0;
    v2 = *(_DWORD *)(a1 + 12);
    if ( *(_BYTE *)(a1 + 17) == *(_BYTE *)(v2 + 17) && !*(_BYTE *)(v2 + 16) )
    {
      v3 = *(_DWORD *)(a1 + 8);
      if ( v3 )
        *(_DWORD *)(v3 + 12) = v2;
      *(_DWORD *)(*(_DWORD *)(a1 + 12) + 8) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(*(_DWORD *)(a1 + 12) + 4) += *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = 0;
    }
  }
  return result;
}

//----- (000428B0) --------------------------------------------------------
void sub_428B0_42BF0()
{
  if ( lastPressedKey_12EF70_12EF60 == 1
    || mouseLeftButton_12EFDE_12EFCE && mouseX_9AD8C >= 568 && mouseX_9AD8C <= 606 && mouseY_9AD8E >= 96 && mouseY_9AD8E <= 134 )
  {
    word_93988 = 1;
    lastPressedKey_12EF70_12EF60 = 0;
    mouseLeftButton_12EFDE_12EFCE = 0;
    FadeInOut_61CC0_621D0(0, 0x10u, 0);
  }
  else
  {
    mouseLeftButton_12EFDE_12EFCE = 0;
  }
}
// 93988: using guessed type __int16 word_93988;
// 9AD8C: using guessed type __int16 mouseX_9AD8C;
// 9AD8E: using guessed type __int16 mouseY_9AD8E;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;

//----- (00042930) --------------------------------------------------------
int sub_42930(_BYTE *a1, char *a2, unsigned __int8 a3)
{
  const char *v3; // edx
  char *v5; // edi
  char v6; // al
  char v7; // al
  char *v8; // esi
  char *v9; // edi
  char v10; // al
  char v11; // al
  char v13; // ah

  v3 = (char*)(a1 + 26);
  v5 = (char*)(a1 + 26);
  do
  {
    v6 = *a2;
    *v5 = *a2;
    if ( !v6 )
      break;
    v7 = a2[1];
    a2 += 2;
    v5[1] = v7;
    v5 += 2;
  }
  while ( v7 );
  while ( strlen(v3) < 0xF )
  {
    v8 = asc_A95F4;
    v9 = (char *)&v3[strlen(v3)];
    do
    {
      v10 = *v8;
      *v9 = *v8;
      if ( !v10 )
        break;
      v11 = v8[1];
      v8 += 2;
      v9[1] = v11;
      v9 += 2;
    }
    while ( v11 );
  }
  *a1 = -80;
  if ( SetNetbios_431A0_434E0((myNCB*)a1) == -1 )
    return -99;
  while ( 1 )
  {
    v13 = a1[49];
    if ( v13 != -1 )
      break;
    sub_428B0_42BF0();
    sub_4E3D0_4E710(a3);
  }
  if ( v13 )
    sub_4E510(a3);
  else
    sub_4E470_4E7B0(a3);
  return -(unsigned __int8)a1[49];
}

//----- (00042A00) --------------------------------------------------------
int sub_42A00_42D40(__int16 a1)
{
  char *v1; // esi
  char *v2; // edi
  char v3; // al
  char v4; // al
  char *v5; // esi
  const char *v6; // edi
  char *v7; // edi
  char v8; // al
  char v9; // al
  __int16 v11; // ax
  char *v12; // esi
  char *v13; // edi
  char v14; // al
  char v15; // al
  char v16[32]; // [esp+0h] [ebp-20h] BYREF

  *(_BYTE *)connection_93990[word_9395A] = -112;
  sprintf(v16, "%s%d", "TESTER", a1);
  v1 = v16;
  v2 = (char *)(connection_93990[word_9395A] + 10);
  do
  {
    v3 = *v1;
    *v2 = *v1;
    if ( !v3 )
      break;
    v4 = v1[1];
    v1 += 2;
    v2[1] = v4;
    v2 += 2;
  }
  while ( v4 );
  while ( strlen((const char *)(connection_93990[word_9395A] + 10)) < 0xF )
  {
    v5 = asc_A95F4;
    v6 = (const char *)(connection_93990[word_9395A] + 10);
    v7 = (char *)&v6[strlen(v6)];
    do
    {
      v8 = *v5;
      *v7 = *v5;
      if ( !v8 )
        break;
      v9 = v5[1];
      v5 += 2;
      v7[1] = v9;
      v7 += 2;
    }
    while ( v9 );
  }
  *(_BYTE *)(connection_93990[word_9395A] + 42) = 0;
  *(_BYTE *)(connection_93990[word_9395A] + 43) = 0;
  if ( SetNetbios_431A0_434E0(connection_93990[word_9395A]) == -1 )
    return -99;
  while ( *(_BYTE *)(connection_93990[word_9395A] + 49) == 0xFF && *(_BYTE *)(connection_93990[a1] + 49) == 0xFF )
  {
    sub_4E3D0_4E710(a1);
    sub_428B0_42BF0();
    if ( word_93988 == 1 )
    {
      sub_42C70_42FB0(word_9395A);
      return -1;
    }
  }
  v11 = 0;
  if ( !*(_BYTE *)(connection_93990[a1] + 49) )
  {
    sub_42C70_42FB0(word_9395A);
    v11 = 1;
  }
  if ( !*(_BYTE *)(connection_93990[word_9395A] + 49) )
  {
    sub_42C70_42FB0(a1);
    v11 = 1;
  }
  if ( v11 == 1 )
    sub_4E470_4E7B0(a1);
  if ( !*(_BYTE *)(connection_93990[word_9395A] + 49) )
  {
    sub_42C70_42FB0(a1);
    v12 = (char *)(connection_93990[word_9395A] + 10);
    v13 = (char *)(connection_93990[a1] + 10);
    do
    {
      v14 = *v12;
      *v13 = *v12;
      if ( !v14 )
        break;
      v15 = v12[1];
      v12 += 2;
      v13[1] = v15;
      v13 += 2;
    }
    while ( v15 );
    *(_BYTE *)(connection_93990[a1] + 2) = *(_BYTE *)(connection_93990[word_9395A] + 2);
    *(_BYTE *)(connection_93990[a1] + 49) = *(_BYTE *)(connection_93990[word_9395A] + 49);
  }
  return -*(unsigned __int8 *)(connection_93990[a1] + 49);
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 9395A: using guessed type __int16 word_9395A;
// 93988: using guessed type __int16 word_93988;
// 93990: using guessed type int connection_93990[7];

//----- (00042C70) --------------------------------------------------------
int sub_42C70_42FB0(__int16 a1)
{
  if ( *(_BYTE *)(connection_93990[a1] + 49) == 0xFF )
  {
    mainconnection_9398C->ncb_command_0 = 53;
    mainconnection_9398C->ncb_buffer_4.p = (uint8_t*)connection_93990[a1];//original 6
    if ( SetNetbios_431A0_434E0(mainconnection_9398C) == -1 )
      return -99;
    do
    {
      while (mainconnection_9398C->ncb_cmd_cplt_49 == 0xFF )
        ;
    }
    while ( *(_BYTE *)(connection_93990[a1] + 49) == 0xFF );
  }
  return -mainconnection_9398C->ncb_cmd_cplt_49;
}
// 9398C: using guessed type int dword_9398C;
// 93990: using guessed type int connection_93990[7];

int NetworkInit_42CF0_43030()
{
    FixPerifery();

	if (dos_getvect(92))
	{
		mainconnection_9398C->ncb_command_0 = 0x7F;
		if (SetNetbios_431A0_434E0(mainconnection_9398C) == -1)
			return -1;
		if (mainconnection_9398C->ncb_retcode_1 == 3)
			return 0;
	}
	return -1;
}

//----- (00042D40) --------------------------------------------------------
int sub_42D40(_BYTE *a1, char *a2)
{
  const char *v2; // edx
  char *v4; // edi
  char v5; // al
  char v6; // al
  char *v7; // esi
  char *v8; // edi
  char v9; // al
  char v10; // al

  v2 = (char*)(a1 + 26);
  v4 = (char*)(a1 + 26);
  do
  {
    v5 = *a2;
    *v4 = *a2;
    if ( !v5 )
      break;
    v6 = a2[1];
    a2 += 2;
    v4[1] = v6;
    v4 += 2;
  }
  while ( v6 );
  while ( strlen(v2) < 0xF )
  {
    v7 = asc_A95F4;
    v8 = (char *)&v2[strlen(v2)];
    do
    {
      v9 = *v7;
      *v8 = *v7;
      if ( !v9 )
        break;
      v10 = v7[1];
      v7 += 2;
      v8[1] = v10;
      v8 += 2;
    }
    while ( v10 );
  }
  *a1 = -79;
  if ( SetNetbios_431A0_434E0((myNCB*)a1) == -1 )
    return -99;
  while ( a1[49] == 0xFF )
    ;
  return -(unsigned __int8)a1[49];
}

//----- (00042DE0) --------------------------------------------------------
int sub_42DE0(_BYTE *a1)
{
  int v2; // eax

  *a1 = -110;
  if ( SetNetbios_431A0_434E0((myNCB*)a1) == -1 )
    return -99;
  while ( a1[49] == 0xFF )
    ;
  v2 = (unsigned __int8)a1[49];
  a1[2] = 0;
  return -v2;
}

//----- (00042E10) --------------------------------------------------------
int sub_42E10(__int16 a1)
{
  char *v1; // esi
  char *v2; // edi
  char v3; // al
  char v4; // al
  char *v5; // esi
  const char *v6; // edi
  char *v7; // edi
  char v8; // al
  char v9; // al
  char v12[32]; // [esp+0h] [ebp-20h] BYREF

  if ( *(_BYTE *)(connection_93990[a1] + 49) == 0xFF )
    return -*(unsigned __int8 *)(connection_93990[a1] + 49);
  sprintf(v12, "%s%d", "TESTER", a1);
  *(_BYTE *)connection_93990[a1] = -111;
  v1 = v12;
  v2 = (char *)(connection_93990[a1] + 10);
  do
  {
    v3 = *v1;
    *v2 = *v1;
    if ( !v3 )
      break;
    v4 = v1[1];
    v1 += 2;
    v2[1] = v4;
    v2 += 2;
  }
  while ( v4 );
  while ( strlen((const char *)(connection_93990[a1] + 10)) < 0xF )
  {
    v5 = asc_A95F4;
    v6 = (const char *)(connection_93990[a1] + 10);
    v7 = (char *)&v6[strlen(v6)];
    do
    {
      v8 = *v5;
      *v7 = *v5;
      if ( !v8 )
        break;
      v9 = v5[1];
      v5 += 2;
      v7[1] = v9;
      v7 += 2;
    }
    while ( v9 );
  }
  *(_BYTE *)(connection_93990[a1] + 42) = 0;
  *(_BYTE *)(connection_93990[a1] + 43) = 0;
  if ( SetNetbios_431A0_434E0((myNCB*)connection_93990[a1]) != -1 )
  {
    *(_WORD *)(connection_93990[a1] + 4) = 0;
    return -*(unsigned __int8 *)(connection_93990[a1] + 49);
  }
  return -99;
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 93990: using guessed type int connection_93990[7];

//----- (00042F30) --------------------------------------------------------
int sub_42F30(unsigned int a1, void *a2)
{
  unsigned int v2; // eax
  char v4; // ah

  *(_BYTE *)a1 = -107;
  v2 = (unsigned int)packet_93964;
  *(_WORD *)(a1 + 8) = 2048;
  *(_WORD *)(a1 + 6) = v2 >> 4;
  if ( SetNetbios_431A0_434E0((myNCB*)a1) == -1 )
    return -99;
  do
    v4 = *(_BYTE *)(a1 + 49);
  while ( v4 == -1 );
  if ( v4 )
    return -*(unsigned __int8 *)(a1 + 49);
  qmemcpy(a2, (const void *)packet_93964, *(unsigned __int16 *)(a1 + 8));
  return *(unsigned __int16 *)(a1 + 8);
}
// 93964: using guessed type int packet_93964;

//----- (00042FB0) --------------------------------------------------------
int sub_42FB0(unsigned int a1, char *a2, unsigned int a3)
{
  unsigned int v4; // esi
  int result; // eax

  v4 = 0;
  if ( a3 >> 11 )
  {
    while ( 1 )
    {
      result = sub_42F30(a1, a2);
      if ( result != 2048 )
        break;
      ++v4;
      a2 += 2048;
      if ( v4 >= a3 >> 11 )
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    result = sub_42F30(a1, a2);
    if ( result == (a3 & 0x7FF) )
      return a3;
  }
  return result;
}

//----- (00043010) --------------------------------------------------------
int sub_43010(unsigned int a1, int a2, unsigned __int16 a3)
{
  unsigned int v3; // edx

  *(_BYTE *)a1 = -107;
  v3 = (unsigned int)packet_93968[a3] >> 4;
  *(_WORD *)(a1 + 8) = 2048;
  *(_WORD *)(a1 + 6) = v3;
  if ( SetNetbios_431A0_434E0((myNCB*)a1) == -1 )
    return -99;
  else
    return 1;
}
// 93968: using guessed type int packet_93968[8];

//----- (00043080) --------------------------------------------------------
int sub_43080(unsigned int a1, const void *a2, unsigned int a3)
{
  uint8_t* v3; // eax

  qmemcpy((void *)packet_93960, a2, a3);
  *(_BYTE *)a1 = -108;
  v3 = packet_93960;
  *(_WORD *)(a1 + 8) = a3;
  *(_WORD *)(a1 + 6) = (int)v3 >> 4;
  if ( SetNetbios_431A0_434E0((myNCB*)a1) == -1 )
    return -99;
  while ( *(_BYTE *)(a1 + 49) == 0xFF )
    ;
  return -*(unsigned __int8 *)(a1 + 49);
}
// 93960: using guessed type int packet_93960;

//----- (000430F0) --------------------------------------------------------
int sub_430F0(unsigned int a1, char *a2, unsigned int a3)
{
  unsigned int v4; // esi
  int result; // eax

  v4 = 0;
  if ( !(a3 >> 11) )
    return sub_43080(a1, a2, a3 & 0x7FF);
  while ( 1 )
  {
    LOWORD(result) = sub_43080(a1, a2, 0x800u);
    if ( (_WORD)result )
      break;
    ++v4;
    a2 += 2048;
    if ( v4 >= a3 >> 11 )
      return sub_43080(a1, a2, a3 & 0x7FF);
  }
  return (__int16)result;
}

//----- (00043150) --------------------------------------------------------
int sub_43150()
{
  __int16 i; // bx
  int v1; // esi
  int result; // eax

  for ( i = 0; i < 8; ++i )
  {
    v1 = i;
    result = sub_43170_434B0(i);
    byte_939B0[v1] = result;
  }
  return result;
}

//----- (00043170) --------------------------------------------------------
int sub_43170_434B0(__int16 a1)
{
  int v2; // eax

  if ( a1 == word_9395A )
    return 2;
  v2 = (int)connection_93990[a1];
  return *(_BYTE *)(v2 + 2) && !*(_BYTE *)(v2 + 49);
}
// 9395A: using guessed type __int16 word_9395A;
// 93990: using guessed type int connection_93990[7];

//----- (000431A0) --------------------------------------------------------
int SetNetbios_431A0_434E0(myNCB* connection)
{

    FixPerifery();
    //fix
  /*
  int v2[13]; // [esp+0h] [ebp-80h] BYREF
  int v3[7]; // [esp+34h] [ebp-4Ch] BYREF
  int v4[7]; // [esp+50h] [ebp-30h] BYREF
  char v5[20]; // [esp+6Ch] [ebp-14h] BYREF
  */
  connection->ncb_cmd_cplt_49 = 0;
  /*
  memset(v2, 0, 50);
  LOWORD(v2[9]) = (int)connection >> 4;
  HIWORD(v2[8]) = v2[9];
  v2[4] = 0;
  v2[7] = 256;
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  memset(v5, 0, 12);
  segread((uint32)v5);
  v4[5] = (int)v2;
  v4[0] = 768;
  v4[1] = 92;
  int386x(49, (uint32)v4, (uint32)v3, (uint32)v5);
  return (v3[6] == 0) - 1;
  */
  //makeNetwork(connection);//fix - add network
  return 0;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 636BC: using guessed type _DWORD segread(_DWORD);
// 636E6: using guessed type _DWORD int386x(_DWORD, _DWORD, _DWORD, _DWORD);

void InitNetwork_43270_435B0()
{
	int networkInited = 1;
	if (!byte_93958 && !mainconnection_9398C)
	{
		system(aNetbios);
		mainconnection_9398C = (myNCB*)malloc_425C0_42900(66);
		if (!mainconnection_9398C)
			networkInited = -1;
		else
		{
			if (NetworkInit_42CF0_43030() == -1)
				return;
			packet_93960 = (uint8_t*)malloc_425C0_42900(2048);
			if (packet_93960 && (packet_93964 = (uint8_t*)malloc_425C0_42900(2048)) != 0)
			{
				for (int i = 0; i != 8; i++)
				{
					packet_93968[i] = (uint8_t*)malloc_425C0_42900(2048);
					if (!packet_93968[i])
						networkInited = -1;
					connection_93990[i] = (myNCB*)malloc_425C0_42900(66);
					if (!connection_93990[i])
						networkInited = -1;
				}
				byte_93958 = 1;
			}
			else
			{
				networkInited = -1;
			}
		}
	}
	if (networkInited == -1)
	{
		if (mainconnection_9398C)
			free_426E0_42A20((void*)mainconnection_9398C);
		if (packet_93960)
			free_426E0_42A20((void*)packet_93960);
		if (packet_93964)
			free_426E0_42A20((void*)packet_93964);
		for (int j = 0; j != 8; j++)
		{
			if (connection_93990[j])
				free_426E0_42A20((void*)connection_93990[j]);
			if (packet_93968[j])
				free_426E0_42A20((void*)packet_93968[j]);
		}
	}
}

//----- (000433C0) --------------------------------------------------------
void sub_433C0_43700()
{
  int v0; // ebx
  int v2; // [esp-4h] [ebp-14h]

  if ( byte_93958 )
  {
    v0 = 0;
    free_426E0_42A20((void*)mainconnection_9398C);
    do
    {
      free_426E0_42A20((void*)connection_93990[v0]);
      v2 = (int)packet_93968[v0++];
      free_426E0_42A20((void*)v2);
    }
    while ( v0 != 8 );
    free_426E0_42A20((void*)packet_93960);
    free_426E0_42A20((void*)packet_93964);
    byte_93958 = 0;
  }
}
// 93958: using guessed type char byte_93958;
// 93960: using guessed type int packet_93960;
// 93964: using guessed type int packet_93964;
// 93968: using guessed type int packet_93968[];
// 9398C: using guessed type int dword_9398C;
// 93990: using guessed type int connection_93990[7];

//----- (00043430) --------------------------------------------------------
int sub_43430_43770(char *a1, __int16 a2)
{
  char *v3; // edi
  int v4; // ebx
  char v5; // al
  char v6; // al
  unsigned int v7; // eax
  int v8; // ebx
  int v10; // ebx
  int v11; // edx
  char *v12; // esi
  char *v13; // edi
  char v14; // al
  char v15; // al
  int i; // ebx
  int v17; // ebx
  int j; // esi
  int v19; // ebx
  int v20; // edi
  int v21; // esi
  __int16 v22; // bx
  _BYTE *v23; // [esp-8h] [ebp-2Ch]
  char v24[36]; // [esp+0h] [ebp-24h] BYREF

  if ( byte_93958 )
  {
    if ( byte_93959 )
      return word_9395A;
    v3 = (char*)"TESTER";
    v4 = 0;
    word_93988 = (unsigned __int8)byte_93959;
    word_9395C = a2;
    do
    {
      v5 = *a1;
      *v3 = *a1;
      if ( !v5 )
        break;
      v6 = a1[1];
      a1 += 2;
      v3[1] = v6;
      v3 += 2;
    }
    while ( v6 );
    do
      byte_939AF[++v4] = 0;
    while ( v4 < 8 );
    v8 = 0;
    word_9395A = -1;
    do
    {
      if ( word_9395A != -1 || word_93988 )
        break;
      sprintf(v24, "%s%d", "TESTER", v8);
      v7 = sub_42930((_BYTE *)connection_93990[v8], v24, v8);
      if ( v7 < 0xFFFE7961 )
      {
        if ( !v7 )
          word_9395A = v8;
      }
      else if ( v7 > 0xFFFE7961 && v7 == -13 )
      {
        v23 = (_BYTE *)connection_93990[v8--];
        sub_42D40(v23, v24);
      }
      ++v8;
    }
    while ( v8 < 8 );
    if ( word_9395A == -1 )
      return -1;
    if ( word_93988 )
    {
      sprintf(v24, "%s%d", "TESTER", word_9395A);
      sub_42D40((_BYTE *)connection_93990[v8], v24);
      return -1;
    }
    v10 = 0;
    v11 = 0;
    do
    {
      if ( v10 != word_9395A )
      {
        v12 = (char *)(connection_93990[word_9395A] + 26);
        v13 = (char *)(connection_93990[v11] + 26);
        do
        {
          v14 = *v12;
          *v13 = *v12;
          if ( !v14 )
            break;
          v15 = v12[1];
          v12 += 2;
          v13[1] = v15;
          v13 += 2;
        }
        while ( v15 );
        *(_BYTE *)(connection_93990[v11] + 3) = *(_BYTE *)(connection_93990[word_9395A] + 3);
      }
      ++v10;
      ++v11;
    }
    while ( v10 < 8 );
    for ( i = 0; i < word_9395C; ++i )
    {
      if ( i != word_9395A )
        sub_42E10(i);
    }
    v17 = 0;
    for ( j = 0; v17 < word_9395C; ++j )
    {
      if ( v17 != word_9395A && *(_BYTE *)(connection_93990[j] + 49) == 0xFF )
      {
        sub_42A00_42D40(v17);
        if ( word_93988 )
          break;
      }
      ++v17;
    }
    do
    {
      sub_428B0_42BF0();
      v19 = 0;
      v20 = 0;
      v21 = 0;
      while ( v19 < word_9395C )
      {
        if ( v19 != word_9395A && *(_BYTE *)(connection_93990[v21] + 49) )
        {
          if ( word_93988 )
            sub_42C70_42FB0(v19);
        }
        else
        {
          sub_4E470_4E7B0(v19);
          if ( word_93988 )
          {
            if ( v19 == word_9395A )
            {
              sprintf(v24, "%s%d", "TESTER", word_9395A);
              sub_42D40((_BYTE *)connection_93990[v21], v24);
            }
            else
            {
              sub_42DE0((_BYTE *)connection_93990[v21]);
            }
          }
          ++v20;
        }
        ++v21;
        ++v19;
      }
    }
    while ( v20 != word_9395C && !word_93988 );
    v22 = word_93988;
    if ( !word_93988 )
    {
      sub_43150();
      word_9398A = v22;
      byte_93959 = 1;
      return word_9395A;
    }
  }
  return -1;
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 93958: using guessed type char byte_93958;
// 93959: using guessed type char byte_93959;
// 9395A: using guessed type __int16 word_9395A;
// 9395C: using guessed type __int16 word_9395C;
// 93988: using guessed type __int16 word_93988;
// 9398A: using guessed type __int16 word_9398A;
// 93990: using guessed type int connection_93990[7];

//----- (00043760) --------------------------------------------------------
int sub_43760(__int16 a1)
{
  __int16 i; // bx
  int result; // eax
  __int16 v3; // bx
  char v4[32]; // [esp+0h] [ebp-20h] BYREF

  if ( byte_93958 && byte_93959 )
  {
    if ( a1 == word_9395A )
    {
      for ( i = 0; i < word_9395C; ++i )
      {
        if ( i != word_9395A )
        {
          sub_42C70_42FB0(i);
          sub_42DE0((_BYTE *)connection_93990[i]);
        }
      }
      sprintf(v4, "%s%d", "TESTER", word_9395A);
      sub_42D40((_BYTE *)connection_93990[a1], v4);
      byte_93959 = 0;
    }
    else
    {
      sub_42C70_42FB0(a1);
      sub_42DE0((_BYTE *)connection_93990[a1]);
    }
    result = sub_43150();
    v3 = 0;
    if ( word_9395C > 0 )
    {
      while ( !byte_939B0[v3] )
      {
        if ( ++v3 >= word_9395C )
          return result;
      }
      word_9398A = v3;
    }
  }
  return result;
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 93958: using guessed type char byte_93958;
// 93959: using guessed type char byte_93959;
// 9395A: using guessed type __int16 word_9395A;
// 9395C: using guessed type __int16 word_9395C;
// 9398A: using guessed type __int16 word_9398A;
// 93990: using guessed type int connection_93990[7];

//----- (00043870) --------------------------------------------------------
void sub_43870(unsigned __int16 a1, char *a2, unsigned int a3)
{
  if ( byte_93958 && byte_939B0[a1] == 1 )
  {
    sub_430F0((int)connection_93990[a1], a2, a3);
    if ( *(_BYTE *)(connection_93990[a1] + 49) )
      sub_42E10(a1);
  }
}
// 93958: using guessed type char byte_93958;
// 93990: using guessed type int connection_93990[7];

//----- (000438D0) --------------------------------------------------------
void sub_438D0(unsigned __int16 a1, char *a2, unsigned int a3)
{
  if ( byte_93958 && byte_939B0[a1] == 1 )
  {
    sub_42FB0((int)connection_93990[a1], a2, a3);
    if ( *(_BYTE *)(connection_93990[a1] + 49) )
      sub_42E10(a1);
  }
}
// 93958: using guessed type char byte_93958;
// 93990: using guessed type int connection_93990[7];

//----- (00043930) --------------------------------------------------------
void sub_43930(uint8* a1[8], unsigned int size)
{
  if ( byte_93958 )
  {
    if ( word_9395A == word_9398A )
    {
      for ( int i = 0; i < word_9395C; i++ )
      {
        if ( i != word_9395A )
          sub_438D0(i, (char*)a1[i], size);
      }
      for ( int i = 0; i < word_9395C; i++ )
      {
        if ( i != word_9395A )
          sub_43870(i, (char*)a1[0], size * word_9395C);
      }
    }
    else
    {
      sub_43870(word_9398A, (char*)a1[word_9395A], size);
      sub_438D0(word_9398A, (char*)a1[0], word_9395C * size);
    }
  }
}
// 93958: using guessed type char byte_93958;
// 9395A: using guessed type __int16 word_9395A;
// 9395C: using guessed type __int16 word_9395C;
// 9398A: using guessed type __int16 word_9398A;

//----- (00043B20) --------------------------------------------------------
void sub_43B20_sub_43E60(unsigned int a2)
{
  int v2; // eax
  char *v3; // eax
  int v4; // eax
  char *v5; // eax
  unsigned __int16 v6; // dx
  int v7; // eax
  char *v8; // eax
  char *v9; // eax
  char *v10; // eax

  //fix
  v2 = 0;
  //fix

  byte_9EBDD = 0;
  byte_9EBE7 = 0;
  byte_9EBE8 = 0;
  byte_9EBE9 = 0;
  byte_9EBEA = 0;
  byte_9EBEB = 0;
  byte_9EBEC = 0;
  byte_9EC0D = 0;
  byte_9EC17 = 0;
  byte_9EC18 = 0;
  byte_9EC19 = 0;
  byte_9EC1A = 0;
  byte_9EC1B = 0;
  byte_9EC1C = 0;
  byte_9EBED = 0;
  byte_9EBF7 = 0;
  byte_9EBF8 = 0;
  byte_9EBF9 = 0;
  byte_9EBFA = 0;
  byte_9EBFB = 0;
  byte_9EBFC = 0;
  sub_5D883_5DD93(0xFF00u, 0);
  byte_939D4 = 1;
  //fix sub_60199((int)&unk_A9608, __DS__);
  word_CBF48 = 0;
  dword_CBF6C = dword_CBF70;
  dword_CBF44 = 0;
  //fix
  /*v2 = sub_6035F(
         a2,
         (unsigned int)&dword_CBF6C,
         (unsigned __int16)__DS__,
         (int)&unk_CBF40,
         (unsigned __int16)__DS__,
         (unsigned int)&dword_CBFDC);*/
  if ( v2 )
  {
    v3 = sub_6378C(v2);
    printf("\nError : %s\n", v3);
    sub_60335();
    LOBYTE(v4) = sub_5D948();
    byte_939CC = 0;
    byte_939CD = 0;
  }
  else
  {
    LOBYTE(v4) = a2 - 1;
    switch ( a2 )
    {
      case 0xA001u:
        byte_CBFEF = 0;
        byte_CBFEE = 2;
        break;
      case 0xA002u:
        v5 = sub_43E50("data\\inst.bnk");
        word_CBFEC = 0;
        dword_CBFE8 = (int)v5;
        if ( v5 )
        {
          v6 = 0;
          v7 = sub_637D1(dword_CBFDC, (int)v5, 0, 1);
          if ( v7 )
          {
            v8 = sub_6378C(v7);
            printf("\nError : %s\n", v8);
            sub_6080C(dword_CBFDC, 1);
            sub_60335();
            sub_5D948();
            HIBYTE(v6) = 0;
            byte_939CC = 0;
            byte_939CD = 0;
          }
          v9 = sub_43E50("data\\drum.bnk");
          word_CBFE6 = v6;
          dword_CBFE2 = (int)v9;
          if ( v9 )
          {
            v4 = sub_637D1(dword_CBFDC, (int)v9, v6, 1);
            if ( v4 )
            {
              v10 = sub_6378C(v4);
              printf("\nError : %s\n", v10);
              sub_6080C(dword_CBFDC, 1);
              sub_60335();
              LOBYTE(v4) = sub_5D948();
              byte_939CC = 0;
              byte_939CD = 0;
            }
            if ( byte_939CC )
            {
              byte_CBFEF = 1;
              byte_CBFEE = 0;
            }
          }
          else
          {
            LOBYTE(v4) = printf("\nError : Unable to load drum.bnk.\n");
            byte_939CC = 0;
            byte_939CD = 0;
          }
        }
        else
        {
          LOBYTE(v4) = printf("\nError : Unable to load inst.bnk.\n");
          byte_939CC = 0;
          byte_939CD = 0;
        }
        break;
      case 0xA004u:
        byte_CBFEF = 0;
        byte_CBFEE = 1;
        break;
      case 0xA008u:
        LOBYTE(v4) = 2;
        byte_CBFEF = 0;
        byte_CBFEE = 2;
        break;
      default:
        break;
    }
    if ( byte_939CC )
    {
      v4 = sub_5CEF0_5D400(0);
      if ( v4 )
      {
        printf("\nError opening music files\n");
        sub_6080C(dword_CBFDC, 1);
        sub_60335();
        LOBYTE(v4) = sub_5D948();
        byte_939CC = 0;
        byte_939CD = 0;
      }
    }
  }
}
// 43D1D: conditional instruction was optimized away because dx.2==0
// 5CC03: using guessed type _DWORD printf(const char *, ...);
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// 939D4: using guessed type char byte_939D4;
// 9EBDD: using guessed type char byte_9EBDD;
// 9EBE7: using guessed type char byte_9EBE7;
// 9EBE8: using guessed type char byte_9EBE8;
// 9EBE9: using guessed type char byte_9EBE9;
// 9EBEA: using guessed type char byte_9EBEA;
// 9EBEB: using guessed type char byte_9EBEB;
// 9EBEC: using guessed type char byte_9EBEC;
// 9EBED: using guessed type char byte_9EBED;
// 9EBF7: using guessed type char byte_9EBF7;
// 9EBF8: using guessed type char byte_9EBF8;
// 9EBF9: using guessed type char byte_9EBF9;
// 9EBFA: using guessed type char byte_9EBFA;
// 9EBFB: using guessed type char byte_9EBFB;
// 9EBFC: using guessed type char byte_9EBFC;
// 9EC0D: using guessed type char byte_9EC0D;
// 9EC17: using guessed type char byte_9EC17;
// 9EC18: using guessed type char byte_9EC18;
// 9EC19: using guessed type char byte_9EC19;
// 9EC1A: using guessed type char byte_9EC1A;
// 9EC1B: using guessed type char byte_9EC1B;
// 9EC1C: using guessed type char byte_9EC1C;
// CBF44: using guessed type int dword_CBF44;
// CBF48: using guessed type __int16 word_CBF48;
// CBF6C: using guessed type int dword_CBF6C;
// CBF70: using guessed type int dword_CBF70;
// CBFDC: using guessed type int dword_CBFDC;
// CBFE2: using guessed type int dword_CBFE2;
// CBFE6: using guessed type __int16 word_CBFE6;
// CBFE8: using guessed type int dword_CBFE8;
// CBFEC: using guessed type __int16 word_CBFEC;
// CBFEE: using guessed type char byte_CBFEE;
// CBFEF: using guessed type char byte_CBFEF;

//----- (00043E50) --------------------------------------------------------
char *sub_43E50(const char *a1)
{
  char *v1; // esi
  int v2; // ebp
  int v3; // eax
  int v4; // edi
  char *v5; // eax
  int v6; // ebx

  v1 = 0;
  v2 = 0;
  v3 = GetRNCFilesize_63910_63E20((Pathstruct*)a1);
  v4 = v3;
  if ( v3 > 0 )
  {
    v5 = (char *)malloc_42540_42880(v3);
    v6 = (int)v5;
    v1 = v5;
    if ( v5 )
    {
      if ( sub_3EEA0_3F1E0((char*)a1, (uint8_t*)v5) != v4 )
      {
        free_426E0_42A20((void*)v6);
        v1 = (char *)(v6 ^ (unsigned int)v1);
      }
    }
  }
  if ( v1 )
    return v1;
  return (char *)v2;
}

//----- (00043EC0) --------------------------------------------------------
void sub_43EC0_44200()
{
  unsigned __int16 v5; // ax
  char *v6; // eax
  unsigned __int16 v7; // ax
  char *v8; // eax
  int result; // eax
  unsigned __int16 v10; // ax
  char *v11; // eax
  char *v12; // eax
  _BYTE v13[16]; // [esp+0h] [ebp-10h] BYREF

    //fix
    v5 = 0;
    v10 = 0;
    //fix
  //        __int16 a1,
  //int a2,
    int a3 = 0;
    unsigned __int16 a4 = 0;
    unsigned __int16 a5 = 0;
  //fix

  if ( !stricmp(unk_CC158x, aSblast_0) )
  {
    a5 = -8192;
    a4 = 22050;
    word_CC1C4 = 60;
  }
  else if ( !strcmp(unk_CC158x, aSbpro_0) )
  {
    a5 = -8191;
    a4 = 22050;
    word_CC1C4 = 120;
  }
  else if ( !strcmp(unk_CC158x, aSb16) )
  {
    a5 = -8169;
    a4 = -21436;
    word_CC1C4 = 240;
    byte_939ED = 1;
  }
  else if ( !strcmp(unk_CC158x, aAdlibg_0) )
  {
    a5 = -8183;
    a4 = 22050;
    word_CC1C4 = 60;
  }
  else if ( !strcmp(unk_CC158x, aMicrosoft8) )
  {
    a5 = -8181;
    a4 = 22050;
    word_CC1C4 = 60;
  }
  else if ( !strcmp(unk_CC158x, aMicrosoft16) )
  {
    a5 = -8179;
    word_CC1C4 = 240;
    a4 = -21436;
    byte_939ED = 1;
  }
  else if ( !strcmp(unk_CC158x, aPas8) )
  {
    a5 = -8189;
    a4 = 22050;
    word_CC1C4 = 60;
  }
  else if ( !strcmp(unk_CC158x, aPas16) )
  {
    a5 = -8188;
    a4 = -21436;
    word_CC1C4 = 240;
    byte_939ED = 1;
  }
  else if ( !strcmp(unk_CC158x, aGravis_0) )
  {
    a5 = -8192;
    a4 = 22050;
    word_CC1C4 = 60;
  }
  else if ( !strcmp(unk_CC158x, aSoundmasterii) )
  {
    a5 = -8190;
    a4 = 22050;
    word_CC1C4 = 60;
  }
  else if ( !strcmp(unk_CC158x, aCompatible_0) )
  {
    a5 = -8192;
    a4 = 22050;
    word_CC1C4 = 60;
  }
  else
  {
    byte_939E4 = 0;
    byte_939E5 = 0;
  }
  if ( !byte_939EC )
  {
LABEL_35:
    a4 = 11025;
    word_CC1C4 = 60;
    switch ( a5 )
    {
      case 0xE004:
        a5 = -8189;
        byte_939ED = 0;
        break;
      case 0xE017:
        a5 = -8170;
        byte_939ED = 0;
        break;
      case 0xE00D:
        a5 = -8181;
        byte_939ED = 0;
        break;
    }
    goto LABEL_41;
  }
  if ( (unsigned __int8)byte_939EC > 1u )
  {
    if ( byte_939EC != 3 )
      goto LABEL_41;
    goto LABEL_35;
  }
  a4 = 22050;
  switch ( a5 )
  {
    case 0xE004:
      a5 = -8189;
      word_CC1C4 = 60;
      byte_939ED = 0;
      break;
    case 0xE017:
      a5 = -8170;
      word_CC1C4 = 120;
      byte_939ED = 0;
      break;
    case 0xE00D:
      a5 = -8181;
      word_CC1C4 = 60;
      byte_939ED = 0;
      break;
  }
LABEL_41:
  if ( byte_939E6 )
  {
    v5 = sub_63A9D_63FAD((int)&asc_A970B[1], __DS__);
    if ( v5 )
    {
      v6 = sub_6378C(v5);
      printf("\nError : %s\n", v6);
LABEL_63:
      byte_939E4 = 0;
      byte_939E5 = 0;
      sub_61610_61B20(&pathStrArray_258E00[PS25datasnds00dat]);
      return;
    }
    v7 = 1;
    do
    {
      if ( !v7 )
        break;
      ++a3;
      //fix v7 = sub_63C5A_6416A(v13, a5, byte_CC0C2, __DS__, (unsigned int)v13);
    }
    while ( (__int16)a3 < 5 );
    //fix if ( v7 || (v7 = sub_64248((unsigned int)&dword_CC134, __DS__)) != 0 )
    {
      v8 = sub_6378C(v7);
      printf("\nError : %s\n", v8);
      sub_63C06();
      byte_939E4 = 0;
      byte_939E5 = 0;
      sub_61610_61B20(&pathStrArray_258E00[PS25datasnds00dat]);
      return;
    }
    sub_63C06();
  }
  else
  {
    dword_CC134 = dword_CC14C;
    dword_CC138 = dword_CC150;
    dword_CC13C = dword_CC1BC;
    dword_CC126 = a5;
  }
  //fix sub_647C0((int)&asc_A970B[1], __DS__);
  if ( !byte_939D4 )
    sub_5D883_5DD93(0xFF00u, 0);
  dword_93A54 = a4;
  //fix 
  /*v10 = sub_64846_64D56(
          a2,
          a5,
          dword_CC126,
          (unsigned int)&dword_CC134,
          (unsigned __int16)__DS__,
          (unsigned int)&unk_93A44,
          (unsigned __int16)__DS__,
          (unsigned int)&dword_CC140);*/
  if ( !v10 )
  {
    result = sub_5D97B((unsigned __int16)word_CC1C4, dword_93A60, word_93A64, (unsigned int)&dword_CC148);
    if ( !(_WORD)result )
      return;
    v12 = sub_6378C((unsigned __int16)result);
    printf("\nError : %s\n", v12);
    if ( !byte_939D4 )
      sub_5D948();
    sub_64F78(dword_CC140, 1, 1);
    sub_6481C();
    goto LABEL_63;
  }
  v11 = sub_6378C(v10);
  printf("\nError : %s\n", v11);
  if ( !byte_939D4 )
    sub_5D948();
  sub_6481C();
  byte_939E4 = 0;
  byte_939E5 = 0;
  sub_61610_61B20(&pathStrArray_258E00[PS25datasnds00dat]);
}
// 5CC03: using guessed type _DWORD printf(const char *, ...);
// 61EF5: using guessed type _DWORD stricmp(_DWORD, _DWORD);
// 639E0: using guessed type _DWORD strcmp(_DWORD, _DWORD);
// 939D4: using guessed type char byte_939D4;
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939E6: using guessed type char byte_939E6;
// 939EC: using guessed type char byte_939EC;
// 939ED: using guessed type char byte_939ED;
// 93A54: using guessed type int dword_93A54;
// 93A60: using guessed type int dword_93A60;
// 93A64: using guessed type __int16 word_93A64;
// CC126: using guessed type int dword_CC126;
// CC134: using guessed type int dword_CC134;
// CC138: using guessed type int dword_CC138;
// CC13C: using guessed type int dword_CC13C;
// CC140: using guessed type int dword_CC140;
// CC148: using guessed type int dword_CC148;
// CC14C: using guessed type int dword_CC14C;
// CC150: using guessed type int dword_CC150;
// CC1BC: using guessed type int dword_CC1BC;
// CC1C4: using guessed type __int16 word_CC1C4;

void sub_44470_447B0()//215470_
{
  int v4; // edx
  int v6; // esi
  //unsigned __int16 v7; // bx
  char v8; // di
  //unsigned __int16 v9; // bx
  int v10; // esi
  char v11; // di
  //unsigned __int16 i; // bx
  //unsigned __int16 j; // bx
  //unsigned __int16 v14; // si
  char *v15; // [esp-1Ch] [ebp-54h]
  char *v16; // [esp-1Ch] [ebp-54h]
  char *v17; // [esp-1Ch] [ebp-54h]
  char v18; // [esp-18h] [ebp-50h]
  char v19; // [esp-14h] [ebp-4Ch]
  char v20; // [esp-10h] [ebp-48h]
  __int16 v21; // [esp-Ch] [ebp-44h]
  __int16 v22; // [esp-Ch] [ebp-44h]
  __int16 v23; // [esp-8h] [ebp-40h]
  __int16 v24; // [esp-8h] [ebp-40h]
  __int16 v25; // [esp-4h] [ebp-3Ch]
  __int16 v26; // [esp-4h] [ebp-3Ch]
  char v31; // [esp+18h] [ebp-20h]
  char v32; // [esp+1Ch] [ebp-1Ch]
  char v33; // [esp+20h] [ebp-18h]
  char v34; // [esp+24h] [ebp-14h]

  sub_29BA0_29BE0(str_AE400_AE3F0->set.var_u8_8608);
  if (0x100u / (256 / str_AE400_AE3F0->set.var_u8_8608) > 0 )
  {
    int sumA = 0;
    int index1 = 0;
    for(int i = 0; i< 0x100u / (256 / str_AE400_AE3F0->set.var_u8_8608); i++)
    {
      if (256 / str_AE400_AE3F0->set.var_u8_8608)
      {
        int sumB = 0;
        for (int j = 0; j < 256 / str_AE400_AE3F0->set.var_u8_8608; j++)
        {
          dword_9334C[index1].p = (uint8*)&begBlkDat_AE3F0_26C3F0_26C3E0[sumB + sumA];
          sumB += str_AE400_AE3F0->set.var_u8_8608;
          index1++;
        }
      }
      sumA += str_AE400_AE3F0->set.var_u8_8608 << 8;
    }
  }
  if ( !byte_90B48 )
  {
    if (sub_3EEA0_3F1E0((char*)"data/tables.dat", (uint8_t*)&strPal) <= 0 )
      byte_90B48 = 1;
  }
  if ( byte_90B48 )
  {
    v6 = 256;
    //v7 = 0;
    v8 = begPalDat_AE428_AE418_26C428_26C418[255].red;
    v32 = begPalDat_AE428_AE418_26C428_26C418[255].green;
    v31 = begPalDat_AE428_AE418_26C428_26C418[255].blue;
    sub_72807_72D17((unsigned __int8 *)begPalDat_AE428_AE418_26C428_26C418, (uint8*)strPal.byte_CB934_CB924);
    for (int i = 0; i < 32; i++)
    {
      v25 = v6;
      v23 = v6;
      v21 = v6;
      v15 = &strPal.fog_B7934_B7924[256 * i];
      v6 -= 8;
      sub_40EDC_4121C((_BYTE *)begPalDat_AE428_AE418_26C428_26C418, (uint8*)v15, v8, v32, v31, v21, v23, v25);
    }
    //v9 = 32;
    v34 = begPalDat_AE428_AE418_26C428_26C418[0].red;
    v10 = 0;
    v11 = begPalDat_AE428_AE418_26C428_26C418[0].green;
    v33 = begPalDat_AE428_AE418_26C428_26C418[0].blue;
    for (int i = 32; i < 64; i++)
    {
      v26 = v10;
      v24 = v10;
      v22 = v10;
      v16 = &strPal.fog_B7934_B7924[256 * i];
      v10 += 8;
      sub_40EDC_4121C((_BYTE *)begPalDat_AE428_AE418_26C428_26C418, (uint8*)v16, v34, v33, v11, v22, v24, v26);
    }
    for ( int i = 0; i < 256; i++ )
    {
      v20 = begPalDat_AE428_AE418_26C428_26C418[i].blue;
      v19 = begPalDat_AE428_AE418_26C428_26C418[i].green;
      v18 = begPalDat_AE428_AE418_26C428_26C418[i].red;
      v17 = &strPal.byte_BB934_BB924[256 * i];
      sub_40EDC_4121C((_BYTE *)begPalDat_AE428_AE418_26C428_26C418, (uint8*)v17, v18, v19, v20, 85, 85, 85);
    }
    for ( int i = 0; i < 256; i++ )
    {
      strPal.byte_CBC34_CBC24[i] = Distance_410CE_4140E(0x10000 - i * i);
    }
    strPal.byte_CBC34_CBC24[0] = -1;
    sub_62E60_63370((char*)"data/tables.dat", (uint8*)&strPal, sizeof(strPal));
  }
}

//----- (00044700) --------------------------------------------------------
void sub_44700_44A40(char* a1, char** a2, int a3)//215700_
{
    for (int i = 0; i < a3; i++)
    {
        a2[i] = a1;
        a1 += strlen(a1) + 1;
    }
}
// 44718: control flows out of bounds to 446F1

/*
void sub_44700_44A40x(int* a1, int* a2, int* a3) {
    int ebx = 0, esi = *a3, edi = *a2;
    char cl = 0;
    do {
        int edx = ebx;
        ebx += 4;
        a2[edx] = *a1;
        while (cl != *a1++);
    } while (esi-- != -1);
}*/

//----- (00044730) --------------------------------------------------------
void sub_44730_44A70()//215730_
{
  __int16 v1; // dx

  if ( !byte_93A84 )
  {
    byte_93A84 = 1;
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
    else
      sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
    if ( (*(_WORD *)dword_AE408_AE3F8() & 0x110) != 0 )
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_61B90_620A0(begPalDat_AE428_AE418_26C428_26C418);
      else
        sub_61C30_62140(begPalDat_AE428_AE418_26C428_26C418);
    }
    else
    {
      FadeInOut_61CC0_621D0(0, 0x10u, 0);
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_61B90_620A0((TColor*)begWscreen_2ECFF4_2ECFE4);
      else
        sub_61C30_62140((TColor*)begWscreen_2ECFF4_2ECFE4);
    }
    sub_5C214_5C724();
    if ( !dword_9AD98 )
    {
      sub_44840_44B80();
      printf("ERROR : MOUSE DRIVER NOT FOUND.\n");
      exit(1);
    }
    v1 = (int)begPointersTab_AE450_AE440_26C450_26C440;
    sub_5C05C_5C56C(&begPointersTab_AE450_AE440_26C450_26C440[0]);
    if ( (str_AE408_AE3F8->var_u8_0 & 8) != 0 )
      sub_5B5E0();
    else
      cleanPressedKeys_36D83();
  }
}
// 5CC03: using guessed type _DWORD printf(const char *, ...);
// 93A84: using guessed type char byte_93A84;
// 9AD98: using guessed type int dword_9AD98;
// AE408: using guessed type int dword_AE408_AE3F8();
// AE428: using guessed type int begPalDat_AE428_AE418_26C428_26C418;
// AE450: using guessed type int begPointersTab_AE450_AE440_26C450_26C440;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00044840) --------------------------------------------------------
void sub_44840_44B80()//215840
{
  if ( byte_93A84 != 1 )
    JUMPOUT(0x44836);
  sub_3F370_3F6B0();
  if ( (str_AE408_AE3F8->var_u8_0 & 8) != 0 )
    sub_5B5F4_5BB04();
  else
    sub_36DC2_37182();
  sub_5CD70_5D280();
  sub_433C0_43700();
  sub_5A4EA_5A9FA();
}
// 44847: control flows out of bounds to 44836
// 93A84: using guessed type char byte_93A84;
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (000448E0) --------------------------------------------------------
int sub_448E0_44C20()
{
  int v0; // edx
  int v1; // esi
  int v2; // eax
  int v3; // ebx
  int v4; // ecx
  int v5; // ecx
  int v6; // eax
  int v7; // eax
  int v8; // ebx
  int v9; // ecx
  int v10; // eax
  int v11; // ebx
  int v12; // eax
  int v13; // eax
  int v14; // ebx
  int v15; // eax
  int v16; // ebx
  int v17; // edx
  int result; // eax
  int v19; // [esp+0h] [ebp-18h]
  int v20; // [esp+4h] [ebp-14h]

  v0 = 0;
  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
  v2 = 0;
  v3 = 0;
  v19 = 0;
  v20 = 0;
  do
  {
    if ( *(int *)((char *)&dword_38CA3 + dword_AE400_AE3F0() + v3) )
    {
      v4 = *(_DWORD *)(v1 + 160);
      ++v20;
      if ( *(_WORD *)(v4 + v0 + 676) )
      {
        *(_BYTE *)(v4 + v2 + 892) = 1;
        ++v19;
      }
    }
    v5 = *(_DWORD *)(v1 + 160);
    if ( *(_WORD *)(v5 + v0 + 676) )
      *(_BYTE *)(v5 + v2 + 892) = 1;
    v3 += 4;
    ++v2;
    v0 += 2;
  }
  while ( v2 < 24 );
  if ( v20 )
  {
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 363) = 100 * v19 / v20;
    v6 = *(_DWORD *)(v1 + 160);
    if ( *(int *)(v6 + 363) <= 100 )
      goto LABEL_13;
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 160);
  }
  *(_DWORD *)(v6 + 363) = 100;
LABEL_13:
  if ( *(int *)((char *)&dword_38C9F + dword_AE400_AE3F0()) )
  {
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 359) = 100
                                             * *(_DWORD *)(*(_DWORD *)(v1 + 160) + 359)
                                             / *(int *)((char *)&dword_38C9F + dword_AE400_AE3F0());
    v7 = *(_DWORD *)(v1 + 160);
    if ( *(int *)(v7 + 359) <= 100 )
      goto LABEL_18;
  }
  else
  {
    v7 = *(_DWORD *)(v1 + 160);
  }
  *(_DWORD *)(v7 + 359) = 100;
LABEL_18:
  v8 = *(_DWORD *)(v1 + 160);
  v9 = *(_DWORD *)(v8 + 343);
  if ( v9 )
  {
    *(_DWORD *)(v8 + 367) = 100 * *(_DWORD *)(v8 + 347) / v9;
    v10 = *(_DWORD *)(v1 + 160);
    if ( *(int *)(v10 + 367) > 100 )
      *(_DWORD *)(v10 + 367) = 100;
  }
  else
  {
    *(_DWORD *)(v8 + 367) = 100;
  }
  v11 = *(_DWORD *)(v1 + 160);
  v12 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v11 + 50);
  if ( v12 )
  {
    *(_DWORD *)(v11 + 371) = 100 * (*(_DWORD *)(v11 + 308) + *(_DWORD *)(v12 + 140)) / str_AE408_AE3F8->str_184.var_u32_188;
    v13 = *(_DWORD *)(v1 + 160);
    if ( *(int *)(v13 + 371) > 100 )
      *(_DWORD *)(v13 + 371) = 100;
  }
  else
  {
    *(_DWORD *)(v11 + 371) = 0;
  }
  *(_DWORD *)(*(_DWORD *)(v1 + 160) + 375) = 0;
  v14 = 0;
  if ( v20 )
  {
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 375) += *(_DWORD *)(*(_DWORD *)(v1 + 160) + 363);
    v14 = 1;
  }
  if ( *(int *)((char *)&dword_38C9F + dword_AE400_AE3F0()) )
  {
    ++v14;
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 375) += *(_DWORD *)(*(_DWORD *)(v1 + 160) + 359);
  }
  v15 = *(_DWORD *)(v1 + 160);
  if ( *(_DWORD *)(v15 + 343) )
  {
    ++v14;
    *(_DWORD *)(v15 + 375) += *(_DWORD *)(v15 + 367);
  }
  *(_DWORD *)(*(_DWORD *)(v1 + 160) + 375) += *(_DWORD *)(*(_DWORD *)(v1 + 160) + 371);
  v16 = v14 + 1;
  if ( !v16 )
    v16 = 1;
  *(int *)(*(_DWORD *)(v1 + 160) + 375) /= v16;
  v17 = *(_DWORD *)(v1 + 160);
  result = dword_AC5D4_AC5C4 - *(_DWORD *)(v17 + 379);
  *(_DWORD *)(v17 + 379) = result;
  return result;
}
// 38C9F: using guessed type int dword_38C9F;
// 38CA3: using guessed type int dword_38CA3;
// AC5D4: using guessed type int dword_AC5D4_AC5C4;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00044BE0) --------------------------------------------------------
void sub_44BE0(Type_AE400_29795* a1x, char a2)
{
  if (str_AE400_AE3F0->var_u16_8 == a1x->var_u32_29955_160->var_48 )
  {
    str_AE408_AE3F8->var_u8_152 = a2;
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00044C10) --------------------------------------------------------
signed int sub_44C10(int a1)
{
  int v1; // ebx
  int v2; // esi
  signed int result; // eax

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
  v2 = *(_DWORD *)(v1 + 160);
  result = sub_42340((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v1 + 72));
  if ( result <= *(_DWORD *)(v2 + 396) )
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 396) = result;
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00044C90) --------------------------------------------------------
void sub_44C90(Type_AE400_29795* event)
{
  Type_AE400_29795* v1x; // ebx
  //Type_160* v2x; // esi
  signed int result; // eax

  //v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
  v1x = &str_AE400_AE3F0->str_29795[str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].playIndex_13333];
  //v2x = v1x->var_u32_29955_160;
 //v2 = *(_DWORD *)(v1 + 160);
  result = sub_42340(&event->var_u32_29867_72, &v1x->var_u32_29867_72);
  if ( result <= v1x->var_u32_29955_160->u32_400)
      v1x->var_u32_29955_160->u32_400 = result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00044D30) --------------------------------------------------------
void sub_44D30(TypeStrAE400_13323* a1x, Type_AE400_29795* event)//215D30_
{
  Type_AE400_29795* v2x; // ebx
  int v3; // edx
  //__int16 v4; // ax
  //int v5; // ecx
  char v6; // dh
  //int v7; // eax
  //unsigned __int16 v8; // dx
  //int v9; // esi
  int v10; // eax
  Type_AE400_29795* v11x; // eax
  //int v12; // ecx
  //int v13; // edi
  //char v14; // ah
  //int v15; // edx
  //int v16; // eax
  Type_AE400_29795* v17x; // eax
  //int v18; // ebp
  //int v19; // ecx
  //int v20; // eax
  //__int16 v21; // dx
  //int v22; // eax
  //int v23; // ecx
  int v24; // eax
  //int v25; // ecx
  int v26; // eax
  //int v27; // edx
  unsigned __int16 v28; // di
  Type_AE400_29795* jx; // eax
  //int k; // eax
  int result; // eax
  axis_3d v32x; // [esp+0h] [ebp-24h] BYREF
  //__int16 v33; // [esp+4h] [ebp-20h]
  int v34; // [esp+8h] [ebp-1Ch]
  int i; // [esp+Ch] [ebp-18h]
  //int v36; // [esp+10h] [ebp-14h]

  v2x = event;
  v34 = 0;
  sub_37220_375E0();
  //v3 = (a1 - (dword_AE400_AE3F0() + 13323)) / 2049;
  v3 = a1x - str_AE400_AE3F0->str_13323;
  v32x = str_AE400_AE3F0->str_9177[v3].v_9177;
  //v33 = str_AE400_AE3F0->str_9177[v3].v_9181;
  uaxis_2d tempZ;
  tempZ.word= sub_11F50(&v32x);
  tempZ._axis_2d.y++;
  v32x.z = tempZ.word;
  //v5 = dword_AE400_AE3F0();
  //v33 = v4;   //fix it
  if (event == str_AE400_AE3F0->str_29795)
  {
      v2x = sub_373F0(&v32x, 3, a1x->var_u8_13332_9 == 1);
    v34 = 1;
  }
  else
  {
    event->var_u8_29865_70 = a1x->var_u8_13332_9 == 1;
    //v7 = *(_DWORD *)(event + 160);
    //event->var_u32_29955_160->var_50
    event->var_29811_16.byte[0] &= 0xDF;
    if (event->var_u32_29955_160->var_50)
    {
      //v8 = *(_WORD *)(v7 + 50);
      v32x = str_AE400_AE3F0->str_29795[event->var_u32_29955_160->var_50].var_u32_29867_72;
      //v33 = *(_WORD *)(dword_AE400_AE3F0() + 164 * v8 + 29871);
    }
    sub_41C70_41FB0(event, &v32x);
  }  
  v2x->var_u32_29955_160 = &a1x->str_1103;
  v2x->var_u32_29955_160->var_48 = a1x - str_AE400_AE3F0->str_13323;
  v2x->var_u32_29955_160->u16_331 = 100;
  v2x->var_u32_29955_160->u32_351 = 2000;
  v2x->var_u32_29955_160->v_12 = 0;
  v2x->var_u32_29955_160->v_24 = 0;
  v2x->var_u32_29955_160->v_26 = 0;
  v2x->var_u32_29955_160->v_22 = 0;

  //adress 215EAB
//debug
#ifdef debug1
  //add_compare(0x215EAB, true);
#endif debug1
  //debug
  //v9 = 0;
  int v9x = 0;
  v2x->var_u32_29955_160->v_16 = 0;
  do
  {
      //adress 0x215EC6
//debug
#ifdef debug1
      //add_compare(0x215EC6, true);
#endif debug1
      //debug
    //v10 = v9 + *(_DWORD *)(v2 + 160);
    //v2x->var_u32_29955_160[v9x]
    if (v2x->var_u32_29955_160->var_14958_1635_532[v9x] < 0 )
    {
        v2x->var_u32_29955_160->var_14958_1635_532[v9x] = 0;
    }
    else
    {
      v11x = sub_373F0(&v2x->var_u32_29867_72, 12, v2x->var_u32_29955_160->var_14958_1635_532[v9x]);
      //v12 = v11;
      if ( v11x )
      {
        //v13 = dword_AE400_AE3F0() + 29795;
        //v36 = 164;
        v2x->var_u32_29955_160->var_14958_1635_532[v9x] = v11x - str_AE400_AE3F0->str_29795;
        v11x->var_u16_29837_42 = v2x - str_AE400_AE3F0->str_29795;
        v11x->var_29811_16.byte[0] |= 1u;
        if (v2x->var_u32_29955_160->var_916[v11x->var_u8_29860_65])
        {
            v11x->var_u16_29881_86 = 280;
            v11x->var_u16_29927_132 = 0;
            v11x->var_29811_16.byte[2] |= 4;
        }
      }
      else
      {
          v2x->var_u32_29955_160->var_14958_1635_532[v9x] = 0;
      }
    }
    //v9 += 4;
    v9x++;
  }
  while ( v9x != 24 );
  if ( v34 )
  {
    v2x->var_u32_29955_160->u32_379 = dword_AC5D4_AC5C4;
    switch (v2x->var_u32_29955_160->var_48)
    {
      case 0:
        sub_36FA0(v2x, 44);
        break;
      case 1:
        sub_36FA0(v2x, 273);
        break;
      case 2:
        sub_36FA0(v2x, 274);
        break;
      case 3:
        sub_36FA0(v2x, 275);
        break;
      case 4:
        sub_36FA0(v2x, 276);
        break;
      case 5:
        sub_36FA0(v2x, 277);
        break;
      case 6:
        sub_36FA0(v2x, 278);
        break;
      case 7:
        sub_36FA0(v2x, 279);
        break;
      default:
        break;
    }
    //adress 216003
//debug
#ifdef debug1
    //add_compare(0x216003, true);
#endif debug1
    //debug
    sub_45C10(v2x);
    if (a1x->var_u8_13332_9 == 1 )
    {
        //str_AE400_AE3F0->str_193795.str_230867_37072[v2x->var_u32_29955_160->var_48].var_230875
        /*v2x->var_u32_29955_160->var_48
        str_AE400_AE3F0->var_u32_40
        v2x->var_u32_29955_160->u16_522
        v2x->var_u32_29955_160->u16_524
        v2x->var_u32_29955_160->u16_526*/

        v2x->var_u32_29955_160->u16_522 = str_AE400_AE3F0->str_193795.str_230867_37072[v2x->var_u32_29955_160->var_48].var_230871;
        v2x->var_u32_29955_160->u16_524 = str_AE400_AE3F0->str_193795.str_230867_37072[v2x->var_u32_29955_160->var_48].var_230879;
        v2x->var_u32_29955_160->u16_526 = str_AE400_AE3F0->str_193795.str_230867_37072[v2x->var_u32_29955_160->var_48].var_230875;
      //v15 = dword_AE400_AE3F0();
      /*
            //230871

      v2x->var_u32_29955_160->u16_522 = *(_WORD *)&byte_385D7[216 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)
                                                                    + dword_AE400_AE3F0()];
        //230872+7
      v2x->var_u32_29955_160->u16_524 = *(_WORD *)&algn_385D8[216 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)
                                                                    + 7
                                                                    + dword_AE400_AE3F0()];
      //230872+3
      v2x->var_u32_29955_160->u16_526 = *(_WORD *)&algn_385D8[216 * *(__int16 *)(*(_DWORD *)(v2 + 160) + 48)
                                                                    + 3
                                                                    + dword_AE400_AE3F0()];*/
      //v16 = *(_DWORD *)(v2 + 160);
      if (v2x->var_u32_29955_160->var_676.var_u16[16])
      {
          //232599
        if ( byte_38C97[dword_AE400_AE3F0() + v2x->var_u32_29955_160->var_48] )
        {
          v17x = sub_373F0(&v2x->var_u32_29867_72, 3, 2);
          //v18 = v17;
          if ( v17x )
          {
            //v19 = dword_AE400_AE3F0() + 29795;
            v17x->id_29819_24 = v2x->id_29819_24;
            //*(_WORD *)(v17 + 24) = *(_WORD *)(v2 + 24);
            v2x->var_u32_29955_160->var_50 = v17x - str_AE400_AE3F0->str_29795;
            sub_55370_558A0(v2x - str_AE400_AE3F0->str_29795, -1, 30);
            for ( i = 0; ; i++ )
            {
              //v22 = dword_AE400_AE3F0();
              //v23 = (unsigned __int8)byte_38C97[dword_AE400_AE3F0() + *(__int16 *)(v2x->var_u32_29955_160 + 48)];
                //232599
              if (byte_38C97[v2x->var_u32_29955_160->var_48] <= i )
                break;
              //str_AE400_AE3F0->str_29795->var_u32_29867_72
              str_AE400_AE3F0->str_29795->var_u32_29867_72 = *(axis_3d*)&v17x->var_u32_150;
              //*(_WORD *)(dword_AE400_AE3F0() + 29871) = v17x->var_u16_154;
              //v20 = str_AE400_AE3F0->str_29795;
              //v21 = v17x->id_29819_24;
              str_AE400_AE3F0->str_29795->var_u8_29860_65 = 0;
              str_AE400_AE3F0->str_29795->var_u16_29821_26 = 0;
              str_AE400_AE3F0->str_29795->id_29819_24 = v17x->id_29819_24;
              str_AE400_AE3F0->str_29795->var_u8_29866_71 = i;
              sub_279D0((int)&str_AE400_AE3F0->str_29795);
            }
            v17x->var_u16_29821_26 = byte_38C97[v2x->var_u32_29955_160->var_48] - 1;
            sub_37150(v17x, byte_38C97[v2x->var_u32_29955_160->var_48] - 1);
            sub_47C60((int)v17x);
            v24 = v17x->var_u32_29931;
            v17x->var_u32_29935_140 = v24;
            if ( v24 < 0 )
                v17x->var_u32_29935_140 = 0;
            if (v17x->var_u32_29935_140 > 320000)
                v17x->var_u32_29935_140 = 320000;
          }
        }
      }
    }
    v2x->var_u32_29955_160->u32_359 = 0;
  }
  //adress 2161E7
//debug
#ifdef debug1
  //add_compare(0x2161E7, true);
#endif debug1
  //debug
  //v25 = dword_AE400_AE3F0();
  a1x->playIndex_13333 = v2x - str_AE400_AE3F0->str_29795;
  if (str_AE400_AE3F0->var_u16_8 == v2x->var_u32_29955_160->var_48)
      v2x->var_29811_16.byte[0] |= 1u;
  if (a1x->var_u32_13347_24 == 0x0AE89E/*(uint32) &unk_AE89E*/)
  {
    v2x->var_u32_29931 = 1000000;
    v2x->maxLife_29803_8 = 1000000;
  }
  else
  {
    v2x->var_u32_29931 = 1000;
    v2x->maxLife_29803_8 = 10000;
  }
  v2x->actLife_29807_12 = v2x->maxLife_29803_8;
  v26 = v2x->var_u32_29931;
  //v27 = v2x->var_u32_29955_160;
  v2x->var_u32_29935_140 = v26;
  v2x->var_u32_29955_160->u32_322 = v26;
  sub_45C10(v2x);
  v28 = v2x->var_u32_29955_160->var_50;
  if ( v28 )
    sub_47DD0(&str_AE400_AE3F0->str_29795[v28]);
  for ( jx = str_AE408_AE3F8->var_u32_36462[0]; jx > str_AE400_AE3F0->str_29795; jx = jx->next )
  {
    if (jx->id_29819_24 != v2x->id_29819_24 && jx->var_u8_29860_65 <= 1u )
        jx->var_u32_29955_160->str_456[v2x->var_u32_29955_160->var_48].var_u16_4 = -24609;
  }
  v2x->var_u32_29955_160->u16_314 = 0;
  v2x->var_u32_29955_160->u16_316 = 0;
  if (v2x->var_u8_29860_65 == 1 )
  {
    memset(&v2x->var_u32_29955_160->var_415, 0, 1);
    for (int kx = 0; kx < 8; kx++)
        v2x->var_u32_29955_160->str_456[kx].var_u16_4 = 24607;
    v2x->var_u32_29955_160->var_756 = 4 * v2x->var_u32_29955_160->var_48;
  }
  v2x->var_u32_29955_160->u32_396 = 2048;
  v2x->var_u32_29955_160->u32_400 = 2048;
  v2x->var_u32_29955_160->v_46 = 0;
  memset(v2x->var_u32_29955_160->u8_333, 16, 8);
  //result = dword_AE400_AE3F0();
  str_AE400_AE3F0->var_u32_4593 = -1;
  if (v2x->var_u32_29955_160->var_48 == str_AE400_AE3F0->var_u16_8)
  {
    //result = dword_AE408_AE3F8();
    str_AE408_AE3F8->gameSpeed_150 = 0;
  }
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AC5D4: using guessed type int dword_AC5D4_AC5C4;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00045410) --------------------------------------------------------
int sub_45410(Type_AE400_29795* a1x)//216410_
{
  unsigned __int16 v1; // si
  unsigned __int16 v2; // ax
  unsigned __int16 v3; // ax
  //int v4; // ebx
  __int16 v5; // ax
  unsigned __int16 v7; // [esp+0h] [ebp-28h]
  __int16 v8; // [esp+Ch] [ebp-1Ch]
  __int16 v9; // [esp+10h] [ebp-18h]
  int v10; // [esp+14h] [ebp-14h]

  v10 = 1;
  if ( sub_11810(&word_AE454_AE444) == 256 )
  {
    v1 = sub_42150_42490(&a1x->var_u32_29867_72, &word_AE454_AE444);
    v8 = sub_42180(&a1x->var_u32_29867_72, &word_AE454_AE444);
    v7 = sub_42340(&a1x->var_u32_29867_72, &word_AE454_AE444);
    word_AE454_AE444 = a1x->var_u32_29867_72;
    v9 = ((((int)v1 >> 9) + 1) << 9) & 0x7FF;
    v2 = sub_42210(v1, (int)v1 >> 9 << 9);
    sub_41EC0_42200(&word_AE454_AE444,
      (int)v1 >> 9 << 9,
      v8,
      (v7 * (512 - v2) - (__CFSHL__((v7 * (512 - v2)) >> 31, 9) + ((v7 * (512 - v2)) >> 31 << 9))) >> 9);
    if ( sub_11810(&word_AE454_AE444) == 256 )
    {
      word_AE454_AE444 = a1x->var_u32_29867_72;
      v3 = sub_42210(v1, v9);
      sub_41EC0_42200(&word_AE454_AE444,
        v9,
        v8,
        (v7 * (512 - v3) - (__CFSHL__((v7 * (512 - v3)) >> 31, 9) + ((v7 * (512 - v3)) >> 31 << 9))) >> 9);
      if ( sub_11810(&word_AE454_AE444) == 256 )
        v10 = 0;
    }
  }
  //v4 = a1x->var_u32_29951_156->v_12;
  v5 = sub_11F50(&word_AE454_AE444);
  if ( word_AE454_AE444.z < v5 + a1x->var_u32_29951_156->v_12)
    word_AE454_AE444.z = a1x->var_u32_29951_156->v_12 + v5;
  return v10;
}
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (000455D0) --------------------------------------------------------
void sub_455D0(Type_AE400_29795* a1x)//2165D0_
{
  int v1; // eax
  int v2; // eax
  __int16 v3; // si
  int v4; // ecx
  int v5; // edx
  __int16 v6; // ax
  //int v7; // eax
  __int16 v8; // dx
  __int16 v9; // di
  unsigned __int16 v10; // ax
  //int v11; // eax
  __int16 v12; // dx
  //int v13; // ecx
  __int16 v14; // di
  int v15; // eax
  __int64 v16; // rax
  //_WORD *v17; // eax
  __int16 v18; // si
  __int16 v19; // dx
  unsigned int v20; // edi
  signed int v21; // ebp
  int v22; // ecx
  int v23; // esi
  __int16 v24; // di
  __int16 v25; // ax
  __int16 v26; // ax
  //int v27; // eax
  __int16 v28; // di
  unsigned int v29; // eax

  word_AE454_AE444 = a1x->var_u32_29867_72;
  //a1x->var_u16_29827_32
  a1x->var_u32_29955_160->u16_327 += a1x->var_u32_29955_160->word_0x4_4;
  a1x->var_u32_29955_160->u16_329 += a1x->var_u32_29955_160->word_0x6_6;
  v1 = a1x->var_u32_29955_160->u16_327;
  a1x->var_u16_29825_30 = (a1x->var_u16_29825_30 + ((v1 - (__CFSHL__(v1 >> 31, 3) + 8 * (v1 >> 31))) >> 3)) & 0x7FF;
  v2 = a1x->var_u32_29955_160->v_12 - a1x->actSpeed_29921_126;
  if ( v2 )
    v2 /= (int)abs32(v2);
  a1x->actSpeed_29921_126 += v2 * dword_93A88;
  v3 = sub_11F50(&word_AE454_AE444);
  v4 = a1x->var_u32_29951_156->v_10;
  v5 = ((word_AE454_AE444.z - v3 - v4) << 10) / v4;
  if ( v5 < -256 )
    v5 = -256;
  if ( v5 > 256 )
    v5 = 256;
  v6 = a1x->var_u32_29955_160->u16_329;
  HIBYTE(v6) &= 7u;
  a1x->var_u16_29827_32 = v6;
  if ( v6 > 1024 )
    v6 -= 2048;
  if (a1x->actSpeed_29921_126 >= 0 || v6 <= 0 )
  {
    if (a1x->actSpeed_29921_126 >= 0 || v6 >= 0 )
    {
      if (a1x->actSpeed_29921_126 <= 0 || v6 >= 0 )
      {
        if (a1x->actSpeed_29921_126 <= 0 || v6 <= 0 )
        {
          if ( !a1x->actSpeed_29921_126 && word_AE454_AE444.z > a1x->var_u32_29951_156->v_10 + v3 )
            word_AE454_AE444.z -= 8;
        }
        else
        {
          a1x->var_u32_29955_160->v_28 = a1x->var_u32_29955_160->u16_329;
        }
      }
      else
      {
          a1x->var_u32_29955_160->v_28 = (v6 * -v5 - (__CFSHL__((v6 * -v5) >> 31, 8) + ((v6 * -v5) >> 31 << 8))) >> 8;
      }
    }
    else
    {
        a1x->var_u32_29955_160->v_28 = a1x->var_u32_29955_160->u16_329;
    }
  }
  else
  {
      a1x->var_u32_29955_160->v_28 = (v6 * -v5 - (__CFSHL__((v6 * -v5) >> 31, 8) + ((v6 * -v5) >> 31 << 8))) >> 8;
  }
  //v7 = a1x->var_u32_29955_160;
  v8 = a1x->var_u32_29955_160->v_28;
  HIBYTE(v8) &= 7u;
  a1x->var_u32_29955_160->v_28 = v8;
  sub_41EC0_42200(&word_AE454_AE444, a1x->var_u16_29825_30, a1x->var_u32_29955_160->v_28, a1x->actSpeed_29921_126);
  v9 = a1x->var_u32_29955_160->v_16;
  if ( v9 )
  {
    v10 = a1x->var_u16_29825_30;
    HIBYTE(v10) += 2;
    sub_41EC0_42200(&word_AE454_AE444, v10, 0, v9);
  }
  //v11 = a1x->var_u32_29955_160;
  v12 = a1x->var_u32_29955_160->v_22;
  if ( v12 )
  {
    if ( v12 > 128 )
        a1x->var_u32_29955_160->v_22 = 128;
    sub_41EC0_42200(&word_AE454_AE444, a1x->var_u32_29955_160->v_24, 0, a1x->var_u32_29955_160->v_22);
    //v13 = a1x->var_u32_29955_160;
    v14 = a1x->var_u32_29955_160->v_22;
    if ( v14 )
      v15 = v14 / (int)abs16(v14);
    else
      LOWORD(v15) = 0;
    a1x->var_u32_29955_160->v_22 += v15 * dword_93A94;
    v16 = a1x->var_u32_29955_160->v_22;
    if ( (int)((HIDWORD(v16) ^ v16) - HIDWORD(v16)) < 4 )
        a1x->var_u32_29955_160->v_22 = 0;
  }
  //v17 = a1x->var_u32_29955_160;
  v18 = a1x->var_u32_29955_160->u16_410 + word_AE454_AE444.y;
  v19 = a1x->var_u32_29955_160->u16_412;
  word_AE454_AE444.x += a1x->var_u32_29955_160->u16_408;
  word_AE454_AE444.y = v18;
  word_AE454_AE444.z += v19;
  a1x->var_u32_29955_160->u16_408 = 0;
  a1x->var_u32_29955_160->u16_410 = 0;
  a1x->var_u32_29955_160->u16_412 = 0;
  v20 = dword_AE400_AE3F0() + 29795 + 164 * a1x->var_u32_29955_160->u16_314;
  if ( v20 > dword_AE400_AE3F0() + 29795 )
  {
    v21 = sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v20 + 72));
    if ( v21 >= 5120 || *(int *)(v20 + 12) < 0 || a1x->var_u32_29955_160->u16_316 == 1000 )
    {
      a1x->var_u32_29955_160->u16_314 = 0;
      a1x->var_u32_29955_160->u16_316 = 0;
    }
    v22 = 3 * a1x->actSpeed_29923_128 / 2;
    v23 = (v21 - a1x->var_u32_29955_160->u32_318) / (1024 / (__int16)v22);
    if ( (__int16)v23 < -(__int16)v22 )
      v23 = 3 * a1x->actSpeed_29923_128 / -2;
    if ( (__int16)v23 > (__int16)v22 )
      LOWORD(v23) = 3 * a1x->actSpeed_29923_128 / 2;
    v24 = sub_42150_42490(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v20 + 72));
    v25 = a1x->var_u16_29825_30 + sub_422A0(a1x->var_u16_29825_30, v24, 5, 0x82u);
    HIBYTE(v25) &= 7u;
    a1x->var_u16_29825_30 = v25;
    sub_41EC0_42200(&word_AE454_AE444, v24, a1x->var_u16_29827_32, v23);
    a1x->var_u32_29955_160->u16_316++;
  }
  v26 = sub_45410(a1x);
  if ( v26 )
    sub_41C70_41FB0(a1x, &word_AE454_AE444);
  if ( sub_11810(&a1x->var_u32_29867_72) == 1 )
  {
    sub_55370_558A0(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 1);
    sub_55890(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 2);
  }
  else
  {
    sub_55370_558A0(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 2);
    sub_55890(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 1);
  }
  if ( a1x->var_u32_29955_160->u32_396 >= 1536 )
  {
    sub_55890(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 5);
  }
  else
  {
    sub_55370_558A0(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 5);
    a1x->var_u32_29955_160->u32_396 = 2048;
  }
  if ( a1x->var_u32_29955_160->u32_400 >= 1536 )
  {
    sub_55890(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 31);
  }
  else
  {
    sub_55370_558A0(0, *(_WORD *)(dword_AE400_AE3F0() + 8), 31);
    a1x->var_u32_29955_160->u32_400 = 2048;
  }
  //v27 = a1x->var_u32_29955_160;
  if ( a1x->var_u32_29955_160->var_48 == *(_WORD *)(dword_AE400_AE3F0() + 8) )
  {
    v28 = a1x->var_u32_29955_160->v_46;
    if ( v28 <= 0 )
    {
      sub_20D00(1);
    }
    else
    {
        a1x->var_u32_29955_160->v_46 = v28 - 1;
      sub_20D00(2);
    }
  }
  if ( (a1x->var_u8_29858_63 & 0x3F) == 0 )
  {
    v29 = 9377 * a1x->rand_29799_4 + 9439;
    a1x->rand_29799_4 = v29;
    if ( !(v29 % 0xB) )
      sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 46);
  }
}
// 93A88: using guessed type int dword_93A88;
// 93A94: using guessed type int dword_93A94;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00045C10) --------------------------------------------------------
void sub_45C10(Type_AE400_29795* a1x)
{
  //int result; // eax
  //int v2; // ebx
  int v3; // ecx

  //a1x->var_u32_29955_160->var_14958_1635_532
  //a1x->var_u32_29955_160->var_676.var_u16[str_AE400_AE3F0->str_29795[v3].var_u8_29860_65]
  //str_AE400_AE3F0->str_29795[v3].var_u8_29860_65
  //a1x->var_u32_29955_160->var_676

      //a1x->var_u32_29955_160->var_14958_1635_532[i]
  memset(a1x->var_u32_29955_160->var_676.var_u16, 0, 48);
  //for ( result = 0; result != 96; result += 4 )
  for (int i = 0; i < 24; i++)
  {
    //v2 = *(_DWORD *)(a1 + 160);
      v3 = a1x->var_u32_29955_160->var_14958_1635_532[i];// *(_DWORD*)(v2 + result + 532);
      if (v3)
          //*(_WORD *)(v2 + 2 * *(char *)(164 * v3 + dword_AE400_AE3F0() + 29860) + 676) = *(_WORD *)(v2 + result + 532);
          a1x->var_u32_29955_160->var_676.var_u16[str_AE400_AE3F0->str_29795[v3].var_u8_29860_65] = a1x->var_u32_29955_160->var_14958_1635_532[i];
  }
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00045C90) --------------------------------------------------------
void sub_45C90(Type_AE400_29795* a1x)
{
  //int v1; // eax
  //int v2; // eax
  //int v3; // eax
  unsigned __int8 v4; // dh
  //int v5; // edx
  //int v6; // eax
  int v7; // ebp
  int v8; // edi
  int v9; // edx
  //int v10; // eax
  int v11; // ecx
  //int v12; // eax
  __int16 v13; // cx
  char v14; // [esp+0h] [ebp-14h]

  v14 = 0;
  if ( (str_AE408_AE3F8->var_u8_2 & 1) == 0 )
    sub_45C10(a1x);
  a1x->actSpeed_29923_128 = dword_93A90;
  if ( (str_AE408_AE3F8->var_u8_2 & 1) == 0 )
  {
    if (a1x->var_u32_29955_160->var_50)
    {
      if ( sub_11950(a1x, &str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50]) )
        v14 = 1;
    }
  }
  sub_46840(a1x);
  if ( (str_AE408_AE3F8->var_u8_2 & 1) == 0 && v14 )
  {
    if (a1x->str_29885_90.var_u16_29889_94)
    {
      if (str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50].str_29885_90.var_u16_29889_94)
          str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50].str_29885_90.var_u16_29885_90 += a1x->str_29885_90.var_u16_29885_90;
      else
          str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50].str_29885_90.var_u16_29885_90 = a1x->str_29885_90.var_u16_29885_90;
      str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50].str_29885_90.var_u16_29889_94 = a1x->str_29885_90.var_u16_29889_94;
    }
    a1x->var_u32_29955_160->u16_331 = 2;
  }
  if ( (str_AE408_AE3F8->var_u8_2 & 1) == 0 )
  {
    if (a1x->var_u32_29955_160->u16_331)
    {
      memset(&a1x->str_29885_90, 0, 36);
      a1x->var_u32_29955_160->u16_331--;
    }
    else
    {
      sub_46540(a1x);
    }
    //v3 = a1x->var_u32_29955_160;
    v4 = a1x->var_u32_29955_160->u8_326;
    if ( v4 < 0xC8u )
        a1x->var_u32_29955_160->u8_326 = v4 + 1;
  }
  sub_455D0(a1x);
  if (a1x->actLife_29807_12 >= 0 )
  {
    if ( (str_AE408_AE3F8->var_u8_2 & 1) == 0 )
    {
      //v6 = a1x->var_u32_29955_160;
      a1x->var_u32_29935_140 += a1x->var_u16_29927_132;
      v7 = a1x->var_u32_29955_160->u32_383;
      if ( v7 )
          a1x->var_u32_29955_160->u32_383 = v7 - 1;
      else
          a1x->actLife_29807_12 += a1x->var_u32_29955_160->u16_341;
      if (a1x->var_u32_29935_140 < 0 )
          a1x->var_u32_29935_140 = 0;
      v8 = a1x->var_u32_29931;
      if (a1x->var_u32_29935_140 > v8 )
        a1x->var_u32_29935_140 = v8;
      if (a1x->actLife_29807_12 < -1 )
          a1x->actLife_29807_12 = -1;
      v9 = a1x->maxLife_29803_8;
      if (a1x->actLife_29807_12 > v9 )
          a1x->actLife_29807_12 = v9;
      //v10 = a1x->var_u32_29955_160;
      v11 = a1x->var_u32_29955_160->u32_351;
      if ( v11 )
          a1x->var_u32_29955_160->u32_351 = v11 - 1;
      //v12 = a1x->var_u32_29955_160;
      v13 = a1x->var_u32_29955_160->u16_528;
      if ( v13 )
          a1x->var_u32_29955_160->u16_528 = v13 - 1;
      if ( v14 || (a1x->var_29811_16.byte[1] & 0x10) != 0 )
      {
          a1x->var_u16_29927_132 = a1x->var_u32_29931 / 200;
          a1x->var_u32_29955_160->u16_341 = a1x->maxLife_29803_8 / 250;
        if (a1x->var_u16_29927_132 < 1000 )
            a1x->var_u16_29927_132 = 1000;
        a1x->var_29811_16.byte[1] &= ~0x10u;
      }
      else
      {
          a1x->var_u16_29927_132 = a1x->var_u32_29931 / 2000;
          a1x->var_u32_29955_160->u16_341 = a1x->maxLife_29803_8 / 2000;
        if (a1x->var_u16_29927_132 < 100 )
            a1x->var_u16_29927_132 = 100;
      }
    }
  }
  else
  {
    //v5 = dword_AE400_AE3F0();
    a1x->var_u8_29865_70 = 2;
    a1x->var_u16_29841_46 = 0;
    sub_55370_558A0(a1x - str_AE400_AE3F0->str_29795, -1, 16);
  }
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 93A90: using guessed type int dword_93A90;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00045FC0) --------------------------------------------------------
int sub_45FC0(int a1)
{
  __int16 v1; // cx
  int v2; // edi
  __int16 v3; // ax
  __int16 v4; // si
  int v5; // eax
  int result; // eax
  unsigned __int16 v7; // di
  int v8; // eax
  int v9; // edx
  int v10; // eax
  char *v11; // esi
  char *v12; // edi
  char v13; // al
  char v14; // al
  int v15; // eax
  unsigned int v16; // ebp
  __int16 v17; // dx
  int v18; // esi
  unsigned int v19; // eax
  int v20; // esi
  int v21; // edx
  __int64 v22; // rax
  int v23; // ebp
  unsigned int j; // ebp
  int v25; // ecx
  int i; // [esp+0h] [ebp-14h]

  sub_455D0((Type_AE400_29795*)a1);
  if ( *(_BYTE *)(dword_AE408_AE3F8() + 99) )
    sub_44BE0((Type_AE400_29795*)a1, 7);
  v1 = *(_WORD *)(a1 + 46) - 2;
  *(_WORD *)(a1 + 76) += *(_WORD *)(a1 + 46);
  *(_WORD *)(a1 + 46) = v1;
  if ( v1 < -256 )
    *(_WORD *)(a1 + 46) = -256;
  if ( *(__int16 *)(a1 + 46) > 0 )
    *(_WORD *)(a1 + 46) = 0;
  v2 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 12);
  v3 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  v4 = v3;
  if ( *(__int16 *)(a1 + 76) < v3 + v2 )
    *(_WORD *)(a1 + 76) = *(_WORD *)(*(_DWORD *)(a1 + 156) + 12) + v3;
  v5 = (int)sub_373F0(&word_AE454_AE444, 10, 1);
  if ( v5 )
  {
    *(_BYTE *)(v5 + 16) |= 0x80u;
    *(_WORD *)(v5 + 24) = *(_WORD *)(a1 + 24);
  }
  result = v4 + *(__int16 *)(*(_DWORD *)(a1 + 156) + 12);
  if ( *(__int16 *)(a1 + 76) == result )
  {
    sub_37220_375E0();
    v7 = *(_WORD *)(a1 + 38);
    if ( v7 )
    {
      v8 = dword_AE400_AE3F0() + 164 * v7;
      if ( *(_BYTE *)(v8 + 29859) == 3 && *(_BYTE *)(v8 + 29860) <= 1u )
      {
        v9 = *(_DWORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 38) + 29955);
        v10 = *(__int16 *)(*(_DWORD *)(a1 + 160) + 48);
        ++*(_WORD *)(v9 + 2 * v10 + 30);
      }
    }
    v11 = dword_AE238_AE228[54];
    v12 = (char *)(dword_AE400_AE3F0()
                 + 13323
                 + 2049 * str_AE400_AE3F0->var_u16_8
                 + 28
                 + 68 * *(__int16 *)(*(_DWORD *)(a1 + 160) + 48));
    do
    {
      v13 = *v11;
      *v12 = *v11;
      if ( !v13 )
        break;
      v14 = v11[1];
      v11 += 2;
      v12[1] = v14;
      v12 += 2;
    }
    while ( v14 );
    *(_WORD *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 68 * *(__int16 *)(*(_DWORD *)(a1 + 160) + 48) + 13415) = 100;
    memset((void*)(a1 + 90), 0, 36);
    for ( i = 0; i != 96; i += 4 )
    {
      v15 = i + *(_DWORD *)(a1 + 160);
      v16 = dword_AE400_AE3F0() + 29795 + 164 * *(_DWORD *)(v15 + 532);
      if ( v16 <= dword_AE400_AE3F0() + 29795 )
      {
        *(_DWORD *)(v15 + 532) = -1;
      }
      else
      {
        *(_DWORD *)(v15 + 532) = *(char *)(v16 + 65);
        if ( (*(_BYTE *)(v16 + 18) & 4) != 0 )
          *(_BYTE *)(*(_DWORD *)(a1 + 160) + *(char *)(v16 + 65) + 916) = 1;
        else
          *(_BYTE *)(*(char *)(v16 + 65) + *(_DWORD *)(a1 + 160) + 916) = 0;
        *(_BYTE *)(v16 + 16) &= ~1u;
        ++*(_BYTE *)(v16 + 70);
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        v17 = 9377 * *(_WORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        v18 = *(_DWORD *)(a1 + 4);
        word_AE454_AE444.x += (v17 & 0x1FF) - 256;
        *(_DWORD *)(a1 + 4) = 9377 * v18 + 9439;
        word_AE454_AE444.y += ((9377 * v18 + 9439) & 0x1FF) - 256;
        sub_41C70_41FB0((Type_AE400_29795*)v16, &word_AE454_AE444);
        v19 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v19;
        *(_DWORD *)(v16 + 12) = v19 % 0x5A + 200;
      }
    }
    v20 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 40);
    if ( v20 )
    {
      v21 = *(_DWORD *)(a1 + 160);
      *(_BYTE *)(a1 + 70) = 3;
      v22 = 255 - *(__int16 *)(v21 + 526);
      v23 = dword_AE408_AE3F8();
      *(_WORD *)(a1 + 26) = 32 * ((int)(v22 - (__CFSHL__(HIDWORD(v22), 3) + 8 * HIDWORD(v22))) >> 3) + 32;
      for ( j = *(_DWORD *)(v23 + 36466); ; j = *(_DWORD *)j )
      {
        v25 = dword_AE400_AE3F0() + 29795;
        if ( j <= dword_AE400_AE3F0() + 29795 )
          break;
        if ( *(_BYTE *)(j + 65) == 39 && *(unsigned __int16 *)(j + 144) == (a1 - v25) / 164 )
          *(_WORD *)(j + 144) = (v20 - v25) / 164;
      }
    }
    result = dword_AE400_AE3F0();
    *(_BYTE *)(a1 + 16) |= 0x20u;
    --*(_DWORD *)(result + 4593);
  }
  return result;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE310: using guessed type int dword_AE310;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;

//----- (000463B0) --------------------------------------------------------
void sub_463B0(int a1)
{
  _WORD *v1; // edi
  int result; // eax

  v1 = (_WORD *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 38) + 72);
  *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)v1);
  *(_WORD *)(a1 + 36) = sub_42180((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)v1);
  *(_WORD *)(a1 + 30) += sub_422A0(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34), 5, 0x16u);
  *(_BYTE *)(a1 + 31) &= 7u;
  *(_WORD *)(a1 + 32) += sub_422A0(*(_WORD *)(a1 + 32), *(_WORD *)(a1 + 36), 5, 0x16u);
  *(_BYTE *)(a1 + 33) &= 7u;
  *(_WORD *)(a1 + 32) = 0;
  *(_WORD *)(*(_DWORD *)(a1 + 160) + 329) = *(_WORD *)(a1 + 32);
  result = *(_DWORD *)(a1 + 160);
  *(_WORD *)(result + 327) = 0;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00046480) --------------------------------------------------------
void sub_46480(int a1)
{
  int v1; // ecx
  int v2; // edx
  int result; // eax
  __int16 v4; // cx

  *(_WORD *)(*(_DWORD *)(a1 + 160) + 22) = 0;
  v1 = *(_DWORD *)(a1 + 160);
  v2 = 2049 * *(__int16 *)(v1 + 48);
  result = dword_AE400_AE3F0();
  if ( *(_BYTE *)(dword_AE400_AE3F0() + v2 + 13332) == 1 )
  {
    if ( (str_AE408_AE3F8->var_u8_1 & 2) == 0 )
    {
      if ( *(_WORD *)(v1 + 50) )
      {
        v4 = *(_WORD *)(a1 + 26);
        if ( v4 )
          *(_WORD *)(a1 + 26) = v4 - 1;
        else
        {
            sub_44D30((TypeStrAE400_13323*)(dword_AE400_AE3F0() + 13323 + v2), (Type_AE400_29795*)a1);
            return;
        }
      }
      else
      {
        *(_BYTE *)(dword_AE400_AE3F0() + v2 + 13329) = 0;
      }
    }
  }
  else
  {
    sub_44BE0((Type_AE400_29795*)a1, 7);
    sub_463B0(a1);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00046520) --------------------------------------------------------
void sub_46520(Type_AE400_29795* a1x)
{
  //int result; // eax
  //int v2; // edx

  //result = a1x;
  //v2 = a1x->var_u32_29955_160;
  if (a1x->var_u32_29955_160)
    a1x->var_u32_29955_160->v_46 = 100;
  //return result;
}

//----- (00046540) --------------------------------------------------------
int sub_46540(Type_AE400_29795* a1x)
{
  int v1; // edi
  int v3; // esi
  int v4; // eax
  int v5; // eax
  //int v6; // eax
  unsigned __int16 v7; // cx
  unsigned int v8; // eax
  //int v9; // eax
  int v10; // eax
  char v11; // cl
  Type_AE400_29795* v12x; // eax
  Type_AE400_29795* v13x; // edi
  axis_3d* v14x; // edi
  //int v15; // eax
  //int v16; // eax
  Type_AE400_29795* v17x; // edx

  v1 = 0;
  if (a1x->actLife_29807_12 < 0 )
    return 2;
  if (a1x->str_29885_90.var_u16_29913_118)
  {
    v3 = dword_AE400_AE3F0() + 29795 + 164 * a1x->str_29885_90.var_u16_29913_118;
    if ( v3 )
    {
      *(_WORD *)(*(_DWORD *)(v3 + 160) + 314) = a1x - str_AE400_AE3F0->str_29795;
      *(_WORD *)(*(_DWORD *)(v3 + 160) + 316) = 200;
      *(_DWORD *)(*(_DWORD *)(v3 + 160) + 318) = sub_42340(&a1x->var_u32_29867_72, (axis_3d*)(_WORD *)(v3 + 72));
      v4 = *(_DWORD *)(v3 + 160);
      if ( *(int *)(v4 + 318) < 1024 )
        *(_DWORD *)(v4 + 318) = 1024;
      v5 = *(_DWORD *)(v3 + 160);
      if ( *(int *)(v5 + 318) > 3072 )
        *(_DWORD *)(v5 + 318) = 3072;
    }
    //v6 = &a1x->var_u32_29955_160;
    a1x->str_29885_90.var_u16_29913_118 = 0;
    *(_BYTE *)(a1x->var_u32_29955_160 + 392) = 4;
    *(_DWORD *)(a1x->var_u32_29955_160 + 383) = 16;
    sub_46520(a1x);
  }
  v7 = a1x->str_29885_90.var_u16_29907_112;
  if ( v7 )
  {
    v8 = dword_AE400_AE3F0() + 29795 + 164 * v7;
    if ( v8 >= dword_AE400_AE3F0() + 29795 )
    {
      if ( *(_BYTE *)(v8 + 64) == 3 )
        *(_DWORD *)(v8 + 140) += a1x->str_29885_90.var_u16_29903_108;
      //v9 = a1x->var_u32_29955_160;
      //a1x->var_u32_29807_12
      a1x->var_u32_29935_140 -= a1x->str_29885_90.var_u16_29903_108;
      *(_BYTE *)(a1x->var_u32_29955_160 + 392) = 4;
      *(_DWORD *)(a1x->var_u32_29955_160 + 383) = 16;
    }
    sub_46520(a1x);
    a1x->str_29885_90.var_u16_29907_112 = 0;
  }
  if (a1x->str_29885_90.var_u16_29889_94)
  {
    if ( (a1x->var_29811_16.byte[1] & 0x40) != 0 )
    {
      v10 = (a1x->str_29885_90.var_u16_29885_90 - (__CFSHL__(a1x->str_29885_90.var_u16_29885_90 >> 31, 2) + 4 * (a1x->str_29885_90.var_u16_29885_90 >> 31))) >> 2;
      a1x->var_u32_29935_140 -= v10;
      v11 = a1x->var_29811_16.byte[1];
      a1x->str_29885_90.var_u16_29885_90 = v10;
      a1x->var_29811_16.byte[1] = v11 & 0xBF;
    }
    v12x = str_AE400_AE3F0->str_29795;
    v13x = &str_AE400_AE3F0->str_29795[a1x->str_29885_90.var_u16_29889_94];
    a1x->actLife_29807_12 -= a1x->str_29885_90.var_u16_29885_90;
    if ( v13x > v12x )
    {
      v14x = &v13x->var_u32_29867_72;
      *(_WORD *)(a1x->var_u32_29955_160 + 24) = sub_42150_42490(v14x, &a1x->var_u32_29867_72);
      *(_WORD *)(a1x->var_u32_29955_160 + 26) = sub_42180(v14x, &a1x->var_u32_29867_72);
      *(_WORD *)(a1x->var_u32_29955_160 + 22) = a1x->str_29885_90.var_u16_29885_90 / 10;
      //v15 = &a1x->var_u32_29955_160;
      if ( *(__int16 *)(a1x->var_u32_29955_160 + 22) < 0 )
        *(_WORD *)(a1x->var_u32_29955_160 + 22) = 0;
      //v16 = a1x->var_u32_29955_160;
      if ( *(__int16 *)(a1x->var_u32_29955_160 + 22) > 80 )
        *(_WORD *)(a1x->var_u32_29955_160 + 22) = 80;
    }
    sub_44BE0(a1x, 2);
    *(_BYTE *)(a1x->var_u32_29955_160 + 392) = 4;
    v17x = str_AE400_AE3F0->str_29795;
    *(_DWORD *)(a1x->var_u32_29955_160 + 383) = 16;
    sub_55370_558A0(a1x - v17x, -1, 17);
    if (a1x->actLife_29807_12 < 0 )
    {
      a1x->var_u16_29833_38 = a1x->str_29885_90.var_u16_29889_94;
      return 2;
    }
    v1 = 1;
    sub_46520(a1x);
    a1x->str_29885_90.var_u16_29889_94 = 0;
  }
  return v1;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00046840) --------------------------------------------------------
void sub_46840(Type_AE400_29795* a1x)
{
  //Type_160* v1x; // eax
  //unsigned __int16 v2; // di
  __int16 v3; // cx
  //Type_160* v4x; // eax
  //Type_160* v5x; // eax
  //Type_160* v6x; // eax
  //Type_160* v7x; // eax
  __int16 v8; // ax
  __int16 v9; // si
  int v10; // eax
  __int16 v11; // di
  __int16 v12; // si
  int v13; // eax
  //Type_160* v14x; // eax
  //Type_160* v15x; // eax
  //Type_160* v16x; // eax

  //v1x = a1x->var_u32_29955_160;
  if (a1x->var_u32_29955_160->dw_0.dword != 48 )
  {
    v3 = 0;
    //a1x->var_u32_29955_160->v_14
    a1x->var_u32_29955_160->v_14 = 0;
    //v4x = a1x->var_u32_29955_160;
    if ( (a1x->var_u32_29955_160->dw_0.byte[0] & 1) != 0 && a1x->var_u32_29955_160->v_12 < dword_93A90 )
      v3 = 1;
    //v5x = a1x->var_u32_29955_160;
    if ( (a1x->var_u32_29955_160->dw_0.byte[0] & 2) != 0 && a1x->var_u32_29955_160->v_12 > dword_93A8C )
      v3 = -1;
    if ( v3 )
    {
      a1x->var_u32_29955_160->v_12 += dword_93A88 * v3;
      //v6x = a1x->var_u32_29955_160;
      if (a1x->var_u32_29955_160->v_12 < dword_93A8C )
          a1x->var_u32_29955_160->v_12 = dword_93A8C;
      //v7x = a1x->var_u32_29955_160;
      if (a1x->var_u32_29955_160->v_12 > dword_93A90 )
          a1x->var_u32_29955_160->v_12 = dword_93A90;
      a1x->var_u32_29955_160->v_14 = 1;
    }
    v8 = 0;
    if ( (a1x->var_u32_29955_160->dw_0.word[0] & 4) != 0 )
      v8 = -1;
    if ( (a1x->var_u32_29955_160->dw_0.word[0] & 8) != 0 )
      v8 = 1;
    if ( v8 )
    {
      //a1x->var_u32_29955_160->v_16
      a1x->var_u32_29955_160->v_16 += word_93AA8 * v8;
      //v16x = a1x->var_u32_29955_160;
      if (a1x->var_u32_29955_160->v_16 < dword_93AAC )
          a1x->var_u32_29955_160->v_16 = dword_93AAC;
      //v15x = a1x->var_u32_29955_160;
      if (a1x->var_u32_29955_160->v_16 <= dword_93AB0 )
        goto LABEL_37;
    }
    else
    {
      v9 = a1x->var_u32_29955_160->v_16;
      if ( v9 )
        v10 = v9 / (int)abs16(v9);
      else
        LOWORD(v10) = 0;
      v11 = v10;
      a1x->var_u32_29955_160->v_16 += v10 * word_93AB4;
      v12 = a1x->var_u32_29955_160->v_16;
      if ( v12 )
        v13 = v12 / (int)abs16(v12);
      else
        v13 = 0;
      if ( v11 != v13 )
          a1x->var_u32_29955_160->v_16 = 0;
      //v14x = a1x->var_u32_29955_160;
      if (a1x->var_u32_29955_160->v_16 < dword_93AAC )
          a1x->var_u32_29955_160->v_16 = dword_93AAC;
      //v15x = a1x->var_u32_29955_160;
      if (a1x->var_u32_29955_160->v_16 <= dword_93AB0 )
        goto LABEL_37;
    }
    a1x->var_u32_29955_160->v_16 = dword_93AB0;
LABEL_37:
    //str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_14958_1635_532[a1x->var_u32_29955_160->var_u16_2043_944]]
    //a1x->var_u32_29955_160->var_14958_1635_532[a1x->var_u32_29955_160->var_u16_2043_940]
    sub_46B00(
      a1x,
        &str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_14958_1635_532[a1x->var_u32_29955_160->var_u16_2043_940]],
      256,
      16);
    sub_46B00(
      a1x,
        &str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_14958_1635_532[a1x->var_u32_29955_160->var_u16_2047_944]],
      512,
      32);
    return;
  }
  //v2 = a1x->var_u32_29955_160->var_50;
  if (a1x->var_u32_29955_160->var_50)
      str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_50].actLife_29807_12 = -1;
}
// 93A88: using guessed type int dword_93A88;
// 93A8C: using guessed type int dword_93A8C;
// 93A90: using guessed type int dword_93A90;
// 93AA8: using guessed type __int16 word_93AA8;
// 93AAC: using guessed type int dword_93AAC;
// 93AB0: using guessed type int dword_93AB0;
// 93AB4: using guessed type __int16 word_93AB4;
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00046B00) --------------------------------------------------------
void sub_46B00(Type_AE400_29795* a1x, Type_AE400_29795* a2x, int a3, int a4)
{
  //Type_160* v4x; // edx
  unsigned __int8 v5; // al
  //int v6; // edi
  //int v7; // edi
  int v8; // eax

  //str_AE400_AE3F0->str_29795

  if ( a2x <= str_AE400_AE3F0->str_29795)
    return;
  //v4x = a1x->var_u32_29955_160;
  if ( (a4 & a1x->var_u32_29955_160->dw_0.word[0]) == 0 )
  {
    if ( !a2x->var_u8_29856_61 || (a3 & a1x->var_29811_16.dword) == 0)
      return;
    goto LABEL_32;
  }
  v5 = a2x->var_u8_29860_65;
  if ( v5 < 0x10u )
  {
    if ( v5 != 2 )
      goto LABEL_20;
    //v6 = 164 * *(__int16 *)(v4x + 718) + dword_AE400_AE3F0();
    if (str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_676.var_u16[21]].var_48)
        str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_676.var_u16[21]].var_48 = 0;
    if ( a1x->var_u32_29935_140 >= a2x->var_u32_29931)
    {
LABEL_20:
      if (a2x->var_u8_29857_62)
      {
        a2x->var_u8_29856_61++;
        v8 = a1x->var_u32_29935_140 / a2x->var_u32_29931;
        if ( (__int16)v8 > a2x->var_u8_29857_62)
          LOWORD(v8) = a2x->var_u8_29857_62;
        if (a2x->var_u8_29856_61 < 0 )
            a2x->var_u8_29856_61 = 0;
        if (a2x->var_u8_29856_61 > (__int16)v8 )
            a2x->var_u8_29856_61 = v8;
        a1x->var_29811_16.byte[1] &= 0xFCu;
        a1x->var_29811_16.dword |= a3;
        return;
      }
      if (a1x->var_u32_29935_140 < a2x->var_u32_29931)
        return;
  LABEL_32:
      a2x->var_48 = a2x->var_50;
      a1x->var_29811_16.byte[1] &= 0xFCu;
      a1x->var_29811_16.dword |= a3;
      a1x->var_29811_16.byte[0] &= ~0x20u;
    }
  }
  else
  {
    if ( v5 <= 0x10u )
    {
      if (a2x->var_48)
      {
        sub_55370_558A0(0, a1x->var_u32_29955_160->var_48, 29);
        return;
      }
      if (a1x->var_u32_29935_140 < a2x->var_u32_29931)
        return;
      goto LABEL_32;
    }
    if ( v5 != 21 )
      goto LABEL_20;
    //v7 = 164 * a1x->var_u32_29955_160->var_676.var_u16[2] + dword_AE400_AE3F0();
    if (str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_676.var_u16[2]].var_48)
        str_AE400_AE3F0->str_29795[a1x->var_u32_29955_160->var_676.var_u16[2]].var_48 = 0;
    if (a1x->var_u32_29935_140 >= a2x->var_u32_29931)
      goto LABEL_20;
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00046CA0) --------------------------------------------------------
unsigned int sub_46CA0(int a1, int a2, int a3)
{
  unsigned int v3; // esi
  unsigned int v4; // edi
  unsigned int i; // ebx
  unsigned int v6; // eax

  v3 = -1;
  v4 = 0;
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36466); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
  {
    if ( *(_BYTE *)(i + 65) == 39 && *(unsigned __int16 *)(i + 144) == *(__int16 *)(a1 + 24) && i != a2 && i != a3 )
    {
      v6 = sub_42390((_WORD *)(a1 + 72), (_WORD *)(i + 72));
      if ( v6 < v3 )
      {
        v4 = i;
        v3 = v6;
      }
    }
  }
  return v4;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00046D20) --------------------------------------------------------
int sub_46D20(Type_AE400_29795* a1x, __int16 a2)
{
  int result; // eax
  __int16 v3; // bx
  int v4; // eax
  int v5; // edx

  result = *(_DWORD *)(dword_AE400_AE3F0() + 164 * a1x->id_29819_24 + 29955);
  v3 = *(_WORD *)(result + 708);
  if ( v3 )
  {
    if ( a2 )
    {
      v4 = 164 * v3;
      v5 = v4 + dword_AE400_AE3F0();
      LOWORD(v4) = *(_WORD *)(v4 + dword_AE400_AE3F0() + 29845);
      result = v4 - 1;
      *(_WORD *)(v5 + 29843) = result;
    }
    else
    {
      result = 41 * v3;
      *(_WORD *)(dword_AE400_AE3F0() + 164 * v3 + 29843) = 0;
    }
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00046DB0) --------------------------------------------------------
__int16 sub_46DB0(int a1)
{
  int v1; // eax
  char v2; // dl
  unsigned int i; // ebx

  LOWORD(v1) = *(_WORD *)(a1 + 50);
  if ( (_WORD)v1 )
  {
    if ( (_WORD)v1 == 1 )
    {
      *(_BYTE *)(a1 + 70) = 5;
      *(_WORD *)(a1 + 48) = 3;
      *(_WORD *)(a1 + 50) = 0;
    }
    else
    {
      --*(_WORD *)(a1 + 50);
      sub_46D20((Type_AE400_29795*)a1, 1);
      LOWORD(v1) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      *(_WORD *)(a1 + 76) = v1;
    }
  }
  else
  {
    if ( sub_47EC0(a1) == 2 )
    {
      *(_BYTE *)(a1 + 70) = 6;
    }
    else if ( (*(_BYTE *)(a1 + 16) & 0x40) != 0 )
    {
      *(_WORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 70) = 5;
    }
    *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    LOWORD(v1) = *(_WORD *)(a1 + 24);
    v2 = *(_BYTE *)(a1 + 63);
    *(_WORD *)(a1 + 144) = v1;
    if ( (v2 & 1) == 0 )
    {
      sub_47130(a1);
      sub_37150((Type_AE400_29795*)a1, *(_WORD *)(a1 + 26));
      sub_47400(a1);
      v1 = *(_DWORD *)(a1 + 140);
      if ( v1 < *(_DWORD *)(a1 + 136) )
      {
        for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36466); ; i = *(_DWORD *)i )
        {
          LOWORD(v1) = dword_AE400_AE3F0() + 29795;
          if ( i <= dword_AE400_AE3F0() + 29795 )
            break;
          if ( *(_BYTE *)(i + 65) == 39 && *(unsigned __int16 *)(i + 144) == *(__int16 *)(a1 + 24) && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)i) )
          {
            *(_DWORD *)(a1 + 140) += *(_DWORD *)(i + 140);
            sub_41E80((Type_AE400_29795*)i);
            return v1;
          }
        }
      }
    }
  }
  return v1;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00046F10) --------------------------------------------------------
char sub_46F10(int a1)
{
  __int16 v1; // ax
  char v2; // dh
  __int16 v3; // cx
  __int16 v4; // ax

  v1 = *(_WORD *)(a1 + 48);
  switch ( v1 )
  {
    case 0:
      sub_12C50((_WORD *)a1);
      if ( !*(_WORD *)(a1 + 26) || (LOBYTE(v1) = sub_12D10((_WORD *)a1), (_BYTE)v1) )
      {
        if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
        {
          v3 = *(_WORD *)(a1 + 86);
          v4 = *(_WORD *)(*(_DWORD *)(164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29955) + 48);
          *(_BYTE *)(a1 + 16) |= 2u;
          *(_WORD *)(a1 + 86) = v4 + v3;
        }
        LOBYTE(v1) = sub_47960(a1);
      }
      else
      {
        v2 = *(_BYTE *)(a1 + 16);
        *(_WORD *)(a1 + 48) = 2;
        *(_BYTE *)(a1 + 16) = v2 & 0xBF;
      }
      break;
    case 1:
    case 4:
    case 6:
      v1 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      *(_WORD *)(a1 + 76) = v1;
      break;
    case 2:
      *(_BYTE *)(a1 + 70) = 4;
      LOBYTE(v1) = sub_46D20((Type_AE400_29795*)a1, 0);
      *(_WORD *)(a1 + 48) = 0;
      break;
    case 3:
      sub_46D20((Type_AE400_29795*)a1, 1);
      LOBYTE(v1) = sub_47020(a1);
      break;
    case 5:
      sub_46D20((Type_AE400_29795*)a1, 1);
      *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      LOBYTE(v1) = sub_47080(a1);
      break;
    default:
      return v1;
  }
  return v1;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00047020) --------------------------------------------------------
int sub_47020(int a1)
{
  int result; // eax
  int v2; // ebx

  result = (int)sub_373F0((axis_3d*)(a1 + 150), 10, 42);
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 71) = *(_BYTE *)(a1 + 26);
    *(_WORD *)(result + 24) = *(_WORD *)(a1 + 24);
    result = (a1 - (dword_AE400_AE3F0() + 29795)) / 164;
    *(_WORD *)(v2 + 42) = result;
    *(_WORD *)(a1 + 48) = 4;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00047080) --------------------------------------------------------
int sub_47080(int a1)
{
  int result; // eax
  int v2; // ebx

  result = (int)sub_373F0((axis_3d*)(a1 + 150), 10, 41);
  v2 = result;
  if ( result )
  {
    *(_BYTE *)(result + 71) = *(_BYTE *)(a1 + 26);
    *(_WORD *)(result + 24) = *(_WORD *)(a1 + 24);
    result = (a1 - (dword_AE400_AE3F0() + 29795)) / 164;
    *(_WORD *)(v2 + 42) = result;
    *(_WORD *)(a1 + 48) = 6;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000470E0) --------------------------------------------------------
int sub_470E0(int a1)
{
  int result; // eax

  result = sub_37710();
  if ( result )
  {
    sub_47A70(a1);
    *(_BYTE *)(a1 + 70) = 4;
    sub_47130(a1);
    result = sub_47400(a1);
    *(_WORD *)(a1 + 48) = 0;
    *(_WORD *)(a1 + 50) = 5;
  }
  else
  {
    *(_BYTE *)(a1 + 70) = 4;
  }
  return result;
}

//----- (00047130) --------------------------------------------------------
int sub_47130(int a1)
{
  int v1; // esi
  int result; // eax
  int v3; // ebp
  int v4; // esi
  int v5; // eax
  int v6; // esi
  int v7; // ecx
  int v8; // edi
  __int16 v9; // ax
  unsigned int v10; // eax
  int v11; // eax
  __int16 v12; // ax
  int v13; // edi
  int j; // ebp
  int v15; // esi
  int v16; // eax
  __int16 v17; // ax
  __int16 v18; // [esp-4h] [ebp-24h]
  int v19; // [esp+0h] [ebp-20h]
  int i; // [esp+8h] [ebp-18h]
  __int16 v21; // [esp+Ch] [ebp-14h]

  v1 = *(_DWORD *)(a1 + 136);
  result = *(_DWORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * *(__int16 *)(a1 + 24) + 29955) + 308) + *(_DWORD *)(a1 + 140);
  v3 = 0;
  if ( result > v1 )
    v3 = *(_DWORD *)(a1 + 140) - v1;
  if ( !*(_WORD *)(a1 + 26) )
    v3 = *(_DWORD *)(a1 + 140);
  if ( v3 > 0 )
  {
    v4 = v3 / 1000;
    v21 = sub_37710();
    if ( v21
      || (sub_37220_375E0(), result = sub_37710(), v4 = 8, v21 = result, str_AE400_AE3F0->var_u32_4593 = -1, (_WORD)result) )
    {
      if ( v4 < 1 )
        v4 = 1;
      if ( v4 > 32 )
        v4 = 32;
      if ( v21 < 0 )
        v21 = 0;
      if ( v21 > v4 )
        v21 = v4;
      v19 = v3 / v21;
      for ( i = 0; v21 > i; ++i )
      {
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        v5 = (int)sub_373F0(&word_AE454_AE444, 10, 39);
        v6 = v5;
        if ( v5 )
        {
          *(_DWORD *)(v5 + 140) = v19;
          v7 = *(_DWORD *)(v5 + 4);
          *(_WORD *)(v5 + 144) = *(_WORD *)(a1 + 24);
          *(_DWORD *)(v5 + 4) = 9377 * v7 + 9439;
          *(_WORD *)(v5 + 150) = 0;
          *(_WORD *)(v5 + 152) = 0;
          *(_WORD *)(v5 + 126) = (9377 * v7 + 9439) % 0x30u + 16;
          v8 = *(__int16 *)(a1 + 76);
          v9 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
          *(_WORD *)(v6 + 46) = (1024
                               - (v8
                                - v9)
                               - (__CFSHL__((1024 - (v8 - v9)) >> 31, 3)
                                + 8 * ((1024 - (v8 - v9)) >> 31))) >> 3;
          v10 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
          *(_DWORD *)(a1 + 4) = v10;
          v18 = v10 % 0x1400 + 3840;
          v11 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
          *(_DWORD *)(a1 + 4) = v11;
          sub_41EC0_42200(&word_AE454_AE444, v11 & 0x7FF, 0, v18);
          sub_41C70_41FB0((Type_AE400_29795*)v6, &word_AE454_AE444);
          v13 = *(_DWORD *)(v6 + 140);
          v3 -= v13;
          *(_DWORD *)(a1 + 140) -= v13;
          if ( v3 < v19 )
            v19 = v3;
        }
      }
      for ( j = 0; j < 4; ++j )
      {
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        result = (int)sub_373F0(&word_AE454_AE444, 10, 54);
        v15 = result;
        if ( result )
        {
          *(_WORD *)(result + 24) = *(_WORD *)(a1 + 24);
          v16 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
          *(_DWORD *)(a1 + 4) = v16;
          sub_41EC0_42200(&word_AE454_AE444, v16 & 0x7FF, 0, 6400);
          result = sub_41C70_41FB0((Type_AE400_29795*)v15, &word_AE454_AE444);
        }
      }
    }
  }
  return result;
}
// 47195: conditional instruction was optimized away because ebp.4>=1
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;

//----- (00047400) --------------------------------------------------------
int sub_47400(int a1)
{
  int v1; // ebp
  __int16 v2; // dx
  __int16 v3; // bx
  int i; // esi
  int v5; // edx
  int v6; // eax
  int v7; // edi
  int v8; // ecx
  unsigned int v9; // ebx
  unsigned int v10; // eax
  int v11; // eax
  int v12; // eax
  int v13; // edi
  unsigned int v14; // ebx
  int result; // eax
  __int16 v16; // bx
  int v17; // edi
  _BYTE *v18; // eax
  int v19; // ebx
  int v20; // edx
  int v21; // [esp+Ch] [ebp-2Ch]
  int v22; // [esp+1Ch] [ebp-1Ch]
  __int16 v23; // [esp+20h] [ebp-18h]
  __int16 v24; // [esp+24h] [ebp-14h]

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
  switch ( *(_WORD *)(a1 + 26) )
  {
    case 1:
      v2 = 1;
      v3 = 0;
      goto LABEL_10;
    case 2:
      v24 = 1;
      v23 = 0;
      break;
    case 3:
      v24 = 1;
      v23 = 4;
      break;
    case 4:
      v2 = 2;
      v3 = 6;
      goto LABEL_10;
    case 5:
      v24 = 2;
      v23 = 14;
      break;
    case 6:
      v24 = 3;
      v23 = 18;
      break;
    case 7:
      v2 = 3;
      v3 = 34;
LABEL_10:
      v24 = v2;
      v23 = v3;
      break;
    default:
      v24 = 0;
      v23 = 0;
      break;
  }
  for ( i = 0; (__int16)i < v24; ++i )
  {
    while ( 1 )
    {
      *(_DWORD *)(*(_DWORD *)(v1 + 160) + 294) = 0;
      v5 = *(_DWORD *)(v1 + 160);
      v21 = 2 * (__int16)i;
      v6 = 164 * *(unsigned __int16 *)(v5 + v21 + 52);
      v7 = dword_AE400_AE3F0();
      v8 = dword_AE400_AE3F0() + 29795;
      v9 = dword_AE400_AE3F0() + 29795 + v6;
      if ( v9 <= dword_AE400_AE3F0() + 29795 )
      {
        v12 = (int)sub_373F0((axis_3d*)(a1 + 72), 3, 3);
        if ( v12 )
        {
          *(_WORD *)(v12 + 24) = *(_WORD *)(a1 + 24);
          *(_WORD *)(v12 + 86) += *(_WORD *)(*(_DWORD *)(v1 + 160) + 48);
          *(_WORD *)(v12 + 144) = *(_WORD *)(a1 + 24);
          *(_WORD *)(v21 + *(_DWORD *)(v1 + 160) + 52) = (v12 - (dword_AE400_AE3F0() + 29795)) / 164;
          *(_BYTE *)(v12 + 70) = 9;
        }
        goto LABEL_27;
      }
      if ( *(int *)(v9 + 12) >= 0 )
        break;
      sub_27690((_WORD *)v6, &str_AE400_AE3F0->str_29795[v6/164]);
      sub_41E80((Type_AE400_29795*)v9);
      *(_WORD *)(v21 + *(_DWORD *)(v1 + 160) + 52) = 0;
LABEL_27:
      if ( (__int16)++i >= v24 )
        goto LABEL_32;
    }
    if ( *(_DWORD *)(v5 + 308) + *(_DWORD *)(a1 + 140) >= *(_DWORD *)(a1 + 136) )
    {
      LOWORD(v11) = (a1 - v8) / 164;
    }
    else
    {
      if ( *(unsigned __int8 *)(a1 + 63) % v24 )
        goto LABEL_23;
      if ( *(_BYTE *)(v9 + 70) != 9 )
        goto LABEL_23;
      *(_WORD *)(v9 + 146) = (a1 - v8) / 164;
      if ( *(_DWORD *)(v9 + 136) <= *(_DWORD *)(v9 + 140) )
        goto LABEL_23;
      *(_WORD *)(v7 + 29941) = 0;
      v10 = sub_46CA0(
              v9,
              v8
            + 164
            * *(unsigned __int16 *)(164 * *(unsigned __int16 *)(*(_DWORD *)(v1 + 160) + 2 * (((__int16)i + 1) % 3) + 52)
                                  + v7
                                  + 29941),
              v8
            + 164
            * *(unsigned __int16 *)(v7
                                  + 164 * *(unsigned __int16 *)(*(_DWORD *)(v1 + 160) + 2 * (((__int16)i + 2) % 3) + 52)
                                  + 29941));
      if ( !v10 )
        goto LABEL_23;
      v11 = (int)(v10 - (dword_AE400_AE3F0() + 29795)) / 164;
    }
    *(_WORD *)(v9 + 146) = v11;
LABEL_23:
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 294) += *(_DWORD *)(v9 + 140);
    *(_DWORD *)(*(_DWORD *)(v1 + 160) + 290) += *(_DWORD *)(v9 + 136);
  }
LABEL_32:
  while ( (__int16)i < 3 )
  {
    v13 = 2 * (__int16)i;
    v14 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v13 + *(_DWORD *)(v1 + 160) + 52);
    if ( v14 > dword_AE400_AE3F0() + 29795 )
    {
      sub_27690(
        (_WORD *)(dword_AE400_AE3F0() + 29795),
          &str_AE400_AE3F0->str_29795[*(unsigned __int16*)(v13 + *(_DWORD*)(v1 + 160) + 52)]);
      sub_41E80((Type_AE400_29795*)v14);
      *(_WORD *)(v13 + *(_DWORD *)(v1 + 160) + 52) = 0;
    }
    LOWORD(i) = i + 1;
  }
  result = a1;
  v16 = *(_WORD *)(a1 + 46);
  if ( v16 > 0 )
    *(_WORD *)(a1 + 46) = v16 - 1;
  v22 = 0;
  if ( v23 > 0 )
  {
    do
    {
      v17 = 2 * (__int16)v22;
      v18 = (_BYTE *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(v17 + *(_DWORD *)(v1 + 160) + 84));
      if ( (unsigned int)v18 <= dword_AE400_AE3F0() + 29795 )
      {
        if ( !*(_WORD *)(a1 + 46) )
        {
          v19 = (int)sub_373F0((axis_3d*)(a1 + 72), 5, 15);
          if ( v19 )
          {
            *(_WORD *)(a1 + 46) = 16;
            *(_WORD *)(v19 + 24) = *(_WORD *)(a1 + 24);
            v20 = dword_AE400_AE3F0() + 29795;
            *(_WORD *)(v19 + 144) = *(_WORD *)(a1 + 24);
            *(_WORD *)(v17 + *(_DWORD *)(v1 + 160) + 84) = (v19 - v20) / 164;
            *(_WORD *)(v19 + 30) = 512;
            *(_WORD *)(v19 + 34) = *(_WORD *)(v19 + 30);
            *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v19 + 72);
            word_AE454_AE444.z = *(_WORD *)(v19 + 76);
            word_AE454_AE444.x += 128;
            word_AE454_AE444.y += 640;
            word_AE454_AE444.z = sub_11F50(&word_AE454_AE444);
            sub_41C70_41FB0((Type_AE400_29795*)v19, &word_AE454_AE444);
          }
        }
      }
      else if ( v18[64] != 5 || v18[65] != 15 || v18[70] == 95 )
      {
        *(_WORD *)(*(_DWORD *)(v1 + 160) + 2 * (__int16)v22 + 84) = 0;
        *(_WORD *)(a1 + 46) = 16;
      }
      result = v22 + 1;
      v22 = result;
    }
    while ( (__int16)result < v23 );
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00047960) --------------------------------------------------------
char sub_47960(int a1)
{
  int v1; // eax
  int v2; // esi
  __int16 v3; // dx
  int v4; // ecx
  __int16 v6; // [esp-4h] [ebp-10h]

  v1 = sub_3B7B0((uint16_t*)(a1 + 150));
  v2 = v1;
  if ( v1 )
  {
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 10);
    v3 = *(_WORD *)(a1 + 26);
    *(_BYTE *)(a1 + 16) &= ~0x40u;
    *(_WORD *)(a1 + 26) = v3 + 1;
    v6 = *(_WORD *)(a1 + 26);
    *(_BYTE *)(a1 + 70) = 5;
    *(_WORD *)(a1 + 48) = 4;
    sub_37150((Type_AE400_29795*)a1, v6);
    sub_47C60(a1);
    v4 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
    v1 = (a1 - (dword_AE400_AE3F0() + 29795)) / 164;
    *(_WORD *)(*(_DWORD *)(v4 + 160) + 50) = v1;
    *(_WORD *)(*(_DWORD *)(v4 + 160) + 416) = *(_WORD *)(a1 + 26);
    *(_WORD *)(v2 + 42) = v1;
    *(_WORD *)(v2 + 24) = *(_WORD *)(a1 + 24);
    LOBYTE(v3) = *(_BYTE *)(v2 + 18);
    LOBYTE(v1) = *(_BYTE *)(a1 + 26);
    *(_BYTE *)(v2 + 60) = 0;
    *(_BYTE *)(v2 + 71) = v1;
    *(_BYTE *)(v2 + 18) = v3 | 1;
  }
  return v1;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00047A70) --------------------------------------------------------
void sub_47A70(int a1)
{
  int v1; // esi
  int v2; // edx
  int v3; // ecx
  int v4; // edi
  int result; // eax
  __int16 v6; // [esp-4h] [ebp-10h]

  if ( *(__int16 *)(a1 + 26) > 0 )
  {
    v1 = 10 * *(_DWORD *)(a1 + 136) / 100;
    *(_DWORD *)(a1 + 136) -= v1;
    sub_47130(a1);
    v2 = a1 - (dword_AE400_AE3F0() + 29795);
    *(_DWORD *)(a1 + 136) += v1;
    sub_55370_558A0(v2 / 164, -1, 30);
    v3 = dword_AE400_AE3F0();
    v4 = dword_AE400_AE3F0() + 29867;
    *(_DWORD *)(dword_AE400_AE3F0() + 29867) = *(_DWORD *)(a1 + 150);
    *(_WORD*)(v4 + 4) = *(_WORD*)(a1 + 154);
    *(_BYTE *)(v3 + 29866) = *(_BYTE *)(a1 + 26);
    *(_WORD *)(v3 + 29819) = *(_WORD *)(a1 + 24);
    *(_BYTE *)(v3 + 29860) = 0;
    *(_WORD *)(v3 + 29821) = 0;
    *(_WORD *)(v3 + 29837) = (a1 - (v3 + 29795)) / 164;
    sub_28FE0(v3 + 29795);
    v6 = *(_WORD *)(a1 + 26) - 1;
    *(_WORD *)(a1 + 26) = v6;
    sub_37150((Type_AE400_29795*)a1, v6);
    sub_47C60(a1);
    result = sub_46D20((Type_AE400_29795*)a1, 1);
  }
  if ( !*(_WORD *)(a1 + 26) )
  {
    sub_46D20((Type_AE400_29795*)a1, 0);
    *(_WORD *)(*(_DWORD *)(164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29955) + 50) = 0;
    sub_41E80((Type_AE400_29795*)a1);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00047BD0) --------------------------------------------------------
int sub_47BD0(_DWORD *a1, int a2, int a3, int a4)
{
  int result; // eax
  int v5; // edx
  int v6; // ecx

  result = a3;
  if ( a3 )
  {
    v5 = a1[3];
    v6 = 0;
    a1[2] = a3;
    if ( v5 < 0 )
    {
      v6 = -v5;
      if ( -v5 > a3 / 2 )
        v6 = a3 / 2;
    }
    result = a1[2] - v6;
    a1[3] = result;
  }
  if ( a2 )
  {
    result = a4 / *(__int16 *)(a2 + 50);
    *(_DWORD *)(a2 + 136) = a4;
    *(_DWORD *)(a2 + 140) = result;
  }
  a1[34] = a4;
  return result;
}

//----- (00047C60) --------------------------------------------------------
int sub_47C60(int a1)
{
  int v1; // eax
  __int16 v2; // bx
  int result; // eax

  v1 = 164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29795;
  if ( *(_BYTE *)(v1 + 70) <= 1u && (v2 = *(_WORD *)(*(_DWORD *)(v1 + 160) + 708)) != 0 )
    result = 164 * v2 + dword_AE400_AE3F0() + 29795;
  else
    result = 0;
  switch ( *(_WORD *)(a1 + 26) )
  {
    case 0:
      result = sub_47BD0((_DWORD *)a1, result, 0, 5000);
      break;
    case 1:
      result = sub_47BD0((_DWORD *)a1, result, 20000, 10000);
      break;
    case 2:
      result = sub_47BD0((_DWORD *)a1, result, 40000, 20000);
      break;
    case 3:
      result = sub_47BD0((_DWORD *)a1, result, 40000, 40000);
      break;
    case 4:
      result = sub_47BD0((_DWORD *)a1, result, 60000, (int)&loc_13880);
      break;
    case 5:
      result = sub_47BD0((_DWORD *)a1, result, 60000, (int)&loc_270FA + 6);
      break;
    case 6:
      result = sub_47BD0((_DWORD *)a1, result, (int)&loc_13880, (int)&loc_4E200);
      break;
    case 7:
      result = sub_47BD0((_DWORD *)a1, result, (int)&loc_13880, 30000000);
      break;
    default:
      return result;
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00047DD0) --------------------------------------------------------
void sub_47DD0(Type_AE400_29795* a1x)
{
  //int v1; // ebx
  //int result; // eax
  __int16 v3; // dx
  //int v4; // ebx
  bool v5; // zf
  Type_AE400_29795* v6; // ebx
  int v7; // edx

  //str_AE400_AE3F0->str_29795[a1x->id_29819_24]
  //v1 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
  v3 = str_AE400_AE3F0->str_29795[a1x->id_29819_24].var_u32_29955_160->var_676.var_u16[16];
  //BYTE1(result) = *(_BYTE *)(v1 + 70);
  if (str_AE400_AE3F0->str_29795[a1x->id_29819_24].var_u8_29865_70 <= 1u && v3 != 0 )
  {
    //v4 = 164 * v3;
    v5 = &str_AE400_AE3F0->str_29795[v3] == nullptr;
    v6 = &str_AE400_AE3F0->str_29795[v3];
  }
  else
  {
    v6 = 0;
    v5 = true;
  }
  if ( !v5 )
  {
    switch ( a1x->var_u16_29821_26)
    {
      case 0:
        v7 = 5000;
        break;
      case 1:
        v7 = 10000;
        break;
      case 2:
        v7 = 20000;
        break;
      case 3:
        v7 = 40000;
        break;
      case 4:
        v7 = 80000;
        break;
      case 5:
        v7 = 160000;
        break;
      case 6:
        v7 = 320000;
        break;
      case 7:
        v7 = 30000000;
        break;
      default:
        v7 = 0;
        break;
    }
    v6->var_u32_29931 = v7;
    v6->var_u32_29935_140 = v7 / v6->var_50;
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00047EC0) --------------------------------------------------------
int sub_47EC0(int a1)
{
  int v1; // esi
  int v3; // ecx
  __int16 v4; // ax
  int v5; // edx
  int v6; // eax

  v1 = 0;
  if ( *(int *)(a1 + 12) < 0 )
    return 2;
  if ( *(_WORD *)(a1 + 94) )
  {
    v3 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 90);
    *(_DWORD *)(a1 + 12) = v3;
    if ( v3 < 0 )
    {
      v4 = *(_WORD *)(a1 + 94);
      *(_WORD *)(a1 + 94) = 0;
      *(_WORD *)(a1 + 38) = v4;
      return 2;
    }
    v5 = *(__int16 *)(a1 + 24);
    *(_WORD *)(a1 + 94) = 0;
    v6 = dword_AE400_AE3F0();
    *(_DWORD *)(a1 + 90) = 0;
    v1 = 1;
    *(_BYTE *)(*(_DWORD *)(164 * v5 + v6 + 29955) + 391) = 4;
  }
  if ( *(unsigned __int16 *)(a1 + 124) == *(__int16 *)(a1 + 24) )
  {
    if ( *(__int16 *)(a1 + 26) < 7 )
      *(_BYTE *)(a1 + 16) |= 0x40u;
    *(_WORD *)(a1 + 124) = 0;
  }
  return v1;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00047F90) --------------------------------------------------------
int sub_47F90(int a1)
{
  unsigned int v1; // ebp
  char v2; // ah
  signed int v3; // esi
  int v4; // eax
  __int16 v5; // ax
  signed int v6; // eax
  unsigned int v7; // edi
  int v8; // esi
  int v9; // edx
  __int16 *v10; // edx
  __int16 v11; // ax
  __int16 v12; // ax
  int v14; // [esp-Ch] [ebp-1Ch]
  int v15; // [esp-8h] [ebp-18h]
  int v16; // [esp-4h] [ebp-14h]

  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
  if ( v1 > dword_AE400_AE3F0() + 29795 )
  {
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
    word_AE454_AE444.z = *(_WORD *)(a1 + 76);
    *(_WORD *)(a1 + 30) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(v1 + 72));
    v2 = *(_BYTE *)(v1 + 64);
    if ( v2 == 10 )
    {
      if ( *(unsigned __int16 *)(v1 + 144) != *(__int16 *)(a1 + 24) )
      {
LABEL_17:
        v10 = *(__int16 **)(a1 + 156);
        v16 = v10[7];
        v15 = v10[5];
        v14 = v10[6];
        v11 = sub_11F50(&word_AE454_AE444);
        v12 = sub_42000(&word_AE454_AE444, v11, v14, v15, v16);
        sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
        return sub_481D0(a1);
      }
      v3 = sub_423D0_42710((axis_3d*)(uint16*)&word_AE454_AE444, (axis_3d*)(_WORD *)(v1 + 72));
      if ( v3 > 1024 )
      {
        *(_BYTE *)(v1 + 16) &= ~0x40u;
      }
      else
      {
        v4 = (a1 - (dword_AE400_AE3F0() + 29795)) / 164;
        *(_BYTE *)(v1 + 16) |= 0x40u;
        *(_WORD *)(v1 + 146) = v4;
        if ( sub_11950((Type_AE400_29795*)v1, (Type_AE400_29795*)a1) )
        {
          *(_DWORD *)(a1 + 140) += *(_DWORD *)(v1 + 140);
          v5 = *(_WORD *)(v1 + 144);
          *(_WORD *)(a1 + 146) = 0;
          *(_WORD *)(a1 + 144) = v5;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
          sub_41E80((Type_AE400_29795*)v1);
        }
      }
      v6 = *(__int16 *)(a1 + 126);
      if ( v3 <= v6 )
      {
        word_AE454_AE444.x = *(_WORD *)(v1 + 72);
        word_AE454_AE444.y = *(_WORD *)(v1 + 74);
        goto LABEL_17;
      }
    }
    else
    {
      if ( v2 == 3 )
      {
        v7 = *(__int16 *)(v1 + 26) * *(__int16 *)(a1 + 126);
        if ( sub_423D0_42710((axis_3d*)(uint16*)&word_AE454_AE444, (axis_3d*)(_WORD *)(v1 + 72)) <= v7 )
        {
          v8 = *(__int16 *)(*(_DWORD *)(a1 + 156) + 12);
          if ( word_AE454_AE444.z <= v8 + (__int16)sub_11F50(&word_AE454_AE444) && *(__int16 *)(v1 + 26) > 0 )
          {
            word_AE454_AE444.x = *(_WORD *)(v1 + 72);
            v9 = *(_DWORD *)(v1 + 140);
            word_AE454_AE444.y = *(_WORD *)(v1 + 74);
            *(_DWORD *)(v1 + 140) = *(_DWORD *)(a1 + 140) + v9;
            *(_DWORD *)(a1 + 140) = 0;
            *(_WORD *)(a1 + 144) = *(_WORD *)(a1 + 24);
            *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
          }
          goto LABEL_17;
        }
      }
      LOWORD(v6) = *(_WORD *)(a1 + 126);
    }
    sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), v6);
    goto LABEL_17;
  }
  return sub_481D0(a1);
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (000481D0) --------------------------------------------------------
int sub_481D0(int a1)
{
  int v1; // edx
  int v3; // edx

  v1 = 0;
  if ( *(int *)(a1 + 12) < 0 )
    return 2;
  if ( *(_WORD *)(a1 + 94) )
  {
    v3 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)(a1 + 12) -= *(_DWORD *)(a1 + 90);
    *(_BYTE *)(v3 + 393) = 4;
    if ( *(int *)(a1 + 12) < 0 )
    {
      *(_WORD *)(a1 + 38) = *(_WORD *)(a1 + 94);
      return 2;
    }
    v1 = 1;
    *(_WORD *)(a1 + 94) = 0;
  }
  return v1;
}

//----- (00048230) --------------------------------------------------------
void sub_48230(Type_AE400_29795* a1)
{
  unsigned __int16 v1; // cx
  TypeStrAE400_13323* i; // edx
  Type_AE400_29795* v3; // eax
  //int v4; // ebx
  //int v5; // eax
  int v6; // edx
  //Type_AE400_29795* v7; // ebx
  Type_AE400_193795* result; // eax
  unsigned __int8 v9; // al
  char v10; // ah
  unsigned __int8 v11; // al
  int v12; // eax

  v1 = 0;
  //str_AE400_AE3F0->str_13323[0].var_u32_13323
  for ( i = str_AE400_AE3F0->str_13323; ; i++ )
  {
    //v4 = dword_AE400_AE3F0();
    if ( v1 >= str_AE400_AE3F0->var_u16_10 )
      break;
    v3 = &str_AE400_AE3F0->str_29795[i->playIndex_13333];
    //v3->var_u32_29931;//136
    //uint8_t stub3[20];
    //v3->var_u32_29955;//160
    v3->var_u32_29931 = v3->var_u32_29955_160->u32_322;
    ++v1;
    v3->var_u32_29955_160->u32_308 = 0;
  }
  //v5 = dword_AE408_AE3F8();
  v6 = a1->var_u32_29955_160->u32_322;
  str_AE408_AE3F8->str_184.var_u32_192 = 0;
  //v7 = &str_AE400_AE3F0->str_29795[1];
  int v7x = 1;
  //str_AE400_AE3F0->str_29795[v7x];
  str_AE408_AE3F8->str_184.var_u32_188 = v6;
  for ( result = &str_AE400_AE3F0->str_193795; v7x < 1000; result = &str_AE400_AE3F0->str_193795)
  {
      //str_AE400_AE3F0->str_29795[v7x].var_u8_29860_65
    v9 = str_AE400_AE3F0->str_29795[v7x].var_u8_29859_64;
    if ( v9 < 5u )
    {
      if ( v9 != 3 )
        goto LABEL_20;
      v10 = str_AE400_AE3F0->str_29795[v7x].var_u8_29860_65;
      if ( v10 != 2 && v10 != 3 )
        goto LABEL_20;
    }
    else if ( v9 > 5u )
    {
      if ( v9 != 10 )
        goto LABEL_20;
      v11 = str_AE400_AE3F0->str_29795[v7x].var_u8_29860_65;
      if ( v11 < 0x27u )
        goto LABEL_20;
      if ( v11 > 0x27u )
      {
        if ( v11 == 45 )
        {
          v12 = sub_48340((int)&str_AE400_AE3F0->str_29795[v7x]);
          if ( v12 )
          {
            if ( *(_DWORD *)(v12 + 160) )
              *(_DWORD *)(*(_DWORD *)(v12 + 160) + 308) += str_AE400_AE3F0->str_29795[v7x].var_u32_29935_140;
          }
        }
        goto LABEL_20;
      }
    }
    sub_48340((int)&str_AE400_AE3F0->str_29795[v7x]);
LABEL_20:
    //v7 += 164;
    v7x++;
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00048340) --------------------------------------------------------
int sub_48340(int a1)
{
  int result; // eax

  result = 0;
  if ( *(_WORD *)(a1 + 144) )
  {
    result = 164 * *(unsigned __int16 *)(a1 + 144) + dword_AE400_AE3F0() + 29795;
    *(_DWORD *)(result + 136) += *(_DWORD *)(a1 + 140);
  }
  str_AE408_AE3F8->str_184.var_u32_188 += *(_DWORD *)(a1 + 140);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (000483C0) --------------------------------------------------------
void sub_483C0(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  __int16 *v4; // esi
  __int16 v5; // bx

  if ( byte_939E4 && byte_939E5 && a2 <= (int)(unsigned __int16)word_CC1C6 )
  {
    v4 = word_CBFF0;
    v5 = 0;
    while ( a1 != *v4 || a2 != v4[1] || sub_651F8(dword_CC140, v5) )
    {
      ++v5;
      v4 += 2;
      if ( v5 >= 32 )
        goto LABEL_10;
    }
    sub_65965(dword_CC140, v5);
LABEL_10:
    sub_48570(a1, a2, a3, a4);
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CBFF0: using guessed type __int16 word_CBFF0[];
// CC140: using guessed type int dword_CC140;
// CC1C6: using guessed type __int16 word_CC1C6;

//----- (00048470) --------------------------------------------------------
void sub_48470(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  __int16 *v4; // esi
  __int16 v5; // bx
  char v6; // [esp+0h] [ebp-10h]

  if ( byte_939E4 && byte_939E5 && a2 <= (int)(unsigned __int16)word_CC1C6 )
  {
    v4 = word_CBFF0;
    v5 = 0;
    v6 = 0;
    while ( __PAIR32__(a2, a1) != *(_DWORD *)v4 || sub_651F8(dword_CC140, v5) )
    {
      ++v5;
      v4 += 2;
      if ( v5 >= 32 )
        goto LABEL_9;
    }
    v6 = 1;
LABEL_9:
    if ( !v6 )
      sub_48570(a1, a2, a3, a4);
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CBFF0: using guessed type __int16 word_CBFF0[];
// CC140: using guessed type int dword_CC140;
// CC1C6: using guessed type __int16 word_CC1C6;

//----- (00048520) --------------------------------------------------------
int sub_48520(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  int result; // eax

  if ( byte_939E4 && byte_939E5 )
  {
    result = a2;
    if ( a2 <= (int)(unsigned __int16)word_CC1C6 )
      return sub_48570(a1, a2, a3, a4);
  }
  return result;
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CC1C6: using guessed type __int16 word_CC1C6;

//----- (00048570) --------------------------------------------------------
bool sub_48570(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  __int16 v4; // bx
  bool result; // eax
  int v6; // edx
  int v7; // eax
  int v8; // edx

  v4 = 0;
  while ( 1 )
  {
    result = sub_651F8(dword_CC140, v4);
    if ( result )
      break;
    if ( ++v4 >= 32 )
      return result;
  }
  word_CBFF0[2 * v4] = a1;
  word_93A00 = a3;
  word_CBFF2[2 * v4] = a2;
  word_93A0C = 768;
  word_93A22 = a4;
  word_93A02 = v4;
  word_CC070[v4] = (int)(a3 - (__CFSHL__((unsigned __int64)a3 >> 32, 8) + ((unsigned __int64)a3 >> 32 << 8))) >> 8;
  //fix word_939F4 = __DS__;
  v6 = 32 * a2 + dword_CC154;
  v7 = *(_DWORD *)(v6 + 26) - 16;
  v8 = *(_DWORD *)(v6 + 18);
  dword_939F8 = v7;
  dword_939F0 = v8;
  dword_CC144 = sub_6535C(dword_CC140, (unsigned int)&dword_939F0);
  return 1;
}
// 939F0: using guessed type int dword_939F0;
// 939F4: using guessed type __int16 word_939F4;
// 939F8: using guessed type int dword_939F8;
// 93A00: using guessed type __int16 word_93A00;
// 93A02: using guessed type __int16 word_93A02;
// 93A0C: using guessed type __int16 word_93A0C;
// 93A22: using guessed type __int16 word_93A22;
// CBFF0: using guessed type __int16 word_CBFF0[];
// CBFF2: using guessed type __int16 word_CBFF2[63];
// CC070: using guessed type __int16 word_CC070[];
// CC140: using guessed type int dword_CC140;
// CC144: using guessed type int dword_CC144;
// CC154: using guessed type int dword_CC154;

//----- (00048710) --------------------------------------------------------
char sub_48710_48A50(int a1, int a2, __int16 a3, __int16 a4, int a5, int a6, __int16 a7, int a8)//219710_
{
  int v8; // edx
  int v9; // eax
  int v10; // ebx
  __int64 v11; // rtt
  int v12; // ebx
  int v13; // ebp
  int v14; // ebx
  __int16 v15; // bx
  int v16; // ebp
  int v17; // ebx
  int v18; // edx
  int v19; // esi
  int v20; // edi
  int v21; // eax
  int v22; // edx
  int v23; // esi
  int v24; // eax
  int v25; // ebx
  int i; // eax
  int v27; // ebx
  unsigned int v28; // ebx
  unsigned __int8 v29; // al
  unsigned __int8 v30; // ah
  unsigned __int16 v31; // di
  int v32; // eax
  int v33; // eax
  unsigned __int8 v34; // ah
  int v35; // eax
  unsigned __int8 v36; // al
  char v37; // al
  unsigned __int8 v38; // ah
  int v39; // edi
  int v40; // edx
  int v41; // esi
  int v42; // edi
  char *v43; // edx
  __int16 v44; // cx
  __int16 v45; // di
  int v46; // edi
  char *v47; // edx
  int v48; // ebx
  int v49; // edi
  int v50; // edx
  int v51; // esi
  int v52; // edi
  int v53; // esi
  char *v54; // edx
  char *v55; // ebx
  char result; // al
  char *v57; // eax
  int v58; // [esp+4h] [ebp-54h]
  int v59; // [esp+8h] [ebp-50h]
  int v60; // [esp+Ch] [ebp-4Ch]
  int v61; // [esp+10h] [ebp-48h]
  int v62; // [esp+14h] [ebp-44h]
  int v63; // [esp+18h] [ebp-40h]
  int v64; // [esp+18h] [ebp-40h]
  int v65; // [esp+20h] [ebp-38h]
  int v66; // [esp+24h] [ebp-34h]
  int v67; // [esp+28h] [ebp-30h]
  signed int v68; // [esp+2Ch] [ebp-2Ch]
  int v69; // [esp+30h] [ebp-28h]
  int v70; // [esp+34h] [ebp-24h]
  char *v71; // [esp+38h] [ebp-20h]
  char *v72; // [esp+3Ch] [ebp-1Ch]
  unsigned __int16 j; // [esp+40h] [ebp-18h]
  char v74; // [esp+44h] [ebp-14h]

  v8 = a1;
  v9 = a2;
  v10 = a8;
  v59 = 0;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    v8 = a1 >> 1;
    v9 = a2 >> 1;
    v10 = 2 * a8;
    a5 >>= 1;
    a6 >>= 1;
  }
  v65 = scrWidth_12EFF0_12EFE0 * v9 + (int)begWscreen_2ECFF4_2ECFE4 + v8;
  LODWORD(v11) = (uint32)0x10000;
  HIDWORD(v11) = (int)0x10000 >> 31;
  v12 = v11 / v10;
  v58 = a5 / 2;
  v13 = v12 * sin_90B4C[a7 & 0x7FF];
  v14 = (cos_9134C[a7 & 0x7FF] * v12) >> 16;
  v70 = a6 / 2;
  sub_5A3C0_5A8D0(1);
  v62 = v14;
  v69 = 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333) + dword_AE400_AE3F0() + 29795;
  v15 = *(_WORD *)(*(_DWORD *)(v69 + 160) + 686);
  v16 = -v13 >> 16;
  if ( v15 )
    v59 = *(__int16 *)(dword_AE400_AE3F0() + 164 * v15 + 29843);
  v17 = *(_DWORD *)(v69 + 160);
  if ( *(_WORD *)(v17 + 50) )
  {
    v18 = (__int16)(*(_WORD *)(v69 + 72) - a3);
    v19 = v18 * v62;
    v20 = v70 + ((v16 * v18 + (__int16)(*(_WORD *)(v69 + 74) - a4) * v62) >> 16);
    v21 = dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(v17 + 50);
    v22 = (__int16)(*(_WORD *)(v21 + 29867) - a3);
    v23 = v58 + ((v19 - v16 * (__int16)(*(_WORD *)(v69 + 74) - a4)) >> 16);
    v24 = (__int16)(*(_WORD *)(v21 + 29869) - a4);
    v25 = v58 + ((v22 * v62 - v16 * v24) >> 16);
    v63 = ((v16 * v22 + v62 * v24) >> 16) + v70;
    v68 = Distance_410CE_4140E((v25 - v23) * (v25 - v23) + (v63 - v20) * (v63 - v20));
    v66 = (unsigned __int16)sub_40F87_412C7(v25 - v23, v63 - v20);
    for ( i = (*(_DWORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13341) & 3) + 4;
          i <= v68;
          *(_BYTE *)(v65 + v27 + scrWidth_12EFF0_12EFE0 * v64) = strPal.byte_BB934_BB924[256
                                                                * *(unsigned __int8 *)(v65 + v27 + scrWidth_12EFF0_12EFE0 * v64)
                                                                + (unsigned __int8)byte_AE167_AE157] )
    {
      v27 = ((i * sin_90B4C[v66]) >> 16) + v23;
      v64 = v20 + ((-i * cos_9134C[v66]) >> 16);
      if ( v27 < 0 )
        break;
      if ( v27 >= a5 )
        break;
      if ( v64 < 0 )
        break;
      if ( v64 >= a6 )
        break;
      if ( v27 < word_12C1F2[2 * v64] )
        break;
      if ( v27 >= word_12C1F0[2 * v64] )
        break;
      i += 4;
    }
  }
  v28 = dword_AE400_AE3F0() + 29959;
  while ( v28 < dword_AE400_AE3F0() + 193795 )
  {
    v29 = 0;
    v60 = 1;
    switch ( *(_BYTE *)(v28 + 64) )
    {
      case 2:
        v34 = *(_BYTE *)(v28 + 65);
        if ( v34 )
        {
          if ( v34 <= 1u )
          {
            if ( str_AE408_AE3F8->str_93.var_u8[2] )
            {
              v74 = (char)byte_AD167_AD157[1];
              v29 = 1;
            }
          }
          else if ( v34 == 3 )
          {
            if ( str_AE408_AE3F8->str_93.var_u8[2] )
            {
              v74 = (char)byte_AD167_AD157[1];
              v29 = 1;
            }
          }
          else
          {
            v74 = 28;
            v29 = 1;
          }
        }
        else
        {
          if ( *(_BYTE *)(v28 + 70) != 2 )
            v29 = 1;
          v74 = 28;
        }
        goto LABEL_66;
      case 3:
        v38 = *(_BYTE *)(v28 + 65);
        if ( v38 >= 2u )
        {
          if ( v38 <= 2u )
          {
            v29 = *(_BYTE *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * *(__int16 *)(v28 + 24) + 29955) + 48) + 58;
          }
          else if ( v38 == 3 && (*(_WORD *)(v28 + 24) == *(_WORD *)(v69 + 24) || v59) )
          {
            v29 = *(_BYTE *)(*(_DWORD *)(164 * *(__int16 *)(v28 + 24) + dword_AE400_AE3F0() + 29955) + 48) + 66;
          }
        }
        goto LABEL_66;
      case 5:
        if ( *(_BYTE *)(v28 + 70) != 120 && (*(_BYTE *)(v28 + 16) & 1) == 0 )
        {
          v35 = *(__int16 *)(v28 + 24);
          if ( v35 == (int)(v28 - (dword_AE400_AE3F0() + 29795)) / 164 )
          {
            v36 = *(_BYTE *)(v28 + 65);
            if ( v36 < 0xCu || v36 > 0xEu )
              v37 = (char)byte_AD167_AD157[1];
            else
              v37 = byte_AD167_AD157[16];
          }
          else
          {
            v37 = byte_99B58[1+2 * str_AE400_AE3F0->str_29795[v35].var_u32_29955_160->var_48];
          }
          v74 = v37;
          v29 = 1;
        }
        goto LABEL_66;
      case 9:
        goto LABEL_32;
      case 0xA:
        v30 = *(_BYTE *)(v28 + 65);
        if ( v30 < 0x22u )
        {
          if ( v30 >= 3u && v30 == 18 )
            goto LABEL_66;
          goto LABEL_32;
        }
        if ( v30 <= 0x22u )
        {
          v60 = 2;
LABEL_32:
          v33 = 164 * *(__int16 *)(v28 + 24) + dword_AE400_AE3F0();
          if ( *(_BYTE *)(v33 + 29859) == 3 )
            v74 = byte_99B58[2 * *(__int16 *)(*(_DWORD *)(v33 + 29955) + 48)];
          else
            v74 = byte_AD167_AD157[3856];
          v29 = 1;
          goto LABEL_66;
        }
        if ( v30 < 0x27u || v30 > 0x27u )
          goto LABEL_32;
        v31 = *(_WORD *)(v28 + 144);
        if ( v31 && (v32 = dword_AE400_AE3F0() + 164 * v31, *(_BYTE *)(v32 + 29859) == 3) )
        {
          v74 = byte_99B58[2 * *(__int16 *)(*(_DWORD *)(v32 + 29955) + 48) + *(unsigned __int8 *)(dword_AE408_AE3F8() + 96)];
          v29 = 1;
        }
        else
        {
          v29 = 1;
          v74 = -24;
        }
LABEL_66:
        if ( !v29 )
          goto LABEL_97;
        v39 = (__int16)(*(_WORD *)(v28 + 72) - a3);
        v40 = (__int16)(*(_WORD *)(v28 + 74) - a4);
        v41 = v58 + ((v39 * v62 - v16 * v40) >> 16);
        if ( v41 < 0 )
          goto LABEL_97;
        if ( v41 >= a5 )
          goto LABEL_97;
        v42 = ((v16 * v39 + v62 * v40) >> 16) + v70;
        if ( v42 < 0 || v42 >= a6 || v41 < word_12C1F2[2 * v42] || v41 >= word_12C1F0[2 * v42] )
          goto LABEL_97;
        v43 = (char *)(v42 * scrWidth_12EFF0_12EFE0 + v41 + v65);
        if ( v29 <= 1u )
        {
          *v43 = v74;
          if ( v60 > 1 )
          {
            v46 = scrWidth_12EFF0_12EFE0;
            v43[1] = v74;
            v47 = &v43[v46];
            *v47 = v74;
            v47[1] = v74;
          }
        }
        else
        {
          if ( typeResolution_12F02E_12F01E != 1 )
          {
            if ( v29 < 0x3Cu )
            {
              if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              {
LABEL_83:
                DrawBitmap_60CE0_611F0(v41, v42 - *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29 + 5), &begSprTab_AE42C_AE41C_26C42C_26C41C[v29]);
                goto LABEL_97;
              }
              goto LABEL_84;
            }
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
            {
LABEL_78:
              DrawBitmap_60CE0_611F0(
                v41 - ((int)*(unsigned __int8 *)(6 * v29 + begSprTab_AE42C_AE41C_26C42C_26C41C + 4) >> 1),
                v42 - *(unsigned __int8 *)(6 * v29 + begSprTab_AE42C_AE41C_26C42C_26C41C + 5),
                  &begSprTab_AE42C_AE41C_26C42C_26C41C[v29]);
              goto LABEL_97;
            }
            goto LABEL_94;
          }
          if ( v29 >= 0x42u && v29 < 0x4Au )
          {
            LOWORD(v41) = 2 * v41;
            LOWORD(v42) = 2 * v42;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              goto LABEL_78;
LABEL_94:
            DrawBitmap_60D18_61228(
              v41 - ((int)*(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29 + 4) >> 1),
              v42 - *(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29 + 5),
                &begSprTab_AE42C_AE41C_26C42C_26C41C[v29]);
            goto LABEL_97;
          }
          if (v29 >= 0x3Au && v29 < 0x42u)
          {
              LOWORD(v41) = 2 * v41;
              LOWORD(v42) = 2 * v42;
              if ((typeResolution_12F02E_12F01E & 1) != 0)
                  goto LABEL_83;
          LABEL_84:
              DrawBitmap_60D18_61228(v41, v42 - *(unsigned __int8*)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29 + 5), &begSprTab_AE42C_AE41C_26C42C_26C41C[v29]);
            goto LABEL_97;
          }
          if ( v29 == 83 || v29 == 84 )
          {
            v44 = 2 * v41;
            v45 = 2 * v42;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
              DrawBitmap_60CE0_611F0(
                v44 - ((int)*(unsigned __int8 *)(6 * v29 + begSprTab_AE42C_AE41C_26C42C_26C41C + 4) >> 1),
                v45 - ((int)*(unsigned __int8 *)(6 * v29 + begSprTab_AE42C_AE41C_26C42C_26C41C + 5) >> 1),
                  &begSprTab_AE42C_AE41C_26C42C_26C41C[v29]);
            else
              DrawBitmap_60D18_61228(
                v44 - ((int)*(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29 + 4) >> 1),
                v45 - ((int)*(unsigned __int8 *)(begSprTab_AE42C_AE41C_26C42C_26C41C + 6 * v29 + 5) >> 1),
                  &begSprTab_AE42C_AE41C_26C42C_26C41C[v29]);
          }
        }
LABEL_97:
        v28 += 164;
        break;
      case 0xB:
        switch ( *(_BYTE *)(v28 + 65) )
        {
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            v29 = 83;
            break;
          case 0x1F:
            v29 = 84;
            break;
          default:
            goto LABEL_66;
        }
        goto LABEL_66;
      case 0xC:
        if ( (*(_BYTE *)(v28 + 16) & 1) == 0 )
        {
          v74 = byte_AD167_AD157[3841];
          v29 = 1;
        }
        goto LABEL_66;
      default:
        goto LABEL_66;
    }
  }
  if ( v59 )
  {
    for ( j = 0; j < str_AE400_AE3F0->var_u16_10; ++j )
    {
      if ( j != str_AE400_AE3F0->var_u16_8 )
      {
        v67 = 2049 * j;
        v48 = 164 * *(unsigned __int16 *)(v67 + dword_AE400_AE3F0() + 13333) + dword_AE400_AE3F0() + 29795;
        if ( *(int *)(v48 + 12) >= 0 )
        {
          v49 = (__int16)(*(_WORD *)(v48 + 72) - a3);
          v50 = (__int16)(*(_WORD *)(v48 + 74) - a4);
          v51 = ((v49 * v62 - v16 * v50) >> 16) + v58;
          if ( v51 >= 0 && v51 < a5 )
          {
            v52 = ((v16 * v49 + v62 * v50) >> 16) + v70;
            if ( v52 >= 0 && v52 < a6 && v51 >= word_12C1F2[2 * v52] && v51 < word_12C1F0[2 * v52] )
            {
              if ( typeResolution_12F02E_12F01E == 1 )
                DrawText_5A180_5A690(
                  (char*)(v67 + dword_AE400_AE3F0() + 13323 + 1034),
                  (__int16)(2 * v51 + 2),
                  2 * v52,
                  byte_99B58[1+2 * *(__int16 *)(*(_DWORD *)(v48 + 160) + 48)]);
              else
                DrawText_5A180_5A690(
                  (char*)(v67 + dword_AE400_AE3F0() + 13323 + 1034),
                  (__int16)(v51 + 2),
                  v52,
                  byte_99B58[1+2 * *(__int16 *)(*(_DWORD *)(v48 + 160) + 48)]);
            }
          }
        }
      }
    }
  }
  v61 = a5 / 12;
  v53 = 11264;
  v54 = (char *)(a5 / 2 + v65 + scrWidth_12EFF0_12EFE0 * (a6 / 2) - 1);
  v71 = v54;
  v55 = v54;
  result = strPal.fog_B7934_B7924[(unsigned __int8)*v54 + 11264];
  v72 = v54;
  for ( *v54 = result; v61; --v61 )
  {
    v72 -= scrWidth_12EFF0_12EFE0;
    v53 -= 2048 / (a5 / 12);
    v71 += scrWidth_12EFF0_12EFE0;
    v57 = &strPal.fog_B7934_B7924[v53 & 0xFF00];
    *v72 = v57[(unsigned __int8)*v72];
    v55[1] = v57[(unsigned __int8)v55[1]];
    *v71 = v57[(unsigned __int8)*v71];
    ++v55;
    *(v54 - 1) = v57[(unsigned __int8)*(v54 - 1)];
    --v54;
    result = v61 - 1;
  }
  return result;
}
// 49053: variable 'v74' is possibly undefined
// 10000: using guessed type void sub_10000();
// 90B4C: using guessed type int cos_90B4C[256];
// 9134C: using guessed type void (*off_9134C[2])();
// AD168: using guessed type char byte_AD168;
// AD177: using guessed type char byte_AD177;
// AE068: using guessed type char byte_AE068;
// AE077: using guessed type char byte_AE077;
// AE167: using guessed type char byte_AE167_AE157;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// AE42C: using guessed type int begSprTab_AE42C_AE41C_26C42C_26C41C;
// 12C1F0: using guessed type __int16 word_12C1F0[];
// 12C1F2: using guessed type __int16 word_12C1F2[959];
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00049300) --------------------------------------------------------
int DrawMinimap_49300_49640(int a1, int a2, int a3, int a4, int a5, int a6, __int16 a7, int a8, int a9, int a10)//21A300_
{
  int v10; // ebx
  int v11; // edx
  int v12; // edi
  __int16 *i; // ebx
  int v14; // edi
  __int16 *v15; // ecx
  int v16; // ebx
  __int16 *j; // esi
  int v18; // eax
  int v19; // ebx
  int result; // eax
  int v21; // ecx
  int v22; // ebx
  _BYTE *v23; // edi
  int v24; // esi
  int v25; // ecx
  int v26; // eax
  int v27; // edx
  int v28; // ecx
  int v29; // ebx
  _BYTE *v30; // edi
  int v31; // esi
  int v32; // ecx
  int v33; // eax
  int v34; // edx
  int m; // [esp+0h] [ebp-38h]
  int v36; // [esp+4h] [ebp-34h]
  int v37; // [esp+8h] [ebp-30h]
  uint8* v38; // [esp+10h] [ebp-28h]
  int v39; // [esp+18h] [ebp-20h]
  int v40; // [esp+1Ch] [ebp-1Ch]
  int v41; // [esp+20h] [ebp-18h]
  int k; // [esp+24h] [ebp-14h]
  int v43; // [esp+28h] [ebp-10h]
  int v44; // [esp+2Ch] [ebp-Ch]
  uint8* v45; // [esp+30h] [ebp-8h]
  __int16 *v46; // [esp+34h] [ebp-4h]

  //21A304

  //debug
#ifdef debug1
              //add_compare(0x21A304, true);
#endif debug1
//debug

  v10 = a1;
  v11 = a2;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    v10 = a1 >> 1;
    v11 = a2 >> 1;
    a5 >>= 1;
    a6 >>= 1;
    a8 *= 2;
  }
  v38 = &begWscreen_2ECFF4_2ECFE4[scrWidth_12EFF0_12EFE0 * v11 + v10];
  if ( a10 )
  {
    v12 = a6;
    for ( i = word_12C1F0; v12; --v12 )
    {
      i += 2;
      *((_DWORD *)i - 1) = (unsigned __int16)a5;
    }
  }
  else
  {
    v14 = a6 / 2;
    v41 = 0;
    v15 = &word_12C1F0[2 * (a6 / 2)];
    v16 = a5 >> 1;
    for ( j = v15 - 2; v14; --v14 )
    {
      v18 = (v16 * strPal.byte_CBC34_CBC24[v41 >> 16]) >> 8;
      *v15 = v18 + v16;
      *j = v18 + v16;
      v15[1] = v16 - v18;
      j[1] = v16 - v18;
      j -= 2;
      v15 += 2;
      v41 += 0x1000000 / (a6 >> 1);
    }
  }
  v19 = a7 & 0x7FF;
  v40 = (a8 * sin_90B4C[v19]) >> 16;
  v39 = (a8 * cos_9134C[v19]) >> 16;
  v37 = a6 * v40 / a5;
  v36 = a6 * v39 / a5;
  v44 = a3 - (a5 * v36 - a6 * v40) / 2;
  v46 = word_12C1F0;
  v43 = a4 - (a6 * v39 + a5 * v37) / 2;
  v45 = v38;
  if ( a10 )
  {
    result = a6;
    for ( k = a6; k; --k )
    {
      v21 = v46[1];
      v22 = v44 + v21 * v36;
      v23 = (_BYTE *)(v21 + v45);
      v24 = *v46 - v21;
      v25 = v43 + v21 * v37;
      v26 = 0;
      HIWORD(v27) = 0;
      do
      {
        LOBYTE(v27) = BYTE1(v22);
        BYTE1(v27) = BYTE1(v25);
        LOBYTE(v26) = mapTerrainType_CC1E0_CC1D0[v27];
        BYTE1(v27) = mapShading_EC1E0_EC1D0[v27];
        LOBYTE(v27) = strPal.byte_CB934_CB924[v26];
        *v23++ = strPal.fog_B7934_B7924[v27];
        v22 += v36;
        v25 += v37;
        --v24;
      }
      while ( v24 );
      v45 += scrWidth_12EFF0_12EFE0;
      v46 += 2;
      v44 -= v40;
      v43 += v39;
      result = k - 1;
    }
  }
  else
  {
    result = a6;
    for ( m = a6; m; --m )
    {
      v28 = v46[1];
      v29 = v44 + v28 * v36;
      v30 = (_BYTE *)(v28 + v45);
      v31 = *v46 - v28;
      v32 = v43 + v28 * v37;
      v33 = 0;
      HIWORD(v34) = 0;
      do
      {
        LOBYTE(v34) = BYTE1(v29);
        BYTE1(v34) = BYTE1(v32);
        LOBYTE(v33) = mapTerrainType_CC1E0_CC1D0[v34];
        BYTE1(v34) = mapShading_EC1E0_EC1D0[v34];
        LOBYTE(v34) = strPal.byte_CB934_CB924[v33];
        LOBYTE(v34) = strPal.fog_B7934_B7924[v34];
        BYTE1(v34) = *v30;
        *v30++ = strPal.byte_BB934_BB924[v34];
        v29 += v36;
        v32 += v37;
        --v31;
      }
      while ( v31 );
      v45 += scrWidth_12EFF0_12EFE0;
      result = v39;
      v46 += 2;
      v44 -= v40;
      v43 += v39;
    }
  }
  return result;
}
// 90B4C: using guessed type int cos_90B4C[256];
// 9134C: using guessed type void (*off_9134C[2])();
// 12C1F0: using guessed type __int16 word_12C1F0[];
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00049890) --------------------------------------------------------
void sub_49890(int a1)
{
  __int16 v1; // dx
  int v2; // edx
  int v3; // eax
  int v4; // ecx
  __int64 v5; // rax
  int v6; // ebp
  int result; // eax
  int v8; // eax

  v1 = *(_WORD *)(a1 + 94);
  *(_BYTE *)(a1 + 18) |= 2u;
  if ( v1 )
  {
    v2 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 90);
    *(_DWORD *)(a1 + 12) = v2;
    if ( v2 < 0 )
    {
      v3 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 6);
      v4 = v3;
      if ( v3 )
      {
        *(_WORD *)(v3 + 24) = *(_WORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(a1 + 94) + 29819);
        v5 = 3 * *(__int16 *)(a1 + 84);
        *(_WORD *)(v4 + 46) = (int)(v5 - (__CFSHL__(HIDWORD(v5), 2) + 4 * HIDWORD(v5))) >> 2;
        LODWORD(v5) = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v5;
        HIDWORD(v5) = (unsigned int)v5 % 0x3C + 130;
        *(_DWORD *)(v4 + 12) = HIDWORD(v5);
        v6 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 12) = HIDWORD(v5);
        *(_DWORD *)(a1 + 16) = v6 & 0xFFFDFFF7;
        BYTE4(v5) = *(_BYTE *)(a1 + 18);
        *(_BYTE *)(a1 + 70) = 1;
        *(_BYTE *)(a1 + 18) = BYTE4(v5) | 2;
        sub_41CC0((unsigned int)v5 / 0x3C, a1, a1 + 72);
      }
    }
    *(_WORD *)(a1 + 94) = 0;
  }
  *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  result = sub_11810((axis_3d*)(__int16 *)(a1 + 72));
  if ( result == 1 )
  {
    v8 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 5);
    if ( v8 )
      *(_WORD *)(v8 + 24) = *(_WORD *)(a1 + 24);
    sub_41E80((Type_AE400_29795*)a1);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000499C0) --------------------------------------------------------
int sub_499C0(int a1)
{
  int v1; // edx
  unsigned __int16 v2; // si
  int result; // eax
  int v4; // eax

  v1 = *(_DWORD *)(a1 + 12) - 1;
  *(_DWORD *)(a1 + 12) = v1;
  if ( v1 < 60 )
  {
    v2 = *(_WORD *)(a1 + 86);
    *(_BYTE *)(a1 + 70) = 2;
    if ( v2 >= 0x53u )
    {
      if ( v2 <= 0x53u )
      {
        sub_37030((Type_AE400_29795*)(_WORD *)a1, 226);
      }
      else if ( v2 == 84 )
      {
        sub_37030((Type_AE400_29795*)(_WORD *)a1, 227);
      }
    }
  }
  *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  result = sub_11810((axis_3d*)(__int16 *)(a1 + 72));
  if ( result == 1 )
  {
    v4 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 5);
    if ( v4 )
      *(_WORD *)(v4 + 24) = *(_WORD *)(a1 + 24);
    sub_41E80((Type_AE400_29795*)a1);
  }
  return result;
}

//----- (00049A50) --------------------------------------------------------
void sub_49A50(_WORD *a1)
{
  int result; // eax
  int v2; // eax

  a1[38] = sub_11F50((axis_3d*)(short*)(a1 + 36));
  result = sub_11810((axis_3d*)(short*)(a1 + 36));
  if ( result == 1 )
  {
    v2 = (int)sub_373F0((axis_3d*)(a1 + 36), 10, 5);
    if ( v2 )
      *(_WORD *)(v2 + 24) = a1[12];
    sub_41E80((Type_AE400_29795*)(int)a1);
  }
}

//----- (00049AA0) --------------------------------------------------------
int sub_49AA0(int a1)
{
  int result; // eax

  *(_BYTE *)(a1 + 18) |= 2u;
  result = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  *(_WORD *)(a1 + 76) = result;
  return result;
}

//----- (00049AD0) --------------------------------------------------------
int sub_49AD0(int a1)
{
  unsigned __int16 v1; // di
  int v2; // esi
  int v3; // ebx
  int result; // eax

  v1 = 0;
  v2 = dword_AE400_AE3F0() + 13323;
  while ( v1 < str_AE400_AE3F0->var_u16_10 )
  {
    v3 = 164 * *(unsigned __int16 *)(v2 + 10) + dword_AE400_AE3F0() + 29795;
    if ( *(int *)(v3 + 12) >= 0 && sub_11950((Type_AE400_29795*)v3, (Type_AE400_29795*)a1) )
      *(_BYTE *)(v3 + 17) |= 0x10u;
    v2 += 2049;
    ++v1;
  }
  result = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  *(_WORD *)(a1 + 76) = result;
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00049B50) --------------------------------------------------------
int sub_49B50(int a1)
{
  int result; // eax

  *(_BYTE *)(a1 + 18) |= 2u;
  result = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  *(_WORD *)(a1 + 76) = result;
  return result;
}

void sub_4A980_4ACC0()
{
    char tempPath[40];
    FILE* file;

    if (sub_505A0_508E0())
        settingPage_12CBC9_12CBB9 = 7;
    else
        settingPage_12CBC9_12CBB9 = 0;
    byte_12CBD4_12CBC4 = 0;
    word_12CBC0_12CBB0 = 0;
    word_12CBC2_12CBB2 = 0;
    word_12CBBC_12CBAC = 0;
    word_12CBBE_12CBAE = 0;
    byte_12CBCA_12CBBA = 0;
    byte_12CBC6_12CBB6 = 0;
    byte_12CBCD_12CBBD = 0;
    byte_12CBD0_12CBC0 = 0;
    byte_12CBCF_12CBBF = 2;
    byte_12CBD1_12CBC1 = 2;
    byte_12CBCC_12CBBC = 1;
    dword_12CBB0_12CBA0 = 0;
    byte_12CBD5_12CBC5 = byte_12CBD5_12CBC5 & 0x40 | 2;
    byte_12CBD2_12CBC2 = 6;
    byte_12CBD6_12CBC6 &= 0xF8u;
    mainMenuSelector_12CBCE_12CBBE = 6;
    byte_12CBD3_12CBC3 = 0;
    sprintf(str_AE408_AE3F8->textBuffer_117, "CARPET%d", 0);
    sprintf(tempPath, "%s%s\\intro.pld", "C:", "\\carpet.cd");
    file = DataFileIO::CreateOrOpenFile(FixPath(tempPath), 514);
  if (file == nullptr )
  {
    byte_12CBD5_12CBC5 &= ~2u;
    file = DataFileIO::CreateOrOpenFile(FixPath(tempPath), 546);
    if (file != nullptr )
    {
      FileWrite_62ED0_633E0(file, (uint8_t*)file, sizeof(uint8_t*));
      DataFileIO::Close(file);
    }
  }
  else
  {
    DataFileIO::Close(file);
  }
  str_AE408_AE3F8->var_u8_151 = 0;
}

//----- (0004AB20) --------------------------------------------------------
void sub_4AB20_4AE60()//21BB20_
{
  if (bool_12CA7C_12CA6C)
  {
    sub_40440_40780(&pathStrArray_21AB80_21AEC0[PSdatascreenssptrsdat]);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    {
      sub_65D70_66280(begSptrsTab_12CAEC_2EAAEC_2EAADC, endSptrsTab_12CAF0_2EAAF0_2EAAE0, begSptrsDat_12CB64_2EAB64_2EAAE4);
    }
    else
    {
      sub_65DC0_662D0(begSptrsTab_12CAEC_2EAAEC_2EAADC, endSptrsTab_12CAF0_2EAAF0_2EAAE0, begSptrsDat_12CB64_2EAB64_2EAAE4);
    }
    bool_12CA7C_12CA6C = false;
  }
  sub_50770_50AB0();
  switch ( mainMenuSelector_12CBCE_12CBBE )
  {
    case 0:
      sub_4D3B0();//intro2
      break;
    case 1:
      sub_4AC70_4AFB0();//sound joystick
      break;
    case 2:
      sub_4BD60();//game
      break;
    case 4:
      sub_4D680();
      break;
    case 5:
      sub_4E5B0();
      break;
    case 6:
      sub_4F3F0_4F730();//language
      break;
    case 7:
      sub_4EFC0_4F300();//?
      break;
    case 8:
      sub_4F1E0();//intro3
      break;
    case 9:
      sub_4EE70();//intro1
      break;
    case 10:
      sub_4D560();
    default:
      break;
  }
  ++dword_12CBB0_12CBA0;
  sub_65E00();
  if (bool_96880)
  {
    sub_61610_61B20(&pathStrArray_21AB80_21AEC0[PSdatascreenssptrsdat]);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_411D7_41517((void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u, 0);
    else
      sub_411FD_4153D((void *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u, 0);
    bool_12CA7C_12CA6C = true;
    sub_20E60_20E60();
  }
}
// 96880: using guessed type int dword_96880;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CA7C: using guessed type int dword_12CA7C_12CA6C;
// 12CAEC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CAF0: using guessed type int text_12CAF0_2EAAF0_2EAAE0;
// 12CAF4: using guessed type int begSptrsDat_12CB64_2EAB64_2EAAE4;
// 12CBB0: using guessed type int dword_12CBB0_12CBA0;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

void sub_4AC70_4AFB0()//21BC70_
{
	char textBuffer[40];
	bool bool1 = false;
	bool bool2 = false;
	if ((byte_12CBD5_12CBC5 & 1) == 0)
		sub_4BB20_4BE60();
	if (pressedKeys_12EEF0_12EEE0[1])//byte_12EEF1_12EEE1 ESC
	{
        pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
		bool2 = true;
		bool1 = true;
	}
	if ((byte_12CAE4_12CAD4 & 1) != 0 || (byte_12CAE4_12CAD4 & 0x40) != 0)
	{
		if (mouse_12CADC.x >> 1 >= 280 && mouse_12CADC.x >> 1 <= 302)
		{
			if (mouse_12CADC.y >> 1 >= 121 && mouse_12CADC.y >> 1 <= 147 && settingPage_12CBC9_12CBB9 == 7)
			{
                pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
				bool1 = true;
			}
		}
	}
	byte_12CBCB = -1;
	if (mouse_12CADC.x >> 1 >= 56 && mouse_12CADC.x >> 1 <= 146)
	{
		if (mouse_12CADC.y >> 1 >= 64 && mouse_12CADC.y >> 1 <= 143)
		{
			if (settingPage_12CBC9_12CBB9 == 7)
			{
				if ((byte_12CAE4_12CAD4 & 1) != 0)
				{
					byte_12CAE4_12CAD4 &= ~1u;
					settingPage_12CBC9_12CBB9 = 0;
				}
			}
			else
			{
				byte_12CBCB = ((mouse_12CADC.y >> 1) - 64) / (str_96884.next->dim.y - 2);
			}
		}
	}
	if ((byte_12CAE4_12CAD4 & 1) != 0)
	{
		mouseLeftButton_12EFDE_12EFCE = 0;
		if (mouse_12CADC.x >> 1 < 171 || mouse_12CADC.x >> 1 > 264 || mouse_12CADC.y >> 1 < 42 || mouse_12CADC.y >> 1 > 147)
		{
			if (mouse_12CADC.x >> 1 >= 56 && mouse_12CADC.x >> 1 <= 146)
			{
				if (mouse_12CADC.y >> 1 >= 64 && mouse_12CADC.y >> 1 <= 143)
				{
					switch (settingPage_12CBC9_12CBB9)
					{
					case 0:
						if (sub_4B520())
						{
							sprintf(string_12C9C0_12C9B0, "%s", off_4A66C[2 * (unsigned __int8)byte_12CBCB + 0]);
							sprintf(string_12C9A0_12C990, "%s", off_4A66C[2 * (unsigned __int8)byte_12CBCB + 1]);
							settingPage_12CBC9_12CBB9 = 1;
						}
						break;
					case 1:
						if (sub_4B520())
						{
							sprintf(string_12C9E0_12C9D0, "%s", off_4A6CC[2 * (unsigned __int8)byte_12CBCB + 0]);
							sprintf(string_12CA00_12C9F0, "%s", off_4A6CC[2 * (unsigned __int8)byte_12CBCB + 1]);
							if (!strcmp(string_12C9A0_12C990, "NONE"))
							{
								if (strcmp(string_12CA00_12C9F0, "NONE"))
									settingPage_12CBC9_12CBB9 = 5;
								else
									settingPage_12CBC9_12CBB9 = 6;
							}
							else
							{
								settingPage_12CBC9_12CBB9 = 2;
							}
						}
						break;
					case 2:
						if (sub_4B520())
						{
							sprintf(string_12CA80_12CA70, "%s", off_4A734[2 * (unsigned __int8)byte_12CBCB + 0]);
							sprintf(string_12CA9E_12CA8E, "%s", off_4A734[2 * (unsigned __int8)byte_12CBCB + 1]);
							settingPage_12CBC9_12CBB9 = 3;
						}
						break;
					case 3:
						if (sub_4B520())
						{
							sprintf(string_12CA8A_12CA7A, "%s", off_4A74C[2 * (unsigned __int8)byte_12CBCB + 0]);
							sprintf(string_12CAB2_12CAA2, "%s", off_4A74C[2 * (unsigned __int8)byte_12CBCB + 1]);
							settingPage_12CBC9_12CBB9 = 4;
						}
						break;
					case 4:
						if (sub_4B520())
						{
							sprintf(string_12CAD0_12CAC0, "%s", off_4A77C[2 * (unsigned __int8)byte_12CBCB + 0]);
							sprintf(string_12CAC6_12CAB6, "%s", off_4A77C[2 * (unsigned __int8)byte_12CBCB + 1]);
							settingPage_12CBC9_12CBB9 = 5;
							if (!strcmp(string_12CA00_12C9F0, aWblast)
								|| !strcmp(string_12CA00_12C9F0, aRoland)
								|| !strcmp(string_12CA00_12C9F0, aGeneral)
								|| !strcmp(string_12CA00_12C9F0, aSbawe32))
							{
								settingPage_12CBC9_12CBB9 = 5;
							}
							else
							{
								settingPage_12CBC9_12CBB9 = 6;
                                sprintf(string_12CA94_12CA84, "%s", "3");
								sprintf(string_12CAA8_12CA98, "%s", "3");
							}
						}
						break;
					case 5:
						if (sub_4B520())
						{
							sprintf(string_12CA94_12CA84, "%s", off_4A79C[2 * (unsigned __int8)byte_12CBCB + 0]);
							sprintf(string_12CAA8_12CA98, "%s", off_4A79C[2 * (unsigned __int8)byte_12CBCB + 1]);
							settingPage_12CBC9_12CBB9 = 6;
						}
						break;
					case 6:
						if (sub_4B520())
						{
							sprintf(string_12CA20_12CA10, "%s", off_4A7B4[2 * (unsigned __int8)byte_12CBCB + 0]);
							sprintf(string_12CABC_12CAAC, "%s", off_4A7B4[2 * (unsigned __int8)byte_12CBCB + 1]);
							if (!strcmp(string_12CABC_12CAAC, string_A99A0_A99B8))
							{
								sprintf(textBuffer, "%s%s\\sndsetup.inf", "C:", "\\carpet.cd");
								FILE* file = fopen(textBuffer, "w");
								if (file)
								{
									fprintf(
										file,
										"SOUNDFX = %s %s %s %s\n",
										string_12C9A0_12C990,
										string_12CA9E_12CA8E,
										string_12CAB2_12CAA2,
										string_12CAC6_12CAB6);
									fprintf(file, "MUSIC = %s %s 0 0 \n", string_12CA00_12C9F0, string_12CAA8_12CA98);
									fclose(file);
								}
								sprintf(textBuffer, "%s%s\\sndsetup.dat", "C:", "\\carpet.cd");
								file = DataFileIO::CreateOrOpenFile(FixPath(textBuffer), 546);
								if (file != nullptr)
								{
									FileWrite_62ED0_633E0(file, (uint8_t*)string_12C9A0_12C990, 32);
									FileWrite_62ED0_633E0(file, (uint8_t*)string_12C9C0_12C9B0, 32);
									FileWrite_62ED0_633E0(file, (uint8_t*)string_12CA00_12C9F0, 32);
									FileWrite_62ED0_633E0(file, (uint8_t*)string_12C9E0_12C9D0, 32);
									FileWrite_62ED0_633E0(file, (uint8_t*)string_12CA9E_12CA8E, 10);
									FileWrite_62ED0_633E0(file, (uint8_t*)string_12CA80_12CA70, 10);
									FileWrite_62ED0_633E0(file, (uint8_t*)string_12CAB2_12CAA2, 10);
									FileWrite_62ED0_633E0(file, (uint8_t*)string_12CA8A_12CA7A, 10);
									FileWrite_62ED0_633E0(file, (uint8_t*)string_12CAC6_12CAB6, 10);
									FileWrite_62ED0_633E0(file, (uint8_t*)string_12CAD0_12CAC0, 10);
									FileWrite_62ED0_633E0(file, (uint8_t*)string_12CAA8_12CA98, 10);
									FileWrite_62ED0_633E0(file, (uint8_t*)string_12CA94_12CA84, 10);
									DataFileIO::Close(file);
								}
								settingPage_12CBC9_12CBB9 = 7;
							}
							else
							{
								settingPage_12CBC9_12CBB9 = 0;
							}
						}
						break;
					default:
						break;
					}
				}
			}
		}
		else
		{
			if (++byte_12CBD3_12CBC3 == 7)
				byte_12CBD3_12CBC3 = 0;
			if (byte_12CBD3_12CBC3 == 3)
				byte_12CBD3_12CBC3 = 4;
			if (byte_12CBD3_12CBC3 == 5)
				byte_12CBD3_12CBC3 = 6;
		}
	}
	if ((typeResolution_12F02E_12F01E & 1) != 0)
	{
		CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
	}
	else
	{
		CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
	}
	sub_4B560_4B8A0();
	if ((typeResolution_12F02E_12F01E & 1) != 0)
		Blit_5CDA0_5D2B0();
	else
		Blit_599B0_59EC0(480);
#ifdef autostart
    bool1 = true;//end loop
    bool2 = true;//no videos
#endif
	if (bool1)
	{
		sub_51DF0(word_4A8BE[4 * (unsigned __int8)byte_12CBD3_12CBC3 + 3]);
		sub_4BC90_4BFD0();
		if (byte_12CBD5_12CBC5 >= 0)
		{
			sub_357C0_35B80();
			byte_12CBD5_12CBC5 |= 0x80u;
		}
		if ((byte_12CBD5_12CBC5 & 2) != 0 && (byte_12CBD5_12CBC5 & 4) != 0 && (byte_12CAE4_12CAD4 & 0x40) == 0 || bool2)
			mainMenuSelector_12CBCE_12CBBE = 2;
		else
			mainMenuSelector_12CBCE_12CBBE = 7;
		byte_12CAE4_12CAD4 &= 0xBEu;
	}
}

//----- (0004B430) --------------------------------------------------------
int sub_4B430()
{
  int result; // eax

  result = 0;
  if ( (pressedKeys_12EEF0_12EEE0[42] || pressedKeys_12EEF0_12EEE0[54]) && lastPressedKey_12EF70_12EF60 == 16 ) //byte_12EF1A shift + 8/*  byte_12EF26 6/^/Right
  {
      bool_96880 = true;
      str_AE400_AE3F0->str_13323[str_AE400_AE3F0->var_u16_8].var_u8_13327 = 1;
    return 1;
  }
  return result;
}
// 96880: using guessed type int dword_96880;
// AE400: using guessed type int dword_AE400_AE3F0();
// 12EF1A: using guessed type char byte_12EF1A;
// 12EF26: using guessed type char byte_12EF26;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;

//----- (0004B480) --------------------------------------------------------
int sub_4B480(int (*a1)(void), int a2)//21C480_
{
  int v2; // ebx
  unsigned int v3; // esi
  int result; // eax

  v2 = 0;
  v3 = dword_AC5D4_AC5C4 + 120 * a2;
  do
  {
    result = sub_4B430();
    if ( result )
      v2 = 1;
    if ( mouseLeftButton_12EFDE_12EFCE || mouseRightButton_12EFDC_12EFCC || word_12EFDA_12EFCA || lastPressedKey_12EF70_12EF60 )
    {
      lastPressedKey_12EF70_12EF60 = 0;
      result = 0;
      word_12EFDA_12EFCA = 0;
      mouseRightButton_12EFDC_12EFCC = 0;
      mouseLeftButton_12EFDE_12EFCE = 0;
      v2 = 1;
    }
    if ( v3 < dword_AC5D4_AC5C4 )
      v2 = 1;
    if ( !v2 )
    {
      if ( a1 )
        result = a1();
    }
  }
  while ( !v2 );
  return result;
}
// AC5D4: using guessed type int dword_AC5D4_AC5C4;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDA: using guessed type __int16 word_12EFDA_12EFCA;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;

//----- (0004B520) --------------------------------------------------------
int sub_4B520()
{
  char **v0; // eax
  int v1; // esi
  char i; // dl

  v0 = sub_4B6A0();
  v1 = 1;
  for ( i = 0; **v0 != '!' && i != byte_12CBCB; i++ )
    v0 += 2;
  if ( **v0 == '!')
    return 0;
  return v1;
}
// 12CBCB: using guessed type char byte_12CBCB;

//----- (0004B560) --------------------------------------------------------
void sub_4B560_4B8A0()//21C560_
{
  char** v0; // eax

  sub_513E0();
  sub_51360(56, 64, 90, 78);
  v0 = sub_4B6A0();
  if ( v0 )
    sub_4B6F0(v0);
  else
    sub_4B8D0_4BC10(0);
  if ( settingPage_12CBC9_12CBB9 == 7 )
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(554, 224, &begGcSprTab_12CAF8_2EAAF8_2EAAE8[11]);
    else
      DrawBitmap_60D18_61228(554, 224, &begGcSprTab_12CAF8_2EAAF8_2EAAE8[11]);
  }
  sub_51400();
  if ((typeResolution_12F02E_12F01E & 1) != 0)
      DrawBitmap_60CE0_611F0(
          2 * word_4A8BE[4 * (unsigned __int8)byte_12CBD3_12CBC3 + 0],
          2 * word_4A8BE[4 * (unsigned __int8)byte_12CBD3_12CBC3 + 1],
          &begGcSprTab_12CAF8_2EAAF8_2EAAE8[word_4A8BE[4 * (unsigned __int8)byte_12CBD3_12CBC3 + 2]]);
  else
    DrawBitmap_60D18_61228(
             2 * word_4A8BE[4 * (unsigned __int8)byte_12CBD3_12CBC3 + 0],
             2 * word_4A8BE[4 * (unsigned __int8)byte_12CBD3_12CBC3 + 1],
        &begGcSprTab_12CAF8_2EAAF8_2EAAE8[word_4A8BE[4 * (unsigned __int8)byte_12CBD3_12CBC3 + 2]]);
}
// 4A8BE: using guessed type __int16 word_4A8BE[];
// 4A8C0: using guessed type __int16 word_4A8C0[];
// 4A8C2: using guessed type __int16 word_4A8C2[];
// 12CAF8: using guessed type int begGcSprTab_12CAF8_2EAAF8_2EAAE8;
// 12CBC9: using guessed type char settingPage_12CBC9_12CBB9;
// 12CBD3: using guessed type char byte_12CBD3_12CBC3;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

char** sub_4B6A0()//21C6A0_
{
  char **result = 0;

  switch ( settingPage_12CBC9_12CBB9 )
  {
    case 0:
      result = off_4A66C;
      break;
    case 1:
      result = off_4A6CC;
      break;
    case 2:
      result = off_4A734;
      break;
    case 3:
      result = off_4A74C;
      break;
    case 4:
      result = off_4A77C;
      break;
    case 5:
      result = off_4A79C;
      break;
    case 6:
      result = off_4A7B4;
      break;
    case 7:
      result = 0;
      break;
    default:
      return result;
  }
  return result;
}

//----- (0004B6F0) --------------------------------------------------------
void sub_4B6F0(char** texts)//21C6F0_
{
  char** v1; // esi
  int v2; // ebp
  char v3; // bl
  char v4; // bh
  int v5; // edi
  int v6; // ebp
  char v7; // al
  __int16 v8; // [esp-8h] [ebp-24h]
  char* text; // [esp-4h] [ebp-20h]
  char v10; // [esp+4h] [ebp-18h]
  char v11; // [esp+8h] [ebp-14h]

  v1 = texts;
  if (texts)
  {
    v2 = str_96884.next->dim.y;
    str_96884.var8_4 &= ~2u;
    v10 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x26u, 0x22u, 0x19u);
    v3 = 0;
    v4 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x1Eu, 0x18u, 0x11u);
    v5 = 0;
    v6 = v2 - 2;
    v7 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0x1Eu, 0x17u);
    v11 = v7;
    if ( settingPage_12CBC9_12CBB9 == 6 )
    {
        str_96884.var8_6 = v10;
      if ( !byte_12CBCB )
          str_96884.var8_6 = v7;
      if ( !byte_12CBCA_12CBBA )
          str_96884.var8_6 = v4;
      DrawText_51560((uint8*)&str_96884, 0, 0, dword_AE238_AE228[73]);
      str_96884.var8_6 = v10;
      if ( byte_12CBCB == 1 )
          str_96884.var8_6 = v11;
      if ( byte_12CBCA_12CBBA == 1 )
          str_96884.var8_6 = v4;
      DrawText_51560((uint8*)&str_96884, 0, v6, dword_AE238_AE228[74]);
    }
    else
    {
      while ( **v1 != '!' )
      {
          str_96884.var8_6 = v10;
        if ( v3 == byte_12CBCB )
            str_96884.var8_6 = v11;
        if ( v3 == byte_12CBCA_12CBBA )
            str_96884.var8_6 = v4;
        text = *v1;
        v8 = v5;
        v1 += 2;
        ++v3;
        v5 += v6;
        DrawText_51560((uint8*)&str_96884, 0, v8, text);
      }
    }
    if ( settingPage_12CBC9_12CBB9 == 6 )
      sub_4B8D0_4BC10(16);
    if ( (unsigned __int8)settingPage_12CBC9_12CBB9 < 7u )
    {
      sub_513E0();
      sub_51360(66, 43, 84, 14);
      str_96884.var8_6 = v4;
      DrawText_51560(
          (uint8_t*)&str_96884,
        1,
        1,
        dword_AE238_AE228[(unsigned __int16)word_968B4[(unsigned __int8)settingPage_12CBC9_12CBB9]]);
      sub_51400();
    }
  }
}
// 96884: using guessed type int dword_96884;
// 96888: using guessed type char byte_96888;
// 9688A: using guessed type char byte_9688A;
// 968B4: using guessed type __int16 word_968B4[8];
// AE238: using guessed type int dword_AE238_AE228[17];
// AE35C: using guessed type int dword_AE35C;
// AE360: using guessed type int dword_AE360;
// 12CB9C: using guessed type int dword_12CB9C;
// 12CBC9: using guessed type char settingPage_12CBC9_12CBB9;
// 12CBCA: using guessed type char byte_12CBCA_12CBBA;
// 12CBCB: using guessed type char byte_12CBCB;

//----- (0004B8D0) --------------------------------------------------------
void sub_4B8D0_4BC10(__int16 a1)//21C8D0_
{
  __int16 v1; // si
  __int16 v2; // si
  __int16 v3; // di
  __int16 v4; // ax
  __int16 v5; // bx
  __int16 v6; // bx
  __int16 v7; // di
  __int16 v8; // ax
  __int16 v9; // bx
  __int16 v10; // bx
  __int16 v11; // [esp-8h] [ebp-58h]
  char v12[40]; // [esp+0h] [ebp-50h] BYREF
  int v13[6]; // [esp+28h] [ebp-28h] BYREF
  //int v14[6]; // [esp+2Ch] [ebp-24h]

  //fix
  //v14 = 0;
  //fix

  v1 = str_96884.next->dim.y;
  sub_513A0((uint32*)&v13);
  str_96884.var8_6 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x1Eu, 0x18u, 0x11u);
  sprintf(v12, "%s :", dword_AE238_AE228[17]);
  DrawText_51560((uint8*)&str_96884, 0, a1, v12);
  v2 = v1 - 2;
  sprintf(v12, "%s", string_12C9C0_12C9B0);
  v3 = v13[1] - v13[0];
  v4 = sub_51420((uint32*)&str_96884, v12);
  DrawText_51560((uint8*)&str_96884, (__int16)(v3 - v4), v2 + a1, v12);
  sprintf(v12, "%s :", dword_AE238_AE228[18]);
  v5 = v2 + v2 + a1;
  DrawText_51560((uint8*)&str_96884, 0, v5, v12);
  v6 = v2 + v5;
  sprintf(v12, "%s", string_12C9E0_12C9D0);
  v7 = v13[1] - v13[0];
  v8 = sub_51420((uint32*)&str_96884, v12);
  DrawText_51560((uint8*)&str_96884, (__int16)(v7 - v8), v6, v12);
  v9 = v2 + v6;
  if ( strncmp((char*)&string_12C9A0_12C990, "NONE", 4) )
  {
    sprintf(v12, "%s : %s\n", dword_AE238_AE228[23], string_12CA80_12CA70);
    DrawText_51560((uint8*)&str_96884, 0, v9, v12);
    sprintf(v12, "%s : %s\n", dword_AE238_AE228[24], string_12CA8A_12CA7A);
    v10 = v2 + v9;
    DrawText_51560((uint8*)&str_96884, 0, v10, v12);
    sprintf(v12, "%s : %s\n", dword_AE238_AE228[25], string_12CAD0_12CAC0);
    v11 = v2 + v10;
    v9 = v2 + v2 + v10;
    DrawText_51560((uint8*)&str_96884, 0, v11, v12);
  }
  if ( strncmp((char*)&string_12CA00_12C9F0, "NONE", 4) )
  {
    sprintf(v12, "%s : %s\n", dword_AE238_AE228[26], string_12CA94_12CA84);
    DrawText_51560((uint8*)&str_96884, 0, v9, v12);
  }
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 65E6F: using guessed type _DWORD strncmp(_DWORD, _DWORD, _DWORD);
// 96884: using guessed type int dword_96884;
// 9688A: using guessed type char byte_9688A;
// AE27C: using guessed type int dword_AE27C;
// AE280: using guessed type int dword_AE280;
// AE294: using guessed type int dword_AE294;
// AE298: using guessed type int dword_AE298;
// AE29C: using guessed type int dword_AE29C;
// AE2A0: using guessed type int dword_AE2A0;
// 12C9C0: using guessed type __int16 word_12C9C0_12C9B0;
// 12C9E0: using guessed type __int16 word_12C9E0_12C9D0;
// 12CA80: using guessed type __int16 word_12CA80_12CA70[5];
// 12CA8A: using guessed type __int16 word_12CA8A_12CA7A[5];
// 12CA94: using guessed type __int16 word_12CA94_12CA84[5];
// 12CAD0: using guessed type __int16 word_12CAD0_12CAC0[6];
// 12CB9C: using guessed type int dword_12CB9C;

//----- (0004BB20) --------------------------------------------------------
void sub_4BB20_4BE60()
{
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_40440_40780(&pathStrArray_21AB80_21AEC0[PSdatascreenssfont0dat]);
  sub_3EEA0_3F1E0((char*)"data/screens/gconfig.dat", begBscreen_AE3FC_AE3EC_26C3FC_26C3EC);
  sub_3EEA0_3F1E0((char*)"data\\screens\\gconfig.pal", (uint8_t*)begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_65D70_66280(begGcSprTab_12CAF8_2EAAF8_2EAAE8, endGcSprTab_12CAFC_2EAAFC_2EAAEC, begGcSprDat_12CB00_2EAB00_2EAAF0);
  else
    sub_65DC0_662D0(begGcSprTab_12CAF8_2EAAF8_2EAAE8, endGcSprTab_12CAFC_2EAAFC_2EAAEC, begGcSprDat_12CB00_2EAB00_2EAAF0);
  sub_51480_517C0(&str_96884, &sFont0Tab_12CB28_2EAB28_2EAB18, begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
  str_96884.var8_4 &= ~2u;
  str_96884.var8_5 = 0;
  if ( !byte_90B23 )
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  FadeInOut_61CC0_621D0(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0);
  byte_12CBD5_12CBC5 |= 1u;
  byte_12CAE4_12CAD4 &= 0xBEu;
}
// 90B23: using guessed type char byte_90B23;
// 96884: using guessed type int dword_96884;
// 96888: using guessed type char byte_96888;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CAE4: using guessed type char byte_12CAE4_12CAD4;
// 12CAEC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CAF8: using guessed type int begGcSprTab_12CAF8_2EAAF8_2EAAE8;
// 12CAFC: using guessed type int text_12CAFC_2EAAFC_2EAAEC;
// 12CB00: using guessed type int begGcSprDat_12CB00_2EAB00_2EAAF0;
// 12CB28: using guessed type _DWORD begSFont0Tab_12CB28_2EAB28_2EAB18;
// 12CB9C: using guessed type int dword_12CB9C;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004BC90) --------------------------------------------------------
void sub_4BC90_4BFD0()
{
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sub_61610_61B20(&pathStrArray_21AB80_21AEC0[PSdatascreenssfont0dat]);
  byte_12CBD5_12CBC5 &= ~1u;
}
// 4BCCA: variable 'v0' is possibly undefined
// 90B23: using guessed type char byte_90B23;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004BD60) --------------------------------------------------------
void sub_4BD60()//21CD60_
{
  int v0; // esi
  int v1; // edi
  int v2; // ebp
  int v3; // ebx
  int v4; // ebx
  //int v5; // edx
  //int v6; // eax
  __int16 v7; // cx
  int v8; // ebx
  int v9; // ebx
  int v10; // ebx
  __int16 v11; // cx
  int v12; // ebx
  int v13; // ebx
  int v14; // ebx
  int v15; // eax
  char v16; // dl

  v0 = 0;
  v1 = 0;
  v2 = 0;
  if ( (byte_12CBD5_12CBC5 & 1) == 0 )
    sub_4C7E0();
  sub_4C6F0_4CA30();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begScreenBackup2_12CBA8_2EABA8_2EAB98, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begScreenBackup2_12CBA8_2EABA8_2EAB98, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  v3 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = (uint8_t*)begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v3;
  sub_4CB70();
  /*v4 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC ^ begWscreen_2ECFF4_2ECFE4;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = (uint8_t*)begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 ^= v4;*/
  //fix
  v4 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v4;
  //fix

  if (pressedKeys_12EEF0_12EEE0[15])//byte_12EEFF TAB
  {
      pressedKeys_12EEF0_12EEE0[15] = 0;//byte_12EEFF TAB
    if (pressedKeys_12EEF0_12EEE0[42] || pressedKeys_12EEF0_12EEE0[54]) //byte_12EF1A shift + 8/*  byte_12EF26 6/^/Right
      sub_4C640();
    else
      sub_4C670();
  }
  if (mouse_12CADC.x >> 1 != word_12CBDA || mouse_12CADC.y >> 1 != word_12CBD8 )
  {
    if (mouse_12CADC.x >> 1 < 320 )
    {
      if (mouse_12CADC.y >> 1 < 200 )
      {
        word_12CBDA = mouse_12CADC.x >> 1;
        word_12CBD8 = mouse_12CADC.y >> 1;
        byte_12CBC6_12CBB6 = *(_BYTE *)&begMmMaskDat_12CBA0_2EABA0_2EAB90[(mouse_12CADC.x >> 1) + (mouse_12CADC.y >> 1) * scrWidth_12EFF0_12EFE0];
        if ( !sub_4C6A0() )
          byte_12CBC6_12CBB6 = 0;
      }
    }
  }
  if (pressedKeys_12EEF0_12EEE0[28])//byte_12EF0C Enter
  {
      pressedKeys_12EEF0_12EEE0[28] = 0;//byte_12EF0C Enter
    byte_12CAE4_12CAD4 |= 1u;
  }
  if ( (byte_12CAE4_12CAD4 & 0x40) != 0 || lastPressedKey_12EF70_12EF60 == 1 )
  {
    lastPressedKey_12EF70_12EF60 = 0;
    byte_12CAE4_12CAD4 &= ~0x40u;
    if ( byte_12CBCD_12CBBD )
      byte_12CBCD_12CBBD = 0;
    byte_12CBC6_12CBB6 = *(_BYTE *)(begMmMaskDat_12CBA0_2EABA0_2EAB90 + word_12CBD8 * scrWidth_12EFF0_12EFE0 + word_12CBDA);
    if ( !sub_4C6A0() )
      byte_12CBC6_12CBB6 = 0;
  }
#ifdef autostart
  byte_12CAE4_12CAD4 = 5;//start game
  byte_12CBC6_12CBB6 = 1;
#endif
  if ( (byte_12CAE4_12CAD4 & 1) != 0 )
  {
    byte_12CAE4_12CAD4 &= ~1u;
    if ( byte_12CBC6_12CBB6 != 11 || !byte_9687C )
    {
      if (dword_4A12C[byte_12CBC6_12CBB6].fnc)
      {
          dword_4A12C[byte_12CBC6_12CBB6].fnc();
        //run setting
        // plag game sub_4FF30
        if ( (byte_12CBD5_12CBC5 & 8) != 0 )
        {
          v0 = 1;
          byte_12CBD5_12CBC5 &= ~8u;
        }
        goto LABEL_79;
      }
      v7 = dword_4A12C[byte_12CBC6_12CBB6].var;
      if ( !v7 )
        goto LABEL_79;
      v8 = (int)begWscreen_2ECFF4_2ECFE4;
      if ( !byte_12CBCD_12CBBD )
      {
        if (dword_4A12C[byte_12CBC6_12CBB6].var == 3 )
        {
          v0 = 1;
          mainMenuSelector_12CBCE_12CBBE = 1;
        }
        goto LABEL_70;
      }
      if ( (unsigned __int8)byte_12CBCD_12CBBD <= 1u )
      {
        switch ( v7 )
        {
          case 1:
            if ( sub_4F8D0_sub_4FC10(0, (void (*)())sub_4CC00) )
              sub_51AF0(1);
            break;
          case 2:
            if ( sub_4F8D0_sub_4FC10(0, (void (*)())sub_4CC00) )
              sub_51AF0(2);
            break;
          case 3:
            if ( sub_4F8D0_sub_4FC10(0, (void (*)())sub_4CC00) )
              sub_51AF0(3);
            break;
          case 4:
            if ( sub_4F8D0_sub_4FC10(0, (void (*)())sub_4CC00) )
              sub_51AF0(4);
            break;
          case 5:
            if ( sub_4F8D0_sub_4FC10(0, (void (*)())sub_4CC00) )
              sub_51AF0(5);
            break;
          case 6:
            if ( sub_4F8D0_sub_4FC10(0, (void (*)())sub_4CC00) )
              sub_51AF0(6);
            break;
          default:
            break;
        }
        v1 = 1;
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        {
LABEL_67:
          CopyScreen_62FA8_634B8(begScreenBackup2_12CBA8_2EABA8_2EAB98, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
LABEL_69:
          v9 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
          begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = (uint8_t*)begWscreen_2ECFF4_2ECFE4;
          begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v9;
          sub_4CB70();
          /*
          v10 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC ^ begWscreen_2ECFF4_2ECFE4;
          begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = (uint8_t*)begWscreen_2ECFF4_2ECFE4;
          v8 = begWscreen_2ECFF4_2ECFE4 ^ v10;
          */
          //fix
          v10 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
          begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = (uint8_t*)begWscreen_2ECFF4_2ECFE4;
          v8 = v10;
          //fix
          goto LABEL_70;
        }
      }
      else
      {
        if ( byte_12CBCD_12CBBD != 2 )
        {
LABEL_70:
          if ( v1 )
          {
            begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v8;
            byte_12CBCD_12CBBD = 0;
          }
          else
          {
            begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v8;
            if ( !byte_12CBCD_12CBBD )
            {
              v11 = dword_4A12C[byte_12CBC6_12CBB6].var;
              if ( v11 == 1 || v11 == 2 )
              {
                byte_12CBCD_12CBBD = dword_4A12C[byte_12CBC6_12CBB6].var;
                if ( (typeResolution_12F02E_12F01E & 1) != 0 )
                  CopyScreen_62FA8_634B8(begScreenBackup2_12CBA8_2EABA8_2EAB98, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
                else
                  CopyScreen_62FC4_634D4(begScreenBackup2_12CBA8_2EABA8_2EAB98, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
                v12 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
                begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = (uint8_t*)begWscreen_2ECFF4_2ECFE4;
                begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v12;
                sub_4CB70();
                v13 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
                begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = (uint8_t*)begWscreen_2ECFF4_2ECFE4;
                begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v13;
              }
            }
          }
          goto LABEL_79;
        }
        switch ( v7 )
        {
          case 1:
            if ( sub_4CCA0_4CFE0(0) )
              sub_51C90(1);
            break;
          case 2:
            if ( sub_4CCA0_4CFE0(0) )
              sub_51C90(2);
            break;
          case 3:
            if ( sub_4CCA0_4CFE0(0) )
              sub_51C90(3);
            break;
          case 4:
            if ( sub_4CCA0_4CFE0(0) )
              sub_51C90(4);
            break;
          case 5:
            if ( sub_4CCA0_4CFE0(0) )
              sub_51C90(5);
            break;
          case 6:
            if ( sub_4CCA0_4CFE0(0) )
              sub_51C90(6);
            break;
          default:
            break;
        }
        v1 = 1;
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          goto LABEL_67;
      }
      CopyScreen_62FC4_634D4(begScreenBackup2_12CBA8_2EABA8_2EAB98, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
      goto LABEL_69;
    }
  }
LABEL_79:
  if ( byte_12CBC6_12CBB6 == 11 && byte_9687C || !byte_12CBC6_12CBB6 )
    sub_51E84((_BYTE *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (_BYTE *)begWscreen_2ECFF4_2ECFE4, (_BYTE *)begMmMaskDat_12CBA0_2EABA0_2EAB90, (int)begBrightTable_12CBAC_2EABAC_2EAB9C, 255);
  else
    sub_51E84((_BYTE *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, (_BYTE *)begWscreen_2ECFF4_2ECFE4, (_BYTE *)begMmMaskDat_12CBA0_2EABA0_2EAB90, (int)begBrightTable_12CBAC_2EABAC_2EAB9C, byte_12CBC6_12CBB6);
  if ( (byte_90B23 & 0x23) != 0 )
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(mouse_9AD90.x, mouse_9AD90.y, &begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
    else
      DrawBitmap_60D18_61228(mouse_9AD90.x, mouse_9AD90.y, &begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  }
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( sub_4C580() )
  {
    v14 = (int)begWscreen_2ECFF4_2ECFE4;
    if ( dword_12CBB4 + 4800 <= (unsigned int)dword_AC5D4_AC5C4 )
    {
      dword_12CBB4 = dword_AC5D4_AC5C4;//run video after time
      if ( byte_12CBD4_12CBC4 )
      {
        if ( (unsigned __int8)byte_12CBD4_12CBC4 <= 1u )
        {
          mainMenuSelector_12CBCE_12CBBE = 8;
          byte_12CBD6_12CBC6 |= 2u;
          sub_20E60_20E60();
        }
        else if ( byte_12CBD4_12CBC4 == 2 )
        {
          byte_12CBD6_12CBC6 |= 4u;
          v2 = 1;
          dword_12CBB8 = str_AE408_AE3F8->var_u16_17;
          bool_96880 = true;
          qmemcpy(string_12CA60, (const void *)(dword_AE400_AE3F0() + 15318), 0x18u);
          v15 = dword_AE408_AE3F8();
          *(_WORD *)(dword_AE408_AE3F8() + 13) = 0;
          *(_BYTE *)(v15 + 161) = 3;
          v16 = *(_BYTE *)v15;
          *(_DWORD *)(v15 + 162) = 200;
          *(_BYTE *)v15 = v16 | 0x24;
        }
      }
      else
      {
        mainMenuSelector_12CBCE_12CBBE = 0;
        byte_12CBD6_12CBC6 |= 1u;
        sub_20E60_20E60();
      }
      v14 = (int)begWscreen_2ECFF4_2ECFE4;
      if ( ++byte_12CBD4_12CBC4 == 3 )
        byte_12CBD4_12CBC4 = 0;
      v0 = 1;
    }
  }
  else
  {
    v14 = (int)begWscreen_2ECFF4_2ECFE4;
    dword_12CBB4 = dword_AC5D4_AC5C4;
  }
  begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v14;
  if ( v0 )
  {
    sub_4CAC0_4CE00();
    if ( v2 )
      mainMenuSelector_12CBCE_12CBBE = 2;
  }
}
// 4A12C: using guessed type int dword_4A12C;
// 4A130: using guessed type __int16 word_4A130[];
// 4CC00: using guessed type int sub_4CC00();
// 90B23: using guessed type char byte_90B23;
// 9687C: using guessed type char byte_9687C;
// 96880: using guessed type int dword_96880;
// 9AD90: using guessed type int dmouse_9AD90.x;
// AC5D4: using guessed type int dword_AC5D4_AC5C4;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CADC: using guessed type int dword_12CADC;
// 12CAE4: using guessed type char byte_12CAE4_12CAD4;
// 12CAEC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CBA0: using guessed type int begMmMaskDat_12CBA0_2EABA0_2EAB90;
// 12CBA8: using guessed type int begScreenBackup2_12CBA8_2EABA8_2EAB98;
// 12CBAC: using guessed type int begBrightTable_12CBAC_2EABAC_2EAB9C;
// 12CBB4: using guessed type int dword_12CBB4;
// 12CBB8: using guessed type int dword_12CBB8;
// 12CBC6: using guessed type char byte_12CBC6_12CBB6;
// 12CBCD: using guessed type char byte_12CBCD_12CBBD;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD4: using guessed type char byte_12CBD4_12CBC4;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12CBD6: using guessed type char byte_12CBD6_12CBC6;
// 12CBD8: using guessed type __int16 word_12CBD8;
// 12CBDA: using guessed type __int16 word_12CBDA;
// 12EEFF: using guessed type char byte_12EEFF;
// 12EF0C: using guessed type char byte_12EF0C;
// 12EF1A: using guessed type char byte_12EF1A;
// 12EF26: using guessed type char byte_12EF26;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004C580) --------------------------------------------------------
int sub_4C580()
{
  int result; // eax

  result = 1;
  if ( mouse_9AD90.x != dword_968C4
    || mouse_9AD90.y != dword_968C8
    || lastPressedKey_12EF70_12EF60 != byte_12CBDC
    || mouseLeftButton2_12EFE4_12EFD4 != dword_968CC
    || mouseRightButton2_12EFE2_12EFD2 != dword_968D0
    || word_12EFE0_12EFD0 != dword_968D4
    || lastPressedKey_12EF70_12EF60 != byte_12CBDC )
  {
    dword_968C4 = mouse_9AD90.x;
    dword_968C8 = mouse_9AD90.y;
    dword_968CC = mouseLeftButton2_12EFE4_12EFD4;
    dword_968D0 = mouseRightButton2_12EFE2_12EFD2;
    dword_968D4 = word_12EFE0_12EFD0;
    byte_12CBDC = lastPressedKey_12EF70_12EF60;
    return 0;
  }
  return result;
}
// 968C4: using guessed type int dword_968C4;
// 968C8: using guessed type int dword_968C8;
// 968CC: using guessed type int dword_968CC;
// 968D0: using guessed type int dword_968D0;
// 968D4: using guessed type int dword_968D4;
// 9AD90: using guessed type __int16 mouse_9AD90.x;
// 9AD92: using guessed type __int16 mouse_9AD90.y;
// 12CBDC: using guessed type char byte_12CBDC;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFE0: using guessed type __int16 word_12EFE0_12EFD0;
// 12EFE2: using guessed type __int16 mouseRightButton2_12EFE2_12EFD2;
// 12EFE4: using guessed type __int16 mouseLeftButton2_12EFE4_12EFD4;

//----- (0004C640) --------------------------------------------------------
bool sub_4C640()
{
  bool result; // eax

  do
  {
    if ( !--byte_12CBC6_12CBB6 )
      byte_12CBC6_12CBB6 = 11;
    result = sub_4C6A0();
  }
  while ( !result );
  return result;
}
// 12CBC6: using guessed type char byte_12CBC6_12CBB6;

//----- (0004C670) --------------------------------------------------------
bool sub_4C670()
{
  bool result; // eax

  do
  {
    if ( (unsigned __int8)++byte_12CBC6_12CBB6 > 0xBu )
      byte_12CBC6_12CBB6 = 1;
    result = sub_4C6A0();
  }
  while ( !result );
  return result;
}
// 12CBC6: using guessed type char byte_12CBC6_12CBB6;

//----- (0004C6A0) --------------------------------------------------------
bool sub_4C6A0()
{
  if ( (unsigned __int8)byte_12CBC6_12CBB6 <= 7u )
  {
    if ( byte_12CBC6_12CBB6 == 3 )
    {
      if ( byte_93958 != 1 )
        return 0;
    }
    else if ( byte_12CBC6_12CBB6 == 7 && !byte_12CBCD_12CBBD )
    {
      return 0;
    }
  }
  else
  {
    if ( byte_12CBC6_12CBB6 == 11 )
      return !byte_9687C;
    if ( !byte_12CBCD_12CBBD )
      return 0;
  }
  return 1;
}
// 93958: using guessed type char byte_93958;
// 9687C: using guessed type char byte_9687C;
// 12CBC6: using guessed type char byte_12CBC6_12CBB6;
// 12CBCD: using guessed type char byte_12CBCD_12CBBD;

//SYNCHRONIZED WITH REMC1
void sub_4C6F0_4CA30()//21D6F0_
{
  int result; // eax
  __int16 v1; // dx
  __int16 v2; // di

  result = dword_12CBB0_12CBA0 & 1;
  if ( result == 1 && mainMenuSelector_12CBCE_12CBBE == 2 )
  {
    //result = sub_1002D(dword_12CB7A_12CB6A, begScreenBackup2_12CBA8_2EABA8_2EAB98);
    v1 = word_12CB7E_12CB6E + 1;
    dword_12CB7A_12CB6A = sub_1002D(dword_12CB7A_12CB6A, begScreenBackup2_12CBA8_2EABA8_2EAB98);
    word_12CB7E_12CB6E = v1;
    if ( v1 == 31 )
    {
      //result = dword_12CB76_12CB66;
      word_12CB7E_12CB6E = 1;
      dword_12CB7A_12CB6A = dword_12CB76_12CB66;
    }
    else if ( v1 == 1 && !dword_12CB76_12CB66 )
    {
      //dword_12CB76_12CB66 = result;
      dword_12CB76_12CB66 = dword_12CB7A_12CB6A; //fixed
    }
    if ( !byte_9687C )
    {
      //result = sub_1002D(dword_12CB88_12CB78, begScreenBackup2_12CBA8_2EABA8_2EAB98);
      v2 = word_12CB8C_12CB7C + 1;
      dword_12CB88_12CB78 = sub_1002D(dword_12CB88_12CB78, begScreenBackup2_12CBA8_2EABA8_2EAB98);
      word_12CB8C_12CB7C = v2;
      if ( v2 == 4 )
      {
        //result = dword_12CB84_12CB74;
        word_12CB8C_12CB7C = 1;
        dword_12CB88_12CB78 = dword_12CB84_12CB74;
      }
      else if ( v2 == 1 && !dword_12CB84_12CB74 )
      {
        //dword_12CB84_12CB74 = result;
        dword_12CB84_12CB74 = dword_12CB88_12CB78;//fixed
      }
    }
  }
}

//----- (0004C7E0) --------------------------------------------------------
void sub_4C7E0()
{
  //int v0; // ecx
  //const void *v1; // edi
  //void *v2; // ebp
  void *v3; // edi

  sub_10010(320, 0);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_5D070_5D580(0xDu);
  sub_5CEF0_5D400(0);

  sub_40440_40780(&pathStrArray_21AB80_21AEC0[PSdatascreensmmsprdat]);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_65D70_66280(begMmSprTab_12CB04_2EAB04_2EAAF4, endMmSprTab_12CB08_2EAB08_2EAAF8, begMmSprDat_12CB0C_2EAB0C_2EAAFC);
  else
    sub_65DC0_662D0(begMmSprTab_12CB04_2EAB04_2EAAF4, endMmSprTab_12CB08_2EAB08_2EAAF8, begMmSprDat_12CB0C_2EAB0C_2EAAFC);
  sub_51480_517C0(&str_9688C, &sFont1Tab_12CB34_2EAB34_2EAB24, begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
  str_9688C.var8_4 &= ~2u;
  sub_3EEA0_3F1E0((char*)"data\\screens\\mainmenu.dat", (uint8_t*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begScreenBackup2_12CBA8_2EABA8_2EAB98, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begScreenBackup2_12CBA8_2EABA8_2EAB98, 0x1E0u);
  sub_3EEA0_3F1E0((char*)"data\\screens\\mainmenu.pal", (uint8_t*)begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
  sub_504A0();
  sub_51A10();
  uint8_t* bufferTemp = begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = bufferTemp;
  sub_4CB70();
  bufferTemp = begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = bufferTemp;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  FadeInOut_61CC0_621D0(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0);
  dword_12CB76_12CB66 = 0;
  dword_12CB84_12CB74 = 0;
  word_12CB8C_12CB7C = 0;
  byte_12CBD5_12CBC5 |= 1u;
  byte_12CBC6_12CBB6 = 0;
  dword_12CB7A_12CB6A = begGlobeDat_12CB72_2EAB72_2EAB62;
  word_12CB7E_12CB6E = 0;
  dword_12CB88_12CB78 = begTimerDat_12CB80_2EAB80_2EAB70;
  byte_967E4 = 1;
  byte_12CAE4_12CAD4 &= 0xBEu;
  dword_12CBB4 = dword_AC5D4_AC5C4;
  FlvInitSet_356E0_35AA0();
  sub_5D290_5D7A0(4);
  if ( (byte_12CBD6_12CBC6 & 4) != 0 )
  {
    v3 = (void *)(dword_AE400_AE3F0() + 15318);
    str_AE408_AE3F8->var_u16_17 = dword_12CBB8;
    qmemcpy(v3, string_12CA60, 0x18u);
    byte_12CBD6_12CBC6 &= ~4u;
    str_AE408_AE3F8->var_u8_0 &= 0xDBu;
  }
}
// 90B23: using guessed type char byte_90B23;
// 967E4: using guessed type char byte_967E4;
// 9688C: using guessed type int dword_9688C;
// 96890: using guessed type char byte_96890;
// AC5D4: using guessed type int dword_AC5D4_AC5C4;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CAE4: using guessed type char byte_12CAE4_12CAD4;
// 12CAEC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CB04: using guessed type int begMmSprTab_12CB04_2EAB04_2EAAF4;
// 12CB08: using guessed type int text_12CB08_2EAB08_2EAAF8;
// 12CB0C: using guessed type int begMmSprDat_12CB0C_2EAB0C_2EAAFC;
// 12CB34: using guessed type _DWORD begSFont1Tab_12CB34_2EAB34_2EAB24;
// 12CB72: using guessed type int begGlobeDat_12CB72_2EAB72_2EAB62;
// 12CB76: using guessed type int dword_12CB76_12CB66;
// 12CB7A: using guessed type int dword_12CB7A_12CB6A;
// 12CB7E: using guessed type __int16 word_12CB7E_12CB6E;
// 12CB80: using guessed type int begTimerDat_12CB80_2EAB80_2EAB70;
// 12CB84: using guessed type int dword_12CB84_12CB74;
// 12CB88: using guessed type int dword_12CB88_12CB78;
// 12CB8C: using guessed type __int16 word_12CB8C_12CB7C;
// 12CB9C: using guessed type int dword_12CB9C;
// 12CBA8: using guessed type int begScreenBackup2_12CBA8_2EABA8_2EAB98;
// 12CBB4: using guessed type int dword_12CBB4;
// 12CBB8: using guessed type int dword_12CBB8;
// 12CBC6: using guessed type char byte_12CBC6_12CBB6;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12CBD6: using guessed type char byte_12CBD6_12CBC6;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004CAC0) --------------------------------------------------------
void sub_4CAC0_4CE00()
{
  if ( mainMenuSelector_12CBCE_12CBBE != 5 )
  {
    FadeInOut_61CC0_621D0(0, 0x10u, 0);
    if ( !byte_90B23 )
      sub_5C05C_5C56C(0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
    else
      sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
  }
  sub_61610_61B20(&pathStrArray_21AB80_21AEC0[PSdatascreensmmsprdat]);
  byte_967E4 = 0;
  byte_12CBD5_12CBC5 &= ~1u;
}
// 4CB07: variable 'v0' is possibly undefined
// 90B23: using guessed type char byte_90B23;
// 967E4: using guessed type char byte_967E4;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004CB70) --------------------------------------------------------
void sub_4CB70()
{
  if ( byte_12CBCD_12CBBD )
  {
    if ( (unsigned __int8)byte_12CBCD_12CBBD <= 1u || byte_12CBCD_12CBBD == 2 )
      sub_4D300();
  }
  else
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(358, 10, &begMmSprTab_12CB04_2EAB04_2EAAF4[1]);
    else
      DrawBitmap_60D18_61228(358, 10, &begMmSprTab_12CB04_2EAB04_2EAAF4[1]);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(336, 86, &begMmSprTab_12CB04_2EAB04_2EAAF4[2]);
    else
      DrawBitmap_60D18_61228(336, 86, &begMmSprTab_12CB04_2EAB04_2EAAF4[2]);
  }
}
// 12CB04: using guessed type int begMmSprTab_12CB04_2EAB04_2EAAF4;
// 12CBCD: using guessed type char byte_12CBCD_12CBBD;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;
void sub_4CC00()//21DC00_
{
    ViewportResize_65EB0_663C0(65, 75, 189, 44);
    if ((typeResolution_12F02E_12F01E & 1) != 0)
        DrawBitmap_60CE0_611F0(24, 8, &begMmSprTab_12CB04_2EAB04_2EAAF4[1]);
    else
        DrawBitmap_60D18_61228(24, 8, &begMmSprTab_12CB04_2EAB04_2EAAF4[1]);
    DrawText_51560((uint8*)&str_9688C, 30, 12, off_96864[dword_4A12C[byte_12CBC6_12CBB6].var-1]);
    ViewportResize_65EB0_663C0(0, 0, 320, 200);
}

//----- (0004CCA0) --------------------------------------------------------
int sub_4CCA0_4CFE0(int a1)
{
  int v1; // ebx
  __int16 v2; // di
  __int16 v3; // cx
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax

  v1 = 0;
  v2 = 0;
  byte_12CBD5_12CBC5 &= ~0x40u;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begScreenBackup_12CBA4_2EABA4_2EAB94, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begScreenBackup_12CBA4_2EABA4_2EAB94, 0x1E0u);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sprintf(pathBuffer_9ADC8, "intro\\scroll.dat");
  dword_AC5C4 = (int (*)(_DWORD))sub_50470;
  word_90026 = 0;
  PlayInfoFmv_107C0(0, 0, (int)dword_4A17C);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begWscreen_2ECFF4_2ECFE4, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begWscreen_2ECFF4_2ECFE4, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  HIBYTE(v3) = 0;
  dword_AC5C4 = 0;
  if ( !byte_90B23 )
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  sub_513E0();
  sub_51360(80, 73, 159, 48);
  v4 = strcmp((char*)off_96864[dword_4A12C[byte_12CBC6_12CBB6].var-1], "--");
  if ( !v4 )
    LOWORD(v4) = sub_4D0F0();
  while ( !v1 )
  {
    LOBYTE(v3) = byte_90B23;
    if ( !byte_90B23 || (byte_90B23 & 0x23) != 0 && (v2 & 3) == 0 )
      sub_50770_50AB0();
    if (pressedKeys_12EEF0_12EEE0[28])//byte_12EF0C Enter
    {
      v1 = 1;
      HIBYTE(v3) = 0;
      a1 = 1;
      mouseLeftButton_12EFDE_12EFCE = 0;
      pressedKeys_12EEF0_12EEE0[28] = 0;//byte_12EF0C Enter
      pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
      byte_12CAE4_12CAD4 &= ~1u;
    }
    if (pressedKeys_12EEF0_12EEE0[1])//byte_12EEF1_12EEE1 ESC
    {
      v1 = 1;
      a1 = 0;
      mouseLeftButton_12EFDE_12EFCE = 0;
      HIBYTE(v3) = byte_12CAE4_12CAD4 & 0xFE;
      pressedKeys_12EEF0_12EEE0[28] = 0;//byte_12EF0C Enter
      byte_12CAE4_12CAD4 &= ~1u;
      pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
    }
    if ( (byte_12CAE4_12CAD4 & 1) != 0 )
    {
      v5 = mouseX_12CAE0_12CAD0 >> 1;
      if ( v5 >= 68 && v5 <= 81 )
      {
        v6 = mouseY_12CAE2_12CAD2 >> 1;
        if ( v6 >= 106 && v6 <= 116 )
        {
          v1 = 1;
          a1 = 1;
        }
      }
      v7 = mouseX_12CAE0_12CAD0 >> 1;
      if ( v7 >= 240 && v7 <= 250 )
      {
        v8 = mouseY_12CAE2_12CAD2 >> 1;
        if ( v8 >= 105 && v8 <= 115 )
        {
          v1 = 1;
          a1 = 0;
        }
      }
      v9 = mouseX_12CAE0_12CAD0 >> 1;
      if ( v9 >= 110 && v9 <= 230 )
      {
        v10 = mouseY_12CAE2_12CAD2 >> 1;
        if ( v10 >= 85 && v10 <= 95 )
        {
          sub_4D0F0();
          pressedKeys_12EEF0_12EEE0[28] = 0;//byte_12EF0C Enter
          pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
        }
      }
      mouseLeftButton_12EFDE_12EFCE = 0;
      HIBYTE(v3) = byte_12CAE4_12CAD4 & 0xFE;
      pressedKeys_12EEF0_12EEE0[28] = 0;//byte_12EF0C Enter
      pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
      byte_12CAE4_12CAD4 &= ~1u;
    }
    sub_4D190();
    if ( (byte_90B23 & 0x23) != 0 )
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(mouse_9AD90.x, mouse_9AD90.y, &begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
      else
        DrawBitmap_60D18_61228(mouse_9AD90.x, mouse_9AD90.y, &begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
    }
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
    ++v2;
  }
  sub_51400();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begScreenBackup_12CBA4_2EABA4_2EAB94, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begScreenBackup_12CBA4_2EABA4_2EAB94, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
  pressedKeys_12EEF0_12EEE0[28] = 0;//byte_12EF0C Enter
  byte_12CAE4_12CAD4 &= 0xBEu;
  return a1;
}
// 4CE4A: variable 'v4' is possibly undefined
// 4A130: using guessed type __int16 word_4A130[];
// 4A17C: using guessed type int dword_4A17C[6];
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 639E0: using guessed type _DWORD strcmp(_DWORD, _DWORD);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 96860: using guessed type int dword_96860[];
// 9AD90: using guessed type int dmouse_9AD90.x;
// AC5C4: using guessed type int (*dword_AC5C4)(_DWORD);
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CAE0: using guessed type __int16 mouseX_12CAE0_12CAD0;
// 12CAE2: using guessed type __int16 mouseY_12CAE2_12CAD2;
// 12CAE4: using guessed type char byte_12CAE4_12CAD4;
// 12CAEC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CBA4: using guessed type int begScreenBackup_12CBA4_2EABA4_2EAB94;
// 12CBC6: using guessed type char byte_12CBC6_12CBB6;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12EEF1: using guessed type char byte_12EEF1_12EEE1;
// 12EF0C: using guessed type char byte_12EF0C;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004D0F0) --------------------------------------------------------
bool sub_4D0F0()
{
  bool result; // eax

  pressedKeys_12EEF0_12EEE0[28] = 0; //byte_12EF0C Enter
  mouseRightButton_12EFDC_12EFCC = 0;
  pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
  word_12EFDA_12EFCA = 0;
  byte_12CBD5_12CBC5 |= 0x40u;
  mouseLeftButton_12EFDE_12EFCE = 0;
  result = sub_50D40(
             30,
             12,
             20,
             0,
             (char *)off_96864[dword_4A12C[byte_12CBC6_12CBB6].var-1],
             255,
             0,
             (void (*)(void))sub_4D190,
             0,
             (int)&str_9688C);
  byte_12CBD5_12CBC5 &= ~0x40u;
  return result;
}
// 4A130: using guessed type __int16 word_4A130[];
// 96860: using guessed type int dword_96860[];
// 9688C: using guessed type int dword_9688C;
// 12CBC6: using guessed type char byte_12CBC6_12CBB6;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12EEF1: using guessed type char byte_12EEF1_12EEE1;
// 12EF0C: using guessed type char byte_12EF0C;
// 12EFDA: using guessed type __int16 word_12EFDA_12EFCA;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;

//----- (0004D190) --------------------------------------------------------
void sub_4D190()
{
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  ViewportResize_65EB0_663C0(65, 75, 189, 44);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    DrawBitmap_60CE0_611F0(24, 8, &begMmSprTab_12CB04_2EAB04_2EAAF4[2]);
  else
    DrawBitmap_60D18_61228(24, 8, &begMmSprTab_12CB04_2EAB04_2EAAF4[2]);
  ViewportResize_65EB0_663C0(0, 0, 320, 200);
  if ( (byte_12CBD5_12CBC5 & 0x40) == 0 )
  {
    DrawText_51560(
        (uint8*)&str_9688C,
      30,
      12,
        off_96864[dword_4A12C[byte_12CBC6_12CBB6].var-1]);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(136, 210, &begMmSprTab_12CB04_2EAB04_2EAAF4[5]);
    else
      DrawBitmap_60D18_61228(136, 210, &begMmSprTab_12CB04_2EAB04_2EAAF4[5]);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(480, 210, &begMmSprTab_12CB04_2EAB04_2EAAF4[6]);
    else
      DrawBitmap_60D18_61228(480, 210, &begMmSprTab_12CB04_2EAB04_2EAAF4[6]);
  }
}
// 4A130: using guessed type __int16 word_4A130[];
// 96860: using guessed type int dword_96860[];
// 9688C: using guessed type int dword_9688C;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CB04: using guessed type int begMmSprTab_12CB04_2EAB04_2EAAF4;
// 12CBC6: using guessed type char byte_12CBC6_12CBB6;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004D300) --------------------------------------------------------
void sub_4D300()//21E300_
{
  //int v0; // ebx
  __int64 v1; // rax

  str_9688C.var8_6 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x3Fu, 0x3Fu, 0);
  sub_513E0();
  for ( int i = 0; i < 6; i++ )
  {
    //v0 = 4 * i;
    sub_51360(dword_4A7EC[i][0], dword_4A7EC[i][1], dword_4A7EC[i][2], dword_4A7EC[i][3]);
    v1 = dword_4A7EC[i][3] - str_9688C.next->dim.y;
    DrawText_51560((uint8*)&str_9688C, 4, ((int)v1 - HIDWORD(v1)) >> 1, off_96864[i]);
  }
  sub_51400();
}
// 4A7EC: using guessed type int dword_4A7EC[];
// 4A7F0: using guessed type int dword_4A7F0[];
// 4A7F4: using guessed type int dword_4A7F4[];
// 4A7F8: using guessed type int dword_4A7F8[];
// 96864: using guessed type char *off_96864[5];
// 9688C: using guessed type int dword_9688C;
// 96892: using guessed type char byte_96892;
// 12CB9C: using guessed type int dword_12CB9C;

//----- (0004D3B0) --------------------------------------------------------
void sub_4D3B0()//21E3B0_
{
  int v1; // eax

  //fix
  v1 = 0;
  //fix

  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sprintf(pathBuffer_9ADC8, "intro\\intro.dat");
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
  lastPressedKey_12EF70_12EF60 = 0;
  if ( (byte_12CBD5_12CBC5 & 2) != 0 )
  {
    if ( (byte_12CBD6_12CBC6 & 1) != 0 )
      word_90026 = 1;
    PlayInfoFmv_107C0(1, 1, (int)dword_4A1FC);
    word_90026 = 0;
  }
  else
  {
    PlayInfoFmv_107C0(0, 1, (int)dword_4A1FC);
  }
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_24BB0();
  sub_5D010_5D520();
  sub_20E60_20E60();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  byte_12CBD5_12CBC5 |= 6u;
  if ( (byte_12CBD6_12CBC6 & 1) != 0 )
  {
    mainMenuSelector_12CBCE_12CBBE = 2;
    byte_12CBD6_12CBC6 &= ~1u;
  }
  else
  {
    mainMenuSelector_12CBCE_12CBBE = 8;
  }
  byte_12CBD5_12CBC5 &= ~1u;
}
// 4D3EC: variable 'v0' is possibly undefined
// 4D4DB: variable 'v1' is possibly undefined
// 4A1FC: using guessed type int dword_4A1FC[2];
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12CBD6: using guessed type char byte_12CBD6_12CBC6;
// 12EEF1: using guessed type char byte_12EEF1_12EEE1;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004D560) --------------------------------------------------------
void sub_4D560()
{
  int v1; // ebx

  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sprintf(pathBuffer_9ADC8, "intro\\outro.dat");
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
  lastPressedKey_12EF70_12EF60 = 0;
  word_90026 = 0;
  PlayInfoFmv_107C0(0, 1, (int)dword_4A638);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_5D010_5D520();
  sub_20E60_20E60();
  v1 = str_AE400_AE3F0->var_u16_8;
  bool_96880 = true;
  *(_BYTE *)(dword_AE400_AE3F0() + 2049 * v1 + 13327) = 1;
  while ( 1 )
    ;
}
// 4D59B: variable 'v0' is possibly undefined
// 4A638: using guessed type int dword_4A638[2];
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 96880: using guessed type int dword_96880;
// AC5D4: using guessed type int dword_AC5D4_AC5C4;
// AE400: using guessed type int dword_AE400_AE3F0();
// 12EEF1: using guessed type char byte_12EEF1_12EEE1;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004D680) --------------------------------------------------------
void sub_4D680()
{
  int v0; // eax
  int v1; // edx
  int v2; // eax
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax
  __int16 v11; // dx
  int v12; // eax
  int v13; // ebx
  int v14; // eax
  int v15; // eax
  int v16; // eax
  int v17; // eax
  unsigned __int8 i; // ah
  int v19; // edx
  int v20; // esi
  int v21; // ecx
  int v22; // ebx
  int v23; // edx
  unsigned __int8 v24; // al
  int v25; // edx
  int v26; // eax
  int v27; // edx
  int v28; // edi
  int v29; // esi
  int v30; // eax
  char v31; // cl
  unsigned __int8 *v32; // [esp-4h] [ebp-18h]
  unsigned __int8 *v33; // [esp-4h] [ebp-18h]
  char v34; // [esp+0h] [ebp-14h]
  char v35; // [esp+4h] [ebp-10h]

  v34 = 0;
  v35 = 0;
  if ( (byte_12CBD5_12CBC5 & 1) == 0 )
  {
    sub_4E0E0();
    sub_4E320();
  }
  if (pressedKeys_12EEF0_12EEE0[1])//byte_12EEF1_12EEE1 ESC
  {
      pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
    v34 = 1;
  }
  v0 = mouse_12CADC.x >> 1;
  if ( v0 >= 173 && v0 <= 263 )
  {
    v1 = mouse_12CADC.y >> 1;
    if ( v1 >= 72 && v1 <= 133 )
    {
      word_12CBC0_12CBB0 = (v1 - 72) / (str_9688C.var8_5 - 2);
      if ( (byte_12CAE4_12CAD4 & 1) != 0 )
        word_12CBC2_12CBB2 = word_12CBC0_12CBB0 + word_12CBBE_12CBAE;
    }
  }
  if ( (byte_12CAE4_12CAD4 & 1) != 0 )
  {
    v2 = mouse_12CADC.x >> 1;
    if ( v2 < 173 || v2 > 262 || (v3 = mouse_12CADC.y >> 1, v3 < 57) || v3 > 71 )
    {
      v4 = mouse_12CADC.x >> 1;
      if ( v4 >= 173 && v4 <= 262 )
      {
        v5 = mouse_12CADC.y >> 1;
        if ( v5 >= 134 && v5 <= 148 && (unsigned __int16)word_12CBBE_12CBAE + 5 < 20 )
          ++word_12CBBE_12CBAE;
      }
    }
    else if ( word_12CBBE_12CBAE )
    {
      --word_12CBBE_12CBAE;
    }
  }
  if ( (byte_12CAE4_12CAD4 & 1) != 0 || (byte_12CAE4_12CAD4 & 0x40) != 0 )
  {
    v6 = mouseX_12CAE0_12CAD0 >> 1;
    if ( v6 < 284 || v6 > 303 || (v7 = mouseY_12CAE2_12CAD2 >> 1, v7 < 48) || v7 > 67 )
    {
      v8 = mouseX_12CAE0_12CAD0 >> 1;
      if ( v8 < 284 || v8 > 303 || (v9 = mouseY_12CAE2_12CAD2 >> 1, v9 < 126) || v9 > 145 )
      {
        v14 = mouseX_12CAE0_12CAD0 >> 1;
        if ( v14 < 236 || v14 > 256 || (v15 = mouseY_12CAE2_12CAD2 >> 1, v15 < 156) || v15 > 176 )
        {
          v16 = mouseX_12CAE0_12CAD0 >> 1;
          if ( v16 < 176 || v16 > 253 || (v17 = mouseY_12CAE2_12CAD2 >> 1, v17 < 46) || v17 > 58 )
          {
            for ( i = 0; i < 8u; ++i )
            {
              v19 = mouseX_12CAE0_12CAD0 >> 1;
              v20 = word_4A7CC[2 * i];
              if ( v19 >= v20 )
              {
                v21 = (int)begPMultSprTab_12CB10_2EAB10_2EAB00 + 6 * (i + 1);
                if ( v19 <= ((int)*(unsigned __int8 *)(v21 + 4) >> 1) + v20 )
                {
                  v22 = word_4A7CE[2 * i];
                  v23 = mouseY_12CAE2_12CAD2 >> 1;
                  if ( v23 >= v22 && v23 <= ((int)*(unsigned __int8 *)(v21 + 5) >> 1) + v22 && (byte_12CAE4_12CAD4 & 1) != 0 )
                  {
                    v24 = 0;
                    byte_12CBD1_12CBC1 = 0;
                    do
                    {
                      if ( v24 > i && v24 >= 2u )
                      {
                        byte_9689C[3 * v24] = 0;
                      }
                      else
                      {
                        ++byte_12CBD1_12CBC1;
                        byte_9689C[3 * v24] = 1;
                      }
                      v25 = 3 * v24++;
                      byte_9689D[v25] = 0;
                    }
                    while ( v24 < 8u );
                  }
                }
              }
            }
          }
          else
          {
            byte_12CAE4_12CAD4 &= ~1u;
            if ( ++byte_12CBD0_12CBC0 == 10 )
              byte_12CBD0_12CBC0 = 0;
            sprintf((char*)(dword_AE408_AE3F8() + 117), "CARPET%d", (unsigned __int8)byte_12CBD0_12CBC0);
          }
        }
        else
        {
          v34 = 1;
        }
      }
      else
      {
        word_12CBC4 = str_AE408_AE3F8->var_u16_17;
        str_AE408_AE3F8->var_u16_17 = word_12CBC2_12CBB2 + 50;
        byte_12CBD5_12CBC5 |= 0x10u;
        byte_12CBD2_12CBC2 = 6;
        sub_4DCC0();
        sub_513E0();
        sub_51360(173, 42, 90, 15);
        v32 = (unsigned __int8 *)(dword_AE408_AE3F8() + 117);
        v10 = sub_51420((uint32*)&str_9688C, (char *)(dword_AE408_AE3F8() + 117));
        DrawText_51560((uint8*)&str_9688C, (__int16)((90 - v10) / 2), 1, (char*)v32);
        sub_51400();
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          Blit_5CDA0_5D2B0();
        else
          Blit_599B0_59EC0(480);
        str_AE400_AE3F0->var_u16_10 = (unsigned __int8)byte_12CBD1_12CBC1;
        byte_12CBD5_12CBC5 &= ~0x10u;
        if ( !byte_90B23 )
          sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
        v11 = sub_43430_43770((char *)(dword_AE408_AE3F8() + 117), (unsigned __int8)byte_12CBD1_12CBC1);
        v12 = dword_AE400_AE3F0();
        *(_WORD *)(dword_AE400_AE3F0() + 8) = v11;
        if ( v11 == -1 )
        {
          sub_4E320();
          FadeInOut_61CC0_621D0(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0);
        }
        else
        {
          v13 = dword_AE408_AE3F8();
          str_AE408_AE3F8->var_u8_0 |= 0x10u;
          *(_BYTE *)(v12 + 10 * *(__int16 *)(v12 + 8) + 29716) = *(_BYTE *)(v13 + 17);
          sub_43930((uint8**)(v12 + 29715), 0xAu);
          bool_96880 = true;
          v35 = 1;
          v34 = 1;
          str_AE408_AE3F8->var_u16_17 = *(char *)(dword_AE400_AE3F0() + 29716);
        }
      }
    }
    byte_12CAE4_12CAD4 &= 0xBEu;
  }
  sub_4DCC0();
  sub_513E0();
  sub_51360(173, 42, 90, 15);
  v33 = (unsigned __int8 *)(dword_AE408_AE3F8() + 117);
  v26 = 90 - sub_51420((uint32*)&str_9688C, (char *)(dword_AE408_AE3F8() + 117));
  DrawText_51560((uint8*)&str_9688C, (__int16)(v26 / 2), 1, (char*)v33);
  sub_51400();
  if ( (byte_90B23 & 0x23) != 0 )
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(mouse_9AD90.x, mouse_9AD90.y, &begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
    else
      DrawBitmap_60D18_61228(mouse_9AD90.x, mouse_9AD90.y, &begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  }
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( v34 )
  {
    sub_4E270();
    if ( !v35 )
    {
      v27 = dword_AE400_AE3F0();
      v28 = dword_AE400_AE3F0() + 13323;
      v29 = dword_AE400_AE3F0() + 9225;
      v30 = dword_AE408_AE3F8();
      qmemcpy((void *)(dword_AE400_AE3F0() + 13323), (const void *)(dword_AE400_AE3F0() + 9225), 0x800u);
      *(_BYTE *)(v28 + 2048) = *(_BYTE *)(v29 + 2048);
      mainMenuSelector_12CBCE_12CBBE = 2;
      v31 = *(_BYTE *)v30 & 0xEF;
      *(_WORD *)(v30 + 17) = *(_WORD *)(v30 + 19);
      *(_BYTE *)v30 = v31;
      *(_WORD *)(v27 + 8) = 0;
    }
  }
}
// 4A7CC: using guessed type __int16 word_4A7CC[];
// 4A7CE: using guessed type __int16 word_4A7CE[];
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90B23: using guessed type char byte_90B23;
// 96880: using guessed type int dword_96880;
// 9688C: using guessed type int dword_9688C;
// 9AD90: using guessed type int dmouse_9AD90.x;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CADC: using guessed type int dword_12CADC;
// 12CAE0: using guessed type __int16 mouseX_12CAE0_12CAD0;
// 12CAE2: using guessed type __int16 mouseY_12CAE2_12CAD2;
// 12CAE4: using guessed type char byte_12CAE4_12CAD4;
// 12CAEC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CB10: using guessed type int begPMultSprTab_12CB10_2EAB10_2EAB00;
// 12CB9C: using guessed type int dword_12CB9C;
// 12CBBE: using guessed type __int16 word_12CBBE_12CBAE;
// 12CBC0: using guessed type __int16 word_12CBC0_12CBB0;
// 12CBC2: using guessed type __int16 word_12CBC2_12CBB2;
// 12CBC4: using guessed type __int16 word_12CBC4;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD0: using guessed type char byte_12CBD0_12CBC0;
// 12CBD1: using guessed type char byte_12CBD1_12CBC1;
// 12CBD2: using guessed type char byte_12CBD2_12CBC2;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12EEF1: using guessed type char byte_12EEF1_12EEE1;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004DCC0) --------------------------------------------------------
char sub_4DCC0()
{
  //int v0; // edx
  //int v1; // eax
  unsigned __int8 v2; // bl
  int v3; // eax
  //int v4; // ecx
  //int v5; // edx
  int v6; // esi
  char v7; // al
  unsigned __int8 v8; // bl
  char v9; // al
  int v10; // eax
  char result; // al
  char *v12; // [esp-4h] [ebp-1Ch]
  char v13; // [esp+0h] [ebp-18h]
  char v14; // [esp+4h] [ebp-14h]

  if ( (dword_12CBB0_12CBA0 & 7) == 7 && ++byte_12CBD2_12CBC2 == 21 )
    byte_12CBD2_12CBC2 = 6;
  if ( (byte_12CBD5_12CBC5 & 0x10) != 0 )
  {
    if ( !byte_90B23 )
    {
      //v0 = 6 * (unsigned __int8)byte_12CBD2_12CBC2;
      //v1 = (int)begSptrsTab_12CAEC_2EAAEC_2EAADC;
//LABEL_9:
      sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[byte_12CBD2_12CBC2]);
    }
  }
  else if ( !byte_90B23 )
  {
    //v0 = (int)begSptrsTab_12CAEC_2EAAEC_2EAADC;
    //v1 = 6 * (unsigned __int8)mainMenuSelector_12CBCE_12CBBE;
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  }
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  sub_513E0();
  v2 = 0;
  sub_51360(0, 0, 320, 200);
  do
  {
    if ( byte_9689C[3 * v2] || byte_9689D[3 * v2] )
    {
      v3 = 2 * v2;
      if ( byte_9689D[3 * v2] )
      {
        if ( (typeResolution_12F02E_12F01E & 1) != 0 )
          DrawBitmap_60CE0_611F0(2 * (word_4A7CC[2 * v2] + 10), 2 * (word_4A7CE[2 * v2] - 10), &begPMultSprTab_12CB10_2EAB10_2EAB00[17]);
        else
          DrawBitmap_60D18_61228(2 * (word_4A7CC[2 * v2] + 10), 2 * (word_4A7CE[2 * v2] - 10), &begPMultSprTab_12CB10_2EAB10_2EAB00[17]);
      }
      else if ( byte_9689C[3 * v2] )
      {
        //v4 = 6 * (v2 + 9);
        //v5 = 6 * (v2 + 17);
        switch ( byte_9689E[3 * v2] )
        {
          case 0:
            if ( (typeResolution_12F02E_12F01E & 1) == 0 )
                DrawBitmap_60CE0_611F0(2 * word_4A7CC[2 * v2], 2 * word_4A7CE[2 * v2], &begPMultSprTab_12CB10_2EAB10_2EAB00[v2 + 9]);
            else
                DrawBitmap_60CE0_611F0(2 * word_4A7CC[2 * v2], 2 * word_4A7CE[2 * v2], &begPMultSprTab_12CB10_2EAB10_2EAB00[v2 + 17]);
          case 1:
            if ( (dword_12CBB0_12CBA0 & 0x10) == 0 )
              break;
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
                DrawBitmap_60CE0_611F0(2 * word_4A7CC[2 * v2], 2 * word_4A7CE[2 * v2], &begPMultSprTab_12CB10_2EAB10_2EAB00[v2 + 17]);
            else
                DrawBitmap_60D18_61228(2 * word_4A7CC[v3], 2 * word_4A7CE[v3], &begPMultSprTab_12CB10_2EAB10_2EAB00[v2 + 17]);
            break;
          case 2:
            if ( (typeResolution_12F02E_12F01E & 1) != 0 )
                DrawBitmap_60CE0_611F0(2 * word_4A7CC[2 * v2], 2 * word_4A7CE[2 * v2], &begPMultSprTab_12CB10_2EAB10_2EAB00[v2 + 17]);
            else
                DrawBitmap_60D18_61228(2 * word_4A7CC[v3], 2 * word_4A7CE[v3], &begPMultSprTab_12CB10_2EAB10_2EAB00[v2 + 17]);
            break;
          case 3:
            if ( (typeResolution_12F02E_12F01E & 1) == 0 )
            {
//LABEL_23:
              //v5 = (int)begPMultSprTab_12CB10_2EAB10_2EAB00;
              DrawBitmap_60D18_61228(2 * word_4A7CC[v3], 2 * word_4A7CE[v3], &begPMultSprTab_12CB10_2EAB10_2EAB00[v2 + 17]);
            }
            else
//LABEL_30:
            DrawBitmap_60CE0_611F0(2 * word_4A7CC[2 * v2], 2 * word_4A7CE[2 * v2], &begPMultSprTab_12CB10_2EAB10_2EAB00[v2 + 9]);
            break;
          default:
            break;
        }
      }
    }
    else
    {
      //v5 = 6 * (v2 + 1);
      v3 = 2 * v2;
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      {
//LABEL_32:
        DrawBitmap_60CE0_611F0(2 * word_4A7CC[2 * v2], 2 * word_4A7CE[2 * v2], &begPMultSprTab_12CB10_2EAB10_2EAB00[v2 + 1]);
      }
      else
      {
//LABEL_33:
        //v4 = (int)begPMultSprTab_12CB10_2EAB10_2EAB00;
//LABEL_34:
        DrawBitmap_60D18_61228(2 * word_4A7CC[v3], 2 * word_4A7CE[v3], &begPMultSprTab_12CB10_2EAB10_2EAB00[v2 + 1]);
      }
    }
    ++v2;
  }
  while ( v2 < 8u );
  sub_51360(173, 72, 90, 61);
  v6 = 0;
  v13 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x3Fu, 0x3Fu, 0x3Fu);
  v7 = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x1Au, 0x12u, 0xDu);
  v8 = word_12CBBE_12CBAE;
  v14 = v7;
  while ( v8 < (unsigned __int16)word_12CBBE_12CBAE + 5 )
  {
    if ( v8 == word_12CBC2_12CBB2 )
      v9 = v13;
    else
      v9 = v14;
    str_9688C.var8_6 = v9;
    v12 = off_99A84[v8];
    v10 = sub_51420((uint32*)&str_9688C, v12);
    DrawText_51560((uint8*)&str_9688C, (__int16)((90 - v10) / 2), v6, v12);
    ++v8;
    v6 += str_9688C.var8_5 - 2;
  }
  sub_51400();
  result = v14;
  str_9688C.var8_6 = v14;
  return result;
}
// 4A7CC: using guessed type __int16 word_4A7CC[];
// 4A7CE: using guessed type __int16 word_4A7CE[];
// 90B23: using guessed type char byte_90B23;
// 9688C: using guessed type int dword_9688C;
// 96892: using guessed type char byte_96892;
// 99A84: using guessed type char *off_99A84[20];
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CAEC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CB10: using guessed type int begPMultSprTab_12CB10_2EAB10_2EAB00;
// 12CB9C: using guessed type int dword_12CB9C;
// 12CBB0: using guessed type int dword_12CBB0_12CBA0;
// 12CBBE: using guessed type __int16 word_12CBBE_12CBAE;
// 12CBC2: using guessed type __int16 word_12CBC2_12CBB2;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD2: using guessed type char byte_12CBD2_12CBC2;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E0E0) --------------------------------------------------------
char sub_4E0E0()
{
  char result; // al

  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_20E60_20E60();
  sub_40440_40780(&pathStrArray_21AB80_21AEC0[PSdatascreenspmultsprdat]);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_65D70_66280(begPMultSprTab_12CB10_2EAB10_2EAB00, endPMultSprTab_12CB14_2EAB14_2EAB04, begPMultSprDat_12CB18_2EAB18_2EAB08);
  else
    sub_65DC0_662D0(begPMultSprTab_12CB10_2EAB10_2EAB00, endPMultSprTab_12CB14_2EAB14_2EAB04, begPMultSprDat_12CB18_2EAB18_2EAB08);
  sub_51480_517C0(&str_9688C, &sFont1Tab_12CB34_2EAB34_2EAB24, begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
  str_9688C.var8_4 &= ~2u;
  sub_3EEA0_3F1E0((char*)"data\\screens\\pmulti.pal", (uint8_t*)begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
  sub_3EEA0_3F1E0((char*)"data\\screens\\pmulti.dat", (uint8_t*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  FadeInOut_61CC0_621D0(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0);
  byte_12CBD5_12CBC5 |= 1u;
  result = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x1Au, 0x12u, 0xDu);
  str_9688C.var8_6 = result;
  return result;
}
// 90B23: using guessed type char byte_90B23;
// 9688C: using guessed type int dword_9688C;
// 96890: using guessed type char byte_96890;
// 96892: using guessed type char byte_96892;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CAEC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CB10: using guessed type int begPMultSprTab_12CB10_2EAB10_2EAB00;
// 12CB14: using guessed type int text_12CB14_2EAB14;
// 12CB18: using guessed type int begPMultSprDat_12CB18_2EAB18_2EAB08;
// 12CB34: using guessed type _DWORD begSFont1Tab_12CB34_2EAB34_2EAB24;
// 12CB9C: using guessed type int dword_12CB9C;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E270) --------------------------------------------------------
void sub_4E270()
{
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sub_61610_61B20(&pathStrArray_21AB80_21AEC0[PSdatascreenspmultsprdat]);
  byte_12CBD5_12CBC5 &= ~1u;
  if ( mainMenuSelector_12CBCE_12CBBE == 2 )
    sub_5D290_5D7A0(4);
}
// 4E2AA: variable 'v0' is possibly undefined
// 90B23: using guessed type char byte_90B23;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E320) --------------------------------------------------------
void sub_4E320()
{
  unsigned __int8 v0; // al
  int v1; // eax
  unsigned __int8 *v2; // [esp-4h] [ebp-4h]

  v0 = 0;
  ++dword_12CBB0_12CBA0;
  do
  {
    if ( byte_9689C[3 * v0] )
      byte_9689E[3 * v0] = 0;
    ++v0;
  }
  while ( v0 < 8u );
  sub_4DCC0();
  sub_513E0();
  sub_51360(173, 42, 90, 15);
  v2 = (unsigned __int8 *)(dword_AE408_AE3F8() + 117);
  v1 = 90 - sub_51420((uint32*)&str_9688C, (char *)(dword_AE408_AE3F8() + 117));
  DrawText_51560((uint8*)&str_9688C, (__int16)(v1 / 2), 1, (char*)v2);
  sub_51400();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
}
// 9688C: using guessed type int dword_9688C;
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CBB0: using guessed type int dword_12CBB0_12CBA0;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E3D0) --------------------------------------------------------
void sub_4E3D0_4E710(unsigned __int8 a1)
{
  int v1; // eax
  unsigned __int8 *v2; // [esp-4h] [ebp-4h]

  byte_9689E[3 * a1] = 1;
  ++dword_12CBB0_12CBA0;
  sub_4DCC0();
  sub_513E0();
  sub_51360(173, 42, 90, 15);
  v2 = (unsigned __int8 *)(dword_AE408_AE3F8() + 117);
  v1 = 90 - sub_51420((uint32*)&str_9688C, (char *)(dword_AE408_AE3F8() + 117));
  DrawText_51560((uint8*)&str_9688C, (__int16)(v1 / 2), 1, (char*)v2);
  sub_51400();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
}
// 9688C: using guessed type int dword_9688C;
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CBB0: using guessed type int dword_12CBB0_12CBA0;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E470) --------------------------------------------------------
void sub_4E470_4E7B0(unsigned __int8 a1)
{
  int v1; // eax
  unsigned __int8 *v2; // [esp-4h] [ebp-4h]

  byte_9689E[3 * a1] = 2;
  ++dword_12CBB0_12CBA0;
  sub_4DCC0();
  sub_513E0();
  sub_51360(173, 42, 90, 15);
  v2 = (unsigned __int8 *)(dword_AE408_AE3F8() + 117);
  v1 = 90 - sub_51420((uint32*)&str_9688C, (char *)(dword_AE408_AE3F8() + 117));
  DrawText_51560((uint8*)&str_9688C, (__int16)(v1 / 2), 1, (char*)v2);
  sub_51400();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
}
// 9688C: using guessed type int dword_9688C;
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CBB0: using guessed type int dword_12CBB0_12CBA0;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E510) --------------------------------------------------------
void sub_4E510(unsigned __int8 a1)
{
  int v1; // eax
  unsigned __int8 *v2; // [esp-4h] [ebp-4h]

  byte_9689E[3 * a1] = 0;
  ++dword_12CBB0_12CBA0;
  sub_4DCC0();
  sub_513E0();
  sub_51360(173, 42, 90, 15);
  v2 = (unsigned __int8 *)(dword_AE408_AE3F8() + 117);
  v1 = 90 - sub_51420((uint32*)&str_9688C, (char *)(dword_AE408_AE3F8() + 117));
  DrawText_51560((uint8*)&str_9688C, (__int16)(v1 / 2), 1, (char*)v2);
  sub_51400();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
}
// 9688C: using guessed type int dword_9688C;
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CBB0: using guessed type int dword_12CBB0_12CBA0;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004E5B0) --------------------------------------------------------
int sub_4E5B0()
{
  int v0; // edi
  int v1; // ebx
  int v2; // ebp
  int v4; // eax
  char v5; // dl
  int v6; // eax
  int v7; // esi
  __int16 v8; // ax
  __int16 v9; // ax
  __int16 v10; // ax
  __int16 v11; // ax
  __int16 v12; // ax
  __int16 v13; // ax
  int result; // eax
  unsigned __int8 v15[64]; // [esp+0h] [ebp-80h] BYREF
  int v16; // [esp+40h] [ebp-40h]
  unsigned int v17; // [esp+44h] [ebp-3Ch]
  unsigned int v18; // [esp+48h] [ebp-38h]
  unsigned int v19; // [esp+4Ch] [ebp-34h]
  unsigned int v20; // [esp+50h] [ebp-30h]
  unsigned int v21; // [esp+54h] [ebp-2Ch]
  unsigned int v22; // [esp+58h] [ebp-28h]
  unsigned int v23; // [esp+5Ch] [ebp-24h]
  int v24; // [esp+60h] [ebp-20h]
  int v25; // [esp+64h] [ebp-1Ch]
  int v26; // [esp+68h] [ebp-18h]
  int v27; // [esp+6Ch] [ebp-14h]

  //fix
  v6 = 0;
  //fix

  v0 = 0;
  v1 = str_AE400_AE3F0->var_u16_8;
  v2 = 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v27 = 0;
  LOBYTE(v1) = *(_BYTE *)(dword_AE400_AE3F0() + 2049 * v1 + 13325);
  v16 = 0;
  if ( (v1 & 8) == 0 )
  {
    if ( !byte_90B23 )
      sub_5C05C_5C56C(0);
    FadeInOut_61CC0_621D0(0, 0x10u, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
    else
      sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
    v4 = dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8;
    if ( *(_WORD *)(v4 + 13325) & 2 | 4 )
    {
      v5 = *(_BYTE *)(v4 + 13325);
      if ( (v5 & 2) != 0 )
      {
        if ( (dword_AC5D4_AC5C4 & 1) != 0 )
          sprintf(pathBuffer_9ADC8, "intro\\levelw2.dat");
        else
          sprintf(pathBuffer_9ADC8, "intro\\levelw1.dat");
        word_12EFDA_12EFCA = 0;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
        lastPressedKey_12EF70_12EF60 = 0;
        word_90026 = 0;
        PlayInfoFmv_107C0(1, 1, (int)dword_4A5D8);
      }
      else if ( (v5 & 4) != 0 )
      {
        sprintf(pathBuffer_9ADC8, "intro\\levelose.dat");
        word_12EFDA_12EFCA = 0;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
        lastPressedKey_12EF70_12EF60 = 0;
        word_90026 = 0;
        PlayInfoFmv_107C0(1, 1, (int)dword_4A1C0);
      }
      FadeInOut_61CC0_621D0(0, 0x10u, 0);
      sub_5D010_5D520();
      sub_20E60_20E60();
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
      else
        sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        Blit_5CDA0_5D2B0();
      else
        Blit_599B0_59EC0(480);
    }
    sub_5D070_5D580(0xDu);
    sub_5CEF0_5D400(0);
    sub_5D290_5D7A0(1);
    word_12EFDA_12EFCA = 0;
    mouseRightButton_12EFDC_12EFCC = 0;
    mouseLeftButton_12EFDE_12EFCE = 0;
    lastPressedKey_12EF70_12EF60 = 0;
    mainMenuSelector_12CBCE_12CBBE = 2;
    sub_40440_40780(&pathStrArray_21AB80_21AEC0[PSdatascreenssfont2dat]);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_65D70_66280(begSFont2Tab_12CB40_2EAB40_2EAB30, endSFont2Tab_12CB44_2EAB44_2EAB34, begSFont2Dat_12CB48_2EAB48_2EAB38);
    else
      sub_65DC0_662D0(begSFont2Tab_12CB40_2EAB40_2EAB30, endSFont2Tab_12CB44_2EAB44_2EAB34, begSFont2Dat_12CB48_2EAB48_2EAB38);
    word_96898 = 16;
    dword_96894 = (int)begSFont2Tab_12CB40_2EAB40_2EAB30 + 6;
    sub_3EEA0_3F1E0((char*)"data/screens/pperf.pal", (uint8_t*)begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
    sub_3EEA0_3F1E0((char*)"data\\screens\\pperf.dat", (uint8_t*)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
    else
      CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
    FadeInOut_61CC0_621D0(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0);
    pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
    byte_12CAE4_12CAD4 &= ~1u;
    sub_51360(0, 0, 320, 200);
    v7 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
    v19 = dword_AC5D4_AC5C4 + 360;
    v22 = dword_AC5D4_AC5C4 + 300;
    v17 = dword_AC5D4_AC5C4 + 240;
    v21 = dword_AC5D4_AC5C4 + 180;
    v23 = dword_AC5D4_AC5C4 + 120;
    v18 = dword_AC5D4_AC5C4 + 60;
    v20 = dword_AC5D4_AC5C4 + 1320;
    do
    {
      if ( lastPressedKey_12EF70_12EF60 || mouseLeftButton_12EFDE_12EFCE || dword_AC5D4_AC5C4 > v20 )
      {
        byte_12CAE4_12CAD4 &= 0xB6u;
        lastPressedKey_12EF70_12EF60 = 0;
        v0 = 1;
        mouseLeftButton_12EFDE_12EFCE = 0;
        pressedKeys_12EEF0_12EEE0[57] = 0;//byte_12EF29 SPACE
        pressedKeys_12EEF0_12EEE0[28] = 0;//byte_12EF0C Enter
        pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
        sub_61610_61B20(&pathStrArray_21AB80_21AEC0[PSdatascreenssfont2dat]);
      }
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
      else
        CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
      if ( dword_AC5D4_AC5C4 > v18 )
      {
        DrawText_51560((uint8*)&dword_96894, 40, 8, dword_999B8[str_AE408_AE3F8->var_u16_17]);
        if ( !v26 )
        {
          sub_65F10(0, 3);
          v26 = 1;
        }
        DrawText_51560((uint8*)&dword_96894, 40, 80, dword_AE238_AE228[66]);
        sprintf((char*)v15, "% 3d %%", *(_DWORD *)(*(_DWORD *)(v7 + 160) + 359));
        v8 = sub_51420((uint32*)&dword_96894, (char *)v15);
        DrawText_51560((uint8*)&dword_96894, (__int16)(600 - v8), 80, (char*)v15);
      }
      if ( dword_AC5D4_AC5C4 > v23 )
      {
        if ( !v25 )
        {
          sub_65F10(0, 3);
          v25 = 1;
        }
        DrawText_51560((uint8*)&dword_96894, 40, 120, dword_AE238_AE228[67]);
        sprintf((char*)v15, "% 3d %%", *(_DWORD *)(*(_DWORD *)(v7 + 160) + 367));
        v9 = sub_51420((uint32*)&dword_96894, (char *)v15);
        DrawText_51560((uint8*)&dword_96894, (__int16)(600 - v9), 120, (char*)v15);
      }
      if ( dword_AC5D4_AC5C4 > v21 )
      {
        if ( !v24 )
        {
          sub_65F10(0, 3);
          v24 = 1;
        }
        DrawText_51560((uint8*)&dword_96894, 40, 160, dword_AE238_AE228[68]);
        sprintf((char*)v15, "% 3d %%", *(_DWORD *)(*(_DWORD *)(v7 + 160) + 363));
        v10 = sub_51420((uint32*)&dword_96894, (char *)v15);
        DrawText_51560((uint8*)&dword_96894, (__int16)(600 - v10), 160, (char*)v15);
      }
      if ( dword_AC5D4_AC5C4 > v17 )
      {
        if ( !v27 )
        {
          sub_65F10(0, 3);
          v27 = 1;
        }
        DrawText_51560((uint8*)&dword_96894, 40, 200, dword_AE238_AE228[59]);
        sprintf((char*)v15, "% 3d %%", *(_DWORD *)(*(_DWORD *)(v7 + 160) + 371));
        v11 = sub_51420((uint32*)&dword_96894, (char *)v15);
        DrawText_51560((uint8*)&dword_96894, (__int16)(600 - v11), 200, (char*)v15);
      }
      if ( dword_AC5D4_AC5C4 > v22 )
      {
        if ( !v2 )
        {
          sub_65F10(0, 3);
          v2 = 1;
        }
        DrawText_51560((uint8*)&dword_96894, 40, 240, dword_AE238_AE228[69]);
        sprintf((char*)v15, "% 3d %%", *(_DWORD *)(*(_DWORD *)(v7 + 160) + 375));
        v12 = sub_51420((uint32*)&dword_96894, (char *)v15);
        DrawText_51560((uint8*)&dword_96894, (__int16)(600 - v12), 240, (char*)v15);
      }
      if ( dword_AC5D4_AC5C4 > v19 )
      {
        if ( !v16 )
        {
          sub_65F10(0, 3);
          v16 = 1;
        }
        DrawText_51560((uint8*)&dword_96894, 40, 280, dword_AE238_AE228[79]);
        sprintf(
            (char*)v15,
          "%dh% 02dm %02ds",
          *(_DWORD *)(*(_DWORD *)(v7 + 160) + 379) / 120 / 3600,
          *(_DWORD *)(*(_DWORD *)(v7 + 160) + 379) / 120 / 60 % 60,
          *(_DWORD *)(*(_DWORD *)(v7 + 160) + 379) / 120 % 60);
        v13 = sub_51420((uint32*)&dword_96894, (char *)v15);
        DrawText_51560((uint8*)&dword_96894, (__int16)(600 - v13), 280, (char*)v15);
      }
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        Blit_5CDA0_5D2B0();
      else
        Blit_599B0_59EC0(480);
    }
    while ( !v0 );
    FadeInOut_61CC0_621D0(0, 0x10u, 0);
    sub_20E60_20E60();
    sub_5D010_5D520();
  }
  result = dword_AE408_AE3F8();
  if ( str_AE408_AE3F8->var_u16_17 == 50 )
    mainMenuSelector_12CBCE_12CBBE = 10;
  else
    mainMenuSelector_12CBCE_12CBBE = 2;
  return result;
}
// 4E629: variable 'v3' is possibly undefined
// 4E784: variable 'v6' is possibly undefined
// 4A1C0: using guessed type int dword_4A1C0[2];
// 4A5D8: using guessed type int dword_4A5D8[2];
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 96894: using guessed type int dword_96894;
// 96898: using guessed type __int16 word_96898;
// 999B8: using guessed type int dword_999B8[];
// AC5D4: using guessed type int dword_AC5D4_AC5C4;
// AE324: using guessed type int dword_AE324;
// AE340: using guessed type int dword_AE340;
// AE344: using guessed type int dword_AE344;
// AE348: using guessed type int dword_AE348;
// AE34C: using guessed type int dword_AE34C;
// AE374: using guessed type int dword_AE374;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CAE4: using guessed type char byte_12CAE4_12CAD4;
// 12CB40: using guessed type int begSFont2Tab_12CB40_2EAB40_2EAB30;
// 12CB44: using guessed type int text_12CB44_2EAB44;
// 12CB48: using guessed type int begSFont2Dat_12CB48_2EAB48_2EAB38;
// 12CB9C: using guessed type int dword_12CB9C;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12EEF1: using guessed type char byte_12EEF1_12EEE1;
// 12EF0C: using guessed type char byte_12EF0C;
// 12EF29: using guessed type char byte_12EF29;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDA: using guessed type __int16 word_12EFDA_12EFCA;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004EE70) --------------------------------------------------------
void sub_4EE70()//21FE70_
{
  int v1; // eax

  //fix
  v1 = 0;
  //fix

  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sprintf(pathBuffer_9ADC8, "intro\\logo.dat");
  word_12EFDA_12EFCA = 0;
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  lastPressedKey_12EF70_12EF60 = 0;
  word_90026 = 0;
  PlayInfoFmv_107C0(1, 1, (int)dword_4A620);
  sub_4B480(0, 8);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_5D010_5D520();
  sub_20E60_20E60();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  mainMenuSelector_12CBCE_12CBBE = 0;
}
// 4EEAC: variable 'v0' is possibly undefined
// 4EF71: variable 'v1' is possibly undefined
// 4A620: using guessed type int dword_4A620[2];
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDA: using guessed type __int16 word_12EFDA_12EFCA;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004EFC0) --------------------------------------------------------
void sub_4EFC0_4F300()
{
  //int v1; // eax
  int v2; // eax

  //fix
  v2 = 0;
  //fix

  sub_19470();
  if (str_AE408_AE3F8->var_u8_8)
  {
    if ( !byte_90B23 )
      sub_5C05C_5C56C(0);
    FadeInOut_61CC0_621D0(0, 0x10u, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
    else
      sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
    sprintf(pathBuffer_9ADC8, "intro\\intel.dat");
    word_12EFDA_12EFCA = 0;
    mouseRightButton_12EFDC_12EFCC = 0;
    mouseLeftButton_12EFDE_12EFCE = 0;
    lastPressedKey_12EF70_12EF60 = 0;
    word_90026 = 0;
    PlayInfoFmv_107C0(1, 1, (int)dword_4A1E4);
    sub_4B480(0, 1);
    FadeInOut_61CC0_621D0(0, 0x10u, 0);
    sub_5D010_5D520();
    sub_20E60_20E60();
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
    else
      sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
  }
  mainMenuSelector_12CBCE_12CBBE = 9;
}
// 4F010: variable 'v1' is possibly undefined
// 4F0D5: variable 'v2' is possibly undefined
// 4A1E4: using guessed type int dword_4A1E4[2];
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDA: using guessed type __int16 word_12EFDA_12EFCA;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//SYNCHRONIZED WITH REMC1
void sub_4F120_4F460()
{
  int v0; // ebx
  uint8_t* v1; // eax
  __int16 v2; // dx

  v0 = dword_AC5D4_AC5C4;
  v1 = sub_1002D(dword_12CB6C_12CB5C, begWscreen_2ECFF4_2ECFE4);
  v2 = word_12CB70_12CB60 + 1;
  dword_12CB6C_12CB5C = v1;
  word_12CB70_12CB60 = v2;
  if ( v2 == 5 )
  {
    word_12CB70_12CB60 = 1;
    dword_12CB6C_12CB5C = dword_12CB68_12CB58;
  }
  else if ( v2 == 1 && !dword_12CB68_12CB58 )
  {
    dword_12CB68_12CB58 = v1;
  }
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( !mouseLeftButton_12EFDE_12EFCE && !mouseRightButton_12EFDC_12EFCC && !word_12EFDA_12EFCA && !lastPressedKey_12EF70_12EF60 )
  {
    while ( v0 + 16 >= (unsigned int)dword_AC5D4_AC5C4 )
      ;
  }
}

//----- (0004F1E0) --------------------------------------------------------
void sub_4F1E0()
{
  int v1; // eax

  //fix
  v1 = 0;
  //fix

  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( *(_BYTE *)(dword_AE400_AE3F0() + 8608) == 32 )
  {
    sub_40440_40780(&pathStrArray_21AB80_21AEC0[PSintrotitle02dat]);
    dword_12CB6C_12CB5C = begTitle02Dat_12CB64_2EAB64_2EAB54;
    dword_12CB68_12CB58 = 0;
    word_12CB70_12CB60 = 0;
  }
  sprintf(pathBuffer_9ADC8, "intro\\title-01.dat");
  word_12EFDA_12EFCA = 0;
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  lastPressedKey_12EF70_12EF60 = 0;
  if ( (byte_12CBD6_12CBC6 & 2) != 0 )
    word_90026 = 1;
  PlayInfoFmv_107C0(1, 1, (int)dword_4A568);
  word_90026 = 0;
  if ( *(_BYTE *)(dword_AE400_AE3F0() + 8608) == 32 )
  {
    if ( !word_AC5DC )
      sub_4B480((int (*)(void))sub_4F120_4F460, 6);
  }
  else if ( !word_AC5DC )
  {
    sub_4B480(0, 6);
  }
  dword_12CBB0_12CBA0 = 0;
  FadeInOut_61CC0_621D0(0, 0x10u, 0);
  sub_5D010_5D520();
  sub_20E60_20E60();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    sub_411D7_41517((void *)begWscreen_2ECFF4_2ECFE4, 0xC8u, 0);
  else
    sub_411FD_4153D((void *)begWscreen_2ECFF4_2ECFE4, 0x1E0u, 0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  if ( *(_BYTE *)(dword_AE400_AE3F0() + 8608) == 32 )
    sub_61610_61B20(&pathStrArray_21AB80_21AEC0[PSintrotitle02dat]);
  mainMenuSelector_12CBCE_12CBBE = 2;
  byte_12CBD6_12CBC6 &= ~2u;
}
// 4F21E: variable 'v0' is possibly undefined
// 4F35C: variable 'v1' is possibly undefined
// 4A568: using guessed type int dword_4A568[2];
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// AC5DC: using guessed type __int16 word_AC5DC;
// AE400: using guessed type int dword_AE400_AE3F0();
// 12CB64: using guessed type int begTitle02Dat_12CB64_2EAB64_2EAB54;
// 12CB68: using guessed type int dword_12CB68_12CB58;
// 12CB6C: using guessed type int dword_12CB6C_12CB5C;
// 12CB70: using guessed type __int16 word_12CB70_12CB60;
// 12CBB0: using guessed type int dword_12CBB0_12CBA0;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD6: using guessed type char byte_12CBD6_12CBC6;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDA: using guessed type __int16 word_12EFDA_12EFCA;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

void sub_4F3F0_4F730()//2203F0_
{
	char filename[56];
	sprintf(filename, "%s%s\\language.inf", "C:", "\\carpet.cd");
	bool endCycle = false;
	FILE* file = DataFileIO::CreateOrOpenFile(FixPath(filename), 514);
	if (file != nullptr)
	{
		DataFileIO::Close(file);
		file = DataFileIO::CreateOrOpenFile(FixPath(filename), 512);
		if (file != nullptr)
		{
			DataFileIO::Read(file, &str_AE408_AE3F8->var_u8_151, 1);
			DataFileIO::Close(file);
		}
	}
	else
	{
		dword_12CBB0_12CBA0 = 0;
		sub_3EEA0_3F1E0((char*)"data\\screens\\language.pal", (uint8_t*)begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C);
		sub_3EEA0_3F1E0((char*)"data\\screens\\language.dat", begBscreen_AE3FC_AE3EC_26C3FC_26C3EC);
		sub_40440_40780(&pathStrArray_21AB80_21AEC0[PSdatascreenslangsprdat]);
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			sub_65D70_66280(begLangSprTab_12CB58_2EAB58_2EAB48, endLangSprTab_12CB5C_2EAB5C_2EAB4C, begLangSprDat_12CB60_2EAB60_2EAB50);
		}
		else
		{
			sub_65DC0_662D0(begLangSprTab_12CB58_2EAB58_2EAB48, endLangSprTab_12CB5C_2EAB5C_2EAB4C, begLangSprDat_12CB60_2EAB60_2EAB50);
		}
		if ((typeResolution_12F02E_12F01E & 1) != 0)
		{
			CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
		}
		else
		{
			CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
		}
		if ((typeResolution_12F02E_12F01E & 1) != 0)
			Blit_5CDA0_5D2B0();
		else
			Blit_599B0_59EC0(480);
		if (!byte_90B23)
			sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
		FadeInOut_61CC0_621D0(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, 0x20u, 0);
		byte_12CAE4_12CAD4 &= ~1u;
        pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
		byte_12CBD5_12CBC5 |= 1u;
		do
		{
			sub_50770_50AB0();
			if ((byte_12CAE4_12CAD4 & 1) != 0)
			{
				if (mouseX_12CAE0_12CAD0 >> 1 < 64 || mouseX_12CAE0_12CAD0 >> 1 > 139 || mouseY_12CAE2_12CAD2 >> 1 < 43 || mouseY_12CAE2_12CAD2 >> 1 > 82)
				{
					if (mouseX_12CAE0_12CAD0 >> 1 < 64 || mouseX_12CAE0_12CAD0 >> 1 > 139 || mouseY_12CAE2_12CAD2 >> 1 < 95 || mouseY_12CAE2_12CAD2 >> 1 > 134)
					{
						if (mouseX_12CAE0_12CAD0 >> 1 < 179 || mouseX_12CAE0_12CAD0 >> 1 > 254 || mouseY_12CAE2_12CAD2 >> 1 < 43 || mouseY_12CAE2_12CAD2 >> 1 > 82)
						{
							if (mouseX_12CAE0_12CAD0 >> 1 < 179 || mouseX_12CAE0_12CAD0 >> 1 > 254 || mouseY_12CAE2_12CAD2 >> 1 < 95 || mouseY_12CAE2_12CAD2 >> 1 > 134)
							{
								if (mouseX_12CAE0_12CAD0 >> 1 >= 281 && mouseX_12CAE0_12CAD0 >> 1 <= 304)
								{
									if (mouseY_12CAE2_12CAD2 >> 1 >= 115 && mouseY_12CAE2_12CAD2 >> 1 <= 142)
										endCycle = true;
								}
							}
							else
							{
								str_AE408_AE3F8->var_u8_151 = 3;
							}
						}
						else
						{
							str_AE408_AE3F8->var_u8_151 = 2;
						}
					}
					else
					{
						str_AE408_AE3F8->var_u8_151 = 1;
					}
				}
				else
				{
					str_AE408_AE3F8->var_u8_151 = 0;
				}
				byte_12CAE4_12CAD4 &= ~1u;
			}
			if ((typeResolution_12F02E_12F01E & 1) != 0)
			{
				CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
			}
			else
			{
				CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
			}
			if ((typeResolution_12F02E_12F01E & 1) != 0)
				DrawBitmap_60CE0_611F0(
					2 * asc_4A8F4_4AC34[2 * str_AE408_AE3F8->var_u8_151 + 1],
					2 * asc_4A8F4_4AC34[2 * str_AE408_AE3F8->var_u8_151 + 2],
					&begLangSprTab_12CB58_2EAB58_2EAB48[str_AE408_AE3F8->var_u8_151 + 1]);
			else
				DrawBitmap_60D18_61228(
					2 * asc_4A8F4_4AC34[2 * str_AE408_AE3F8->var_u8_151 + 1],
					2 * asc_4A8F4_4AC34[2 * str_AE408_AE3F8->var_u8_151 + 2],
					&begLangSprTab_12CB58_2EAB58_2EAB48[str_AE408_AE3F8->var_u8_151 + 1]);
			if ((typeResolution_12F02E_12F01E & 1) != 0)
				Blit_5CDA0_5D2B0();
			else
				Blit_599B0_59EC0(480);
			dword_12CBB0_12CBA0++;
		} while (!endCycle);
		FadeInOut_61CC0_621D0(0, 0x10u, 0);
		if (!byte_90B23)
			sub_5C05C_5C56C(0);
        pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
		byte_12CAE4_12CAD4 &= ~1u;
		file = DataFileIO::CreateOrOpenFile(FixPath(filename), 546);
		if (file != nullptr)
		{
			FileWrite_62ED0_633E0(file, &str_AE408_AE3F8->var_u8_151, 1);
			DataFileIO::Close(file);
		}
	}
	switch (str_AE408_AE3F8->var_u8_151)
	{
	case 0:
		sub_40440_40780(&pathStrArray[PSdataetextdat]);
		break;
	case 1:
		sub_40440_40780(&pathStrArray[PSdataftextdat]);
		break;
	case 2:
		sub_40440_40780(&pathStrArray[PSdatagtextdat]);
		break;
	case 3:
		sub_40440_40780(&pathStrArray[PSdataitextdat]);
		break;
	default:
		break;
	}
	sub_61610_61B20(&pathStrArray_21AB80_21AEC0[PSdatascreenslangsprdat]);
	sub_44700_44A40((char*)begTextDat_AE41C_AE40C_26C41C_26C40C, dword_AE238_AE228, 80);
	mainMenuSelector_12CBCE_12CBBE = 1;
	byte_12CBD5_12CBC5 &= ~1u;
}

//----- (0004F8D0) --------------------------------------------------------
int sub_4F8D0_sub_4FC10(int a1, void (*a2)())
{
  int v2; // ebx
  __int16 v3; // si
  __int16 v4; // cx
  __int16 v5; // ax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax

  //fix
  v5 = 0;
  //fix

  v2 = 0;
  v3 = 0;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begScreenBackup_12CBA4_2EABA4_2EAB94, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begScreenBackup_12CBA4_2EABA4_2EAB94, 0x1E0u);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sprintf(pathBuffer_9ADC8, "intro\\scroll.dat");
  dword_AC5C4 = (int (*)(_DWORD))sub_50470;
  word_90026 = 0;
  PlayInfoFmv_107C0(0, 0, (int)dword_4A17C);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begWscreen_2ECFF4_2ECFE4, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begWscreen_2ECFF4_2ECFE4, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  HIBYTE(v4) = 0;
  dword_AC5C4 = 0;
  if ( !byte_90B23 )
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  sub_513E0();
  sub_51360(80, 73, 159, 48);
  do
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    {
      HIBYTE(v4) = BYTE1(begWscreen_2ECFF4_2ECFE4);
      CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
    }
    else
    {
      CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
    }
    LOBYTE(v4) = byte_90B23;
    if ( !byte_90B23 || (byte_90B23 & 0x23) != 0 && (v3 & 3) == 0 )
      sub_50770_50AB0();
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(136, 210, &begMmSprTab_12CB04_2EAB04_2EAAF4[5]);
    else
      DrawBitmap_60D18_61228(136, 210, &begMmSprTab_12CB04_2EAB04_2EAAF4[5]);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      DrawBitmap_60CE0_611F0(480, 210, &begMmSprTab_12CB04_2EAB04_2EAAF4[6]);
    else
      DrawBitmap_60D18_61228(480, 210, &begMmSprTab_12CB04_2EAB04_2EAAF4[6]);
    if ( a2 )
      a2();
    if ( (byte_12CAE4_12CAD4 & 1) != 0 || pressedKeys_12EEF0_12EEE0[1] || pressedKeys_12EEF0_12EEE0[28])//byte_12EEF1_12EEE1 ESC byte_12EF0C Enter
    {
      v7 = mouseX_12CAE0_12CAD0 >> 1;
      if ( v7 >= 68 && v7 <= 81 && (v8 = mouseY_12CAE2_12CAD2 >> 1, v8 >= 106) && v8 <= 116 || pressedKeys_12EEF0_12EEE0[28])//byte_12EF0C Enter
      {
        v2 = 1;
        a1 = 1;
      }
      else
      {
        v9 = mouseX_12CAE0_12CAD0 >> 1;
        if ( v9 >= 240 && v9 <= 250 && (v10 = mouseY_12CAE2_12CAD2 >> 1, v10 >= 105) && v10 <= 115 || pressedKeys_12EEF0_12EEE0[1])//byte_12EEF1_12EEE1 ESC
        {
          v2 = 1;
          a1 = 0;
        }
      }
      HIBYTE(v4) = 0;
      mouseLeftButton_12EFDE_12EFCE = 0;
      byte_12CAE4_12CAD4 &= ~1u;
    }
    if ( (byte_90B23 & 0x23) != 0 )
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        DrawBitmap_60CE0_611F0(mouse_9AD90.x, mouse_9AD90.y, &begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
      else
        DrawBitmap_60D18_61228(mouse_9AD90.x, mouse_9AD90.y, &begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
    }
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
    ++v3;
  }
  while ( !v2 );
  sub_51400();
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begScreenBackup_12CBA4_2EABA4_2EAB94, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begScreenBackup_12CBA4_2EABA4_2EAB94, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  pressedKeys_12EEF0_12EEE0[1] = 0;//byte_12EEF1_12EEE1 ESC
  byte_12CAE4_12CAD4 &= 0xBEu;
  pressedKeys_12EEF0_12EEE0[28] = 0;//byte_12EF0C Enter
  return a1;
}
// 4FA6D: variable 'v5' is possibly undefined
// 4A17C: using guessed type int dword_4A17C[6];
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 9AD90: using guessed type int dmouse_9AD90.x;
// AC5C4: using guessed type int (*dword_AC5C4)(_DWORD);
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12CAE0: using guessed type __int16 mouseX_12CAE0_12CAD0;
// 12CAE2: using guessed type __int16 mouseY_12CAE2_12CAD2;
// 12CAE4: using guessed type char byte_12CAE4_12CAD4;
// 12CAEC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CB04: using guessed type int begMmSprTab_12CB04_2EAB04_2EAAF4;
// 12CBA4: using guessed type int begScreenBackup_12CBA4_2EABA4_2EAB94;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12EEF1: using guessed type char byte_12EEF1_12EEE1;
// 12EF0C: using guessed type char byte_12EF0C;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004FD20) --------------------------------------------------------
void sub_4FD20()
{
    //fix
    int a1 = 0;
    //fix

  int v2; // esi
  int v3; // esi

  if ( sub_4F8D0_sub_4FC10(a1, (void (*)())sub_4FE00) )
  {
    sub_4CAC0_4CE00();
    str_AE400_AE3F0[str_AE400_AE3F0->var_u16_8].str_13323[0].var_u8_13327 = 1;
    bool_96880 = true;
  }
  else
  {
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      CopyScreen_62FA8_634B8(begScreenBackup2_12CBA8_2EABA8_2EAB98, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
    else
      CopyScreen_62FC4_634D4(begScreenBackup2_12CBA8_2EABA8_2EAB98, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
    byte_12CBCD_12CBBD = 0;
    v2 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
    begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = (uint8_t*)begWscreen_2ECFF4_2ECFE4;
    begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v2;
    sub_4CB70();
    v3 = (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
    begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = (uint8_t*)begWscreen_2ECFF4_2ECFE4;
    begWscreen_2ECFF4_2ECFE4 = (uint8_t*)v3;
  }
  //return result;
}
// 96880: using guessed type int dword_96880;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE400: using guessed type int dword_AE400_AE3F0();
// 12CBA8: using guessed type int begScreenBackup2_12CBA8_2EABA8_2EAB98;
// 12CBCD: using guessed type char byte_12CBCD_12CBBD;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0004FE00) --------------------------------------------------------
void sub_4FE00()
{
  int v0; // eax

  ViewportResize_65EB0_663C0(65, 75, 189, 44);
  v0 = (int)*(unsigned __int8 *)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 46) >> 1;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    DrawBitmap_60CE0_611F0(189 - v0, 44 - ((int)*(unsigned __int8 *)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 47) >> 1), &begMmSprTab_12CB04_2EAB04_2EAAF4[7]);
  else
    DrawBitmap_60D18_61228(189 - v0, 44 - ((int)*(unsigned __int8 *)(begMmSprTab_12CB04_2EAB04_2EAAF4 + 47) >> 1), &begMmSprTab_12CB04_2EAB04_2EAAF4[7]);
  return ViewportResize_65EB0_663C0(0, 0, 320, 200);
}
// 12CB04: using guessed type int begMmSprTab_12CB04_2EAB04_2EAAF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

void sub_4FEB0()
{
    int v0; // eax
    int v1; // edi
    int v2; // esi
    char v3; // dh

    if (byte_93958)
    {
        v0 = dword_AE408_AE3F8();
        v1 = dword_AE400_AE3F0() + 9225;
        v2 = dword_AE400_AE3F0() + 13323;
        mainMenuSelector_12CBCE_12CBBE = 4;
        v3 = byte_12CBD5_12CBC5;
        qmemcpy((void*)(dword_AE400_AE3F0() + 9225), (const void*)(dword_AE400_AE3F0() + 13323), 0x800u);
        *(_BYTE*)(v1 + 2048) = *(_BYTE*)(v2 + 2048);
        LOWORD(v2) = *(_WORD*)(v0 + 17);
        byte_12CBD5_12CBC5 = v3 | 8;
        *(_WORD*)(v0 + 19) = v2;
    }
}

//----- (0004FF30) --------------------------------------------------------
void sub_4FF30()
{
    //fix
    int a1 = 0;
    //fix
  if ( byte_9687C )
  {
    byte_9687C = 0;
    byte_12CBD5_12CBC5 |= 8u;
    mainMenuSelector_12CBCE_12CBBE = 5;//play game
    bool_96880 = true;
  }
  else if ( sub_4F8D0_sub_4FC10(a1, (void (*)())sub_4FFE0) )
  {
    str_AE408_AE3F8->var_u16_17 = 0;
    mainMenuSelector_12CBCE_12CBBE = 5;
    memset((void*)(2049 * str_AE400_AE3F0->var_u16_8 + str_AE400_AE3F0 + 13323 + 1995), 0, 24);
    bool_96880 = true;
    byte_12CBD5_12CBC5 |= 8u;
  }
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 9687C: using guessed type char byte_9687C;
// 96880: using guessed type int dword_96880;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;

//----- (0004FFE0) --------------------------------------------------------
void sub_4FFE0()
{
  int v0; // eax
  char* v1; // [esp-4h] [ebp-1Ch]
  _DWORD v2[6]; // [esp+0h] [ebp-18h] BYREF

  sub_513A0(v2);
  v1 = dword_AE238_AE228[36];
  v0 = sub_51420((uint32*)&str_9688C, dword_AE238_AE228[36]);
  DrawText_51560((uint8*)&str_9688C, (__int16)((v2[4] - v0) / 2), 12, (char*)v1);
}
// 9688C: using guessed type int dword_9688C;
// AE2C8: using guessed type int dword_AE2C8;

//----- (00050030) --------------------------------------------------------
void sub_50030()//221030_
{
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begScreenBackup_12CBA4_2EABA4_2EAB94, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begScreenBackup_12CBA4_2EABA4_2EAB94, 0x1E0u);
  sprintf(pathBuffer_9ADC8, "intro\\scroll.dat");
  dword_AC5C4 = (int (*)(_DWORD))sub_50470;
  if ( !byte_90B23 )
    sub_5C05C_5C56C(0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  word_90026 = 0;
  PlayInfoFmv_107C0(0, 0, (int)dword_4A17C);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begWscreen_2ECFF4_2ECFE4, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begWscreen_2ECFF4_2ECFE4, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  if ( !byte_90B23 )
    sub_5C05C_5C56C(&begSptrsTab_12CAEC_2EAAEC_2EAADC[mainMenuSelector_12CBCE_12CBBE]);
  dword_AC5C4 = 0;
  sub_513E0();
  sub_51360(70, 73, 179, 48);
  sub_50D40(8, 25, 30, 0, str_AE408_AE3F8->var_u8_29, 255, 0, sub_50350, 1, (int)&str_9688C);
  byte_12CBD5_12CBC5 |= 0x20u;
  pressedKeys_12EEF0_12EEE0[28] = 0;//byte_12EF0C Enter
  byte_12CAE4_12CAD4 &= ~1u;
  sub_50D40(8, 25, 8, 0, str_AE408_AE3F8->var_u8_61, 255, 0, sub_503E0, 1, (int)&str_9688C);
  pressedKeys_12EEF0_12EEE0[28] = 0;//byte_12EF0C Enter
  byte_12CBD5_12CBC5 &= ~0x20u;
  byte_12CAE4_12CAD4 &= ~1u;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begScreenBackup_12CBA4_2EABA4_2EAB94, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begScreenBackup_12CBA4_2EABA4_2EAB94, begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 0x1E0u);
  mainMenuSelector_12CBCE_12CBBE = 2;
  uint8_t* tempBuffer = begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = tempBuffer;
  sub_4CB70();
  tempBuffer = begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  begBscreen_AE3FC_AE3EC_26C3FC_26C3EC = begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = tempBuffer;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begScreenBackup_12CBA4_2EABA4_2EAB94, begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begScreenBackup_12CBA4_2EABA4_2EAB94, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
  sub_51400();
}
// 4A17C: using guessed type int dword_4A17C[6];
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 90026: using guessed type __int16 word_90026;
// 90B23: using guessed type char byte_90B23;
// 9688C: using guessed type int dword_9688C;
// AC5C4: using guessed type int (*dword_AC5C4)(_DWORD);
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CAE4: using guessed type char byte_12CAE4_12CAD4;
// 12CAEC: using guessed type int begSptrsTab_12CAEC_2EAAEC_2EAADC;
// 12CBA4: using guessed type int begScreenBackup_12CBA4_2EABA4_2EAB94;
// 12CBCE: using guessed type char mainMenuSelector_12CBCE_12CBBE;
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12EF0C: using guessed type char byte_12EF0C;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00050350) --------------------------------------------------------
void sub_50350()
{
  int v0; // eax
  char* v1; // [esp-4h] [ebp-28h]
  _DWORD v2[9]; // [esp+0h] [ebp-24h] BYREF

  sub_513A0(v2);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  v1 = dword_AE238_AE228[34];
  v0 = sub_51420((uint32*)&str_9688C, dword_AE238_AE228[34]);
  DrawText_51560((uint8*)&str_9688C, (__int16)((v2[4] - v0) / 2), 10, (char*)v1);
}
// 9688C: using guessed type int dword_9688C;
// AE2C0: using guessed type int dword_AE2C0;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (000503E0) --------------------------------------------------------
void sub_503E0()
{
  int v0; // eax
  char* v1; // [esp-4h] [ebp-28h]
  _DWORD v2[9]; // [esp+0h] [ebp-24h] BYREF

  sub_513A0(v2);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    CopyScreen_62FA8_634B8(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0xC8u);
  else
    CopyScreen_62FC4_634D4(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, begWscreen_2ECFF4_2ECFE4, 0x1E0u);
  v1 = dword_AE238_AE228[35];
  v0 = sub_51420((uint32*)&str_9688C, dword_AE238_AE228[35]);
  DrawText_51560((uint8*)&str_9688C, (__int16)((v2[4] - v0) / 2), 10, (char*)v1);
}
// 9688C: using guessed type int dword_9688C;
// AE2C4: using guessed type int dword_AE2C4;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00050470) --------------------------------------------------------
_BYTE *sub_50470()
{
  _BYTE *v0; // ebx
  _BYTE *result; // eax
  int v2; // edx

  v0 = (_BYTE *)begScreenBackup_12CBA4_2EABA4_2EAB94;
  result = (_BYTE *)begWscreen_2ECFF4_2ECFE4;
  v2 = 0;
  do
  {
    if ( !*result )
      *result = *v0;
    ++v0;
    ++v2;
    ++result;
  }
  while ( (unsigned __int16)v2 < 0xFA00u );
  return result;
}
// 12CBA4: using guessed type int begScreenBackup_12CBA4_2EABA4_2EAB94;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (000504A0) --------------------------------------------------------
int sub_504A0()
{
  unsigned __int16 i; // bx
  int v1; // ecx
  int v2; // ecx
  int v3; // ecx
  int v4; // esi
  int result; // eax
  unsigned __int16 v6; // dx
  unsigned __int16 v7; // [esp+0h] [ebp-18h]
  unsigned __int16 v8; // [esp+4h] [ebp-14h]

  for ( i = 0; i < 0x100u; ++i )
  {
    //v1 = *(unsigned __int8 *)(3 * i + dword_12CB9C);
    v1 = begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C[i].red;
    v7 = v1 + 30 * v1 / 100;
    if ( v7 > 0x3Fu )
      LOBYTE(v7) = 63;
    //v2 = *(unsigned __int8 *)(dword_12CB9C + 3 * i + 1);
    v2 = begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C[i].green;
    v3 = 30 * v2 / 100 + v2;
    if ( (unsigned __int16)v3 > 0x3Fu )
      LOBYTE(v3) = 63;
    //v4 = *(unsigned __int8 *)(dword_12CB9C + 3 * i + 2);
    v4 = begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C[i].blue;
    v8 = v4 + 30 * v4 / 100;
    if ( v8 > 0x3Fu )
      LOBYTE(v8) = 63;
    LOBYTE(result) = sub_5CC70_5D180(begPalette_12CB9C_12CB8C_2EAB9C_2EAB8C, v7, v3, v8);
    v6 = i;
    *(_BYTE *)(begBrightTable_12CBAC_2EABAC_2EAB9C + v6) = result;
  }
  return result;
}
// 12CB9C: using guessed type int dword_12CB9C;
// 12CBAC: using guessed type int begBrightTable_12CBAC_2EABAC_2EAB9C;

bool sub_505A0_508E0()
{
  char pathBuffer[48];

  sprintf(pathBuffer, "%s%s\\sndsetup.inf", "C:", "\\carpet.cd");
  bool result = false;
  FILE* file = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 514);
  if (file == nullptr )
  {
    string_12C9C0_12C9B0[0] = zeroChar_A9990_A99A8;
    string_12C9E0_12C9D0[0] = zeroChar_A9990_A99A8;
    string_12CA9E_12CA8E[0] = zeroChar_A9990_A99A8;
    string_12CA80_12CA70[0] = zeroChar_A9990_A99A8;
    string_12CAB2_12CAA2[0] = zeroChar_A9990_A99A8;
    string_12CA8A_12CA7A[0] = zeroChar_A9990_A99A8;
    string_12CAC6_12CAB6[0] = zeroChar_A9990_A99A8;
    strcpy(string_12C9A0_12C990, "NONE");
    string_12CAD0_12CAC0[0] = zeroChar_A9990_A99A8;
    string_12CAA8_12CA98[0] = zeroChar_A9990_A99A8;
    string_12CA94_12CA84[0] = zeroChar_A9990_A99A8;
    strcpy(string_12CA00_12C9F0, "NONE");
  }
  else
  {
    DataFileIO::Close(file);
    sprintf(pathBuffer, "%s%s\\sndsetup.dat", "C:", "\\carpet.cd");
    file = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 514);
    if (file != nullptr )
    {
      DataFileIO::Read(file, (uint8_t*)string_12C9A0_12C990, 32);
      DataFileIO::Read(file, (uint8_t*)string_12C9C0_12C9B0, 32);
      DataFileIO::Read(file, (uint8_t*)string_12CA00_12C9F0, 32);
      DataFileIO::Read(file, (uint8_t*)string_12C9E0_12C9D0, 32);
      DataFileIO::Read(file, (uint8_t*)string_12CA9E_12CA8E, 10);
      DataFileIO::Read(file, (uint8_t*)string_12CA80_12CA70, 10);
      DataFileIO::Read(file, (uint8_t*)string_12CAB2_12CAA2, 10);
      DataFileIO::Read(file, (uint8_t*)string_12CA8A_12CA7A, 10);
      DataFileIO::Read(file, (uint8_t*)string_12CAC6_12CAB6, 10);
      DataFileIO::Read(file, (uint8_t*)string_12CAD0_12CAC0, 10);
      DataFileIO::Read(file, (uint8_t*)string_12CAA8_12CA98, 10);
      DataFileIO::Read(file, (uint8_t*)string_12CA94_12CA84, 10);
      result = true;
      DataFileIO::Close(file);
    }
  }
  strcpy(string_12CABC_12CAAC,string_A99A0_A99B8);//fix it
  string_12CA20_12CA10[0] = zeroChar_A9990_A99A8;
  return result;
}

void sub_50770_50AB0()
{
  if ( byte_12CBCF_12CBBF )
  {
    if ( byte_12CBCF_12CBBF <= 1u )
    {
      if (pressedKeys_12EEF0_12EEE0[72])//byte_12EF38_12EF28 Up Arrow
      {
        byte_12CAE7_12CAD7 &= 0x7F;
        if ( (byte_12CAE8_12CAD8 & 1) != 0 )
          byte_12CAE7_12CAD7 &= 0xBF;
        else
          byte_12CAE7_12CAD7 |= 0x40;
        byte_12CAE8_12CAD8 |= 1u;
      }
      else
      {
        byte_12CAE7_12CAD7 &= 0xBF;
        if ( (byte_12CAE8_12CAD8 & 1) != 0 )
          byte_12CAE7_12CAD7 |= 0x80;
        else
          byte_12CAE7_12CAD7 &= 0x7F;
        byte_12CAE8_12CAD8 &= ~1u;
      }
      if (pressedKeys_12EEF0_12EEE0[80])//byte_12EF40_12EF30 Down Arrow
      {
        byte_12CAE8_12CAD8 &= 0xFB;
        if ( (byte_12CAE8_12CAD8 & 8) != 0 )
          byte_12CAE8_12CAD8 &= 0xFD;
        else
          byte_12CAE8_12CAD8 |= 2;
        byte_12CAE8_12CAD8 |= 8u;
      }
      else
      {
        byte_12CAE8_12CAD8 &= 0xFD;
        if ( (byte_12CAE8_12CAD8 & 8) != 0 )
          byte_12CAE8_12CAD8 |= 4;
        else
          byte_12CAE8_12CAD8 &= 0xFB;
        byte_12CAE8_12CAD8 &= ~8u;
      }
      if (pressedKeys_12EEF0_12EEE0[75])//byte_12EF3B_12EF2B Left Arrow
      {
        byte_12CAE7_12CAD7 &= 0xFD;
        if ( (byte_12CAE7_12CAD7 & 4) != 0 )
          byte_12CAE7_12CAD7 &= 0xFE;
        else
          byte_12CAE7_12CAD7 |= 1;
        byte_12CAE7_12CAD7 |= 4u;
      }
      else
      {
        byte_12CAE7_12CAD7 &= 0xFE;
        if ( (byte_12CAE7_12CAD7 & 4) != 0 )
          byte_12CAE7_12CAD7 |= 2;
        else
          byte_12CAE7_12CAD7 &= 0xFD;
        byte_12CAE7_12CAD7 &= ~4u;
      }
      if (pressedKeys_12EEF0_12EEE0[77])//byte_12EF3D Right Arrow
      {
        byte_12CAE7_12CAD7 &= 0xEF;
        if ( (byte_12CAE7_12CAD7 & 0x20) != 0 )
          byte_12CAE7_12CAD7 &= 0xF7;
        else
          byte_12CAE7_12CAD7 |= 8;
        byte_12CAE7_12CAD7 |= 0x20u;
      }
      else
      {
        byte_12CAE7_12CAD7 &= 0xF7;
        if ( (byte_12CAE7_12CAD7 & 0x20) != 0 )
          byte_12CAE7_12CAD7 |= 0x10;
        else
          byte_12CAE7_12CAD7 &= 0xEF;
        byte_12CAE7_12CAD7 &= ~0x20u;
      }
      if (pressedKeys_12EEF0_12EEE0[71])//byte_12EF37_12EF27 home
      {
        byte_12CAE5_12CAD5 &= 0xDF;
        if ( (byte_12CAE5_12CAD5 & 0x40) != 0 )
          byte_12CAE5_12CAD5 &= 0xEF;
        else
          byte_12CAE5_12CAD5 |= 0x10;
        byte_12CAE5_12CAD5 |= 0x40u;
      }
      else
      {
        byte_12CAE5_12CAD5 &= 0xEF;
        if ( (byte_12CAE5_12CAD5 & 0x40) != 0 )
          byte_12CAE5_12CAD5 |= 0x20;
        else
          byte_12CAE5_12CAD5 &= 0xDF;
        byte_12CAE5_12CAD5 &= ~0x40u;
      }
      if (pressedKeys_12EEF0_12EEE0[73])//byte_12EF39_12EF29 PgUp
      {
        byte_12CAE6_12CAD6 &= 0xFE;
        if ( (byte_12CAE6_12CAD6 & 2) != 0 )
          byte_12CAE5_12CAD5 &= ~0x80u;
        else
          byte_12CAE5_12CAD5 |= 0x80u;
        byte_12CAE6_12CAD6 |= 2u;
      }
      else
      {
        byte_12CAE5_12CAD5 &= ~0x80u;
        if ( (byte_12CAE6_12CAD6 & 2) != 0 )
          byte_12CAE6_12CAD6 |= 1u;
        else
          byte_12CAE6_12CAD6 &= ~1u;
        byte_12CAE6_12CAD6 &= ~2u;
      }
      if (pressedKeys_12EEF0_12EEE0[79])//byte_12EF3F End
      {
        byte_12CAE6_12CAD6 &= 0xF7;
        if ( (byte_12CAE6_12CAD6 & 0x10) != 0 )
          byte_12CAE6_12CAD6 &= 0xFB;
        else
          byte_12CAE6_12CAD6 |= 4;
        byte_12CAE6_12CAD6 |= 0x10u;
      }
      else
      {
        byte_12CAE6_12CAD6 &= 0xFB;
        if ( (byte_12CAE6_12CAD6 & 0x10) != 0 )
          byte_12CAE6_12CAD6 |= 8;
        else
          byte_12CAE6_12CAD6 &= 0xF7;
        byte_12CAE6_12CAD6 &= ~0x10u;
      }
      if ( !pressedKeys_12EEF0_12EEE0[81])//byte_12EF41//PgDn
      {
        byte_12CAE6_12CAD6 &= 0xDF;
        if (byte_12CAE6_12CAD6 >= 0 )
          byte_12CAE6_12CAD6 &= 0xBF;
        else
          byte_12CAE6_12CAD6 |= 0x40;
        byte_12CAE6_12CAD6 &= ~0x80u;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
        return;
      }
      byte_12CAE6_12CAD6 &= 0xBF;
      if (byte_12CAE6_12CAD6 >= 0 )
        byte_12CAE6_12CAD6 |= 0x20;
      else
        byte_12CAE6_12CAD6 &= 0xDF;
      byte_12CAE6_12CAD6 |= 0x80u;
      mouseRightButton_12EFDC_12EFCC = 0;
      mouseLeftButton_12EFDE_12EFCE = 0;
    }
    else
    {
      if ( byte_12CBCF_12CBBF != 2 )
      {
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
        return;
      }
      if ( (byte_90B23 & 0x23) != 0 )
        sub_3FCA0_3FFE0(2, 0, 0, 640, 400, 4, 4);
      mouse_12CADC = mouse_9AD90;
      mouseX_12CAE0_12CAD0 = mouseX_9AD8C;
      mouseY_12CAE2_12CAD2 = mouseY_9AD8E;
      if ( mouseLeftButton2_12EFE4_12EFD4 )
      {
        byte_12CAE4_12CAD4 &= 0xFD;
        if ( (byte_12CAE4_12CAD4 & 4) != 0 )
          byte_12CAE4_12CAD4 &= 0xFE;
        else
          byte_12CAE4_12CAD4 |= 1;
        byte_12CAE4_12CAD4 |= 4u;
      }
      else
      {
        byte_12CAE4_12CAD4 &= 0xFE;
        if ( (byte_12CAE4_12CAD4 & 4) != 0 )
          byte_12CAE4_12CAD4 |= 2;
        else
          byte_12CAE4_12CAD4 &= 0xFD;
        byte_12CAE4_12CAD4 &= ~4u;
      }
      if ( mouseRightButton2_12EFE2_12EFD2 )
      {
        byte_12CAE4_12CAD4 &= 0x7F;
        if ( (byte_12CAE5_12CAD5 & 1) != 0 )
          byte_12CAE4_12CAD4 &= 0xBF;
        else
          byte_12CAE4_12CAD4 |= 0x40;
        byte_12CAE5_12CAD5 |= 1u;
      }
      else
      {
        byte_12CAE4_12CAD4 &= 0xBF;
        if ( (byte_12CAE5_12CAD5 & 1) != 0 )
          byte_12CAE4_12CAD4 |= 0x80;
        else
          byte_12CAE4_12CAD4 &= 0x7F;
        byte_12CAE5_12CAD5 &= ~1u;
      }
      if ( word_12EFE0_12EFD0 )
      {
        byte_12CAE4_12CAD4 &= 0xEF;
        if ( (byte_12CAE4_12CAD4 & 0x20) != 0 )
          byte_12CAE4_12CAD4 &= 0xF7;
        else
          byte_12CAE4_12CAD4 |= 8;
        byte_12CAE4_12CAD4 |= 0x20u;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
      }
      else
      {
        byte_12CAE4_12CAD4 &= 0xF7;
        if ( (byte_12CAE4_12CAD4 & 0x20) != 0 )
        {
          byte_12CAE4_12CAD4 |= 0x10;
        }
        else
        {
          byte_12CAE4_12CAD4 &= 0xEF;
        }
        byte_12CAE4_12CAD4 &= ~0x20u;
        mouseRightButton_12EFDC_12EFCC = 0;
        mouseLeftButton_12EFDE_12EFCE = 0;
      }
    }
  }
  else
  {
    byte_12CAE7_12CAD7 &= 0x24u;
    byte_12CAE8_12CAD8 &= 0xF9u;
    mouseRightButton_12EFDC_12EFCC = 0;
    mouseLeftButton_12EFDE_12EFCE = 0;
  }
}

//----- (00050D40) --------------------------------------------------------
bool sub_50D40(//221D40_
        int a1,
        __int16 a2,
        __int16 a3,
        char *a4,
        char *a5,
        char a6,
        int a7,
        void (*a8)(void),
        char a9,
        int a10)
{
  char *v10; // ebx
  unsigned int v11; // ebp
  char v12; // al
  char v13; // al
  unsigned int v14; // esi
  int v15; // esi
  int v16; // eax
  char *v17; // esi
  char *v18; // edi
  __int16 v19; // dx
  char v20; // al
  char v21; // al
  char v22; // al
  int v23; // eax
  int v24; // eax
  int v25; // eax
  int v26; // eax
  int v27; // esi
  int v28; // eax
  int v30; // [esp-14h] [ebp-B4h]
  int v31; // [esp-10h] [ebp-B0h]
  char v32[100]; // [esp+0h] [ebp-A0h] BYREF
  int v33[6]; // [esp+64h] [ebp-3Ch] BYREF
  //int v34; // [esp+74h] [ebp-2Ch]
  unsigned int v35; // [esp+7Ch] [ebp-24h]
  char v36[4]; // [esp+80h] [ebp-20h] BYREF
  int v37; // [esp+84h] [ebp-1Ch]
  int v38; // [esp+88h] [ebp-18h]
  char v39; // [esp+8Ch] [ebp-14h]

  //fix
  //v34 = 0;
  //fix

  v10 = a5;
  v11 = (unsigned int)&a5[strlen(a5)];
  v35 = (unsigned int)&a5[a3];
  v39 = 1;
  v37 = 0;
  v38 = 0;
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  sub_513A0((uint32*)v33);
  if ( a4 )
    v37 = sub_51420((_DWORD *)a10, a4);
  v37 += a1;
  do
  {
    if ( mouseLeftButton_12EFDE_12EFCE )
      v38 = 1;
    if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x36u )
    {
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0xFu )
      {
        if ( lastPressedKey_12EF70_12EF60 )
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 1u )
          {
            v38 = 2;
            goto LABEL_73;
          }
          if ( lastPressedKey_12EF70_12EF60 == 14 )
          {
            if ( v10 <= a5 )
              goto LABEL_73;
LABEL_71:
            --v10;
LABEL_72:
            --v11;
            sub_51330((int)v10, 1);
            goto LABEL_73;
          }
        }
      }
      else
      {
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0xFu )
          goto LABEL_73;
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 0x1Cu )
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x1Cu )
          {
            v38 = 1;
            goto LABEL_73;
          }
          if ( lastPressedKey_12EF70_12EF60 == 42 )
            goto LABEL_73;
        }
      }
    }
    else
    {
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x36u )
        goto LABEL_73;
      if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x4Du )
      {
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 >= 0x47u )
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x47u )
          {
            v10 = a5;
            goto LABEL_73;
          }
          if ( lastPressedKey_12EF70_12EF60 == 75 )
          {
            if ( v10 > a5 )
              --v10;
            goto LABEL_73;
          }
        }
      }
      else
      {
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x4Du )
        {
          if ( (unsigned int)v10 < v11 )
            ++v10;
          goto LABEL_73;
        }
        if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 < 0x52u )
        {
          if ( lastPressedKey_12EF70_12EF60 == 79 )
          {
            v10 = (char *)v11;
            goto LABEL_73;
          }
        }
        else
        {
          if ( (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x52u )
            goto LABEL_73;
          if ( lastPressedKey_12EF70_12EF60 == 83 )
          {
            if ( (unsigned int)v10 >= v11 )
              goto LABEL_73;
            goto LABEL_72;
          }
        }
      }
    }
    if ( (byte_12CBD5_12CBC5 & 0x20) == 0
      || (!pressedKeys_12EEF0_12EEE0[42] && !pressedKeys_12EEF0_12EEE0[54] //byte_12EF1A shift + 8/*  byte_12EF26 6/^/Right
        ? (v12 = byte_4A84B[(unsigned __int8)lastPressedKey_12EF70_12EF60])
        : (v12 = byte_4A884[(unsigned __int8)lastPressedKey_12EF70_12EF60]),
          v12) )
    {
      if ( lastPressedKey_12EF70_12EF60 && (unsigned __int8)lastPressedKey_12EF70_12EF60 <= 0x39u && (v39 && v11 < v35 || !v39 && (unsigned int)v10 < v35) )
      {
        v13 = pressedKeys_12EEF0_12EEE0[42] || pressedKeys_12EEF0_12EEE0[54]  //byte_12EF1A shift + 8/*  byte_12EF26 6/^/Right
            ? byte_4A93E[(unsigned __int8)lastPressedKey_12EF70_12EF60]
            : byte_4A905[(unsigned __int8)lastPressedKey_12EF70_12EF60];
        v36[0] = v13;
        v36[1] = 0;
        if ( v39 )
        {
          sub_512D0(v10, v36);
          if ( (unsigned int)v10 < v35 )
          {
            ++v10;
            ++v11;
          }
        }
        else
        {
          v14 = v35;
          *v10 = v13;
          if ( (unsigned int)v10 < v14 )
            ++v10;
          if ( (unsigned int)v10 > v11 )
          {
            v11 = (unsigned int)v10;
            *v10 = 0;
          }
        }
        v15 = a9 == 1 ? v33[4] - 2 * (__int16)a1 : v33[4] - (__int16)a1;
        if ( sub_51420((_DWORD *)a10, a5) >= v15 && v39 && v10 > a5 )
          goto LABEL_71;
      }
    }
LABEL_73:
    lastPressedKey_12EF70_12EF60 = 0;
    a8();
    *(_BYTE *)(a10 + 6) = a6;
    DrawText_51560((_BYTE *)a10, (__int16)a1, a2, a4);
    if ( a9 )
    {
      if ( a9 == 1 )
      {
        v16 = sub_51420((_DWORD *)a10, a5);
        DrawText_51560((_BYTE *)a10, (__int16)((v33[4] - v16) / 2), a2, a5);
      }
    }
    else
    {
      DrawText_51560((_BYTE *)a10, (__int16)v37, a2, a5);
    }
    v17 = a5;
    v18 = v32;
    v19 = (_WORD)v10 - (_WORD)a5;
    do
    {
      v20 = *v17;
      *v18 = *v17;
      if ( !v20 )
        break;
      v21 = v17[1];
      v17 += 2;
      v18[1] = v21;
      v18 += 2;
    }
    while ( v21 );
    v22 = v32[v19];
    if ( !v22 )
      v22 = 32;
    v32[v19] = 0;
    v23 = *(_DWORD *)a10 + 6 * (v22 - 32);
    v31 = *(unsigned __int8 *)(v23 + 4);
    v30 = v33[2] + *(unsigned __int8 *)(v23 + 5) + a2 - 2;
    if ( a9 )
    {
      v26 = sub_51420((_DWORD *)a10, a5);
      v27 = (v33[4] - v26) / 2;
      v28 = sub_51420((_DWORD *)a10, v32);
      v25 = v33[0] + v27 + v28;
    }
    else
    {
      v24 = sub_51420((_DWORD *)a10, v32);
      v25 = v33[0] + (__int16)v37 + v24;
    }
    sub_51ECC(v25, v30, v31, 2, 255, 0);
    if ( (typeResolution_12F02E_12F01E & 1) != 0 )
      Blit_5CDA0_5D2B0();
    else
      Blit_599B0_59EC0(480);
  }
  while ( !(_WORD)v38 );
  mouseRightButton_12EFDC_12EFCC = 0;
  mouseLeftButton_12EFDE_12EFCE = 0;
  lastPressedKey_12EF70_12EF60 = 0;
  pressedKeys_12EEF0_12EEE0[1] = 0; //byte_12EEF1_12EEE1 ESC
  pressedKeys_12EEF0_12EEE0[28] = 0; //byte_12EF0C Enter
  return (_WORD)v38 == 1;
}
// 12CBD5: using guessed type char byte_12CBD5_12CBC5;
// 12EEF1: using guessed type char byte_12EEF1_12EEE1;
// 12EF0C: using guessed type char byte_12EF0C;
// 12EF1A: using guessed type char byte_12EF1A;
// 12EF26: using guessed type char byte_12EF26;
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EFDC: using guessed type __int16 mouseRightButton_12EFDC_12EFCC;
// 12EFDE: using guessed type __int16 mouseLeftButton_12EFDE_12EFCE;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;
// 50D40: using guessed type char var_A0[100];

//----- (000512D0) --------------------------------------------------------
char *sub_512D0(char *a1, const char *a2)
{
  __int16 v2; // si

  v2 = strlen(a2);
  memmove(&a1[v2], a1, strlen(a1) + 1);
  qmemcpy(a1, a2, v2);
  return a1;
}
// 660B5: using guessed type _DWORD memmove(_DWORD, _DWORD, _DWORD);

//----- (00051330) --------------------------------------------------------
int sub_51330(int a1, __int16 a2)
{
  return (int)memmove((void*)a1, (void*)(a1 + a2), strlen((const char *)(a1 + a2)) + 1);
}
// 660B5: using guessed type _DWORD memmove(_DWORD, _DWORD, _DWORD);

//----- (00051360) --------------------------------------------------------
void sub_51360(int a1, int a2, int a3, int a4)
{
  array_12C970[0] = a1;
  array_12C970[3] = a2 + a4;
  array_12C970[2] = a2;
  array_12C970[4] = a3;
  array_12C970[1] = a1 + a3;
  array_12C970[5] = a4;
}
// 12C970: using guessed type int dword_12C970;
// 12C974: using guessed type int dword_12C974;
// 12C978: using guessed type int dword_12C978;
// 12C97C: using guessed type int dword_12C97C;
// 12C980: using guessed type int dword_12C980;
// 12C984: using guessed type int dword_12C984;

//----- (000513A0) --------------------------------------------------------
_DWORD *sub_513A0(_DWORD *a1)
{
  _DWORD *result; // eax

  result = a1;
  a1[0] = array_12C970[0];
  a1[1] = array_12C970[1];
  a1[2] = array_12C970[2];
  a1[3] = array_12C970[3];
  a1[4] = array_12C970[4];
  a1[5] = array_12C970[5];
  return result;
}
// 12C970: using guessed type int dword_12C970;
// 12C974: using guessed type int dword_12C974;
// 12C978: using guessed type int dword_12C978;
// 12C97C: using guessed type int dword_12C97C;
// 12C980: using guessed type int dword_12C980;
// 12C984: using guessed type int dword_12C984;

//----- (000513E0) --------------------------------------------------------
void sub_513E0()//2223E0_
{
  dword_12CA78 = 0;
  qmemcpy(string_12C988, array_12C970, 0x18u);
}
// 12C970: using guessed type int dword_12C970;
// 12CA78: using guessed type int dword_12CA78;

//----- (00051400) --------------------------------------------------------
void sub_51400()
{
  dword_12CA78 = 0;
  qmemcpy(array_12C970, string_12C988, 0x18u);
}
// 12C970: using guessed type int dword_12C970;
// 12CA78: using guessed type int dword_12CA78;

//----- (00051420) --------------------------------------------------------
int sub_51420(_DWORD *a1, char *a2)
{
  char *v2; // eax
  __int16 v3; // bx
  __int16 v4; // dx
  char v5; // cl

  v2 = a2;
  v3 = 0;
  v4 = 0;
  if ( *a2 )
  {
    do
    {
      v5 = *v2;
      if ( *v2 <= 31 )
      {
        if ( v5 == 10 )
        {
          if ( v4 > v3 )
            v3 = v4;
          v4 = 0;
        }
      }
      else
      {
        v4 += *(unsigned __int8 *)(6 * (v5 - 32) + *a1 + 4) - 1;
      }
    }
    while ( *++v2 );
  }
  if ( v4 > v3 )
    return v4;
  return v3;
}

//----- (00051480) --------------------------------------------------------
void sub_51480_517C0(Type_dword_96884* a1x, TypeStrFont* a2x, TColor* colorBuffer)//222480_
{
  sub_519E0_51D20(a2x);
  //*(uint8_t**)a1 = *a2 + 6;
  a1x->next = &a2x->bTab[1];
  a1x->var8_6 = sub_5CC70_5D180(colorBuffer, 0xFFu, 0xFFu, 0xFFu);
  a1x->var8_4 = 3;
  a1x->var8_5 = 0;//fix
  a1x->var8_7 = sub_5CC70_5D180(colorBuffer, 0, 0, 0);
}

//----- (00051560) --------------------------------------------------------
void DrawText_51560(_BYTE *a1, int a2, __int16 a3, char* text)//222560_
{
  int v4; // edi
  char* v5; // ebx
  unsigned __int8 v6; // ah
  char v7; // al
  char v8; // al
  int v9; // eax
  int v10; // ebp

  v4 = a2;
  v5 = text;
  if ( text )
  {
    while ( 1 )
    {
      v6 = *v5;
      if ( !*v5 )
        break;
      if ( v6 >= ' ')
      {
        v9 = 6 * (unsigned __int8)(v6 - ' ');
        ++v5;
        v10 = v9 + *(_DWORD *)a1;
        if ( (a1[4] & 0x10) != 0 )
        {
          if ( *(v5 - 1) != ' ')
            DrawBitmap_60D18_61228(v4, a3, (TypeTab*)(char*)(v9 + *(_DWORD *)a1));
          v4 += *(unsigned __int8 *)(v10 + 4) - 2;
        }
        else
        {
          sub_51650((int)a1, (__int16)v4, a3, (v9 + *(_DWORD *)a1));
          v4 += *(unsigned __int8 *)(v10 + 4) - 1;
        }
      }
      else
      {
        switch ( v6 )
        {
          case 1u:
            v7 = *++v5;
            a1[6] = v7;
            break;
          case 2u:
            v8 = *++v5;
            a1[7] = v8;
            break;
          case 3u:
            a1[4] |= 3u;
            break;
          case 4u:
            a1[4] &= 0xFCu;
            break;
          case 5u:
            a1[4] |= 5u;
            break;
          case 6u:
            a1[4] &= 0xFAu;
            break;
          case 0xAu:
            v4 = a2;
            a3 += *(unsigned __int8 *)(*(_DWORD *)a1 + 5);
            break;
          default:
            break;
        }
        ++v5;
      }
    }
  }
}
// 51578: control flows out of bounds to 4D39E

//----- (00051650) --------------------------------------------------------
__int16 sub_51650(int a1, int a2, __int16 a3, int a4)//222650_
{
  int v4; // edi
  __int16 v5; // cx
  unsigned __int8 v6; // dh
  int v7; // eax
  unsigned __int8 v8; // dl
  __int16 v9; // bx
  int v10; // edi
  _BYTE *v11; // edx
  char *v12; // ecx
  int v13; // ecx
  int v14; // ebx
  _BYTE *v15; // ebp
  _BYTE *v16; // eax
  char v17; // ch
  int v18; // ecx
  _BOOL1 v19; // zf
  int v20; // edx
  unsigned __int8 v22; // ch
  char v23; // cl
  unsigned __int8 v24; // cl
  int v25; // edi
  char *v26; // eax
  char *v27; // eax
  char v28; // ch
  int v30; // [esp+8h] [ebp-40h]
  _BYTE *v31; // [esp+Ch] [ebp-3Ch]
  _BYTE *v32; // [esp+10h] [ebp-38h]
  char *v33; // [esp+14h] [ebp-34h]
  __int16 v34; // [esp+1Ch] [ebp-2Ch]
  int v35; // [esp+24h] [ebp-24h]
  unsigned __int8 v36; // [esp+28h] [ebp-20h]
  unsigned __int8 v37; // [esp+2Ch] [ebp-1Ch]
  unsigned __int8 v38; // [esp+30h] [ebp-18h]
  unsigned __int8 v39; // [esp+34h] [ebp-14h]

  LOWORD(v4) = array_12C970[0] + a2;
  v5 = array_12C970[2] + a3;
  v6 = *(_BYTE *)(a4 + 4);
  v7 = -a2;
  v8 = *(_BYTE *)(a4 + 5);
  if ( (-(__int16)a2 & 0x8000u) != 0 || (_WORD)a2 == 0 )
  {
    v37 = 0;
  }
  else
  {
    if ( (__int16)v7 >= v6 )
      return v7;
    v37 = -(char)a2;
  }
  LOWORD(v7) = v6 + (_WORD)v4 - array_12C970[1];
  if ( (__int16)v7 > 0 )
  {
    if ( (__int16)v7 >= v6 )
      return v7;
    v6 = array_12C970[1] - v4;
  }
  v39 = v6;
  LOWORD(v7) = -a3;
  if ( a3 >= 0 )
  {
    LOBYTE(v9) = 0;
  }
  else
  {
    if ( (__int16)v7 >= v8 )
      return v7;
    LOBYTE(v9) = -(char)a3;
  }
  LOWORD(v7) = v5 + v8 - array_12C970[3];
  if ( (__int16)v7 > 0 )
  {
    if ( (__int16)v7 >= v8 )
      return v7;
    v8 = array_12C970[3] - v5;
  }
  v4 = (__int16)v4;
  v36 = v8 - v9;
  v38 = v6 - v37;
  v11 = (_BYTE *)(v37 + (__int16)v4 + begWscreen_2ECFF4_2ECFE4 + scrWidth_12EFF0_12EFE0 * (v5 + (unsigned __int8)v9));
  v7 = *(_DWORD *)a4;
  v34 = scrWidth_12EFF0_12EFE0;
  if ( (_BYTE)v9 )
  {
    HIBYTE(v9) = 0;
    do
    {
      while ( *(char *)v7 > 0 )
        v7 += *(char *)v7 + 1;
      v12 = (char *)v7++;
    }
    while ( *v12 || --v9 );
  }
  v13 = v36;
  v14 = v38;
  v35 = v36;
  v15 = &v11[(__int16)scrWidth_12EFF0_12EFE0];
  if ( v37 )
  {
LABEL_57:
    if ( !v37 )
      goto LABEL_22;
    v22 = v37;
    while ( 1 )
    {
      while ( 1 )
      {
        v23 = *(_BYTE *)v7;
        if ( *(char *)v7 > 0 )
          break;
        if ( !*(_BYTE *)v7 )
        {
          v14 = 0;
          goto LABEL_22;
        }
        v10 = v23;
        if ( v23 < -v22 )
        {
          BYTE1(v13) = -v23 - v22;
          if ( BYTE1(v13) > v38 )
            BYTE1(v13) = v39 - v37;
          v10 = BYTE1(v13);
          ++v7;
          LOBYTE(v13) = BYTE1(v13);
          v11 += BYTE1(v13);
          BYTE1(v13) = 0;
          v14 -= v13;
          goto LABEL_22;
        }
        ++v7;
        v22 += v23;
        if ( !v22 )
          goto LABEL_22;
      }
      if ( v23 > (int)v22 )
        break;
      v10 = v23 + 1;
      v22 -= v23;
      v7 += v10;
      if ( !v22 )
        goto LABEL_22;
    }
    v24 = v23 - v22;
    if ( v24 > v38 )
      v24 = v39 - v37;
    v31 = &v11[v24];
    v25 = *(char *)v7;
    v26 = (char *)(v7 + 1);
    v33 = &v26[v25];
    v27 = &v26[v22];
    v14 -= v24;
    v10 = *(_WORD *)(a1 + 4) & 0xC000;
    if ( (unsigned __int16)v10 >= 0x4000u )
    {
      if ( (unsigned __int16)v10 <= 0x4000u )
      {
        do
        {
          ++v27;
          ++v11;
          --v24;
        }
        while ( v24 );
      }
      else if ( (_WORD)v10 == 0x8000 )
      {
        do
        {
          ++v27;
          ++v11;
          --v24;
        }
        while ( v24 );
      }
      goto LABEL_82;
    }
    if ( (_WORD)v10 )
    {
LABEL_82:
      v7 = (int)v33;
      v11 = v31;
      goto LABEL_22;
    }
    while ( 1 )
    {
      if ( *v27 )
      {
        if ( (unsigned __int8)*v27 > 1u )
        {
          if ( *v27 != 2 || (*(_BYTE *)(a1 + 4) & 2) == 0 )
            goto LABEL_77;
          v28 = *(_BYTE *)(a1 + 7);
          goto LABEL_76;
        }
        if ( (*(_BYTE *)(a1 + 4) & 1) != 0 )
        {
          v28 = *(_BYTE *)(a1 + 6);
LABEL_76:
          *v11 = v28;
        }
      }
LABEL_77:
      ++v27;
      ++v11;
      if ( !--v24 )
        goto LABEL_82;
    }
  }
LABEL_22:
  while ( 2 )
  {
    if ( (__int16)v14 <= 0 )
    {
      HIWORD(v20) = HIWORD(v35);
      LOWORD(v20) = v35 - 1;
      v19 = (_WORD)v35 == 1;
      v35 = v20;
      if ( !v19 )
      {
        do
        {
          while ( *(char *)v7 > 0 )
            v7 += *(char *)v7 + 1;
        }
        while ( *(_BYTE *)v7++ );
        BYTE1(v14) = 0;
        v13 = v34;
        v11 = v15;
        goto LABEL_56;
      }
    }
    else
    {
      LOBYTE(v13) = *(_BYTE *)v7;
      if ( *(char *)v7 > 0 )
      {
        if ( (char)v13 >= (__int16)v14 )
          v13 = (__int16)v14;
        else
          v13 = *(char *)v7;
        LOWORD(v10) = *(char *)v7;
        v14 -= v10;
        v32 = &v11[(unsigned __int8)v13];
        v30 = *(char *)v7 + v7 + 1;
        v10 = *(_WORD *)(a1 + 4) & 0xC000;
        v16 = (_BYTE *)(v7 + 1);
        if ( (unsigned __int16)v10 >= 0x4000u )
        {
          if ( (unsigned __int16)v10 <= 0x4000u )
          {
            do
            {
              ++v16;
              ++v11;
              LOBYTE(v13) = v13 - 1;
            }
            while ( (_BYTE)v13 );
          }
          else if ( (_WORD)v10 == 0x8000 )
          {
            do
            {
              ++v16;
              ++v11;
              LOBYTE(v13) = v13 - 1;
            }
            while ( (_BYTE)v13 );
          }
          goto LABEL_46;
        }
        if ( (_WORD)v10 )
        {
LABEL_46:
          v11 = v32;
          v7 = v30;
          continue;
        }
        while ( 1 )
        {
          if ( *v16 )
          {
            if ( *v16 > 1u )
            {
              if ( *v16 != 2 || (*(_BYTE *)(a1 + 4) & 2) == 0 )
                goto LABEL_41;
              v17 = *(_BYTE *)(a1 + 7);
              goto LABEL_40;
            }
            if ( (*(_BYTE *)(a1 + 4) & 1) != 0 )
            {
              v17 = *(_BYTE *)(a1 + 6);
LABEL_40:
              *v11 = v17;
            }
          }
LABEL_41:
          ++v16;
          ++v11;
          LOBYTE(v13) = v13 - 1;
          if ( !(_BYTE)v13 )
            goto LABEL_46;
        }
      }
      if ( *(char *)v7 < 0 )
      {
        LOWORD(v13) = (char)v13;
        v14 += v13;
        v13 = *(char *)v7++;
        v11 -= v13;
        continue;
      }
      HIWORD(v18) = HIWORD(v35);
      LOWORD(v18) = v35 - 1;
      v19 = (_WORD)v35 == 1;
      v35 = v18;
      if ( !v19 )
      {
        v13 = v34;
        v11 = v15;
        v14 = 0;
        ++v7;
LABEL_56:
        LOBYTE(v14) = v39 - v37;
        v15 += v13;
        goto LABEL_57;
      }
    }
    return v7;
  }
}
// 12C970: using guessed type int dword_12C970;
// 12C974: using guessed type int dword_12C974;
// 12C978: using guessed type int dword_12C978;
// 12C97C: using guessed type int dword_12C97C;
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (000519E0) --------------------------------------------------------
void sub_519E0_51D20(TypeStrFont* a1x)//2229E0_
{
  //TypeTab* result; // eax
    int resultx;
  uint8_t* v2; // esi

  //result = a1x->bTab;
  //resultx = 0;
  if (a1x->bTab < a1x->eTab)
  {
    for(resultx = 0; resultx < a1x->eTab - &a1x->bTab[resultx]; resultx++)
    //do
    {
      v2 = a1x->Dat;
      //if ( result->Tab_0 < v2 )
      if (a1x->bTab[resultx].Tab_0 < v2)
        //result->Tab_0 += v2 - (uint8_t*)nullptr;
          a1x->bTab[resultx].Tab_0 += v2 - (uint8_t*)nullptr;
      //result = (unsigned int *)((char *)result->Tab_0 + 6);
      //resultx++;
    }
    //while ( result < a1x->eTab);
    //while (&a1x->bTab[resultx] < a1x->eTab);
  }
}

void sub_51A10()
{
	char pathBuffer[40];
	uint32 readVar = 4;
	for (int i = 0; i < 6; i++)
	{
		sprintf(pathBuffer, "%s%s\\save\\carpdd%02X.gam", "C:", "\\carpet.cd", i);
		FILE* file = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 512);
		if (file == nullptr)
		{
			sprintf(off_96864[i], "--");
		}
		else
		{
			DataFileIO::Read(file, (uint8_t*)&readVar, 4);
			if (readVar == 4)
				DataFileIO::Read(file, (uint8_t*)off_96864[i], 20);
			else
				sprintf(off_96864[i], "--");
			DataFileIO::Close(file);
		}
	}
}

//----- (00051AF0) --------------------------------------------------------
int sub_51AF0(char a1)
{
  int v1; // esi
  FILE* v2; // ebx
  char v4[40]; // [esp+0h] [ebp-40h] BYREF
  int v5; // [esp+28h] [ebp-18h] BYREF
  int v6[5]; // [esp+2Ch] [ebp-14h] BYREF

  v6[0] = 4;
  v5 = 4 * ((unsigned __int8)byte_12CBD1_12CBC1 + (unsigned __int8)byte_12CBD0_12CBC0 + str_AE408_AE3F8->var_u16_17);
  sprintf(v4, "%s%s\\save\\carpdd%02X.gam", "C:", "\\carpet.cd", (unsigned __int8)(a1 - 1));
  v1 = 0;
  v2 = DataFileIO::CreateOrOpenFile((char*)v4, 512);
  if ( v2 != nullptr )
  {
    DataFileIO::Read(v2, (uint8_t*)v6, 4);
    if ( v6[0] == 4 )
    {
      DataFileIO::Read(v2, (uint8_t*)off_96864[(unsigned __int8)(a1 - 1)], 20);
      DataFileIO::Read(v2, (uint8_t*)dword_AE408_AE3F8() + 29, 32);
      DataFileIO::Read(v2, (uint8_t*)dword_AE408_AE3F8() + 61, 32);
      DataFileIO::Read(v2, (uint8_t*)dword_AE400_AE3F0() + 8597, 12);
      DataFileIO::Read(v2, (uint8_t*)&v5, 4);
      DataFileIO::Read(v2, (uint8_t*)dword_AE400_AE3F0() + 15318, 24);
      DataFileIO::Read(v2, (uint8_t*)&byte_12CBD0_12CBC0, 1);
      DataFileIO::Read(v2, (uint8_t*)&byte_12CBD1_12CBC1, 1);
      DataFileIO::Read(v2, (uint8_t*)dword_AE400_AE3F0() + 8597, 12);
      byte_9687C = 0;
      v1 = 1;
      str_AE408_AE3F8->var_u16_17 = v5 / v6[0] - (unsigned __int8)byte_12CBD0_12CBC0 - (unsigned __int8)byte_12CBD1_12CBC1;
    }
    DataFileIO::Close(v2);
  }
  return v1;
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 96864: using guessed type char *off_96864[5];
// 9687C: using guessed type char byte_9687C;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CBD0: using guessed type char byte_12CBD0_12CBC0;
// 12CBD1: using guessed type char byte_12CBD1_12CBC1;
// 51AF0: using guessed type int var_14[5];

//----- (00051C90) --------------------------------------------------------
int sub_51C90(char a1)
{
  int v1; // esi
  char pathBuffer[40]; // [esp+0h] [ebp-3Ch] BYREF
  int v6; // [esp+28h] [ebp-14h] BYREF
  int v7[4]; // [esp+2Ch] [ebp-10h] BYREF

  v7[0] = 4;
  v1 = 0;
  v6 = 4 * (str_AE408_AE3F8->var_u16_17 + (unsigned __int8)byte_12CBD0_12CBC0 + (unsigned __int8)byte_12CBD1_12CBC1);
  sprintf(pathBuffer, "%s%s\\save\\carpdd%02X.gam", "C:", "\\carpet.cd", (unsigned __int8)(a1 - 1));
  FILE* file = DataFileIO::CreateOrOpenFile(FixPath(pathBuffer), 546);
  //v3 = v2;
  if (file != nullptr )
  {
    FileWrite_62ED0_633E0(file, (uint8_t*)v7, 4);
    FileWrite_62ED0_633E0(file, (uint8_t*)off_96864[(unsigned __int8)(a1 - 1)], 20);
    FileWrite_62ED0_633E0(file, (uint8_t*)dword_AE408_AE3F8() + 29, 32);
    FileWrite_62ED0_633E0(file, (uint8_t*)dword_AE408_AE3F8() + 61, 32);
    FileWrite_62ED0_633E0(file, (uint8_t*)dword_AE400_AE3F0() + 8597, 12);
    FileWrite_62ED0_633E0(file, (uint8_t*)&v6, 4);
    FileWrite_62ED0_633E0(file, (uint8_t*)dword_AE400_AE3F0() + 15318, 24);
    FileWrite_62ED0_633E0(file, (uint8_t*)&byte_12CBD0_12CBC0, 1);
    FileWrite_62ED0_633E0(file, (uint8_t*)&byte_12CBD1_12CBC1, 1);
    FileWrite_62ED0_633E0(file, (uint8_t*)dword_AE400_AE3F0() + 8597, 12);
    v1 = 1;
    DataFileIO::Close(file);
  }
  return v1;
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 96864: using guessed type char *off_96864[5];
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CBD0: using guessed type char byte_12CBD0_12CBC0;
// 12CBD1: using guessed type char byte_12CBD1_12CBC1;
// 51C90: using guessed type int var_10[4];

//----- (00051DF0) --------------------------------------------------------
void sub_51DF0(char a1)
{
  __int16 v1; // cx
  //char v2; // dl

  //fix
  v1 = 0;
  //fix

  byte_90B23 = 0;
  if ( (a1 & 2) != 0 )
  {
    InitDigijoy_3F7D0_3FB10((char*)(begGcSprTab_12CAF8_2EAAF8_2EAAE8 + 36));
    if ( !dword_9AD98 )
      goto LABEL_8;
  }
  else
  {
    if ( (a1 & 1) == 0 && (a1 & 0x20) == 0 )
      goto LABEL_8;
    InitAnojoy_3F820_sub_3FB60(v1, (int)begGcSprTab_12CAF8_2EAAF8_2EAAE8 + 60, (int)begGcSprTab_12CAF8_2EAAF8_2EAAE8 + 30, (int)begGcSprTab_12CAF8_2EAAF8_2EAAE8 + 36, a1);
    if ( !dword_9AD98 )
      goto LABEL_8;
  }
  sub_3F370_3F6B0();
LABEL_8:
  if ( (a1 & 8) != 0 )
  {
    if ( InitVfx_5AF50_5B460() )
    {
      //v2 = byte_90B23 | 8;
      str_AE400_AE3F0->set.var_u8_8606 = 1;
      byte_90B23 |= 8;
    }
  }
}
// 51E3F: variable 'v1' is possibly undefined
// 90B23: using guessed type char byte_90B23;
// 9AD98: using guessed type int dword_9AD98;
// AE400: using guessed type int dword_AE400_AE3F0();
// 12CAF8: using guessed type int begGcSprTab_12CAF8_2EAAF8_2EAAE8;

//----- (00051E84) --------------------------------------------------------
void sub_51E84(_BYTE *a1, _BYTE *a2, _BYTE *a3, int a4, char a5)
{
  _BYTE *v5; // esi
  _BYTE *v6; // edi
  int v8; // ecx
  int v9; // eax

  v5 = a1;
  if ( a1 )
  {
    v6 = a2;
    if ( a2 )
    {
      v8 = scrWidth_12EFF0_12EFE0 * scrHeight_12EFF8_12EFE8;
      v9 = 0;
      if ( a4 )
      {
        do
        {
          LOBYTE(v9) = *v5++;
          if ( *a3 == a5 )
            LOBYTE(v9) = *(_BYTE *)(v9 + a4);
          *v6++ = v9;
          ++a3;
          --v8;
        }
        while ( v8 );
      }
    }
  }
}
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF8: using guessed type int dword_12EFF8_12EFE8;

//----- (00051ECC) --------------------------------------------------------
int sub_51ECC(int a1, int a2, int a3, int a4, char a5, char a6)
{
  int v6; // edi
  int v7; // edi
  int v8; // eax
  _BYTE *v9; // edi
  int v10; // edx
  int v11; // ebx
  int result; // eax
  int v13; // ecx
  int v14; // [esp+4h] [ebp-4h]

  //fix
  v14 = 0;
  //fix

  v6 = a2;
  if ( a2 >= dword_12F010 )
    return v14;
  if ( a2 < 0 )
  {
    a4 += a2;
    v6 = 0;
  }
  if ( a4 + v6 > dword_12F028_12F018 )
    a4 = dword_12F028_12F018 - v6;
  if ( a4 <= 0 )
    return v14;
  v7 = scrWidth_12EFF0_12EFE0 * (viewportBegY_12F018_12F008 + v6);
  v8 = a1;
  if ( a1 >= dword_12F024_12F014 )
    return v14;
  if ( a1 < 0 )
  {
    a3 += a1;
    v8 = 0;
  }
  if ( a3 + v8 > dword_12F000_12EFF0 )
    a3 = dword_12F000_12EFF0 - v8;
  if ( a3 <= 0 )
    return v14;
  v9 = (_BYTE *)(begWscreen_2ECFF4_2ECFE4 + viewportBegX_12F008_12EFF8 + v8 + v7);
  v10 = a4;
  v11 = scrWidth_12EFF0_12EFE0 - a3;
  switch ( a6 & 3 )
  {
    case 0:
      do
      {
        v13 = a3;
        do
        {
          *v9++ = a5;
          --v13;
        }
        while ( v13 );
        v9 += v11;
        --v10;
      }
      while ( v10 );
      result = v14;
      break;
    case 1:
      result = v14;
      break;
    case 2:
      result = v14;
      break;
    case 3:
      result = v14;
      break;
  }
  return result;
}
// 51F74: variable 'v14' is possibly undefined
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F000: using guessed type int dword_12F000_12EFF0;
// 12F008: using guessed type int viewportBegX_12F008_12EFF8;
// 12F010: using guessed type int dword_12F010;
// 12F018: using guessed type int viewportBegY_12F018_12F008;
// 12F024: using guessed type int dword_12F024_12F014;
// 12F028: using guessed type int dword_12F028_12F018;

//----- (00051FC0) --------------------------------------------------------
void sub_51FC0()
{
  __int16 i; // bx
  __int16 v1; // si
  __int16 j; // bx

  if ( byte_939E4 && byte_939E5 )
  {
    for ( i = 0; i < 32; ++i )
    {
      v1 = 0;
      if ( byte_12CC20[i] )
      {
        if ( sub_651F8(dword_CC140, i) )
        {
          v1 = 1;
        }
        else
        {
          HIBYTE(word_CC070[i]) += 8;
          if ( (unsigned __int16)word_CC070[i] >= 0x7FFFu )
          {
            v1 = 1;
            word_CC070[i] = 0x7FFF;
          }
          if ( (unsigned __int16)word_CC070[i] >= ((unsigned __int16)word_12CC40[i] << 8) - 1 )
          {
            word_CC070[i] = (word_12CC40[i] << 8) - 1;
            v1 = 1;
          }
          sub_66118(dword_CC140, i, word_CC070[i]);
        }
      }
      if ( v1 )
        byte_12CC20[i] = 0;
    }
  }
  else
  {
    for ( j = 0; j < 32; ++j )
    {
      if ( byte_12CC20[j] )
        byte_12CC20[j] = 0;
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CC070: using guessed type __int16 word_CC070[];
// CC140: using guessed type int dword_CC140;
// 12CC40: using guessed type __int16 word_12CC40[];

//----- (000520F0) --------------------------------------------------------
void sub_520F0(__int16 a1, __int16 a2, char a3, __int16 a4)
{
  word_968D8 = a4;
  if ( a3 == 3 )
    sub_52120(a1, a2);
}
// 968D8: using guessed type __int16 word_968D8;

//----- (00052120) --------------------------------------------------------
void sub_52120(__int16 a1, __int16 a2)
{
  char v2; // bh
  __int16 *v3; // esi
  unsigned __int8 v4; // bl
  unsigned __int8 v5; // bl
  int v6; // edx
  int v7; // edx
  int v8; // eax
  int v9; // edx
  int v10; // eax

  if ( byte_939E4 && byte_939E5 && a2 <= (int)(unsigned __int16)word_CC1C6 )
  {
    v2 = 0;
    v3 = word_CBFF0;
    v4 = 0;
    while ( __PAIR32__(a2, a1) != *(_DWORD *)v3 || sub_651F8(dword_CC140, v4) )
    {
      ++v4;
      v3 += 2;
      if ( v4 >= 0x20u )
        goto LABEL_12;
    }
    v2 = 1;
    if ( byte_12CC20[v4] )
      return;
    if ( byte_12CCC0[v4] )
      byte_12CCC0[v4] = 0;
    byte_12CC20[v4] = 1;
    word_12CC40[v4] = word_968D8;
LABEL_12:
    if ( !v2 )
    {
      v5 = 0;
      while ( !sub_651F8(dword_CC140, v5) )
      {
        if ( ++v5 >= 0x20u )
          goto LABEL_17;
      }
      v2 = 1;
LABEL_17:
      if ( v2 )
      {
          //fix word_939F4 = __DS__;
        word_93A0C = 17152;
        word_93A00 = 0;
        word_CBFF0[2 * v5] = a1;
        word_93A22 = 0x7FFF;
        word_939FC = -1;
        word_93A02 = v5;
        v6 = dword_CC154;
        word_CBFF2[2 * v5] = a2;
        v7 = 32 * a2 + v6;
        word_CC070[v5] = 0;
        v8 = *(_DWORD *)(v7 + 26) - 16;
        v9 = *(_DWORD *)(v7 + 18);
        dword_939F8 = v8;
        dword_939F0 = v9;
        v10 = sub_6535C(dword_CC140, (unsigned int)&dword_939F0);
        BYTE1(v9) = byte_12CC20[v5];
        dword_CC144 = v10;
        if ( BYTE1(v9) )
        {
          if ( byte_12CCC0[v5] )
            byte_12CCC0[v5] = 0;
        }
        byte_12CC20[v5] = 1;
        word_12CC40[v5] = word_968D8;
      }
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939F0: using guessed type int dword_939F0;
// 939F4: using guessed type __int16 word_939F4;
// 939F8: using guessed type int dword_939F8;
// 939FC: using guessed type __int16 word_939FC;
// 93A00: using guessed type __int16 word_93A00;
// 93A02: using guessed type __int16 word_93A02;
// 93A0C: using guessed type __int16 word_93A0C;
// 93A22: using guessed type __int16 word_93A22;
// 968D8: using guessed type __int16 word_968D8;
// CBFF0: using guessed type __int16 word_CBFF0[];
// CBFF2: using guessed type __int16 word_CBFF2[63];
// CC070: using guessed type __int16 word_CC070[];
// CC140: using guessed type int dword_CC140;
// CC144: using guessed type int dword_CC144;
// CC154: using guessed type int dword_CC154;
// CC1C6: using guessed type __int16 word_CC1C6;
// 12CC40: using guessed type __int16 word_12CC40[];

//----- (000522E0) --------------------------------------------------------
void sub_522E0()
{
  __int16 v0; // si
  int v1; // ebx
  signed __int16 v2; // cx
  __int16 i; // si
  __int16 v4; // [esp+0h] [ebp-10h]

  if ( byte_939E4 && byte_939E5 )
  {
    v0 = 0;
    while ( 1 )
    {
      v4 = 0;
      if ( byte_12CCC0[v0] )
        break;
LABEL_12:
      if ( ++v0 >= 32 )
        return;
    }
    if ( !sub_651F8(dword_CC140, v0) )
    {
      v1 = v0;
      v2 = word_12CCE0[v1] - 2048;
      word_12CCE0[v1] = v2;
      if ( v2 > 4096 )
      {
        word_CC070[v0] = v2;
        sub_66118(dword_CC140, v0, v2);
        goto LABEL_10;
      }
      sub_65965(dword_CC140, v0);
      word_12CCE0[v0] = 0;
      word_CC070[v0] = 0;
    }
    v4 = 1;
LABEL_10:
    if ( v4 )
      byte_12CCC0[v0] = 0;
    goto LABEL_12;
  }
  for ( i = 0; i < 32; ++i )
  {
    if ( byte_12CCC0[i] )
      byte_12CCC0[i] = 0;
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CC070: using guessed type __int16 word_CC070[];
// CC140: using guessed type int dword_CC140;
// 12CCE0: using guessed type __int16 word_12CCE0[32];

//----- (00052400) --------------------------------------------------------
void sub_52400(__int16 a1, __int16 a2, __int16 a3)
{
  __int16 *v3; // esi
  __int16 v4; // bx
  int v5; // eax
  __int16 v6; // bx

  if ( byte_939E4 && byte_939E5 )
  {
    v3 = word_CBFF0;
    v4 = 0;
    while ( a1 != *v3 || a2 != v3[1] || sub_651F8(dword_CC140, v4) )
    {
      ++v4;
      v3 += 2;
      if ( v4 >= 32 )
        return;
    }
    if ( !byte_12CCC0[v4] )
    {
      if ( byte_12CC20[v4] )
        byte_12CC20[v4] = 0;
      v5 = v4;
      word_12CC80[v4] = a3;
      v6 = word_CC070[v4];
      byte_12CCC0[v5] = 1;
      word_12CCE0[v5] = v6;
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CBFF0: using guessed type __int16 word_CBFF0[];
// CC070: using guessed type __int16 word_CC070[];
// CC140: using guessed type int dword_CC140;
// 12CC80: using guessed type __int16 word_12CC80[];
// 12CCE0: using guessed type __int16 word_12CCE0[32];

//----- (000524C0) --------------------------------------------------------
int sub_524C0(int a1)
{
  int result; // eax

  result = a1;
  if ( *(_BYTE *)(a1 + 65) != 2 )
    *(_WORD *)(a1 + 76) += *(_WORD *)(a1 + 78);
  return result;
}

//----- (000524E0) --------------------------------------------------------
int sub_524E0(int a1)
{
  int result; // eax

  result = a1;
  if ( *(_BYTE *)(a1 + 65) != 2 )
    *(_WORD *)(a1 + 76) -= *(_WORD *)(a1 + 78);
  return result;
}

//----- (00052500) --------------------------------------------------------
int sub_52500(_WORD *a1, int a2)
{
  sub_524C0(a2);
  a1[17] = sub_42150_42490((axis_3d*)(a1 + 36), (axis_3d*)(_WORD *)(a2 + 72));
  a1[18] = sub_42180((axis_3d*)(a1 + 36), (axis_3d*)(_WORD *)(a2 + 72));
  return sub_524E0(a2);
}

//----- (00052550) --------------------------------------------------------
int sub_52550(int a1, int a2)
{
  __int16 v3; // ax
  int v4; // esi
  __int16 v5; // ax
  int v6; // esi
  __int16 v7; // ax

  sub_524C0(a2);
  *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a2 + 72));
  v3 = sub_42180((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a2 + 72));
  v4 = *(_DWORD *)(a1 + 156);
  *(_WORD *)(a1 + 36) = v3;
  v5 = *(_WORD *)(a1 + 30)
     + sub_422A0(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34), *(unsigned __int16 *)(v4 + 4), *(_WORD *)(v4 + 2));
  HIBYTE(v5) &= 7u;
  v6 = *(_DWORD *)(a1 + 156);
  *(_WORD *)(a1 + 30) = v5;
  v7 = *(_WORD *)(a1 + 32)
     + sub_422A0(*(_WORD *)(a1 + 32), *(_WORD *)(a1 + 36), *(unsigned __int16 *)(v6 + 8), *(_WORD *)(v6 + 6));
  HIBYTE(v7) &= 7u;
  *(_WORD *)(a1 + 32) = v7;
  return sub_524E0(a2);
}

//----- (00052610) --------------------------------------------------------
__int16 sub_52610(int a1, int a2)
{
  __int16 v3; // ax
  int v4; // esi
  __int16 v5; // ax
  int v6; // esi
  __int16 result; // ax

  *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a2 + 72));
  v3 = sub_42180((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a2 + 72));
  v4 = *(_DWORD *)(a1 + 156);
  *(_WORD *)(a1 + 36) = v3;
  v5 = *(_WORD *)(a1 + 30)
     + sub_422A0(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34), *(unsigned __int16 *)(v4 + 4), *(_WORD *)(v4 + 2));
  HIBYTE(v5) &= 7u;
  v6 = *(_DWORD *)(a1 + 156);
  *(_WORD *)(a1 + 30) = v5;
  result = *(_WORD *)(a1 + 32)
         + sub_422A0(*(_WORD *)(a1 + 32), *(_WORD *)(a1 + 36), *(unsigned __int16 *)(v6 + 8), *(_WORD *)(v6 + 6));
  HIBYTE(result) &= 7u;
  *(_WORD *)(a1 + 32) = result;
  return result;
}

//----- (000526C0) --------------------------------------------------------
char sub_526C0(int a1, unsigned int a2, unsigned int a3)
{
  int v3; // eax
  unsigned int v4; // edx
  int v5; // ebp

  LOBYTE(v3) = *(_BYTE *)(a1 + 65);
  if ( (unsigned __int8)v3 < 3u )
  {
    if ( (unsigned __int8)v3 > 1u )
      return v3;
  }
  else if ( (unsigned __int8)v3 > 3u && ((unsigned __int8)v3 < 7u || (unsigned __int8)v3 > 9u && (_BYTE)v3 != 19) )
  {
    return v3;
  }
  v4 = dword_AE400_AE3F0() + 29795;
  v3 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
  if ( *(_BYTE *)(v3 + 64) == 3 && !*(_BYTE *)(v3 + 65) )
  {
    ++*(_DWORD *)(*(_DWORD *)(v3 + 160) + 343);
    if ( v4 < a2 && a3 > v4 && *(_WORD *)(a2 + 24) == *(_WORD *)(a3 + 24) )
    {
      v5 = *(_DWORD *)(v3 + 160);
      if ( v5 )
        ++*(_DWORD *)(v5 + 347);
    }
  }
  return v3;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00052770) --------------------------------------------------------
char sub_52770(int a1)
{
  int v1; // edx
  char v2; // dl
  int v3; // eax
  __int16 v4; // ax
  int v5; // eax
  unsigned int v6; // ebp
  char v7; // cl
  int v8; // edi
  __int16 v9; // ax
  int v10; // esi
  int v11; // eax
  int v12; // edx
  unsigned int v13; // eax
  int v14; // edi
  int v15; // eax
  __int16 v16; // dx
  int v17; // eax
  int v18; // esi
  int v19; // edi
  _WORD *v20; // esi
  unsigned int v22; // [esp+0h] [ebp-18h]
  char v23; // [esp+4h] [ebp-14h]

  v23 = 0;
  v1 = 164 * *(unsigned __int16 *)(a1 + 146);
  v22 = dword_AE400_AE3F0() + 29795 + v1;
  if ( dword_AE400_AE3F0() + 29795 >= v22 )
  {
    v2 = *(_BYTE *)(a1 + 16);
    if ( (v2 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v2 | 2;
      if ( sub_54520(a1) )
      {
        *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 34);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 36);
      }
      else
      {
        *(_WORD *)(a1 + 34) = *(_WORD *)(a1 + 30);
        *(_WORD *)(a1 + 36) = *(_WORD *)(a1 + 32);
      }
    }
  }
  else
  {
    sub_52550(a1, dword_AE400_AE3F0() + 29795 + v1);
  }
  v3 = *(__int16 *)(a1 + 128) - *(__int16 *)(a1 + 126);
  if ( v3 )
    v3 /= (int)abs32(v3);
  *(_WORD *)(a1 + 126) += 2 * v3;
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v5 = sub_11980(a1);
  v6 = v5;
  if ( !v5 )
  {
    LOWORD(v15) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v16 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = v15;
    if ( (__int16)v15 <= v16 )
    {
      v18 = *(_DWORD *)(a1 + 12) - 1;
      *(_DWORD *)(a1 + 12) = v18;
      if ( v18 >= 0 )
        goto LABEL_25;
    }
    else if ( *(_BYTE *)(a1 + 65) != 4 )
    {
      v15 = sub_11810((axis_3d*)(__int16 *)(a1 + 72));
      if ( v15 == 1 )
      {
        v17 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 5);
        if ( v17 )
          *(_WORD *)(v17 + 24) = *(_WORD *)(a1 + 24);
        sub_41E80((Type_AE400_29795*)a1);
        goto LABEL_25;
      }
    }
    v23 = 1;
    goto LABEL_25;
  }
  if ( *(char *)(v5 + 17) < 0
    && (*(_DWORD *)(a1 + 140) - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2) + 4 * (*(int *)(a1 + 140) >> 31))) >> 2 <= *(_DWORD *)(v5 + 140)
    && *(_BYTE *)(a1 + 68) == 10 )
  {
    v7 = *(_BYTE *)(a1 + 69);
    if ( v7 == 1 || v7 == 17 )
    {
      sub_55370_558A0((v5 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 28);
      v8 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
      *(_DWORD *)(v6 + 140) -= (*(_DWORD *)(a1 + 140)
                              - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2)
                               + 4 * (*(int *)(a1 + 140) >> 31))) >> 2;
      v9 = *(_WORD *)(a1 + 30);
      HIBYTE(v9) = (HIBYTE(v9) + 4) & 7;
      *(_WORD *)(a1 + 34) = v9;
      v10 = sub_42240(0, *(_WORD *)(a1 + 32));
      v11 = -(v10 * sub_42210(0, *(_WORD *)(a1 + 32)));
      BYTE1(v11) &= 7u;
      *(_WORD *)(a1 + 36) = v11;
      v12 = *(_DWORD *)(a1 + 4);
      *(_WORD *)(a1 + 32) = v11;
      v13 = 9377 * v12 + 9439;
      *(_DWORD *)(a1 + 4) = v13;
      v14 = v8 - (dword_AE400_AE3F0() + 29795);
      *(_WORD *)(a1 + 30) = v13 % 0x2D + *(_WORD *)(a1 + 34) - 22;
      *(_WORD *)(a1 + 146) = v14 / 164;
      *(_WORD *)(a1 + 24) = *(_WORD *)(v6 + 24);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v6 + 72);
      word_AE454_AE444.z = *(_WORD *)(v6 + 76);
      LOWORD(v13) = *(_WORD *)(v6 + 84);
      word_AE454_AE444.z += v13;
      LOBYTE(v15) = sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
      return v15;
    }
  }
  sub_524C0(v5);
  sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v6 + 72));
  sub_524E0(v6);
  LOBYTE(v15) = 1;
  v23 = 1;
LABEL_25:
  if ( v23 )
  {
    v15 = (int)sub_373F0((axis_3d*)(a1 + 72), *(char *)(a1 + 68), *(char *)(a1 + 69));
    v19 = v15;
    v20 = (_WORD *)v15;
    if ( v15 )
    {
      sub_526C0(a1, v6, v22);
      if ( *(_BYTE *)(a1 + 69) == 34 )
        *(_DWORD *)(v19 + 12) = *(unsigned __int16 *)(a1 + 44);
      v20[12] = *(_WORD *)(a1 + 24);
      v20[15] = *(_WORD *)(a1 + 30);
      v20[16] = *(_WORD *)(a1 + 32);
      v20[73] = (int)(v6 - (dword_AE400_AE3F0() + 29795)) / 164;
      v20[22] = *(_WORD *)(a1 + 44);
      sub_41E80((Type_AE400_29795*)a1);
    }
  }
  return v15;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00052B30) --------------------------------------------------------
void sub_52B30(int a1)
{
  int v1; // ebp
  char v2; // dl
  __int16 v3; // si
  __int16 v4; // dx
  __int16 v5; // ax
  __int16 v6; // ax
  int v7; // eax
  int v8; // ebp
  unsigned int v9; // edi
  int result; // eax
  int v11; // edi
  __int16 v12; // ax
  int v13; // esi
  int v14; // eax
  int v15; // edx
  unsigned int v16; // eax
  __int16 v17; // cx
  int v18; // eax
  int v19; // esi
  _WORD *v20; // ebp
  int v21; // [esp+0h] [ebp-20h] BYREF
  __int16 v22; // [esp+4h] [ebp-1Ch]
  unsigned int v23; // [esp+8h] [ebp-18h]
  char v24; // [esp+Ch] [ebp-14h]

  v24 = 0;
  v1 = 164 * *(unsigned __int16 *)(a1 + 146);
  v23 = dword_AE400_AE3F0() + 29795 + v1;
  if ( dword_AE400_AE3F0() + 29795 >= v23 )
  {
    v2 = *(_BYTE *)(a1 + 16);
    if ( (v2 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v2 | 2;
      if ( sub_54520(a1) )
      {
        v3 = sub_42210(*(_WORD *)(a1 + 30), *(_WORD *)(a1 + 34));
        if ( v3 < 0 )
          v3 = 0;
        if ( v3 > 34 )
          v3 = 34;
        v4 = v3 * sub_42240(*(unsigned __int16 *)(a1 + 30), *(_WORD *)(a1 + 34)) + *(_WORD *)(a1 + 30);
        v5 = *(_WORD *)(a1 + 36);
        *(_WORD *)(a1 + 30) = v4;
        *(_WORD *)(a1 + 32) = v5;
      }
      else
      {
        *(_WORD *)(a1 + 34) = *(_WORD *)(a1 + 30);
        *(_WORD *)(a1 + 36) = *(_WORD *)(a1 + 32);
      }
    }
  }
  else
  {
    sub_52550(a1, dword_AE400_AE3F0() + 29795 + v1);
  }
  v21 = *(_DWORD *)(a1 + 72);
  v22 = *(_WORD *)(a1 + 76);
  *(_DWORD *)&word_AE454_AE444 = v21;
  word_AE454_AE444.z = v22;
  sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v7 = sub_11980(a1);
  v8 = v7;
  v9 = v7;
  if ( v7 )
  {
    if ( *(char *)(v7 + 17) >= 0 )
    {
      sub_524C0(v7);
      sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v8 + 72));
      result = sub_524E0(v8);
      v24 = 1;
    }
    else
    {
      result = (*(_DWORD *)(a1 + 140) - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2) + 4 * (*(int *)(a1 + 140) >> 31))) >> 2;
      if ( result <= *(_DWORD *)(v8 + 140) )
      {
        sub_55370_558A0((v8 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 28);
        v11 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
        *(_DWORD *)(v8 + 140) -= (*(_DWORD *)(a1 + 140)
                                - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2)
                                 + 4 * (*(int *)(a1 + 140) >> 31))) >> 2;
        v12 = *(_WORD *)(a1 + 30);
        HIBYTE(v12) = (HIBYTE(v12) + 4) & 7;
        *(_WORD *)(a1 + 34) = v12;
        v13 = sub_42240(0, *(_WORD *)(a1 + 32));
        v14 = -(v13 * sub_42210(0, *(_WORD *)(a1 + 32)));
        BYTE1(v14) &= 7u;
        *(_WORD *)(a1 + 36) = v14;
        v15 = *(_DWORD *)(a1 + 4);
        *(_WORD *)(a1 + 32) = v14;
        v16 = 9377 * v15 + 9439;
        *(_DWORD *)(a1 + 4) = v16;
        *(_WORD *)(a1 + 30) = v16 % 0x5B + *(_WORD *)(a1 + 34) - 45;
        *(_WORD *)(a1 + 146) = (v11 - (dword_AE400_AE3F0() + 29795)) / 164;
        *(_WORD *)(a1 + 24) = *(_WORD *)(v8 + 24);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v8 + 72);
        word_AE454_AE444.z = *(_WORD *)(v8 + 76);
        LOWORD(v16) = *(_WORD *)(v8 + 84);
        word_AE454_AE444.z += v16;
        sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
        return;
      }
    }
  }
  else
  {
    result = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v17 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = result;
    if ( (__int16)result <= v17 )
    {
      v19 = *(_DWORD *)(a1 + 12) - 1;
      *(_DWORD *)(a1 + 12) = v19;
      if ( v19 >= 0 )
        goto LABEL_24;
    }
    else
    {
      result = sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)&v21);
      if ( *(_BYTE *)(a1 + 65) != 4 )
      {
        result = sub_11810((axis_3d*)(__int16 *)(a1 + 72));
        if ( result == 1 )
        {
          v18 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 5);
          if ( v18 )
            *(_WORD *)(v18 + 24) = *(_WORD *)(a1 + 24);
          sub_41E80((Type_AE400_29795*)a1);
          goto LABEL_24;
        }
      }
    }
    v24 = 1;
  }
LABEL_24:
  if ( v24 )
  {
    result = (int)sub_373F0((axis_3d*)(a1 + 72), *(char *)(a1 + 68), *(char *)(a1 + 69));
    v20 = (_WORD *)result;
    if ( result )
    {
      sub_526C0(a1, v9, v23);
      v20[12] = *(_WORD *)(a1 + 24);
      v20[15] = *(_WORD *)(a1 + 30);
      v20[16] = *(_WORD *)(a1 + 32);
      sub_41E80((Type_AE400_29795*)a1);
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00052ED0) --------------------------------------------------------
char sub_52ED0(int a1)
{
  unsigned __int16 v1; // si
  unsigned int v2; // ebp
  char v3; // dl
  __int16 v4; // ax
  int v5; // eax
  int v6; // esi
  unsigned int v7; // edi
  int v8; // eax
  __int16 v9; // cx
  int v10; // edx
  _WORD *v11; // esi
  char v13; // [esp+0h] [ebp-14h]

  v1 = *(_WORD *)(a1 + 146);
  v13 = 0;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * v1;
  if ( v2 <= dword_AE400_AE3F0() + 29795 )
  {
    v3 = *(_BYTE *)(a1 + 16);
    if ( (v3 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v3 | 2;
      if ( sub_54520(a1) )
      {
        *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 34);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 36);
      }
    }
  }
  else
  {
    sub_52550(a1, dword_AE400_AE3F0() + 29795 + 164 * v1);
  }
  *(_DWORD *)&word_AE454_AE444.x = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  v4 = sub_11F50(&word_AE454_AE444);
  if ( v4 > word_AE454_AE444.z )
    word_AE454_AE444.z = v4;
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v5 = sub_11AC0((_WORD *)a1);
  v6 = v5;
  v7 = v5;
  if ( v5 )
  {
    sub_524C0(v5);
    sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v6 + 72));
    sub_524E0(v6);
    LOBYTE(v8) = 1;
    v13 = 1;
  }
  else
  {
    LOWORD(v8) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v9 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = v8;
    if ( (__int16)v8 > v9 || (v10 = *(_DWORD *)(a1 + 12) - 1, *(_DWORD *)(a1 + 12) = v10, v10 < 0) )
      v13 = 1;
  }
  if ( v13 )
  {
    v8 = (int)sub_373F0((axis_3d*)(a1 + 72), *(char *)(a1 + 68), *(char *)(a1 + 69));
    v11 = (_WORD *)v8;
    if ( v8 )
    {
      sub_526C0(a1, v7, v2);
      v11[12] = *(_WORD *)(a1 + 24);
      v11[15] = *(_WORD *)(a1 + 30);
      v11[16] = *(_WORD *)(a1 + 32);
      sub_41E80((Type_AE400_29795*)a1);
    }
  }
  return v8;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00053060) --------------------------------------------------------
char sub_53060(int a1)
{
  return sub_52770(a1);
}

//----- (00053070) --------------------------------------------------------
char sub_53070(int a1)
{
  int v1; // eax
  char v2; // dh

  LOBYTE(v1) = sub_52770(a1);
  if ( *(_BYTE *)(a1 + 64) )
  {
    v1 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 1);
    if ( v1 )
    {
      *(_BYTE *)(v1 + 16) |= 0x80u;
      v2 = *(_BYTE *)(v1 + 18) | 1;
      *(_WORD *)(v1 + 24) = *(_WORD *)(a1 + 24);
      *(_BYTE *)(v1 + 18) = v2;
    }
  }
  return v1;
}

//----- (000530B0) --------------------------------------------------------
char sub_530B0(int a1)
{
  return sub_530C0(a1);
}

//----- (000530C0) --------------------------------------------------------
char sub_530C0(int a1)
{
  int v1; // edx
  char v2; // dl
  int v3; // eax
  __int16 v4; // ax
  int v5; // eax
  unsigned int v6; // ebp
  char v7; // cl
  int v8; // edi
  __int16 v9; // ax
  int v10; // esi
  int v11; // eax
  int v12; // ecx
  int v13; // edi
  int v14; // eax
  __int16 v15; // dx
  int v16; // eax
  int v17; // esi
  int v18; // edi
  _WORD *v19; // esi
  unsigned int v21; // [esp+0h] [ebp-18h]
  char v22; // [esp+4h] [ebp-14h]

  v22 = 0;
  v1 = 164 * *(unsigned __int16 *)(a1 + 146);
  v21 = dword_AE400_AE3F0() + 29795 + v1;
  if ( dword_AE400_AE3F0() + 29795 >= v21 )
  {
    v2 = *(_BYTE *)(a1 + 16);
    if ( (v2 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v2 | 2;
      if ( sub_54520(a1) )
      {
        *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 34);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 36);
      }
      else
      {
        *(_WORD *)(a1 + 34) = *(_WORD *)(a1 + 30);
        *(_WORD *)(a1 + 36) = *(_WORD *)(a1 + 32);
      }
    }
  }
  else
  {
    sub_52550(a1, dword_AE400_AE3F0() + 29795 + v1);
  }
  v3 = *(__int16 *)(a1 + 128) - *(__int16 *)(a1 + 126);
  if ( v3 )
    v3 /= (int)abs32(v3);
  *(_WORD *)(a1 + 126) += 2 * v3;
  *(_DWORD *)&word_AE454_AE444.x = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v5 = sub_11980(a1);
  v6 = v5;
  if ( v5 )
  {
    if ( *(char *)(v5 + 17) < 0
      && (*(_DWORD *)(a1 + 140) - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2) + 4 * (*(int *)(a1 + 140) >> 31))) >> 2 <= *(_DWORD *)(v5 + 140)
      && *(_BYTE *)(a1 + 68) == 10 )
    {
      v7 = *(_BYTE *)(a1 + 69);
      if ( v7 == 1 || v7 == 17 )
      {
        sub_55370_558A0((v5 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 28);
        v8 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
        *(_DWORD *)(v6 + 140) -= (*(_DWORD *)(a1 + 140)
                                - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2)
                                 + 4 * (*(int *)(a1 + 140) >> 31))) >> 2;
        v9 = *(_WORD *)(a1 + 30);
        HIBYTE(v9) = (HIBYTE(v9) + 4) & 7;
        *(_WORD *)(a1 + 34) = v9;
        v10 = sub_42240(0, *(_WORD *)(a1 + 32));
        v11 = -(v10 * sub_42210(0, *(_WORD *)(a1 + 32)));
        BYTE1(v11) &= 7u;
        *(_WORD *)(a1 + 36) = v11;
        v12 = *(_DWORD *)(a1 + 4);
        *(_WORD *)(a1 + 32) = v11;
        *(_DWORD *)(a1 + 4) = 9377 * v12 + 9439;
        v13 = v8 - (dword_AE400_AE3F0() + 29795);
        *(_WORD *)(a1 + 30) = (9377 * v12 + 9439) % 0x2Du + *(_WORD *)(a1 + 34) - 22;
        *(_WORD *)(a1 + 146) = v13 / 164;
        *(_WORD *)(a1 + 24) = *(_WORD *)(v6 + 24);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v6 + 72);
        word_AE454_AE444.z = *(_WORD *)(v6 + 76);
        LOWORD(v11) = *(_WORD *)(v6 + 84);
        word_AE454_AE444.z += v11;
        LOBYTE(v14) = sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
        return v14;
      }
    }
    sub_524C0(v5);
    sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v6 + 72));
    sub_524E0(v6);
    LOBYTE(v14) = 1;
    v22 = 1;
  }
  else
  {
    LOWORD(v14) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v15 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = v14;
    if ( (__int16)v14 <= v15 )
    {
      v17 = *(_DWORD *)(a1 + 12) - 1;
      *(_DWORD *)(a1 + 12) = v17;
      if ( v17 >= 0 )
        goto LABEL_25;
    }
    else if ( *(_BYTE *)(a1 + 65) != 4 )
    {
      v14 = sub_11810((axis_3d*)(__int16 *)(a1 + 72));
      if ( v14 == 1 )
      {
        v16 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 5);
        if ( v16 )
          *(_WORD *)(v16 + 24) = *(_WORD *)(a1 + 24);
        sub_41E80((Type_AE400_29795*)a1);
        goto LABEL_25;
      }
    }
    v22 = 1;
  }
LABEL_25:
  if ( v22 )
  {
    if ( v6 && *(_BYTE *)(v6 + 64) == 3 && *(_BYTE *)(v6 + 65) <= 1u )
    {
      v14 = (int)sub_373F0((axis_3d*)(a1 + 72), *(char *)(a1 + 68), *(char *)(a1 + 69));
      v18 = v14;
      v19 = (_WORD *)v14;
      if ( v14 )
      {
        sub_526C0(a1, v6, v21);
        if ( *(_BYTE *)(a1 + 69) == 34 )
          *(_DWORD *)(v18 + 12) = *(unsigned __int16 *)(a1 + 44);
        v19[12] = *(_WORD *)(a1 + 24);
        v19[15] = *(_WORD *)(a1 + 30);
        v19[16] = *(_WORD *)(a1 + 32);
        v19[73] = (int)(v6 - (dword_AE400_AE3F0() + 29795)) / 164;
        v19[22] = *(_WORD *)(a1 + 44);
        sub_41E80((Type_AE400_29795*)a1);
      }
    }
    else
    {
      sub_526C0(a1, 0, v21);
      sub_41E80((Type_AE400_29795*)a1);
    }
  }
  return v14;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (000534C0) --------------------------------------------------------
char sub_534C0(int a1)
{
  char v1; // dl
  int v2; // eax
  int v3; // esi
  __int16 v4; // dx
  int v5; // edx
  char v7; // [esp+0h] [ebp-10h]

  v7 = 0;
  if ( dword_AE400_AE3F0() + 29795 + 164 * (unsigned int)*(unsigned __int16 *)(a1 + 146) <= dword_AE400_AE3F0() + 29795 )
  {
    v1 = *(_BYTE *)(a1 + 16);
    if ( (v1 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v1 | 2;
      if ( sub_54520(a1) )
      {
        *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 34);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 36);
      }
      else
      {
        *(_WORD *)(a1 + 34) = *(_WORD *)(a1 + 30);
        *(_WORD *)(a1 + 36) = *(_WORD *)(a1 + 32);
      }
    }
  }
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  *(_DWORD *)(a1 + 72) = *(_DWORD *)&word_AE454_AE444;
  *(_WORD *)(a1 + 76) = word_AE454_AE444.z;
  v2 = sub_11980(a1);
  if ( v2 )
  {
    v3 = v2 + 72;
    LOBYTE(v2) = 1;
    *(_DWORD *)(a1 + 72) = *(_DWORD *)v3;
    *(_WORD *)(a1 + 76) = *(_WORD *)(v3 + 4);
    v7 = 1;
  }
  else
  {
    LOWORD(v2) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v4 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = v2;
    if ( (__int16)v2 > v4 || (v5 = *(_DWORD *)(a1 + 12) - 1, *(_DWORD *)(a1 + 12) = v5, v5 < 0) )
      v7 = 1;
  }
  if ( v7 )
    sub_41E80((Type_AE400_29795*)a1);
  return v2;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (000535E0) --------------------------------------------------------
__int16 sub_535E0(unsigned int a1)
{
  __int16 v1; // ax
  __int16 v2; // di
  __int16 v3; // si
  char v4; // ah
  char v5; // dl
  int v6; // edx
  unsigned int v7; // eax
  int v8; // esi
  __int16 v9; // si
  __int16 v10; // cx
  unsigned int v11; // eax
  int v12; // esi
  int v13; // eax
  int v14; // esi
  unsigned int v15; // eax
  unsigned __int16 v16; // ax
  int v17; // edi
  int v18; // eax
  _WORD *v19; // esi
  int v20; // ebp
  int v21; // edx
  int v23; // [esp+0h] [ebp-3Ch]
  __int16 v24; // [esp+4h] [ebp-38h]
  int v25; // [esp+8h] [ebp-34h] BYREF
  __int16 v26; // [esp+Ch] [ebp-30h]
  int v27; // [esp+10h] [ebp-2Ch] BYREF
  int v28; // [esp+14h] [ebp-28h]
  unsigned int v29; // [esp+18h] [ebp-24h]
  int v30; // [esp+1Ch] [ebp-20h]
  int v31; // [esp+20h] [ebp-1Ch]
  int v32; // [esp+24h] [ebp-18h]
  int v33; // [esp+28h] [ebp-14h]

  v1 = *(_WORD *)(a1 + 128);
  *(_WORD *)(a1 + 126) = v1;
  v23 = *(_DWORD *)(a1 + 72);
  v24 = *(_WORD *)(a1 + 76);
  sub_41DD0_42110((Type_AE400_29795*)a1);
  sub_534C0(a1);
  v2 = *(_WORD *)(a1 + 30);
  v3 = *(_WORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 17);
  v30 = 1;
  if ( (v4 & 4) == 0 )
  {
    do
    {
      sub_534C0(a1);
      v5 = *(_BYTE *)(a1 + 17);
      ++v30;
    }
    while ( (v5 & 4) == 0 );
  }
  *(_WORD *)(a1 + 30) = v2;
  *(_WORD *)(a1 + 32) = v3;
  v27 = 0;
  LOWORD(v28) = 0;
  v6 = *(__int16 *)(a1 + 126);
  v30 *= 8;
  v33 = (v6 - (__CFSHL__(v6 >> 31, 3) + 8 * (v6 >> 31))) >> 3;
  sub_41EC0_42200((axis_3d*)(uint16*)&v27, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), v33);
  v31 = 0;
  v32 = 0;
  *(_DWORD *)&word_AE454_AE444 = v23;
  word_AE454_AE444.z = v24;
  v25 = v23;
  v26 = v24;
  if ( (v30 & 0x8000u) == 0 )
  {
    while ( 1 )
    {
      v7 = (int)NewEvent_372C0();
      v8 = v7;
      if ( v7 )
      {
        *(_BYTE *)(v7 + 70) = 14;
        *(_BYTE *)(v7 + 64) = 9;
        *(_BYTE *)(v7 + 65) = 9;
        *(_WORD *)(v7 + 24) = *(_WORD *)(a1 + 24);
        *(_DWORD *)(v7 + 8) = (v7 >= a1) - 1;
        sub_36FA0((Type_AE400_29795*)v7, 216);
        sub_41CF0_42030((Type_AE400_29795*)v8, (axis_3d*)&v25);
        RefillLife_36DE0((Type_AE400_29795*)v8);
      }
      v9 = (__int16)v30 / 2;
      if ( (__int16)v30 / 2 < 0 )
        v9 = 0;
      if ( v9 > 8 )
        v9 = 8;
      if ( v9 >= (__int16)v32 )
      {
        v10 = v32;
        if ( (__int16)v32 >= -v9 )
        {
          v11 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
          *(_DWORD *)(a1 + 4) = v11;
          v32 = 2 * (v11 % 0x9D / 79i64) - 1 + v10;
        }
        else
        {
          ++v32;
        }
      }
      else
      {
        --v32;
      }
      if ( v9 < (__int16)v31 )
        break;
      v13 = -v9;
      v14 = (__int16)v31;
      if ( (__int16)v31 >= v13 )
      {
        v15 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
        *(_DWORD *)(a1 + 4) = v15;
        v12 = 2 * (v15 % 0x9D / 79i64) - 1 + v14;
        goto LABEL_20;
      }
      ++v31;
LABEL_21:
      word_AE454_AE444.x += v27;
      word_AE454_AE444.y += HIWORD(v27);
      word_AE454_AE444.z += v28;
      v25 = *(_DWORD *)&word_AE454_AE444;
      v26 = v32
          * ((int)((__int16)v33
                 - (__CFSHL__((unsigned __int64)(__int16)v33 >> 32, 2)
                  + 4 * ((unsigned __int64)(__int16)v33 >> 32))) >> 2)
          + word_AE454_AE444.z;
      v16 = *(_WORD *)(a1 + 30);
      HIBYTE(v16) = (HIBYTE(v16) + 2) & 7;
      sub_41EC0_42200((axis_3d*)
          (uint16*)&v25,
        v16,
        0,
        v32
      * ((int)((__int16)v33
             - (__CFSHL__((unsigned __int64)(__int16)v33 >> 32, 2)
              + 4 * ((unsigned __int64)(__int16)v33 >> 32))) >> 2));
      if ( (--v30 & 0x8000u) != 0 )
        goto LABEL_22;
    }
    v12 = v31 - 1;
LABEL_20:
    v31 = v12;
    goto LABEL_21;
  }
LABEL_22:
  v17 = sub_11980(a1);
  v29 = 164 * *(unsigned __int16 *)(a1 + 146) + dword_AE400_AE3F0() + 29795;
  v18 = (int)sub_373F0((axis_3d*)&v25, *(char *)(a1 + 68), *(char *)(a1 + 69));
  v19 = (_WORD *)v18;
  v20 = v18;
  if ( v18 )
  {
    sub_526C0(a1, v17, v29);
    v19[12] = *(_WORD *)(a1 + 24);
    v19[15] = *(_WORD *)(a1 + 30);
    v21 = dword_AE400_AE3F0() + 29795;
    v19[16] = *(_WORD *)(a1 + 32);
    v19[73] = (v17 - v21) / 164;
    if ( v17
      && *(char *)(v17 + 17) < 0
      && *(_BYTE *)(v17 + 64) == 3
      && (*(_DWORD *)(a1 + 140) - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2) + 4 * (*(int *)(a1 + 140) >> 31))) >> 2 <= *(_DWORD *)(v17 + 140) )
    {
      v18 = (int)*(unsigned __int16 *)(a1 + 44) >> 2;
      v19[22] = v18;
    }
    else
    {
      LOWORD(v18) = *(_WORD *)(a1 + 44);
      *(_WORD *)(v20 + 44) = v18;
    }
  }
  return v18;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE456: using guessed type __int16 word_AE454_AE444.y;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00053980) --------------------------------------------------------
void sub_53980(int a1)
{
  unsigned __int16 v1; // cx
  unsigned int v2; // ebp
  __int16 v3; // ax
  int v4; // ecx
  int v5; // eax
  __int16 v6; // ax
  bool v7; // eax
  __int16 v8; // dx
  int v9; // edx
  int v10; // eax
  char v12; // [esp+0h] [ebp-14h]

  v1 = *(_WORD *)(a1 + 146);
  v12 = 0;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * v1;
  if ( v2 > dword_AE400_AE3F0() + 29795 )
  {
    sub_52610(a1, dword_AE400_AE3F0() + 29795 + 164 * v1);
    v4 = *(__int16 *)(a1 + 128) - *(__int16 *)(a1 + 126);
    if ( v4 )
      v5 = v4 / (int)abs32(v4);
    else
      LOWORD(v5) = 0;
    *(_WORD *)(a1 + 126) += 2 * v5;
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
    word_AE454_AE444.z = *(_WORD *)(a1 + 76);
    sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
    sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    v7 = sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v2);
    if ( v7 )
    {
      LOBYTE(v3) = sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v2 + 72));
      v12 = 1;
    }
    else
    {
      v3 = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      v8 = *(_WORD *)(a1 + 76);
      word_AE454_AE444.z = v3;
      if ( v3 > v8 || (v9 = *(_DWORD *)(a1 + 12) - 1, *(_DWORD *)(a1 + 12) = v9, v9 < 0) )
        v12 = 1;
    }
    if ( v12 )
    {
      if ( *(_BYTE *)(a1 + 68) == 3 && *(_WORD *)(*(_DWORD *)(dword_AE400_AE3F0() + 164 * *(__int16 *)(a1 + 24) + 29955) + 50) )
      {
        sub_41E80((Type_AE400_29795*)a1);
      }
      else
      {
        v10 = (int)sub_373F0((axis_3d*)(a1 + 72), *(char *)(a1 + 68), *(char *)(a1 + 69));
        if ( v10 )
        {
          *(_WORD *)(v10 + 24) = *(_WORD *)(a1 + 24);
          sub_41E80((Type_AE400_29795*)a1);
        }
        else
        {
          LOBYTE(v3) = sub_46D20((Type_AE400_29795*)(dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24)), 0);
        }
      }
    }
  }
  else
  {
    LOBYTE(v3) = sub_53B50(a1);
  }
  //return v3;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00053B50) --------------------------------------------------------
char sub_53B50(int a1)
{
  char v1; // dh
  int v2; // eax
  __int16 v3; // ax
  __int16 v4; // ax
  int v5; // ecx
  int v6; // eax
  __int16 v7; // ax
  int v8; // esi
  __int16 v9; // ax
  __int16 v10; // di
  int v11; // edx
  unsigned __int16 v12; // ax
  __int16 v13; // ax
  char v15; // [esp+0h] [ebp-14h]
  char v16; // [esp+4h] [ebp-10h]

  v1 = *(_BYTE *)(a1 + 16);
  v15 = 0;
  v16 = 0;
  if ( (v1 & 2) != 0 )
  {
    *(_WORD *)(a1 + 34) = sub_42150_42490((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a1 + 150));
    *(_WORD *)(a1 + 36) = sub_42180((axis_3d*)(_WORD *)(a1 + 72), (axis_3d*)(_WORD *)(a1 + 150));
    v3 = *(_WORD *)(a1 + 30)
       + sub_422A0(
           *(_WORD *)(a1 + 30),
           *(_WORD *)(a1 + 34),
           *(unsigned __int16 *)(*(_DWORD *)(a1 + 156) + 4),
           *(_WORD *)(*(_DWORD *)(a1 + 156) + 2));
    HIBYTE(v3) &= 7u;
    *(_WORD *)(a1 + 30) = v3;
    v4 = *(_WORD *)(a1 + 32)
       + sub_422A0(
           *(_WORD *)(a1 + 32),
           *(_WORD *)(a1 + 36),
           *(unsigned __int16 *)(*(_DWORD *)(a1 + 156) + 8),
           *(_WORD *)(*(_DWORD *)(a1 + 156) + 6));
    HIBYTE(v4) &= 7u;
    *(_WORD *)(a1 + 32) = v4;
    v5 = *(__int16 *)(a1 + 128) - *(__int16 *)(a1 + 126);
    if ( v5 )
      v6 = v5 / (int)abs32(v5);
    else
      LOWORD(v6) = 0;
    *(_WORD *)(a1 + 126) += 2 * v6;
    *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
    word_AE454_AE444.z = *(_WORD *)(a1 + 76);
    sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
    sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
    v8 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 146);
    if ( sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)v8) )
    {
      v9 = sub_524C0(v8);
      LOBYTE(v2) = sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v8 + 72));
      v15 = 1;
    }
    else
    {
      LOWORD(v2) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
      v10 = *(_WORD *)(a1 + 76);
      word_AE454_AE444.z = v2;
      if ( (__int16)v2 > v10
        || (v11 = *(_DWORD *)(a1 + 12) - 1, *(_DWORD *)(a1 + 12) = v11, v11 < 0)
        || (LOBYTE(v2) = !sub_12F70((_WORD *)(a1 + 72)), (v16 = v2) != 0) )
      {
        v15 = 1;
      }
    }
    if ( v15 )
    {
      if ( v16 )
      {
        *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
        word_AE454_AE444.z = *(_WORD *)(a1 + 76);
        v12 = *(_WORD *)(a1 + 30);
        HIBYTE(v12) = (HIBYTE(v12) + 4) & 7;
        sub_41EC0_42200(&word_AE454_AE444, v12, *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
        sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
      }
      v2 = (int)sub_373F0((axis_3d*)(a1 + 72), *(char *)(a1 + 68), *(char *)(a1 + 69));
      if ( v2 )
      {
        *(_WORD *)(v2 + 24) = *(_WORD *)(a1 + 24);
        sub_41E80((Type_AE400_29795*)a1);
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 16) = v1 | 2;
    LOBYTE(v2) = sub_12F70((_WORD *)(a1 + 72));
    if ( !(_BYTE)v2 )
    {
      sub_46D20((Type_AE400_29795*)a1, 0);
      sub_41E80((Type_AE400_29795*)a1);
    }
  }
  return v2;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00053DC0) --------------------------------------------------------
char sub_53DC0(int a1)
{
  int v1; // edx
  char v2; // dl
  int v3; // eax
  __int16 v4; // ax
  int v5; // eax
  unsigned int v6; // ebp
  char v7; // cl
  int v8; // edi
  __int16 v9; // ax
  int v10; // esi
  int v11; // eax
  int v12; // edx
  unsigned int v13; // eax
  int v14; // eax
  __int16 v15; // dx
  int v16; // eax
  int v17; // esi
  int v18; // edi
  int v19; // esi
  unsigned int v21; // [esp+0h] [ebp-18h]
  char v22; // [esp+4h] [ebp-14h]

  v22 = 0;
  v1 = 164 * *(unsigned __int16 *)(a1 + 146);
  v21 = dword_AE400_AE3F0() + 29795 + v1;
  if ( dword_AE400_AE3F0() + 29795 >= v21 )
  {
    v2 = *(_BYTE *)(a1 + 16);
    if ( (v2 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v2 | 2;
      if ( sub_54520(a1) )
      {
        *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 34);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 36);
      }
      else
      {
        *(_WORD *)(a1 + 34) = *(_WORD *)(a1 + 30);
        *(_WORD *)(a1 + 36) = *(_WORD *)(a1 + 32);
      }
    }
  }
  else
  {
    sub_52550(a1, dword_AE400_AE3F0() + 29795 + v1);
  }
  v3 = *(__int16 *)(a1 + 128) - *(__int16 *)(a1 + 126);
  if ( v3 )
    v3 /= (int)abs32(v3);
  *(_WORD *)(a1 + 126) += 2 * v3;
  *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v5 = sub_11980(a1);
  v6 = v5;
  if ( !v5 )
  {
    LOWORD(v14) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v15 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = v14;
    if ( (__int16)v14 <= v15 )
    {
      v17 = *(_DWORD *)(a1 + 12) - 1;
      *(_DWORD *)(a1 + 12) = v17;
      if ( v17 >= 0 )
        goto LABEL_25;
    }
    else if ( *(_BYTE *)(a1 + 65) != 4 )
    {
      v14 = sub_11810((axis_3d*)(__int16 *)(a1 + 72));
      if ( v14 == 1 )
      {
        v16 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 5);
        if ( v16 )
          *(_WORD *)(v16 + 24) = *(_WORD *)(a1 + 24);
        sub_41E80((Type_AE400_29795*)a1);
        goto LABEL_25;
      }
    }
    v22 = 1;
    goto LABEL_25;
  }
  if ( *(char *)(v5 + 17) < 0
    && (*(_DWORD *)(a1 + 140) - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2) + 4 * (*(int *)(a1 + 140) >> 31))) >> 2 <= *(_DWORD *)(v5 + 140)
    && *(_BYTE *)(a1 + 68) == 10 )
  {
    v7 = *(_BYTE *)(a1 + 69);
    if ( v7 == 1 || v7 == 17 )
    {
      sub_55370_558A0((v5 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 28);
      v8 = dword_AE400_AE3F0() + 29795 + 164 * *(__int16 *)(a1 + 24);
      *(_DWORD *)(v6 + 140) -= (*(_DWORD *)(a1 + 140)
                              - (__CFSHL__(*(int *)(a1 + 140) >> 31, 2)
                               + 4 * (*(int *)(a1 + 140) >> 31))) >> 2;
      v9 = *(_WORD *)(a1 + 30);
      HIBYTE(v9) = (HIBYTE(v9) + 4) & 7;
      *(_WORD *)(a1 + 34) = v9;
      v10 = sub_42240(0, *(_WORD *)(a1 + 32));
      v11 = -(v10 * sub_42210(0, *(_WORD *)(a1 + 32)));
      BYTE1(v11) &= 7u;
      *(_WORD *)(a1 + 36) = v11;
      v12 = *(_DWORD *)(a1 + 4);
      *(_WORD *)(a1 + 32) = v11;
      v13 = 9377 * v12 + 9439;
      *(_DWORD *)(a1 + 4) = v13;
      *(_WORD *)(a1 + 30) = v13 % 0x2D + *(_WORD *)(a1 + 34) - 22;
      *(_WORD *)(a1 + 146) = (v8 - (dword_AE400_AE3F0() + 29795)) / 164;
      *(_WORD *)(a1 + 24) = *(_WORD *)(v6 + 24);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)&word_AE454_AE444 = *(_DWORD *)(v6 + 72);
      word_AE454_AE444.z = *(_WORD *)(v6 + 76);
      LOWORD(v13) = *(_WORD *)(v6 + 84);
      word_AE454_AE444.z += v13;
      LOBYTE(v14) = sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
      return v14;
    }
  }
  sub_524C0(v5);
  sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v6 + 72));
  sub_524E0(v6);
  LOBYTE(v14) = 1;
  v22 = 1;
LABEL_25:
  if ( v22 )
  {
    v14 = (int)sub_373F0((axis_3d*)(a1 + 72), 10, 38);
    v18 = v14;
    v19 = v14;
    if ( v14 )
    {
      sub_526C0(a1, v6, v21);
      if ( *(_BYTE *)(a1 + 69) == 34 )
        *(_DWORD *)(v18 + 12) = *(unsigned __int16 *)(a1 + 44);
      *(_WORD *)(v19 + 24) = *(_WORD *)(a1 + 24);
      *(_WORD *)(v19 + 30) = *(_WORD *)(a1 + 30);
      *(_WORD *)(v19 + 32) = *(_WORD *)(a1 + 32);
      *(_WORD *)(v19 + 146) = (int)(v6 - (dword_AE400_AE3F0() + 29795)) / 164;
      *(_WORD *)(v19 + 44) = *(_WORD *)(a1 + 44);
      *(_BYTE *)(v19 + 68) = *(_BYTE *)(a1 + 68);
      *(_BYTE *)(v19 + 69) = *(_BYTE *)(a1 + 69);
      sub_41E80((Type_AE400_29795*)a1);
    }
  }
  return v14;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00054180) --------------------------------------------------------
void sub_54180(int a1)
{
  int v1; // eax
  int v2; // edi
  int v3; // eax

  if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
  {
    v1 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
    *(_DWORD *)(a1 + 4) = v1;
    sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, (v1 & 3) + 33);
    *(_BYTE *)(a1 + 16) |= 2u;
  }
  *(_DWORD *)&word_AE454_AE444.x = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  v2 = sub_11980(a1);
  if ( (__int16)sub_11F50(&word_AE454_AE444) <= word_AE454_AE444.z )
  {
    v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3 - 1;
    if ( v3 )
    {
        if (!v2)
        {
            sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
            return;
        }
    }
  }
  if ( v2 )
  {
    sub_524C0(v2);
    sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v2 + 72));
    sub_524E0(v2);
  }
  sub_120B0((Type_AE400_29795*)a1, 0, *(_WORD *)(a1 + 44));
  sub_41E80((Type_AE400_29795*)a1);
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00054290) --------------------------------------------------------
void sub_54290(int a1)
{
  int result; // eax

  result = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = result - 1;
  if ( result < 0 )
    sub_41E80((Type_AE400_29795*)a1);
}

//----- (000542B0) --------------------------------------------------------
char sub_542B0(int a1)
{
  unsigned __int16 v1; // si
  unsigned int v2; // ebp
  char v3; // dl
  __int16 v4; // ax
  int v5; // eax
  int v6; // esi
  unsigned int v7; // edi
  int v8; // eax
  __int16 v9; // cx
  int v10; // edx
  _WORD *v11; // esi
  _WORD *v12; // esi
  char v14; // [esp+0h] [ebp-14h]

  v1 = *(_WORD *)(a1 + 146);
  v14 = 0;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * v1;
  if ( v2 <= dword_AE400_AE3F0() + 29795 )
  {
    v3 = *(_BYTE *)(a1 + 16);
    if ( (v3 & 2) == 0 )
    {
      *(_BYTE *)(a1 + 16) = v3 | 2;
      if ( sub_54520(a1) )
      {
        *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 34);
        *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 36);
      }
    }
  }
  else
  {
    sub_52550(a1, dword_AE400_AE3F0() + 29795 + 164 * v1);
  }
  *(_DWORD *)&word_AE454_AE444.x = *(_DWORD *)(a1 + 72);
  word_AE454_AE444.z = *(_WORD *)(a1 + 76);
  sub_41EC0_42200(&word_AE454_AE444, *(_WORD *)(a1 + 30), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 126));
  v4 = sub_11F50(&word_AE454_AE444);
  if ( v4 > word_AE454_AE444.z )
    word_AE454_AE444.z = v4;
  sub_41C70_41FB0((Type_AE400_29795*)a1, &word_AE454_AE444);
  v5 = sub_11C00((__int16 *)a1);
  v6 = v5;
  v7 = v5;
  if ( v5 )
  {
    sub_524C0(v5);
    sub_41C70_41FB0((Type_AE400_29795*)a1, (axis_3d*)(v6 + 72));
    sub_524E0(v6);
    LOBYTE(v8) = 1;
    v14 = 1;
  }
  else
  {
    LOWORD(v8) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
    v9 = *(_WORD *)(a1 + 76);
    word_AE454_AE444.z = v8;
    if ( (__int16)v8 > v9 || (v10 = *(_DWORD *)(a1 + 12) - 1, *(_DWORD *)(a1 + 12) = v10, v10 < 0) )
      v14 = 1;
  }
  if ( v14 )
  {
    v11 = (_WORD *)sub_373F0((axis_3d*)(a1 + 72), 10, 12);
    if ( v11 )
    {
      sub_526C0(a1, v7, v2);
      v11[12] = *(_WORD *)(a1 + 24);
      v11[15] = *(_WORD *)(a1 + 30);
      v11[16] = *(_WORD *)(a1 + 32);
    }
    v8 = (int)sub_373F0((axis_3d*)(a1 + 72), *(char *)(a1 + 68), *(char *)(a1 + 69));
    v12 = (_WORD *)v8;
    if ( v8 )
    {
      sub_526C0(a1, v7, v2);
      v12[12] = *(_WORD *)(a1 + 24);
      v12[15] = *(_WORD *)(a1 + 30);
      v12[16] = *(_WORD *)(a1 + 32);
      sub_41E80((Type_AE400_29795*)a1);
    }
  }
  return v8;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE454: using guessed type __int16 word_AE454_AE444;
// AE458: using guessed type __int16 word_AE454_AE444.z;

//----- (00054480) --------------------------------------------------------
void sub_54480(int a1)
{
  _WORD *result; // eax

  result = (_WORD *)sub_373F0((axis_3d*)(a1 + 72), *(char *)(a1 + 68), *(char *)(a1 + 69));
  if ( result )
  {
    result[12] = *(_WORD *)(a1 + 24);
    result[15] = *(_WORD *)(a1 + 30);
    result[16] = *(_WORD *)(a1 + 32);
    result[22] = *(_WORD *)(a1 + 44);
    sub_41E80((Type_AE400_29795*)a1);
  }
}

//----- (00054520) --------------------------------------------------------
int sub_54520(int a1)
{
  unsigned int v1; // edi
  int v2; // ebp
  unsigned int v3; // ebx
  unsigned int v4; // eax
  unsigned int ii; // ebx
  unsigned int v6; // eax
  unsigned int v8; // edi
  int v9; // ebp
  unsigned int v10; // ebx
  unsigned int v11; // eax
  unsigned int j; // ebx
  unsigned int v13; // eax
  unsigned int v14; // ebp
  unsigned int k; // edi
  unsigned int v16; // eax
  unsigned int m; // ebx
  unsigned int v18; // eax
  unsigned int v19; // ebx
  int v20; // ebp
  unsigned int v21; // edi
  unsigned int v22; // eax
  unsigned int v23; // [esp+4h] [ebp-34h]
  unsigned int v24; // [esp+4h] [ebp-34h]
  unsigned int v25; // [esp+4h] [ebp-34h]
  int i; // [esp+Ch] [ebp-2Ch]
  int v27; // [esp+14h] [ebp-24h]
  int v28; // [esp+18h] [ebp-20h]
  int v29; // [esp+1Ch] [ebp-1Ch]
  int n; // [esp+20h] [ebp-18h]

  if ( *(__int16 *)(a1 + 26) > 16 )
    *(_WORD *)(a1 + 26) = 16;
  switch ( *(_BYTE *)(a1 + 65) )
  {
    case 0:
    case 3:
    case 4:
      v8 = -1;
      v9 = 0;
      v10 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
      v28 = 164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29795;
      while ( 1 )
      {
        if ( v10 <= dword_AE400_AE3F0() + 29795 )
        {
          for ( i = 0; i != 80; i += 4 )
          {
            for ( j = *(_DWORD *)(i + dword_AE408_AE3F8() + 36382); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
            {
              if ( *(_WORD *)(j + 24) != *(_WORD *)(a1 + 24) )
              {
                if ( *(_BYTE *)(j + 58) )
                {
                  v13 = sub_54A90((__int16 *)a1, j, 0x71u, 0x71u);
                  if ( v13 < v8 )
                  {
                    v9 = j;
                    v8 = v13;
                  }
                }
              }
            }
          }
          if ( !v9 )
            return 0;
          *(_WORD *)(a1 + 146) = (v9 - (dword_AE400_AE3F0() + 29795)) / 164;
          sub_52500((_WORD *)a1, v9);
          if ( *(_BYTE *)(v9 + 64) == 3 && !*(_BYTE *)(v9 + 65) )
            sub_46520((Type_AE400_29795*)v9);
          return 1;
        }
        if ( *(_WORD *)(v10 + 24) != *(_WORD *)(a1 + 24) && (*(_BYTE *)(v10 + 16) & 0x20) == 0 )
        {
          v24 = *(__int16 *)(*(_DWORD *)(v28 + 156) + 28);
          if ( sub_42340((axis_3d*)(_WORD *)(v10 + 72), (axis_3d*)(_WORD *)(a1 + 72)) <= v24 )
          {
            if ( *(_BYTE *)(v10 + 65) == 2 )
            {
              v11 = sub_54BD0((__int16 *)a1, v10, 0x71u, 0x71u);
              if ( v11 >= v8 )
                goto LABEL_35;
            }
            else
            {
              v11 = sub_54A90((__int16 *)a1, v10, 0x71u, 0x71u);
              if ( v11 >= v8 )
                goto LABEL_35;
            }
            v9 = v10;
            v8 = v11;
          }
        }
LABEL_35:
        v10 = *(_DWORD *)v10;
      }
    case 1:
      v14 = -1;
      v29 = 0;
      for ( k = *(_DWORD *)(dword_AE408_AE3F8() + 36466); k > dword_AE400_AE3F0() + 29795; k = *(_DWORD *)k )
      {
        if ( *(unsigned __int16 *)(k + 144) != *(__int16 *)(a1 + 24) )
        {
          if ( *(_BYTE *)(k + 58) )
          {
            v16 = sub_54A90((__int16 *)a1, k, 0x71u, 0x71u);
            if ( v16 < v14 )
            {
              v29 = k;
              v14 = v16;
            }
          }
        }
      }
      for ( m = *(_DWORD *)(dword_AE408_AE3F8() + 36470); m > dword_AE400_AE3F0() + 29795; m = *(_DWORD *)m )
      {
        if ( *(unsigned __int16 *)(m + 144) != *(__int16 *)(a1 + 24) )
        {
          if ( *(_BYTE *)(m + 58) )
          {
            v18 = sub_54A90((__int16 *)a1, m, 0x71u, 0x71u);
            if ( v18 < v14 )
            {
              v29 = m;
              v14 = v18;
            }
          }
        }
      }
      if ( !v29 )
        return 0;
      *(_WORD *)(a1 + 146) = (v29 - (dword_AE400_AE3F0() + 29795)) / 164;
      sub_52500((_WORD *)a1, v29);
      return 1;
    case 7:
    case 8:
    case 0xB:
    case 0xC:
      v19 = -1;
      v20 = 0;
      v27 = 164 * *(__int16 *)(a1 + 24) + dword_AE400_AE3F0() + 29795;
      v21 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
      while ( 2 )
      {
        if ( v21 <= dword_AE400_AE3F0() + 29795 )
        {
          if ( !v20 )
            return 0;
          *(_WORD *)(a1 + 146) = (v20 - (dword_AE400_AE3F0() + 29795)) / 164;
          sub_52500((_WORD *)a1, v20);
          if ( *(_BYTE *)(v20 + 64) == 3 && !*(_BYTE *)(v20 + 65) )
            sub_46520((Type_AE400_29795*)v20);
          return 1;
        }
        if ( *(_WORD *)(v21 + 24) == *(_WORD *)(a1 + 24) )
          goto LABEL_76;
        if ( (*(_BYTE *)(v21 + 16) & 0x20) != 0 )
          goto LABEL_76;
        v25 = *(__int16 *)(*(_DWORD *)(v27 + 156) + 28);
        if ( sub_42340((axis_3d*)(_WORD *)(v21 + 72), (axis_3d*)(_WORD *)(a1 + 72)) > v25 )
          goto LABEL_76;
        if ( *(_BYTE *)(v21 + 65) == 2 )
        {
          v22 = sub_54A90((__int16 *)a1, v21, 0x71u, 0x71u);
          if ( v22 < v19 )
            goto LABEL_75;
        }
        else
        {
          v22 = sub_54A90((__int16 *)a1, v21, 0x71u, 0x71u);
          if ( v22 < v19 )
          {
LABEL_75:
            v20 = v21;
            v19 = v22;
          }
        }
LABEL_76:
        v21 = *(_DWORD *)v21;
        continue;
      }
    case 9:
      v1 = -1;
      v2 = 0;
      v3 = *(_DWORD *)(dword_AE408_AE3F8() + 36462);
      while ( 2 )
      {
        if ( v3 > dword_AE400_AE3F0() + 29795 )
        {
          if ( *(_WORD *)(v3 + 24) == *(_WORD *)(a1 + 24) )
            goto LABEL_13;
          if ( (*(_BYTE *)(v3 + 16) & 0x20) != 0 )
            goto LABEL_13;
          v23 = *(__int16 *)(a1 + 128) * *(_DWORD *)(a1 + 8);
          if ( sub_42340((axis_3d*)(_WORD *)(v3 + 72), (axis_3d*)(_WORD *)(a1 + 72)) > v23 )
            goto LABEL_13;
          if ( *(_BYTE *)(v3 + 65) == 2 )
          {
            v4 = sub_54BD0((__int16 *)a1, v3, 0x71u, 0x71u);
            if ( v4 < v1 )
              goto LABEL_12;
          }
          else
          {
            v4 = sub_54A90((__int16 *)a1, v3, 0x71u, 0x71u);
            if ( v4 < v1 )
            {
LABEL_12:
              v2 = v3;
              v1 = v4;
            }
          }
LABEL_13:
          v3 = *(_DWORD *)v3;
          continue;
        }
        break;
      }
      for ( n = 0; n != 80; n += 4 )
      {
        for ( ii = *(_DWORD *)(n + dword_AE408_AE3F8() + 36382); ii > dword_AE400_AE3F0() + 29795; ii = *(_DWORD *)ii )
        {
          if ( *(_WORD *)(ii + 24) != *(_WORD *)(a1 + 24) )
          {
            if ( *(_BYTE *)(ii + 58) )
            {
              v6 = sub_54A90((__int16 *)a1, ii, 0x71u, 0x200u);
              if ( v6 < v1 )
              {
                v2 = ii;
                v1 = v6;
              }
            }
          }
        }
      }
      if ( !v2 )
        return 0;
      *(_WORD *)(a1 + 146) = (v2 - (dword_AE400_AE3F0() + 29795)) / 164;
      sub_52500((_WORD *)a1, v2);
      return 1;
    default:
      return 0;
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00054A90) --------------------------------------------------------
int sub_54A90(__int16 *a1, int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  __int16 v4; // ax
  __int16 v5; // ax
  signed int v7; // ebx
  int v8; // esi
  int v9; // edi
  int v10; // eax
  int v11; // edx
  unsigned __int16 v12; // [esp+0h] [ebp-18h]
  unsigned __int16 v13; // [esp+4h] [ebp-14h]

  sub_524C0(a2);
  v4 = sub_42150_42490((axis_3d*)(uint16*)(a1 + 36), (axis_3d*)(_WORD *)(a2 + 72));
  v12 = sub_42210(a1[15], v4);
  if ( v12 <= a3 && (v5 = sub_42180((axis_3d*)(uint16*)(a1 + 36), (axis_3d*)(_WORD *)(a2 + 72)), v13 = sub_42210(a1[16], v5), v13 <= a4) )
  {
    v7 = sub_423D0_42710((axis_3d*)(uint16*)(a1 + 36), (axis_3d*)(_WORD *)(a2 + 72));
    sub_524E0(a2);
    if ( v7 <= 5120 )
    {
      v8 = v7 * cos_9134C[v12];
      v9 = v7 * sin_90B4C[v12];
      v10 = v7 * cos_9134C[v13];
      v11 = (__int16)((sin_90B4C[v13] * v7) >> 14);
      return (v10 >> 16) * (v10 >> 16) + (v8 >> 16) * (v8 >> 16) + (__int16)(v9 >> 14) * (__int16)(v9 >> 14) + v11 * v11;
    }
    else
    {
      return -1;
    }
  }
  else
  {
    sub_524E0(a2);
    return -1;
  }
}
// 90B4C: using guessed type int cos_90B4C[256];
// 9134C: using guessed type void (*off_9134C[2])();

//----- (00054BD0) --------------------------------------------------------
int sub_54BD0(__int16 *a1, int a2, unsigned __int16 a3, unsigned __int16 a4)
{
  _WORD *v4; // ebx
  _WORD *v5; // esi
  __int16 v6; // ax
  __int16 v8; // ax
  unsigned __int16 v9; // di
  signed int v10; // eax
  int v11; // ebx
  int v12; // ecx
  int v13; // esi
  int v14; // eax
  unsigned __int16 v15; // [esp+0h] [ebp-10h]

  v4 = (_WORD *)(a2 + 72);
  v5 = (uint16*)(a1 + 36);
  v6 = sub_42150_42490((axis_3d*)(uint16*)(a1 + 36), (axis_3d*)(_WORD *)(a2 + 72));
  v15 = sub_42210(a1[15], v6);
  if ( v15 > a3 )
    return -1;
  v8 = sub_42180((axis_3d*)v5, (axis_3d*)v4);
  v9 = sub_42210(a1[16], v8);
  if ( v9 > a4 )
    return -1;
  v10 = sub_423D0_42710((axis_3d*)v5, (axis_3d*)v4);
  if ( v10 > 5120 )
    return -1;
  v11 = v10 * cos_9134C[v15];
  v12 = v10 * sin_90B4C[v15];
  v13 = v10 * cos_9134C[v9];
  v14 = (__int16)((sin_90B4C[v9] * v10) >> 14);
  return (__int16)(v12 >> 14) * (__int16)(v12 >> 14) + (v11 >> 16) * (v11 >> 16) + (v13 >> 16) * (v13 >> 16) + v14 * v14;
}
// 90B4C: using guessed type int cos_90B4C[256];
// 9134C: using guessed type void (*off_9134C[2])();

//----- (00054F00) --------------------------------------------------------
void sub_54F00()
{
  __int16 i; // si
  unsigned int j; // ebx
  _DWORD *k; // ebx
  int result; // eax

  for ( i = 0; i < 20; ++i )
  {
    for ( j = *(_DWORD *)(dword_AE408_AE3F8() + 4 * i + 36382); j > dword_AE400_AE3F0() + 29795; j = *(_DWORD *)j )
    {
      if ( *(int *)(j + 12) >= 0 )
      {
        sub_54F80(j);
      }
      else
      {
        *(_BYTE *)(j + 58) = -6;
        *(_BYTE *)(j + 59) = 0;
      }
    }
  }
  for ( k = *(_DWORD **)(dword_AE408_AE3F8() + 36466); ; k = (_DWORD *)*k )
  {
    result = dword_AE400_AE3F0() + 29795;
    if ( (unsigned int)k <= dword_AE400_AE3F0() + 29795 )
      break;
    sub_54F80((int)k);
  }
  //return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00054F80) --------------------------------------------------------
int sub_54F80(int a1)
{
  int v1; // edi
  char v2; // ah
  char v3; // dh
  unsigned int v4; // edx
  int v5; // eax
  int v6; // edi
  __int16 v7; // ax
  unsigned __int16 v8; // dx
  unsigned int v9; // ebx
  unsigned int i; // eax
  int result; // eax
  unsigned int v12; // eax
  unsigned int v13; // edx

  v1 = dword_AE400_AE3F0();
  v2 = *(_BYTE *)(a1 + 58);
  if ( v2 )
  {
    *(_BYTE *)(a1 + 58) = v2 - 1;
    v12 = 164 * *(unsigned __int16 *)(a1 + 54) + v1 + 29795;
    v13 = v1 + 29795;
    if ( v12 > v1 + 29795 )
    {
      do
      {
        *(_BYTE *)(v12 + 58) = *(_BYTE *)(a1 + 58);
        v12 = v13 + 164 * *(unsigned __int16 *)(v12 + 54);
      }
      while ( v12 > v13 );
      result = 0;
      dword_AE400_AE3F0(v1);
    }
    else
    {
      result = 0;
      dword_AE400_AE3F0(v1);
    }
  }
  else
  {
    v3 = *(_BYTE *)(a1 + 59);
    if ( v3 )
    {
      *(_BYTE *)(a1 + 59) = v3 - 1;
      result = 0;
      dword_AE400_AE3F0(v1);
    }
    else
    {
      v4 = *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333);
      v5 = sub_42410((_WORD *)(a1 + 72), (_WORD *)(164 * (unsigned __int16)v4 + dword_AE400_AE3F0() + 29795 + 72));
      v6 = dword_AE400_AE3F0();
      if ( v5 < 37748736 )
      {
        v7 = Distance_410CE_4140E(v4);
        v8 = *(_WORD *)(a1 + 54);
        *(_WORD *)(a1 + 48) = v7;
        v6 = dword_AE400_AE3F0();
        *(_BYTE *)(a1 + 58) = 16;
        v9 = v6 + 29795;
        for ( i = 164 * v8 + v6 + 29795; i > v9; i = v9 + 164 * *(unsigned __int16 *)(i + 54) )
          *(_BYTE *)(i + 58) = *(_BYTE *)(a1 + 58) + 2;
      }
      *(_BYTE *)(a1 + 59) = 0;
      result = 0;
      dword_AE400_AE3F0(v6);
    }
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00055100) --------------------------------------------------------
void sub_55100_55630()
{
  int result; // eax
  __int16 i; // di
  int v2; // ebx

  if ( byte_939E5 )
  {
    if ( byte_939E4 )
    {
      result = dword_AE408_AE3F8();
      if ( (str_AE408_AE3F8->var_u8_2 & 1) == 0 )
      {
        sub_522E0();
        sub_51FC0();
        for ( i = 0; i < 47; ++i )
        {
          v2 = 5 * i;
          switch ( word_12CD20[v2] )
          {
            case 1:
              sub_483C0(word_12CD26[5 * i], i, word_12CD24[5 * i], word_12CD22[5 * i]);
              word_12CD20[5 * i] = 0;
              word_12CD28[5 * i] = 2;
              break;
            case 2:
              sub_48520(word_12CD26[5 * i], i, word_12CD24[5 * i], word_12CD22[5 * i]);
              word_12CD20[5 * i] = 0;
              goto LABEL_13;
            case 3:
              sub_48470(word_12CD26[5 * i], i, word_12CD24[5 * i], word_12CD22[5 * i]);
              word_12CD20[5 * i] = 0;
              word_12CD28[5 * i] = 2;
              break;
            case 4:
              if ( word_12CD24[5 * i] == 512 )
              {
                sub_5D750(0, i);
              }
              else
              {
                sub_5D460(0, i, -1);
                sub_66250(0, i, (int)(unsigned __int16)word_12CD24[5 * i] >> 8);
              }
              v2 = 5 * i;
              word_12CD20[v2] = 0;
LABEL_13:
              word_12CD28[v2] = 2;
              break;
            default:
              break;
          }
          result = 10 * i;
          *(__int16 *)((char *)word_12CD24 + result) = 0;
        }
      }
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// AE408: using guessed type int dword_AE408_AE3F8();
// 12CD20: using guessed type __int16 word_12CD20[];
// 12CD22: using guessed type __int16 word_12CD22[];
// 12CD24: using guessed type __int16 word_12CD24[];
// 12CD26: using guessed type __int16 word_12CD26[];
// 12CD28: using guessed type __int16 word_12CD28[236];

//----- (00055370) --------------------------------------------------------
void sub_55370_558A0(__int16 a1, __int16 a2, __int16 a3)
{
  unsigned int v3; // esi
  unsigned __int16 v4; // si
  int v5; // ebp
  int v6; // ebx
  __int16 v7; // ax
  int v8; // esi
  int v9; // edi
  __int16 v10; // ax
  __int16 v11; // si
  int v12; // [esp+0h] [ebp-24h]
  __int16 v13; // [esp+8h] [ebp-1Ch]
  signed int v14; // [esp+Ch] [ebp-18h]
  __int16 v15; // [esp+10h] [ebp-14h]

  v15 = 0;
  if ( byte_939E5 && byte_939E4 )
  {
    v3 = dword_AE400_AE3F0() + 29795 + 164 * a1;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
      v6 = 0x7FFF;
      LOWORD(v8) = 0x7FFF;
    }
    else
    {
      if ( *(char *)(v3 + 16) < 0 )
        return;
      if ( sub_42410(
             (_WORD *)(164 * *(unsigned __int16 *)(2049 * str_AE400_AE3F0->var_u16_8 + dword_AE400_AE3F0() + 13333)
                     + dword_AE400_AE3F0()
                     + 29795
                     + 72),
             (_WORD *)(v3 + 72)) > 150994944 )
        return;
      v12 = 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13333)
          + dword_AE400_AE3F0()
          + 29795;
      v15 = *(_WORD *)(v3 + 24);
      v14 = sub_423D0_42710((axis_3d*)(_WORD *)(v12 + 72), (axis_3d*)(_WORD *)(v3 + 72));
      v13 = sub_42150_42490((axis_3d*)(_WORD *)(v12 + 72), (axis_3d*)(_WORD *)(v3 + 72));
      v4 = sub_42210(*(_WORD *)(v12 + 30), v13);
      v5 = (12288 * (512 - v4 / 2 + 512)
          - (__CFSHL__((12288 * (512 - v4 / 2 + 512)) >> 31, 10)
           + ((12288 * (512 - v4 / 2 + 512)) >> 31 << 10))) >> 10;
      v6 = 0x7FFF * (v5 - v14) / v5;
      v7 = sub_42240(*(unsigned __int16 *)(v12 + 30), v13);
      if ( v6 < 512 )
        return;
      if ( v6 > 0x7FFF )
        v6 = 0x7FFF;
      if ( v14 > 320 )
      {
        if ( v4 > 0x200u )
          v4 = 1024 - v4;
        v8 = ((v7 * (v4 << 15) - (__CFSHL__((v7 * (v4 << 15)) >> 31, 9) + ((v7 * (v4 << 15)) >> 31 << 9))) >> 9)
           + 0x7FFF;
        if ( v8 < 0 )
          v8 = 0;
        if ( v8 > 0xFFFF )
          LOWORD(v8) = -1;
      }
      else
      {
        LOWORD(v8) = 0x7FFF;
      }
    }
    switch ( a3 )
    {
      case 1:
      case 2:
        if ( a2 == *(_WORD *)(dword_AE400_AE3F0() + 8) && byte_939EC != 3 )
          sub_520F0(0, a3, 3, 70);
        break;
      case 3:
      case 9:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 30:
      case 40:
      case 43:
      case 44:
      case 45:
        if ( sub_55870(v6, (unsigned __int16)word_12CD24[5 * a3]) )
        {
          word_12CD24[5 * a3] = v6;
          word_12CD22[5 * a3] = v8;
          word_12CD26[5 * a3] = v15;
          word_12CD20[5 * a3] = 1;
        }
        break;
      case 4:
      case 14:
      case 29:
        v9 = 5 * a3;
        if ( sub_55870(v6, (unsigned __int16)word_12CD24[v9]) )
        {
          if ( a2 == *(_WORD *)(dword_AE400_AE3F0() + 8) )
          {
            word_12CD24[5 * a3] = v6;
            word_12CD22[5 * a3] = v8;
            word_12CD26[5 * a3] = 0;
            word_12CD20[5 * a3] = 1;
          }
          else if ( a2 == -1 )
          {
            word_12CD24[5 * a3] = v6;
            v10 = v15;
            word_12CD22[5 * a3] = v8;
            v11 = 1;
            goto LABEL_43;
          }
        }
        break;
      case 5:
        if ( a2 == *(_WORD *)(dword_AE400_AE3F0() + 8) )
          sub_520F0(0, a3, 3, 120);
        break;
      case 7:
      case 8:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 41:
        if ( sub_55870(v6, (unsigned __int16)word_12CD24[5 * a3]) )
        {
          word_12CD24[5 * a3] = v6;
          word_12CD22[5 * a3] = v8;
          word_12CD26[5 * a3] = v15;
          word_12CD20[5 * a3] = 3;
        }
        break;
      case 17:
        v9 = 5 * a3;
        if ( sub_55870(v6, (unsigned __int16)word_12CD24[v9]) )
        {
          if ( a2 == *(_WORD *)(dword_AE400_AE3F0() + 8) )
          {
            word_12CD24[5 * a3] = v6;
            word_12CD22[5 * a3] = v8;
            word_12CD26[5 * a3] = 0;
            word_12CD20[5 * a3] = 3;
          }
          else if ( a2 == -1 )
          {
            word_12CD24[5 * a3] = v6;
            v10 = v15;
            word_12CD22[5 * a3] = v8;
            v11 = 3;
LABEL_43:
            word_12CD26[v9] = v10;
            word_12CD20[v9] = v11;
          }
        }
        break;
      case 31:
        if ( a2 == *(_WORD *)(dword_AE400_AE3F0() + 8) && byte_939EC != 3 )
          sub_520F0(0, a3, 3, 85);
        break;
      case 42:
        if ( sub_55870(v6, (unsigned __int16)word_12CD24[5 * a3]) )
        {
          word_12CD24[5 * a3] = v6;
          word_12CD22[5 * a3] = v8;
          word_12CD26[5 * a3] = v15;
          word_12CD20[5 * a3] = 1;
        }
        break;
      default:
        return;
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939EC: using guessed type char byte_939EC;
// AE400: using guessed type int dword_AE400_AE3F0();
// 12CD20: using guessed type __int16 word_12CD20[];
// 12CD22: using guessed type __int16 word_12CD22[];
// 12CD24: using guessed type __int16 word_12CD24[];
// 12CD26: using guessed type __int16 word_12CD26[];

//----- (00055870) --------------------------------------------------------
bool sub_55870(int a1, int a2)
{
  return a1 - a2 >= -8;
}

//----- (00055890) --------------------------------------------------------
void sub_55890(int a1, __int16 a2, __int16 a3)
{
  if ( byte_939E5 && byte_939E4 )
  {
    if ( (unsigned __int16)a3 >= 5u )
    {
      if ( (unsigned __int16)a3 <= 5u )
      {
LABEL_10:
        if ( a2 == *(_WORD *)(dword_AE400_AE3F0() + 8) )
          sub_52400(0, a3, 0);
        return;
      }
      if ( a3 != 31 )
        return;
LABEL_9:
      if ( byte_939EC == 3 )
        return;
      goto LABEL_10;
    }
    if ( a3 && (unsigned __int16)a3 <= 2u )
      goto LABEL_9;
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939EC: using guessed type char byte_939EC;
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000558F0) --------------------------------------------------------
int sub_558F0()
{
  int v0; // eax
  void *retaddr[2]; // [esp+0h] [ebp+0h]

  v0 = sub_5F83E(--byte_968E0);
  if ( !byte_968E0 )
    v0 = sub_55960();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(v0);
}
// 968E0: using guessed type char byte_968E0;

//----- (00055960) --------------------------------------------------------
int sub_55960()
{
  int result; // eax

  if ( byte_968E1 )
  {
    sub_5DC91(dword_80120);
    sub_20E60_20E60();
    result = sub_5F83E(127);
    byte_968E0 = 127;
    byte_968E1 = 0;
  }
  return result;
}
// 80120: using guessed type int dword_80120;
// 968E0: using guessed type char byte_968E0;
// 968E1: using guessed type char byte_968E1;

//----- (000559A0) --------------------------------------------------------
int sub_559A0()
{
  if ( byte_939E4 && byte_939E5 )
    return sub_66324(dword_CC140);
  else
    return 0;
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// CC140: using guessed type int dword_CC140;

//----- (00055A40) --------------------------------------------------------
int sub_55A40(Type_AE400_29795* a1x, char a2, char a3)
{
  int v3; // edx
  __int16 v4; // ax
  int result; // eax
  //int v6; // esi
  Type_AE400_29795* v7x; // eax
  char v8; // bl
  Type_160* v9x; // edx
  char v10; // bh
  int v11; // esi
  unsigned int i; // eax
  int v13; // ecx
  int v14; // edx
  int v15; // ebx
  int v16; // ebx
  Type_160* v17x; // edx
  unsigned int v18; // eax
  int v19; // esi
  Type_AE400_29795* v20x; // ebx
  int v21; // ebx
  Type_160* v22x; // eax
  Type_AE400_29795* v23x; // [esp+0h] [ebp-1Ch]
  char v24; // [esp+4h] [ebp-18h]
  char v25; // [esp+8h] [ebp-14h]

  v3 = a1x->actLife_29807_12;
  if ( v3 )
  {
    a1x->actLife_29807_12 = v3 - 1;
    if ( v3 == 1 )
    {
      sub_41E80(a1x);
      return 0;
    }
  }
  v4 = sub_11F50(&a1x->var_u32_29867_72);
  if ( sub_42090(&a1x->var_u32_29867_72, v4, 0, 0, -128) == -1 )
  {
    sub_41E80(a1x);
    return 0;
  }
  //v6 = dword_AE400_AE3F0();
  if ( (a1x->var_u8_29858_63 & 3) != 0 )
  {
LABEL_42:
    //dword_AE400_AE3F0(dword_AE400_AE3F0());
    return 0;
  }
  v7x = str_AE408_AE3F8->var_u32_36462[0];
  while ( 1 )
  {
    v23x = v7x;
    if (str_AE400_AE3F0->str_29795 >= v7x )
      goto LABEL_42;
    v8 = v7x->var_u8_29860_65;
    //dword_AE400_AE3F0(dword_AE400_AE3F0());
    if ( !v8 && v7x->actLife_29807_12 >= 0 )
    {
      v9x = v7x->var_u32_29955_160;
      if ( *(_WORD *)(dword_AE400_AE3F0() + 8) == *(_WORD *)&v9x->var_48 )
      {
        v10 = a1x->var_29811_16.byte[0];
        if ( (v10 & 1) == 0 )
        {
          if ( v9x->var_676.var_u16[a1x->var_u8_29860_65])
              a1x->var_29811_16.byte[0] = v10 | 1;
        }
      }
      if ( sub_11950(v7x, a1x) )
        break;
    }
LABEL_40:
    v7x = v23x->next;
    //dword_AE400_AE3F0() = dword_AE400_AE3F0();
  }
  v11 = dword_AE400_AE3F0();
  for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > v11 + 29795; i = *(_DWORD *)i )
  {
    if ( *(_BYTE *)(i + 65) == 1 )
    {
      v13 = a1x->var_u8_29860_65;
      v14 = *(_DWORD *)(i + 160);
      v15 = v14 + 2 * v13;
      if ( !*(_WORD *)(v15 + 676) && !*(_WORD *)(v15 + 628) && *(_BYTE *)(v13 + v14 + 796) == 1 )
        *(_WORD *)(v15 + 628) = 200;
    }
  }
  v16 = 0;
  v24 = -1;
  v25 = 0;
  v17x = v23x->var_u32_29955_160;
  int v17y = 0;
  while ( 1 )
  {
    v18 = v11 + 29795 + 164 * v17x->var_14958_1635_532[v17y];
    if ( v18 <= v11 + 29795 )
    {
      if ( v24 == -1 )
        v24 = v16;
      goto LABEL_30;
    }
    if ( *(_BYTE *)(v18 + 64) == 12 && a2 == *(_BYTE *)(v18 + 65) )
      break;
LABEL_30:
    ++v16;
    //v17 += 4;
    v17y++;
    if ( v16 >= 24 )
      goto LABEL_31;
  }
  v25 = 1;
LABEL_31:
  dword_AE400_AE3F0(v11);
  if ( v25 || v24 == -1 )
    goto LABEL_40;
  if ( (a1x->var_29811_16.byte[2] & 4) != 0 )
      a1x->var_u16_29927_132 = 0;
  dword_AE400_AE3F0(v11);
  sub_55370_558A0(v23x - str_AE400_AE3F0->str_29795, -1, 18);
  v19 = dword_AE400_AE3F0();
  v20x = str_AE400_AE3F0->str_29795;
  a1x->var_29811_16.byte[0] |= 1u;
  a1x->var_u16_29837_42 = (v23x - v20x) /* / sizeof(Type_AE400_29795)*/;
  a1x->var_u8_29865_70 = a3;
  *(_DWORD *)(v23x->var_u32_29955_160 + 4 * v24 + 532) = (a1x - v20x) /* / sizeof(Type_AE400_29795)*/;
  *(_WORD *)(v23x->var_u32_29955_160 + 940) = v24;
  v21 = 0;
  v22x = v23x->var_u32_29955_160;
  int v22y = 0;
  while (v22x->var_15198_1875_772[v22y] != -1 )
  {
    ++v21;
    //++v22;
    v22y++;
    if ( v21 >= 10 )
      goto LABEL_39;
  }
  v22x->var_15198_1875_772[v22y] = v24;
LABEL_39:
  result = 1;
  dword_AE400_AE3F0(v19);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00055D30) --------------------------------------------------------
void sub_55D30(Type_AE400_29795* a1x)//226D30_
{
  Type_AE400_29795* result; // eax
  int v2; // ebx

  byte_968E4 = 0;
  if (sub_55A40(a1x, a1x->var_u8_29860_65, a1x->var_u8_29865_70 - 2))
  {
    //result = (*(int (**)(int))((char *)&off_987DE + 14 * *(char *)(a1 + 65)))(a1 + 72);
    result = off_987DE[a1x->var_u8_29860_65].adress(&a1x->var_u32_29867_72);
    if ( result )
    {
        a1x->var_u8_29865_70 += 2;
      if ( byte_968E4 )
      {
        v2 = a1x->var_29811_16.byte[0] & 0x40000;
        LOBYTE(v2) = 1;
        result->var_29811_16.byte[0] |= v2;
      }
      if ( (result->var_29811_16.byte[2] & 4) != 0 )
          result->var_u16_29881_86 = 280;
    }
  }
}
// 968E4: using guessed type char byte_968E4;
// 987DE: using guessed type int (*off_987DE)(int);

//----- (00055DB0) --------------------------------------------------------
int sub_55DB0(Type_AE400_29795* a1x)
{
  return sub_55A40(a1x, a1x->var_u8_29860_65, a1x->var_u8_29865_70 - 1);
}

//----- (00055DD0) --------------------------------------------------------
int sub_55DD0(int a1, int *a2)
{
  int v2; // edi
  int v3; // eax

  if ( a2[35] < 0 )
    goto LABEL_11;
  if ( a2[3] < 0 )
    goto LABEL_11;
  v2 = *(_DWORD *)(a1 + 132);
  if ( v2 )
  {
    v3 = a2[40];
    if ( !*(_WORD *)(v3 + 50) || v2 > *(_DWORD *)(dword_AE400_AE3F0() + 164 * *(unsigned __int16 *)(v3 + 50) + 29935) )
      goto LABEL_11;
  }
  if ( a2[35] >= *(_DWORD *)(a1 + 136) && *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
    return 1;
  if ( *(_WORD *)(a1 + 48) != *(_WORD *)(a1 + 50) )
    return 1;
LABEL_11:
  sub_55370_558A0(0, *(_WORD *)(a2[40] + 48), 29);
  return 0;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00055E80) --------------------------------------------------------
int sub_55E80(int a1, int a2)
{
  __int16 v2; // bx
  int v3; // ebx

  v2 = *(_WORD *)(a1 + 48);
  if ( v2 == *(_WORD *)(a1 + 50) )
  {
    v3 = *(_DWORD *)(a2 + 132);
    //fix 
    /*
    if ( v3 >= 0 )
      *(_DWORD *)(a2 + 132) = -*(_DWORD *)(a1 + 136);
    else
      *(_DWORD *)(a2 + 132) = v3 - *(_DWORD *)(a1 + 136);
    */
    return 1;
  }
  else
  {
    if ( v2 && *(int *)(a2 + 132) > 0 )
      *(_DWORD *)(a2 + 132) = 0;
    return 0;
  }
}

//----- (00055EF0) --------------------------------------------------------
int sub_55EF0(__int16 a1, int a2, int a3)
{
  unsigned __int16 v3; // ax
  int v4; // ebx
  int v5; // esi
  int v6; // ebx
  unsigned __int16 v7; // ax
  int v8; // esi
  int v9; // ebx
  int v10; // esi
  int v12; // [esp+0h] [ebp-18h] BYREF
  __int16 v13; // [esp+4h] [ebp-14h]

  v12 = *(_DWORD *)(a3 + 72);
  v13 = *(_WORD *)(a3 + 76);
  HIBYTE(a1) = *(_BYTE *)(a2 + 17);
  if ( (a1 & 0x100) != 0 )
  {
    v3 = *(_WORD *)(a2 + 30) - 512;
    HIBYTE(v3) &= 7u;
    sub_41EC0_42200((axis_3d*)(uint16*)&v12, v3, 0, 256);
    a1 = sub_11F50((axis_3d*)(__int16 *)&v12);
    if ( a1 > v13 )
    {
      v12 = *(_DWORD *)(a3 + 72);
      v13 = *(_WORD *)(a3 + 76);
    }
    v4 = dword_AE400_AE3F0();
    v5 = 164 * *(unsigned __int16 *)(a3 + 54);
    while ( 1 )
    {
      v6 = v5 + v4 + 29795;
      if ( v6 == dword_AE400_AE3F0() + 29795 )
        break;
      a1 = sub_41C70_41FB0((Type_AE400_29795*)v6, (axis_3d*)&v12);
      v5 = 164 * *(unsigned __int16 *)(v6 + 54);
      v4 = dword_AE400_AE3F0();
    }
  }
  else if ( (a1 & 0x200) != 0 )
  {
    v7 = *(_WORD *)(a2 + 30);
    HIBYTE(v7) = (HIBYTE(v7) + 2) & 7;
    sub_41EC0_42200((axis_3d*)(uint16*)&v12, v7, 0, 256);
    a1 = sub_11F50((axis_3d*)(__int16 *)&v12);
    if ( a1 > v13 )
    {
      v12 = *(_DWORD *)(a3 + 72);
      v13 = *(_WORD *)(a3 + 76);
    }
    v8 = 164 * *(unsigned __int16 *)(a3 + 54);
    v9 = dword_AE400_AE3F0() + 29795;
    while ( 1 )
    {
      v10 = v9 + v8;
      if ( v10 == dword_AE400_AE3F0() + 29795 )
        break;
      a1 = sub_41C70_41FB0((Type_AE400_29795*)v10, (axis_3d*)&v12);
      v9 = 164 * *(unsigned __int16 *)(v10 + 54);
      v8 = dword_AE400_AE3F0() + 29795;
    }
  }
  return sub_41C70_41FB0((Type_AE400_29795*)a3, (axis_3d*)&v12);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00056090) --------------------------------------------------------
int sub_56090(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v2 = *(_WORD *)(a1 + 42);
    v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
LABEL_5:
      result = a1;
      --*(_WORD *)(a1 + 48);
      return result;
    }
    if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
    {
      *(_WORD *)(a1 + 48) = 1;
      goto LABEL_5;
    }
    while ( *(char *)(a1 + 61) >= 0 )
    {
      if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
      {
        v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 0);
        if ( v4 )
        {
          v5 = *(_WORD *)(v3 + 126);
          *(_WORD *)(v4 + 126) += v5;
          sub_55EF0(v5, v3, v4);
          *(_BYTE *)(v4 + 68) = 10;
          *(_BYTE *)(v4 + 69) = 0;
          *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
          *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
          *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
          *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
          *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
          *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
          *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
          *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
          *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
          *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
          sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
          sub_55370_558A0((v4 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 9);
        }
      }
      sub_55E80(a1, v3);
      --*(_BYTE *)(a1 + 61);
    }
    *(_BYTE *)(a1 + 61) = 0;
    result = a1;
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00056270) --------------------------------------------------------
void sub_56270(int a1)
{
  _DWORD *v1; // ebx
  int v2; // edi
  int v3; // ebp

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = (_DWORD *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42));
    if ( (unsigned int)v1 > dword_AE400_AE3F0() + 29795 )
    {
      if ( sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42)))
        && v1[3] < v1[2]
        && v1[35] >= *(_DWORD *)(a1 + 136) )
      {
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
          sub_55370_558A0(((int)v1 - dword_AE400_AE3F0() - 29795) / 164, -1, 25);
        v2 = 5 * v1[2] / 100 + v1[3];
        v3 = v1[2];
        v1[3] = v2;
        if ( v2 > v3 )
          v1[3] = v3;
        if ( (int)v1[33] >= 0 )
        {
          //fix v1[33] = -*(_DWORD *)(a1 + 136);
          --*(_WORD *)(a1 + 48);
          return;
        }
        v1[33] -= *(_DWORD *)(a1 + 136);
      }
      else
      {
        *(_WORD *)(a1 + 48) = 1;
      }
    }
    --*(_WORD *)(a1 + 48);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00056380) --------------------------------------------------------
void sub_56380(int a1)
{
  unsigned int v1; // esi
  int v2; // eax
  char v3; // dh
  __int16 v4; // ax
  int v5; // edx
  int v6; // eax
  __int16 v7; // ax

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
    if ( v1 > dword_AE400_AE3F0() + 29795 )
    {
      if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42)))
        || *(_WORD *)(*(_DWORD *)(v1 + 160) + 14) )
      {
        if ( *(_WORD *)(*(_DWORD *)(v1 + 160) + 14) )
          *(_WORD *)(a1 + 48) = 1;
      }
      else
      {
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) && *(char *)(a1 + 16) >= 0 )
        {
          v2 = dword_AE400_AE3F0() + 29795;
          *(_BYTE *)(a1 + 16) |= 0x80u;
          sub_55370_558A0((int)(v1 - v2) / 164, -1, 19);
        }
        if ( *(__int16 *)(a1 + 48) == *(__int16 *)(a1 + 50) - 2 )
        {
          v3 = *(_BYTE *)(a1 + 16);
          if ( v3 < 0 )
            *(_BYTE *)(a1 + 16) = v3 & 0x7F;
        }
        ((void (*)(unsigned int))locret_455C0)(v1);
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
        {
          v4 = 3 * *(_WORD *)(v1 + 128);
          v5 = *(_DWORD *)(v1 + 160);
        }
        else
        {
          v5 = *(_DWORD *)(v1 + 160);
          v4 = 2 * *(_WORD *)(v1 + 128);
        }
        *(_WORD *)(v5 + 12) = v4;
        *(_WORD *)(v1 + 126) = *(_WORD *)(*(_DWORD *)(v1 + 160) + 12);
        if ( (*(_BYTE *)(a1 + 63) & 3) == 0 )
        {
          v6 = (int)sub_373F0((axis_3d*)(v1 + 72), 10, 2);
          if ( v6 )
          {
            *(_WORD *)(v6 + 24) = *(_WORD *)(v1 + 24);
            *(_DWORD *)(v6 + 12) *= 4;
          }
        }
        sub_55E80(a1, v1);
      }
      v7 = *(_WORD *)(a1 + 48) - 1;
      *(_WORD *)(a1 + 48) = v7;
      if ( !v7 )
      {
        *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = *(_WORD *)(v1 + 128);
        *(_WORD *)(v1 + 126) = *(_WORD *)(*(_DWORD *)(v1 + 160) + 12);
        *(_BYTE *)(a1 + 16) &= ~0x80u;
      }
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00056510) --------------------------------------------------------
int sub_56510(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  int v6; // eax

  result = a1;
  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v2 = *(_WORD *)(a1 + 42);
    v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
LABEL_5:
      result = a1;
      --*(_WORD *)(a1 + 48);
      return result;
    }
    if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
    {
      *(_WORD *)(a1 + 48) = 1;
      goto LABEL_5;
    }
    while ( *(char *)(a1 + 61) >= 0 )
    {
      if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
      {
        v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 1);
        if ( v4 )
        {
          v5 = *(_WORD *)(v3 + 126);
          *(_WORD *)(v4 + 126) += v5;
          sub_55EF0(v5, v3, v4);
          *(_BYTE *)(v4 + 68) = 10;
          *(_BYTE *)(v4 + 69) = 12;
          *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
          *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
          v6 = *(_DWORD *)(a1 + 140);
          *(_WORD *)(v4 + 26) = 200;
          *(_DWORD *)(v4 + 140) = v6;
          *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
          *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
          *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
          sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 10240);
          *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
          *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
          sub_55370_558A0((v4 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 40);
        }
      }
      sub_55E80(a1, v3);
      --*(_BYTE *)(a1 + 61);
    }
    *(_BYTE *)(a1 + 61) = 0;
    result = a1;
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000566C0) --------------------------------------------------------
int sub_566C0(int a1)
{
  int result; // eax
  unsigned int v2; // esi

  result = dword_AE400_AE3F0() + 29795;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
  if ( v2 > dword_AE400_AE3F0() + 29795 && *(__int16 *)(a1 + 48) > 0 )
  {
    result = sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42)));
    if ( result )
    {
      *(_BYTE *)(v2 + 17) |= 0x40u;
      result = sub_55E80(a1, v2);
    }
    else
    {
      *(_WORD *)(a1 + 48) = 1;
    }
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00056730) --------------------------------------------------------
void sub_56730(int a1)
{
  unsigned __int16 v1; // dx
  unsigned int v2; // esi

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = *(_WORD *)(a1 + 42);
    v2 = dword_AE400_AE3F0() + 29795 + 164 * v1;
    if ( v2 > dword_AE400_AE3F0() + 29795 )
    {
      if ( sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v1)) )
        sub_55E80(a1, v2);
      else
        *(_WORD *)(a1 + 48) = 1;
    }
    --*(_WORD *)(a1 + 48);
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000567A0) --------------------------------------------------------
int sub_567A0(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  __int16 v6; // ax
  int v7; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
    goto LABEL_9;
  if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) != *(_WORD *)(a1 + 50) )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 2);
  if ( v4 )
  {
    v5 = *(_WORD *)(v3 + 126);
    *(_WORD *)(v4 + 126) += v5;
    sub_55EF0(v5, v3, v4);
    *(_BYTE *)(v4 + 68) = 10;
    *(_BYTE *)(v4 + 69) = 15;
    *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
    *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
    *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
    *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
    *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
    *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
    *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
    *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
    *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
    *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
    sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), 0, 4096);
    v6 = sub_11F50((axis_3d*)(__int16 *)(v4 + 150));
    v7 = dword_AE400_AE3F0() + 29795;
    *(_WORD *)(v4 + 154) = v6;
    sub_55370_558A0((v4 - v7) / 164, -1, 9);
  }
  sub_55E80(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00056950) --------------------------------------------------------
int sub_56950(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  int v6; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 3);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_55EF0(v5, v3, v4);
      *(_BYTE *)(v4 + 68) = 10;
      *(_BYTE *)(v4 + 69) = 17;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 10240);
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      v6 = dword_AE400_AE3F0() + 29795;
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      sub_55370_558A0((v4 - v6) / 164, -1, 15);
    }
  }
  sub_55E80(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00056AF0) --------------------------------------------------------
int sub_56AF0(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  int v6; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 4);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_55EF0(v5, v3, v4);
      *(_BYTE *)(v4 + 68) = 10;
      *(_BYTE *)(v4 + 69) = 9;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), 0, 4096);
      *(_WORD *)(v4 + 154) = sub_11F50((axis_3d*)(__int16 *)(v4 + 150));
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      v6 = dword_AE400_AE3F0() + 29795;
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      sub_55370_558A0((v4 - v6) / 164, -1, 15);
    }
  }
  sub_55E80(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00056CA0) --------------------------------------------------------
int sub_56CA0(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  __int16 v6; // ax
  __int16 v7; // ax
  int v8; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 5);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_55EF0(v5, v3, v4);
      v6 = *(_WORD *)(a1 + 44);
      *(_BYTE *)(v4 + 68) = 10;
      *(_BYTE *)(v4 + 69) = 11;
      *(_WORD *)(v4 + 44) = v6;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), 0, 4096);
      v7 = sub_11F50((axis_3d*)(__int16 *)(v4 + 150));
      v8 = dword_AE400_AE3F0() + 29795;
      *(_WORD *)(v4 + 154) = v7;
      sub_55370_558A0((v4 - v8) / 164, -1, 15);
    }
  }
  sub_55E80(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00056E50) --------------------------------------------------------
void sub_56E50(int a1)
{
  unsigned int v1; // ebp
  __int16 v2; // ax
  unsigned int v3; // edx
  int v4; // eax
  __int16 v5; // ax
  __int16 v6; // di
  __int16 v7; // [esp-Ch] [ebp-20h]

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
    if ( v1 > dword_AE400_AE3F0() + 29795 )
    {
      if ( sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42))) )
      {
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
        {
          v2 = dword_AE400_AE3F0() + 29795;
          v3 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(*(_DWORD *)(v1 + 160) + 50);
          if ( v3 <= dword_AE400_AE3F0() + 29795 )
          {
            *(_DWORD *)(a1 + 150) = *(_DWORD *)(v1 + 72);
            *(_WORD *)(a1 + 154) = *(_WORD *)(v1 + 76);
            v4 = 9377 * *(_DWORD *)(a1 + 4) + 9439;
            *(_DWORD *)(a1 + 4) = v4;
            sub_41EC0_42200((axis_3d*)(_WORD *)(a1 + 150), v4 & 0x7FF, 0, 0x4000);
            sub_41C70_41FB0((Type_AE400_29795*)v1, (axis_3d*)(a1 + 150));
            *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = 0;
            v7 = (int)(v1 - (dword_AE400_AE3F0() + 29795)) / 164;
            *(_WORD *)(a1 + 154) = 0;
            sub_55370_558A0(v7, -1, 22);
          }
          else
          {
            if ( *(_WORD *)(a1 + 154) )
            {
              sub_41C70_41FB0((Type_AE400_29795*)v1, (axis_3d*)(a1 + 150));
              *(_WORD *)(a1 + 154) = 0;
            }
            else
            {
              *(_DWORD *)(a1 + 150) = *(_DWORD *)(v1 + 72);
              *(_WORD *)(a1 + 154) = *(_WORD *)(v1 + 76);
              sub_41C70_41FB0((Type_AE400_29795*)v1, (axis_3d*)(v3 + 72));
            }
            *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = 0;
            sub_55370_558A0((int)(v1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 22);
          }
        }
        sub_55E80(a1, v1);
      }
      else
      {
        *(_WORD *)(a1 + 48) = 1;
      }
      v6 = *(_WORD *)(a1 + 48) - 1;
      *(_WORD *)(a1 + 48) = v6;
      if ( !v6 )
        *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = 0;
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00057040) --------------------------------------------------------
int sub_57040(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // eax
  int v5; // ebx
  __int16 v6; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = *(_WORD *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 7);
    v5 = v4;
    if ( v4 )
    {
      sub_55EF0(v4, v3, v4);
      v6 = *(_WORD *)(a1 + 44);
      *(_BYTE *)(v5 + 68) = 10;
      *(_BYTE *)(v5 + 69) = 26;
      *(_WORD *)(v5 + 44) = v6;
      *(_WORD *)(v5 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v5 + 76) += *(_WORD *)(v3 + 84);
      *(_DWORD *)(v5 + 140) = *(_DWORD *)(a1 + 140);
      *(_DWORD *)(v5 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v5 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v5 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 10240);
      *(_WORD *)(v5 + 30) = *(_WORD *)(v3 + 30);
      *(_WORD *)(v5 + 32) = *(_WORD *)(v3 + 32);
      sub_55370_558A0((v5 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 9);
    }
  }
  sub_55E80(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000571B0) --------------------------------------------------------
void sub_571B0(int a1)
{
  unsigned int v1; // esi
  __int16 v2; // di

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
    if ( v1 > dword_AE400_AE3F0() + 29795 )
    {
      if ( sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42))) )
      {
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
        {
          *(_WORD *)(*(_DWORD *)(a1 + 160) + 331) = 0;
          *(_BYTE *)(v1 + 16) |= 0x20u;
        }
        else if ( (*(_BYTE *)(v1 + 16) & 0x20) == 0 )
        {
          *(_WORD *)(a1 + 48) = 1;
        }
        sub_55E80(a1, v1);
      }
      else
      {
        *(_WORD *)(a1 + 48) = 1;
      }
    }
    v2 = *(_WORD *)(a1 + 48) - 1;
    *(_WORD *)(a1 + 48) = v2;
    if ( !v2 )
      *(_BYTE *)(v1 + 16) &= ~0x20u;
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00057250) --------------------------------------------------------
int sub_57250(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  __int16 v6; // ax
  int v7; // eax
  int v8; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 8);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_55EF0(v5, v3, v4);
      v6 = *(_WORD *)(a1 + 44);
      *(_BYTE *)(v4 + 68) = 10;
      *(_BYTE *)(v4 + 69) = 25;
      *(_WORD *)(v4 + 44) = v6;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      v7 = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 44) = 2000;
      *(_DWORD *)(v4 + 140) = v7;
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      v8 = dword_AE400_AE3F0() + 29795;
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      sub_55370_558A0((v4 - v8) / 164, -1, 9);
    }
  }
  sub_55E80(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000573F0) --------------------------------------------------------
int sub_573F0(int a1)
{
  int result; // eax
  unsigned int v2; // ebx

  result = dword_AE400_AE3F0() + 29795;
  v2 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
  if ( v2 > dword_AE400_AE3F0() + 29795 )
  {
    if ( *(__int16 *)(a1 + 48) <= 0 )
    {
      *(_BYTE *)(v2 + 17) &= ~0x80u;
    }
    else
    {
      result = sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42)));
      if ( result )
      {
        *(_BYTE *)(v2 + 17) |= 0x80u;
        result = sub_55E80(a1, v2);
      }
      else
      {
        *(_WORD *)(a1 + 48) = 1;
      }
      --*(_WORD *)(a1 + 48);
    }
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00057470) --------------------------------------------------------
int sub_57470(int a1)
{
  int result; // eax
  int v2; // ebx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = 164 * *(unsigned __int16 *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 9);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_55EF0(v5, v3, v4);
      *(_BYTE *)(v4 + 68) = 10;
      *(_BYTE *)(v4 + 69) = 23;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
      sub_55370_558A0((v4 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 23);
    }
  }
  sub_55E80(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00057610) --------------------------------------------------------
void sub_57610(int a1)
{
  unsigned __int16 v1; // dx
  unsigned int v2; // ebp
  int v3; // ebx
  __int16 v4; // ax
  unsigned __int16 v5; // dx
  __int16 v6; // ax

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = *(_WORD *)(a1 + 42);
    v2 = dword_AE400_AE3F0() + 29795 + 164 * v1;
    if ( v2 > dword_AE400_AE3F0() + 29795 )
    {
      if ( sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v1)) )
      {
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
        {
          sub_55E80(a1, v2);
          v3 = (int)sub_373F0((axis_3d*)(v2 + 72), 9, 10);
          if ( v3 )
          {
            *(_WORD *)(a1 + 48) = *(_WORD *)(a1 + 50) - 1;
            v4 = *(_WORD *)(v2 + 126);
            *(_WORD *)(v3 + 126) += v4;
            sub_55EF0(v4, v2, v3);
            *(_WORD *)(v3 + 44) = *(_WORD *)(a1 + 44);
            *(_WORD *)(v3 + 24) = *(_WORD *)(v2 + 24);
            *(_WORD *)(v3 + 76) += *(_WORD *)(v2 + 84);
            *(_DWORD *)(v3 + 140) = *(_DWORD *)(a1 + 140);
            v5 = *(_WORD *)(*(_DWORD *)(v2 + 160) + 50);
            if ( dword_AE400_AE3F0() + 29795 + 164 * (unsigned int)v5 <= dword_AE400_AE3F0() + 29795 )
            {
              *(_DWORD *)(v3 + 150) = *(_DWORD *)(v2 + 72);
              *(_WORD *)(v3 + 154) = *(_WORD *)(v2 + 76);
              sub_41EC0_42200((axis_3d*)(_WORD *)(v3 + 150), *(_WORD *)(v2 + 30), 0, 4096);
              v6 = sub_11F50((axis_3d*)(__int16 *)(v3 + 150));
              *(_BYTE *)(v3 + 68) = 3;
              *(_BYTE *)(v3 + 69) = 2;
              *(_WORD *)(v3 + 154) = v6;
            }
            else
            {
              *(_BYTE *)(v3 + 68) = 10;
              *(_BYTE *)(v3 + 69) = 43;
              *(_WORD *)(v3 + 146) = 164 * v5 / 164;
            }
            *(_WORD *)(v3 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v2 + 160) + 326);
            *(_BYTE *)(*(_DWORD *)(v2 + 160) + 326) = 0;
            *(_WORD *)(v3 + 30) = *(_WORD *)(v2 + 30);
            *(_WORD *)(v3 + 32) = *(_WORD *)(v2 + 32);
            sub_55370_558A0((v3 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 15);
          }
        }
      }
      else
      {
        *(_WORD *)(a1 + 48) = 0;
      }
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00057800) --------------------------------------------------------
void sub_57800(int a1)
{
  unsigned int v1; // ebx
  int v2; // esi
  __int16 v3; // ax
  __int16 v4; // ax
  int v5; // eax
  unsigned __int16 v6; // cx

  if ( *(__int16 *)(a1 + 48) <= 0 )
    return;
  v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
  if ( v1 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_12:
    --*(_WORD *)(a1 + 48);
    return;
  }
  if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42))) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_12;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v2 = (int)sub_373F0((axis_3d*)(v1 + 72), 9, 11);
    if ( v2 )
    {
      v3 = *(_WORD *)(v1 + 126);
      *(_WORD *)(v2 + 126) += v3;
      sub_55EF0(v3, v1, v2);
      v4 = *(_WORD *)(a1 + 44);
      *(_BYTE *)(v2 + 68) = 10;
      *(_BYTE *)(v2 + 69) = 36;
      *(_WORD *)(v2 + 44) = v4;
      *(_WORD *)(v2 + 24) = *(_WORD *)(v1 + 24);
      *(_WORD *)(v2 + 76) += *(_WORD *)(v1 + 84);
      v5 = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v2 + 44) = 1;
      *(_DWORD *)(v2 + 140) = v5;
      v6 = *(_WORD *)(*(_DWORD *)(v1 + 160) + 50);
      if ( v6 )
      {
        if ( *(_DWORD *)(dword_AE400_AE3F0() + 164 * v6 + 29931) >= *(_DWORD *)(a1 + 136) )
          *(_WORD *)(v2 + 44) = *(_WORD *)(a1 + 136);
      }
      *(_WORD *)(v2 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v1 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v1 + 160) + 326) = 0;
      *(_DWORD *)(v2 + 150) = *(_DWORD *)(v1 + 72);
      *(_WORD *)(v2 + 154) = *(_WORD *)(v1 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v2 + 150), *(_WORD *)(v1 + 30), *(_WORD *)(v1 + 32), 0x4000);
      *(_WORD *)(v2 + 30) = *(_WORD *)(v1 + 30);
      *(_WORD *)(v2 + 32) = *(_WORD *)(v1 + 32);
      sub_55370_558A0((v2 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 9);
    }
  }
  sub_55E80(a1, v1);
  --*(_WORD *)(a1 + 48);
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000579D0) --------------------------------------------------------
int sub_579D0(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax
  __int16 v6; // ax
  int v7; // edx

  result = a1;
  if ( *(__int16 *)(a1 + 48) <= 0 )
    return result;
  v2 = *(_WORD *)(a1 + 42);
  v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
  if ( v3 <= dword_AE400_AE3F0() + 29795 )
  {
LABEL_9:
    result = a1;
    --*(_WORD *)(a1 + 48);
    return result;
  }
  if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
  {
    *(_WORD *)(a1 + 48) = 1;
    goto LABEL_9;
  }
  if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
  {
    v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 12);
    if ( v4 )
    {
      v5 = *(_WORD *)(v3 + 126);
      *(_WORD *)(v4 + 126) += v5;
      sub_55EF0(v5, v3, v4);
      v6 = *(_WORD *)(a1 + 44);
      *(_BYTE *)(v4 + 68) = 9;
      *(_BYTE *)(v4 + 69) = 9;
      *(_WORD *)(v4 + 44) = v6;
      *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
      *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
      *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
      *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
      *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
      *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
      *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
      *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
      sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
      *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
      v7 = dword_AE400_AE3F0() + 29795;
      *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
      sub_55370_558A0((v4 - v7) / 164, -1, 9);
    }
  }
  sub_55E80(a1, v3);
  result = a1;
  --*(_WORD *)(a1 + 48);
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00057B80) --------------------------------------------------------
int sub_57B80(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v2 = *(_WORD *)(a1 + 42);
    v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
LABEL_5:
      result = a1;
      --*(_WORD *)(a1 + 48);
      return result;
    }
    if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
    {
      *(_WORD *)(a1 + 48) = 1;
      goto LABEL_5;
    }
    while ( *(char *)(a1 + 61) >= 0 )
    {
      if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
      {
        v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 17);
        if ( v4 )
        {
          v5 = *(_WORD *)(v3 + 126);
          *(_WORD *)(v4 + 126) += v5;
          sub_55EF0(v5, v3, v4);
          *(_BYTE *)(v4 + 68) = 10;
          *(_BYTE *)(v4 + 69) = 54;
          *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
          *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
          *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
          *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
          *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
          *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
          *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
          *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
          *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
          *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
          sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
          sub_55370_558A0((v4 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 40);
        }
      }
      sub_55E80(a1, v3);
      --*(_BYTE *)(a1 + 61);
    }
    *(_BYTE *)(a1 + 61) = 0;
    result = a1;
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00057D40) --------------------------------------------------------
int sub_57D40(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v2 = *(_WORD *)(a1 + 42);
    v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
LABEL_5:
      result = a1;
      --*(_WORD *)(a1 + 48);
      return result;
    }
    if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
    {
      *(_WORD *)(a1 + 48) = 1;
      goto LABEL_5;
    }
    while ( *(char *)(a1 + 61) >= 0 )
    {
      if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
      {
        v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 16);
        if ( v4 )
        {
          v5 = *(_WORD *)(v3 + 126);
          *(_WORD *)(v4 + 126) += v5;
          sub_55EF0(v5, v3, v4);
          *(_BYTE *)(v4 + 68) = 10;
          *(_BYTE *)(v4 + 69) = 53;
          *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
          *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
          *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
          *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
          *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
          *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
          *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
          *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
          *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
          *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
          sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
          sub_55370_558A0((v4 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 9);
        }
      }
      sub_55E80(a1, v3);
      --*(_BYTE *)(a1 + 61);
    }
    *(_BYTE *)(a1 + 61) = 0;
    result = a1;
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00057F00) --------------------------------------------------------
void sub_57F00(int a1)
{
  unsigned int v1; // esi
  int v2; // eax
  char v3; // dh
  int v4; // eax
  __int16 v5; // di

  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v1 = dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42);
    if ( v1 > dword_AE400_AE3F0() + 29795 )
    {
      if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * *(unsigned __int16 *)(a1 + 42)))
        || *(_WORD *)(*(_DWORD *)(v1 + 160) + 14) )
      {
        if ( *(_WORD *)(*(_DWORD *)(v1 + 160) + 14) )
          *(_WORD *)(a1 + 48) = 1;
      }
      else
      {
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) && *(char *)(a1 + 16) >= 0 )
        {
          v2 = dword_AE400_AE3F0() + 29795;
          *(_BYTE *)(a1 + 16) |= 0x80u;
          sub_55370_558A0((int)(v1 - v2) / 164, -1, 19);
        }
        if ( *(__int16 *)(a1 + 48) == *(__int16 *)(a1 + 50) - 2 )
        {
          v3 = *(_BYTE *)(a1 + 16);
          if ( v3 < 0 )
            *(_BYTE *)(a1 + 16) = v3 & 0x7F;
        }
        ((void (*)(unsigned int))locret_455C0)(v1);
        if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
          *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = -3 * *(_WORD *)(v1 + 128);
        else
          *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = -2 * *(_WORD *)(v1 + 128);
        *(_WORD *)(v1 + 126) = *(_WORD *)(*(_DWORD *)(v1 + 160) + 12);
        if ( (*(_BYTE *)(a1 + 63) & 3) == 0 )
        {
          v4 = (int)sub_373F0((axis_3d*)(v1 + 72), 10, 2);
          if ( v4 )
          {
            *(_WORD *)(v4 + 24) = *(_WORD *)(v1 + 24);
            *(_DWORD *)(v4 + 12) *= 4;
          }
        }
        sub_55E80(a1, v1);
      }
      v5 = *(_WORD *)(a1 + 48) - 1;
      *(_WORD *)(a1 + 48) = v5;
      if ( !v5 )
      {
        *(_WORD *)(*(_DWORD *)(v1 + 160) + 12) = -*(_WORD *)(v1 + 128);
        *(_WORD *)(v1 + 126) = *(_WORD *)(*(_DWORD *)(v1 + 160) + 12);
        *(_BYTE *)(a1 + 16) &= ~0x80u;
      }
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (000580A0) --------------------------------------------------------
int sub_580A0(int a1)
{
  int result; // eax
  unsigned __int16 v2; // bx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v2 = *(_WORD *)(a1 + 42);
    v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
LABEL_5:
      result = a1;
      --*(_WORD *)(a1 + 48);
      return result;
    }
    if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
    {
      *(_WORD *)(a1 + 48) = 1;
      goto LABEL_5;
    }
    while ( *(char *)(a1 + 61) >= 0 )
    {
      if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
      {
        v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 18);
        if ( v4 )
        {
          v5 = *(_WORD *)(v3 + 126);
          *(_WORD *)(v4 + 126) += v5;
          sub_55EF0(v5, v3, v4);
          *(_BYTE *)(v4 + 68) = 10;
          *(_BYTE *)(v4 + 69) = 55;
          *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
          *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
          *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
          *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
          *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
          *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
          *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
          *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
          *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
          *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
          sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
        }
      }
      sub_55E80(a1, v3);
      --*(_BYTE *)(a1 + 61);
    }
    *(_BYTE *)(a1 + 61) = 0;
    result = a1;
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00058240) --------------------------------------------------------
int sub_58240(int a1)
{
  int result; // eax
  unsigned __int16 v2; // dx
  unsigned int v3; // ebp
  int v4; // ebx
  __int16 v5; // ax

  result = a1;
  if ( *(__int16 *)(a1 + 48) > 0 )
  {
    v2 = *(_WORD *)(a1 + 42);
    v3 = dword_AE400_AE3F0() + 29795 + 164 * v2;
    if ( v3 <= dword_AE400_AE3F0() + 29795 )
    {
LABEL_5:
      result = a1;
      --*(_WORD *)(a1 + 48);
      return result;
    }
    if ( !sub_55DD0(a1, (int *)(dword_AE400_AE3F0() + 29795 + 164 * v2)) )
    {
      *(_WORD *)(a1 + 48) = 1;
      goto LABEL_5;
    }
    while ( *(char *)(a1 + 61) >= 0 )
    {
      if ( *(_WORD *)(a1 + 48) == *(_WORD *)(a1 + 50) )
      {
        v4 = (int)sub_373F0((axis_3d*)(v3 + 72), 9, 0);
        if ( v4 )
        {
          v5 = *(_WORD *)(v3 + 126);
          *(_WORD *)(v4 + 126) += v5;
          sub_55EF0(v5, v3, v4);
          *(_BYTE *)(v4 + 68) = 10;
          *(_BYTE *)(v4 + 69) = 0;
          *(_WORD *)(v4 + 24) = *(_WORD *)(v3 + 24);
          *(_WORD *)(v4 + 44) = *(_WORD *)(a1 + 44);
          *(_DWORD *)(v4 + 140) = *(_DWORD *)(a1 + 140);
          *(_WORD *)(v4 + 76) += *(_WORD *)(v3 + 84);
          *(_WORD *)(v4 + 30) = *(_WORD *)(v3 + 30);
          *(_WORD *)(v4 + 32) = *(_WORD *)(v3 + 32);
          *(_WORD *)(v4 + 26) = *(unsigned __int8 *)(*(_DWORD *)(v3 + 160) + 326);
          *(_BYTE *)(*(_DWORD *)(v3 + 160) + 326) = 0;
          *(_DWORD *)(v4 + 150) = *(_DWORD *)(v3 + 72);
          *(_WORD *)(v4 + 154) = *(_WORD *)(v3 + 76);
          sub_41EC0_42200((axis_3d*)(_WORD *)(v4 + 150), *(_WORD *)(v3 + 30), *(_WORD *)(v3 + 32), 0x4000);
          sub_55370_558A0((v4 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 9);
        }
      }
      sub_55E80(a1, v3);
      --*(_BYTE *)(a1 + 61);
    }
    *(_BYTE *)(a1 + 61) = 0;
    result = a1;
    --*(_WORD *)(a1 + 48);
  }
  return result;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//SYNCHRONIZED WITH REMC1
void DrawBitmap_58768_58C78(__int16 a1, __int16 a2, TypeTab* a3, unsigned __int8 a4)//229768
{
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    sub_60D50_61260(a3->dim, a2, a1, a3->Tab_0, a4, 0);
    return;
  }
  else
  {
    if ( (typeResolution_12F02E_12F01E & 8) != 0 )
      DrawBitmap_60D65_61275(a3->dim, a2, a1, a3->Tab_0, a4, 0);
    return;
  }
}

void sub_587E0_58CF0()
{
  char pathTemp[64];
  sprintf(pathTemp, "%s%s/%s/%s.dat", "C:", "\\carpet.cd", "data", "tmaps0-0");
  dword_968EC = DataFileIO::CreateOrOpenFile(FixPath(pathTemp), 512);
  if ( dword_968EC == nullptr )
  {
    sprintf(pathTemp, "data/%s.dat", "tmaps0-0");
    dword_968EC = DataFileIO::CreateOrOpenFile(FixPath(pathTemp), 512);
  }
}

int sub_58860_58D70(unsigned __int16 a1, uint8_t* a2)//229860_
{
  int result; // eax

  if ( dword_968EC == nullptr )
    return -1;
  DataFileIO::Seek(dword_968EC, begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_4, 0);
  int dataSize = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1 + 1].var_4 - begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_4;
  DataFileIO::Read(dword_968EC, a2, dataSize);
  result = RncUnpack_62B60_63070(a2, a2);
  if ( result >= 0 )
  {
    if ( !result )
      return dataSize;
  }
  else
  {
      //if (result == -1) return dataSize;
    printf("ERROR decompressing tmap%03d\n", a1);
    return -2;
  }
  return result;
}

//SYNCHRONIZED WITH REMC1
char sub_58910_58E20(unsigned __int16 a1)
{
  unsigned __int16 v1; // ax
  __int16 v2; // di
  unsigned __int16 v3; // bx
  _BYTE **v4; // ecx
  Type_sub_AE3E0* v5; // eax

  v1 = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
  if ( byte_12E7D0_12E7C0[v1] )
    return 0;
  v2 = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
  if ( !dword_12DF8C_12DF7C[v1] )
    return 0;
  v3 = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
  if ( v1 < 529 )
  {
    do
    {
      if ( v2 != begTmapsTab_12D744_12D734_2EB744_2EB734x[v3].var_8)
        break;
      v4 = (_BYTE **)dword_12DF8C_12DF7C[v3];
      if ( v4 )
      {
        if ( (**v4 & 1) != 0 )
        {
          v5 = sub_10FD0(dword_AE3E0_AE3D0, v3);
          sub_10F10(v5);
        }
        sub_36A90_36E50(dword_AE3EC_AE3DC, dword_12D748_12D738[v3]);
        dword_12DF8C_12DF7C[v3] = 0;
        dword_12D748_12D738[v3] = 0;
        dword_12CF00_12CEF0[v3] = 0;
      }
      ++v3;
    }
    while ( v3 < 529 );
  }
  return 1;
}

//SYNCHRONIZED WITH REMC1
char sub_58A00_58F10(unsigned __int16 a1)
{
  int v1 = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
  if ( !dword_12DF8C_12DF7C[v1] )
    return 0;
  if ( v1 < 529 )
  {
    for(int i = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8; i < 529;i++)
    {
      if ( v1 != begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_8)
        break;
      if (dword_12DF8C_12DF7C[i])
      {
        if ( (dword_12DF8C_12DF7C[i]->var_u32_0->var_0 & 1) != 0 )
        {
          sub_10F10(sub_10FD0(dword_AE3E0_AE3D0, i));
        }
        sub_36A90_36E50(dword_AE3EC_AE3DC, dword_12D748_12D738[i]);
        dword_12DF8C_12DF7C[i] = 0;
        dword_12D748_12D738[i] = 0;
        dword_12CF00_12CEF0[i] = 0;
      }
    }
  }
  return 1;
}

//SYNCHRONIZED WITH REMC1
int GetSumaSpriteSizes_58AD0_58FE0(unsigned __int16 a1)
{
  int first = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8;
  int suma = 0;
  for (int i = first; i < 529; i++ )
  {
    if (first != begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_8)
      break;
    suma += begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_0;
  }
  return suma;
}

int counter_sub_58B30_59040 = 0;
int counter_sub_58B30_59040_2 = 0;

//SYNCHRONIZED WITH REMC1
void sub_58B30_59040(unsigned __int16 a1)//229B30_
{
	Type_sub168_2* v3x; // esi

	//debug
	if (counter_sub_58B30_59040 == 0xfb)
	{
		counter_sub_58B30_59040++;
		counter_sub_58B30_59040--;
	}
	counter_sub_58B30_59040++;
	//debug

	for (int i = begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8; i < 529; i++)
	{
		//debug
		if (i == 0xfd)
		{
			counter_sub_58B30_59040_2++;
			counter_sub_58B30_59040_2--;
		}
		if (counter_sub_58B30_59040_2 == 0xb5)
		{
			counter_sub_58B30_59040_2++;
			counter_sub_58B30_59040_2--;
		}
		counter_sub_58B30_59040_2++;
		//debug

		if (begTmapsTab_12D744_12D734_2EB744_2EB734x[a1].var_8 != begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_8)
			break;
		if (!dword_12DF8C_12DF7C[i])
		{
			v3x = sub_369E0_36DA0(dword_AE3EC_AE3DC, (unsigned __int16)(4 * ((unsigned int)(begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_0 + 13) >> 2)), i);
			if (v3x)
			{
				if (sub_58860_58D70(i, (uint8_t*)v3x->var_u32_0) != -1)
				{
					dword_12D748_12D738[i] = v3x;
					dword_12DF8C_12DF7C[i] = v3x;
					dword_12CF00_12CEF0[i] = str_AE408_AE3F8->var_u32_4.dword;
					if ((v3x->var_u32_0->var_0 & 1) != 0)
						sub_10D40(dword_AE3E0_AE3D0, v3x, i);
				}
			}
		}
	}
}

//SYNCHRONIZED WITH REMC1
int GetAllSumaSpriteSizes_58C30_59140(unsigned int a1)
{
	int v7; // ecx
	int v8; // edx
	int v9; // ebx
	int v10; // ebx
	int v14x[5]; // [esp+0h] [ebp-40h]
	int v19x[5]; // [esp+14h] [ebp-2Ch]
	for (int i = 0; i < 5; i++)
	{
		v14x[i] = -1;
		v19x[i] = -1;
	}
	bool bool1 = 1;
	for (int i = 0; i < 529; i++)
	{
		if (dword_12DF8C_12DF7C[begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_8] && !byte_12E7D0_12E7C0[begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_8])
			bool1 = 0;
		while (i < 529 && begTmapsTab_12D744_12D734_2EB744_2EB734x[i + 1].var_8 == begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_8)
			i++;
	}
	for (int i = 0; i < 529; i++)
	{
		v7 = begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_8;
		if ((!byte_12E7D0_12E7C0[v7] || bool1) && dword_12DF8C_12DF7C[v7])
		{
			v8 = dword_12CF00_12CEF0[v7];
			v9 = begTmapsTab_12D744_12D734_2EB744_2EB734x[i].var_8;
			if (v8 < v14x[0])
			{
				v10 = v8 ^ v14x[0];
				v8 = v14x[0];
				v14x[0] ^= v10;
				v19x[0] ^= v7;
				v9 = v7 ^ v19x[0];
				v19x[0] = v7;
			}
			if (v8 < v14x[1])
			{
				v14x[1] ^= v8;
				v19x[1] ^= v9;
				v8 ^= v14x[1];
				v9 ^= v19x[1];
				v14x[1] ^= v8;
				v19x[1] ^= v9;
			}
			if (v8 < v14x[2])
			{
				v14x[2] ^= v8;
				v19x[2] ^= v9;
				v8 ^= v14x[2];
				v9 ^= v19x[2];
				v14x[2] ^= v8;
				v19x[2] ^= v9;
			}
			if (v8 < v14x[3])
			{
				v14x[3] ^= v8;
				v19x[3] ^= v9;
				v8 ^= v14x[3];
				v9 ^= v19x[3];
				v14x[3] ^= v8;
				v19x[3] ^= v9;
			}
			if (v8 < v14x[4])
			{
				v14x[4] = v8;
				v19x[4] = v9;
			}
		}
		while (i < 529 && begTmapsTab_12D744_12D734_2EB744_2EB734x[i + 1].var_8 == v7)
			i++;
	}
	int allSumas = 0;
	for (int i = 0; i < 5; i++)
	{
		if (allSumas >= a1 || v19x[i] <= -1)
            return allSumas;
		if (((!bool1) || sub_58A00_58F10(v19x[i]))
			&& (sub_58910_58E20(v19x[i])))
            allSumas += GetSumaSpriteSizes_58AD0_58FE0(v19x[i]);
	}
	return allSumas;
}

//SYNCHRONIZED WITH REMC1
void sub_58E70_59380()
{
  dword_AE3EC_AE3DC = sub_36700_36AC0(str_AE408_AE3F8->var_u32_172, 529, str_AE408_AE3F8->var_u32_168);
  if ( dword_AE3EC_AE3DC )
    dword_AE3E0_AE3D0 = sub_10CB0(529);
  sub_587E0_58CF0();
  memset(dword_12DF8C_12DF7C, 0, sizeof(dword_12DF8C_12DF7C));
  memset(dword_12D748_12D738, 0, sizeof(dword_12D748_12D738));
  memset(dword_12CF00_12CEF0, 0, sizeof(dword_12CF00_12CEF0));
  sub_59320_59830();
  sub_59370_59880();
}

//SYNCHRONIZED WITH REMC1
void sub_58F00_59410()//229F00
{
  sub_36C10_36FD0(dword_AE3EC_AE3DC);
  sub_11010(dword_AE3E0_AE3D0);
  sub_59140_59650();
  memset(dword_12DF8C_12DF7C, 0, sizeof(dword_12DF8C_12DF7C));
  memset(dword_12D748_12D738, 0, sizeof(dword_12D748_12D738));
  memset(dword_12CF00_12CEF0, 0, sizeof(dword_12CF00_12CEF0));
  byte_968E8 = 0;
  sub_58F70_59480();//fix
}

//----- (00058F70) --------------------------------------------------------
void sub_58F70_59480()
{
  if ( dword_968EC != nullptr )
  {
    DataFileIO::Close(dword_968EC);
    dword_968EC = nullptr;
  }
}
// 968EC: using guessed type int dword_968EC;

int counter_58F90_594A0 = 0;

//----- (00058F90) --------------------------------------------------------
void sub_58F90_594A0()//229F90_
{
  Type_99BA0* v0x; // ebx
  uint8_t* v1; // esi

  sub_587E0_58CF0();
  v0x = unk_99BA0x;
  v1 = begWscreen_2ECFF4_2ECFE4;
  while ( v0x->var_6 || v0x->var_8)
  {
      //debug
      //229FB9
      if (counter_58F90_594A0 == 7)
      {
          counter_58F90_594A0++;
          counter_58F90_594A0--;
      }
      counter_58F90_594A0++;
      //debug
    if ( sub_58860_58D70(v0x->var_0, v1) == -1 )
    {
      *(_WORD *)(v1 + 2) = 255;
      *(_WORD *)(v1 + 4) = 255;
      *(_BYTE *)(v1 + 1) = 1;
    }
    if (v0x->var_6)
    {
      if ( !v0x->var_8)
          v0x->var_8 = v0x->var_6 * *(unsigned __int16 *)(v1 + 4) / *(unsigned __int16 *)(v1 + 2);
    }
    else
    {
        v0x->var_6 = v0x->var_8 * *(unsigned __int16 *)(v1 + 2) / *(unsigned __int16 *)(v1 + 4);
    }
    //v0 += 7;
    v0x->var_12 = *(_BYTE *)(v1 + 1);
    v0x++;
  }
  sub_58F70_59480();
}
// 12EFF4: using guessed type int dword_12EFF4;

//SYNCHRONIZED WITH REMC1
bool sub_59050_59560(unsigned __int16 a1)//22A050_
{
  int32 sumaSpriteSizes = GetSumaSpriteSizes_58AD0_58FE0(a1);
  int32 v2 = 0;
  int i = 0;
  for ( i = sumaSpriteSizes - GetVar4_369D0_36D90(dword_AE3EC_AE3DC) + 20; i > 0; i -= GetAllSumaSpriteSizes_58C30_59140(i) )
  {
    if (v2 >= 4u )
      break;
    v2++;
  }
  if ( i <= 0 )
  {
    sub_58B30_59040(a1);
    str_AE408_AE3F8->var_u8_149 = 5;
  }
  return dword_12DF8C_12DF7C[a1] != 0;
}

//SYNCHRONIZED WITH REMC1
void sub_590D0_595E0()//22A0D0_
{
  //unsigned __int16 i; // bx
  //char *result; // eax
  //Type_sub168_2* v2x; // ecx
  //char v3; // cl
  //Type_sub_AE3E0* v4; // eax

  //fix
  //result = 0;
  //fix

  //allert_error();//test it

  for ( int i = 0; i < 529; i++ )
  {
    //result = (char *)(4 * i);
    //v2x = dword_12DF8C_12DF7C[i];
    if (dword_12DF8C_12DF7C[i])
    {
      //result = *v2;
      //v3 = dword_12DF8C_12DF7C[i]->var_u32_0->x;
      if ( (dword_12DF8C_12DF7C[i]->var_u32_0->var_0 & 8) != 0 )
      {
        //*result = v3 & 0xF7;
        if ( (dword_12DF8C_12DF7C[i]->var_u32_0->var_0 & 1) != 0 )
        {
          //v4 = sub_10FD0(dword_AE3E0_AE3D0, i);
          sub_10EB0(sub_10FD0(dword_AE3E0_AE3D0, i));
        }
      }
    }
  }
}

//----- (00059140) --------------------------------------------------------
void sub_59140_59650()
{
  memset(byte_12E9E1_12E9D1, 0, 529);
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12E9E1: using guessed type char byte_12E9E1_12E9D1;

//----- (00059160) --------------------------------------------------------
void sub_59160(unsigned __int16 a1, unsigned __int16 a2, signed __int16 a3)//22A160_
{
  Type_989C6* result; // eax
  uint16* v4; // ebx
  //__int16 *v5; // edx
  //__int16 v6; // cx
  unsigned __int16 v7; // di

  result = word_989C6x;
  v4 = 0;
  if ( word_989C6x[0].var_0 >= 0)
  {
    //v5 = &word_989C6 + 2;
    do
    {
      if ( result->var_0 == a1 && result->var_2 == a2 )
          v4 = result->i16_4;
      //v5 += 17;
      //v6 = result[17];
      result++;
    }
    while (result->var_0 >= 0 );
  }
  if ( v4 )
  {
    while ( 1 )
    {
      v7 = *v4;
      if ( (*v4 & 0x8000u) != 0 )
        break;
      v4++;
      sub_591E0(v7);
    }
  }
  else if ( a3 >= 0 )
  {
    sub_591E0(a3);
  }
}
// 989C6: using guessed type __int16 word_989C6;

//----- (000591E0) --------------------------------------------------------
void sub_591E0(unsigned __int16 a1)//22A1E0_
{
  //Type_99BA0* v1x; // eax
  //char v2; // bl
  //int result; // eax

  //v1 = (unsigned __int16 *)((char *)&unk_99BA0 + 14 * a1);
  //v1x = &unk_99BA0x[a1];
  //v2 = unk_99BA0x[a1]->var_11;
  //result = begTmapsTab_12D744_12D734_2EB744_2EB734x[unk_99BA0x[a1].var_0].var_8;
  byte_12E9E1_12E9D1[begTmapsTab_12D744_12D734_2EB744_2EB734x[unk_99BA0x[a1].var_0].var_8] = unk_99BA0x[a1].var_11;
  //return result;
}
// 12D744: using guessed type int begTmapsTab_12D744_12D734_2EB744_2EB734x;

//ios::failure::cause
//SYNCHRONIZED WITH REMC1
int GetVar4_369D0_36D90(Type_sub168* a1x)
{
    return a1x->var_4x;
}

//----- (00059230) --------------------------------------------------------
char sub_59230()//22A230_
{
  //unsigned __int16 v0; // bx
  char result; // al
  unsigned int v2; // edi
  unsigned __int16 i; // si
  char v4; // [esp+0h] [ebp-18h]
  char v5; // [esp+4h] [ebp-14h]

  v5 = 0;
  if ( !dword_AE3EC_AE3DC )
    sub_58E70_59380();
  //v0 = 0;
  memset(dword_12CF00_12CEF0, 0, sizeof(dword_12CF00_12CEF0));
  for(int v0=0;v0<529;v0++)
  {
    result = v0;
    if ( !byte_12E9E1_12E9D1[v0] )
      result = sub_58910_58E20(v0);
    //++v0;
  }
  //while ( v0 < 529);
  v4 = -1;
  do
  {
    if ( v5 )
      break;
    for ( i = 0; i < 529; i++ )
    {
      if ( v5 )
        break;
      if ( v4 == byte_12E9E1_12E9D1[i] && !dword_12DF8C_12DF7C[i] )
      {
        v2 = GetSumaSpriteSizes_58AD0_58FE0(i);
        if ( v2 >= GetVar4_369D0_36D90(dword_AE3EC_AE3DC) )
        {
          if ( GetVar4_369D0_36D90(dword_AE3EC_AE3DC) < 0x400)
            v5 = 1;
        }
        else
        {
          sub_58B30_59040(i);
        }
      }
    }
    result = --v4;
  }
  while ( v4 );
  return result;
}
// 369D0: using guessed type _DWORD ios::failure::cause(_DWORD);
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE3EC: using guessed type int dword_AE3EC_AE3DC;
// 12CF00: using guessed type int dword_12CF00_12CEF0[529];
// 12DF8C: using guessed type int dword_12DF8C_12DF7C[529];

//SYNCHRONIZED WITH REMC1
void sub_59320_59830()
{
  Type_99BA0* v0x; // ebx

  v0x = unk_99BA0x;
  memset(byte_12E7D0_12E7C0, 0, sizeof(byte_12E7D0_12E7C0));
  if ( byte_968F0 )
  {
    while ( v0x->var_6 || v0x->var_8 )
    {
      if ( v0x->var_11 == -1 )
        byte_12E7D0_12E7C0[v0x->var_0] = -1;
      v0x++;
    }
  }
  //JUMPOUT(0x59319_59829);//fixed?
}

//----- (00059370) --------------------------------------------------------
void sub_59370_59880()//22A370_
{
    //allert_error();//test it

  for ( int i = 0; i < 529; i++ )
  {
    if ( byte_12E7D0_12E7C0[i] )
      sub_58B30_59040(i);
  }
}

//----- (000593B0) --------------------------------------------------------
void sub_593B0_598C0()
{
  //int v0; // esi
  int result; // eax

  memset(str_AE400_AE3F0->var_u8_44, 0, 532);
  //v0 = dword_AE400_AE3F0();
  for(result = 0; result < 529; result++)
  {
    if ( dword_12DF8C_12DF7C[result] )
    {
      str_AE400_AE3F0->var_u8_44[result] = 1;
      if ( byte_12E7D0_12E7C0[result] )
          str_AE400_AE3F0->var_u8_44[result]++;
    }
    //result++;
  }
  //while ( (unsigned __int16)result < 0x211u );
  //dword_AE400_AE3F0(dword_AE400_AE3F0());
  //return result;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// AE400: using guessed type int dword_AE400_AE3F0();
// 12DF8C: using guessed type int dword_12DF8C_12DF7C[529];

//----- (00059420) --------------------------------------------------------
void sub_59420_59930()//22A420_
{
  unsigned __int16 i; // bx
  //char result; // al
  unsigned int v2; // edi
  unsigned __int16 j; // si
  char v4; // [esp+0h] [ebp-14h]
  char v5; // [esp+4h] [ebp-10h]

  v5 = 0;
  if ( !dword_AE3EC_AE3DC )
    sub_58E70_59380();
  for ( i = 0; i < 529; i++ )
  {
    //result = i;
    if ( !str_AE400_AE3F0->var_u8_44[i])
      /*result = */sub_58910_58E20(i);
  }
  //v4 = 2;
  for(v4 = 2;v4;v4--)
  {
    if ( v5 )
      break;
    for ( j = 0; j < 529; j++ )
    {
      if ( v5 )
        break;
      if ( v4 == str_AE400_AE3F0->var_u8_44[j] && !dword_12DF8C_12DF7C[j] )
      {
        v2 = GetSumaSpriteSizes_58AD0_58FE0(j);
        if ( v2 >= GetVar4_369D0_36D90(dword_AE3EC_AE3DC) )
        {
          if (GetVar4_369D0_36D90(dword_AE3EC_AE3DC) < 0x400u)//fix
            v5 = 1;
        }
        else
        {
          sub_58B30_59040(j);
        }
      }
    }
    //v4--;
  }
  //while ( v4 );
}
// 369D0: using guessed type _DWORD ios::failure::cause(_DWORD);
// AE3EC: using guessed type int dword_AE3EC_AE3DC;
// AE400: using guessed type int dword_AE400_AE3F0();
// 12DF8C: using guessed type int dword_12DF8C_12DF7C[529];

//----- (00059500) --------------------------------------------------------
void sub_59500_59A10(Type_99974* a1)
{
  for(int i=0;a1[i].beg;i++)
    {
      if ( (typeResolution_12F02E_12F01E & 1) != 0 )
        sub_65D70_66280(*a1[i].beg, *a1[i].end, *a1[i].var_3);
      else
        sub_65DC0_662D0(*a1[i].beg, *a1[i].end, *a1[i].var_3);
    }
}
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00059560) --------------------------------------------------------
void sub_59560_59A70(Type_99974* a1)
{
	for (int i = 0; a1[i].beg; i++)
	{
		if ((typeResolution_12F02E_12F01E & 1) != 0)
			sub_66390(*a1[i].beg, *a1[i].end, *a1[i].var_3);
		else
			sub_66410(*a1[i].beg, *a1[i].end, *a1[i].var_3);
	}
}
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00059720) --------------------------------------------------------
void sub_59720_59C30()
{
  if ( typeResolution_12F02E_12F01E == 1 )
    sub_59750(320, 200);
  else
    sub_59750(320, 240);
}
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (00059750) --------------------------------------------------------
void sub_59750(int16 x, int16 y)
{
	//__int16 v2; // si
	//__int16 v3; // bx
	//int result; // eax
	//__int16 v5; // ax
	//__int16 v6[14]; // [esp+0h] [ebp-40h] BYREF
	//char v7[36]; // [esp+1Ch] [ebp-24h] BYREF

	FixPerifery((char*)"MOUSE SET POS");
	if (dword_9AD98 > 0)
	{
		if (x != -1 || y != -1)
		{
			if (x > 0)
			{
				if (x > 638)
					x = 638;
				mouse_9AD90.x = x;
			}
            if (y <= 0)
			{
				if ((typeResolution_12F02E_12F01E & 1) != 0)
					VGA_Set_mouse(x, mouse_9AD90.y);
				else
					VGA_Set_mouse(x * 8, mouse_9AD90.y *8);
			}
            else
            {
                if ((typeResolution_12F02E_12F01E & 1) != 0)
                {
                    if (y > 398)
                        y = 398;
                    mouse_9AD90.y = y;
                    VGA_Set_mouse(x, y);
                }
                else
                {
                    if (y > 478)
                        y = 478;
                    mouse_9AD90.y = y;
                    VGA_Set_mouse(x * 8, y * 8);
                }
            }
		}
	}
	/*
	v2 = a1;
	v3 = a2;
	memset(v6, 0, sizeof(v6));
	result = (int)memset(v7, 0, 28);
	if ( dword_9AD98 > 0 )
	{
	  if ( a1 != -1 || (result = a2, a2 != -1) )
	  {
		result = a1;
		if ( a1 != -1 )
		{
		  v6[0] = 4;
		  if ( a1 <= 0 )
		  {
			if ( (typeResolution_12F02E_12F01E & 1) != 0 )
			  goto LABEL_12;
		  }
		  else
		  {
			if ( a1 > 638 )
			  v2 = 638;
			mouse_9AD90.x = v2;
			if ( (typeResolution_12F02E_12F01E & 1) != 0 )
			{
  LABEL_12:
			  v6[4] = v2;
			  if ( a2 <= 0 )
			  {
				if ( (typeResolution_12F02E_12F01E & 1) != 0 )
				  v5 = mouse_9AD90.y;
				else
				  v5 = 8 * mouse_9AD90.y;
				v6[6] = v5;
				return int386(51, (uint32)v6, (uint32)v7);
			  }
			  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
			  {
				if ( a2 > 398 )
				  v3 = 398;
				mouse_9AD90.y = v3;
				if ( (typeResolution_12F02E_12F01E & 1) != 0 )
				{
				  v6[6] = v3;
				  return int386(51, (uint32)v6, (uint32)v7);
				}
			  }
			  else
			  {
				if ( a2 > 478 )
				  v3 = 478;
				mouse_9AD90.y = v3;
				if ( (typeResolution_12F02E_12F01E & 1) != 0 )
				{
				  v6[6] = v3;
				  return int386(51, (uint32)v6, (uint32)v7);
				}
			  }
			  v6[6] = 8 * v3;
			  return int386(51, (uint32)v6, (uint32)v7);
			}
		  }
		  v2 *= 8;
		  goto LABEL_12;
		}
	  }
	}
	return result;
	*/
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 9AD90: using guessed type __int16 mouse_9AD90.x;
// 9AD92: using guessed type __int16 mouse_9AD90.y;
// 9AD98: using guessed type int dword_9AD98;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (000599B0) --------------------------------------------------------
void Blit_599B0_59EC0(__int16 a1)//22A9B0_
{
    FixPerifery((char*)"blit640");

    if (!byte_9AD96)
        sub_5BDF8_5C308();
    VGA_Blit(begWscreen_2ECFF4_2ECFE4);
    if (a1 == 400)
    {
        sub_5BE50_5C360();
    }
    else
    {
        if (!byte_9AD96)
            sub_5BE50_5C360();
    }
    std::this_thread::sleep_for(std::chrono::milliseconds(100));//fix it

    //tempScreenBuffer_A0000 = begWscreen_2ECFF4_2ECFE4;
    /*
  char *v1; // esi
  char *v2; // esi

  if ( !byte_9AD96 )
    sub_5BDF8_5C308();
  sub_61A1C_61F2C(0);
  qmemcpy(&screenBuffer_A0000, (const void *)begWscreen_2ECFF4_2ECFE4, 0x10000u);
  v1 = (char *)(begWscreen_2ECFF4_2ECFE4 + 0x10000);
  sub_61A1C_61F2C(1);
  qmemcpy(&screenBuffer_A0000, v1, 0x10000u);
  v1 += 0x10000;
  sub_61A1C_61F2C(2);
  qmemcpy(&screenBuffer_A0000, v1, 0x10000u);
  v2 = v1 + 0x10000;
  sub_61A1C_61F2C(3);
  if ( a1 == 400 )
  {
    qmemcpy(&screenBuffer_A0000, v2, 0xE800u);
    sub_5BE50_5C360();
  }
  else
  {
    qmemcpy(&screenBuffer_A0000, v2, 0x10000u);
    sub_61A1C_61F2C(4);
    qmemcpy(&screenBuffer_A0000, v2 + 0x10000, 0xB000u);
    if ( !byte_9AD96 )
      sub_5BE50_5C360();
  }
  */
}
// 9AD96: using guessed type char byte_9AD96;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (00059A80) --------------------------------------------------------
void sub_59A80(uint16_t* a1)
{
  int result; // eax

  result = sub_5A090((int)a1, 1);
  if ( result )
  {
    sub_37440(*(__int16 *)(a1 + 24), 1);
    sub_41E80((Type_AE400_29795*)a1);
  }
}

//----- (00059AB0) --------------------------------------------------------
void sub_59AB0(uint16_t* a1)
{
  int result; // eax

  result = sub_5A090((int)a1, 0);
  if ( result )
  {
    sub_37440(*(__int16 *)(a1 + 24), 1);
    sub_41E80((Type_AE400_29795*)a1);
  }
}

//----- (00059AE0) --------------------------------------------------------
void sub_59AE0(uint16_t* a1)
{
  int result; // eax

  if ( *(_WORD *)(a1 + 26) )
  {
    result = sub_5A120((int)a1, 1);
    if ( !result )
      --*(_WORD *)(a1 + 26);
  }
  else
  {
    result = sub_5A090((int)a1, 1);
    if ( result )
    {
      sub_37440(*(__int16 *)(a1 + 24), 0);
      *(_WORD *)(a1 + 26) = 10;
    }
  }
}

//----- (00059B30) --------------------------------------------------------
void sub_59B30(uint16_t* a1)
{
  int result; // eax

  if ( *(_WORD *)(a1 + 26) )
  {
    result = sub_5A120((int)a1, 0);
    if ( !result )
      --*(_WORD *)(a1 + 26);
  }
  else
  {
    result = sub_5A090((int)a1, 0);
    if ( result )
    {
      sub_37440(*(__int16 *)(a1 + 24), 0);
      *(_WORD *)(a1 + 26) = 10;
    }
  }
}

//----- (00059B80) --------------------------------------------------------
int sub_59B80(uint16_t* a1)
{
  int v1; // esi
  int v2; // eax
  int v3; // edx
  int v4; // eax

  v1 = 164 * *(unsigned __int16 *)(dword_AE400_AE3F0() + 13333) + dword_AE400_AE3F0() + 29795;
  v2 = *(_DWORD *)(v1 + 160);
  if ( *(_WORD *)(v2 + 50) )
  {
    if ( (*(_BYTE *)(dword_AE400_AE3F0() + 2049 * *(__int16 *)(v2 + 48) + 13325) & 2) != 0 )
    {
      sub_37440(*(__int16 *)(a1 + 24), 0);
      sub_41E80((Type_AE400_29795*)a1);
      v3 = 2049 * *(__int16 *)(*(_DWORD *)(v1 + 160) + 48);
      v4 = dword_AE400_AE3F0() + 29795;
      *(_BYTE *)(v3 + v4 - 16470) = *(_BYTE *)(v3 + dword_AE400_AE3F0() + 13325) & 0xFD;
      sub_55370_558A0(((int)a1 - v4) / 164, -1, 41);
    }
  }
  return 0;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//----- (00059C40) --------------------------------------------------------
void sub_59C40(uint16_t* a1)
{
  int result; // eax

  result = sub_5A090((int)a1, 1);
  if ( result )
  {
    sub_37440(*(__int16 *)(a1 + 24), 1);
    sub_41E80((Type_AE400_29795*)a1);
  }
}

//----- (00059C70) --------------------------------------------------------
int sub_59C70(uint16_t* a1)
{
  int result; // eax

  result = sub_5A090((int)a1, 0);
  if ( result )
  {
    sub_37440(*(__int16 *)(a1 + 24), 1);
    sub_41E80((Type_AE400_29795*)a1);
  }
  return result;
}

//----- (00059CA0) --------------------------------------------------------
void sub_59CA0(uint16_t* a1)
{
  int result; // eax

  if ( *(_WORD *)(a1 + 26) )
  {
    result = sub_5A120((int)a1, 1);
    if ( !result )
      --*(_WORD *)(a1 + 26);
  }
  else
  {
    result = sub_5A090((int)a1, 1);
    if ( result )
    {
      sub_37440(*(__int16 *)(a1 + 24), 0);
      *(_WORD *)(a1 + 26) = 10;
    }
  }
}

//----- (00059CF0) --------------------------------------------------------
void sub_59CF0(uint16_t* a1)
{
  int result; // eax

  if ( *(_WORD *)(a1 + 26) )
  {
    result = sub_5A120((int)a1, 0);
    if ( !result )
      --*(_WORD *)(a1 + 26);
  }
  else
  {
    result = sub_5A090((int)a1, 0);
    if ( result )
    {
      sub_37440(*(__int16 *)(a1 + 24), 0);
      *(_WORD *)(a1 + 26) = 10;
    }
  }
}

//----- (00059D40) --------------------------------------------------------
void sub_59D40(uint16_t* a1)
{
  int result; // eax

  result = sub_5A090((int)a1, 1);
  if ( result )
  {
    sub_37440(*(__int16 *)(a1 + 24), 1);
    sub_41E80((Type_AE400_29795*)a1);
  }
}

//----- (00059D70) --------------------------------------------------------
int sub_59D70(uint16_t* a1)
{
  int result; // eax

  result = sub_5A090((int)a1, 0);
  if ( result )
  {
    sub_37440(*(__int16 *)(a1 + 24), 1);
    sub_41E80((Type_AE400_29795*)a1);
  }
  return result;
}

//----- (00059DA0) --------------------------------------------------------
void sub_59DA0(uint16_t* a1)
{
  int result; // eax

  if ( *(_WORD *)(a1 + 26) )
  {
    result = sub_5A120((int)a1, 1);
    if ( !result )
      --*(_WORD *)(a1 + 26);
  }
  else
  {
    result = sub_5A090((int)a1, 1);
    if ( result )
    {
      sub_37440(*(__int16 *)(a1 + 24), 0);
      *(_WORD *)(a1 + 26) = 10;
    }
  }
}

//----- (00059DF0) --------------------------------------------------------
void sub_59DF0(uint16_t* a1)
{
  int result; // eax

  if ( *(_WORD *)(a1 + 26) )
  {
    result = sub_5A120((int)a1, 0);
    if ( !result )
      --*(_WORD *)(a1 + 26);
  }
  else
  {
    result = sub_5A090((int)a1, 0);
    if ( result )
    {
      sub_37440(*(__int16 *)(a1 + 24), 0);
      *(_WORD *)(a1 + 26) = 10;
    }
  }
}

//----- (00059E40) --------------------------------------------------------
void sub_59E40(int a1, int a2)
{
  int result; // eax
  __int16 v3; // dx
  int v4; // edx
  __int16 v5; // di

  result = a2;
  if ( a2 == -1 )
  {
    result = 0;
    v4 = 0;
    while ( (unsigned int)result > 0xB && result != 16 || !*(_DWORD *)(v4 + dword_AE408_AE3F8() + 36382) )
    {
      ++result;
      v4 += 4;
      if ( result > 16 )
      {
        v5 = *(_WORD *)(a1 + 26);
        if ( !v5 )
        {
          *(_WORD *)(a1 + 26) = 16;
          return;
        }
        if ( v5 != 1 )
        {
          *(_WORD *)(a1 + 26) = v5 - 1;
          return;
        }
        goto LABEL_6;
      }
    }
  }
  else if ( !*(_DWORD *)(dword_AE408_AE3F8() + 4 * a2 + 36382) )
  {
    v3 = *(_WORD *)(a1 + 26);
    if ( v3 )
    {
      if ( v3 == 1 )
      {
LABEL_6:
        sub_55370_558A0((a1 - (dword_AE400_AE3F0() + 29795)) / 164, -1, 41);
        sub_37440(*(__int16 *)(a1 + 24), 1);
        sub_41E80((Type_AE400_29795*)a1);
        return;
      }
      else
      {
        *(_WORD *)(a1 + 26) = v3 - 1;
      }
    }
    else
    {
      *(_WORD *)(a1 + 26) = 16;
    }
  }
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (00059F60) --------------------------------------------------------
void sub_59F60(uint16_t* a1)
{
  sub_59E40((int)a1, 0);
}

//----- (00059F70) --------------------------------------------------------
void sub_59F70(uint16_t* a1)
{
  sub_59E40((int)a1, 1);
}

//----- (00059F80) --------------------------------------------------------
void sub_59F80(uint16_t* a1)
{
  sub_59E40((int)a1, 2);
}

//----- (00059F90) --------------------------------------------------------
void sub_59F90(uint16_t* a1)
{
  sub_59E40((int)a1, 3);
}

//----- (00059FA0) --------------------------------------------------------
void sub_59FA0(uint16_t* a1)
{
  sub_59E40((int)a1, 4);
}

//----- (00059FB0) --------------------------------------------------------
void sub_59FB0(uint16_t* a1)
{
  sub_59E40((int)a1, 5);
}

//----- (00059FC0) --------------------------------------------------------
void sub_59FC0(uint16_t* a1)
{
  sub_59E40((int)a1, 6);
}

//----- (00059FD0) --------------------------------------------------------
void sub_59FD0(uint16_t* a1)
{
  sub_59E40((int)a1, 7);
}

//----- (00059FE0) --------------------------------------------------------
void sub_59FE0(uint16_t* a1)
{
  sub_59E40((int)a1, 8);
}

//----- (00059FF0) --------------------------------------------------------
void sub_59FF0(uint16_t* a1)
{
  sub_59E40((int)a1, 9);
}

//----- (0005A000) --------------------------------------------------------
void sub_5A000(uint16_t* a1)
{
  sub_59E40((int)a1, 10);
}

//----- (0005A010) --------------------------------------------------------
void sub_5A010(uint16_t* a1)
{
  sub_59E40((int)a1, 11);
}

//----- (0005A020) --------------------------------------------------------
void sub_5A020(uint16_t* a1)
{
  sub_59E40((int)a1, 12);
}

//----- (0005A030) --------------------------------------------------------
void sub_5A030(uint16_t* a1)
{
  sub_59E40((int)a1, 13);
}

//----- (0005A040) --------------------------------------------------------
void sub_5A040(uint16_t* a1)
{
  sub_59E40((int)a1, 14);
}

//----- (0005A050) --------------------------------------------------------
void sub_5A050(uint16_t* a1)
{
  sub_59E40((int)a1, 15);
}

//----- (0005A060) --------------------------------------------------------
void sub_5A060(uint16_t* a1)
{
  sub_59E40((int)a1, 16);
}

//----- (0005A070) --------------------------------------------------------
void sub_5A070(uint16_t* a1)
{
  sub_59E40((int)a1, -1);
}

int sub_5A080(uint16_t* a1)
{
    return 0;
}

//----- (0005A090) --------------------------------------------------------
int sub_5A090(int a1, int a2)
{
  unsigned int i; // ebx

  if ( (*(_BYTE *)(a1 + 63) & 7) == 0 )
  {
    for ( i = *(_DWORD *)(dword_AE408_AE3F8() + 36462); i > dword_AE400_AE3F0() + 29795; i = *(_DWORD *)i )
    {
      if ( !*(_BYTE *)(i + 65) && sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)i) == a2 )
      {
        sub_55370_558A0((int)(i - (dword_AE400_AE3F0() + 29795)) / 164, -1, 41);
        return 1;
      }
    }
    *(_WORD *)(a1 + 76) = sub_11F50((axis_3d*)(__int16 *)(a1 + 72));
  }
  return 0;
}
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();

//----- (0005A120) --------------------------------------------------------
int sub_5A120(int a1, int a2)
{
  unsigned __int16 v2; // si
  int v3; // ebx

  v2 = 0;
  v3 = dword_AE400_AE3F0() + 13323;
  while ( v2 < str_AE400_AE3F0->var_u16_10 )
  {
    if ( sub_11950((Type_AE400_29795*)a1, (Type_AE400_29795*)(164 * *(unsigned __int16 *)(v3 + 10) + dword_AE400_AE3F0() + 29795)) == a2 )
      return 1;
    v3 += 2049;
    ++v2;
  }
  return 0;
}
// AE400: using guessed type int dword_AE400_AE3F0();

//SYNCHRONIZED WITH REMC1
void DrawText_5A180_5A690(char* text, int posX, int posY, uint8 color)//22B180_
{
	int textIndex;
	int tempPosX;
	textIndex = 0;
	tempPosX = posX;
	word_9ADFC = 64;
	if (!text[0])
	{
		word_9ADFC = 0;
		return;
	}
	while (tempPosX < ACT_MAX_HEIGHT)
	{
		switch (text[textIndex])
		{
		case 0:
		case 9:
		case 32:
			tempPosX += GetLetterX_5A3A0_5A8B0();
			break;
		case 10:
			tempPosX = posX;
			posY += GetLetterY_5A3B0_5A8C0();
			break;
		case 13:
			break;
		default:
			DrawBitmap_58768_58C78(tempPosX, posY, &dword_AE44C_AE43C[text[textIndex] + 1], color);
			tempPosX += dword_AE44C_AE43C[text[textIndex] + 1].dim.x;
		}
		textIndex++;
		if (!text[textIndex])
			break;
	}
	word_9ADFC = 0;
}

//----- (0005A3A0) --------------------------------------------------------
__int16 GetLetterX_5A3A0_5A8B0()
{
    return dword_AE44C_AE43C[33].dim.x;
}
// AE44C: using guessed type int dword_AE44C_AE43C;

//----- (0005A3B0) --------------------------------------------------------
__int16 GetLetterY_5A3B0_5A8C0()
{
  return dword_AE44C_AE43C[33].dim.y;
}
// AE44C: using guessed type int dword_AE44C_AE43C;

void sub_5A3C0_5A8D0(int fontIndex)//22B3C0_
{
    dword_AE3B8_2[0].bTab = begFont0Tab_AE3B8_AE3A8_26C3B8_26C3A8;
    dword_AE3B8_2[1].bTab = begFont1Tab_AE3BC_26C3BC_26C3AC;
    
    if (!dword_AE3B8_2[fontIndex].bTab)//fix !!!!

        //26C3B8
        dword_AE44C_AE43C = dword_AE3B8_2[0].bTab;
    else
        dword_AE44C_AE43C = dword_AE3B8_2[fontIndex].bTab;
    /*if (!*off_99974[1 + fontIndex].beg)//fix !!!!
        dword_AE44C_AE43C = *off_99974[1 + 0].beg;
    else
        dword_AE44C_AE43C = *off_99974[1 + fontIndex].beg;*/
}

//----- (0005A3E3) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void sub_5A3E3()
{
    FixPerifery((char*)"COMPUTE_TIMER");
    dword_AC5D4_AC5C4++;
    str_AE408_AE3F8->var_u32_210 += str_AE408_AE3F8->var_u32_206;
    if (str_AE408_AE3F8->var_u32_210 >= 0x10000)
    {
        str_AE408_AE3F8->var_u32_210 -= 0x10000;
    }

  //fix 
  /*
  ((void (*)(_DWORD, _DWORD, _DWORD, _DWORD, int, int, int, int, int *, int, int, int))_GETDS)(
    (unsigned __int16)__GS__,
    (unsigned __int16)__FS__,
    (unsigned __int16)__ES__,
    (unsigned __int16)__DS__,
    a1,
    a2,
    a3,
    a4,
    &v7,
    a5,
    a6,
    a7);
  ++dword_AC5D4_AC5C4;
  str_AE408_AE3F8->var_u32_210 += str_AE408_AE3F8->var_u32_206;
  if (str_AE408_AE3F8->var_u32_210 >= 0x10000)
  {
      str_AE408_AE3F8->var_u32_210 = str_AE408_AE3F8->var_u32_210 - 0x10000;
      ((void(__cdecl*)(int))chain_intr)(dword_12EC00);
  }
  outp(32, 32);
  */
}
// 5A458: positive sp value 4 has been found
// 62455: using guessed type _DWORD outp(_DWORD, char);
// 62460: using guessed type _DWORD chain_intr(_DWORD);
// AC5D4: using guessed type int dword_AC5D4_AC5C4;
// AE408: using guessed type int dword_AE408_AE3F8();

/*
class Timer {
public:
    ~Timer() {
        if (mRunning) {
            stop();
        }
    }
    typedef std::chrono::milliseconds Interval;
    typedef std::function<void(void)> Timeout;

    void start(const Interval& interval, const Timeout& timeout) {
        mRunning = true;

        mThread = std::thread([=]() {
            while (mRunning) {
                std::this_thread::sleep_for(interval);

                timeout();
            }
            });
    }
    void stop() {
        mRunning = false;
        mThread.join();
    }

private:
    std::thread mThread{};
    std::atomic_bool mRunning{};
};*/

void TimerFunction(long interval, bool* endRun)
{
    while (!*endRun) {
        sub_5A3E3();
        std::this_thread::sleep_for(std::chrono::milliseconds(interval));
    }
}

class TimerClass {
private:
    std::thread* timer;
    long interval;
    bool endRun = false;
public:
    TimerClass(long locInterval) {
        interval = locInterval;
    }
    void start() {
        endRun = false;
        timer = new std::thread(TimerFunction, interval, &endRun);
    };
    void stop() {
        endRun = true;
        if (timer)
        {
            std::this_thread::sleep_for(std::chrono::milliseconds(interval*2));
            timer->join();
            delete(timer);
        }
    }
};

TimerClass* timer;

//----- (0005A459) --------------------------------------------------------
void sub_5A459_5A969()
{
    FixPerifery((char*)"START_TIMER");

  str_AE408_AE3F8->var_u32_206 = 9903;
  str_AE408_AE3F8->var_u32_210 = 0;
  word_12EC04 = 0;//fix a2;
  dword_12EC00 = dos_getvect(8);
  outp(67, 54);
  outp(64, str_AE408_AE3F8->var_u32_206);
  outp(64, BYTE1(str_AE408_AE3F8->var_u32_206));

  timer = new TimerClass(1);
  timer->stop();
  timer->start();
  //std::this_thread::sleep_for(std::chrono::milliseconds(1000));
  //timer->stop();
  // 
  //std::thread timer(TimerFunction, 10);
  //timer.detach();
  /*
  Timer tm;

  tm.start(std::chrono::milliseconds(1000), [] {
      sub_5A3E3();
      });
      */
  //fix result = dos_setvect(8, sub_5A3E3, (unsigned __int16)__CS__);
  byte_9AD04 = 1;
}
// 62455: using guessed type _DWORD outp(_DWORD, char);
// 62481: using guessed type _DWORD dos_getvect(_DWORD);
// 624B5: using guessed type _DWORD dos_setvect(_DWORD, _DWORD, _DWORD);
// 9AD04: using guessed type char byte_9AD04;
// AE408: using guessed type int dword_AE408_AE3F8();
// 12EC00: using guessed type int dword_12EC00;
// 12EC04: using guessed type __int16 word_12EC04;

//----- (0005A4EA) --------------------------------------------------------
void sub_5A4EA_5A9FA()
{
    FixPerifery();

  if ( byte_9AD04 == 1 )
  {
    outp(67, 54);
    outp(64, 0);
    outp(64, 0);
    dos_setvect(8, dword_12EC00, (unsigned __int16)word_12EC04);
  }
  byte_9AD04 = 0;
}
// 62455: using guessed type _DWORD outp(_DWORD, char);
// 624B5: using guessed type _DWORD dos_setvect(_DWORD, _DWORD, _DWORD);
// 9AD04: using guessed type char byte_9AD04;
// 12EC00: using guessed type int dword_12EC00;
// 12EC04: using guessed type __int16 word_12EC04;

//----- (0005A560) --------------------------------------------------------
void sub_5A560_5AA70()
{
  __int16 v0; // bx
  __int16 v1; // bx
  __int16 v2; // bx
  __int16 v3; // bx
  __int16 v4; // bx
  __int16 v5; // bx
  __int16 v6; // bx
  __int16 v7; // bx
  __int16 v8; // bx
  __int16 v9; // bx
  __int16 v10; // bx
  __int16 v11; // bx
  __int16 v12; // bx
  __int16 v13; // bx
  __int16 v14; // bx
  __int16 v15; // bx
  __int16 v16; // bx
  __int16 v17; // bx
  __int16 v18; // bx
  __int16 v19; // bx
  int v20; // eax
  __int16 v21; // bx
  __int16 v22; // bx
  __int16 v23; // bx
  __int16 v24; // bx
  __int16 v25; // bx
  int *v26; // edi
  __int16 v27; // si
  int i; // ebx
  unsigned __int8 v29; // al
  int v30; // eax
  int result; // eax
  char v32[272]; // [esp+0h] [ebp-110h] BYREF

  if ( (*(_BYTE *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13328) & 8) != 0 )
  {
    sub_5A3C0_5A8D0(1);
    DrawText_5A180_5A690((char*)"Product name", 320, 0, byte_AD167_AD157[3841]);
    v0 = GetLetterY_5A3B0_5A8C0();
    DrawText_5A180_5A690((char*)"Magic Carpet", 320, v0, byte_AD167_AD157[16]);
    v1 = GetLetterY_5A3B0_5A8C0() + v0;
    DrawText_5A180_5A690((char*)"Version number", 320, v1, byte_AD167_AD157[3841]);
    v2 = GetLetterY_5A3B0_5A8C0() + v1;
    DrawText_5A180_5A690((char*)"Beta v8.0", 320, v2, byte_AD167_AD157[16]);
    v3 = GetLetterY_5A3B0_5A8C0() + v2;
    DrawText_5A180_5A690((char*)"Version date", 320, v3, byte_AD167_AD157[3841]);
    v4 = GetLetterY_5A3B0_5A8C0() + v3;
    sprintf(v32, "%s %s", "16:26:18", "Jun 05 1995");
    DrawText_5A180_5A690(v32, 320, v4, byte_AD167_AD157[16]);
    v5 = GetLetterY_5A3B0_5A8C0() + v4;
    DrawText_5A180_5A690((char*)"Programmer", 320, v5, byte_AD167_AD157[3841]);
    v6 = GetLetterY_5A3B0_5A8C0() + v5;
    DrawText_5A180_5A690((char*)"Bullfrog, Sean Cooper.", 320, v6, byte_AD167_AD157[16]);
    v7 = GetLetterY_5A3B0_5A8C0() + v6;
    DrawText_5A180_5A690((char*)"Supplied to", 320, v7, byte_AD167_AD157[3841]);
    v8 = GetLetterY_5A3B0_5A8C0() + v7;
    DrawText_5A180_5A690((char*)"PUBLIC", 320, v8, byte_AD167_AD157[16]);
    v9 = GetLetterY_5A3B0_5A8C0() + v8;
    DrawText_5A180_5A690((char*)"Level Number", 320, v9, byte_AD167_AD157[3841]);
    v10 = GetLetterY_5A3B0_5A8C0() + v9;
    sprintf(v32, "%d", str_AE408_AE3F8->var_u16_17);
    DrawText_5A180_5A690(v32, 320, v10, byte_AD167_AD157[16]);
    v11 = GetLetterY_5A3B0_5A8C0() + v10;
    if ( (str_AE408_AE3F8->var_u8_0 & 0x10) != 0 )
    {
      DrawText_5A180_5A690((char*)"Transfer rate:", 320, v11, byte_AD167_AD157[3841]);
      v12 = GetLetterY_5A3B0_5A8C0() + v11;
      sprintf(v32, "%d", *(_DWORD *)(dword_AE408_AE3F8() + 157));
      DrawText_5A180_5A690(v32, 320, v12, byte_AD167_AD157[16]);
      v11 = GetLetterY_5A3B0_5A8C0() + v12;
    }
    DrawText_5A180_5A690((char*)"GameTurn:", 320, v11, byte_AD167_AD157[3841]);
    v13 = GetLetterY_5A3B0_5A8C0() + v11;
    sprintf(v32, "%d", *(_DWORD *)(dword_AE408_AE3F8() + 153));
    DrawText_5A180_5A690(v32, 320, v13, byte_AD167_AD157[16]);
    v14 = GetLetterY_5A3B0_5A8C0() + v13;
    DrawText_5A180_5A690((char*)"Sound Number", 320, v14, byte_AD167_AD157[3841]);
    v15 = GetLetterY_5A3B0_5A8C0() + v14;
    sprintf(v32, "%d", (unsigned __int8)byte_939EC);
    DrawText_5A180_5A690(v32, 320, v15, byte_AD167_AD157[16]);
    v16 = GetLetterY_5A3B0_5A8C0() + v15;
    DrawText_5A180_5A690((char*)"Game turn", 320, v16, byte_AD167_AD157[3841]);
    v17 = GetLetterY_5A3B0_5A8C0() + v16;
    sprintf(v32, "%d %d", *(_DWORD *)(dword_AE400_AE3F0() + 2049 * str_AE400_AE3F0->var_u16_8 + 13341), dword_AC5D4_AC5C4);
    DrawText_5A180_5A690(v32, 320, v17, byte_AD167_AD157[16]);
    v18 = GetLetterY_5A3B0_5A8C0() + v17;
    DrawText_5A180_5A690((char*)"Thing", 320, v18, byte_AD167_AD157[3841]);
    v19 = GetLetterY_5A3B0_5A8C0() + v18;
    v20 = sub_37710();
    sprintf(v32, "Thing %d, Active %d", 164, 1000 - v20);
    DrawText_5A180_5A690(v32, 320, v19, byte_AD167_AD157[16]);
    v21 = GetLetterY_5A3B0_5A8C0() + v19;
    sprintf(v32, "Carpet %d", sub_38D09);
    DrawText_5A180_5A690(v32, 320, v21, byte_AD167_AD157[16]);
    v22 = GetLetterY_5A3B0_5A8C0() + v21;
    sprintf(v32, "Tape %d", 36478);
    DrawText_5A180_5A690(v32, 320, v22, byte_AD167_AD157[16]);
    v23 = GetLetterY_5A3B0_5A8C0() + v22;
    sprintf(v32, "Heap %d", *(_DWORD *)(dword_AE408_AE3F8() + 172));
    DrawText_5A180_5A690(v32, 320, v23, byte_AD167_AD157[16]);
    v24 = GetLetterY_5A3B0_5A8C0() + v23;
    sub_63338_63848();
    DrawText_5A180_5A690((char*)"Memory (Used/Free)", 320, v24, byte_AD167_AD157[3841]);
    v25 = GetLetterY_5A3B0_5A8C0() + v24;
    sprintf(v32, "%d/%d", dword_1314A8, dword_1314A4);
    DrawText_5A180_5A690(v32, 320, v25, byte_AD167_AD157[16]);
    GetLetterY_5A3B0_5A8C0();
    v26 = &dword_1302A0_130290;
    v27 = 0;
    for ( i = 0; v26; v26 = (int *)v26[2] )
    {
      sprintf(v32, "s%7.7d,u%01d", v26[1], *((unsigned __int8 *)v26 + 16));
      if ( dword_12F6A4_12F694[3 * *((unsigned __int8 *)v26 + 17)] )
        v29 = byte_AD167_AD157[1];
      else
        v29 = byte_AD167_AD157[3841];
      DrawText_5A180_5A690(v32, v27, i, v29);
      LOWORD(v30) = GetLetterY_5A3B0_5A8C0();
      i += v30;
      if ( (__int16)i > 400 - GetLetterY_5A3B0_5A8C0() )
      {
        i = 0;
        v27 += 12 * GetLetterX_5A3A0_5A8B0();
      }
    }
  }
  result = dword_AE408_AE3F8();
  if ( *(_DWORD *)(dword_AE408_AE3F8() + 25) == 16273849 )
    *(_BYTE *)(dword_AE408_AE3F8() + 24) |= 2u;
}
// 5AC1C: variable 'v30' is possibly undefined
// 38D09: using guessed type int sub_38D09();
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 939EC: using guessed type char byte_939EC;
// AC5D4: using guessed type int dword_AC5D4_AC5C4;
// AD177: using guessed type char byte_AD177;
// AE068: using guessed type char byte_AE068;
// AE400: using guessed type int dword_AE400_AE3F0();
// AE408: using guessed type int dword_AE408_AE3F8();
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;
// 12F6A4: using guessed type int dword_12F6A4_12F694[];
// 1302A0: using guessed type int dword_1302A0_130290;
// 1314A4: using guessed type int dword_1314A4;
// 1314A8: using guessed type int dword_1314A8;

void DrawStartGameTexts_5ACA0_5B1B0()//22bca0_
{
  printf("Copyright (c) 1995 Bullfrog Productions Ltd.\n");
  printf("All rights reserved.\n");
  printf("%s \n", "Magic Carpet");
}

void DrawTextLine_5AD10_5B220(char* text)//22bd10_22c220
{
  if ( (str_AE408_AE3F8->var_u8_1 & 1) != 0 )
    printf("%s\n", text);
}

//----- (0005AD30) --------------------------------------------------------
int sub_5AD30_5B240()
{
  int v0; // ebx
  int v1; // esi

  v0 = 96;
  v1 = 24576;
  do
  {
    memset(&unk_12EEA4, 0, 50);
    dword_12EEC0 = v1 | 0x7F;
    dword_12EEB4 = 0;
    dword_12EEBC = 0;
    dword_12EEB8 = 0;
    sub_5B3E0((int)&unk_12EEA4);
    if ( (v0 | 0x7F00) == dword_12EEC0 )
      return v1 & 0xFF00;
    ++v0;
    v1 += 256;
  }
  while ( v0 <= 112 );
  return 0;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12EEB4: using guessed type int dword_12EEB4;
// 12EEB8: using guessed type int dword_12EEB8;
// 12EEBC: using guessed type int dword_12EEBC;
// 12EEC0: using guessed type int dword_12EEC0;

//----- (0005ADB0) --------------------------------------------------------
int sub_5ADB0_5B2C0(int a1, int32_t* a2, char* a3)
{
  int v3; // ebx
  int v4; // eax
  _BYTE *v5; // eax

  v3 = 0;
  memset(&unk_12EEA4, 0, 50);
  v4 = a1;
  LOBYTE(v4) = a1 | 3;
  dword_12EEBC = 0;
  dword_12EEC0 = v4;
  dword_12EEB8 = 0;
  word_12EEC6 = word_12EED8_12EEC8;
  sub_5B3E0((int)&unk_12EEA4);
  v5 = (_BYTE *)dword_12EE98_12EE88;
  if ( dword_12EEBC > 0 )
  {
    do
    {
      *a3++ = *v5;
      ++v3;
      ++v5;
    }
    while ( v3 < dword_12EEBC );
  }
  *a2 = dword_12EEBC;
  return dword_12EEC0;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12EE98: using guessed type int dword_12EE98_12EE88;
// 12EEB8: using guessed type int dword_12EEB8;
// 12EEBC: using guessed type int dword_12EEBC;
// 12EEC0: using guessed type int dword_12EEC0;
// 12EEC6: using guessed type __int16 word_12EEC6;
// 12EED8: using guessed type __int16 word_12EED8_12EEC8;

//----- (0005AE30) --------------------------------------------------------
int sub_5AE30_5B340(int a1, char *a2)
{
  int v2; // edx
  char *v3; // eax
  char v4; // bl
  int v5; // eax

  v2 = dword_12EE98_12EE88;
  v3 = a2;
  do
  {
    ++v2;
    v4 = *v3++;
    *(_BYTE *)(v2 - 1) = v4;
  }
  while ( v3 != a2 + 256 );
  memset(&unk_12EEA4, 0, 50);
  v5 = a1;
  LOBYTE(v5) = a1 | 4;
  dword_12EEBC = 0;
  dword_12EEC0 = v5;
  dword_12EEB8 = 0;
  word_12EEC6 = word_12EED8_12EEC8;
  sub_5B3E0((int)&unk_12EEA4);
  return dword_12EEC0;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12EE98: using guessed type int dword_12EE98_12EE88;
// 12EEB8: using guessed type int dword_12EEB8;
// 12EEBC: using guessed type int dword_12EEBC;
// 12EEC0: using guessed type int dword_12EEC0;
// 12EEC6: using guessed type __int16 word_12EEC6;
// 12EED8: using guessed type __int16 word_12EED8_12EEC8;

//----- (0005AEB0) --------------------------------------------------------
int sub_5AEB0_5B3C0(int a1, int32_t* a2, char* a3)
{
  int v3; // ebx
  int v4; // eax
  _BYTE *v5; // eax

  v3 = 0;
  memset(&unk_12EEA4, 0, 50);
  v4 = a1;
  LOBYTE(v4) = a1 | 5;
  dword_12EEBC = 0;
  dword_12EEC0 = v4;
  dword_12EEB8 = 0;
  word_12EEC6 = word_12EED8_12EEC8;
  sub_5B3E0((int)&unk_12EEA4);
  v5 = (_BYTE *)dword_12EE98_12EE88;
  if ( dword_12EEBC > 0 )
  {
    do
    {
      *a3++ = *v5;
      ++v3;
      ++v5;
    }
    while ( v3 < dword_12EEBC );
  }
  *a2 = dword_12EEBC;
  return dword_12EEC0;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12EE98: using guessed type int dword_12EE98_12EE88;
// 12EEB8: using guessed type int dword_12EEB8;
// 12EEBC: using guessed type int dword_12EEBC;
// 12EEC0: using guessed type int dword_12EEC0;
// 12EEC6: using guessed type __int16 word_12EEC6;
// 12EED8: using guessed type __int16 word_12EED8_12EEC8;

int InitVfx_5AF50_5B460()
{
	char* v4;
	char* v16;
	memset(word_12EE9C_12EE8C, 0, 6);
	memset(&str_12EEDA_12EECA, 0, 7);
	dword_12EE98_12EE88 = sub_5B480_5B990(256, &word_12EED8_12EEC8, &word_12EED6_12EEC6);
	if (!dword_12EE98_12EE88)
		return 0;
	char* vipEnv = getenv("VIPPORT");
	if (vipEnv)
	{
		dword_12EE94_12EE84 = sub_6660D_66B1D(vipEnv, &v16, 16);
		dword_12EE24_12EE14 = dword_12EE94_12EE84 + 1;
		dword_12EE10_12EE00 = sub_5AD30_5B240();
		if (!dword_12EE10_12EE00 || sub_5ADB0_5B2C0(dword_12EE10_12EE00, &dword_12EE18_12EE08, byte_12EC10_12EC00))
		{
			sub_5B3B0_5B8C0();
			return 0;
		}
		dword_12EE14_12EE04 = 0;
		dword_12EE2C_12EE1C = 0;
		dword_12EE1C_12EE0 = 0;
		for (dword_12EE30_12EE20 = byte_12ED10_12ED00; dword_12EE1C_12EE0 < dword_12EE18_12EE08; dword_12EE1C_12EE0 += dword_12EE28_12EE18)
		{
			dword_12EE28_12EE18 = byte_12EC10_12EC00[dword_12EE1C_12EE0];
			v4 = &byte_12EC10_12EC00[dword_12EE1C_12EE0];
			switch (byte_12EC11_12EC01[dword_12EE1C_12EE0])
			{
			case 0:
				dword_12EE1C_12EE0 = dword_12EE18_12EE08;
				break;
			case 1:
				dword_12EE40_12EE30 = (int)&byte_12EC10_12EC00[dword_12EE1C_12EE0];
				break;
			case 2:
				dword_12EE38_12EE28 = (int)&byte_12EC10_12EC00[dword_12EE1C_12EE0];
				byte_12EEE1_12EED1 = strcmp(v4 + 34, "VFX1 CyberPuck") == 0;
				break;
			case 6:
				if (dword_12EE2C_12EE1C < 6)
				{
					dword_12EE68_12EE58 = (int)&byte_12EC10_12EC00[dword_12EE1C_12EE0];
					*(_WORD*)&byte_12EE6E_12EE5E[6 * dword_12EE2C_12EE1C + 4] = __DS__;
					*(_DWORD*)&byte_12EE6E_12EE5E[6 * dword_12EE2C_12EE1C] = (uint32)dword_12EE30_12EE20;
					dword_12EE2C_12EE1C++;
					dword_12EE30_12EE20 = dword_12EE30_12EE20 + 6;
					if (byte_12EEE1_12EED1)
					{
						v4[22] |= 0x80;
						v4[14] |= 0x80;
						v4[30] |= 0x80;
					}
				}
				break;
			case 7:
				if (dword_12EE14_12EE04 < 6)
				{
					dword_12EE3C_12EE2C = (int)&byte_12EC10_12EC00[dword_12EE1C_12EE0];
					*(_WORD*)&byte_12EE44_12EE34[6 * dword_12EE14_12EE04 + 4] = __DS__;
					*(_DWORD*)&byte_12EE44_12EE34[6 * dword_12EE14_12EE04] = (uint32)dword_12EE30_12EE20;
					dword_12EE14_12EE04++;
					dword_12EE30_12EE20 += 7;
					if (byte_12EEE1_12EED1)
					{
						v4[14] |= 0x80;
						v4[30] |= 0x80;
						v4[22] |= 0x80;
						v4[33] |= 0x80;
					}
				}
				break;
			default:
				continue;
			}
		}
		if (sub_5AE30_5B340(dword_12EE10_12EE00, byte_12EC10_12EC00))
		{
			sub_5B3B0_5B8C0();
			return 0;
		}
		else
		{
			if (dword_12EE2C_12EE1C)
				byte_9AD08 = 1;
			if (dword_12EE14_12EE04)
				byte_9AD09 = 1;
			return 1;
		}
	}
	else
	{
		dword_12EE94_12EE84 = 768;
		sub_5B3B0_5B8C0();
		return 0;
	}
}

//----- (0005B210) --------------------------------------------------------
int sub_5B210()
{
  unsigned __int8 v2; // al

  if ( sub_5AEB0_5B3C0(dword_12EE10_12EE00, &dword_12EE18_12EE08, byte_12ED10_12ED00) )
  {
    sub_5B3B0_5B8C0();
    return 0;
  }
  else
  {
    if ( byte_9AD08 )
    {
      word_12EE9C_12EE8C[0] = __readgsword(*(unsigned int *)byte_12EE6E_12EE5E);
      word_12EE9C_12EE8C[1] = __readgsword(*(_DWORD *)byte_12EE6E_12EE5E + 2);
      word_12EE9C_12EE8C[2] = __readgsword(*(_DWORD*)byte_12EE6E_12EE5E + 4);
    }
    if ( byte_9AD09 )
    {
      str_12EEDA_12EECA.word_0 = __readgsword(*(unsigned int *)byte_12EE44_12EE34);
      str_12EEDA_12EECA.word_2 = __readgsword(*(_DWORD *)byte_12EE44_12EE34 + 2);
      str_12EEDA_12EECA.word_4 = __readgsword(*(_DWORD *)byte_12EE44_12EE34 + 4);
      str_12EEDA_12EECA.byte_6 = __readgsbyte(*(_DWORD*)byte_12EE44_12EE34 + 6);
    }
    return 1;
  }
}
// 9AD08: using guessed type char byte_9AD08;
// 9AD09: using guessed type char byte_9AD09;
// 12ED10: using guessed type _BYTE byte_12ED10_12ED00[256];
// 12EE10: using guessed type int dword_12EE10_12EE00;
// 12EE18: using guessed type int dword_12EE18_12EE08;
// 12EE9C: using guessed type __int16 word_12EE9C_12EE8C;
// 12EE9E: using guessed type __int16 word_12EE9E;
// 12EEA0: using guessed type __int16 word_12EEA0;
// 12EEDA: using guessed type __int16 word_12EEDA_12EECA;
// 12EEDC: using guessed type __int16 word_12EEDC;
// 12EEDE: using guessed type __int16 word_12EEDE;
// 12EEE0: using guessed type char byte_12EEE0;

//----- (0005B2B0) --------------------------------------------------------
int sub_5B2B0()
{
  int result; // eax
  __int16 v1[14]; // [esp+0h] [ebp-1Ch] BYREF

  FixPerifery();

  //fix
  result = 0;
  //fix

  if ( byte_9AD08 )
  {
    memset(v1, 0, sizeof(v1));
    v1[0] = 24584;
    v1[2] = *(unsigned __int8 *)(dword_12EE68_12EE58 + 3) | 0x800;
    return int386(51, (uint32)v1, (uint32)v1);
  }
  return result;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 9AD08: using guessed type char byte_9AD08;
// 12EE68: using guessed type int dword_12EE68_12EE58;

//----- (0005B310) --------------------------------------------------------
unsigned __int8 sub_5B310_5B820(int a1, unsigned __int8 *a2)
{
  unsigned __int8 v3; // al
  char v5; // dl
  unsigned __int8 v6; // al
  int v7; // ecx
  unsigned __int8 v8; // al
  unsigned __int8 *v9; // ebx
  unsigned __int8 v10; // al
  unsigned __int8 result; // al

  FixPerifery();

  __outbyte(dword_12EE94_12EE84, 7u);
  __outbyte(dword_12EE24_12EE14, 0xFFu);
  __outbyte(dword_12EE94_12EE84, 6u);
  v3 = __inbyte(dword_12EE24_12EE14);
  v5 = v3 & 0xF8;
  if ( a1 )
  {
    if ( a1 == 1 )
      v6 = v5 | 1;
    else
      v6 = v3 & 0xFA | 4;
  }
  else
  {
    v6 = v5 | 3;
  }
  __outbyte(dword_12EE24_12EE14, v6);
  __outbyte(dword_12EE94_12EE84, 9u);
  __outbyte(dword_12EE24_12EE14, 0);
  v7 = 0;
  __outbyte(dword_12EE94_12EE84, 0xAu);
  do
  {
    v8 = *a2;
    v9 = a2 + 1;
    __outbyte(dword_12EE24_12EE14, v8);
    v10 = *v9++;
    __outbyte(dword_12EE24_12EE14, v10);
    ++v7;
    result = *v9;
    a2 = v9 + 1;
    __outbyte(dword_12EE24_12EE14, result);
  }
  while ( v7 < 256 );
  return result;
}
// 12EE24: using guessed type int dword_12EE24_12EE14;
// 12EE94: using guessed type int dword_12EE94_12EE84;

//----- (0005B3B0) --------------------------------------------------------
int sub_5B3B0_5B8C0()
{
  int result; // eax

  if ( dword_12EE98_12EE88 )
  {
    result = sub_5B450(word_12EED6_12EEC6);
    dword_12EE98_12EE88 = 0;
  }
  return result;
}
// 12EE98: using guessed type int dword_12EE98_12EE88;
// 12EED6: using guessed type __int16 word_12EED6_12EEC6;

//----- (0005B3E0) --------------------------------------------------------
int sub_5B3E0(int a1)
{
  int v2[7]; // [esp+0h] [ebp-30h] BYREF
  __int16 v3[10]; // [esp+1Ch] [ebp-14h] BYREF

  FixPerifery();

  memset(v3, 0, 12);
  memset(v2, 0, sizeof(v2));
  v2[0] = 768;
  v2[1] = 51;
  v2[2] = 0;
  v2[5] = a1;
  //fix v3[0] = __DS__;
  return int386x(49, (uint32)v2, (uint32)v2, (uint32)v3);
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 636E6: using guessed type _DWORD int386x(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (0005B450) --------------------------------------------------------
int sub_5B450(__int16 a1)
{
  int v2[7]; // [esp+0h] [ebp-1Ch] BYREF

  FixPerifery();

  v2[3] = a1;
  v2[0] = 257;
  return int386(49, (uint32)v2, (uint32)v2);
}
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);

//----- (0005B480) --------------------------------------------------------
int sub_5B480_5B990(int a1, int16_t* a2, int16_t* a3)
{
  int v3; // ebx
  int v5[3]; // [esp+0h] [ebp-34h] BYREF
  int v6; // [esp+Ch] [ebp-28h]
  int v7; // [esp+18h] [ebp-1Ch]
  char v8[24]; // [esp+1Ch] [ebp-18h] BYREF

  FixPerifery();

  //fix
  v6 = 0;
  v7 = 0;
  //fix

  *a2 = 0;
  *a3 = 0;
  segread((uint32)v8);
  v5[0] = 256;
  v5[1] = (unsigned int)(a1 + 15) >> 4;
  int386(49, (uint32)v5, (uint32)v5);
  v3 = 0;
  if ( !v7 )
  {
    *a2 = v5[0];
    *a3 = v6;
    return 16 * *a2;
  }
  return v3;
}
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 636BC: using guessed type _DWORD segread(_DWORD);
// 5B480: using guessed type char var_18[24];

//----- (0005B500) --------------------------------------------------------
void ClearScr_5B500_5BA10()
{
    FixPerifery();

  //__outbyte(0x302u, 2u);
  //__outbyte(0x303u, 0x10u);
  memset((void*)begWscreen_2ECFF4_2ECFE4, 0, scrHeight_12EFF8_12EFE8 * scrWidth_12EFF0_12EFE0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12EFF8: using guessed type int dword_12EFF8_12EFE8;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0005B560) --------------------------------------------------------
void ClearScr_5B560()
{
    FixPerifery();

  //__outbyte(0x302u, 2u);
  //__outbyte(0x303u, 1u);
  memset((void*)begWscreen_2ECFF4_2ECFE4, 0, scrHeight_12EFF8_12EFE8 * scrWidth_12EFF0_12EFE0);
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
    Blit_5CDA0_5D2B0();
  else
    Blit_599B0_59EC0(480);
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12EFF8: using guessed type int dword_12EFF8_12EFE8;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0005B5E0) --------------------------------------------------------
void sub_5B5E0()
{
  ;
}

//----- (0005B5F4) --------------------------------------------------------
void sub_5B5F4_5BB04()
{
  ;
}

//----- (0005B650) --------------------------------------------------------
void sub_5B650_5BB60()
{
  int result; // eax
  _BYTE *v1; // eax
  _BYTE *v2; // eax

  mouseXY_12EF80_12EF70 = *(uint32*)&mouse_9AD90;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    LOWORD(mouseXY_12EF80_12EF70) = (__int16)mouseXY_12EF80_12EF70 >> 1;
    SHIWORD(mouseXY_12EF80_12EF70) >>= 1;
  }
  mouseByteIndex2_12EF8C_12EF7C = ((int)unk_12EF7E >> 16) + (mouseXY_12EF80_12EF70 >> 16) * scrWidth_12EFF0_12EFE0;
  if ( (typeResolution_12F02E_12F01E & 8) != 0 )
  {
    word_12EFD0 = HIWORD(mouseByteIndex2_12EF8C_12EF7C);
    sub_61A1C_61F2C(SHIWORD(mouseByteIndex2_12EF8C_12EF7C));
  }
  unk_12EF84_12EF74 = scrWidth_12EFF0_12EFE0 - mouseXY_12EF80_12EF70;
  if ( (__int16)(scrWidth_12EFF0_12EFE0 - mouseXY_12EF80_12EF70) > word_12EFC4_12EFB4 )
    unk_12EF84_12EF74 = word_12EFC4_12EFB4;
  word_12EF86_12EF76 = scrHeight_12EFF8_12EFE8 - HIWORD(mouseXY_12EF80_12EF70);
  if ( (__int16)(scrHeight_12EFF8_12EFE8 - HIWORD(mouseXY_12EF80_12EF70)) > word_12EFC6_12EFB6 )
    word_12EF86_12EF76 = word_12EFC6_12EFB6;
  dword_12EFA8_12EF98 = dword_12EF88_12EF78;
  dword_12EFA4_12EF94 = (int)&tempScreenBuffer_A0000[(unsigned __int16)mouseByteIndex2_12EF8C_12EF7C];
  dword_12EFA0_12EF90 = (int)dword_12EFC8_12EFB8;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    for ( word_12EFD4_12EFC4 = 0; ; ++word_12EFD4_12EFC4 )
    {
      result = (int)unk_12EF84_12EF74 >> 16;
      if ( (unsigned __int16)word_12EFD4_12EFC4 >= (int)unk_12EF84_12EF74 >> 16 )
        break;
      for ( word_12EFD2_12EFC2 = 0; (unsigned __int16)word_12EFD2_12EFC2 < *(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16; ++word_12EFD2_12EFC2 )
      {
        v1 = (_BYTE *)dword_12EFA8_12EF98++;
        *v1 = *(_BYTE *)dword_12EFA4_12EF94;
        if ( *(_BYTE *)dword_12EFA0_12EF90 != 0xFE )
          *(_BYTE *)dword_12EFA4_12EF94 = *(_BYTE *)dword_12EFA0_12EF90;
        ++dword_12EFA4_12EF94;
        ++dword_12EFA0_12EF90;
      }
      dword_12EFA4_12EF94 += scrWidth_12EFF0_12EFE0 - (*(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16);
      dword_12EFA0_12EF90 += (*(int *)((char *)&dword_12EFC8_12EFB8 + 2) >> 16) - (*(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16);
    }
  }
  else
  {
    for ( word_12EFD4_12EFC4 = 0; ; ++word_12EFD4_12EFC4 )
    {
      result = (int)unk_12EF84_12EF74 >> 16;
      if ( (unsigned __int16)word_12EFD4_12EFC4 >= (int)unk_12EF84_12EF74 >> 16 )
        break;
      for ( word_12EFD2_12EFC2 = 0; (unsigned __int16)word_12EFD2_12EFC2 < *(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16; ++word_12EFD2_12EFC2 )
      {
        v2 = (_BYTE *)dword_12EFA8_12EF98++;
        *v2 = *(_BYTE *)dword_12EFA4_12EF94;
        if ( *(_BYTE *)dword_12EFA0_12EF90 != 0xFE )
          *(_BYTE *)dword_12EFA4_12EF94 = *(_BYTE *)dword_12EFA0_12EF90;
        if ( ++dword_12EFA4_12EF94 >= 0xB0000 )
        {
          sub_61A1C_61F2C(++word_12EFD0);
          dword_12EFA4_12EF94 -= 0x10000;
        }
        ++dword_12EFA0_12EF90;
      }
      dword_12EFA4_12EF94 += scrWidth_12EFF0_12EFE0 - (*(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16);
      if ( dword_12EFA4_12EF94 >= 0xB0000 )
      {
        sub_61A1C_61F2C(++word_12EFD0);
        dword_12EFA4_12EF94 -= 0x10000;
      }
      dword_12EFA0_12EF90 += (*(int *)((char *)&dword_12EFC8_12EFB8 + 2) >> 16) - (*(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16);
    }
  }
}
// 10000: using guessed type void sub_10000();
// 9AD90: using guessed type int dmouse_9AD90.x;
// 12EF80: using guessed type int mouseXY_12EF80_12EF70;
// 12EF86: using guessed type __int16 word_12EF86_12EF76;
// 12EF88: using guessed type int dword_12EF88_12EF78;
// 12EF8C: using guessed type int mouseByteIndex2_12EF8C_12EF7C;
// 12EFA0: using guessed type int dword_12EFA0_12EF90;
// 12EFA4: using guessed type int dword_12EFA4_12EF94;
// 12EFA8: using guessed type int dword_12EFA8_12EF98;
// 12EFC4: using guessed type __int16 word_12EFC4_12EFB4;
// 12EFC6: using guessed type __int16 word_12EFC6_12EFB6;
// 12EFC8: using guessed type int dword_12EFC8_12EFB8;
// 12EFCC: using guessed type int dword_12EFCC_12EFBC;
// 12EFD0: using guessed type __int16;
// 12EFD2: using guessed type __int16 word_12EFD2_12EFC2;
// 12EFD4: using guessed type __int16 word_12EFD4_12EFC4;
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF8: using guessed type int dword_12EFF8_12EFE8;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//SYNC WITH REMC1
void sub_5B95C_5BE6C()
{
  int result; // eax
  _BYTE *v1; // eax
  _BYTE *v2; // edx

  //mouse_9AD90.x = 100;
  //mouse_9AD90.y = 100;

  mouseXY2_12EF90_12EF80 = mouse_9AD90;
  mouseXY_12EF80_12EF70 = *(uint32_t*)&mouse_9AD90;
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    mouseXY2_12EF90_12EF80.x >>= 1;
    mouseXY2_12EF90_12EF80.y >>= 1;
  }
  dword_12EF9C_12EF8C = mouseXY2_12EF90_12EF80.x + mouseXY2_12EF90_12EF80.y * scrWidth_12EFF0_12EFE0;
  mouseByteIndex2_12EF8C_12EF7C = dword_12EF9C_12EF8C;
  LOWORD(dword_12EF94_12EF84) = scrWidth_12EFF0_12EFE0 - mouseXY2_12EF90_12EF80.x;
  if ( (__int16)(scrWidth_12EFF0_12EFE0 - mouseXY2_12EF90_12EF80.x) > word_12EFC4_12EFB4 )
    LOWORD(dword_12EF94_12EF84) = word_12EFC4_12EFB4;
  unk_12EF84_12EF74 = *(int*)&dword_12EF94_12EF84;
  HIWORD(dword_12EF94_12EF84) = scrHeight_12EFF8_12EFE8 - mouseXY2_12EF90_12EF80.y;
  if ( (__int16)(scrHeight_12EFF8_12EFE8 - mouseXY2_12EF90_12EF80.y) > word_12EFC6_12EFB6 )
    HIWORD(dword_12EF94_12EF84) = word_12EFC6_12EFB6;
  word_12EF86_12EF76 = HIWORD(dword_12EF94_12EF84);
  dword_12EFA8_12EF98 = dword_12EF98_12EF88;
  dword_12EFAC_12EF9C = dword_12EF88_12EF78;
  dword_12EFA4_12EF94 = dword_12EF9C_12EF8C + (int)begWscreen_2ECFF4_2ECFE4;
  dword_12EFA0_12EF90 = (int)dword_12EFC8_12EFB8;
  for ( word_12EFD4_12EFC4 = 0; ; ++word_12EFD4_12EFC4 )
  {
    result = *(int*)&dword_12EF94_12EF84 >> 16;
    if ( (unsigned __int16)word_12EFD4_12EFC4 >= dword_12EF94_12EF84.y)
      break;
    for ( word_12EFD2_12EFC2 = 0; (unsigned __int16)word_12EFD2_12EFC2 < dword_12EF94_12EF84.x; ++word_12EFD2_12EFC2 )
    {
      v1 = (_BYTE *)dword_12EFA8_12EF98++;
      *v1 = *(_BYTE *)dword_12EFA4_12EF94;
      v2 = (_BYTE *)dword_12EFAC_12EF9C++;
      *v2 = *(_BYTE *)dword_12EFA4_12EF94;
      if ( *(_BYTE *)dword_12EFA0_12EF90 != 0xFE )
        *(_BYTE *)dword_12EFA4_12EF94 = *(_BYTE *)dword_12EFA0_12EF90;
      ++dword_12EFA4_12EF94;
      ++dword_12EFA0_12EF90;
    }
    dword_12EFA4_12EF94 += scrWidth_12EFF0_12EFE0 - dword_12EF94_12EF84.x;
    dword_12EFA0_12EF90 += dword_12EFCC_12EFBC.x - dword_12EF94_12EF84.x;
  }
}

//----- (0005BB60) --------------------------------------------------------
void sub_5BB60_5C070()
{
  int result; // eax
  _BYTE *v1; // eax
  _BYTE *v2; // edx
  _BYTE *v3; // eax
  _BYTE *v4; // edx

  if ( (typeResolution_12F02E_12F01E & 1) == 0 )
  {
      word_12EFD0 = 0;// HIWORD(mouseByteIndex2_12EF8C_12EF7C);
      sub_61A1C_61F2C(0/* SHIWORD(mouseByteIndex2_12EF8C_12EF7C)*/);
  }
  dword_12EFA8_12EF98 = dword_12EF88_12EF78;
  dword_12EFA4_12EF94 = (int)&tempScreenBuffer_A0000[mouseByteIndex2_12EF8C_12EF7C];
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    for ( word_12EFD4_12EFC4 = 0; ; ++word_12EFD4_12EFC4 )
    {
      result = (int)unk_12EF84_12EF74 >> 16;
      if ( (unsigned __int16)word_12EFD4_12EFC4 >= (int)unk_12EF84_12EF74 >> 16 )
        break;
      for ( word_12EFD2_12EFC2 = 0; (unsigned __int16)word_12EFD2_12EFC2 < *(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16; ++word_12EFD2_12EFC2 )
      {
        v1 = (_BYTE *)dword_12EFA8_12EF98++;
        v2 = (_BYTE *)dword_12EFA4_12EF94++;
        *v2 = *v1;
      }
      dword_12EFA4_12EF94 += scrWidth_12EFF0_12EFE0 - (*(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16);
    }
  }
  else
  {
    for ( word_12EFD4_12EFC4 = 0; ; ++word_12EFD4_12EFC4 )
    {
      result = (int)unk_12EF84_12EF74 >> 16;
      if ( (unsigned __int16)word_12EFD4_12EFC4 >= (int)unk_12EF84_12EF74 >> 16 )
        break;
      for ( word_12EFD2_12EFC2 = 0; (unsigned __int16)word_12EFD2_12EFC2 < *(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16; ++word_12EFD2_12EFC2 )
      {
        v3 = (_BYTE *)dword_12EFA8_12EF98++;
        v4 = (_BYTE *)dword_12EFA4_12EF94++;
        *v4 = *v3;
        if ( dword_12EFA4_12EF94 >= 0xB0000)
        {
          sub_61A1C_61F2C(++word_12EFD0);
          dword_12EFA4_12EF94 -= 0x10000;
        }
      }
      dword_12EFA4_12EF94 += scrWidth_12EFF0_12EFE0 - (*(int *)((char *)&mouseXY_12EF80_12EF70 + 2) >> 16);
      if ( dword_12EFA4_12EF94 >= 0xB0000 )
      {
        sub_61A1C_61F2C(++word_12EFD0);
        dword_12EFA4_12EF94 -= 0x10000;
      }
    }
  }
}
// 10000: using guessed type void sub_10000();
// 12EF80: using guessed type int mouseXY_12EF80_12EF70;
// 12EF88: using guessed type int dword_12EF88_12EF78;
// 12EF8C: using guessed type int mouseByteIndex2_12EF8C_12EF7C;
// 12EFA4: using guessed type int dword_12EFA4_12EF94;
// 12EFA8: using guessed type int dword_12EFA8_12EF98;
// 12EFCC: using guessed type int dword_12EFCC_12EFBC;
// 12EFD0: using guessed type __int16 word_12EFD0;
// 12EFD2: using guessed type __int16 word_12EFD2_12EFC2;
// 12EFD4: using guessed type __int16 word_12EFD4_12EFC4;
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0005BD40) --------------------------------------------------------
int sub_5BD40()//22CD40_
{
  int result; // eax
  _BYTE *v1; // eax
  _BYTE *v2; // edx

  dword_12EFA8_12EF98 = dword_12EF98_12EF88;
  dword_12EFA4_12EF94 = dword_12EF9C_12EF8C + (int)begWscreen_2ECFF4_2ECFE4;
  for ( word_12EFD4_12EFC4 = 0; ; ++word_12EFD4_12EFC4 )
  {
    result = *(int*)&dword_12EF94_12EF84 >> 16;
    if ( (unsigned __int16)word_12EFD4_12EFC4 >= *(int*)&dword_12EF94_12EF84 >> 16 )
      break;
    for ( word_12EFD2_12EFC2 = 0; (unsigned __int16)word_12EFD2_12EFC2 < *(int *)((char *)&mouseXY2_12EF90_12EF80 + 2) >> 16; ++word_12EFD2_12EFC2 )
    {
      v1 = (_BYTE *)dword_12EFA8_12EF98++;
      v2 = (_BYTE *)dword_12EFA4_12EF94++;
      *v2 = *v1;
    }
    dword_12EFA4_12EF94 += scrWidth_12EFF0_12EFE0 - (*(int *)((char *)&mouseXY2_12EF90_12EF80 + 2) >> 16);
  }
  return result;
}
// 12EF90: using guessed type int mouseXY2_12EF90_12EF80;
// 12EF94: using guessed type int dword_12EF94_12EF84;
// 12EF98: using guessed type int dword_12EF98_12EF88;
// 12EF9C: using guessed type int dword_12EF9C_12EF8C;
// 12EFA4: using guessed type int dword_12EFA4_12EF94;
// 12EFA8: using guessed type int dword_12EFA8_12EF98;
// 12EFD2: using guessed type __int16 word_12EFD2_12EFC2;
// 12EFD4: using guessed type __int16 word_12EFD4_12EFC4;
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;

void sub_5BDF8_5C308()
{
  if ( dword_9AD98 )
  {
    dword_9AD88 = 1;
    sub_5B95C_5BE6C();
  }
}

void sub_5BE50_5C360()
{
  dword_9AD88 = 0;
}

//----- (0005C05C) --------------------------------------------------------
void sub_5C05C_5C56C(TypeTab* a1x)//22D05C_
{
  //int result; // eax
  //unsigned int i; // [esp+0h] [ebp-10h]
  //int v3; // [esp+4h] [ebp-Ch]
  //__int16 v4; // [esp+8h] [ebp-8h]
  //int v5; // [esp+Ch] [ebp-4h]

  dword_9AD88 = 1;
  uint8_t* tempPdwBuffer = begWscreen_2ECFF4_2ECFE4;
  begWscreen_2ECFF4_2ECFE4 = dword_12EFC8_12EFB8;
  if ( a1x )
  {
    word_12EFC4_12EFB4 = a1x->dim.x;
    word_12EFC6_12EFB6 = a1x->dim.y;
  }
  else
  {
    word_12EFC4_12EFB4 = 0;
    word_12EFC6_12EFB6 = 0;
  }
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    word_12EFC4_12EFB4 >>= 1;
    word_12EFC6_12EFB6 >>= 1;
  }
  dword_12F014 = viewportBegY_12F018_12F008;
  dword_12F00C = dword_12F010;
  dword_12F004 = viewportBegX_12F008_12EFF8;
  dword_12F01C = dword_12F024_12F014;
  dword_12EFFC = dword_12F000_12EFF0;
  dword_12F020 = dword_12F028_12F018;
  viewportBegY_12F018_12F008 = 0;
  dword_12F010 = 64;
  viewportBegX_12F008_12EFF8 = 0;
  dword_12F024_12F014 = 64;
  dword_12F000_12EFF0 = 64;
  dword_12F028_12F018 = 64;
  __int16 temp9ADFC = word_9ADFC;
  word_9ADFC = 0;
  int temp12EFF0 = scrWidth_12EFF0_12EFE0;
  scrWidth_12EFF0_12EFE0 = 64;
  for ( int i = 0; i < 0x1000; i++ )
    dword_12EFC8_12EFB8[i] = 0xfe;
  if ( a1x )
    DrawBitmap_60CE0_611F0(0, 0, a1x);
  scrWidth_12EFF0_12EFE0 = temp12EFF0;
  word_9ADFC = temp9ADFC;
  viewportBegY_12F018_12F008 = dword_12F014;
  dword_12F010 = dword_12F00C;
  viewportBegX_12F008_12EFF8 = dword_12F004;
  dword_12F024_12F014 = dword_12F01C;
  dword_12F000_12EFF0 = dword_12EFFC;
  dword_12F028_12F018 = dword_12F020;
  //result = v5;
  begWscreen_2ECFF4_2ECFE4 = tempPdwBuffer;
  dword_9AD88 = 0;
}
// 9AD88: using guessed type int dword_9AD88;
// 9ADFC: using guessed type __int16 word_9ADFC;
// 12EFC4: using guessed type __int16 word_12EFC4_12EFB4;
// 12EFC6: using guessed type __int16 word_12EFC6_12EFB6;
// 12EFC8: using guessed type int dword_12EFC8_12EFB8;
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12EFFC: using guessed type int dword_12EFFC;
// 12F000: using guessed type int dword_12F000_12EFF0;
// 12F004: using guessed type int dword_12F004;
// 12F008: using guessed type int viewportBegX_12F008_12EFF8;
// 12F00C: using guessed type int dword_12F00C;
// 12F010: using guessed type int dword_12F010;
// 12F014: using guessed type int dword_12F014;
// 12F018: using guessed type int viewportBegY_12F018_12F008;
// 12F01C: using guessed type int dword_12F01C;
// 12F020: using guessed type int dword_12F020;
// 12F024: using guessed type int dword_12F024_12F014;
// 12F028: using guessed type int dword_12F028_12F018;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0005C214) --------------------------------------------------------
int sub_5C214_5C724()
{
  __int16 v1[14]; // [esp+0h] [ebp-54h] BYREF
  __int16 v2[4]; // [esp+1Ch] [ebp-38h] BYREF
  __int16 v3; // [esp+24h] [ebp-30h]
  int (*v4)(); // [esp+28h] [ebp-2Ch]
  __int16 v5[6]; // [esp+38h] [ebp-1Ch] BYREF
  int (*v6)(); // [esp+44h] [ebp-10h]
  int v7; // [esp+48h] [ebp-Ch]
  //int i; // [esp+4Ch] [ebp-8h]

  FixPerifery((char*)"mouseRes");

  dword_9AD98 = 0;
  segread((uint32)v5);
  v2[0] = 0;
  int386(51, (uint32)v2, (uint32)v1);//Mouse Reset/Get Mouse Installed Flag
  //fix
  v1[0] = -1;
  //fix
  if ( v1[0] != -1 )
    return 0;
  v2[0] = 12;
  v3 = 127;
  //fix LOWORD(v7) = __CS__;
  v6 = (int (*)())sub_5BE6C;
  v4 = (int (*)())sub_5BE6C;
  //fix v5[0] = __CS__;
  FixPerifery((char*)"mouseSubr");
  int386x(51, (uint32)v2, (uint32)v1, (uint32)v5);//Set Mouse User Defined Subroutine and Input Mask
  ResizeScr_5C468_5C978();
  if ( !dword_12EFC8_12EFB8 )
    dword_12EFC8_12EFB8 = (uint8_t*)malloc_42540_42880(4096);
  if ( !dword_12EF98_12EF88 )
    dword_12EF98_12EF88 = (int)malloc_42540_42880(4096);
  if ( !dword_12EF88_12EF78 )
    dword_12EF88_12EF78 = (int)malloc_42540_42880(4096);
  if ( !dword_12EFC8_12EFB8 || !dword_12EF98_12EF88 || !dword_12EF88_12EF78 )
    return 0;
  word_12EFC4_12EFB4 = 0;
  word_12EFC6_12EFB6 = 0;
  LOWORD(dword_12EFCC_12EFBC) = 64;
  for ( int i = 0; i < 4096; i++ )
      dword_12EFC8_12EFB8[i] = 254;
  if ( dword_12EFB4 )
    sub_5C05C_5C56C(dword_12EFB4);
  v2[0] = 2;
  FixPerifery((char*)"mouseHide");
  int386(51, (uint32)v2, (uint32)v1);//Hide Mouse Cursor
  if ( (typeResolution_12F02E_12F01E & 8) != 0 )
  {
    v2[0] = 15;
    v3 = 1;
    LOWORD(v4) = 1;
    FixPerifery((char*)"mouseSetPix");
    int386(51, (uint32)v2, (uint32)v1);//Set Mouse Mickey Pixel Ratio
  }
  dword_9AD98 = 1;
  return 1;
}
// 5BE6C: using guessed type int sub_5BE6C();
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 636BC: using guessed type _DWORD segread(_DWORD);
// 636E6: using guessed type _DWORD int386x(_DWORD, _DWORD, _DWORD, _DWORD);
// 9AD98: using guessed type int dword_9AD98;
// 12EF88: using guessed type int dword_12EF88_12EF78;
// 12EF98: using guessed type int dword_12EF98_12EF88;
// 12EFB4: using guessed type int dword_12EFB4;
// 12EFC4: using guessed type __int16 word_12EFC4_12EFB4;
// 12EFC6: using guessed type __int16 word_12EFC6_12EFB6;
// 12EFC8: using guessed type int dword_12EFC8_12EFB8;
// 12EFCC: using guessed type int dword_12EFCC_12EFBC;
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0005C468) --------------------------------------------------------
void ResizeScr_5C468_5C978()//22D468_
{
    FixPerifery((char*)"chRes", typeResolution_12F02E_12F01E);
    if (typeResolution_12F02E_12F01E == 8)
    {
        /*v2[0] = 7;
        v3 = 0;
        v4 = 5120;
        int386(51, (uint32)v2, (uint32)v1);
        v2[0] = 8;
        v3 = 0;
        v4 = 3840;*/
        //VGA_Resize(5120, 3840);//fix
    }
    if (typeResolution_12F02E_12F01E == 2)
    {
        /*v2[0] = 7;
        v3 = 0;
        v4 = 640;
        int386(51, (uint32)v2, (uint32)v1);
        v2[0] = 8;
        v3 = 0;
        v4 = 480;*/
        VGA_Resize(640, 480);
    }
    if (typeResolution_12F02E_12F01E == 4)
    {
        /*v2[0] = 7;
        v3 = 0;
        v4 = 640;
        int386(51, (uint32)v2, (uint32)v1);
        v2[0] = 8;
        v3 = 0;
        v4 = 400;*/
        VGA_Resize(640, 400);
    }
    if (typeResolution_12F02E_12F01E == 1)
    {
        /*v2[0] = 7;
        v3 = 0;
        v4 = 640;
        int386(51, (uint32)v2, (uint32)v1);
        v2[0] = 8;
        v3 = 0;
        v4 = 400;*/
        VGA_Resize(320, 200);
    }
    VGA_SetColors(8);
    /*
  int result; // eax
  char v1[28]; // [esp+0h] [ebp-38h] BYREF
  __int16 v2[4]; // [esp+1Ch] [ebp-1Ch] BYREF
  __int16 v3; // [esp+24h] [ebp-14h]
  __int16 v4; // [esp+28h] [ebp-10h]

  if ( typeResolution_12F02E_12F01E == 8 )
  {
    v2[0] = 7;
    v3 = 0;
    v4 = 5120;
    int386(51, (uint32)v2, (uint32)v1);
    v2[0] = 8;
    v3 = 0;
    v4 = 3840;
    result = int386(51, (uint32)v2, (uint32)v1);
  }
  if ( typeResolution_12F02E_12F01E == 2 )
  {
    v2[0] = 7;
    v3 = 0;
    v4 = 640;
    int386(51, (uint32)v2, (uint32)v1);
    v2[0] = 8;
    v3 = 0;
    v4 = 480;
    result = int386(51, (uint32)v2, (uint32)v1);
  }
  if ( typeResolution_12F02E_12F01E == 4 )
  {
    v2[0] = 7;
    v3 = 0;
    v4 = 640;
    int386(51, (uint32)v2, (uint32)v1);
    v2[0] = 8;
    v3 = 0;
    v4 = 400;
    result = int386(51, (uint32)v2, (uint32)v1);
  }
  if ( typeResolution_12F02E_12F01E == 1 )
  {
    v2[0] = 7;
    v3 = 0;
    v4 = 640;
    int386(51, (uint32)v2, (uint32)v1);
    v2[0] = 8;
    v3 = 0;
    v4 = 400;
    return int386(51, (uint32)v2, (uint32)v1);
  }
  */
}
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 12F02E: using guessed type __int16 typeResolution_12F02E_12F01E;

//----- (0005C76B) --------------------------------------------------------
__int16 sub_5C76B()
{
  __int16 result; // ax

  sub_5D1A0(dword_9ADC0, (int)&word_9ADA8, 2u);
  sub_5D1A0(dword_9ADC0, (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, 8u);
  while ( 1 )
  {
    result = word_9ADA8;
    if ( !word_9ADA8 )
      break;
    --word_9ADA8;
    sub_5D1A0(dword_9ADC0, (int)&dword_9ADA4, 4u);
    sub_5D1A0(dword_9ADC0, (int)&word_9AD9C, 2u);
    switch ( word_9AD9C )
    {
      case 7:
        sub_5C969();
        break;
      case 12:
        sub_5CA40();
        break;
      case 4:
        sub_5C8CD();
        break;
      case 15:
        sub_5CAE7();
        break;
      case 16:
        sub_5C891();
        break;
      default:
        sub_5C8AF();
        break;
    }
  }
  return result;
}
// 9AD9C: using guessed type __int16 word_9AD9C;
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADA8: using guessed type __int16 word_9ADA8;
// 9ADC0: using guessed type int dword_9ADC0;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;

//----- (0005C82E) --------------------------------------------------------
__int16 sub_5C82E()
{
  __int16 result; // ax

  sub_5D1A0(dword_9ADC0, (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, dword_9ADA4 - 6);
  dword_9AD9E = *(_DWORD *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  result = *(_WORD *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 4);
  word_9ADA2 = result;
  return result;
}
// 9AD9E: using guessed type int dword_9AD9E;
// 9ADA2: using guessed type __int16 word_9ADA2;
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;

//----- (0005C891) --------------------------------------------------------
int sub_5C891()
{
  return sub_5D1A0(dword_9ADC0, (int)begWscreen_2ECFF4_2ECFE4, dword_9ADA4 - 6);
}
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (0005C8AF) --------------------------------------------------------
int sub_5C8AF()
{
  return sub_5D1A0(dword_9ADC0, (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, dword_9ADA4 - 6);
}
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;

//----- (0005C8CD) --------------------------------------------------------
int sub_5C8CD()
{
  int result; // eax

  result = sub_5D1A0(dword_9ADC0, (int)begPalData_AE424_AE414_26C424_26C414, dword_9ADA4 - 6);
  word_9ADFA = 1;
  return result;
}
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// 9ADFA: using guessed type __int16 word_9ADFA;
// AE424: using guessed type int begPalData_AE424_AE414_26C424_26C414;

//----- (0005C8F4) --------------------------------------------------------
void sub_5C8F4()
{
  __int16 v0; // ax
  char *v1; // edi
  _BYTE *v2; // esi
  int v3; // ecx
  char *v4; // edi
  char v5; // dl
  char v6; // al
  char *v7; // edi
  _BYTE *v8; // esi
  char v9; // al
  char v10; // al
  __int16 v11; // [esp-2h] [ebp-6h]

  word_9ADFA = 0;
  if ( dword_9ADBC == 1 )
  {
    v0 = *(_WORD *)begPalData_AE424_AE414_26C424_26C414;
    v1 = (char *)(begPalData_AE424_AE414_26C424_26C414 + 2);
    v2 = (_BYTE *)begPalMem_AE418_AE408_26C418_26C408;
    do
    {
      v11 = v0;
      v3 = (unsigned __int8)*v1;
      v4 = v1 + 1;
      v2 += v3 + v3 + v3;
      v5 = *v4;
      v1 = v4 + 1;
      do
      {
        v6 = *v1;
        v7 = v1 + 1;
        *v2 = v6;
        v8 = v2 + 1;
        v9 = *v7++;
        *v8++ = v9;
        v10 = *v7;
        v1 = v7 + 1;
        *v8 = v10;
        v2 = v8 + 1;
        --v5;
      }
      while ( v5 );
      v0 = v11 - 1;
    }
    while ( v11 != 1 );
    SetPalette_319A0_319E0(begPalMem_AE418_AE408_26C418_26C408);
  }
}
// 9ADBC: using guessed type int dword_9ADBC;
// 9ADFA: using guessed type __int16 word_9ADFA;
// AE418: using guessed type int begPalMem_AE418_AE408_26C418_26C408;
// AE424: using guessed type int begPalData_AE424_AE414_26C424_26C414;

//----- (0005C969) --------------------------------------------------------
__int16 sub_5C969()
{
  _WORD *v0; // esi
  __int16 *v1; // edi
  __int16 result; // ax
  unsigned __int8 v3; // bl
  _BYTE *v4; // edi
  char v5; // dl
  __int16 v6; // bx
  __int16 v7; // bx
  _WORD *v8; // [esp+0h] [ebp-10h]
  __int16 i; // [esp+6h] [ebp-Ah]
  __int16 v10; // [esp+8h] [ebp-8h]
  int v11; // [esp+Ch] [ebp-4h]

  v11 = (unsigned __int16)word_9ADA0;
  sub_5D1A0(dword_9ADC0, (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, dword_9ADA4 - 6);
  v0 = (_WORD *)begWscreen_2ECFF4_2ECFE4;
  v10 = *(_WORD *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  v1 = (__int16 *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 2);
  do
  {
    while ( 1 )
    {
      result = *v1++;
      v8 = v0;
      if ( result >= 0 )
        goto LABEL_6;
      if ( (result & 0x4000) == 0 )
        break;
      v0 = (_WORD *)((char *)v0 + v11 * -result);
    }
    *((_BYTE *)v0 + v11 - 1) = result;
LABEL_6:
    for ( i = result; i; --i )
    {
      while ( 1 )
      {
        v3 = *(_BYTE *)v1;
        v4 = (uint8*)((char *)v1 + 1);
        v0 = (_WORD *)((char *)v0 + v3);
        v5 = *v4;
        v1 = (__int16 *)(v4 + 1);
        if ( v5 > 0 )
          break;
        v6 = *v1++;
        do
        {
          *v0++ = v6;
          ++v5;
        }
        while ( v5 );
        if ( !--i )
          goto LABEL_14;
      }
      do
      {
        v7 = *v1++;
        *v0++ = v7;
        --v5;
      }
      while ( v5 );
    }
LABEL_14:
    v0 = (_WORD *)((char *)v8 + v11);
    --v10;
  }
  while ( v10 );
  return result;
}
// 9ADA0: using guessed type __int16 word_9ADA0;
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (0005CA40) --------------------------------------------------------
int sub_5CA40()
{
  int v0; // eax
  char *v1; // esi
  char *v2; // edi
  __int16 v3; // ax
  int v4; // eax
  _BYTE *v5; // esi
  char *v6; // edi
  unsigned __int8 v7; // al
  char *v8; // esi
  unsigned int v9; // ecx
  char v10; // al
  int result; // eax
  int v12; // [esp+0h] [ebp-10h]
  __int16 i; // [esp+6h] [ebp-Ah]
  __int16 v14; // [esp+8h] [ebp-8h]
  int v15; // [esp+Ch] [ebp-4h]

  v15 = (unsigned __int16)word_9ADA0;
  v0 = sub_5D1A0(dword_9ADC0, (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, dword_9ADA4 - 6);
  LOWORD(v0) = *(_WORD *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  v12 = v15 * v0 + (int)begWscreen_2ECFF4_2ECFE4;
  v1 = (char *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 4);
  v14 = *(_WORD *)(begBscreen_AE3FC_AE3EC_26C3FC_26C3EC + 2);
  do
  {
    v2 = (char *)v12;
    v3 = (unsigned __int8)*v1++;
    for ( i = v3; i; --i )
    {
      v4 = (unsigned __int8)*v1;
      v5 = (uint8*)(v1 + 1);
      v6 = &v2[v4];
      v7 = *v5;
      v8 = (char*)(v5 + 1);
      if ( (v7 & 0x80u) != 0 )
      {
        v9 = (unsigned __int8)-v7;
        v10 = *v8;
        v1 = v8 + 1;
        memset(v6, v10, v9);
        v2 = &v6[v9];
      }
      else
      {
        qmemcpy(v6, v8, v7);
        v1 = &v8[v7];
        v2 = &v6[v7];
      }
    }
    result = (unsigned __int16)word_9ADA0;
    v12 += (unsigned __int16)word_9ADA0;
    --v14;
  }
  while ( v14 );
  return result;
}
// 9ADA0: using guessed type __int16 word_9ADA0;
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (0005CAE7) --------------------------------------------------------
char sub_5CAE7()
{
  _BYTE *v0; // esi
  char *v1; // edi
  __int16 v2; // bx
  __int16 v3; // cx
  char v4; // dl
  __int16 v5; // ax
  char v6; // dh
  char v7; // dh
  __int16 v9; // [esp+0h] [ebp-4h]
  __int16 v10; // [esp+2h] [ebp-2h]

  v10 = word_9ADA0;
  v9 = word_9ADA2;
  sub_5D1A0(dword_9ADC0, (int)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC, dword_9ADA4 - 6);
  v0 = (_BYTE *)begWscreen_2ECFF4_2ECFE4;
  v1 = (char *)begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
  v2 = v9;
  do
  {
    ++v1;
    v3 = v10;
    do
    {
      v4 = *v1++;
      if ( v4 > 0 )
      {
        LOBYTE(v5) = v4;
        v3 -= (unsigned __int8)v4;
      }
      else
      {
        HIBYTE(v5) = -1;
        LOBYTE(v5) = v4;
        v3 += v5;
      }
      if ( v4 > 0 )
      {
        v7 = *v1++;
        do
        {
          *v0++ = v7;
          --v4;
        }
        while ( v4 );
      }
      else
      {
        do
        {
          v6 = *v1++;
          *v0++ = v6;
          ++v4;
        }
        while ( v4 );
      }
    }
    while ( v3 );
    --v2;
  }
  while ( v2 );
  return v5;
}
// 9ADA0: using guessed type __int16 word_9ADA0;
// 9ADA2: using guessed type __int16 word_9ADA2;
// 9ADA4: using guessed type int dword_9ADA4;
// 9ADC0: using guessed type int dword_9ADC0;
// AE3FC: using guessed type int begBscreen_AE3FC_AE3EC_26C3FC_26C3EC;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (0005CB73) --------------------------------------------------------
void sub_5CB73(int a1, __int16 a2)
{
  __int16 v2; // cx

  FixPerifery();

  if ( dword_9ADC4 )
  {
    do
    {
      do
      {
        //fix __asm { int     21h; DOS - GET CURRENT TIME }
        v2 = 100 * HIBYTE(a2) + (unsigned __int8)a2;
        a2 = v2 - word_9ADB4;
      }
      while ( v2 == word_9ADB4 );
      if ( a2 <= 0 )
        a2 += 6000;
    }
    while ( (unsigned __int16)a2 < dword_9ADC4 );
    word_9ADB4 = v2;
  }
}
// 9ADB4: using guessed type __int16 word_9ADB4;
// 9ADC4: using guessed type int dword_9ADC4;

void fixWaitForBeam_5CC54_5D164() {
    FixPerifery((char*)"VSYNC");
    std::this_thread::sleep_for(std::chrono::milliseconds(20));
    VGA_Blit(nullptr);
}

//----- (0005CC54) --------------------------------------------------------
void WaitForBeam_5CC54_5D164()
{
    FixPerifery((char*)"VSYNC");
    std::this_thread::sleep_for(std::chrono::milliseconds(20));
    VGA_Blit(nullptr);
    //VGA_Blit(begWscreen_2ECFF4_2ECFE4);
  //fix !!! (VSYNC)
    //BLIT !!!!!
    /*
  unsigned __int8 result; // al

  do
    result = __inbyte(0x3DAu);
  while ( (result & 8) == 0 );*/
}

uint8_t sub_5CC70_5D180(TColor* colors, uint8_t colR, uint8_t colG, uint8_t colB)//22DC70_
{
    /*
    //char __cdecl sub_5CC70(unsigned __int8* a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4)
    {
        unsigned __int8 v4; // al
        __int16 v5; // cx
        unsigned __int8 v6; // al
        __int16 v7; // bx
        unsigned __int16 v9; // [esp+0h] [ebp-20h]
        __int16 i; // [esp+10h] [ebp-10h]
        __int16 v12; // [esp+14h] [ebp-Ch]
        char v13 = 0; // [esp+18h] [ebp-8h]

        int16_t bestColor = 9999;
        uint8_t bestColorIndex = 0;

        if ((typeResolution_12F02E_12F01E & 6) != 0)
            v9 = 16;
        else
            v9 = 256;
        i = 0;
        v12 = 9999;
        while (i < (int)v9)
        {
            v4 = ((uint8_t*)colors)[1];
            v5 = (colR - *((uint8_t*)colors)) * (colR - *((uint8_t*)colors)) + (colG - v4) * (colG - v4);
            v6 = ((uint8_t*)colors)[2];
            v7 = colB - v6;
            if ((__int16)(v7 * v7 + v5) < v12)
            {
                v12 = v7 * (colB - v6) + v5;
                v13 = i;
            }

            int16_t diffCol = ((colR - colors[0].red) * (colR - colors[0].red) + (colG - colors[0].green) * (colG - colors[0].green) + (colB - colors[0].blue) * (colB - colors[0].blue));
            if (diffCol < bestColor)
            {
                bestColor = diffCol;
                bestColorIndex = i;
            }
            if (bestColorIndex != (uint8_t)v13)
                printf("error");

            ++i;
            colors++;
        }
        return v13;
    }
    */
  int colorsCount;
  if ( (typeResolution_12F02E_12F01E & 6) != 0 )
      colorsCount = 16;
  else
      colorsCount = 256;
  int16_t bestColor = 9999;
  uint8_t bestColorIndex = 0;
  for (int i = 0 ; i < colorsCount; i++ )
  {
    int16_t diffCol = ((colR - colors[i].red) * (colR - colors[i].red) + (colG - colors[i].green) * (colG - colors[i].green) + (colB - colors[i].blue) * (colB - colors[i].blue));
    if (diffCol < bestColor)
    {
        bestColor = diffCol;
        bestColorIndex = i;
    }
  }
  return bestColorIndex;
}

//----- (0005CD70) --------------------------------------------------------
int sub_5CD70_5D280()
{
  char v1[28]; // [esp+0h] [ebp-38h] BYREF
  int v2[7]; // [esp+1Ch] [ebp-1Ch] BYREF

  FixPerifery();

  v2[0] = (unsigned __int16)word_12F02C;
  return int386(16, (uint32)v2, (uint32)v1);
}
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 12F02C: using guessed type __int16 word_12F02C;
// 5CD70: using guessed type int var_1C[7];
// 5CD70: using guessed type char var_38[28];

//----- (0005CDA0) --------------------------------------------------------
void Blit_5CDA0_5D2B0()
{
    FixPerifery((char*)"blit320");
    if (!byte_9AD96)
        sub_5BDF8_5C308();
    VGA_Blit(begWscreen_2ECFF4_2ECFE4);
    if (!byte_9AD96)
        sub_5BE50_5C360();

    std::this_thread::sleep_for(std::chrono::milliseconds(100));//fix it

    //tempScreenBuffer_A0000 = begWscreen_2ECFF4_2ECFE4;
    /*
  if ( !byte_9AD96 )
    sub_5BDF8_5C308();
  qmemcpy(&screenBuffer_A0000, (const void *)begWscreen_2ECFF4_2ECFE4, 0xFA00u);
  if ( !byte_9AD96 )
    sub_5BE50_5C360();
    */
}
// 9AD96: using guessed type char byte_9AD96;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (0005CEF0) --------------------------------------------------------
int sub_5CEF0_5D400(unsigned __int16 a1)
{
  if ( !byte_939CC )
    return 1;
  sprintf(pathStrArray_258E00[PS25datamusic00dat].path, (char*)"data/music%d-%d.dat", a1, (unsigned __int8)byte_CBFEE);
  sprintf(pathStrArray_258E00[PS25datamusic00tab].path, "data/music%d-%d.tab", a1, (unsigned __int8)byte_CBFEE);
  if ( sub_634E0_639F0(&pathStrArray_258E00[PS25datamusic00dat]) != 1 )
    return 1;
  if ( sub_634E0_639F0(&pathStrArray_258E00[PS25datamusic00tab]) != 1 )
  {
    sub_634A0_639B0(&pathStrArray_258E00[PS25datamusic00dat]);
    return 1;
  }
  sub_5CFA4();
  return 0;
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 939CC: using guessed type char byte_939CC;
// CBFEE: using guessed type char byte_CBFEE;

//----- (0005CFA4) --------------------------------------------------------
unsigned int sub_5CFA4()
{
  unsigned int result; // eax
  unsigned int v1; // [esp+0h] [ebp-4h]

  if ( dword_CBF60 && dword_CBF68 )
  {
    v1 = dword_CBF60 + 32;
    for ( word_939D6 = 0; ; ++word_939D6 )
    {
      result = v1;
      if ( v1 >= dword_CBF64 )
        break;
      *(_DWORD *)(v1 + 18) += dword_CBF68;
      v1 += 32;
    }
  }
  return result;
}
// 939D6: using guessed type __int16 word_939D6;
// CBF60: using guessed type int dword_CBF60;
// CBF64: using guessed type int dword_CBF64;
// CBF68: using guessed type int dword_CBF68;

//----- (0005D010) --------------------------------------------------------
void sub_5D010_5D520()
{
  unsigned __int8 i; // [esp+0h] [ebp-4h]

  if ( byte_939E4 )
  {
    for ( i = 0; i < 0x20u; i++ )
    {
      while ( !sub_651F8(dword_CC140, i) )
        sub_65965(dword_CC140, i);
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// CC140: using guessed type int dword_CC140;

//----- (0005D070) --------------------------------------------------------
int sub_5D070_5D580(unsigned __int8 a1)
{
  if ( !byte_939E4 )
    return 1;
  sprintf(pathStrArray_258E00[PS25datasnds00dat].path, (char*)"data/snds%d-%d.dat", a1, (unsigned __int8)byte_939EC);
  sprintf(pathStrArray_258E00[PS25datasnds00tab].path, (char*)"data/snds%d-%d.tab", a1, (unsigned __int8)byte_939EC);
  if ( sub_634E0_639F0(&pathStrArray_258E00[PS25datasnds00dat]) != 1 )
    return 1;
  if ( sub_634E0_639F0(&pathStrArray_258E00[PS25datasnds00tab]) != 1 )
  {
    sub_634A0_639B0(&pathStrArray_258E00[PS25datasnds00dat]);
    return 1;
  }
  sub_5D138();
  return 0;
}
// 60CAC: using guessed type _DWORD sprintf(_DWORD, _DWORD, ...);
// 939E4: using guessed type char byte_939E4;
// 939EC: using guessed type char byte_939EC;

//----- (0005D138) --------------------------------------------------------
unsigned int sub_5D138()
{
  unsigned int result; // eax
  unsigned int v1; // [esp+0h] [ebp-4h]

  if ( dword_CC154 && dword_CC130 )
  {
    v1 = dword_CC154 + 32;
    for ( word_CC1C6 = 0; ; ++word_CC1C6 )
    {
      result = v1;
      if ( v1 >= dword_CC1C0 )
        break;
      *(_DWORD *)(v1 + 18) += dword_CC130;
      v1 += 32;
    }
  }
  return result;
}
// CC130: using guessed type int dword_CC130;
// CC154: using guessed type int dword_CC154;
// CC1C0: using guessed type int dword_CC1C0;
// CC1C6: using guessed type __int16 word_CC1C6;

//----- (0005D1A0) --------------------------------------------------------
int sub_5D1A0(int a1, int a2, unsigned int a3)
{
  _BYTE *v3; // eax
  _BYTE *v4; // edx
  unsigned int i; // [esp+4h] [ebp-4h]

  if ( !dword_9AF08 )
    return DataFileIO::Read((FILE*)a1, (uint8_t*)a2, a3);
  for ( i = 0; i < a3 && dword_9AF14 + i < dword_9AF10; ++i )
  {
    v3 = (_BYTE *)dword_9AF0C++;
    v4 = (_BYTE *)a2++;
    *v4 = *v3;
  }
  dword_9AF14 += a3;
  return i;
}
// 9AF08: using guessed type int dword_9AF08;
// 9AF0C: using guessed type int dword_9AF0C;
// 9AF10: using guessed type int dword_9AF10;
// 9AF14: using guessed type int dword_9AF14;

//----- (0005D230) --------------------------------------------------------
int sub_5D230(int a1, int a2, int a3)
{
  int result; // eax

  result = read(a1, (void*)dword_9AF08, a3);
  dword_9AF0C = dword_9AF08;
  dword_9AF10 = result;
  dword_9AF14 = 0;
  return result;
}
// 6692C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 9AF08: using guessed type int dword_9AF08;
// 9AF0C: using guessed type int dword_9AF0C;
// 9AF10: using guessed type int dword_9AF10;
// 9AF14: using guessed type int dword_9AF14;

//----- (0005D290) --------------------------------------------------------
void sub_5D290_5D7A0(__int16 a1)
{
  int v1; // edx
  char *v2; // eax
  char *v3; // eax
  int v4; // [esp+64h] [ebp-8h]
  int v5; // [esp+64h] [ebp-8h]

  //fix
  v4 = 0;
  //fix

  if ( byte_939CC && byte_939CD && a1 <= (int)(unsigned __int16)word_939D6 && (unsigned __int16)word_939D2 != a1 )
  {
    if ( word_939D2 )
    {
      if ( !sub_5D7F0(dword_CBFD8) )
        sub_5F420(dword_CBFD8);
      sub_5F355(dword_CBFD8);
      sub_6091D(dword_CBFDC);
      if ( byte_9AF9C )
        sub_6091D(dword_12F074);
      word_939D2 = 0;
    }
    v1 = *(_DWORD *)(dword_CBF60 + 32 * a1 + 18);
    //fix word_12F034 = __DS__;
    dword_12F030 = v1;
    word_12F03C = 0;
    dword_12F038 = 0;
    //fix
    /*
    v4 = sub_5EE22(
           (unsigned int)&dword_12F030,
           (unsigned __int16)__DS__,
           (int)&unk_9AF18,
           __DS__,
           (unsigned int)&dword_CBFD8);*/
    if ( v4 )
    {
      v2 = sub_6378C(v4);
      printf("\nError : %s", v2);
      sub_6080C(dword_CBFDC, 1);
      sub_60335();
      byte_939CC = 0;
    }
    else
    {
      v5 = sub_5F398(dword_CBFD8);
      if ( v5 )
      {
        v3 = sub_6378C(v5);
        printf("\nError : %s", v3);
        sub_6080C(dword_CBFDC, 1);
        sub_60335();
      }
      else
      {
        sub_5EDD6(0);
        word_939D0 = 100;
        word_939D2 = a1;
      }
    }
  }
}
// 5CC03: using guessed type _DWORD printf(const char *, ...);
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// 939D0: using guessed type __int16 word_939D0;
// 939D2: using guessed type __int16 word_939D2;
// 939D6: using guessed type __int16 word_939D6;
// 9AF9C: using guessed type char byte_9AF9C;
// CBF60: using guessed type int dword_CBF60;
// CBFD8: using guessed type int dword_CBFD8;
// CBFDC: using guessed type int dword_CBFDC;
// 12F030: using guessed type int dword_12F030;
// 12F034: using guessed type __int16 word_12F034;
// 12F038: using guessed type int dword_12F038;
// 12F03C: using guessed type __int16 word_12F03C;
// 12F074: using guessed type int dword_12F074;

//----- (0005D460) --------------------------------------------------------
void sub_5D460(__int16 a1, __int16 a2, __int16 a3)
{
  int v3; // edx
  __int16 *v4; // [esp+0h] [ebp-10h]
  char v5; // [esp+4h] [ebp-Ch]
  char v6; // [esp+8h] [ebp-8h]
  unsigned __int8 i; // [esp+Ch] [ebp-4h]
  unsigned __int8 j; // [esp+Ch] [ebp-4h]

  if ( byte_939E4 && byte_939E5 && a2 <= (int)(unsigned __int16)word_CC1C6 )
  {
    v5 = 0;
    v4 = word_CBFF0;
    for ( i = 0; i < 0x20u; ++i )
    {
      if ( *v4 == a1 && v4[1] == a2 && !sub_651F8(dword_CC140, i) )
      {
        v5 = 1;
        break;
      }
      v4 += 2;
    }
    if ( !v5 )
    {
      v6 = 0;
      for ( j = 0; j < 0x20u; ++j )
      {
        if ( sub_651F8(dword_CC140, j) )
        {
          v6 = 1;
          break;
        }
      }
      if ( v6 )
      {
        word_CBFF0[2 * j] = a1;
        word_CBFF2[2 * j] = a2;
        word_93A0C = 16640;
        word_939FC = a3;
        word_93A00 = 0x7FFF;
        word_CC070[j] = 0x7FFF;
        word_93A02 = j;
        dword_939F8 = *(_DWORD *)(32 * a2 + dword_CC154 + 26) - 16;
        v3 = *(_DWORD *)(32 * a2 + dword_CC154 + 18);
        //fix word_939F4 = __DS__;
        dword_939F0 = v3;
        dword_CC144 = sub_6535C(dword_CC140, (unsigned int)&dword_939F0);
      }
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939F0: using guessed type int dword_939F0;
// 939F4: using guessed type __int16 word_939F4;
// 939F8: using guessed type int dword_939F8;
// 939FC: using guessed type __int16 word_939FC;
// 93A00: using guessed type __int16 word_93A00;
// 93A02: using guessed type __int16 word_93A02;
// 93A0C: using guessed type __int16 word_93A0C;
// CBFF0: using guessed type __int16 word_CBFF0[];
// CBFF2: using guessed type __int16 word_CBFF2[63];
// CC070: using guessed type __int16 word_CC070[];
// CC140: using guessed type int dword_CC140;
// CC144: using guessed type int dword_CC144;
// CC154: using guessed type int dword_CC154;
// CC1C6: using guessed type __int16 word_CC1C6;

//----- (0005D610) --------------------------------------------------------
void sub_5D610(__int16 a1, __int16 a2)
{
  int v2; // edx
  unsigned __int8 i; // [esp+0h] [ebp-8h]
  char v4; // [esp+4h] [ebp-4h]

  if ( byte_939E4 && byte_939E5 && a2 <= (int)(unsigned __int16)word_CC1C6 )
  {
    v4 = 0;
    for ( i = 0; i < 0x20u; ++i )
    {
      if ( sub_651F8(dword_CC140, i) )
      {
        v4 = 1;
        break;
      }
    }
    if ( v4 )
    {
      word_CBFF0[2 * i] = a1;
      word_CBFF2[2 * i] = a2;
      word_93A02 = i;
      word_93A0C = 256;
      word_93A00 = 0x7FFF;
      word_CC070[i] = 0x7FFF;
      dword_939F8 = *(_DWORD *)(32 * a2 + dword_CC154 + 26) - 16;
      v2 = *(_DWORD *)(32 * a2 + dword_CC154 + 18);
      //fix word_939F4 = __DS__;
      dword_939F0 = v2;
      dword_CC144 = sub_6535C(dword_CC140, (unsigned int)&dword_939F0);
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939F0: using guessed type int dword_939F0;
// 939F4: using guessed type __int16 word_939F4;
// 939F8: using guessed type int dword_939F8;
// 93A00: using guessed type __int16 word_93A00;
// 93A02: using guessed type __int16 word_93A02;
// 93A0C: using guessed type __int16 word_93A0C;
// CBFF0: using guessed type __int16 word_CBFF0[];
// CBFF2: using guessed type __int16 word_CBFF2[63];
// CC070: using guessed type __int16 word_CC070[];
// CC140: using guessed type int dword_CC140;
// CC144: using guessed type int dword_CC144;
// CC154: using guessed type int dword_CC154;
// CC1C6: using guessed type __int16 word_CC1C6;

//----- (0005D750) --------------------------------------------------------
void sub_5D750(__int16 a1, __int16 a2)
{
  __int16 *v2; // [esp+0h] [ebp-8h]
  __int16 i; // [esp+4h] [ebp-4h]

  if ( byte_939E4 )
  {
    v2 = word_CBFF0;
    for ( i = 0; i < 32; ++i )
    {
      if ( *v2 == a1 && v2[1] == a2 && !sub_651F8(dword_CC140, i) )
      {
        sub_65965(dword_CC140, i);
        return;
      }
      v2 += 2;
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// CBFF0: using guessed type __int16 word_CBFF0[];
// CC140: using guessed type int dword_CC140;

//----- (0005D7DF) --------------------------------------------------------
void sub_5D7DF()
{
  ;
}

//----- (0005D7F0) --------------------------------------------------------
bool sub_5D7F0(int a1)
{
  return dword_9C136[a1] == 0;
}
// 9C136: using guessed type int dword_9C136[8];

//----- (0005D829) --------------------------------------------------------
void sub_5D829()
{
  ;
}

//----- (0005D872) --------------------------------------------------------
void sub_5D872()
{
  ;
}

//----- (0005D883) --------------------------------------------------------
int sub_5D883_5DD93(unsigned int a2, char a3)
{
  if ( (a3 & 1) != 0 )
  {
    LOBYTE(dword_A01C4) = 0;
  }
  else
  {
    LOBYTE(dword_A01C4) = 1;
    sub_66DF5();
    //fix sub_66D6A_6727A(a1, 0xFFFF, (int)sub_5DE91, __CS__);
    sub_66E21();
  }
  if ( a2 && (a3 & 1) == 0 )
  {
    if ( a2 == 65280 )
    {
      sub_5DE63(0xFFFF);
      dword_A043D = 65280;
    }
    else
    {
      sub_5DE63(0x1234DC / a2);
      dword_A043D = a2;
    }
    //fix word_A03FF = __CS__;
    dword_A03FB = (int)sub_5DF4B;
    dword_A047D = 0x10000;
  }
  else
  {
    dword_A039D = 0xFFFF;
  }
  return 0;
}
// 10000: using guessed type void sub_10000();
// A01C4: using guessed type int dword_A01C4;
// A039D: using guessed type int dword_A039D;
// A03FB: using guessed type int dword_A03FB;
// A03FF: using guessed type __int16 word_A03FF;
// A043D: using guessed type int dword_A043D;
// A047D: using guessed type int dword_A047D;

//----- (0005D948) --------------------------------------------------------
int sub_5D948()
{
  if ( (_BYTE)dword_A01C4 )
  {
    sub_66DF5();
    sub_66E4D();
    sub_66E21();
  }
  return 0;
}
// A01C4: using guessed type int dword_A01C4;

//----- (0005D97B) --------------------------------------------------------
int sub_5D97B(unsigned int a1, int a2, __int16 a3, unsigned int a4)
{
  int v4; // edx
  unsigned int v7; // [esp+4h] [ebp-8h]
  unsigned int i; // [esp+8h] [ebp-4h]
  unsigned int j; // [esp+8h] [ebp-4h]

  for ( i = 0; i < 0x10 && (*(_DWORD *)&byte_A03A1[6 * i] || *(_WORD *)&byte_A03A1[6 * i + 4]); ++i )
    ;
  if ( i >= 0x10 )
    return 11;
  if ( (_BYTE)dword_A01C4 )
    sub_66DF5();
  v7 = i;
  v4 = 6 * i;
  *(_WORD *)&byte_A03A1[v4 + 4] = a3;
  *(_DWORD *)&byte_A03A1[v4] = a2;
  dword_A0401[i] = a1;
  if ( 0x1234DC / a1 < dword_A039D )
    sub_5DE63(0x1234DC / a1);
  for ( j = 0; j < 0x10; ++j )
  {
    if ( *(_DWORD *)&byte_A03A1[6 * j] || *(_WORD *)&byte_A03A1[6 * j + 4] )
    {
      if ( dword_A0401[j] == 65280 )
      {
        if ( dword_A039D == 0xFFFF )
          dword_A0441[j] = 0x10000;
        else
          dword_A0441[j] = 0x123333 / (0x1234DC / dword_A039D);
      }
      else
      {
        dword_A0441[j] = (dword_A0401[j] << 16) / (0x1234DC / dword_A039D);
      }
      dword_A0481[j] = 0;
    }
  }
  if ( (_BYTE)dword_A01C4 )
    sub_66E21();
  __writegsdword(a4, v7);
  return 0;
}
// 10000: using guessed type void sub_10000();
// A01C4: using guessed type int dword_A01C4;
// A039D: using guessed type int dword_A039D;
// A0401: using guessed type int dword_A0401[15];
// A0441: using guessed type int dword_A0441[15];
// A0481: using guessed type int dword_A0481[];

//----- (0005DB1D) --------------------------------------------------------
int sub_5DB1D(unsigned int a1, unsigned int a2)
{
  unsigned int i; // [esp+4h] [ebp-4h]

  if ( a1 >= 0x10 )
    return 10;
  if ( !*(_DWORD *)&byte_A03A1[6 * a1] && !*(_WORD *)&byte_A03A1[6 * a1 + 4] )
    return 10;
  if ( (_BYTE)dword_A01C4 )
    sub_66DF5();
  dword_A0401[a1] = a2;
  if ( 0x1234DC / a2 < dword_A039D )
    sub_5DE63(0x1234DC / a2);
  for ( i = 0; i < 0x10; ++i )
  {
    if ( *(_DWORD *)&byte_A03A1[6 * i] || *(_WORD *)&byte_A03A1[6 * i + 4] )
    {
      if ( dword_A0401[i] == 65280 )
      {
        if ( dword_A039D == 0xFFFF )
          dword_A0441[i] = 0x10000;
        else
          dword_A0441[i] = 0x123333 / (0x1234DC / dword_A039D);
      }
      else
      {
        dword_A0441[i] = (dword_A0401[i] << 16) / (0x1234DC / dword_A039D);
      }
      dword_A0481[i] = 0;
    }
  }
  if ( (_BYTE)dword_A01C4 )
    sub_66E21();
  return 0;
}
// 10000: using guessed type void sub_10000();
// A01C4: using guessed type int dword_A01C4;
// A039D: using guessed type int dword_A039D;
// A0401: using guessed type int dword_A0401[15];
// A0441: using guessed type int dword_A0441[15];
// A0481: using guessed type int dword_A0481[];

//----- (0005DC91) --------------------------------------------------------
int sub_5DC91(int a1)
{
  int v1; // eax
  unsigned int v3; // [esp+4h] [ebp-8h]
  unsigned int i; // [esp+8h] [ebp-4h]
  unsigned int j; // [esp+8h] [ebp-4h]

  v3 = 0;
  v1 = 6 * a1;
  *(_WORD *)&byte_A03A1[v1 + 4] = 0;
  *(_DWORD *)&byte_A03A1[v1] = 0;
  for ( i = 0; i < 0x10; ++i )
  {
    if ( (*(_DWORD *)&byte_A03A1[6 * i] || *(_WORD *)&byte_A03A1[6 * i + 4])
      && dword_A0401[i] > v3
      && dword_A0401[i] != 65280 )
    {
      v3 = dword_A0401[i];
    }
  }
  if ( v3 )
    sub_5DE63(0x1234DC / v3);
  else
    sub_5DE63(0xFFFF);
  if ( (_BYTE)dword_A01C4 )
    sub_66DF5();
  for ( j = 0; j < 0x10; ++j )
  {
    if ( *(_DWORD *)&byte_A03A1[6 * j] || *(_WORD *)&byte_A03A1[6 * j + 4] )
    {
      if ( dword_A0401[j] == 65280 )
      {
        if ( dword_A039D == 0xFFFF )
          dword_A0441[j] = 0x10000;
        else
          dword_A0441[j] = 0x123333 / (0x1234DC / dword_A039D);
      }
      else
      {
        dword_A0441[j] = (dword_A0401[j] << 16) / (0x1234DC / dword_A039D);
      }
      dword_A0481[j] = 0;
    }
  }
  if ( (_BYTE)dword_A01C4 )
    sub_66E21();
  return 0;
}
// 10000: using guessed type void sub_10000();
// A01C4: using guessed type int dword_A01C4;
// A039D: using guessed type int dword_A039D;
// A0401: using guessed type int dword_A0401[15];
// A0441: using guessed type int dword_A0441[15];
// A0481: using guessed type int dword_A0481[];

//----- (0005DE40) --------------------------------------------------------
int sub_5DE40(int a1)
{
  return dword_A0401[a1];
}
// A0401: using guessed type int dword_A0401[15];

//----- (0005DE63) --------------------------------------------------------
int sub_5DE63(int a1)
{
  dword_A039D = a1;
  sub_66D24(a1);
  return 0;
}
// A039D: using guessed type int dword_A039D;

//----- (0005DE91) --------------------------------------------------------
int sub_5DE91(int a1, int a2, int a3)
{
  void *retaddr[2]; // [esp+10h] [ebp+10h]

  for ( dword_12F040 = 0; (unsigned int)dword_12F040 < 0x10; ++dword_12F040 )
  {
    a1 = 6 * dword_12F040;
    if ( *(_DWORD *)&byte_A03A1[6 * dword_12F040] || *(_WORD *)&byte_A03A1[6 * dword_12F040 + 4] )
    {
      a2 = dword_A0441[dword_12F040];
      dword_A0481[dword_12F040] += a2;
      a1 = 4 * dword_12F040;
      if ( (dword_A0481[dword_12F040] & 0x10000) != 0 )
      {
        HIWORD(dword_A0481[dword_12F040]) = 0;
        if ( byte_A04C1[dword_12F040] != -1 )
          byte_A04D1 = byte_A04C1[dword_12F040];
        //fix a1 = MK_FP(*(_WORD *)&byte_A03A1[6 * dword_12F040 + 4], *(_DWORD *)&byte_A03A1[6 * dword_12F040])();
      }
    }
  }
  return 0; //fix MK_FP(retaddr[0], retaddr[0])(a1, a2, a3);
}
// A0441: using guessed type int dword_A0441[15];
// A0481: using guessed type int dword_A0481[];
// A04D1: using guessed type char byte_A04D1;
// 12F040: using guessed type int dword_12F040;

//----- (0005DF4B) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
int sub_5DF4B(int a1, int a2, int a3)
{
  int v3; // eax
  void *retaddr[2]; // [esp+10h] [ebp+10h]

  v3 = sub_66EA2();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(v3, a2, a3);
}
// 5DF60: positive sp value 4 has been found

//----- (0005DF61) --------------------------------------------------------
void sub_5DF61()
{
  ;
}

//----- (0005DF72) --------------------------------------------------------
void sub_5DF72()
{
  ;
}

//----- (0005DF83) --------------------------------------------------------
int sub_5DF83(int a1, unsigned int a2, unsigned __int16 a3, int a4, int a5)
{
  unsigned __int8 v6; // [esp+0h] [ebp-38h]
  unsigned __int8 v7; // [esp+4h] [ebp-34h]
  int v9; // [esp+14h] [ebp-24h]
  int v10; // [esp+1Ch] [ebp-1Ch]
  unsigned int k; // [esp+1Ch] [ebp-1Ch]
  unsigned int n; // [esp+1Ch] [ebp-1Ch]
  unsigned int ii; // [esp+1Ch] [ebp-1Ch]
  unsigned int j; // [esp+20h] [ebp-18h]
  unsigned int m; // [esp+20h] [ebp-18h]
  unsigned __int8 v16; // [esp+24h] [ebp-14h]
  unsigned __int8 v17; // [esp+28h] [ebp-10h]
  unsigned __int8 v18; // [esp+2Ch] [ebp-Ch]
  unsigned __int8 i; // [esp+30h] [ebp-8h]
  unsigned __int8 v20; // [esp+34h] [ebp-4h]

  v17 = 0;
  v16 = -1;
  v9 = -1;
  if ( dword_9EBC9 )
  {
    v18 = __readgsbyte(a2);
    v20 = v18 & 0xF;
    for ( i = byte_9DF8F[128 * a4 + 16 * a1 + (v18 & 0xF)]; ; i = 9 )
    {
LABEL_9:
      if ( i != 0xFF )
      {
        __writegsbyte(a2, v18 & 0xF0 | i);
        goto LABEL_66;
      }
      if ( v20 != 9 )
        break;
      byte_9DF8F[128 * a4 + 9 + 16 * a1] = 9;
    }
    for ( j = 0; j < 0x10; ++j )
    {
      while ( !byte_9EC5D[16 * a4 + j] && j < 0x10 )
        ++j;
      if ( j < 0x10 && byte_9E25F[16 * a4 + j] == -1 )
      {
        byte_9DF8F[128 * a4 + 16 * a1 + v20] = j;
        i = j;
        byte_9E25F[16 * a4 + j] = v20;
        byte_9E2AF[16 * a4 + j] = a1;
        byte_9E20F[16 * a4 + j] = __readgsbyte(*(_DWORD *)&byte_9C176[6 * a1] + 4 * v20 + 64);
        v10 = (unsigned __int8)byte_9E93F[128 * a4 + 16 * a1 + v20];
        if ( v10 == 255 )
        {
          for ( k = 0; k < 4; ++k )
          {
            if ( byte_9E2FF[320 * a4 + 20 * v20 + 5 * k] == -1 )
            {
              byte_9E2FF[320 * a4 + 20 * v20 + 5 * k] = 1;
              byte_9E93F[128 * a4 + 16 * a1 + v20] = k;
              goto LABEL_9;
            }
          }
        }
        else
        {
          byte_9ECAE[16 * a4 + (unsigned __int8)j] = 127;
          byte_9EBBF = j | 0xC0;
          byte_9EBC0 = 121;
          byte_9EBC1 = 0;
          //fix
          /*MK_FP(*(_WORD*)&byte_9C062[36 * a4 + 4], *(_DWORD*)&byte_9C062[36 * a4])(
            &byte_9EBBF,
            (unsigned __int16)__DS__,
            3,
            a4);*/
          if ( byte_9E302[320 * a4 + 20 * v20 + 5 * v10] != -1 )
          {
            byte_9EBBF = j | 0xC0;
            byte_9EBC0 = byte_9E302[320 * a4 + 20 * v20 + 5 * v10];
            //fix
            /*
            MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
              &byte_9EBBF,
              (unsigned __int16)__DS__,
              2,
              a4);*/
          }
          if ( byte_9E300[320 * a4 + 20 * v20 + 5 * v10] != -1 )
          {
            byte_9EBBF = j | 0xE0;
            byte_9EBC0 = 0;
            byte_9EBC1 = byte_9E300[320 * a4 + 20 * v20 + 5 * v10];
            //fix
            /*
            MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
              &byte_9EBBF,
              (unsigned __int16)__DS__,
              2,
              a4);*/
          }
          if ( byte_9E301[320 * a4 + 20 * v20 + 5 * v10] != -1 )
          {
            byte_9EBBF = j | 0xB0;
            byte_9EBC0 = 7;
            byte_9EBC1 = byte_9E301[320 * a4 + 20 * v20 + 5 * v10];
            //fix
            /*
            MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
              &byte_9EBBF,
              (unsigned __int16)__DS__,
              3,
              a4);*/
          }
          if ( byte_9E303[320 * a4 + 20 * v20 + 5 * v10] != -1 )
          {
            byte_9EBBF = j | 0xB0;
            byte_9EBC0 = 64;
            byte_9EBC1 = byte_9E303[320 * a4 + 20 * v20 + 5 * v10];
            //fix
            /*
            MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
              &byte_9EBBF,
              (unsigned __int16)__DS__,
              3,
              a4);*/
          }
        }
        goto LABEL_9;
      }
    }
    for ( m = 0; m < 0x10; ++m )
    {
      while ( !byte_9EC5D[16 * a4 + m] && m < 0x10 )
        ++m;
      if ( m < 0x10 && (unsigned __int8)byte_9E20F[16 * a4 + m] > v17 && byte_9E20F[16 * a4 + m] != -1 )
      {
        v17 = byte_9E20F[16 * a4 + m];
        v16 = m;
      }
    }
    if ( v16 == 0xFF )
      goto LABEL_66;
    if ( v17 > __readgsdword(*(_DWORD *)&byte_9C176[6 * a1] + 4 * v20 + 64) )
    {
      byte_9DF8F[128 * a4 + 16 * a1 + v20] = v16;
      byte_9DF8F[128 * a4 + 16 * (unsigned __int8)byte_9E2AF[16 * a4 + v16] + (unsigned __int8)byte_9E25F[16 * a4 + v16]] = -1;
      byte_9E25F[16 * a4 + v16] = v20;
      byte_9E2AF[16 * a4 + v16] = a1;
      i = v16;
      byte_9E20F[16 * a4 + v16] = __readgsbyte(*(_DWORD *)&byte_9C176[6 * a1] + 4 * v20 + 64);
      byte_9ECAE[16 * a4 + v16] = 127;
      byte_9EBBF = v16 | 0xB0;
      byte_9EBC0 = 123;
      byte_9EBC1 = 0;
      //fix
      /*
      MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
        &byte_9EBBF,
        (unsigned __int16)__DS__,
        3,
        a4);*/
      byte_9EBBF = v16 | 0xB0;
      byte_9EBC0 = 121;
      byte_9EBC1 = 0;
      //fix
      /*
      MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
        &byte_9EBBF,
        (unsigned __int16)__DS__,
        3,
        a4);*/
      if ( byte_9E93F[128 * a4 + 16 * a1 + v20] == -1 )
      {
        for ( n = 0; n < 4; ++n )
        {
          if ( byte_9E2FF[320 * a4 + 20 * v20 + 5 * n] == -1 )
          {
            byte_9E2FF[320 * a4 + 20 * v20 + 5 * n] = 1;
            byte_9E93F[128 * a4 + 16 * a1 + v20] = n;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    if ( byte_9E93F[128 * a4 + 16 * a1 + v20] == -1 )
    {
      for ( ii = 0; ii < 4; ++ii )
      {
        if ( byte_9E2FF[320 * a4 + 20 * v20 + 5 * ii] == -1 )
        {
          byte_9E2FF[320 * a4 + 20 * v20 + 5 * ii] = 1;
          byte_9E93F[128 * a4 + 16 * a1 + v20] = ii;
          break;
        }
      }
    }
LABEL_66:
    if ( v20 == 9 )
    {
      if ( v18 == 0xB9 && __readgsbyte(a2 + 1) == 7 )
        v9 = __readgsbyte(a2 + 2);
      byte_9ECB7[16 * a4] = v9;
    }
    else
    {
      v6 = v18 & 0xF0;
      if ( (v18 & 0xF0u) < 0xC0 )
      {
        if ( v6 == 0xB0 )
        {
          v7 = __readgsbyte(a2 + 1);
          if ( v7 >= 7u )
          {
            if ( v7 <= 7u )
            {
              byte_9E301[320 * a4 + 20 * v20 + 5 * (unsigned __int8)byte_9E93F[128 * a4 + 16 * a1 + v20]] = __readgsbyte(a2 + 2);
              v9 = __readgsbyte(a2 + 2);
              byte_9ECAE[16 * a4 + i] = v9;
            }
            else if ( v7 == 64 )
            {
              byte_9E303[320 * a4 + 20 * v20 + 5 * (unsigned __int8)byte_9E93F[128 * a4 + 16 * a1 + v20]] = __readgsbyte(a2 + 2);
            }
          }
        }
      }
      else if ( v6 <= 0xC0u )
      {
        byte_9E302[320 * a4 + 20 * v20 + 5 * (unsigned __int8)byte_9E93F[128 * a4 + 16 * a1 + v20]] = __readgsbyte(a2 + 1);
      }
      else if ( v6 == 0xE0 )
      {
        byte_9E300[320 * a4 + 20 * v20 + 5 * (unsigned __int8)byte_9E93F[128 * a4 + 16 * a1 + v20]] = __readgsbyte(a2 + 2);
      }
    }
    if ( i == 0xFF )
    {
      return -1;
    }
    else
    {
      if ( v9 != -1 )
        __writegsbyte(a2 + 2, (v9 * (unsigned int)(unsigned __int8)byte_9ECAD) >> 7);
      //fix MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(a2, a3, a5, a4);
      __writegsbyte(a2, v18);
      if ( v9 != -1 )
        __writegsbyte(a2 + 2, v9);
      return 0;
    }
  }
  else
  {
    if ( (__readgsbyte(a2) & 0xF0) == 0xB0 )
    {
      if ( __readgsbyte(a2 + 1) == 7 )
      {
        byte_9EBBF = __readgsbyte(a2);
        byte_9EBC0 = 7;
        byte_9EBC1 = (__readgsbyte(a2 + 2) * (unsigned int)(unsigned __int8)byte_9ECAD) >> 7;
      }
      //fix
      /*
      MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(
        &byte_9EBBF,
        (unsigned __int16)__DS__,
        a5,
        a4);*/
    }
    else
    {
        //fix MK_FP(*(_WORD *)&byte_9C062[36 * a4 + 4], *(_DWORD *)&byte_9C062[36 * a4])(a2, a3, a5, a4);
    }
    return 1;
  }
}
// 9EBBF: using guessed type char byte_9EBBF;
// 9EBC0: using guessed type char byte_9EBC0;
// 9EBC1: using guessed type char byte_9EBC1;
// 9EBC9: using guessed type int dword_9EBC9;
// 9ECAD: using guessed type char byte_9ECAD;
// 5DF83: using guessed type unsigned int arg_4;

//----- (0005E9C1) --------------------------------------------------------
int sub_5E9C1(int a1)
{
  unsigned int i; // [esp+8h] [ebp-14h]
  unsigned int v3; // [esp+Ch] [ebp-10h]
  unsigned __int8 v4; // [esp+10h] [ebp-Ch]
  unsigned __int8 v5; // [esp+14h] [ebp-8h]
  unsigned __int8 v6; // [esp+18h] [ebp-4h]

  for ( i = 0; i < dword_9C042[a1]; ++i )
  {
    v3 = __readgsdword(*(int *)((char *)&dword_9BFF2 + 6 * a1) + 4 * i);
    if ( v3 != -1 && v3 != 255 )
    {
      v5 = __readgsbyte(*(int *)((char *)&dword_9D98F[48 * a1] + 6 * i) + 8);
      if ( dword_9EBC9 )
      {
        v4 = byte_9DF8F[128 * v3 + 16 * a1 + v5];
        byte_9DF8F[128 * v3 + 16 * a1 + v5] = -1;
        v6 = byte_9E93F[128 * v3 + 16 * a1 + v5];
        byte_9E25F[16 * v3 + v4] = -1;
        byte_9E2AF[16 * v3 + v4] = -1;
        byte_9EBBF = v4 | 0xB0;
        byte_9EBC0 = 123;
        byte_9EBC1 = 0;
        //
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        byte_9EBBF = v4 | 0xB0;
        byte_9EBC0 = 121;
        byte_9EBC1 = 0;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        byte_9EBBF = v4 | 0xE0;
        byte_9EBC0 = 64;
        byte_9EBC1 = 64;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        byte_9EBBF = v4 | 0xB0;
        byte_9EBC0 = 7;
        byte_9EBC1 = 0;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        if ( v6 != 0xFF )
        {
          byte_9E302[320 * v3 + 20 * v5 + 5 * v6] = -1;
          byte_9E300[320 * v3 + 20 * v5 + 5 * v6] = -1;
          byte_9E301[320 * v3 + 20 * v5 + 5 * v6] = -1;
          byte_9E303[320 * v3 + 20 * v5 + 5 * v6] = -1;
          byte_9E2FF[320 * v3 + 20 * v5 + 5 * v6] = -1;
          byte_9E93F[128 * v3 + 16 * a1 + v5] = -1;
        }
      }
      else
      {
        byte_9EBBF = v5 | 0xB0;
        byte_9EBC0 = 123;
        byte_9EBC1 = 0;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        byte_9EBBF = v5 | 0xB0;
        byte_9EBC0 = 121;
        byte_9EBC1 = 0;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        byte_9EBBF = v5 | 0xE0;
        byte_9EBC0 = 64;
        byte_9EBC1 = 64;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
        byte_9EBBF = v5 | 0xB0;
        byte_9EBC0 = 7;
        byte_9EBC1 = 0;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v3 + 4], *(_DWORD *)&byte_9C062[36 * v3])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v3);*/
      }
    }
  }
  return 1;
}
// 9BFF2: using guessed type int dword_9BFF2;
// 9C042: using guessed type int dword_9C042[8];
// 9D98F: using guessed type int dword_9D98F[];
// 9EBBF: using guessed type char byte_9EBBF;
// 9EBC0: using guessed type char byte_9EBC0;
// 9EBC1: using guessed type char byte_9EBC1;
// 9EBC9: using guessed type int dword_9EBC9;

//----- (0005EDA0) --------------------------------------------------------
int sub_5EDA0(int a1, int a2, unsigned __int16 a3, int a4)
{
  //fix MK_FP(*(_WORD *)&byte_9C062[36 * a1 + 4], *(_DWORD *)&byte_9C062[36 * a1])(a2, a3, a4, a1);
  return 0;
}

//----- (0005EDD6) --------------------------------------------------------
int sub_5EDD6(int a1)
{
  int v2; // [esp+4h] [ebp-4h]

  v2 = dword_9EBC9;
  dword_9EBC9 = a1;
  return v2;
}
// 9EBC9: using guessed type int dword_9EBC9;

//----- (0005EE00) --------------------------------------------------------
void sub_5EE00()
{
  ;
}

//----- (0005EE11) --------------------------------------------------------
void sub_5EE11()
{
  ;
}

//----- (0005EE22) --------------------------------------------------------
int sub_5EE22(unsigned int a1, int a2, int a3, __int16 a4, unsigned int a5)
{
  unsigned __int64 v5; // rax
  int v6; // ebx
  int v7; // ebx
  unsigned int v8; // ebx
  unsigned __int64 v9; // rax
  int v10; // ebx
  unsigned __int64 v11; // rax
  int v12; // ebx
  int v13; // ebx
  int v14; // eax
  int v16; // [esp+8h] [ebp-34h]
  __int16 v17; // [esp+Ch] [ebp-30h]
  int v18; // [esp+10h] [ebp-2Ch]
  int i; // [esp+18h] [ebp-24h]
  int v20; // [esp+1Ch] [ebp-20h]
  unsigned int n; // [esp+20h] [ebp-1Ch]
  unsigned int v22; // [esp+24h] [ebp-18h]
  unsigned int j; // [esp+28h] [ebp-14h]
  unsigned int ii; // [esp+28h] [ebp-14h]
  int v26; // [esp+34h] [ebp-8h]
  unsigned int k; // [esp+38h] [ebp-4h]
  unsigned int m; // [esp+38h] [ebp-4h]

  v26 = 0;
  for ( i = 0; byte_9ECFF[i]; ++i )
  {
    if ( byte_9ECFF[i] != __readgsbyte(__readgsdword(a1) + i) )
      return 14;
  }
  for ( j = 0; j < 8; ++j )
  {
    if ( !*(_DWORD *)&byte_9C176[6 * j] && !*(_WORD *)&byte_9C176[6 * j + 4] )
    {
      v22 = j;
      break;
    }
  }
  if ( j == 8 )
    return 11;
  v5 = sub_66EF6(__readgsdword(a1), __readgsword(a1 + 4));
  v6 = v5;
  LODWORD(v5) = 6 * v22;
  *(_WORD *)&byte_9C176[v5 + 4] = WORD2(v5);
  *(_DWORD *)&byte_9C176[v5] = v6;
  v17 = *(_WORD *)&byte_9C176[6 * v22 + 4];
  v16 = *(_DWORD *)&byte_9C176[6 * v22] + 776;
  v7 = 3 * v22;
  word_9BFF6[v7] = a4;
  *(int *)((char *)&dword_9BFF2 + v7 * 2) = a3;
  dword_9C022[v22] = __readgsdword(*(_DWORD *)&byte_9C176[6 * v22] + 48);
  dword_9C042[v22] = dword_9C022[v22];
  LODWORD(v5) = *(_DWORD *)&byte_9C176[6 * v22];
  v8 = __readgsdword(a1 + 8);
  __writegsword(v5 + 772, __readgsword(a1 + 12));
  __writegsdword(v5 + 768, v8);
  for ( k = 0; k < dword_9C022[v22]; ++k )
  {
    dword_9BBF2[32 * v22 + k] = 0;
    v9 = sub_66EF6(v26 + v16, v17);
    v10 = v9;
    LODWORD(v9) = 6 * k + 192 * v22;
    *(__int16 *)((char *)&word_9D993 + v9) = WORD2(v9);
    *(int *)((char *)dword_9D98F + v9) = v10;
    v11 = sub_66EF6(v16 + v26 + 12, v17);
    v12 = v11;
    LODWORD(v11) = 192 * v22 + 6 * k;
    *(_WORD *)&byte_9B1F2[v11 + 4] = WORD2(v11);
    *(_DWORD *)&byte_9B1F2[v11] = v12;
    v13 = v11;
    v18 = sub_5F7C7(
            *(_DWORD *)&byte_9B1F2[v11],
            *(unsigned __int16 *)&byte_9B1F2[v11 + 4],
            (unsigned int)&dword_9B7F2[32 * v22 + k])
        + *(_DWORD *)&byte_9B1F2[v13];
    *(_WORD *)&byte_9B1F2[v13 + 4] = *(_WORD *)&byte_9B1F2[v13 + 4];
    *(_DWORD *)&byte_9B1F2[v13] = v18;
    v26 += __readgsdword(sub_66EF6(v26 + v16, v17) + 4);
  }
  for ( m = 0; m < dword_9C042[v22]; ++m )
  {
    if ( __readgsdword(*(int *)((char *)&dword_9BFF2 + 6 * v22) + 4 * m) == 255 )
    {
      v20 = 0;
      for ( n = 0; __readgsdword(*(_DWORD *)&byte_9C176[6 * v22] + 20 * m + 4 * n + 128) && !v20 && n < 5; ++n )
      {
        for ( ii = 0; ii < 5; ++ii )
        {
          if ( __readgsdword(*(_DWORD *)&byte_9C176[6 * v22] + 20 * m + 4 * n + 128) == 40960 )
          {
            if ( dword_9B1B6[ii] == 40960 || dword_9B1B6[ii] == 40961 || dword_9B1B6[ii] == 40968 )
            {
LABEL_38:
              __writegsdword(*(int *)((char *)&dword_9BFF2 + 6 * v22) + 4 * m, ii);
              v20 = 1;
              break;
            }
          }
          else if ( dword_9B1B6[ii] == __readgsdword(*(_DWORD *)&byte_9C176[6 * v22] + 20 * m + 4 * n + 128) )
          {
            goto LABEL_38;
          }
        }
      }
      if ( __readgsdword(*(_DWORD *)&byte_9C176[6 * v22] + 20 * m + 128) )
      {
        if ( !v20 )
        {
          v14 = 6 * m + 192 * v22;
          *(_WORD *)&byte_9B1F2[v14 + 4] = 0;
          *(_DWORD *)&byte_9B1F2[v14] = 0;
          __writegsdword(*(int *)((char *)&dword_9BFF2 + 6 * v22) + 4 * m, 0xFFu);
          --dword_9C022[v22];
        }
      }
      else
      {
        __writegsdword(*(int *)((char *)&dword_9BFF2 + 6 * v22) + 4 * m, 0);
      }
    }
  }
  __writegsdword(a5, v22);
  return 0;
}
// 5EEE0: variable 'v22' is possibly undefined
// 9B1B6: using guessed type int dword_9B1B6[6];
// 9B7F2: using guessed type int dword_9B7F2[256];
// 9BBF2: using guessed type int dword_9BBF2[256];
// 9BFF2: using guessed type int dword_9BFF2;
// 9BFF6: using guessed type __int16 word_9BFF6[];
// 9C022: using guessed type int dword_9C022[8];
// 9C042: using guessed type int dword_9C042[8];
// 9D98F: using guessed type int dword_9D98F[];
// 9D993: using guessed type __int16 word_9D993;
// 5EE22: using guessed type unsigned int arg_0;

//----- (0005F355) --------------------------------------------------------
int sub_5F355(unsigned int a1)
{
  int v1; // eax

  if ( a1 >= 8 )
    return 10;
  v1 = 6 * a1;
  *(_WORD *)&byte_9C176[v1 + 4] = 0;
  *(_DWORD *)&byte_9C176[v1] = 0;
  return 0;
}

//----- (0005F398) --------------------------------------------------------
int sub_5F398(int a1)
{
  int v3; // [esp+4h] [ebp-4h]

  //fix
  v3 = 0;
  //fix

  //fix
  /*
  v3 = sub_5D97B(
         __readgsdword(*(_DWORD *)&byte_9C176[6 * a1] + 56),
         (int)sub_66F3C,
         __CS__,
         (unsigned int)&dword_9C1A6[a1]);*/
  if ( v3 )
    return v3;
  byte_A04C1[dword_9C1A6[a1]] = a1;
  dword_9C136[a1] = 1;
  return 0;
}
// 9C136: using guessed type int dword_9C136[8];
// 9C1A6: using guessed type int dword_9C1A6[8];

//----- (0005F420) --------------------------------------------------------
int sub_5F420(unsigned int a1)
{
  int v1; // edx
  int v2; // eax
  int v4; // [esp+0h] [ebp-14h] BYREF
  __int16 v5; // [esp+4h] [ebp-10h]
  unsigned int v6; // [esp+8h] [ebp-Ch]
  unsigned __int16 v7; // [esp+Ch] [ebp-8h]

  if ( a1 >= 8 )
    return 10;
  if ( dword_9C1A6[a1] != -1 )
    sub_5DC91(dword_9C1A6[a1]);
  byte_A04C1[dword_9C1A6[a1]] = -1;
  dword_9C1A6[a1] = -1;
  if ( dword_9C136[a1] )
  {
    v5 = *(_WORD *)&byte_9C176[6 * a1 + 4];
    v4 = *(_DWORD *)&byte_9C176[6 * a1];
    v1 = *(_DWORD *)&byte_9C176[6 * a1];
    v7 = __readgsword(v1 + 772);
    v6 = __readgsdword(v1 + 768);
    sub_5E9C1(a1);
    dword_9C136[a1] = 0;
    v2 = 6 * a1;
    *(_WORD *)&byte_9C176[v2 + 4] = 0;
    *(_DWORD *)&byte_9C176[v2] = 0;
    sub_5F529(a1, (unsigned int)&v4);
  }
  return 0;
}
// 9C136: using guessed type int dword_9C136[8];
// 9C1A6: using guessed type int dword_9C1A6[8];

//----- (0005F529) --------------------------------------------------------
int sub_5F529(int a1, unsigned int a2)
{
  unsigned __int64 v2; // rax
  int v3; // ebx
  unsigned int v4; // ebx
  unsigned __int64 v5; // rax
  int v6; // ebx
  unsigned __int64 v7; // rax
  int v8; // ebx
  int v9; // ebx
  int v10; // eax
  int v12; // [esp+8h] [ebp-20h]
  int v13; // [esp+10h] [ebp-18h]
  __int16 v14; // [esp+14h] [ebp-14h]
  int v15; // [esp+20h] [ebp-8h]
  unsigned int i; // [esp+24h] [ebp-4h]
  unsigned int j; // [esp+24h] [ebp-4h]

  v15 = 0;
  v2 = sub_66EF6(__readgsdword(a2), __readgsword(a2 + 4));
  v3 = v2;
  LODWORD(v2) = 6 * a1;
  *(_WORD *)&byte_9C176[v2 + 4] = WORD2(v2);
  *(_DWORD *)&byte_9C176[v2] = v3;
  v14 = *(_WORD *)&byte_9C176[6 * a1 + 4];
  v13 = *(_DWORD *)&byte_9C176[6 * a1] + 776;
  dword_9C022[a1] = __readgsdword(*(_DWORD *)&byte_9C176[6 * a1] + 48);
  dword_9C042[a1] = dword_9C022[a1];
  LODWORD(v2) = *(_DWORD *)&byte_9C176[6 * a1];
  v4 = __readgsdword(a2 + 8);
  __writegsword(v2 + 772, __readgsword(a2 + 12));
  __writegsdword(v2 + 768, v4);
  for ( i = 0; i < dword_9C022[a1]; ++i )
  {
    dword_9BBF2[32 * a1 + i] = 0;
    v5 = sub_66EF6(v15 + v13, v14);
    v6 = v5;
    LODWORD(v5) = 6 * i + 192 * a1;
    *(__int16 *)((char *)&word_9D993 + v5) = WORD2(v5);
    *(int *)((char *)dword_9D98F + v5) = v6;
    v7 = sub_66EF6(v13 + v15 + 12, v14);
    v8 = v7;
    LODWORD(v7) = 192 * a1 + 6 * i;
    *(_WORD *)&byte_9B1F2[v7 + 4] = WORD2(v7);
    *(_DWORD *)&byte_9B1F2[v7] = v8;
    v9 = v7;
    v12 = sub_5F7C7(
            *(_DWORD *)&byte_9B1F2[v7],
            *(unsigned __int16 *)&byte_9B1F2[v7 + 4],
            (unsigned int)&dword_9B7F2[32 * a1 + i])
        + *(_DWORD *)&byte_9B1F2[v9];
    *(_WORD *)&byte_9B1F2[v9 + 4] = *(_WORD *)&byte_9B1F2[v9 + 4];
    *(_DWORD *)&byte_9B1F2[v9] = v12;
    v15 += __readgsdword(sub_66EF6(v15 + v13, v14) + 4);
  }
  for ( j = 0; j < dword_9C042[a1]; ++j )
  {
    if ( __readgsdword(*(int *)((char *)&dword_9BFF2 + 6 * a1) + 4 * j) == 255 )
    {
      v10 = 192 * a1 + 6 * j;
      *(_WORD *)&byte_9B1F2[v10 + 4] = 0;
      *(_DWORD *)&byte_9B1F2[v10] = 0;
      --dword_9C022[a1];
    }
  }
  return 0;
}
// 9B7F2: using guessed type int dword_9B7F2[256];
// 9BBF2: using guessed type int dword_9BBF2[256];
// 9BFF2: using guessed type int dword_9BFF2;
// 9C022: using guessed type int dword_9C022[8];
// 9C042: using guessed type int dword_9C042[8];
// 9D98F: using guessed type int dword_9D98F[];
// 9D993: using guessed type __int16 word_9D993;

//----- (0005F7C7) --------------------------------------------------------
int sub_5F7C7(unsigned int a1, int a2, unsigned int a3)
{
  unsigned int v3; // eax
  int v5; // [esp+4h] [ebp-14h]
  unsigned int v6; // [esp+8h] [ebp-10h]
  int v7; // [esp+Ch] [ebp-Ch]
  int v8; // [esp+10h] [ebp-8h]
  char v9; // [esp+14h] [ebp-4h]

  v8 = 0;
  v7 = 0;
  v6 = 0;
  v5 = 0;
  do
  {
    ++v5;
    v3 = a1++;
    v9 = __readgsbyte(v3);
    if ( v9 < 0 )
      v8 = 1;
    v6 |= (v9 & 0x7F) << v7;
    v7 += 7;
  }
  while ( !v8 );
  __writegsdword(a3, v6);
  return v5;
}

//----- (0005F83E) --------------------------------------------------------
int sub_5F83E(char a1)
{
  int v2; // [esp+8h] [ebp-Ch]
  unsigned int i; // [esp+Ch] [ebp-8h]
  char v4; // [esp+10h] [ebp-4h]

  v2 = 0;
  byte_9ECAD = a1;
  while ( dword_9B1B6[v2] )
  {
    for ( i = 0; i < 0x10; ++i )
    {
      if ( byte_9EC5D[16 * v2 + i] || i == 9 )
      {
        v4 = ((unsigned __int8)byte_9ECAE[16 * v2 + i] * (unsigned int)(unsigned __int8)byte_9ECAD) >> 7;
        byte_9EBBF = i | 0xB0;
        byte_9EBC0 = 7;
        byte_9EBC1 = v4;
        //fix
        /*
        MK_FP(*(_WORD *)&byte_9C062[36 * v2 + 4], *(_DWORD *)&byte_9C062[36 * v2])(
          &byte_9EBBF,
          (unsigned __int16)__DS__,
          3,
          v2);*/
      }
    }
    ++v2;
  }
  return 0;
}
// 9B1B6: using guessed type int dword_9B1B6[6];
// 9EBBF: using guessed type char byte_9EBBF;
// 9EBC0: using guessed type char byte_9EBC0;
// 9EBC1: using guessed type char byte_9EBC1;
// 9ECAD: using guessed type char byte_9ECAD;

//----- (0005F913) --------------------------------------------------------
void sub_5F913()
{
  ;
}

//----- (0005F924) --------------------------------------------------------
void sub_5F924()
{
  ;
}

//----- (0005F935) --------------------------------------------------------
void sub_5F935()
{
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
}

//----- (0005FD67) --------------------------------------------------------
void sub_5FD67()
{
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
}

//----- (00060199) --------------------------------------------------------
int sub_60199(int a1, unsigned __int16 a2)
{
  sub_5F935();
  //fix
  /*
  if ( a1 || a2 )
    fstrcpy(&unk_9ED08, (unsigned __int16)__DS__, a1, a2);
  else
    byte_A04D2 = 0;*/
  //fix
  /*
  word_131526 = __CS__;
  dword_131522 = (int)sub_679AE;
  word_13152C = __CS__;
  dword_131528 = (int)sub_679DE;
  word_131532 = __CS__;
  dword_13152E = (int)sub_679F7;
  word_131538 = __CS__;
  dword_131534 = (int)sub_67A10;
  word_13153E = __CS__;
  dword_13153A = (int)sub_67A29;
  word_1314CC = __CS__;
  dword_1314C8 = (int)sub_68A14;
  word_1314D2 = __CS__;
  dword_1314CE = (int)sub_68BDA;
  word_1314D8 = __CS__;
  dword_1314D4 = (int)sub_68C4B;
  word_1314DE = __CS__;
  dword_1314DA = (int)sub_68C69;
  word_1314E4 = __CS__;
  dword_1314E0 = (int)sub_68C82;
  word_131508 = __CS__;
  dword_131504 = (int)sub_67A96;
  word_13150E = __CS__;
  dword_13150A = (int)sub_67D9D;
  word_131514 = __CS__;
  dword_131510 = (int)sub_67F1C;
  word_13151A = __CS__;
  dword_131516 = (int)sub_67F9A;
  word_131520 = __CS__;
  dword_13151C = (int)sub_67FB3;
  word_1314EA = __CS__;
  dword_1314E6 = (int)sub_69EED;
  word_1314F0 = __CS__;
  dword_1314EC = (int)sub_69F1C;
  word_1314F6 = __CS__;
  dword_1314F2 = (int)sub_69F57;
  word_1314FC = __CS__;
  dword_1314F8 = (int)sub_69F75;
  word_131502 = __CS__;
  dword_1314FE = (int)sub_69F93;
  dword_9C22A = 1;*/
  return 0;
}
// 6A67A: using guessed type _DWORD fstrcpy(_DWORD, _DWORD, _DWORD, _DWORD);
// 9C22A: using guessed type int dword_9C22A;
// A04D2: using guessed type char byte_A04D2;
// 1314C8: using guessed type int dword_1314C8;
// 1314CC: using guessed type __int16 word_1314CC;
// 1314CE: using guessed type int dword_1314CE;
// 1314D2: using guessed type __int16 word_1314D2;
// 1314D4: using guessed type int dword_1314D4;
// 1314D8: using guessed type __int16 word_1314D8;
// 1314DA: using guessed type int dword_1314DA;
// 1314DE: using guessed type __int16 word_1314DE;
// 1314E0: using guessed type int dword_1314E0;
// 1314E4: using guessed type __int16 word_1314E4;
// 1314E6: using guessed type int dword_1314E6;
// 1314EA: using guessed type __int16 word_1314EA;
// 1314EC: using guessed type int dword_1314EC;
// 1314F0: using guessed type __int16 word_1314F0;
// 1314F2: using guessed type int dword_1314F2;
// 1314F6: using guessed type __int16 word_1314F6;
// 1314F8: using guessed type int dword_1314F8;
// 1314FC: using guessed type __int16 word_1314FC;
// 1314FE: using guessed type int dword_1314FE;
// 131502: using guessed type __int16 word_131502;
// 131504: using guessed type int dword_131504;
// 131508: using guessed type __int16 word_131508;
// 13150A: using guessed type int dword_13150A;
// 13150E: using guessed type __int16 word_13150E;
// 131510: using guessed type int dword_131510;
// 131514: using guessed type __int16 word_131514;
// 131516: using guessed type int dword_131516;
// 13151A: using guessed type __int16 word_13151A;
// 13151C: using guessed type int dword_13151C;
// 131520: using guessed type __int16 word_131520;
// 131522: using guessed type int dword_131522;
// 131526: using guessed type __int16 word_131526;
// 131528: using guessed type int dword_131528;
// 13152C: using guessed type __int16 word_13152C;
// 13152E: using guessed type int dword_13152E;
// 131532: using guessed type __int16 word_131532;
// 131534: using guessed type int dword_131534;
// 131538: using guessed type __int16 word_131538;
// 13153A: using guessed type int dword_13153A;
// 13153E: using guessed type __int16 word_13153E;

//----- (00060335) --------------------------------------------------------
int sub_60335()
{
  sub_5FD67();
  dword_9C22A = 0;
  return 0;
}
// 9C22A: using guessed type int dword_9C22A;

//----- (0006035F) --------------------------------------------------------
int sub_6035F(unsigned int a1, unsigned int a2, int a3, int a4, int a5, unsigned int a6)
{
  int v6; // ecx
  unsigned int v7; // edx
  int v8; // eax
  int v9; // ecx
  int v10; // eax
  int v11; // eax
  int v12; // ecx
  int v13; // eax
  int v14; // eax
  int v15; // ecx
  int v16; // eax
  int v17; // eax
  int v18; // ecx
  int v19; // eax
  unsigned __int16 v20; // ax
  int v21; // edx
  int v22; // edx
  unsigned int v24; // [esp+Ch] [ebp-3Ch] BYREF
  int v25; // [esp+10h] [ebp-38h]
  int *v26; // [esp+14h] [ebp-34h]
  __int16 v27; // [esp+18h] [ebp-30h]
  int v28; // [esp+1Ch] [ebp-2Ch]
  void (*v29)(_DWORD); // [esp+24h] [ebp-24h] BYREF
  int v30; // [esp+28h] [ebp-20h]
  int v31; // [esp+2Ch] [ebp-1Ch]
  unsigned int i; // [esp+34h] [ebp-14h]
  unsigned int v33; // [esp+40h] [ebp-8h]
  unsigned int v34; // [esp+44h] [ebp-4h]

  //fix
  v6 = 0;
  v10 = 0;
  v13 = 0;
  v16 = 0;
  v19 = 0;
  v25 = 0;
  //fix

  v34 = __readgsdword(a4 + 24);
  v33 = __readgsdword(a4 + 28);
  v31 = 6;
  for ( i = 0; i < 5; ++i )
  {
    if ( !dword_9B1B6[i] )
    {
      v31 = i;
      break;
    }
  }
  if ( v31 == 6 )
    return 11;
  LOWORD(v7) = 4 * v31;
  dword_9B1B6[v31] = a1;
  for ( i = 0; i < 0x10; ++i )
  {
    v7 = i + 16 * a1;
    LOBYTE(v7) = byte_90000[v7 - 594995];
    byte_9EC5D[16 * v31 + i] = v7;
  }
  switch ( dword_9B1B6[v31] )
  {
    case 40962:
      for ( i = 0; i < 6; ++i )
      {
        v11 = 36 * v31 + 6 * i;
        v12 = *(int *)((char *)&dword_1314E6 + 6 * i);
        *(_WORD *)&byte_9C062[v11 + 4] = word_1314EA[3 * i];
        *(_DWORD *)&byte_9C062[v11] = v12;
      }
      //fix
      /*
      v13 = MK_FP(*(_WORD *)&byte_9C068[36 * v31 + 4], *(_DWORD *)&byte_9C068[36 * v31])(
              __readgsdword(a4 + 16),
              __readgsword(a4 + 20),
              v31,
              __readgsdword(a2));*/
      v28 = v13;
      if ( !v13 )
        goto LABEL_47;
      v30 = v28;
      break;
    case 40963:
      v27 = v7;
      v26 = sub_6798D();
      for ( i = 0; i < 6; ++i )
      {
        v14 = 36 * v31 + 6 * i;
        v15 = *(int *)((char *)&dword_131522 + 6 * i);
        *(_WORD *)&byte_9C062[v14 + 4] = word_131526[3 * i];
        *(_DWORD *)&byte_9C062[v14] = v15;
      }
      //fix
      /*
      v16 = MK_FP(*(_WORD *)&byte_9C068[36 * v31 + 4], *(_DWORD *)&byte_9C068[36 * v31])(
              __readgsdword(a4 + 16),
              __readgsword(a4 + 20),
              v31,
              dword_9EF0C);*/
      v28 = v16;
      if ( !v16 )
        goto LABEL_47;
      v30 = v28;
      break;
    case 40965:
      v27 = v7;
      v26 = sub_67A75();
      for ( i = 0; i < 6; ++i )
      {
        v8 = 36 * v31 + 6 * i;
        v9 = *(int *)((char *)&dword_131504 + 6 * i);
        *(_WORD *)&byte_9C062[v8 + 4] = word_131508[3 * i];
        *(_DWORD *)&byte_9C062[v8] = v9;
      }
      //fix
      /*
      v10 = MK_FP(*(_WORD *)&byte_9C068[36 * v31 + 4], *(_DWORD *)&byte_9C068[36 * v31])(
              __readgsdword(a4 + 16),
              __readgsword(a4 + 20),
              v31,
              dword_9EF0C);*/
      v28 = v10;
      if ( !v10 )
        goto LABEL_47;
      v30 = v28;
      break;
    case 40968:
      v27 = v7;
      v26 = sub_689F3();
      for ( i = 0; i < 6; ++i )
      {
        v17 = 36 * v31 + 6 * i;
        v18 = *(int *)((char *)&dword_1314C8 + 6 * i);
        *(_WORD *)&byte_9C062[v17 + 4] = word_1314CC[3 * i];
        *(_DWORD *)&byte_9C062[v17] = v18;
      }
      //fix
      /*
      v19 = MK_FP(*(_WORD *)&byte_9C068[36 * v31 + 4], *(_DWORD *)&byte_9C068[36 * v31])(
              __readgsdword(a4 + 16),
              __readgsword(a4 + 20),
              v31,
              __readgsdword(a2));*/
      v28 = v19;
      if ( !v19 )
        goto LABEL_47;
      v30 = v28;
      break;
    default:
      word_9EF0A = 0;
      dword_9EF06 = 0;
      v20 = __readgsword(a4 + 8);
      if ( !__readgsdword(a4 + 4) && v20 == word_9EF0A )
      {
        v28 = sub_68622_68B32((__int16)&v24, v6, a1, v31, (int *)&v29, (unsigned int)&v24);
        if ( v28 )
          return v28;
        __writegsword(a4 + 8, v25);
        __writegsdword(a4 + 4, v24);
        __writegsdword(a4 + 12, (unsigned int)v29);
        v22 = 3 * v31;
        word_9B160[v22] = v25;
        *(int *)((char *)&dword_9B15C + v22 * 2) = v24;
        dword_9B17A[v31] = (int)v29;
      }
      else
      {
        LOWORD(v25) = __readgsword(a4 + 8);
        v24 = __readgsdword(a4 + 4);
        v29 = (void (*)(_DWORD))__readgsdword(a4 + 12);
        v21 = 3 * v31;
        word_9B160[v21] = v25;
        *(int *)((char *)&dword_9B15C + v21 * 2) = v24;
        dword_9B17A[v31] = (int)v29;
      }
      sub_67486(v31);
      //fix
      /*sub_6A737(v29, v24, (unsigned __int16)v25, (int)&byte_9C062[36 * v31], __DS__);
      MK_FP(*(_WORD *)&byte_9C068[36 * v31 + 4], *(_DWORD *)&byte_9C068[36 * v31])(
        dword_9EF06,
        (unsigned __int16)word_9EF0A,
        dword_9EF0C,
        __readgsdword(a2));*/
LABEL_47:
      dword_9B18E[v31] = 1;
      __writegsdword(a6, v31);
      v30 = 0;
      break;
  }
  return v30;
}
// 60715: variable 'v6' is possibly undefined
// 9B15C: using guessed type int dword_9B15C;
// 9B160: using guessed type __int16 word_9B160[];
// 9B17A: using guessed type int dword_9B17A[5];
// 9B18E: using guessed type int dword_9B18E[5];
// 9B1B6: using guessed type int dword_9B1B6[6];
// 9EF06: using guessed type int dword_9EF06;
// 9EF0A: using guessed type __int16 word_9EF0A;
// 9EF0C: using guessed type int dword_9EF0C;
// 1314C8: using guessed type int dword_1314C8;
// 1314CC: using guessed type __int16 word_1314CC[];
// 1314E6: using guessed type int dword_1314E6;
// 1314EA: using guessed type __int16 word_1314EA[];
// 131504: using guessed type int dword_131504;
// 131508: using guessed type __int16 word_131508[];
// 131522: using guessed type int dword_131522;
// 131526: using guessed type __int16 word_131526[];
// 6035F: using guessed type int arg_C;
// 6035F: using guessed type unsigned int arg_4;

//----- (0006080C) --------------------------------------------------------
int sub_6080C(unsigned int a1, int a2)
{
  int v2; // eax
  unsigned int v4; // [esp+0h] [ebp-10h]

  if ( dword_9B18E[a1] )
  {
      //fix
      /*
    MK_FP(*(_WORD *)&byte_9C06E[36 * a1 + 4], *(_DWORD *)&byte_9C06E[36 * a1])(
      dword_9EF06,
      (unsigned __int16)word_9EF0A,
      dword_9EF0C,
      dword_9EF0C);*/
    if ( a2 )
    {
      v4 = dword_9B1B6[a1];
      if ( v4 < 0xA005 )
      {
        if ( v4 < 0xA002 || v4 > 0xA003 )
          goto LABEL_13;
      }
      else if ( v4 > 0xA005 && v4 != 40968 )
      {
LABEL_13:
        sub_68813(a1);
        goto LABEL_14;
      }
      //fix
      /*
      MK_FP(*(_WORD *)&byte_9C06E[36 * a1 + 4], *(_DWORD *)&byte_9C06E[36 * a1])(
        dword_9EF06,
        (unsigned __int16)word_9EF0A,
        a1,
        dword_9EF0C);*/
    }
LABEL_14:
    v2 = 3 * a1;
    word_9B160[v2] = 0;
    *(int *)((char *)&dword_9B15C + v2 * 2) = 0;
    dword_9B1B6[a1] = 0;
    dword_9B18E[a1] = 0;
    return 0;
  }
  return 1;
}
// 9B15C: using guessed type int dword_9B15C;
// 9B160: using guessed type __int16 word_9B160[];
// 9B18E: using guessed type int dword_9B18E[5];
// 9B1B6: using guessed type int dword_9B1B6[6];
// 9EF06: using guessed type int dword_9EF06;
// 9EF0A: using guessed type __int16 word_9EF0A;
// 9EF0C: using guessed type int dword_9EF0C;

//----- (0006091D) --------------------------------------------------------
int sub_6091D(int a1)
{
  unsigned int i; // [esp+8h] [ebp-4h]

  for ( i = 0; i < 0x10; ++i )
  {
    byte_9EBBF = i | 0xB0;
    byte_9EBC0 = 121;
    byte_9EBC1 = 0;
    //
    /*
    MK_FP(*(_WORD *)&byte_9C062[36 * a1 + 4], *(_DWORD *)&byte_9C062[36 * a1])(
      &byte_9EBBF,
      (unsigned __int16)__DS__,
      3,
      a1);*/
    byte_9EBBF = i | 0xB0;
    byte_9EBC0 = 123;
    byte_9EBC1 = 0;
    //fix
    /*
    MK_FP(*(_WORD *)&byte_9C062[36 * a1 + 4], *(_DWORD *)&byte_9C062[36 * a1])(
      &byte_9EBBF,
      (unsigned __int16)__DS__,
      3,
      a1);*/
  }
  //fix
  /*
  MK_FP(*(_WORD *)&byte_9C074[36 * a1 + 4], *(_DWORD *)&byte_9C074[36 * a1])(
    dword_9EF06,
    (unsigned __int16)word_9EF0A,
    a1,
    dword_9EF0C);*/
  return 0;
}
// 9EBBF: using guessed type char byte_9EBBF;
// 9EBC0: using guessed type char byte_9EBC0;
// 9EBC1: using guessed type char byte_9EBC1;
// 9EF06: using guessed type int dword_9EF06;
// 9EF0A: using guessed type __int16 word_9EF0A;
// 9EF0C: using guessed type int dword_9EF0C;

//----- (000609F4) --------------------------------------------------------
void sub_609F4()
{
  ;
}

//----- (00060BDC) --------------------------------------------------------
unsigned __int64 sub_60BDC(int a1)
{
  int v2; // [esp+0h] [ebp-1Ch]
  __int16 v3; // [esp+4h] [ebp-18h]
  unsigned int v4; // [esp+Ch] [ebp-10h]
  int v5; // [esp+10h] [ebp-Ch]
  int v6; // [esp+14h] [ebp-8h]
  FILE* v7; // [esp+18h] [ebp-4h]

  v5 = 0;
  v3 = 0;
  v2 = 0;
  v6 = GetRNCFilesize_63910_63E20((Pathstruct*)a1);
  if ( v6 > 0 )
  {
    v7 = DataFileIO::CreateOrOpenFile((char*)a1, 514);
    if ( v7 != nullptr )
    {
      v5 = (int)malloc_42540_42880(v6);
      if ( v5 )
      {
        if ( DataFileIO::Read(v7, (uint8_t*)v5, v6) != v6 )
          v5 = 0;
      }
    }
    DataFileIO::Close(v7);
  }
  if ( v5 )
  {
    //fix v3 = __DS__;
    v2 = v5;
  }
  LOWORD(v4) = v3;
  return __PAIR64__(v4, v2);
}
// 60C8B: variable 'v4' is possibly undefined

//----- (00060CE0) --------------------------------------------------------
void DrawBitmap_60CE0_611F0(__int16 a1, __int16 a2, TypeTab* a3)//231CE0_
{
  DrawBitmap_60D65_61275(a3->dim, a2, a1, a3->Tab_0, 0, 0);
}
// 60D15: variable 'v4' is possibly undefined
// 12EFF4: using guessed type int dword_12EFF4;

//----- (00060D18) --------------------------------------------------------
void DrawBitmap_60D18_61228(__int16 a1, __int16 a2, TypeTab* a3)
{
  DrawBitmap_60D65_61275(a3->dim, a2, a1, a3->Tab_0, 0, 0);
}
// 60D4D: variable 'v4' is possibly undefined
// 12EFF4: using guessed type int dword_12EFF4;

//----- (00060D50) --------------------------------------------------------
void sub_60D50_61260(TypeTabDimm a1, int a2, int a3, uint8_t* sprite, unsigned __int8 a5, char a6)
{
  DrawBitmap_60D65_61275(a1, a2, a3, sprite, a5, a6);
}

//SYNCHRONIZED WITH REMC1
void DrawBitmap_60D65_61275(TypeTabDimm a1x, int a2, int a3, uint8_t* sprite, unsigned __int8 a5, char a6)//231D65_
{
  //int v6; // edi
  _BYTE *v7; // edi
  int v8; // ecx
  int v9; // eax
  _BYTE *v10; // ebx
  char v11; // al
  char v12; // al
  char v13; // al
  _BYTE *v14; // edi
  int v15; // ecx
  int v16; // eax
  _BYTE *v17; // ebx
  char v18; // al
  char v19; // al
  char v20; // al
  uint8* v21; // edi
  unsigned int v22; // ecx
  int v23; // eax
  uint8* v24; // ebx
  uint8* v25; // edi
  char v26; // al
  uint8_t* v27; // esi
  uint8* v28; // edi
  unsigned int v29; // ecx
  int v30; // eax
  uint8* v31; // ebx
  uint8* v32; // edi
  char v33; // al
  uint8_t* v34; // esi
  int v35; // ebp
  _BYTE *v36; // edi
  int v37; // ecx
  _BYTE *v38; // ebx
  char v39; // al
  int v40; // eax
  _BYTE *v41; // edi
  int v42; // ecx
  unsigned __int8 i; // dl
  char v44; // al
  char v45; // al
  char v46; // cc
  char v47; // dl
  char v48; // al
  uint8* v49; // edi
  char v50; // al
  char v51; // dl
  char v52; // al
  char v53; // dl
  unsigned int v54; // ebx
  const void *v55; // esi
  uint8* v56; // edi
  unsigned int v57; // ecx
  int v58; // eax
  uint8* v59; // ebx
  uint8* v60; // edi
  uint8* v61; // edi
  unsigned int v62; // ecx
  int v63; // eax
  uint8* v64; // ebx
  uint8* v65; // edi
  char v66; // al
  uint8* v67; // esi
  uint8* v68; // edi
  int v69; // ebx
  _BYTE *v70; // edi
  _BYTE *v71; // edx
  int v72; // ecx
  char v73; // al
  char v74; // al
  char v75; // al
  char v76; // al
  int v77; // ebx
  _BYTE *v78; // edi
  int v79; // ecx
  int v80; // eax
  _BYTE *v81; // ebx
  char v82; // al
  int v83; // ebx
  _BYTE *v84; // edi
  int v85; // ecx
  int v86; // eax
  _BYTE *v87; // ebx
  char v88; // al
  _BYTE *v89; // edi
  int v90; // ecx
  int v91; // ebx
  int v92; // eax
  _BYTE *v93; // ebx
  char v94; // al
  unsigned int v95; // ebx
  _BYTE *v96; // edi
  _BYTE *v97; // edx
  int v98; // ecx
  char v99; // al
  char v100; // al
  char v101; // al
  char v102; // al
  _BYTE *v103; // edi
  int v104; // ecx
  int v105; // ebx
  _BYTE *v106; // ebx
  int v107; // eax
  char v108; // al
  _BYTE *v109; // edi
  int v110; // ecx
  int v111; // ebx
  _BYTE *v112; // ebx
  int v113; // eax
  char v114; // al
  unsigned int v115; // ebx
  _BYTE *v116; // edi
  _BYTE *v117; // edx
  int v118; // ecx
  char v119; // al
  char v120; // al
  char v121; // al
  char v122; // al
  int v123; // eax
  int v124; // edi
  int v125; // eax
  int v126; // eax
  char v127; // al
  int v128; // eax
  uint8_t* v129; // [esp-4h] [ebp-Ch]
  unsigned __int8 v130; // [esp+2h] [ebp-6h]
  //unsigned __int8 v131; // [esp+2h] [ebp-6h]
  //unsigned __int8 v132; // [esp+2h] [ebp-6h]
  //unsigned __int8 v133; // [esp+2h] [ebp-6h]
  unsigned __int8 v134; // [esp+2h] [ebp-6h]
  //unsigned __int8 v135; // [esp+2h] [ebp-6h]
  //unsigned __int8 v136; // [esp+2h] [ebp-6h]
  unsigned __int8 v137; // [esp+2h] [ebp-6h]
  char v138; // [esp+3h] [ebp-5h]
  char v139; // [esp+3h] [ebp-5h]
  _BYTE *v140; // [esp+4h] [ebp-4h]
  uint8* v141; // [esp+4h] [ebp-4h]

  //fix
  v46 = 0;
  //fix

  if ( !a1x.y )
    return;
  uint8* scrPointer = &begWscreen_2ECFF4_2ECFE4[viewportBegX_12F008_12EFF8 + scrWidth_12EFF0_12EFE0 * viewportBegY_12F018_12F008];
  if ( (typeResolution_12F02E_12F01E & 1) != 0 )
  {
    a1x.x >>= 1;
    a1x.y >>= 1;
    a3 >>= 1;
    a2 >>= 1;
  }
  if ( a2 < 0 )
  {
    if ( (word_9ADFC & 2) != 0 )
    {
      v126 = a2 + a1x.y;
      v46 = (v126 + 1 < 0) ^ __OFADD__(1, v126) | (v126 == -1);
      v127 = v126 + 1;
      if ( v46 )
        return;
      a2 = -1;
      a1x.y = v127;
    }
    else
    {
      v128 = a2 + a1x.y;
      if ( (v128 < 0) ^ __OFADD__(a2, a1x.y) | (v128 == 0) )
        return;
      a1x.y = v128;
      BYTE1(v128) = 0;
      do
      {
        while ( 1 )
        {
          LOBYTE(v128) = *sprite++;
          if ( !(_BYTE)v128 )
            break;
          if ( (v128 & 0x80u) == 0 )
              sprite += v128;
        }
        ++a2;
      }
      while ( a2 );
    }
  }
  else if ( a2 + a1x.y >= dword_12F028_12F018 )
  {
    if ( (word_9ADFC & 2) != 0 )
    {
      if ( a2 + 1 >= dword_12F028_12F018 )
        return;
      v123 = a1x.y + a2 + 1 - dword_12F028_12F018;
      a1x.y = dword_12F028_12F018 - (a2 + 1);
      v124 = v123;
      v125 = 0;
      do
      {
        while ( 1 )
        {
          LOBYTE(v125) = *sprite++;
          if ( !(_BYTE)v125 )
            break;
          if ( (v125 & 0x80u) == 0 )
              sprite += v125;
        }
        --v124;
      }
      while ( v124 );
      scrPointer = begWscreen_2ECFF4_2ECFE4;
    }
    else
    {
      if ( dword_12F028_12F018 <= a2 )
        return;
      a1x.y = dword_12F028_12F018 - a2;
    }
  }
  if ( a3 >= 0 )
  {
    if ( a3 + a1x.x >= dword_12F000_12EFF0 )
    {
      if ( word_9ADFC )
      {
        if ( (word_9ADFC & 1) != 0 )
        {
          if ( (word_9ADFC & 2) != 0 )
          {
            if ( dword_12F024_12F014 - a3 >= 0 )
            {
              v77 = a1x.x + a3;
              v78 = &scrPointer[scrWidth_12EFF0_12EFE0 * (a1x.y + a2) + v77];
              v79 = 0;
              a1x.x = dword_12F024_12F014 - v77 - 2;
              //v131 = a1x.x;
              v80 = -1;
              v81 = v78;
              do
              {
                while ( 1 )
                {
                  while ( 1 )
                  {
                    LOBYTE(v80) = *sprite++;
                    if ( (v80 & 0x80u) == 0 )
                      break;
                    v78 += v80;
                    a1x.x -= v80;
                  }
                  if ( !(_BYTE)v80 )
                    break;
                  LOBYTE(v79) = v80;
                  do
                  {
                    v82 = *sprite++;
                    a1x.x++;
                    if ( (a1x.x & 0x80u) == 0 )
                      *v78 = v82;
                    --v78;
                    --v79;
                  }
                  while ( v79 );
                }
                v81 -= scrWidth_12EFF0_12EFE0;
                v78 = v81;
                //a1 = __PAIR16__(a1x.y, v131) - 256;
                a1x.y--;//fix
                //a1x.x= v131;//fix
              }
              while ( a1x.y );
            }
          }
          else if ( dword_12F024_12F014 - a3 >= 0 )
          {
            v83 = a1x.x + a3;
            v84 = &scrPointer[scrWidth_12EFF0_12EFE0 * a2 + v83];
            v85 = 0;
            a1x.x = dword_12F024_12F014 - v83 - 2;
            //v132 = a1x.x;
            v86 = -1;
            v87 = v84;
            do
            {
              while ( 1 )
              {
                while ( 1 )
                {
                  LOBYTE(v86) = *sprite++;
                  if ( (v86 & 0x80u) == 0 )
                    break;
                  v84 += v86;
                  a1x.x -= v86;
                }
                if ( !(_BYTE)v86 )
                  break;
                LOBYTE(v85) = v86;
                do
                {
                  v88 = *sprite++;
                  a1x.x++;
                  if ( (a1x.x & 0x80u) == 0 )
                    *v84 = v88;
                  --v84;
                  --v85;
                }
                while ( v85 );
              }
              v87 += scrWidth_12EFF0_12EFE0;
              v84 = v87;
              //a1 = __PAIR16__(a1x.y, v132) - 256;
              a1x.y--;
              //a1x.x = v132;
            }
            while ( a1x.y );
          }
        }
        else if ( (word_9ADFC & 2) != 0 )
        {
          v89 = &scrPointer[scrWidth_12EFF0_12EFE0 * (a1x.y + a2) + a3];
          v90 = 0;
          v91 = dword_12F024_12F014 - a3;
          if ( v91 >= 0 )
          {
            a1x.x = v91;
            //v133 = v91;
            v92 = -1;
            v93 = v89;
            do
            {
              while ( 1 )
              {
                while ( 1 )
                {
                  LOBYTE(v92) = *sprite++;
                  if ( (v92 & 0x80u) == 0 )
                    break;
                  v89 -= v92;
                  a1x.x += v92;
                }
                if ( !(_BYTE)v92 )
                  break;
                LOBYTE(v90) = v92;
                do
                {
                  v94 = *sprite++;
                  a1x.x--;
                  if ( (a1x.x & 0x80u) == 0 )
                    *v89++ = v94;
                  --v90;
                }
                while ( v90 );
              }
              v93 -= scrWidth_12EFF0_12EFE0;
              v89 = v93;
              //a1 = __PAIR16__(a1x.y, v133) - 256;
              a1x.y--;
            }
            while ( a1x.y );
          }
        }
      }
      else
      {
        v68 = &scrPointer[a3];
        v69 = dword_12F024_12F014 - a3;
        if ( v69 >= 0 )
        {
          v70 = (_BYTE *)(scrWidth_12EFF0_12EFE0 * a2 + v68);
          BYTE1(v69) = a1x.y;
          v130 = v69;
          v71 = v70;
          v72 = 0;
          do
          {
            while ( 1 )
            {
              while ( 1 )
              {
                v73 = *sprite++;
                if ( v73 >= 0 )
                  break;
                v46 = ((char)(v73 + v69) < 0) ^ __OFADD__(v73, (_BYTE)v69) | (v73 + (_BYTE)v69 == 0);
                LOBYTE(v69) = v73 + v69;
                if ( !v46 )
                {
                  v70 -= v73;
                  v75 = *sprite++;
                  LOBYTE(v72) = v75;
                  do
                  {
                    v76 = *sprite++;
                    LOBYTE(v69) = v69 - 1;
                    if ( (v69 & 0x80u) == 0 )
                      *v70++ = v76;
                    --v72;
                  }
                  while ( v72 );
                }
              }
              if ( !v73 )
                break;
              LOBYTE(v72) = v73;
              do
              {
                v74 = *sprite++;
                LOBYTE(v69) = v69 - 1;
                if ( (v69 & 0x80u) == 0 )
                  *v70++ = v74;
                --v72;
              }
              while ( v72 );
            }
            v71 += scrWidth_12EFF0_12EFE0;
            v70 = v71;
            LOWORD(v69) = __PAIR16__(BYTE1(v69), v130) - 256;
          }
          while ( BYTE1(v69) );
        }
      }
    }
    else if ( (word_9ADFC & 1) != 0 )
    {
      if ( (word_9ADFC & 2) != 0 )
      {
        v7 = &scrPointer[scrWidth_12EFF0_12EFE0 * (a1x.y + a2) + a1x.x + a3];
        v8 = 0;
        v9 = -1;
        v10 = v7;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              LOBYTE(v9) = *sprite++;
              if ( (v9 & 0x80u) == 0 )
                break;
              v7 += v9;
              v12 = *sprite++;
              LOBYTE(v8) = v12;
              do
              {
                v13 = *sprite++;
                *v7-- = v13;
                --v8;
              }
              while ( v8 );
            }
            if ( !(_BYTE)v9 )
              break;
            LOBYTE(v8) = v9;
            do
            {
              v11 = *sprite++;
              *v7-- = v11;
              --v8;
            }
            while ( v8 );
          }
          v10 -= scrWidth_12EFF0_12EFE0;
          v7 = v10;
          --a1x.y;
        }
        while ( a1x.y );
      }
      else
      {
        v14 = &scrPointer[scrWidth_12EFF0_12EFE0 * a2 + a1x.x + a3];
        v15 = 0;
        v16 = -1;
        v17 = v14;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              LOBYTE(v16) = *sprite++;
              if ( (v16 & 0x80u) == 0 )
                break;
              v14 += v16;
              v19 = *sprite++;
              LOBYTE(v15) = v19;
              do
              {
                v20 = *sprite++;
                *v14-- = v20;
                --v15;
              }
              while ( v15 );
            }
            if ( !(_BYTE)v16 )
              break;
            LOBYTE(v15) = v16;
            do
            {
              v18 = *sprite++;
              *v14-- = v18;
              --v15;
            }
            while ( v15 );
          }
          v17 += scrWidth_12EFF0_12EFE0;
          v14 = v17;
          --a1x.y;
        }
        while ( a1x.y );
      }
    }
    else if ( word_9ADFC )
    {
      if ( (word_9ADFC & 2) != 0 )
      {
        v28 = &scrPointer[scrWidth_12EFF0_12EFE0 * (a1x.y + a2) + a3];
        v29 = 0;
        v30 = -1;
        v31 = v28;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              LOBYTE(v30) = *sprite++;
              if ( (v30 & 0x80u) == 0 )
                break;
              v32 = &v28[-v30];
              v33 = *sprite;
              v34 = sprite + 1;
              LOBYTE(v29) = v33;
              qmemcpy(v32, v34, v29);
              sprite = &v34[v29];
              v28 = &v32[v29];
              v29 = 0;
            }
            if ( !(_BYTE)v30 )
              break;
            LOBYTE(v29) = v30;
            qmemcpy(v28, sprite, v29);
            sprite += v29;
            v28 += v29;
            v29 = 0;
          }
          v31 -= scrWidth_12EFF0_12EFE0;
          v28 = v31;
          --a1x.y;
        }
        while ( a1x.y );
      }
      else if ( (word_9ADFC & 4) != 0 )
      {
        v35 = dword_9AFA0;
        v36 = &scrPointer[scrWidth_12EFF0_12EFE0 * a2 + a3];
        v37 = 0;
        v38 = v36;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v39 = *sprite++;
              if ( v39 >= 0 )
                break;
              v36 -= v39;
            }
            if ( !v39 )
              break;
            LOBYTE(v37) = v39;
            v40 = (unsigned __int8)v39;
            do
            {
              LOBYTE(v40) = *sprite++;
              BYTE1(v40) = *v36;
              *v36++ = *(_BYTE *)(v40 + v35);
              --v37;
            }
            while ( v37 );
          }
          v38 += scrWidth_12EFF0_12EFE0;
          v36 = v38;
          --a1x.y;
        }
        while ( a1x.y );
      }
      else if ( (word_9ADFC & 8) != 0 )
      {
        v41 = &scrPointer[scrWidth_12EFF0_12EFE0 * a2 + a3];
        v42 = 0;
        v140 = v41;
        v138 = a1x.y;
        for ( i = a5; ; i = a5 )
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v44 = *sprite++;
              if ( v44 >= 0 )
                break;
              v42 = (unsigned __int8)-v44;
              do
              {
                v46 = (char)i-- < 1;
                if ( v46 )
                {
                  i = a5;
                  ++v41;
                }
                --v42;
              }
              while ( v42 );
            }
            if ( !v44 )
              break;
            LOBYTE(v42) = v44;
            do
            {
              v45 = *sprite++;
              v46 = (char)i-- < 1;
              if ( v46 )
              {
                i = a5;
                *v41++ = v45;
              }
              --v42;
            }
            while ( v42 );
          }
          if ( !--v138 )
            break;
          v47 = a6;
          while ( --v47 >= 0 )
          {
            while ( 1 )
            {
              do
                v48 = *sprite++;
              while ( v48 < 0 );
              if ( !v48 )
                break;
              sprite += (unsigned __int8)v48;
            }
          }
          v140 += scrWidth_12EFF0_12EFE0;
          v41 = v140;
        }
      }
      else if ( (word_9ADFC & 0x20) != 0 )
      {
        v49 = &scrPointer[scrWidth_12EFF0_12EFE0 * a2 + a3];
        v141 = (uint8*)v49;
        v139 = a1x.y;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              v50 = *sprite++;
              if ( v50 >= 0 )
                break;
              v49 += (unsigned __int16)(a5 * (unsigned __int8)-v50);
            }
            if ( !v50 )
              break;
            v51 = v50;
            do
            {
              v52 = *sprite++;
              memset(v49, v52, a5);
              v49 += a5;
              v46 = v51-- <= 1;
            }
            while ( !v46 );
          }
          v53 = a6 - 1;
          if ( a6 > 1 )
          {
            v129 = sprite;
            v54 = (unsigned int)((char*)v49 - (char*)v141);
            do
            {
              v55 = v141;
              v141 += scrWidth_12EFF0_12EFE0;
              qmemcpy(v141, v55, v54);
              v46 = v53-- <= 1;
            }
            while ( !v46 );
            sprite = v129;
          }
          v141 += scrWidth_12EFF0_12EFE0;
          v49 = v141;
          --v139;
        }
        while ( v139 );
      }
      else if ( (word_9ADFC & 0x40) != 0 )
      {
        v56 = &scrPointer[scrWidth_12EFF0_12EFE0 * a2 + a3];
        v57 = 0;
        v58 = -1;
        v59 = v56;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              LOBYTE(v58) = *sprite++;
              if ( (v58 & 0x80u) == 0 )
                break;
              v60 = &v56[-v58];
              LOBYTE(v57) = *sprite;
              sprite += v57 + 1;
              memset(v60, a5, v57);
              v56 = &v60[v57];
              v57 = 0;
            }
            if ( !(_BYTE)v58 )
              break;
            LOBYTE(v57) = v58;
            sprite += v57;
            memset(v56, a5, v57);
            v56 += v57;
            v57 = 0;
          }
          v59 += scrWidth_12EFF0_12EFE0;
          v56 = v59;
          --a1x.y;
        }
        while ( a1x.y );
      }
      else
      {
        v61 = &scrPointer[scrWidth_12EFF0_12EFE0 * a2 + a3];
        v62 = 0;
        v63 = -1;
        v64 = v61;
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              LOBYTE(v63) = *sprite++;
              if ( (v63 & 0x80u) == 0 )
                break;
              v65 = &v61[-v63];
              v66 = *sprite;
              v67 = sprite + 1;
              LOBYTE(v62) = v66;
              qmemcpy(v65, v67, v62);
              sprite = &v67[v62];
              v61 = &v65[v62];
              v62 = 0;
            }
            if ( !(_BYTE)v63 )
              break;
            LOBYTE(v62) = v63;
            qmemcpy(v61, sprite, v62);
            sprite += v62;
            v61 += v62;
            v62 = 0;
          }
          v64 += scrWidth_12EFF0_12EFE0;
          v61 = v64;
          --a1x.y;
        }
        while ( a1x.y );
      }
    }
    else
    {
      v21 = &scrPointer[scrWidth_12EFF0_12EFE0 * a2 + a3];
      v22 = 0;
      v23 = -1;
      v24 = v21;
      do
      {
        while ( 1 )
        {
          while ( 1 )
          {
            LOBYTE(v23) = *sprite++;
            if ( (v23 & 0x80u) == 0 )
              break;
            v25 = &v21[-v23];
            v26 = *sprite;
            v27 = sprite + 1;
            LOBYTE(v22) = v26;
            qmemcpy(v25, v27, v22);
            sprite = &v27[v22];
            v21 = &v25[v22];
            v22 = 0;
          }
          if ( !(_BYTE)v23 )
            break;
          LOBYTE(v22) = v23;
          qmemcpy(v21, sprite, v22);
          sprite += v22;
          v21 += v22;
          v22 = 0;
        }
        v24 += scrWidth_12EFF0_12EFE0;
        v21 = v24;
        --a1x.y;
      }
      while ( a1x.y );
    }
    return;
  }
  if ( !word_9ADFC )
  {
    v95 = -a3;
    if ( a1x.x <= v95 )
      return;
    v96 = &scrPointer[scrWidth_12EFF0_12EFE0 * a2];
    BYTE1(v95) = a1x.y;
    v97 = v96;
    v134 = v95;
    v98 = 0;
    while ( 1 )
    {
      while ( 1 )
      {
        while ( 1 )
        {
          v99 = *sprite++;
          if ( v99 < 0 )
            break;
          if ( v99 )
          {
            LOBYTE(v98) = v99;
            do
            {
              v100 = *sprite++;
              LOBYTE(v95) = v95 - 1;
              if ( (v95 & 0x80u) != 0 )
                *v96++ = v100;
              --v98;
            }
            while ( v98 );
          }
          else
          {
            v97 += scrWidth_12EFF0_12EFE0;
            v96 = v97;
            LOWORD(v95) = __PAIR16__(BYTE1(v95), v134) - 256;
            if ( !BYTE1(v95) )
              return;
          }
        }
        if ( (char)v95 > 0 )
          break;
LABEL_179:
        v96 -= v99;
        v101 = *sprite++;
        LOBYTE(v98) = v101;
        do
        {
          v102 = *sprite++;
          LOBYTE(v95) = v95 - 1;
          if ( (v95 & 0x80u) != 0 )
            *v96++ = v102;
          --v98;
        }
        while ( v98 );
      }
      LOBYTE(v95) = v99 + v95;
      if ( (v95 & 0x80u) != 0 )
      {
        v99 = v95;
        goto LABEL_179;
      }
    }
  }
  if ( (word_9ADFC & 1) == 0 )
  {
    if ( (word_9ADFC & 2) == 0 )
      return;
    v115 = -a3;
    if ( a1x.x <= v115 )
      return;
    v116 = &scrPointer[scrWidth_12EFF0_12EFE0 * (a1x.y + a2)];
    BYTE1(v115) = a1x.y;
    v117 = v116;
    v137 = v115;
    v118 = 0;
    while ( 1 )
    {
      while ( 1 )
      {
        while ( 1 )
        {
          v119 = *sprite++;
          if ( v119 < 0 )
            break;
          if ( v119 )
          {
            LOBYTE(v118) = v119;
            do
            {
              v120 = *sprite++;
              LOBYTE(v115) = v115 - 1;
              if ( (v115 & 0x80u) != 0 )
                *v116++ = v120;
              --v118;
            }
            while ( v118 );
          }
          else
          {
            v117 -= scrWidth_12EFF0_12EFE0;
            v116 = v117;
            LOWORD(v115) = __PAIR16__(BYTE1(v115), v137) - 256;
            if ( !BYTE1(v115) )
              return;
          }
        }
        if ( (char)v115 > 0 )
          break;
LABEL_225:
        v116 -= v119;
        v121 = *sprite++;
        LOBYTE(v118) = v121;
        do
        {
          v122 = *sprite++;
          LOBYTE(v115) = v115 - 1;
          if ( (v115 & 0x80u) != 0 )
            *v116++ = v122;
          --v118;
        }
        while ( v118 );
      }
      LOBYTE(v115) = v119 + v115;
      if ( (v115 & 0x80u) != 0 )
      {
        v119 = v115;
        goto LABEL_225;
      }
    }
  }
  if ( (word_9ADFC & 2) != 0 )
  {
    v103 = &scrPointer[scrWidth_12EFF0_12EFE0 * (a1x.y + a2) + a1x.x + a3];
    v104 = 0;
    v105 = a1x.x + a3 + 1;
    if ( v105 >= 0 )
    {
        a1x.x = v105;
      //v135 = v105;
      v106 = v103;
      v107 = -1;
      do
      {
        while ( 1 )
        {
          while ( 1 )
          {
            LOBYTE(v107) = *sprite++;
            if ( (v107 & 0x80u) == 0 )
              break;
            v103 += v107;
            a1x.x += v107;
          }
          if ( !(_BYTE)v107 )
            break;
          LOBYTE(v104) = v107;
          do
          {
            v108 = *sprite++;
            a1x.x--;
            if ( (a1x.x & 0x80u) == 0 )
              *v103 = v108;
            --v103;
            --v104;
          }
          while ( v104 );
        }
        v106 -= scrWidth_12EFF0_12EFE0;
        v103 = v106;
        //a1 = __PAIR16__(a1x.y, v135) - 256;
        a1x.y--;
      }
      while ( a1x.y );
    }
  }
  else
  {
    v109 = &scrPointer[scrWidth_12EFF0_12EFE0 * a2 + a1x.x + a3];
    v110 = 0;
    v111 = a1x.x + a3 + 1;
    if ( v111 >= 0 )
    {
      a1x.x = v111;
      //v136 = v111;
      v112 = v109;
      v113 = -1;
      do
      {
        while ( 1 )
        {
          while ( 1 )
          {
            LOBYTE(v113) = *sprite++;
            if ( (v113 & 0x80u) == 0 )
              break;
            v109 += v113;
            a1x.x += v113;
          }
          if ( !(_BYTE)v113 )
            break;
          LOBYTE(v110) = v113;
          do
          {
            v114 = *sprite++;
            a1x.x--;
            if ( (a1x.x & 0x80u) == 0 )
              *v109 = v114;
            --v109;
            --v110;
          }
          while ( v110 );
        }
        v112 += scrWidth_12EFF0_12EFE0;
        v109 = v112;
        //a1 = __PAIR16__(a1x.y, v136) - 256;
        a1x.y--;
      }
      while ( a1x.y );
    }
  }
}

//----- (00061594) --------------------------------------------------------
int sub_61594(unsigned __int16 a1, unsigned __int16 a2, __int16 a3)
{
  int v3; // eax
  int v5; // [esp+4h] [ebp-4h]

  //fix
  v5 = 0;
  //fix

  if ( a1 < 0x280u && a2 < 0x190u )
  {
    v3 = (int)a2 >> 1;
    LOWORD(v3) = 320 * v3;
    *(_BYTE *)(begWscreen_2ECFF4_2ECFE4 + v3 + ((int)a1 >> 1)) = a3;
  }
  return v5;
}
// 615CE: variable 'v5' is possibly undefined
// 12EFF4: using guessed type int dword_12EFF4;

//----- (000615D4) --------------------------------------------------------
int sub_615D4(unsigned __int16 a1, unsigned __int16 a2, __int16 a3)
{
  int v4; // [esp+4h] [ebp-4h]

  //fix
  v4 = 0;
  //fix;

  if ( a1 < 0x280u && a2 < 0x1E0u )
    *(_BYTE *)(begWscreen_2ECFF4_2ECFE4 + 640 * a2 + a1) = a3;
  return v4;
}
// 6160B: variable 'v4' is possibly undefined
// 12EFF4: using guessed type int dword_12EFF4;

void sub_61610_61B20(Pathstruct* pathstruct)//232610
{
  while ( 1 )
  {
    if ( !pathstruct->colorPalette_var28)
      break;
    sub_634A0_639B0(pathstruct);
    pathstruct++;
  }
}

//----- (00061640) --------------------------------------------------------
void sub_61640(
        unsigned __int16 a1,
        unsigned __int16 a2,
        unsigned __int16 a3,
        unsigned __int16 a4,
        unsigned __int16 a5)
{
  _BYTE *v5; // edi
  __int16 v6; // dx
  int v7; // ebx
  int v8; // esi
  int v9; // ecx
  int v10; // [esp+0h] [ebp-4h]
  unsigned __int16 v11; // [esp+14h] [ebp+10h]

  v5 = (_BYTE *)(320 * (a2 >> 1) + begWscreen_2ECFF4_2ECFE4 + (a1 >> 1));
  v6 = a4 >> 1;
  v11 = a3 >> 1;
  v10 = (unsigned __int16)(320 - v11);
  if ( (word_9ADFC & 4) != 0 )
  {
    v7 = a5;
    v8 = dword_9AFA0;
    do
    {
      v9 = v11;
      do
      {
        BYTE1(v7) = *v5;
        *v5++ = *(_BYTE *)(v7 + v8);
        --v9;
      }
      while ( v9 );
      v5 += v10;
      --v6;
    }
    while ( v6 );
  }
  else
  {
    do
    {
      memset(v5, a5, v11);
      v5 += v10 + v11;
      --v6;
    }
    while ( v6 );
  }
}
// 9ADFC: using guessed type __int16 word_9ADFC;
// 9AFA0: using guessed type int dword_9AFA0;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (000616C0) --------------------------------------------------------
void sub_616C0(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3, __int16 a4, unsigned __int16 a5)
{
  _BYTE *v5; // edi
  int v7; // ebx
  int v8; // esi
  int v9; // ecx
  int v10; // [esp+0h] [ebp-4h]

  v5 = (_BYTE *)(640 * a2 + begWscreen_2ECFF4_2ECFE4 + a1);
  v10 = (unsigned __int16)(640 - a3);
  if ( (word_9ADFC & 4) != 0 )
  {
    v7 = a5;
    v8 = dword_9AFA0;
    do
    {
      v9 = a3;
      do
      {
        BYTE1(v7) = *v5;
        *v5++ = *(_BYTE *)(v7 + v8);
        --v9;
      }
      while ( v9 );
      v5 += v10;
      --a4;
    }
    while ( a4 );
  }
  else
  {
    do
    {
      memset(v5, a5, a3);
      v5 += v10 + a3;
      --a4;
    }
    while ( a4 );
  }
}
// 9ADFC: using guessed type __int16 word_9ADFC;
// 9AFA0: using guessed type int dword_9AFA0;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (00061740) --------------------------------------------------------
int sub_61740(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5)
{
  __int16 v6; // [esp+1Ch] [ebp+1Ch]
  __int16 v7; // [esp+20h] [ebp+20h]

  v6 = a3 - 1;
  v7 = a4 - 1;
  sub_6B260(a1, a2, v6 + a1, a2, a5, 0);
  sub_6B260(v6 + a1, a2, v6 + a1, v7 + a2 + 1, a5, 0);
  sub_6B260(a1, v7 + a2, v6 + a1 + 1, v7 + a2, a5, 0);
  return sub_6B260(a1, a2, a1, v7 + a2, a5, 0);
}

//----- (00061810) --------------------------------------------------------
int sub_61810(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5)
{
  __int16 v6; // [esp+1Ch] [ebp+1Ch]
  __int16 v7; // [esp+20h] [ebp+20h]

  v6 = a3 - 1;
  v7 = a4 - 1;
  sub_6B378(a1, a2, v6 + a1, a2, a5, 0);
  sub_6B378(v6 + a1, a2, v6 + a1, v7 + a2 + 1, a5, 0);
  sub_6B378(a1, v7 + a2, v6 + a1 + 1, v7 + a2, a5, 0);
  return sub_6B378(a1, a2, a1, v7 + a2, a5, 0);
}

//----- (000618E0) --------------------------------------------------------
int sub_618E0(__int16 a1)
{
  int result; // eax
  int v2[13]; // [esp+0h] [ebp-78h] BYREF
  char v3[28]; // [esp+34h] [ebp-44h] BYREF
  int v4[7]; // [esp+50h] [ebp-28h] BYREF
  char v5[12]; // [esp+6Ch] [ebp-Ch] BYREF

  FixPerifery((char*)"GET MORE GRAPHICS INFO");

  memset(v2, 0, 50);
  HIWORD(v2[8]) = (unsigned int)dword_12F080_12F070x >> 4;
  LOWORD(v2[9]) = HIWORD(v2[8]);
  v2[0] = 0;
  v2[7] = 0x4501;
  v2[6] = a1;
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  memset(v5, 0, sizeof(v5));
  segread((uint32)v5);
  v4[0] = 768;
  v4[1] = 16;
  v4[5] = (int)v2;
  int386x(49, (uint32)v4, (uint32)v3, (uint32)v5);
  HIWORD(result) = HIWORD(dword_12F080_12F070x);
  LOWORD(result) = *(unsigned __int8 *)((char*)dword_12F080_12F070x + 4);
  word_12F084 = (unsigned __int8)result + (*(unsigned __int8 *)((char*)dword_12F080_12F070x + 5) << 8);
  return result;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 636BC: using guessed type _DWORD segread(_DWORD);
// 636E6: using guessed type _DWORD int386x(_DWORD, _DWORD, _DWORD, _DWORD);
// 12F080: using guessed type int dword_12F080_12F070;
// 12F084: using guessed type __int16 word_12F084;

//----- (000619B8) --------------------------------------------------------
int sub_619B8_61EC8(__int16 videoMode)
{
  char v2[28]; // [esp+0h] [ebp-38h] BYREF
  _WORD v3[14]; // [esp+1Ch] [ebp-1Ch] BYREF

  FixPerifery((char*)"SET VIDEOMOD");

  memset(v3, 0, sizeof(v3));
  memset(v2, 0, sizeof(v2));
  v3[0] = 0x4f02;
  v3[2] = videoMode;
  //int386(16, (uint32)v3, (uint32)v2);
  //videoMode = 0x101;//640x480 256 color
  //videoMode = 0x10e;//320x200 65536 color
  //videoMode = 0x111;//640x480 65536 color
  if (videoMode == 0x101)
  {
      VGA_Resize(640, 480);
      VGA_SetColors(8);
  }
  if (videoMode == 0x10e)
  {
      VGA_Resize(320, 200);
      VGA_SetColors(16);
  }
  if (videoMode == 0x111)
  {
      VGA_Resize(640, 480);
      VGA_SetColors(16);
  }
  return sub_618E0(videoMode);
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);

//----- (00061A1C) --------------------------------------------------------
void sub_61A1C_61F2C(__int16 a1)
{
  //int result; // eax

  FixPerifery((char*)"port0x3C8 2");
  //allert_error();

  word_9AFA4 = a1;
  //if ( (unsigned __int16)a1 >= 6u )
  //{
    //__outbyte(0x3C8u, 0);
    //__outbyte(0x3C9u, 0x3Fu);
    //__outbyte(0x3C9u, 0);
    //__outbyte(0x3C9u, 0);
  //}

  //test
//  VGA_Blit(begWscreen_2ECFF4_2ECFE4);
  //VGA_Blit(tempScreenBuffer_A0000);
  //test

  //fix __asm { int     10h; - VIDEO - VESA SuperVGA BIOS -  VESA SuperVGA BIOS - CPU VIDEO MEMORY CONTROL }
  //result = 0x4F05;//change memory for drawing
  //fix __asm { int     10h; - VIDEO - VESA SuperVGA BIOS -  VESA SuperVGA BIOS - CPU VIDEO MEMORY CONTROL }
}
// 9AFA4: using guessed type __int16 word_9AFA4;
// 12F080: using guessed type int dword_12F080_12F070;

//SYNCHRONIZED WITH REMC1
int sub_61AB0_61FC0()//232AB0
{
  int v1[13]; // [esp+0h] [ebp-7Ch] BYREF
  int v2[7]; // [esp+34h] [ebp-48h] BYREF
  char v3[28]; // [esp+50h] [ebp-2Ch] BYREF
  char v4[12]; // [esp+6Ch] [ebp-10h] BYREF

  FixPerifery((char*)"GET VIDEOMODES");
  /*
  memset(v1, 0, 50);
  //HIWORD(v1[8]) = (unsigned int)dword_12F080_12F070x >> 4;
  //LOWORD(v1[9]) = HIWORD(v1[8]);
  v1[0] = 0;
  v1[7] = 20224;
  v1[4] = 257;
  memset(v2, 0, sizeof(v2));
  memset(v3, 0, sizeof(v3));
  memset(v4, 0, sizeof(v4));
  segread((uint32)v4);
  v2[0] = 768;
  v2[1] = 16;
  v2[5] = (int)v1;
  */
  //int386x(49, (uint32)v2, (uint32)v3, (uint32)v4);
  //fix
  strcpy(dword_12F080_12F070x->text, "VESA");
  dword_12F080_12F070x->x = 0xC0;
  dword_12F080_12F070x->y = 0x100;  
  //fix
  return strncmp(dword_12F080_12F070x->text, "VESA", 4);
}

//----- (00061B90) --------------------------------------------------------
void sub_61B90_620A0(TColor* a1)//232B90_
{
    FixPerifery((char*)"initVga320");

    scrWidth_12EFF0_12EFE0 = 320;
    scrHeight_12EFF8_12EFE8 = 200;
    SetPalette_319A0_319E0(a1);
    ResizeScr_5C468_5C978();
    ViewportResize_65EB0_663C0(0, 0, 320, 200);
    /*
  char v2[28]; // [esp+0h] [ebp-38h] BYREF
  int v3[7]; // [esp+1Ch] [ebp-1Ch] BYREF


  v3[0] = 3840;
  int386(16, (uint32)v3, (uint32)v2);
  if ( !word_12F02C )
    word_12F02C = (unsigned __int8)v2[0];
  v3[0] = 19;
  pitch_12EFF0_12EFE0 = 320;
  dword_12EFF8_12EFE8 = 200;
  int386(16, (uint32)v3, (uint32)v2);
  */
}
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF8: using guessed type int dword_12EFF8_12EFE8;
// 12F02C: using guessed type __int16 word_12F02C;

//----- (00061C30) --------------------------------------------------------
void sub_61C30_62140(TColor* a1)//232C30_
{
  uint8 v2[28]; // [esp+0h] [ebp-38h] BYREF
  int v3[7]; // [esp+1Ch] [ebp-1Ch] BYREF

  FixPerifery((char*)"initVga640");

  v3[0] = 0xf00;
  //int386(0x10, (uint32)v3, (uint32)v2);
  if ( !word_12F02C )
    word_12F02C = v2[0];
  scrWidth_12EFF0_12EFE0 = 640;
  scrHeight_12EFF8_12EFE8 = 480;
  sub_619B8_61EC8(0x101);
  SetPalette_319A0_319E0(a1);
  ResizeScr_5C468_5C978();
  ViewportResize_65EB0_663C0(0, 0, 640, 480);
}
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 12EFF0: using guessed type int pitch_12EFF0_12EFE0;
// 12EFF8: using guessed type int dword_12EFF8_12EFE8;
// 12F02C: using guessed type __int16 word_12F02C;
// 61C30: using guessed type int var_1C[7];
// 61C30: using guessed type char var_38[28];

//----- (00061CC0) --------------------------------------------------------
void FadeInOut_61CC0_621D0(TColor* palette, unsigned __int8 a2, char a3)//232CC0_
{
  TColor palette2[256]; // [esp+0h] [ebp-30Ch] BYREF

  if ( a3 )
  {
    if ( byte_9AFA8 )
    {
      if ( a2 == ++word_12F690_12F680 )
        byte_9AFA8 = 0;
    }
    else
    {
      word_12F690_12F680 = 0;
      byte_9AFA8 = 1;
      sub_6B47C_6B98C(byte_12F090_12F080);
      if ( !palette)
        memset(byte_12F390_12F380, 0, 768);
    }
    if ( !palette)
        palette = byte_12F390_12F380;
    for ( int i = 0; i < 256; i++ )
    {
        palette2[i].red = byte_12F090_12F080[i].red + (palette[i].red - byte_12F090_12F080[i].red) * word_12F690_12F680 / a2;
        palette2[i].green = byte_12F090_12F080[i].green + (palette[i].green - byte_12F090_12F080[i].green) * word_12F690_12F680 / a2;
        palette2[i].blue = byte_12F090_12F080[i].blue + (palette[i].blue - byte_12F090_12F080[i].blue) * word_12F690_12F680 / a2;
    }
    //WaitForBeam_5CC54_5D164();
    SetPalette_319A0_319E0(palette2);
    fixWaitForBeam_5CC54_5D164();
  }
  else
  {
    sub_6B47C_6B98C(byte_12F090_12F080);
    if ( !palette)
    {
        palette = byte_12F390_12F380;
      memset(byte_12F390_12F380, 0, 768);
    }
    for ( word_12F690_12F680 = 0; a2 >= word_12F690_12F680; ++word_12F690_12F680 )
    {
      for ( int i = 0; i < 256; i++ )
      {
          palette2[i].red = byte_12F090_12F080[i].red + (palette[i].red - byte_12F090_12F080[i].red) * word_12F690_12F680 / a2;
          palette2[i].green = byte_12F090_12F080[i].green + (palette[i].green - byte_12F090_12F080[i].green) * word_12F690_12F680 / a2;
          palette2[i].blue = byte_12F090_12F080[i].blue + (palette[i].blue - byte_12F090_12F080[i].blue) * word_12F690_12F680 / a2;
      }
      //WaitForBeam_5CC54_5D164();
      SetPalette_319A0_319E0(palette2);
      fixWaitForBeam_5CC54_5D164();
    }
    byte_9AFA8 = 0;
  }
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 9AFA8: using guessed type char byte_9AFA8;
// 12F690: using guessed type __int16 word_12F690_12F680;
// 61CC0: using guessed type unsigned __int8 var_30C[768];

//----- (00061EC8) --------------------------------------------------------
void sub_61EC8()
{
  byte_9AFA8 = 0;
}
// 9AFA8: using guessed type char byte_9AFA8;

//----- (00061F90) --------------------------------------------------------
void sub_61F90()
{
  if ( byte_939E4 )
  {
    sub_5D010_5D520();
    while ( sub_559A0() )
      ;
    sub_661A4(dword_CC140, 0);
    sub_5DC91(dword_CC148);
    if ( !byte_939CC )
      sub_5D948();
    sub_64F78(dword_CC140, 1, 1);
    sub_6481C();
    sub_61610_61B20(&pathStrArray_258E00[PS25datasnds00dat]);
  }
}
// 939CC: using guessed type char byte_939CC;
// 939E4: using guessed type char byte_939E4;
// CC140: using guessed type int dword_CC140;
// CC148: using guessed type int dword_CC148;

//----- (00062020) --------------------------------------------------------
void sub_62020()
{
  if ( byte_939CC )
  {
    if ( word_939D2 )
    {
      sub_5F420(dword_CBFD8);
      sub_5F355(dword_CBFD8);
      sub_6091D(dword_CBFDC);
    }
    if ( byte_9AF9C )
      sub_6091D(dword_12F074);
    sub_6080C(dword_CBFDC, 1);
    if ( byte_9AF9C )
      sub_6080C(dword_12F074, 1);
    sub_5D948();
    sub_60335();
    if ( byte_CBFEF )
    {
      free_62128_62638((void*)dword_CBFE8);
      free_62128_62638((void*)dword_CBFE2);
    }
    if ( byte_9AF9C )
      free_62128_62638((void*)dword_12F07A);
    sub_61610_61B20(&pathStrArray_258E00[PS25datamusic00dat]);
  }
}
// 939CC: using guessed type char byte_939CC;
// 939D2: using guessed type __int16 word_939D2;
// 9AF9C: using guessed type char byte_9AF9C;
// CBFD8: using guessed type int dword_CBFD8;
// CBFDC: using guessed type int dword_CBFDC;
// CBFE2: using guessed type int dword_CBFE2;
// CBFE8: using guessed type int dword_CBFE8;
// CBFEF: using guessed type char byte_CBFEF;
// 12F074: using guessed type int dword_12F074;
// 12F07A: using guessed type int dword_12F07A;

void free_62128_62638(void* buffer)
{
    free_426E0_42A20(buffer);
}

//----- (00062128) --------------------------------------------------------
void free_62128_62638_orig(int a1)
{
  free_426E0_42A20((void*)a1);
}

//-----------------
//-----------------
typedef struct {
    int num;                   /* number of nodes in the tree */
    struct {
        unsigned long code;
        int codelen;
        int value;
    } table[32];
} huf_table;

typedef struct {
    unsigned long bitbuf;           /* holds between 16 and 32 bits */
    int bitcount;               /* how many bits does bitbuf hold? */
} bit_stream;
/*
 * Error returns
 */
#define RNC_FILE_IS_NOT_RNC    -1
#define RNC_HUF_DECODE_ERROR   -2
#define RNC_FILE_SIZE_MISMATCH -3
#define RNC_PACKED_CRC_ERROR   -4
#define RNC_UNPACKED_CRC_ERROR -5
#define RNC_HEADER_VAL_ERROR   -6
#define RNC_HUF_EXCEEDS_RANGE  -7

 /*
  * Flags to ignore errors
  */
#define RNC_IGNORE_FILE_IS_NOT_RNC    0x0001
#define RNC_IGNORE_HUF_DECODE_ERROR   0x0002
#define RNC_IGNORE_FILE_SIZE_MISMATCH 0x0004
#define RNC_IGNORE_PACKED_CRC_ERROR   0x0008
#define RNC_IGNORE_UNPACKED_CRC_ERROR 0x0010
#define RNC_IGNORE_HEADER_VAL_ERROR   0x0020
#define RNC_IGNORE_HUF_EXCEEDS_RANGE  0x0040

#define RNC_SIGNATURE 0x524E4301       /* "RNC\001" */ 

short crctab_ready = false;
unsigned short crctab[256];

unsigned long blong(unsigned char* p)
{
    unsigned long n;
    n = p[0];
    n = (n << 8) + p[1];
    n = (n << 8) + p[2];
    n = (n << 8) + p[3];
    return n;
}

unsigned long llong(unsigned char* p)
{
    unsigned long n;
    n = p[3];
    n = (n << 8) + p[2];
    n = (n << 8) + p[1];
    n = (n << 8) + p[0];
    return n;
}

unsigned long bword(unsigned char* p)
{
    unsigned long n;
    n = p[0];
    n = (n << 8) + p[1];
    return n;
}

unsigned long lword(unsigned char* p)
{
    unsigned long n;
    n = p[1];
    n = (n << 8) + p[0];
    return n;
}

long rnc_crc(void* data, unsigned long len)
{
    unsigned short val;
    int i, j;
    unsigned char* p = (unsigned char*)data;
    //computing CRC table
    if (!crctab_ready)
    {
        for (i = 0; i < 256; i++)
        {
            val = i;

            for (j = 0; j < 8; j++)
            {
                if (val & 1)
                    val = (val >> 1) ^ 0xA001;
                else
                    val = (val >> 1);
            }
            crctab[i] = val;
        }
        crctab_ready = true;
    }

    val = 0;
    while (len--)
    {
        val ^= *p++;
        val = (val >> 8) ^ crctab[val & 0xFF];
    }
    return val;
}

static void bitread_init(bit_stream* bs, unsigned char** p, unsigned char* pend)
{
    if (pend - (*p) >= 0)
        bs->bitbuf = lword(*p);
    else
        bs->bitbuf = 0;
    bs->bitcount = 16;
}

static void bit_advance(bit_stream* bs, int n, unsigned char** p, unsigned char* pend)
{
    bs->bitbuf >>= n;
    bs->bitcount -= n;
    if (bs->bitcount < 16)
    {
        (*p) += 2;
        if (pend - (*p) >= 0)
            bs->bitbuf |= (lword(*p) << bs->bitcount);
        bs->bitcount += 16;
    }
}

static unsigned long bit_peek(bit_stream* bs, unsigned long mask)
{
    return bs->bitbuf & mask;
}

static unsigned long bit_read(bit_stream* bs, unsigned long mask,
    int n, unsigned char** p, unsigned char* pend)
{
    unsigned long result = bit_peek(bs, mask);
    bit_advance(bs, n, p, pend);
    return result;
}

static unsigned long mirror(unsigned long x, int n) {
    unsigned long top = 1 << (n - 1), bottom = 1;
    while (top > bottom)
    {
        unsigned long mask = top | bottom;
        unsigned long masked = x & mask;
        if (masked != 0 && masked != mask)
            x ^= mask;
        top >>= 1;
        bottom <<= 1;
    }
    return x;
}

static void read_huftable(huf_table* h, bit_stream* bs,
    unsigned char** p, unsigned char* pend)
{
    int i, j, k, num;
    int leaflen[32];
    int leafmax;
    unsigned long codeb;           // big-endian form of code

    num = bit_read(bs, 0x1F, 5, p, pend);
    if (!num)
        return;

    leafmax = 1;
    for (i = 0; i < num; i++)
    {
        leaflen[i] = bit_read(bs, 0x0F, 4, p, pend);
        if (leafmax < leaflen[i])
            leafmax = leaflen[i];
    }

    codeb = 0L;
    k = 0;
    for (i = 1; i <= leafmax; i++)
    {
        for (j = 0; j < num; j++)
            if (leaflen[j] == i)
            {
                h->table[k].code = mirror(codeb, i);
                h->table[k].codelen = i;
                h->table[k].value = j;
                codeb++;
                k++;
            }
        codeb <<= 1;
    }

    h->num = k;
}

static long huf_read(huf_table* h, bit_stream* bs,
    unsigned char** p, unsigned char* pend)
{
    int i;
    unsigned long val;

    for (i = 0; i < h->num; i++)
    {
        unsigned long mask = (1 << h->table[i].codelen) - 1;
        if (bit_peek(bs, mask) == h->table[i].code)
            break;
    }
    if (i == h->num)
        return -1;
    bit_advance(bs, h->table[i].codelen, p, pend);

    val = h->table[i].value;

    if (val >= 2)
    {
        val = 1 << (val - 1);
        val |= bit_read(bs, val - 1, h->table[i].value - 1, p, pend);
    }
    return val;
}

static void bitread_fix(bit_stream* bs, unsigned char** p, unsigned char* pend)
{
    bs->bitcount -= 16;
    bs->bitbuf &= (1 << bs->bitcount) - 1; // remove the top 16 bits
    if (pend - (*p) >= 0)
        bs->bitbuf |= (lword(*p) << bs->bitcount);// replace with what's at *p
    bs->bitcount += 16;
}

long rnc_unpack(void* packed, void* unpacked, unsigned int flags
#ifdef COMPRESSOR
    , long* leeway
#endif
)
{
    unsigned char* input = (unsigned char*)packed;
    unsigned char* output = (unsigned char*)unpacked;
    unsigned char* inputend, * outputend;
    bit_stream bs;
    huf_table raw, dist, len;
    unsigned long ch_count;
    unsigned long ret_len, inp_len;
    long out_crc;
#ifdef COMPRESSOR
    long lee = 0;
#endif
    if (blong(input) != RNC_SIGNATURE)
        if (!(flags & RNC_IGNORE_HEADER_VAL_ERROR)) return RNC_HEADER_VAL_ERROR;
    ret_len = blong(input + 4);
    inp_len = blong(input + 8);
    if ((ret_len > (1 << 30)) || (inp_len > (1 << 30)))
        return RNC_HEADER_VAL_ERROR;

    outputend = output + ret_len;
    inputend = input + 18 + inp_len;

    input += 18;               // skip header

    // Check the packed-data CRC. Also save the unpacked-data CRC
    // for later.

    if (rnc_crc(input, inputend - input) != (long)bword(input - 4))
        if (!(flags & RNC_IGNORE_PACKED_CRC_ERROR)) return RNC_PACKED_CRC_ERROR;
    out_crc = bword(input - 6);

    bitread_init(&bs, &input, inputend);
    bit_advance(&bs, 2, &input, inputend);      // discard first two bits

    // Process chunks.

    while (output < outputend)
    {
#ifdef COMPRESSOR
        long this_lee;
#endif
        if (inputend - input < 6)
        {
            if (!(flags & RNC_IGNORE_HUF_EXCEEDS_RANGE))
                return RNC_HUF_EXCEEDS_RANGE;
            else {
                output = outputend;
                ch_count = 0;
                break;
            }
        }
        read_huftable(&raw, &bs, &input, inputend);
        read_huftable(&dist, &bs, &input, inputend);
        read_huftable(&len, &bs, &input, inputend);
        ch_count = bit_read(&bs, 0xFFFF, 16, &input, inputend);

        while (1)
        {
            long length, posn;

            length = huf_read(&raw, &bs, &input, inputend);
            if (length == -1)
            {
                if (!(flags & RNC_IGNORE_HUF_DECODE_ERROR))
                    return RNC_HUF_DECODE_ERROR;
                else
                {
                    output = outputend; ch_count = 0; break;
                }
            }
            if (length)
            {
                while (length--)
                {
                    if ((input >= inputend) || (output >= outputend))
                    {
                        if (!(flags & RNC_IGNORE_HUF_EXCEEDS_RANGE))
                            return RNC_HUF_EXCEEDS_RANGE;
                        else {
                            output = outputend;
                            ch_count = 0;
                            break;
                        }
                    }
                    *output++ = *input++;
                }
                bitread_fix(&bs, &input, inputend);
            }
            if (--ch_count <= 0)
                break;

            posn = huf_read(&dist, &bs, &input, inputend);
            if (posn == -1)
            {
                if (!(flags & RNC_IGNORE_HUF_DECODE_ERROR))
                    return RNC_HUF_DECODE_ERROR;
                else
                {
                    output = outputend; ch_count = 0; break;
                }
            }
            length = huf_read(&len, &bs, &input, inputend);
            if (length == -1)
            {
                if (!(flags & RNC_IGNORE_HUF_DECODE_ERROR))
                    return RNC_HUF_DECODE_ERROR;
                else
                {
                    output = outputend; ch_count = 0; break;
                }
            }
            posn += 1;
            length += 2;
            while (length--)
            {
                if (((output - posn) < (unsigned char*)unpacked)
                    || ((output - posn) > (unsigned char*)outputend)
                    || ((output) < (unsigned char*)unpacked)
                    || ((output) > (unsigned char*)outputend))
                {
                    if (!(flags & RNC_IGNORE_HUF_EXCEEDS_RANGE))
                        return RNC_HUF_EXCEEDS_RANGE;
                    else {
                        output = outputend - 1;
                        ch_count = 0;
                        break;
                    }
                }
                *output = output[-posn];
                output++;
            }
#ifdef COMPRESSOR
            this_lee = (inputend - input) - (outputend - output);
            if (lee < this_lee)
                lee = this_lee;
#endif
        }
    }

    if (outputend != output)
    {
        if (!(flags & RNC_IGNORE_FILE_SIZE_MISMATCH))
            return RNC_FILE_SIZE_MISMATCH;
    }

#ifdef COMPRESSOR
    if (leeway)
        *leeway = lee;
#endif

    // Check the unpacked-data CRC.

    if (rnc_crc(outputend - ret_len, ret_len) != out_crc)
    {
        if (!(flags & RNC_IGNORE_UNPACKED_CRC_ERROR))
            return RNC_UNPACKED_CRC_ERROR;
    }

    return ret_len;
}

long UnpackM1(unsigned char* buffer, ulong bufsize)
{
    //If file isn't compressed - return zero
    if (blong(buffer + 0) != RNC_SIGNATURE)
        return 0;
    // Originally this function was able do decompress data without additional buffer.
    // If you know how to decompress the data this way, please correct this.
    ulong packedsize = blong(buffer + 4);
    if (packedsize > bufsize)
        packedsize = bufsize;
    void* packed = malloc(packedsize);
    memcpy(packed, buffer, packedsize);
    if (packed == NULL) return -1;
    int retcode = rnc_unpack(packed, buffer, 0);
    free(packed);
    return retcode;
}

int RncUnpack_62B60_63070_new(uint8_t* input, uint8_t* output) {
    int result = UnpackM1(input, 100000000000);
    return result;
};
//-----------------
//-----------------

int counter_62B60_63070 = 0;
//SYNCHRONIZED WITH REMC1
//int sub_62B60_63070_new(uint8_t* input, uint8_t* output)
int RncUnpack_62B60_63070(uint8_t* input, uint8_t* output)//233B60_
{
    unsigned int i; // ecx
    //int* data; // esi
    //int v4; // eax
    //int v5; // eax
    uint8_t* v6x; // esi
    uint8_t* v7; // edx
    uint8_t* v8; // ebx
    _DWORD* v9; // esi
    uint8_t* v10; // edi
    _DWORD* v11; // esi
    _WORD* v12; // edi
    _BYTE* v13; // esi
    _BYTE* v14; // edi
    char* v15; // edi
    int v16; // eax
    __int16 v17; // bx
    __int16 v18; // ax
    __int16 v19; // dx
    __int16 v20; // ax
    unsigned __int16 v22; // [esp-1Ah] [ebp-1Eh]

    //fix
    i = 0;
    //fix
    uint8_t* input_esi = input;
    char RNSSING[5] = "RNC\x1";
    if (memcmp((char*)input, RNSSING, 4))
        return 0;
    input_esi += 4;
    /*
    if (*(_WORD*)input != 0x4E52)
        return 0;

    if (*(_WORD*)(input + 2) != 0x143)
        return 0;*/

    //LOBYTE(v4) = sub_62CF4_63204(v3);

    //*data = 0x01020304;
    //int test = sub_62CF4_63204(data);

    
    //int* data = (int*)(input + 4);

    rncRetLen_9B140 = sub_62CF4_63204(&input_esi);
    rncInpLen_9B144 = sub_62CF4_63204(&input_esi);
    

    
    //dword_9B140 = input[4 + 3];
    //dword_9B144 = input[4 + 3];
    
    byte_9B150 = input_esi[5];
    input_esi += 6;
    //byte_9B150 = input[9];
    v6x = input_esi;
    v7 = &input[rncInpLen_9B144 + 18];
    if (v7 > output)
    {
        v8 = &output[rncRetLen_9B140 + input[16]];
        if (v8 > v7)
        {
            v9 = (_DWORD*)(v7 - 4);
            v10 = v8 - 4;
            for (i = rncInpLen_9B144 >> 2; i; i--)
            {
                *(_DWORD*)v10 = *v9--;
                v10 -= 4;
            }
            v11 = v9 + 1;
            v12 = (uint16*)(v10 + 4);
            LOWORD(i) = rncInpLen_9B144 & 3;
            if ((rncInpLen_9B144 & 3) != 0)
            {
                v13 = (uint8*)v11 - 1;
                v14 = (uint8*)v12 - 1;
                while (i)
                {
                    *v14-- = *v13--;
                    --i;
                }
                v12 = (uint16*)(v14 + 1);
            }
            v6x = (uint8*)v12;
        }
    }
    v15 = (char*)output;
    byte_9B151 = 0;
    word_9B14C = *(uint16*)v6x;
    uint16 CX_ = 0;
    BitRead_62D40_63250(&CX_,2u, &v6x);
    do
    {
        ReadHuftable_62DC3_632D3(&CX_, rncRaw_9AFC0 ,&v6x);
        ReadHuftable_62DC3_632D3(&CX_, rncDist_9B040, &v6x);
        ReadHuftable_62DC3_632D3(&CX_, rncLen_9B0C0, &v6x);
        rncChCount_9B14A = BitRead_62D40_63250(&CX_, 0x10u, &v6x);
        while (1)
        {
            //debug
            //233C6F
            if(input[0x1fe2 + 15]==0xff)
            {
                counter_62B60_63070++;
                counter_62B60_63070--;
            }
            if (counter_62B60_63070 == 0x82b)
            {
                counter_62B60_63070++;
                counter_62B60_63070--;
            }
            uint8 origbyte20;
            uint8 remakebyte20;
            //int comp20 = compare_with_sequence("00233C6F-FFFFFF02", (uint8_t*)v15, 0x233C6F, counter_62B60_63070, 0x10, 0x10, &origbyte20, &remakebyte20, 0, 0);            

            counter_62B60_63070++;
            //debug

            i=HufRead_62CFD_6320D(&CX_, rncRaw_9AFC0, &v6x);
            i = CX_;
            if ((_WORD)i)
            {
                qmemcpy(v15, v6x, i);
                v6x += i;
                v15 += i;
                i = (unsigned __int8)byte_9B151;
                CX_ &= 0xff00;
                CX_ |= i;
                v17 = *(uint16*)v6x;
                v18 = __ROL2__(*(uint16*)v6x, byte_9B151);
                v19 = (1 << byte_9B151) - 1;
                word_9B14C &= v19;
                v20 = v18 & v19 | (*(uint16*)&v6x[2] << byte_9B151);
                word_9B14C |= v17 << byte_9B151;
                word_9B14E = v20;
            }
            if (!--rncChCount_9B14A)
                break;
            i=HufRead_62CFD_6320D(&CX_, rncDist_9B040, &v6x);
            //v22 = i;
            v22 = CX_;
            i = HufRead_62CFD_6320D(&CX_, rncLen_9B0C0, &v6x);
            i = CX_;
            LOWORD(i) = i + 2;
            v16 = v22;
            LOWORD(v16) = v22 + 1;
            qmemcpy(v15, &v15[-v16], i);
            v15 += i;
            i = 0;
            CX_ = i;
        }
        byte_9B150--;
    } while (byte_9B150);
    return rncRetLen_9B140;
}

int sub_62B60_63070_new(uint8_t* input, uint8_t* output)
{
    char RNSSING[5] = "RNC\x1";
    Type_fileSize fileSize;
    if (!memcmp((char*)input, RNSSING, 4))
    {
        fileSize.bytes[0] = input[7];
        fileSize.bytes[1] = input[6];
        fileSize.bytes[2] = input[5];
        fileSize.bytes[3] = input[4];
    }
    else
        return -1;
    DataFileIO::Decompress(input, output);
    return fileSize.size;
}

/*
//----- (00062B60) --------------------------------------------------------
int sub_62B60_63070_orig(int a1, char *a2)
{
  unsigned int i; // ecx
  int *v3; // esi
  int v4; // eax
  int v5; // eax
  _WORD *v6; // esi
  unsigned int v7; // edx
  char *v8; // ebx
  _DWORD *v9; // esi
  char *v10; // edi
  _DWORD *v11; // esi
  _WORD *v12; // edi
  _BYTE *v13; // esi
  _BYTE *v14; // edi
  char *v15; // edi
  int v16; // eax
  __int16 v17; // bx
  __int16 v18; // ax
  __int16 v19; // dx
  __int16 v20; // ax
  unsigned __int16 v22; // [esp-1Ah] [ebp-1Eh]

  if ( *(_WORD *)a1 != 20050 )
    return 0;
  v3 = (int *)(a1 + 4);
  if ( *(_WORD *)(a1 + 2) != 323 )
    return 0;
  LOBYTE(v4) = sub_62CF4_63204(v3);
  dword_9B140 = v4;
  LOBYTE(v5) = sub_62CF4_63204(v3);
  dword_9B144 = v5;
  byte_9B150 = *(_BYTE *)(a1 + 9);
  v6 = (_WORD *)(a1 + 10);
  v7 = v5 + 18 + a1;
  if ( v7 > (unsigned int)a2 )
  {
    v8 = &a2[dword_9B140 + *(unsigned __int8 *)(a1 + 16)];
    if ( (unsigned int)v8 > v7 )
    {
      v9 = (_DWORD *)(v7 - 4);
      v10 = v8 - 4;
      for ( i = (unsigned int)dword_9B144 >> 2; i; --i )
      {
        *(_DWORD *)v10 = *v9--;
        v10 -= 4;
      }
      v11 = v9 + 1;
      v12 = (uint16*)(v10 + 4);
      LOWORD(i) = dword_9B144 & 3;
      if ( (dword_9B144 & 3) != 0 )
      {
        v13 = (uint8*)((char *)v11 - 1);
        v14 = (uint8*)((char *)v12 - 1);
        while ( i )
        {
          *v14-- = *v13--;
          --i;
        }
        v12 = (uint16*)(v14 + 1);
      }
      v6 = v12;
    }
  }
  v15 = a2;
  byte_9B151 = 0;
  word_9B14C = *v6;
  sub_62D40_63250(2u, (int)v6);
  do
  {
    sub_62DC3_632D3((int)v6);
    sub_62DC3_632D3((int)v6);
    sub_62DC3_632D3((int)v6);
    word_9B14A = sub_62D40_63250(0x10u, (int)v6);
    while ( 1 )
    {
      sub_62CFD_6320D(word_9AFC0, (int)v6);
      if ( (_WORD)i )
      {
        qmemcpy(v15, v6, i);
        v6 = (_WORD *)((char *)v6 + i);
        v15 += i;
        i = (unsigned __int8)byte_9B151;
        v17 = *v6;
        v18 = __ROL2__(*v6, byte_9B151);
        v19 = (1 << byte_9B151) - 1;
        word_9B14C &= v19;
        v20 = v18 & v19 | (v6[1] << byte_9B151);
        word_9B14C |= v17 << byte_9B151;
        word_9B14E = v20;
      }
      if ( !--word_9B14A )
        break;
      sub_62CFD_6320D(word_9B040, (int)v6);
      v22 = i;
      sub_62CFD_6320D(word_9B0C0, (int)v6);
      LOWORD(i) = i + 2;
      v16 = v22;
      LOWORD(v16) = v22 + 1;
      qmemcpy(v15, &v15[-v16], i);
      v15 += i;
      i = 0;
    }
    --byte_9B150;
  }
  while ( byte_9B150 );
  return dword_9B140;
}
// 62B8D: variable 'v4' is possibly undefined
// 62B97: variable 'v5' is possibly undefined
// 62C4F: variable 'i' is possibly undefined
// 9AFC0: using guessed type __int16 word_9AFC0[64];
// 9B040: using guessed type __int16 word_9B040[64];
// 9B0C0: using guessed type __int16 word_9B0C0[64];
// 9B140: using guessed type int dword_9B140;
// 9B144: using guessed type int dword_9B144;
// 9B14A: using guessed type __int16 word_9B14A;
// 9B14C: using guessed type __int16 word_9B14C;
// 9B14E: using guessed type __int16 word_9B14E;
// 9B150: using guessed type char byte_9B150;
// 9B151: using guessed type char byte_9B151;
*/

//----- (00062CF4) --------------------------------------------------------
uint32 sub_62CF4_63204(uint8** a1)
{
    /*
  int v1; // eax

  v1 = *a1;
  BYTE1(v1) = *a1;
  LOBYTE(v1) = BYTE1(*a1);
  return (unsigned __int16)__ROL4__(v1, 16) >> 8;
  */
    uint32 n;
    n = (*a1)[0];
    n = (n << 8) + (*a1)[1];
    n = (n << 8) + (*a1)[2];
    n = (n << 8) + (*a1)[3];
    *a1 += 4;
    return n;
    /*
    uaxis_2d result;
    result._axis_2d.x = (*a1)[3];
    result._axis_2d.y = (*a1)[2];
    *a1 += 4;
    return result.word;*/

}

int counter_62CFD_6320D = 0;

//----- (00062CFD) --------------------------------------------------------
__int16 HufRead_62CFD_6320D(uint16* CX_, __int16 *a1, uint8_t** a2x)//233CFD_
{
  __int16 *v3; // esi
  __int16 v5; // ax
  __int16 *v6; // esi
  __int16 v7; // bx
  __int16 v8; // ax
  __int16 v9; // cx
  __int16 result; // ax

  if (counter_62CFD_6320D == 0x2f)
  {
      counter_62CFD_6320D++;
      counter_62CFD_6320D--;
  }

  counter_62CFD_6320D++;

  v3 = a1;
  do
  {
    v5 = *v3;
    v6 = v3 + 1;
    v7 = word_9B14C & v5;
    v8 = *v6;
    v3 = v6 + 1;
  }
  while ( v8 != v7 );
  v9 = v3[30];
  *CX_ = v9;
  result = BitRead_62D40_63250(CX_,HIBYTE(v9), a2x);
  //result = *a0x;
  HIBYTE(v9) = 0;
  if (v9 >= 2u)
  {
      v9--;
      *CX_ = v9;
      __int16 result2 = (1 << v9) | BitRead_62D40_63250(CX_, v9, a2x);
      *CX_ = result2;
      return result2;
  }
  *CX_ = v9;
  return result;
}
// 9B14C: using guessed type __int16 word_9B14C;

int compare_index_62D40_63250 = 0;
//----- (00062D40) --------------------------------------------------------
__int16 BitRead_62D40_63250(uint16* CX_, uint8 a1, uint8** a2x)//233D40_
{
  unsigned __int16 v3; // ax
  unsigned __int16 v4; // bx
  char v5; // ch
  __int16 v7_AX_; // [esp-4h] [ebp-4h]

  //debug
#ifdef debug1
  if (compare_index_62D40_63250 == 0x00143892)
  {
      compare_index_62D40_63250++;
      compare_index_62D40_63250--;
  }
  //add_compare(0x2439A7, true, true);

  /*
  if (compare_index_62D40_63250>0x143800)
  {
      uint8 origbyte20;
      uint8 remakebyte20;
      int comp20 = compare_with_sequence("00233D42-00259151", (uint8_t*)&byte_9B151, 0x233D40, compare_index_62D40_63250, 0x1, 0x1, &origbyte20, &remakebyte20, 0, 0);
      if( (compare_index_62D40_63250 != 0xf2256)
          && (compare_index_62D40_63250 != 0xf2257)
          && (compare_index_62D40_63250 != 0x000f3046)
          && (compare_index_62D40_63250 != 0x000f3047)
          && (compare_index_62D40_63250 != 0x000f3048)
          && (compare_index_62D40_63250 != 0x000f3049)
          && (compare_index_62D40_63250 != 0x00140b50)
          && (compare_index_62D40_63250 != 0x00140b51)
          && (compare_index_62D40_63250 != 0x00143893)
          && (compare_index_62D40_63250 != 0x00143894)
          && (compare_index_62D40_63250 != 0x00143895)
          && (compare_index_62D40_63250 != 0x00143896))
        comp20 = compare_with_sequence("00233D42-0025914E", (uint8_t*)&word_9B14E, 0x233D40, compare_index_62D40_63250, 0x2, 0x2, &origbyte20, &remakebyte20, 0, 0);
      if ((compare_index_62D40_63250 != 0x000f3049)
          && (compare_index_62D40_63250 != 0x00140b52)
          && (compare_index_62D40_63250 != 0x00140b53)
          && (compare_index_62D40_63250 != 0x00143895)
          && (compare_index_62D40_63250 != 0x00143896))
        comp20 = compare_with_sequence("00233D42-0025914C", (uint8_t*)&word_9B14C, 0x233D40, compare_index_62D40_63250, 0x2, 0x2, &origbyte20, &remakebyte20, 0, 0);
      comp20 = compare_with_sequence("00233D42-FFFFFFF4", (uint8_t*)&a1, 0x233D40, compare_index_62D40_63250, 0x1, 0x1, &origbyte20, &remakebyte20, 0, 0);

      char tempa2x[0x10];
      long nextskip = 1000000;
      for (int iii = 0; iii < 0x10; iii++)
      {
          tempa2x[iii] = (*a2x)[iii];
      }
      if ((compare_index_62D40_63250 >= 0x20a8) && (compare_index_62D40_63250 <= 0x20ab))
          nextskip = 0x10 - 1;
      if ((compare_index_62D40_63250 >= 0x20ac) && (compare_index_62D40_63250 <= 0x20af))
      {
          nextskip = 0x10 - 3;
      }
      if ((compare_index_62D40_63250 >= 0x20b0) && (compare_index_62D40_63250 <= 0x20b1))
      {
          nextskip = 0x10 - 5;
      }
      if ((compare_index_62D40_63250 >= 0x20b2) && (compare_index_62D40_63250 <= 0x20b5))
      {
          nextskip = 0x10 - 7;
      }
      if ((compare_index_62D40_63250 >= 0x20b6) && (compare_index_62D40_63250 <= 0x20b9))
      {
          nextskip = 0x10 - 9;
      }
      if ((compare_index_62D40_63250 >= 0x20ba) && (compare_index_62D40_63250 <= 0x20bf))
      {
          nextskip = 0x10 - 11;
      }
      if ((compare_index_62D40_63250 >= 0x20c0) && (compare_index_62D40_63250 <= 0x20c1))
      {
          nextskip = 0x10 - 13;
      }
      if ((compare_index_62D40_63250 >= 0x20c2) && (compare_index_62D40_63250 <= 0x20c2))
      {
          nextskip = 0x10 - 14;
      }
      if ((compare_index_62D40_63250 >= 0x2617) && (compare_index_62D40_63250 <= 0x261b))
          nextskip = 0x10 - 1;
      if ((compare_index_62D40_63250 >= 0x261c) && (compare_index_62D40_63250 <= 0x261c))
      {
          nextskip = 0x10 - 2;
      }
      if ((compare_index_62D40_63250 >= 0x261d) && (compare_index_62D40_63250 <= 0x2620))
      {
          nextskip = 0x10 - 4;
      }
      if ((compare_index_62D40_63250 >= 0x2656) && (compare_index_62D40_63250 <= 0x2656))
      {
          nextskip = 0x10 - 2;
      }
        if ((compare_index_62D40_63250 >= 0x000f0d5b) && (compare_index_62D40_63250 <= 0x000f0d5b))
        {
            nextskip = 0x10 - 1;
        }
        if ((compare_index_62D40_63250 >= 0x000f0d5c) && (compare_index_62D40_63250 <= 0x000f0d5f))
        {
            nextskip = 0x10 - 3;
        }
        if ((compare_index_62D40_63250 >= 0x000f0d60) && (compare_index_62D40_63250 <= 0x000f0d60))
        {
            nextskip = 0x10 - 4;
        }
        if ((compare_index_62D40_63250 >= 0x000f0d61) && (compare_index_62D40_63250 <= 0x000f0d65))
        {
            nextskip = 0x10 - 6;
        }
        if ((compare_index_62D40_63250 >= 0x000f0d66) && (compare_index_62D40_63250 <= 0x000f0d69))
        {
            nextskip = 0x10 - 8;
        }
        if ((compare_index_62D40_63250 >= 0x000f0ed6) && (compare_index_62D40_63250 <= 0x000f0ed9))
        {
            nextskip = 0x10 - 1;
        }
        if ((compare_index_62D40_63250 >= 0x000f0eda) && (compare_index_62D40_63250 <= 0x000f0edf))
        {
            nextskip = 0x10 - 3;
        }
        if ((compare_index_62D40_63250 >= 0x000f0ee0) && (compare_index_62D40_63250 <= 0x000f0ee3))
        {
            nextskip = 0x10 - 5;
        }
        if ((compare_index_62D40_63250 >= 0x000f0ee4) && (compare_index_62D40_63250 <= 0x000f0ee4))
        {
            nextskip = 0x10 - 7;
        }
        if ((compare_index_62D40_63250 >= 0x000f0ee5) && (compare_index_62D40_63250 <= 0x000f0ee9))
        {
            nextskip = 0x10 - 8;
        }
        if ((compare_index_62D40_63250 >= 0x000f0eea) && (compare_index_62D40_63250 <= 0x000f0eeb))
        {
            nextskip = 0x10 - 12;
        }
        if ((compare_index_62D40_63250 >= 0x000f0eec) && (compare_index_62D40_63250 <= 0x000f0eee))
        {
            nextskip = 0x10 - 14;
        }
        if ((compare_index_62D40_63250 >= 0x000f19ab) && (compare_index_62D40_63250 <= 0x000f19ab))
        {
            nextskip = 0x10 - 2;
        }
        if ((compare_index_62D40_63250 >= 0x000f223a) && (compare_index_62D40_63250 <= 0x000f223c))
        {
            nextskip = 0x10 - 1;
        }
        if ((compare_index_62D40_63250 >= 0x000f223d) && (compare_index_62D40_63250 <= 0x000f223f))
        {
            nextskip = 0x10 - 3;
        }
        if ((compare_index_62D40_63250 >= 0x000f2240) && (compare_index_62D40_63250 <= 0x000f2244))
        {
            nextskip = 0x10 - 5;
        }
        if ((compare_index_62D40_63250 >= 0x000f2245) && (compare_index_62D40_63250 <= 0x000f2249))
        {
            nextskip = 0x10 - 7;
        }
        if ((compare_index_62D40_63250 >= 0x000f224a) && (compare_index_62D40_63250 <= 0x000f224e))
        {
            nextskip = 0x10 - 9;
        }
        if ((compare_index_62D40_63250 >= 0x000f224f) && (compare_index_62D40_63250 <= 0x000f2252))
        {
            nextskip = 0x10 - 11;
        }
        if ((compare_index_62D40_63250 >= 0x000f2253) && (compare_index_62D40_63250 <= 0x000f2255))
        {
            nextskip = 0x10 - 13;
        }
        if ((compare_index_62D40_63250 >= 0x000f2256) && (compare_index_62D40_63250 <= 0x000f2257))
        {
            nextskip = 0x10 - 15;
        }
        if ((compare_index_62D40_63250 >= 0x000f27c0) && (compare_index_62D40_63250 <= 0x000f27c4))
        {
            nextskip = 0x10 - 1;
        }
        if ((compare_index_62D40_63250 >= 0x000f27c5) && (compare_index_62D40_63250 <= 0x000f27c7))
        {
            nextskip = 0x10 - 2;
        }
        if ((compare_index_62D40_63250 >= 0x000f27c8) && (compare_index_62D40_63250 <= 0x000f27c9))
        {
            nextskip = 0x10 - 4;
        }
        if ((compare_index_62D40_63250 >= 0x000f27ca) && (compare_index_62D40_63250 <= 0x000f27ce))
        {
            nextskip = 0x10 - 5;
        }
        if ((compare_index_62D40_63250 >= 0x000f27cf) && (compare_index_62D40_63250 <= 0x000f27d3))
        {
            nextskip = 0x10 - 6;
        }
        if ((compare_index_62D40_63250 >= 0x000f2ee7) && (compare_index_62D40_63250 <= 0x000f2ee9))
        {
            nextskip = 0x10 - 1;
        }
        if ((compare_index_62D40_63250 >= 0x000f2eea) && (compare_index_62D40_63250 <= 0x000f2eea))
        {
            nextskip = 0x10 - 2;
        }
        if ((compare_index_62D40_63250 >= 0x000f2eeb) && (compare_index_62D40_63250 <= 0x000f2eed))
        {
            nextskip = 0x10 - 4;
        }
        if ((compare_index_62D40_63250 >= 0x000f2eee) && (compare_index_62D40_63250 <= 0x000f2eef))
        {
            nextskip = 0x10 - 6;
        }
        if ((compare_index_62D40_63250 >= 0x000f3042) && (compare_index_62D40_63250 <= 0x000f3045))
        {
            nextskip = 0x10 - 12;
        }
        if ((compare_index_62D40_63250 >= 0x000f3046) && (compare_index_62D40_63250 <= 0x000f3047))
        {
            nextskip = 0x10 - 13;
        }
        if ((compare_index_62D40_63250 >= 0x000f3048) && (compare_index_62D40_63250 <= 0x000f3049))
        {
            nextskip = 0x10 - 15;
        }
        if ((compare_index_62D40_63250 >= 0x00140b4c) && (compare_index_62D40_63250 <= 0x00140b4f))
        {
            nextskip = 0x10 - 13;
        }
        if ((compare_index_62D40_63250 >= 0x00140b50) && (compare_index_62D40_63250 <= 0x00140b51))
        {
            nextskip = 0x10 - 14;
        }
        if ((compare_index_62D40_63250 >= 0x00140b52) && (compare_index_62D40_63250 <= 0x00140b54))
        {
            nextskip = 0x10 - 16;
        }
        if ((compare_index_62D40_63250 >= 0x0014388f) && (compare_index_62D40_63250 <= 0x00143892))
        {
            nextskip = 0x10 - 13;
        }
        if ((compare_index_62D40_63250 >= 0x00143893) && (compare_index_62D40_63250 <= 0x00143894))
        {
            nextskip = 0x10 - 14;
        }
        if ((compare_index_62D40_63250 >= 0x00143895) && (compare_index_62D40_63250 <= 0x00143896))
        {
            nextskip = 0x10 - 16;
        }
      comp20 = compare_with_sequence("00233D42-FFFFFF01", (uint8_t*)tempa2x, 0x233D40, compare_index_62D40_63250, 0x10, 0x10, &origbyte20, &remakebyte20, 0, 0, nextskip);
      comp20 = compare_with_sequence("00233D42-FFFFFF03", (uint8_t*)CX_, 0x233D40, compare_index_62D40_63250, 0x2, 0x2, &origbyte20, &remakebyte20, 0, 0);

      comp20 = compare_with_sequence("00233D42-00258FC0", (uint8_t*)rncRaw_9AFC0, 0x233D40, compare_index_62D40_63250, 0x10, 0x10, &origbyte20, &remakebyte20, 0, 0);
  }
  */
  compare_index_62D40_63250++;
#endif debug1
  //debug

  v3 = word_9B14E;
  v4 = word_9B14C;
  v7_AX_ = word_9B14C & ((1 << a1) - 1);
  v5 = byte_9B151 - a1;
  if ( byte_9B151 < a1 )
  {
    v4 = __ROR2__(word_9B14E & ((1 << byte_9B151) - 1), byte_9B151) | (word_9B14C >> byte_9B151);
    *a2x += 2;
    v3 = *(_WORD *)*a2x;
    a1 -= byte_9B151;
    v5 = 16 - a1;
  }
  word_9B14E = v3 >> a1;
  word_9B14C = __ROR2__(v3 & ((1 << a1) - 1), a1) | (v4 >> a1);
  byte_9B151 = v5;
  return v7_AX_;
  //return *CX_;
}
// 9B14C: using guessed type __int16 word_9B14C;
// 9B14E: using guessed type __int16 word_9B14E;
// 9B151: using guessed type char byte_9B151;

int counter_62DC3_632D3 = 0;

//----- (00062DC3) --------------------------------------------------------
void ReadHuftable_62DC3_632D3(uint16* CX_, __int16* a0, uint8_t** a1x)//233DC3_
{
  _BYTE *v1; // edi
  unsigned __int16 v2; // ax
  //int v3; // ecx
  int v4; // ecx
  _BYTE *v5; // esi
  _WORD *v6; // edi
  unsigned __int16 v7; // bx
  unsigned __int16 v8; // dx
  _WORD *v9; // edi
  unsigned __int16 v10; // bx
  char v11_CF; // cf
  __int16 v13; // t2
  __int16 v14; // ax
  __int16 v16; // [esp-24h] [ebp-28h] BYREF
  unsigned __int16 v17; // [esp-22h] [ebp-26h]
  unsigned __int16 v18; // [esp-20h] [ebp-24h]
  _BYTE *v19; // [esp-1Eh] [ebp-22h]
  __int16 v20; // [esp-1Ah] [ebp-1Eh]
  int v21; // [esp-18h] [ebp-1Ch]
  _DWORD v22[6]; // [esp-14h] [ebp-18h] BYREF

  //debug
  if (counter_62DC3_632D3 == 0x50)
  {
      counter_62DC3_632D3++;
      counter_62DC3_632D3--;
  }
  counter_62DC3_632D3++;
  //debug

  v1 = (uint8*)v22;
  v2 = BitRead_62D40_63250(CX_,5u, a1x);
  //v3 = v2;
  *CX_ = v2;
  if (*CX_)
  {
    v21 = v2;
    do
    {
      v2 = BitRead_62D40_63250(CX_,4u, a1x);
      *v1++ = v2;
      (*CX_)--;
    }
    while (*CX_);
    v4 = v21;
    *CX_ = v21;
    v21 = (int)*a1x;
    v5 = (uint8*)v22;
    //v6 = (_WORD *)v22[4];
    v6 = (uint16*)a0;

    LOBYTE(v2) = 1;
    v7 = 0;
    v8 = 0x8000;
    do
    {
      v20 = v4;
      v19 = v5;
      do
      {
        if ( (_BYTE)v2 == *v5 )
        {
          v18 = v2;
          v17 = v7;
          v16 = v4;
          *v6 = (1 << v2) - 1;
          v9 = v6 + 1;
          v10 = v7 >> (16 - v2);
          LOBYTE(v4) = v2;
          int x_AX = 0;
          v11_CF = 0;
          do
          {
            v13 = v11_CF << 15;
            v11_CF = v10 & 1;
            v10 = (v10 >> 1) | v13;
            //allert_error();
            x_AX <<= 1;//fix
            x_AX |= v11_CF;
            //__asm { rcl     ax, 1 }
            v4--;
          }
          while ( v4 );
          *v9 = x_AX;
          v6 = v9 + 1;
          //LOBYTE(v14) = v5 - (_BYTE *)&v16 - 16;
          LOBYTE(v14) = v5 - (uint8*)v22;
          HIBYTE(v14) = *v5;
          v6[30] = v14;
          LOWORD(v4) = v16;
          v2 = v18;
          v7 = v8 + v17;
        }
        v5++;
        v4--;
      }
      while ( v4 );
      v5 = v19;
      LOWORD(v4) = v20;
      v8 >>= 1;
      LOBYTE(v2) = v2 + 1;
    }
    while ( (_BYTE)v2 != 17 );
  }
}

//----- (00062E60) --------------------------------------------------------
void sub_62E60_63370(char* name, uint8* buffer, int size)
{
  FILE* file = DataFileIO::CreateOrOpenFile(FixPath(name), 546);
  if (file == nullptr )
    return;
  FileWrite_62ED0_633E0(file, buffer, size);
  DataFileIO::Close(file);
}

size_t FileWrite_62ED0_633E0(FILE* descriptor, uint8_t* buffer, uint32_t count)
{
    return fwrite(buffer, 1, count, descriptor);
}

//----- (00062FA8) --------------------------------------------------------
void CopyScreen_62FA8_634B8(uint8_t* src, uint8_t* dst, size_t size)
{
  //qmemcpy(a2, a1, 320 * a3);
  memcpy(dst, src, 320 * size);
}

//----- (00062FC4) --------------------------------------------------------
void CopyScreen_62FC4_634D4(uint8_t* src, uint8_t* dst, size_t size)
{
  //qmemcpy(a2, a1, 640 * a3);
    memcpy(dst, src, 640 * size);
}

//----- (00062FF0) --------------------------------------------------------
int sub_62FF0(int a1)
{
  return *(_DWORD *)(a1 + 4);
}

//----- (00063010) --------------------------------------------------------
void sub_63010_63520()//234010_
{
  int v0; // [esp+0h] [ebp-14h]
  int n; // [esp+4h] [ebp-10h]
  signed int k; // [esp+8h] [ebp-Ch]
  int m; // [esp+8h] [ebp-Ch]
  int ii; // [esp+8h] [ebp-Ch]
  int jj; // [esp+8h] [ebp-Ch]
  int kk; // [esp+8h] [ebp-Ch]
  int i; // [esp+Ch] [ebp-8h]
  int j; // [esp+Ch] [ebp-8h]
  int v9; // [esp+Ch] [ebp-8h]
  unsigned int v10; // [esp+10h] [ebp-4h]

  if ( !dword_12F6A8_12F698[0] && false)//fixed(false)
  {
    v0 = sub_6342C_6393C(0xFA00u);
    for ( i = 0; i < 256; ++i )
      memset(&dword_12F6A0_12F690[3 * i], 0, 12);
    for ( j = 0; j < 256; ++j )
      memset((char *)&dword_1302A0_130290 + 18 * j, 0, 18);
    v9 = 0;
    for ( k = 0xA0000; k >= 1024; k -= 1024 )
    {
      v10 = sub_6342C_6393C(k);
      if ( v10 )
      {
        dword_12F6A8_12F698[3 * v9] = k;
        dword_12F6A0_12F690[3 * v9] = 16 * (unsigned __int16)v10;
        dword_12F6A4_12F694[3 * v9] = HIWORD(v10);
        k += 1024;
        ++v9;
      }
    }
    for ( m = 0x1000000; m >= 4096; m -= 4096 )
    {
      dword_12F6A0_12F690[3 * v9] = (int)malloc(m);
      if ( dword_12F6A0_12F690[3 * v9] )
      {
        for ( n = 4096; n > 0; n -= 16 )
        {
          if ( expand(dword_12F6A0_12F690[3 * v9], n + m) )
          {
            dword_12F6A8_12F698[3 * v9] = n + m;
            dword_12F6A4_12F694[3 * v9] = 0;
            break;
          }
        }
        m += 4096;
        ++v9;
      }
    }
    for ( ii = 4096; ii >= 16; ii -= 16 )
    {
      dword_12F6A0_12F690[3 * v9] = (int)malloc(ii);
      if ( dword_12F6A0_12F690[3 * v9] )
      {
        dword_12F6A8_12F698[3 * v9] = ii;
        dword_12F6A4_12F694[3 * v9] = 0;
        ii += 4096;
        ++v9;
      }
    }
    qsort(dword_12F6A0_12F690, v9, 12, (_CoreCrtNonSecureSearchSortCompareFunction)sub_62FF0);
    for ( jj = 0; jj < 256; ++jj )
      *(int *)((char *)&dword_1302A4 + 18 * jj) = 0;
    for ( kk = 0; kk < v9; ++kk )
    {
      *(int *)((char *)&dword_1302A0_130290 + 18 * kk) = dword_12F6A0_12F690[3 * kk];
      *(int *)((char *)&dword_1302A4 + 18 * kk) = dword_12F6A8_12F698[3 * kk];
      if ( kk )
        *(int *)((char *)&dword_1302AC_13029C + 18 * kk) = (int)&dword_1302A0_130290 + 18 * kk - 18;
      else
        dword_1302AC_13029C = 0;
      *(int *)((char *)&dword_1302A8_130298 + 18 * kk) = (int)&dword_1302A0_130290 + 18 * kk + 18;
      byte_1302B0_1302A0[18 * kk] = 0;
      byte_1302B1_1302A1[18 * kk] = kk;
    }
    *(int *)((char *)&dword_1302A8_130298 + 18 * v9 - 18) = 0;
    sub_6D35C_6D86C(HIWORD(v0));
  }
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);
// 6CB61: using guessed type _DWORD malloc(_DWORD);
// 6CC5D: using guessed type _DWORD expand(_DWORD, _DWORD);
// 6CF2D: using guessed type _DWORD qsort(_DWORD, _DWORD, _DWORD, _DWORD);
// 12F6A0: using guessed type int dword_12F6A0_12F690[];
// 12F6A4: using guessed type int dword_12F6A4_12F694[];
// 12F6A8: using guessed type int dword_12F6A8_12F698[];
// 1302A0: using guessed type int dword_1302A0_130290;
// 1302A4: using guessed type int dword_1302A4;
// 1302A8: using guessed type int dword_1302A8_130298;
// 1302AC: using guessed type int dword_1302AC_13029C;

//----- (00063338) --------------------------------------------------------
void sub_63338_63848()
{
  int *result; // eax
  int *i; // [esp+0h] [ebp-4h]

  //fix
  result = 0;
  //fix

  dword_1314A0 = 0;
  dword_1314A4 = 0;
  dword_1314A8 = 0;
  freeMem_1314AC_13149C = 0;
  dword_1314B0 = -1;
  for ( i = &dword_1302A0_130290; i; i = result )
  {
    if ( *((_BYTE *)i + 16) )
    {
      dword_1314A8 += i[1];
      dword_1314A0 += i[1];
    }
    else
    {
      dword_1314A4 += i[1];
      if ( i[1] > (unsigned int)freeMem_1314AC_13149C )
        freeMem_1314AC_13149C = i[1];
      if ( i[1] < (unsigned int)dword_1314B0 )
        dword_1314B0 = i[1];
      dword_1314A0 += i[1];
    }
    result = (int *)i[2];
  }
  LOBYTE(dword_1314A0) = dword_1314A0 & 0xFC;
  LOBYTE(dword_1314A4) = dword_1314A4 & 0xFC;
  LOBYTE(dword_1314A8) = dword_1314A8 & 0xFC;
  LOBYTE(freeMem_1314AC_13149C) = freeMem_1314AC_13149C & 0xFC;
  LOBYTE(dword_1314B0) = dword_1314B0 & 0xFC;
}
// 1302A0: using guessed type int dword_1302A0_130290;
// 1314A0: using guessed type int dword_1314A0;
// 1314A4: using guessed type int dword_1314A4;
// 1314A8: using guessed type int dword_1314A8;
// 1314AC: using guessed type int freeMem_1314AC_13149C;
// 1314B0: using guessed type int dword_1314B0;

//----- (0006342C) --------------------------------------------------------
int sub_6342C_6393C(unsigned int a1)
{
  int v2[7]; // [esp+0h] [ebp-40h] BYREF
  int v3[7]; // [esp+1Ch] [ebp-24h] BYREF
  int v4; // [esp+38h] [ebp-8h]

  FixPerifery();

  v4 = 0;
  if ( a1 < 0xA0000 )
  {
    v2[0] = 256;
    v2[1] = (a1 + 15) >> 4;
    int386(49, (uint32)v2, (uint32)v3);
    if ( !v3[6] )
      return (v3[3] << 16) | v3[0];
  }
  return v4;
}
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);

void sub_634A0_639B0(Pathstruct* pathstruct)
{
	if (*pathstruct->colorPalette_var28)
	{
		free_426E0_42A20((void*)*pathstruct->colorPalette_var28);
		*pathstruct->colorPalette_var28 = 0;
	}
}

int counter_634E0_639F0 = 0;

int sub_634E0_639F0(Pathstruct* pathstruct)//2344e0_
{
    //debug
    if (counter_634E0_639F0 == 0x11)
    {
        counter_634E0_639F0++;
        counter_634E0_639F0--;
    }
    counter_634E0_639F0++;
    //debug

	void* (*mallocVar)(size_t);
	sub_63010_63520();
	if ((pathstruct->var40_alloc_type & 1) != 0)
		mallocVar = malloc_425C0_42900;
	else
		mallocVar = malloc_42540_42880;
	sub_634A0_639B0(pathstruct);
	if (pathstruct->path[0] == '*')
	{
		*pathstruct->colorPalette_var28 = (uint8_t*)mallocVar(pathstruct->var36_size_buffer);
		if (!(*pathstruct->colorPalette_var28))
			return 0;
	}
	else
	{
		pathstruct->var36_size_buffer = GetRNCFilesize_63910_63E20(pathstruct);
		if (pathstruct->var36_size_buffer <= 0)
			return 0;
		*pathstruct->colorPalette_var28 = (uint8_t*)mallocVar(pathstruct->var36_size_buffer+0x10);
		if (!(*pathstruct->colorPalette_var28))
			return -1;
        
		if (sub_3EEA0_3F1E0(pathstruct->path, *pathstruct->colorPalette_var28) != pathstruct->var36_size_buffer)
		{
			*pathstruct->colorPalette_var28 = 0;
			*pathstruct->var32_end_buffer = 0;
			pathstruct->var36_size_buffer = 0;
			return 0;
		}
	}
	if (pathstruct->var32_end_buffer)
		*pathstruct->var32_end_buffer = pathstruct->var36_size_buffer + *pathstruct->colorPalette_var28;
	return 1;
}

//----- (0006377B) --------------------------------------------------------
void sub_6377B()
{
  ;
}

//----- (0006378C) --------------------------------------------------------
char *sub_6378C(int a1)
{
  return off_9EF10[a1];
}
// 9EF10: using guessed type char *off_9EF10[20];

//----- (000637AF) --------------------------------------------------------
void sub_637AF()
{
  ;
}

//----- (000637C0) --------------------------------------------------------
void sub_637C0()
{
  ;
}

//----- (000637D1) --------------------------------------------------------
int sub_637D1(int a1, int a2, unsigned __int16 a3, int a4)
{
  //fix MK_FP(byte_9C07A[9 * a1 + 1], byte_9C07A[9 * a1])(a2, a3, a1, a4);
  return 0;
}
// 9C07A: using guessed type _DWORD byte_9C07A[39];

//----- (000638E0) --------------------------------------------------------
int sub_638E0(int a1, int a2, int a3)
{
  void *retaddr[2]; // [esp+10h] [ebp+10h]

  byte_9ECFE = 1;
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(a1, a2, a3);
}
// 9ECFE: using guessed type char byte_9ECFE;

//----- (000638F8) --------------------------------------------------------
void sub_638F8()
{
  ;
}

int GetRNCFilesize_63910_63E20(Pathstruct* pathstruct)//234910_
{
	uint8_t miniBuffer[8];
	char RNSSING[5] = "RNC\x1";
	FILE* file = DataFileIO::CreateOrOpenFile(FixPath(pathstruct->path), 512);
	if (file == nullptr)
		return -1;
	DataFileIO::Read(file, miniBuffer, 8);
	Type_fileSize fileSize;
	fileSize.size = -1;
	if (!memcmp((char*)miniBuffer, RNSSING, 4))
	{
		fileSize.bytes[0] = miniBuffer[7];
		fileSize.bytes[1] = miniBuffer[6];
		fileSize.bytes[2] = miniBuffer[5];
		fileSize.bytes[3] = miniBuffer[4];
	}
	else
	{
		fileSize.size = DataFileIO::FileLengthBytes(file);
	}
	DataFileIO::Close(file);
	return fileSize.size;
}

//----- (00063A8C) --------------------------------------------------------
void sub_63A8C()
{
  ;
}

//----- (00063A9D) --------------------------------------------------------
int sub_63A9D_63FAD(int a3, __int16 a4)
{
  __int64 v4; // eax

    //fix
    __int16 a1 = 0;
    int a2 = 0;
    //fix

  if ( dword_9EF60 )
    return 3;
  if ( a3 || a4 )
  {
    strcpy(&unk_A05D1, (char*)a3);
    strcat(&unk_A05D1, "hmidet.386");
  }
  else
  {
    strcpy(&unk_A05D1, "hmidet.386");
  }
  dword_131574 = open((uint32)&unk_A05D1, 512);
  if ( dword_131574 == -1 )
    return 15;
  read(dword_131574, (void*)&unk_131588, 44);
  dword_131578 = (int)malloc(4096);
  if ( dword_131578 )
  {
    dword_131580 = sub_67557_67A67(a1, a2, dword_131578);
    v4 = sub_67582();
    word_1315B8 = WORD2(v4);
    dword_1315B4 = v4;
    sub_674CD();
    lseek(dword_131574, 0, 0);
    dword_9EF64 = 0;
    dword_9EF60 = 1;
    return 0;
  }
  else
  {
    close(dword_131574);
    return 5;
  }
}
// 6691E: using guessed type _DWORD close(_DWORD);
// 6692C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 6B992: using guessed type _DWORD lseek(_DWORD, _DWORD, char);
// 6CB61: using guessed type _DWORD malloc(_DWORD);
// 6DD0E: using guessed type _DWORD strcpy(_DWORD, _DWORD);
// 6DD33: using guessed type _DWORD strcat(_DWORD, _DWORD);
// 9EF60: using guessed type int dword_9EF60;
// 9EF64: using guessed type int dword_9EF64;
// 131574: using guessed type int dword_131574;
// 131578: using guessed type int dword_131578;
// 131580: using guessed type int dword_131580;
// 1315B4: using guessed type int dword_1315B4;
// 1315B8: using guessed type __int16 word_1315B8;

//----- (00063C06) --------------------------------------------------------
int sub_63C06()
{
  dword_9EF60 = 0;
  close(dword_131574);
  sub_674FA();
  free((void*)dword_131578);
  return 0;
}
// 6691E: using guessed type _DWORD close(_DWORD);
// 6BA12: using guessed type _DWORD free(_DWORD);
// 9EF60: using guessed type int dword_9EF60;
// 131574: using guessed type int dword_131574;
// 131578: using guessed type int dword_131578;

//----- (00063C5A) --------------------------------------------------------
int sub_63C5A_6416A(const void *a1, unsigned int a2, char *a3, __int16 a4, unsigned int a5)
{
  int v7; // [esp+4h] [ebp-18h]
  int v8; // [esp+Ch] [ebp-10h]
  int v9; // [esp+10h] [ebp-Ch]
  unsigned int v10; // [esp+14h] [ebp-8h]

  v10 = 0;
  if ( !a3 && !a4 )
    return 2;
  if ( a2 < 0xE000 || a2 > 0xE200 )
    return 6;
  v9 = 0;
  lseek(dword_131574, 0, 0);
  read(dword_131574, (void*)&unk_131588, 44);
  while ( v10 <= dword_1315A8 && !v9 )
  {
    v7 = lseek(dword_131574, 0, 1);
    read(dword_131574, (void*)&unk_131540, 48);
    if ( dword_131568 == a2 && byte_13156D < 0 )
    {
      v9 = 1;
      read(dword_131574, (void*)dword_131578, dword_131564);
      dword_131584 = dword_131578;
    }
    else
    {
      lseek(dword_131574, dword_131564, 1);
    }
    ++v10;
  }
  if ( v9 != 1 )
    return 7;
  v8 = sub_67710((int (*)(_DWORD))dword_131584);
  if ( !v8 )
    return 8;
  sub_6765C_67B6C(a1, (int (*)(_DWORD))dword_131584, dword_1315B4, word_1315B8, a3, a4);
  __writegsdword(a5, v8);
  dword_131570 = v7;
  return 0;
}
// 63DE1: variable 'v7' is possibly undefined
// 6692C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 6B992: using guessed type _DWORD lseek(_DWORD, _DWORD, char);
// 131564: using guessed type int dword_131564;
// 131568: using guessed type int dword_131568;
// 13156D: using guessed type char byte_13156D;
// 131570: using guessed type int dword_131570;
// 131574: using guessed type int dword_131574;
// 131578: using guessed type int dword_131578;
// 131584: using guessed type int dword_131584;
// 1315A8: using guessed type int dword_1315A8;
// 1315B4: using guessed type int dword_1315B4;
// 1315B8: using guessed type __int16 word_1315B8;

//----- (00064248) --------------------------------------------------------
int sub_64248(unsigned int a1, __int16 a2)
{
  if ( !a1 && !a2 )
    return 2;
  lseek(dword_131574, dword_131570, 0);
  read(dword_131574, (void*)&unk_131540, 48);
  read(dword_131574, (void*)dword_131578, dword_131564);
  sub_67710((int (*)(_DWORD))dword_131584);
  sub_6773B((int (*)(_DWORD))dword_131584);
  __writegsdword(a1, dword_A06DC);
  __writegsdword(a1 + 8, dword_A06E0);
  __writegsdword(a1 + 4, dword_A06E4);
  return 0;
}
// 6692C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 6B992: using guessed type _DWORD lseek(_DWORD, _DWORD, char);
// A06DC: using guessed type int dword_A06DC;
// A06E0: using guessed type int dword_A06E0;
// A06E4: using guessed type int dword_A06E4;
// 131564: using guessed type int dword_131564;
// 131570: using guessed type int dword_131570;
// 131574: using guessed type int dword_131574;
// 131578: using guessed type int dword_131578;
// 131584: using guessed type int dword_131584;
// 1315B4: using guessed type int dword_1315B4;
// 1315B8: using guessed type __int16 word_1315B8;

//----- (00064414) --------------------------------------------------------
void sub_64414()
{
  ;
}

//----- (00064425) --------------------------------------------------------
void sub_64425()
{
  ;
}

//----- (00064436) --------------------------------------------------------
void sub_64436()
{
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
  sub_674CD();
}

//----- (000645FB) --------------------------------------------------------
void sub_645FB()
{
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
  sub_674FA();
}

//----- (000647C0) --------------------------------------------------------
int sub_647C0(int a1, unsigned __int16 a2)
{
  sub_64436();
  dword_9EF80 = 1;
  //fix
  /*
  if ( a1 || a2 )
    fstrcpy(&byte_A04D2, (unsigned __int16)__DS__, a1, a2);
  else
    byte_A04D2 = 0;*/
  return 0;
}
// 6A67A: using guessed type _DWORD fstrcpy(_DWORD, _DWORD, _DWORD, _DWORD);
// 9EF80: using guessed type int dword_9EF80;
// A04D2: using guessed type char byte_A04D2;

//----- (0006481C) --------------------------------------------------------
int sub_6481C()
{
  sub_645FB();
  dword_9EF80 = 0;
  return 0;
}
// 9EF80: using guessed type int dword_9EF80;

//----- (00064846) --------------------------------------------------------
int sub_64846_64D56(
        int a1,
        int a2,
        unsigned int a3,
        unsigned int a4,
        int a5,
        unsigned int a6,
        int a7,
        unsigned int a8)
{
  int v8; // edx
  int v9; // edx
  __int16 v10; // dx
  int v11; // edx
  int v12; // edx
  int v13; // edx
  int v14; // eax
  int v15; // ebx
  int v16; // eax
  int v17; // ebx
  int v18; // eax
  unsigned int v19; // ebx
  int v20; // eax
  int v21; // ebx
  int v22; // eax
  int v23; // ebx
  int v24; // eax
  int v25; // ebx
  int v26; // eax
  int v27; // ebx
  int v29; // [esp+8h] [ebp-64h]
  unsigned __int16 v30; // [esp+Ch] [ebp-60h]
  int v31; // [esp+10h] [ebp-5Ch] BYREF
  int v32; // [esp+14h] [ebp-58h]
  int v33; // [esp+18h] [ebp-54h]
  __int16 v34; // [esp+1Ch] [ebp-50h]
  unsigned int v35; // [esp+20h] [ebp-4Ch] BYREF
  int v36; // [esp+24h] [ebp-48h]
  unsigned int v38; // [esp+2Ch] [ebp-40h]
  unsigned int j; // [esp+30h] [ebp-3Ch]
  int v40; // [esp+34h] [ebp-38h] BYREF
  int (*v41)(_DWORD); // [esp+38h] [ebp-34h] BYREF
  int v42; // [esp+3Ch] [ebp-30h]
  int v43; // [esp+40h] [ebp-2Ch]
  unsigned int i; // [esp+44h] [ebp-28h]
  void (*v45[5])(_DWORD); // [esp+48h] [ebp-24h] BYREF
  unsigned int v46; // [esp+5Ch] [ebp-10h]
  int v47; // [esp+60h] [ebp-Ch]
  void (*v48)(_DWORD); // [esp+64h] [ebp-8h]
  unsigned int v49; // [esp+68h] [ebp-4h]

  //fix
  v36 = 0;
  //fix

  v49 = __readgsdword(a6);
  v48 = (void (*)(_DWORD))__readgsdword(a6 + 16);
  v30 = __readgsword(a6 + 8);
  v29 = __readgsdword(a6 + 4);
  v46 = __readgsdword(a6 + 12);
  v45[4] = v48;
  v45[3] = (void (*)(_DWORD))__readgsdword(a6 + 20);
  v45[2] = (void (*)(_DWORD))__readgsdword(a6 + 24);
  v43 = 6;
  for ( i = 0; i < 5; ++i )
  {
    if ( !dword_A0338[i] )
    {
      v43 = i;
      break;
    }
  }
  if ( v43 == 6 )
    return 11;
  dword_A0338[v43] = a3;
  if ( __readgsdword(a6 + 36) || __readgsword(a6 + 40) )
  {
    LOWORD(v36) = __readgsword(a6 + 40);
    v35 = __readgsdword(a6 + 36);
    v41 = (int (*)(_DWORD))__readgsdword(a6 + 44);
    v8 = 3 * v43;
    word_A01D0[v8] = v36;
    *(int *)((char *)&dword_A01CC + v8 * 2) = v35;
    dword_A01EA[v43] = (int)v41;
  }
  else
  {
    v42 = sub_6DE34_6E344((__int16)&v35, a1, a3, v43, (int *)&v41, (unsigned int)&v35);
    if ( v42 )
      return v42;
    __writegsword(a6 + 40, v36);
    __writegsdword(a6 + 36, v35);
    __writegsdword(a6 + 44, (unsigned int)v41);
    v9 = 3 * v43;
    word_A01D0[v9] = v36;
    *(int *)((char *)&dword_A01CC + v9 * 2) = v35;
    dword_A01EA[v43] = (int)v41;
  }
  //fix v42 = sub_6DD7D(v43, (int)&byte_A0350[6 * v43], __DS__);
  if ( !v42 )
  {
    if ( (unsigned int)dword_A0338[v43] >= 0xE106 )
    {
      v18 = 3 * v43;
      word_A02DE[v18] = 0;
      *(int *)((char *)&dword_A02DA + v18 * 2) = 0;
    }
    else
    {
      v10 = 4 * v43;
      dword_A0280[v43] = v49;
      if ( v46 )
      {
        dword_9EF6C[v43] = 1;
        v34 = 0;
        v33 = 0;
        a1 = sub_650FF_6560F(v10, a1, v49, (uint32*)&v40);
        v30 = v10;
        v29 = a1;
        if ( !a1 && v10 == v34 )
        {
          sub_6E030(v43);
          dword_A0338[v43] = 0;
          return 5;
        }
        v11 = 3 * v43;
        word_A0298[v11] = v30;
        *(int *)((char *)&dword_A0294 + v11 * 2) = a1;
        if ( __readgsdword(*(_DWORD *)&byte_A0350[6 * v43] + 36) == 8 )
        {
          if ( (__readgsbyte(*(_DWORD *)&byte_A0350[6 * v43] + 61) & 0x80u) == 0 )
          {
            for ( j = 0; j < v49; ++j )
              __writegsbyte(j + a1, 0x80u);
          }
          else
          {
            for ( j = 0; j < v49; ++j )
              __writegsbyte(j + a1, 0);
          }
        }
        else
        {
          for ( j = 0; j < v49; ++j )
            __writegsbyte(j + a1, 0);
        }
      }
      else
      {
        v12 = 3 * v43;
        word_A0298[v12] = v30;
        *(int *)((char *)&dword_A0294 + v12 * 2) = v29;
        dword_9EF6C[v43] = 0;
      }
      __writegsword(a6 + 8, v30);
      __writegsdword(a6 + 4, v29);
      if ( __readgsdword(a6 + 48) || __readgsword(a6 + 52) )
      {
        LOWORD(v32) = __readgsword(a6 + 52);
        v31 = __readgsdword(a6 + 48);
      }
      else if ( __readgsdword(a6 + 60) )
      {
        v42 = sub_6E09A_6E5AA(a6, a1, __readgsdword(a6 + 60), (int *)v45, (unsigned int)&v31);
        if ( v42 )
          return v42;
      }
      else
      {
        v42 = sub_6E09A_6E5AA(
                (__int16)&v31,
                a1,
                __readgsdword(*(_DWORD *)&byte_A0350[6 * v43] + 104),
                (int *)v45,
                (unsigned int)&v31);
        if ( v42 )
          return v42;
      }
      __writegsword(a6 + 52, v32);
      __writegsdword(a6 + 48, v31);
      v13 = 3 * v43;
      word_A0202[v13] = v32;
      *(int *)((char *)&dword_A01FE + v13 * 2) = v31;
      dword_A021C[v43] = (int)v45[0];
      dword_A0244[v43] = 1;
      v47 = __readgsdword(a4 + 8);
      v47 = dword_A0374[v47];
      sub_677E3_67CF3(a2, v45[0], v31, (unsigned __int16)v32, v29, v30, v49, v47, v43, (int)&dword_1315BC);
      v14 = 3 * v43;
      v15 = dword_1315BC;
      word_A02DE[v14] = word_1315C0;
      *(int *)((char *)&dword_A02DA + v14 * 2) = v15;
      v16 = 3 * v43;
      v17 = dword_1315C4;
      word_A031A[v16] = word_1315C8;
      *(int *)((char *)&dword_A0316 + v16 * 2) = v17;
      sub_67527((int)&byte_131724[192 * v43], dword_1315CC, word_1315D0);
    }
    v19 = *(int *)((char *)&dword_A02DA + 6 * v43);
    __writegsword(a6 + 32, word_A02DE[3 * v43]);
    __writegsdword(a6 + 28, v19);
    sub_6790D();
    dword_A02B2[v43] = v40;
    v45[1] = (void (*)(_DWORD))__readgsdword(a4);
    v38 = __readgsdword(a4 + 4);
    v47 = __readgsdword(a4 + 8);
    byte_A0394[v43] = v47;
    sub_67845(v41);
    sub_678DE(v41);
    sub_678AF(v41);
    v40 = dword_A02B2[v43];
    sub_6787E(v41);
    dword_A0230[v43] = 1;
    dword_A0258[v43] = 1;
    dword_1315E4[16 * v43] = __readgsdword(a6);
    v20 = v43 << 6;
    v21 = __readgsdword(a6 + 4);
    *(__int16 *)((char *)&word_1315EC + v20) = __readgsword(a6 + 8);
    *(int *)((char *)&dword_1315E8 + v20) = v21;
    dword_1315F0[16 * v43] = __readgsdword(a6 + 12);
    dword_1315F4[16 * v43] = __readgsdword(a6 + 16);
    dword_1315F8[16 * v43] = a3;
    dword_1315FC[16 * v43] = __readgsdword(a6 + 24);
    v22 = v43 << 6;
    v23 = __readgsdword(a6 + 28);
    *(__int16 *)((char *)&word_131604 + v22) = __readgsword(a6 + 32);
    *(int *)((char *)&dword_131600 + v22) = v23;
    v24 = v43 << 6;
    v25 = __readgsdword(a6 + 36);
    *(__int16 *)((char *)&word_13160C + v24) = __readgsword(a6 + 40);
    *(int *)((char *)&dword_131608 + v24) = v25;
    v26 = v43 << 6;
    v27 = __readgsdword(a6 + 48);
    *(__int16 *)((char *)&word_131618 + v26) = __readgsword(a6 + 52);
    *(int *)((char *)&dword_131614 + v26) = v27;
    dword_131620[16 * v43] = __readgsdword(a6 + 60);
    __writegsdword(a8, v43);
    return 0;
  }
  return v42;
}
// 9EF6C: using guessed type int dword_9EF6C[];
// A01CC: using guessed type int dword_A01CC;
// A01D0: using guessed type __int16 word_A01D0[13];
// A01EA: using guessed type int dword_A01EA[5];
// A01FE: using guessed type int dword_A01FE;
// A0202: using guessed type __int16 word_A0202[13];
// A021C: using guessed type int dword_A021C[5];
// A0230: using guessed type int dword_A0230[5];
// A0244: using guessed type int dword_A0244[5];
// A0258: using guessed type int dword_A0258[5];
// A0280: using guessed type int dword_A0280[5];
// A0294: using guessed type int dword_A0294;
// A0298: using guessed type __int16 word_A0298[];
// A02B2: using guessed type int dword_A02B2[5];
// A02DA: using guessed type int dword_A02DA;
// A02DE: using guessed type __int16 word_A02DE[28];
// A0316: using guessed type int dword_A0316;
// A031A: using guessed type __int16 word_A031A[];
// A0338: using guessed type int dword_A0338[6];
// A0374: using guessed type int dword_A0374[8];
// 1315BC: using guessed type int dword_1315BC;
// 1315C0: using guessed type __int16 word_1315C0;
// 1315C4: using guessed type int dword_1315C4;
// 1315C8: using guessed type __int16 word_1315C8;
// 1315CC: using guessed type int dword_1315CC;
// 1315D0: using guessed type __int16 word_1315D0;
// 1315E4: using guessed type int dword_1315E4[];
// 1315E8: using guessed type int dword_1315E8;
// 1315EC: using guessed type __int16 word_1315EC;
// 1315F0: using guessed type int dword_1315F0[];
// 1315F4: using guessed type int dword_1315F4[];
// 1315F8: using guessed type int dword_1315F8[];
// 1315FC: using guessed type int dword_1315FC[];
// 131600: using guessed type int dword_131600;
// 131604: using guessed type __int16 word_131604;
// 131608: using guessed type int dword_131608;
// 13160C: using guessed type __int16 word_13160C;
// 131614: using guessed type int dword_131614;
// 131618: using guessed type __int16 word_131618;
// 131620: using guessed type int dword_131620[65];
// 64846: using guessed type unsigned int arg_C;
// 64846: using guessed type unsigned int arg_4;

//----- (00064F78) --------------------------------------------------------
int sub_64F78(unsigned int a1, int a2, int a3)
{
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int (*v8)(_DWORD); // [esp+14h] [ebp-4h]

  if ( !dword_A0230[a1] )
    return 1;
  dword_A0258[a1] = 0;
  if ( (unsigned int)dword_A02C6[a1] < 0xE106 && dword_9EF6C[a1] && a2 )
    dword_9EF6C[a1] = 0;
  v8 = (int (*)(_DWORD))dword_A01EA[a1];
  sub_676E5(v8);
  sub_677B8(v8);
  sub_67944();
  if ( a3 )
  {
    sub_6E030(a1);
    sub_6E23C(*(int *)((char *)&dword_A01FE + 6 * a1), word_A0202[3 * a1]);
  }
  v3 = 3 * a1;
  word_A01D0[v3] = 0;
  *(int *)((char *)&dword_A01CC + v3 * 2) = 0;
  v4 = 3 * a1;
  word_A02DE[v4] = 0;
  *(int *)((char *)&dword_A02DA + v4 * 2) = 0;
  v5 = 3 * a1;
  word_A0202[v5] = 0;
  *(int *)((char *)&dword_A01FE + v5 * 2) = 0;
  dword_A0338[a1] = 0;
  dword_A0230[a1] = 0;
  return 0;
}
// 9EF6C: using guessed type int dword_9EF6C[];
// A01CC: using guessed type int dword_A01CC;
// A01D0: using guessed type __int16 word_A01D0[];
// A01EA: using guessed type int dword_A01EA[5];
// A01FE: using guessed type int dword_A01FE;
// A0202: using guessed type __int16 word_A0202[13];
// A0230: using guessed type int dword_A0230[5];
// A0258: using guessed type int dword_A0258[5];
// A02C6: using guessed type int dword_A02C6[5];
// A02DA: using guessed type int dword_A02DA;
// A02DE: using guessed type __int16 word_A02DE[];
// A0338: using guessed type int dword_A0338[6];

//----- (000650FF) --------------------------------------------------------
int sub_650FF_6560F(__int16 a1, int a2, unsigned int a3, _DWORD *a4)
{
  int v5; // [esp+14h] [ebp-4h] BYREF

  do
  {
    sub_675C8((a3 >> 4) + 4, (uint32*)&v5);
    v5 = sub_67557_67A67(a1, a2, v5);
    *a4 = v5;
    a1 = v5;
  }
  while ( (unsigned __int16)v5 > 0xFFFF - a3 );
  return sub_67582();
}

//----- (000651D6) --------------------------------------------------------
void sub_651D6()
{
  ;
}

//----- (000651E7) --------------------------------------------------------
void sub_651E7()
{
  ;
}

//----- (000651F8) --------------------------------------------------------
bool sub_651F8(int a1, int a2)
{
  unsigned int i; // [esp+8h] [ebp-4h]

  for ( i = 0; ; ++i )
  {
    if ( i >= 0x20 )
      return 1;
    if ( (__int16)__readgsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 52) == a2 )
      break;
  }
  return ((__readgsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 48) >> 8) & 0x80u) == 0;
}

//----- (0006533A) --------------------------------------------------------
void sub_6533A()
{
  ;
}

//----- (0006534B) --------------------------------------------------------
void sub_6534B()
{
  ;
}

//----- (0006535C) --------------------------------------------------------
int sub_6535C(int a1, unsigned int a2)
{
  unsigned int v2; // edx
  unsigned int v3; // ebx
  int v4; // edx
  unsigned int v5; // ebx
  unsigned int v6; // ebx
  int v7; // edx
  unsigned __int16 v8; // bx
  int v9; // eax
  unsigned int v10; // ebx
  unsigned int i; // [esp+20h] [ebp-4h]

  if ( (unsigned int)dword_A02C6[a1] >= 0xE106 )
    return 0;
  for ( i = 0; ; ++i )
  {
    if ( i >= 0x20 )
      return -1;
    if ( ((__readgsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 48) >> 8) & 0x80u) == 0 )
      break;
  }
  v2 = *(_DWORD *)&byte_131724[192 * a1 + 6 * i];
  v3 = __readgsdword(a2);
  __writegsword(v2 + 4, __readgsword(a2 + 4));
  __writegsdword(v2, v3);
  v4 = *(_DWORD *)&byte_131724[192 * a1 + 6 * i];
  v5 = __readgsdword(a2);
  __writegsword(v4 + 12, __readgsword(a2 + 4));
  __writegsdword(v4 + 8, v5);
  v6 = __readgsdword(a2 + 36) + __readgsdword(a2);
  v7 = *(_DWORD *)&byte_131724[192 * a1 + 6 * i];
  __writegsword(v7 + 20, __readgsword(a2 + 4));
  __writegsdword(v7 + 16, v6);
  if ( (__readgsbyte(a2 + 28) & 0x40) != 0 )
  {
    __writegsdword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 24, __readgsdword(a2 + 36));
    __writegsdword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 28, __readgsdword(a2 + 36));
    __writegsdword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 32, __readgsdword(a2 + 40));
    __writegsdword(
      *(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 44,
      __readgsdword(a2 + 32) - (__readgsdword(a2 + 40) + __readgsdword(a2 + 36)));
  }
  else
  {
    __writegsdword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 24, __readgsdword(a2 + 8));
    __writegsdword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 28, __readgsdword(a2 + 8));
  }
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 50, __readgsword(a2 + 16));
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 52, __readgsword(a2 + 18));
  v8 = __readgsword(a2 + 28);
  HIBYTE(v8) |= 0xA0u;
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 48, v8);
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 54, __readgsword(a2 + 14));
  v9 = *(_DWORD *)&byte_131724[192 * a1 + 6 * i];
  v10 = __readgsdword(a2 + 20);
  __writegsword(v9 + 64, __readgsword(a2 + 24));
  __writegsdword(v9 + 60, v10);
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 56, __readgsword(a2 + 12));
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 74, __readgsword(a2 + 26));
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 58, 0);
  __writegsdword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 68, __readgsdword(a2 + 44));
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 72, 0);
  __writegsdword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 76, 0);
  __writegsdword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 80, __readgsdword(a2 + 8));
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 84, __readgsword(a2 + 50));
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 86, __readgsword(a2 + 52));
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 88, __readgsword(a2 + 54));
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 90, __readgsword(a2 + 56));
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 92, __readgsword(a2 + 58));
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 94, __readgsword(a2 + 60));
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 96, __readgsword(a2 + 62));
  __writegsdword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 100, 0);
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 104, 0);
  return i;
}
// A02C6: using guessed type int dword_A02C6[5];

//----- (00065965) --------------------------------------------------------
int sub_65965(int a1, int a2)
{
  unsigned int i; // [esp+4h] [ebp-4h]

  for ( i = 0; ; ++i )
  {
    if ( i >= 0x20 )
      return 10;
    if ( (__int16)__readgsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 52) == a2 )
      break;
  }
  __writegsbyte(
    *(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 49,
    __readgsbyte(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 49) & 0x7F);
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 52, 0);
  return 0;
}

//----- (00065D57) --------------------------------------------------------
void sub_65D57()
{
  ;
}

uint8_t* ZERO_PTR = 0;

//----- (00065D70) --------------------------------------------------------
void sub_65D70_66280(TypeTab* a1, TypeTab* a2, uint8_t* a3)
{
 for ( int i = 0; &a1[i] < a2; i++ )
  {
     if (a1[i].Tab_0 < a3)
    {
        a1[i].dim.x *= 2;
        a1[i].dim.y *= 2;
        a1[i].Tab_0 += a3 - ZERO_PTR;
    }
  }
}

//----- (00065DC0) --------------------------------------------------------
void sub_65DC0_662D0(TypeTab* a1, TypeTab* a2, uint8_t* a3)
{
  for (int i = 0; &a1[i] < a2; i++ )
  {
    if ( a1[i].Tab_0 < a3 )
        a1[i].Tab_0 += a3 - ZERO_PTR;
  }
}

//----- (00065E00) --------------------------------------------------------
void sub_65E00()
{
  if ( byte_939CC && byte_939CD && word_939D2 && sub_5D7F0(dword_CBFD8) )
  {
    sub_5F529(dword_CBFD8, (unsigned int)&dword_12F030);
    sub_5F398(dword_CBFD8);
  }
}
// 939CC: using guessed type char byte_939CC;
// 939CD: using guessed type char byte_939CD;
// 939D2: using guessed type __int16 word_939D2;
// CBFD8: using guessed type int dword_CBFD8;
// 12F030: using guessed type int dword_12F030;

//----- (00065EB0) --------------------------------------------------------
void ViewportResize_65EB0_663C0(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  viewportBegX_12F008_12EFF8 = a1;
  viewportBegY_12F018_12F008 = a2;
  dword_12F000_12EFF0 = a3;
  dword_12F028_12F018 = a4;
  dword_12F024_12F014 = a3 + a1;
  dword_12F010 = a4 + a2;
}
// 12F000: using guessed type int dword_12F000_12EFF0;
// 12F008: using guessed type int viewportBegX_12F008_12EFF8;
// 12F010: using guessed type int dword_12F010;
// 12F018: using guessed type int viewportBegY_12F018_12F008;
// 12F024: using guessed type int dword_12F024_12F014;
// 12F028: using guessed type int dword_12F028_12F018;

//----- (00065F10) --------------------------------------------------------
void sub_65F10(__int16 a1, __int16 a2)
{
  int v2; // edx
  __int16 *v3; // [esp+0h] [ebp-Ch]
  __int16 i; // [esp+4h] [ebp-8h]
  __int16 j; // [esp+4h] [ebp-8h]
  char v6; // [esp+8h] [ebp-4h]

  if ( byte_939E4 && byte_939E5 && a2 <= (int)(unsigned __int16)word_CC1C6 )
  {
    v3 = word_CBFF0;
    for ( i = 0; i < 32; ++i )
    {
      if ( *v3 == a1 && v3[1] == a2 && !sub_651F8(dword_CC140, i) )
      {
        sub_65965(dword_CC140, i);
        break;
      }
      v3 += 2;
    }
    v6 = 0;
    for ( j = 0; j < 32; ++j )
    {
      if ( sub_651F8(dword_CC140, j) )
      {
        v6 = 1;
        break;
      }
    }
    if ( v6 )
    {
      word_CBFF0[2 * j] = a1;
      word_CBFF2[2 * j] = a2;
      word_93A02 = j;
      word_93A0C = 256;
      word_93A00 = 0x7FFF;
      word_CC070[j] = 0x7FFF;
      dword_939F8 = *(_DWORD *)(32 * a2 + dword_CC154 + 26) - 16;
      v2 = *(_DWORD *)(32 * a2 + dword_CC154 + 18);
      //fix word_939F4 = __DS__;
      dword_939F0 = v2;
      dword_CC144 = sub_6535C(dword_CC140, (unsigned int)&dword_939F0);
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// 939E5: using guessed type char byte_939E5;
// 939F0: using guessed type int dword_939F0;
// 939F4: using guessed type __int16 word_939F4;
// 939F8: using guessed type int dword_939F8;
// 93A00: using guessed type __int16 word_93A00;
// 93A02: using guessed type __int16 word_93A02;
// 93A0C: using guessed type __int16 word_93A0C;
// CBFF0: using guessed type __int16 word_CBFF0[];
// CBFF2: using guessed type __int16 word_CBFF2[63];
// CC070: using guessed type __int16 word_CC070[];
// CC140: using guessed type int dword_CC140;
// CC144: using guessed type int dword_CC144;
// CC154: using guessed type int dword_CC154;
// CC1C6: using guessed type __int16 word_CC1C6;

//----- (00066107) --------------------------------------------------------
void sub_66107()
{
  ;
}

//----- (00066118) --------------------------------------------------------
int sub_66118(int a1, int a2, unsigned __int16 a3)
{
  unsigned int i; // [esp+4h] [ebp-4h]

  if ( !dword_A0258[a1] )
    return -1;
  for ( i = 0; ; ++i )
  {
    if ( i >= 0x20 )
      return 10;
    if ( (__int16)__readgsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 52) == a2 )
      break;
  }
  __writegsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 50, a3);
  return 0;
}
// A0258: using guessed type int dword_A0258[5];

//----- (000661A4) --------------------------------------------------------
int sub_661A4(int a1, int a2)
{
  unsigned int i; // [esp+8h] [ebp-4h]

  if ( !dword_A0258[a1] )
    return -1;
  for ( i = 0; i < 0x20; ++i )
    __writegsword(
      *(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 50,
      (__int16)__readgsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 50) * a2 / 0x7FFFu);
  return 0;
}
// A0258: using guessed type int dword_A0258[5];

//----- (0006623A) --------------------------------------------------------
void sub_6623A()
{
  ;
}

//----- (00066250) --------------------------------------------------------
void sub_66250(__int16 a1, __int16 a2, unsigned __int16 a3)
{
  __int16 *v3; // [esp+0h] [ebp-8h]
  __int16 i; // [esp+4h] [ebp-4h]

  if ( byte_939E4 )
  {
    v3 = word_CBFF0;
    for ( i = 0; i < 32; ++i )
    {
      if ( *v3 == a1 && v3[1] == a2 && !sub_651F8(dword_CC140, i) && a3 < 0x81u )
      {
        sub_66118(dword_CC140, i, (a3 << 8) - 1);
        word_CC070[i] = (a3 << 8) - 1;
        return;
      }
      v3 += 2;
    }
  }
}
// 939E4: using guessed type char byte_939E4;
// CBFF0: using guessed type __int16 word_CBFF0[];
// CC070: using guessed type __int16 word_CC070[];
// CC140: using guessed type int dword_CC140;

//----- (00066313) --------------------------------------------------------
void sub_66313()
{
  ;
}

//----- (00066324) --------------------------------------------------------
int sub_66324(int a1)
{
  int v2; // [esp+4h] [ebp-8h]
  unsigned int i; // [esp+8h] [ebp-4h]

  v2 = 0;
  for ( i = 0; i < 0x20; ++i )
  {
    if ( ((__readgsword(*(_DWORD *)&byte_131724[192 * a1 + 6 * i] + 48) >> 8) & 0x80u) != 0 )
      ++v2;
  }
  return v2;
}

//----- (0006637C) --------------------------------------------------------
void sub_6637C()
{
  ;
}

//----- (00066390) --------------------------------------------------------
void sub_66390(TypeTab* a1, TypeTab* a2, uint8_t* a3)
{
	for (int i = 0; &a1[i] < a2; i++)
	{
		if (a1[i].Tab_0 >= a3)
		{
			a1[i].dim.x >>= 1;
			a1[i].dim.y >>= 1;
			a1[i].Tab_0 -= a3 - ZERO_PTR;
		}
	}
}

//----- (00066410) --------------------------------------------------------
void sub_66410(TypeTab* a1, TypeTab* a2, uint8_t* a3)
{
    for (int i = 0; &a1[i] < a2; i++)
    {
        if (a1[i].Tab_0 >= a3)
        {
            a1[i].Tab_0 -= a3 - ZERO_PTR;
        }
    }
}

//----- (000664AB) --------------------------------------------------------
int sub_664AB_669BB(char* vipEnv, char** a2, int a3, int a4)
{
  int v4; // edi
  char* i; // ebx
  unsigned __int8 v6; // al
  unsigned __int8 v8; // cl
  unsigned int v9; // esi
  int v10; // eax
  unsigned int v11; // edx
  char* v12; // [esp+0h] [ebp-1Ch]
  char v13; // [esp+4h] [ebp-18h]
  unsigned __int8 v14; // [esp+8h] [ebp-14h]

  v4 = a3;
  if ( a2 )
    *a2 = vipEnv;
  for ( i = vipEnv; (IsTable[(unsigned __int8)(*i + 1)] & 2) != 0; ++i )
    ;
  v14 = *i;
  if ( *i == 43 || *i == 45 )
    ++i;
  if ( !a3 )
  {
    if ( *i == 48 && ((v6 = i[1], v6 == 120) || v6 == 88) )
    {
      v4 = 16;
    }
    else if ( *i == 48 )
    {
      v4 = 8;
    }
    else
    {
      v4 = 10;
    }
  }
  if ( v4 >= 2 && v4 <= 36 )
  {
    if ( v4 == 16 && *i == 48 )
    {
      v8 = i[1];
      if ( v8 == 120 || v8 == 88 )
        i += 2;
    }
    v12 = i;
    v9 = 0;
    v13 = 0;
    while ( 1 )
    {
      v10 = sub_66612(*i);
      if ( v10 >= v4 )
        break;
      v11 = v9;
      v9 = v10 + v4 * v9;
      if ( v9 < v11 )
        v13 = 1;
      ++i;
    }
    if ( i == v12 )
      i = vipEnv;
    if ( a2 )
      *a2 = i;
    if ( a4 == 1 && v9 >= 0x80000000 && (v9 != 0x80000000 || v14 != 45) )
      v13 = 1;
    if ( v13 )
    {
      _set_errno(14);
      if ( a4 )
      {
        if ( v14 == 45 )
          return 0x80000000;
        else
          return 0x7FFFFFFF;
      }
      else
      {
        return -1;
      }
    }
    else
    {
        if (v14 == 45)
            return 0;//fix -v9;
      return v9;
    }
  }
  else
  {
    _set_errno(13);
    return 0;
  }
}
// 66C8B: using guessed type _DWORD _set_errno(_DWORD);

//----- (0006660D) --------------------------------------------------------
int sub_6660D_66B1D(char* vipEnv, char** a2, int a3)
{
  return sub_664AB_669BB(vipEnv, a2, a3, 1);
}

//----- (00066612) --------------------------------------------------------
int sub_66612(unsigned __int8 a1)
{
  unsigned __int8 v2; // al

  if ( a1 >= 0x30u && a1 <= 0x39u )
    return a1 - 48;
  v2 = tolower(a1);
  if ( v2 >= 0x61u && v2 <= 0x69u )
    return v2 - 87;
  if ( v2 >= 0x6Au && v2 <= 0x72u || v2 >= 0x73u && v2 <= 0x7Au )
    return v2 - 87;
  return 37;
}
// 6B5A3: using guessed type _DWORD tolower(_DWORD);

//----- (0006666C) --------------------------------------------------------
__int16 sub_6666C(__int16 result)
{
  _BOOL1 v1; // zf

  FixPerifery();

  //fix __asm { int     16h; KEYBOARD - GET ENHANCED SHIFT FLAGS (AT model 339,XT2,XT286,PS) }
  byte_12EF71 = (result & 3) != 0;
  if ( (result & 4) != 0 )
    byte_12EF71 |= 2u;
  v1 = (result & 8) == 0;
  if ( (result & 8) != 0 )
  {
    v1 = 0;
    byte_12EF71 |= 4u;
  }
  lastPressedKey_12EF70_12EF60 = 0;
  //fix __asm { int     16h; KEYBOARD - CHECK ENHANCED KEYSTROKE (AT model 339,XT2,XT286,PS) }
  if ( !v1 )
  {
      //fix __asm { int     16h; KEYBOARD - GET ENHANCED KEYSTROKE (AT model 339,XT2,XT286,PS) }
    lastPressedKey_12EF70_12EF60 = 16;
  }
  return result;
}
// 12EF70: using guessed type char lastPressedKey_12EF70_12EF60;
// 12EF71: using guessed type char byte_12EF71;

//----- (00066CAD) --------------------------------------------------------
void sub_66CAD()
{
    FixPerifery();
  //fix ((void (*)(_DWORD))_GETDS)((unsigned __int16)__DS__);
}
// 66CAD: using guessed type void sub_66CAD();

//----- (00066D24) --------------------------------------------------------
unsigned __int8 sub_66D24(__int16 a1)
{
  unsigned __int8 v1; // al
  unsigned __int8 v2; // ah
  unsigned __int8 v3; // al
  unsigned __int8 result; // al

  FixPerifery();

  if ( dword_A01C4 )
  {
    v1 = __inbyte(0x21u);
    __outbyte(0x21u, v1 | 1);
    __outbyte(0x43u, 0x36u);
    v2 = HIBYTE(a1);
    __outbyte(0x40u, a1);
    __outbyte(0x40u, v2);
    v3 = __inbyte(0x21u);
    result = v3 & 0xFE;
    __outbyte(0x21u, result);
  }
  return result;
}
// A01C4: using guessed type int dword_A01C4;

//----- (00066D6A) --------------------------------------------------------
unsigned __int8 sub_66D6A_6727A(int a1, __int16 a2, int a3, __int16 a4)
{
  unsigned __int8 v4; // al
  unsigned __int8 v5; // ah
  unsigned __int8 v6; // al
  unsigned __int8 result; // al

  FixPerifery();

  *(_DWORD *)byte_9F1A8 = a3;
  *(_WORD *)&byte_9F1A8[4] = a4;
  //fix word_9F1B0 = __DS__;
  //fix word_9F1B6 = __DS__;
  if ( dword_A01C4 )
  {
    v4 = __inbyte(0x21u);
    __outbyte(0x21u, v4 | 1);
    //fix __asm { int     21h; DOS - 2+ - GET INTERRUPT VECTOR }
    dword_9F19C = a1;
    LOWORD(dword_9F1A0) = a4;
    //fix __asm { int     21h; DOS - SET INTERRUPT VECTOR }
    __outbyte(0x43u, 0x36u);
    v5 = HIBYTE(a2);
    __outbyte(0x40u, a2);
    __outbyte(0x40u, v5);
    v6 = __inbyte(0x21u);
    result = v6 & 0xFE;
    __outbyte(0x21u, result);
  }
  return result;
}
// 9F19C: using guessed type int dword_9F19C;
// 9F1A0: using guessed type int dword_9F1A0;
// 9F1B0: using guessed type __int16 word_9F1B0;
// 9F1B6: using guessed type __int16 word_9F1B6;
// A01C4: using guessed type int dword_A01C4;

//----- (00066DF5) --------------------------------------------------------
unsigned __int8 sub_66DF5()
{
  unsigned __int8 v0; // al
  unsigned __int8 result; // al

  FixPerifery();

  if ( dword_A01C4 )
  {
    v0 = __inbyte(0x21u);
    result = v0 | 1;
    __outbyte(0x21u, result);
  }
  return result;
}
// A01C4: using guessed type int dword_A01C4;

//----- (00066E21) --------------------------------------------------------
unsigned __int8 sub_66E21()
{
  unsigned __int8 v0; // al
  unsigned __int8 result; // al

  FixPerifery();

  if ( dword_A01C4 )
  {
    v0 = __inbyte(0x21u);
    result = v0 & 0xFE;
    __outbyte(0x21u, result);
  }
  return result;
}
// A01C4: using guessed type int dword_A01C4;

//----- (00066E4D) --------------------------------------------------------
unsigned __int8 sub_66E4D()
{
  unsigned __int8 v0; // al
  unsigned __int8 v1; // al
  unsigned __int8 result; // al

  FixPerifery();

  if ( dword_A01C4 )
  {
    v0 = __inbyte(0x21u);
    __outbyte(0x21u, v0 | 1);
    //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
    __outbyte(0x40u, 0);
    __outbyte(0x40u, 0);
    v1 = __inbyte(0x21u);
    result = v1 & 0xFE;
    __outbyte(0x21u, result);
  }
  return result;
}
// 9F19C: using guessed type int dword_9F19C;
// A01C4: using guessed type int dword_A01C4;

//----- (00066EA2) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
int sub_66EA2()
{
  int result; // eax
  int v1; // [esp-8h] [ebp-8h]
  int v2; // [esp-4h] [ebp-4h]
  void *retaddr[2]; // [esp+0h] [ebp+0h] BYREF

  //fix
  result = 0;
  //fix

  if ( dword_A01C4 )
  {
    word_A01C2 = 0;
    return 0;//fix
    /*MK_FP(retaddr[0], retaddr[0])(
             _InterlockedExchange((volatile __int32 *)&retaddr[1], dword_9F1A0),
             v2,
             v1,
             _InterlockedExchange((volatile __int32 *)retaddr, dword_9F19C));*/
  }
  return result;
}
// 66EE2: positive sp value 28 has been found
// 66EE2: variable 'v2' is possibly undefined
// 66EE2: variable 'v1' is possibly undefined
// 9F19C: using guessed type int dword_9F19C;
// 9F1A0: using guessed type int dword_9F1A0;
// A01C2: using guessed type __int16 word_A01C2;
// A01C4: using guessed type int dword_A01C4;

//----- (00066EE5) --------------------------------------------------------
void sub_66EE5()
{
  ;
}

//----- (00066EF6) --------------------------------------------------------
unsigned __int64 sub_66EF6(unsigned int a1, __int16 a2)
{
  unsigned int v3; // [esp+4h] [ebp-4h]

  LOWORD(v3) = a2;
  return __PAIR64__(v3, a1);
}
// 66F12: variable 'v3' is possibly undefined

//----- (00066F1A) --------------------------------------------------------
void sub_66F1A()
{
  ;
}

//----- (00066F2B) --------------------------------------------------------
void sub_66F2B()
{
  ;
}

//----- (00066F3C) --------------------------------------------------------
int sub_66F3C()
{
  int v0; // eax
  int v1; // eax
  int v2; // eax
  int v3; // eax
  int v4; // eax
  int v5; // edx
  int v6; // edx
  int v7; // eax
  int v8; // eax
  int v9; // edx
  int v10; // eax
  int v11; // edx
  unsigned __int8 v13; // [esp+0h] [ebp-34h]
  int v14; // [esp+4h] [ebp-30h] BYREF
  __int16 v15; // [esp+8h] [ebp-2Ch]
  int v16; // [esp+Ch] [ebp-28h]
  __int16 v17; // [esp+10h] [ebp-24h]
  _DWORD v18[2]; // [esp+14h] [ebp-20h]
  int v19; // [esp+1Ch] [ebp-18h]
  int v20; // [esp+20h] [ebp-14h]
  int v21; // [esp+24h] [ebp-10h]
  unsigned __int8 i; // [esp+30h] [ebp-4h]
  void *retaddr[2]; // [esp+44h] [ebp+10h]

  if (!dword_9C136[(unsigned __int8)byte_A04D1] || dword_9C116[(unsigned __int8)byte_A04D1])
      return 0;//fix MK_FP(retaddr[0], retaddr[0])();
  for ( i = 0; ; ++i )
  {
    if (i >= (unsigned int)dword_9C042[(unsigned __int8)byte_A04D1])
        return 0;//fix MK_FP(retaddr[0], retaddr[0])();
    v0 = ((unsigned __int8)byte_A04D1 << 7) + 4 * i;
    ++*(int *)((char *)dword_9BBF2 + v0);
    v1 = 192 * (unsigned __int8)byte_A04D1 + 6 * i;
    if ( (*(_DWORD *)&byte_9B1F2[v1] || *(_WORD *)&byte_9B1F2[v1 + 4])
      && dword_9B7F2[32 * (unsigned __int8)byte_A04D1 + i] <= (unsigned int)dword_9BBF2[32 * (unsigned __int8)byte_A04D1
                                                                                      + i] )
    {
      break;
    }
LABEL_31:
    ;
  }
  while ( 1 )
  {
    if ( __readgsbyte(*(_DWORD *)&byte_9B1F2[192 * (unsigned __int8)byte_A04D1 + 6 * i]) >= 0xF0u )
      v2 = (unsigned __int8)byte_9C166[__readgsbyte(*(_DWORD *)&byte_9B1F2[192 * (unsigned __int8)byte_A04D1 + 6 * i]) & 0xF];
    else
      v2 = (unsigned __int8)byte_9C156[(int)__readgsbyte(*(_DWORD *)&byte_9B1F2[192 * (unsigned __int8)byte_A04D1
                                                                              + 6 * i]) >> 4];
    v21 = v2;
    if ( __readgsbyte(*(_DWORD *)&byte_9B1F2[192 * (unsigned __int8)byte_A04D1 + 6 * i]) != 0xFF )
    {
      v7 = 192 * (unsigned __int8)byte_A04D1 + 6 * i;
      sub_5DF83(
        (unsigned __int8)byte_A04D1,
        *(_DWORD *)&byte_9B1F2[v7],
        *(_WORD *)&byte_9B1F2[v7 + 4],
        __readgsdword(*(int *)((char *)&dword_9BFF2 + 6 * (unsigned __int8)byte_A04D1) + 4 * i),
        v21);
      goto LABEL_28;
    }
    v13 = __readgsbyte(*(_DWORD *)&byte_9B1F2[192 * (unsigned __int8)byte_A04D1 + 6 * i] + 1);
    if ( v13 < 0x2Fu )
      goto LABEL_28;
    if ( v13 > 0x2Fu )
    {
      if ( v13 == 81 )
        v21 = 5;
      goto LABEL_28;
    }
    v3 = 192 * (unsigned __int8)byte_A04D1 + 6 * i;
    *(_WORD *)&byte_9B1F2[v3 + 4] = 0;
    *(_DWORD *)&byte_9B1F2[v3] = 0;
    v4 = (unsigned __int8)byte_A04D1;
    if ( !--dword_9C022[v4] )
      break;
    v21 = 3;
LABEL_28:
    dword_9BBF2[32 * (unsigned __int8)byte_A04D1 + i] = 0;
    v8 = 192 * (unsigned __int8)byte_A04D1 + 6 * i;
    if ( *(_DWORD *)&byte_9B1F2[v8] || *(_WORD *)&byte_9B1F2[v8 + 4] )
    {
      v9 = 192 * (unsigned __int8)byte_A04D1 + 6 * i;
      LOWORD(v20) = *(_WORD *)&byte_9B1F2[v9 + 4];
      v19 = v21 + *(_DWORD *)&byte_9B1F2[v9];
      *(_WORD *)&byte_9B1F2[v9 + 4] = v20;
      *(_DWORD *)&byte_9B1F2[v9] = v19;
      v10 = 192 * (unsigned __int8)byte_A04D1 + 6 * i;
      v21 = sub_5F7C7(
              *(_DWORD *)&byte_9B1F2[v10],
              *(unsigned __int16 *)&byte_9B1F2[v10 + 4],
              (unsigned int)&dword_9B7F2[32 * (unsigned __int8)byte_A04D1 + i]);
      v11 = 6 * i + 192 * (unsigned __int8)byte_A04D1;
      LOWORD(v20) = *(_WORD *)&byte_9B1F2[v11 + 4];
      v19 = v21 + *(_DWORD *)&byte_9B1F2[v11];
      *(_WORD *)&byte_9B1F2[v11 + 4] = v20;
      *(_DWORD *)&byte_9B1F2[v11] = v19;
      if ( !dword_9B7F2[32 * (unsigned __int8)byte_A04D1 + i] )
        continue;
    }
    goto LABEL_31;
  }
  dword_9C136[(unsigned __int8)byte_A04D1] = 0;
  sub_5E9C1((unsigned __int8)byte_A04D1);
  if ( dword_9C1A6[(unsigned __int8)byte_A04D1] != -1 )
    sub_5DC91(dword_9C1A6[(unsigned __int8)byte_A04D1]);
  byte_A04C1[dword_9C1A6[(unsigned __int8)byte_A04D1]] = -1;
  dword_9C1A6[(unsigned __int8)byte_A04D1] = -1;
  v5 = *(_DWORD *)&byte_9C176[6 * (unsigned __int8)byte_A04D1];
  LOWORD(v18[1]) = __readgsword(v5 + 772);
  v18[0] = __readgsdword(v5 + 768);
  v6 = 6 * (unsigned __int8)byte_A04D1;
  v15 = *(_WORD *)&byte_9C176[v6 + 4];
  v14 = *(_DWORD *)&byte_9C176[v6];
  v17 = v18[1];
  v16 = v18[0];
  *(_WORD *)&byte_9C176[v6 + 4] = 0;
  *(_DWORD *)&byte_9C176[v6] = 0;
  sub_5F529((unsigned __int8)byte_A04D1, (unsigned int)&v14);
  if (v18[0] || LOWORD(v18[1]))
      ;//fix MK_FP(v18[1], v18[0])((unsigned __int8)byte_A04D1);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])();
}
// 9B7F2: using guessed type int dword_9B7F2[256];
// 9BBF2: using guessed type int dword_9BBF2[256];
// 9BFF2: using guessed type int dword_9BFF2;
// 9C022: using guessed type int dword_9C022[8];
// 9C042: using guessed type int dword_9C042[8];
// 9C116: using guessed type int dword_9C116[8];
// 9C136: using guessed type int dword_9C136[8];
// 9C1A6: using guessed type int dword_9C1A6[8];
// A04D1: using guessed type char byte_A04D1;

//----- (00067464) --------------------------------------------------------
void sub_67464()
{
  ;
}

//----- (00067475) --------------------------------------------------------
void sub_67475()
{
  ;
}

//----- (00067486) --------------------------------------------------------
bool sub_67486(int a1)
{
  return dword_9B18E[a1] == 0;
}
// 9B18E: using guessed type int dword_9B18E[5];

//----- (000674B9) --------------------------------------------------------
void sub_674B9()
{
  ;
}

//----- (000674CD) --------------------------------------------------------
void sub_674CD()
{
  __int16 result; // ax

  FixPerifery();

  result = 1536;
  //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
}

//----- (000674FA) --------------------------------------------------------
void sub_674FA()
{
  __int16 result; // ax

  FixPerifery();

  result = 1536;
  //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
}

//----- (00067527) --------------------------------------------------------
void sub_67527(int a1, int a2, __int16 a3)
{
  int v5; // ecx

  v5 = 32;
  do
  {
    *(_DWORD *)a1 = a2;
    *(_WORD *)(a1 + 4) = a3;
    a2 += 108;
    a1 += 6;
    --v5;
  }
  while ( v5 );
}

//----- (00067557) --------------------------------------------------------
int sub_67557_67A67(__int16 a1, int a2, int a3)
{
  int v3; // ecx

  FixPerifery();

  //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
  v3 = a2 << 16;
  LOWORD(v3) = a1;
  return v3 + a3;
}

//----- (00067582) --------------------------------------------------------
int sub_67582()
{

    FixPerifery();
  __asm
  {
      //fix int     31h; DPMI Services   ax=func xxxxh
    //fix int     31h; DPMI Services   ax=func xxxxh
    //fix int     31h; DPMI Services   ax=func xxxxh
  }
  return 0;
}

//----- (000675C8) --------------------------------------------------------
__int16 sub_675C8(int a1, _DWORD *a2)
{
  __int16 result; // ax

  FixPerifery();

  //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
  *a2 = 4096;
  //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
  result = 1536;
  //fix __asm { int     31h; DPMI Services   ax=func xxxxh }
  return result;
}

//----- (0006765C) --------------------------------------------------------
int sub_6765C_67B6C(
        const void *a1,
        int (*a2)(_DWORD),
        char a3,
        __int16 a4,
        char *a5,
        __int16 a6)
{
  int result; // eax

  result = a2((uint32)a2);
  qmemcpy(a5, a1, 0x6Au);
  //fix *MK_FP(a6, a5 + 52) = a4;
  //fix *MK_FP(a6, a5 + 60) = a4;
  //fix *MK_FP(a6, a5 + 68) = a4;
  //fix *MK_FP(a6, a5 + 76) = a4;
  return result;
}

//----- (000676B0) --------------------------------------------------------
int sub_676B0(int a1, int (*a2)(_DWORD), char a3, __int16 a4, int a5, __int16 a6)
{
  int result; // eax

  result = a2((uint32)a2);
  //fix *MK_FP(a6, a5) = a1;
  //fix *MK_FP(a6, a5 + 4) = a4;
  return result;
}

//----- (000676E5) --------------------------------------------------------
int sub_676E5(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (00067710) --------------------------------------------------------
int sub_67710(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (0006773B) --------------------------------------------------------
__int16 sub_6773B(int (*a1)(_DWORD))
{
  __int16 v1; // cx
  __int16 result; // ax

  //fix
  v1 = 0;
  //fix

  LOWORD(dword_A06DC) = a1((uint32)a1);
  LOWORD(dword_A06E4) = SHIBYTE(v1);
  result = (char)v1;
  LOWORD(dword_A06E0) = (char)v1;
  return result;
}
// 67765: variable 'v1' is possibly undefined
// A06DC: using guessed type int dword_A06DC;
// A06E0: using guessed type int dword_A06E0;
// A06E4: using guessed type int dword_A06E4;

//----- (00067780) --------------------------------------------------------
int sub_67780(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (000677B8) --------------------------------------------------------
int sub_677B8(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (000677E3) --------------------------------------------------------
__int16 sub_677E3_67CF3(
        int a1,
        void (*a2)(_DWORD),
        char a3,
        int a4,
        int a5,
        int a6,
        int a7,
        int a8,
        int a9,
        int a10)
{
  __int16 result; // ax

  //fix
  result = 0;
  //fix

  a2((uint32)a2);
  _disable();
  //fix
  /*
  *(_DWORD *)a10 = (char *)a2 + a5;
  *(_DWORD *)(a10 + 8) = (char *)a2 + a7;
  *(_DWORD *)(a10 + 16) = (char *)a2 + a1;
  *(_WORD *)(a10 + 4) = __CS__;
  result = __DS__;
  *(_WORD *)(a10 + 12) = __DS__;
  *(_WORD *)(a10 + 20) = __DS__;
  */
  _enable();
  return result;
}
// 677E3: using guessed type _DWORD arg_C;

//----- (00067845) --------------------------------------------------------
int sub_67845(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (0006787E) --------------------------------------------------------
int sub_6787E(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (000678AF) --------------------------------------------------------
int sub_678AF(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (000678DE) --------------------------------------------------------
int sub_678DE(int (*a1)(_DWORD))
{
  return a1((uint32)a1);
}

//----- (0006790D) --------------------------------------------------------
__int16 sub_6790D()
{
  __int16 result; // ax

  FixPerifery();

  result = 5632;
  //fix __asm { int     2Fh; - Multiplex - MS WINDOWS - ENHANCED WINDOWS INSTALLATION CHECK }
  return result;
}

//----- (00067944) --------------------------------------------------------
__int16 sub_67944()
{
  __int16 result; // ax

  FixPerifery();

  result = 5632;
  //fix __asm { int     2Fh; - Multiplex - MS WINDOWS - ENHANCED WINDOWS INSTALLATION CHECK }
  return result;
}

//----- (0006797C) --------------------------------------------------------
void sub_6797C()
{
  ;
}

//----- (0006798D) --------------------------------------------------------
int *sub_6798D()
{
  return &dword_131522;
}
// 131522: using guessed type int dword_131522;

//----- (000679AE) --------------------------------------------------------
int sub_679AE(int a1, unsigned __int16 a2, int a3, int a4)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  //fix MK_FP(*((_WORD *)&byte_9C22E + 2), byte_9C22E)(a1, a2, a3, a4);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// 9C22E: using guessed type int (*byte_9C22E)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (000679DE) --------------------------------------------------------
int sub_679DE()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (000679F7) --------------------------------------------------------
int sub_679F7()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00067A10) --------------------------------------------------------
int sub_67A10()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00067A29) --------------------------------------------------------
int sub_67A29(int (*a1)(_DWORD, _DWORD, _DWORD, _DWORD), __int16 a2)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  *((_WORD *)&byte_9C22E + 2) = a2;
  byte_9C22E = a1;
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// 9C22E: using guessed type int (*byte_9C22E)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (00067A53) --------------------------------------------------------
void sub_67A53()
{
  ;
}

//----- (00067A64) --------------------------------------------------------
void sub_67A64()
{
  ;
}

//----- (00067A75) --------------------------------------------------------
int *sub_67A75()
{
  return &dword_131504;
}
// 131504: using guessed type int dword_131504;

//----- (00067A96) --------------------------------------------------------
int sub_67A96(unsigned int a1, int a2, int a3, int a4)
{
  int v4; // eax
  char *v5; // eoff
  int v7; // [esp+Ch] [ebp-4h]
  int v8; // [esp+Ch] [ebp-4h]
  int v9; // [esp+Ch] [ebp-4h]
  int v10; // [esp+Ch] [ebp-4h]
  void *retaddr[2]; // [esp+1Ch] [ebp+Ch]

  if ( (__readgsbyte(a1) & 0xF0) == 0xB0 && __readgsbyte(a1 + 1) == 123 )
  {
    while ( dword_9C9F0[a4] )
    {
      v7 = sub_682CB(a4);
      sub_65965(dword_9D922[a4], v7 + 1);
    }
  }
  if ( (__readgsbyte(a1) & 0xF0) == 0x90 && *(_DWORD *)&byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)] )
  {
    if ( __readgsbyte(a1 + 2) )
    {
      if ( __readgsword(*(_DWORD *)&byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)] + 26) != 0x8000 )
      {
        v8 = sub_68491(a4, __readgsbyte(a1 + 1));
        if ( v8 != -1 )
          sub_65965(dword_9D922[a4], v8 + 1);
      }
      if ( dword_9C9F0[a4] >= (unsigned int)dword_9C9DC[a4] )
      {
        v9 = sub_682CB(a4);
        sub_65965(dword_9D922[a4], v9 + 1);
      }
      v4 = 768 * a4 + 6 * __readgsbyte(a1 + 1);
      __writegsword(
        *(_DWORD *)&byte_9CA04[v4] + 18,
        sub_68207(a4, *(_DWORD *)&byte_9CA04[v4], *(_WORD *)&byte_9CA04[v4 + 4]) + 1);
      if ( dword_9D972[a4] )
      {
        __writegsword(
          *(_DWORD *)&byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)] + 16,
          ((unsigned __int8)byte_9ECAD * (unsigned int)__readgsbyte(a1 + 2)) >> 7);
        v5 = &byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)];
        __writegsword(*(_DWORD *)v5 + 16, __readgsword(*(_DWORD *)v5 + 16) << 8);
      }
      sub_6535C(dword_9D922[a4], *(_DWORD *)&byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)]);
      __writegsword(*(_DWORD *)&byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)] + 18, __readgsbyte(a1 + 1));
    }
    else if ( __readgsword(*(_DWORD *)&byte_9CA04[768 * a4 + 6 * __readgsbyte(a1 + 1)] + 26) != 0x8000 )
    {
      v10 = sub_68491(a4, __readgsbyte(a1 + 1));
      if ( v10 != -1 )
        sub_65965(dword_9D922[a4], v10 + 1);
    }
  }
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// 9C9DC: using guessed type int dword_9C9DC[5];
// 9C9F0: using guessed type int dword_9C9F0[5];
// 9D922: using guessed type int dword_9D922[5];
// 9D972: using guessed type int dword_9D972[5];
// 9ECAD: using guessed type char byte_9ECAD;
// 67A96: using guessed type unsigned int arg_0;

//----- (00067D9D) --------------------------------------------------------
int sub_67D9D(int a1, int a2, unsigned int a3, int a4, int a5)
{
  unsigned int v6; // eax
  int v7; // [esp+14h] [ebp-10h]
  int v8; // [esp+1Ch] [ebp-8h] BYREF
  unsigned int i; // [esp+20h] [ebp-4h]
  void *retaddr[2]; // [esp+30h] [ebp+Ch]

  for ( i = 0; i < 5; ++i )
  {
    if ( dword_1315F8[16 * i] == __readgsdword(a3) )
    {
      dword_9D922[a5] = i;
      break;
    }
  }
  if ( i == 5 )
  {
    dword_9D95E[a5] = 1;
    v7 = sub_64846_64D56(
           a1,
           a2,
           __readgsdword(a3),
           __readgsdword(a3 + 28),
           __readgsword(a3 + 32),
           __readgsdword(a3 + 20),
           __readgsword(a3 + 24),
           (unsigned int)&v8);
    if (v7)
        0;//fix return MK_FP(retaddr[0], retaddr[0])(v7);
    dword_9D922[a5] = v8;
    v6 = __readgsdword(a3 + 20);
    v7 = sub_5D97B(__readgsdword(a3 + 4), __readgsdword(v6 + 28), __readgsword(v6 + 32), (unsigned int)&dword_9D94A[a5]);
    if (v7)
        return 0;//fix MK_FP(retaddr[0], retaddr[0])(v7);
    dword_9D936[a5] = 1;
  }
  else
  {
    dword_9D95E[a5] = 0;
  }
  dword_9D972[a5] = __readgsdword(a3 + 16);
  sub_68180(a5, __readgsdword(a3 + 12));
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// 9D922: using guessed type int dword_9D922[5];
// 9D936: using guessed type int dword_9D936[5];
// 9D94A: using guessed type int dword_9D94A[5];
// 9D95E: using guessed type int dword_9D95E[5];
// 9D972: using guessed type int dword_9D972[5];
// 1315F8: using guessed type int dword_1315F8[];

//----- (00067F1C) --------------------------------------------------------
int sub_67F1C(int a1, int a2, int a3)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  if ( dword_9D936[a3] )
  {
    dword_9D936[a3] = 0;
    if ( dword_9D95E[a3] )
    {
      sub_64F78(dword_9D922[a3], 1, 1);
      sub_5DC91(dword_9D94A[a3]);
    }
  }
  sub_681F6();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// 9D922: using guessed type int dword_9D922[5];
// 9D936: using guessed type int dword_9D936[5];
// 9D94A: using guessed type int dword_9D94A[5];
// 9D95E: using guessed type int dword_9D95E[5];

//----- (00067F9A) --------------------------------------------------------
int sub_67F9A()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00067FB3) --------------------------------------------------------
int sub_67FB3(int a1, __int16 a2, int a3, int a4)
{
  int v4; // edx
  int v5; // eax
  unsigned __int64 v7; // rax
  int v8; // ebx
  unsigned __int64 v9; // rax
  unsigned int v10; // ebx
  unsigned int i; // [esp+4h] [ebp-Ch]
  int v12; // [esp+8h] [ebp-8h]
  int j; // [esp+Ch] [ebp-4h]
  unsigned int v14; // [esp+Ch] [ebp-4h]
  void *retaddr[2]; // [esp+1Ch] [ebp+Ch]

  v4 = 6 * a4;
  *(_WORD *)&byte_9D904[v4 + 4] = a2;
  *(_DWORD *)&byte_9D904[v4] = a1;
  for ( i = 0; i < 0x80; ++i )
  {
    v5 = 768 * a4 + 6 * i;
    *(_WORD *)&byte_9CA04[v5 + 4] = 0;
    *(_DWORD *)&byte_9CA04[v5] = 0;
  }
  for ( j = 0; byte_9D986[j]; ++j )
  {
      if (byte_9D986[j] != __readgsbyte(j + a1))
          return 0;//fix MK_FP(retaddr[0], retaddr[0])(14);
  }
  v14 = 40;
  do
  {
    v12 = (__int16)__readgsword(sub_66EF6(v14 + a1, a2) + 18);
    v7 = sub_66EF6(v14 + a1, a2);
    v8 = v7;
    LODWORD(v7) = 6 * v12 + 768 * a4;
    *(_WORD *)&byte_9CA04[v7 + 4] = WORD2(v7);
    *(_DWORD *)&byte_9CA04[v7] = v8;
    v9 = sub_66EF6(v14 + a1 + 84, a2);
    v10 = v9;
    LODWORD(v9) = *(_DWORD *)&byte_9CA04[768 * a4 + 6 * v12];
    __writegsword(v9 + 4, WORD2(v9));
    __writegsdword(v9, v10);
    LODWORD(v9) = *(_DWORD *)&byte_9CA04[768 * a4 + 6 * v12];
    //fix __writegsword(v9 + 24, __CS__);
    __writegsdword(v9 + 20, (unsigned int)sub_6813F);
    v14 += __readgsdword(*(_DWORD *)&byte_9CA04[768 * a4 + 6 * v12] + 8) + 84;
  }
  while ( v14 < __readgsdword(*(_DWORD *)&byte_9D904[6 * a4] + 36) );
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (0006813F) --------------------------------------------------------
int sub_6813F(int a1, int a2, int a3)
{
  int v3; // eax
  void *retaddr[2]; // [esp+Ch] [ebp+Ch]

  v3 = sub_68365(a1, a3 - 1);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(v3);
}

//----- (0006815E) --------------------------------------------------------
void sub_6815E()
{
  ;
}

//----- (0006816F) --------------------------------------------------------
void sub_6816F()
{
  ;
}

//----- (00068180) --------------------------------------------------------
int sub_68180(int a1, int a2)
{
  int v2; // eax
  int result; // eax
  unsigned int i; // [esp+0h] [ebp-4h]

  for ( i = 0; i < 0x20; ++i )
  {
    v2 = 384 * a1 + 12 * i;
    *(__int16 *)((char *)&word_9C23C + v2) = 0;
    *(int *)((char *)&dword_9C238 + v2) = 0;
  }
  dword_9C9B4[a1] = 31;
  dword_9C9C8[a1] = 0;
  result = a2;
  dword_9C9DC[a1] = a2;
  return result;
}
// 9C238: using guessed type int dword_9C238;
// 9C23C: using guessed type __int16 word_9C23C;
// 9C9B4: using guessed type int dword_9C9B4[5];
// 9C9C8: using guessed type int dword_9C9C8[5];
// 9C9DC: using guessed type int dword_9C9DC[5];

//----- (000681F6) --------------------------------------------------------
void sub_681F6()
{
  ;
}

//----- (00068207) --------------------------------------------------------
int sub_68207(int a1, int a2, __int16 a3)
{
  int v3; // edx
  int v6; // [esp+4h] [ebp-4h]

  if ( dword_9C9F0[a1] >= (unsigned int)dword_9C9DC[a1] )
    return -1;
  if ( dword_9C9B4[a1] == 31 )
    dword_9C9B4[a1] = 0;
  else
    ++dword_9C9B4[a1];
  v6 = dword_9C9B4[a1];
  dword_9C234[96 * a1 + 3 * v6] = (__int16)__readgsword(a2 + 18);
  v3 = 384 * a1 + 12 * v6;
  *(__int16 *)((char *)&word_9C23C + v3) = a3;
  *(int *)((char *)&dword_9C238 + v3) = a2;
  ++dword_9C9F0[a1];
  return v6;
}
// 9C234: using guessed type int dword_9C234[];
// 9C238: using guessed type int dword_9C238;
// 9C23C: using guessed type __int16 word_9C23C;
// 9C9B4: using guessed type int dword_9C9B4[5];
// 9C9DC: using guessed type int dword_9C9DC[5];
// 9C9F0: using guessed type int dword_9C9F0[5];

//----- (000682CB) --------------------------------------------------------
int sub_682CB(int a1)
{
  int v1; // eax
  int v4; // [esp+4h] [ebp-4h]

  if ( !dword_9C9F0[a1] )
    return -1;
  v4 = dword_9C9C8[a1];
  v1 = 384 * a1 + 12 * v4;
  *(__int16 *)((char *)&word_9C23C + v1) = 0;
  *(int *)((char *)&dword_9C238 + v1) = 0;
  if ( dword_9C9C8[a1] == 31 )
    dword_9C9C8[a1] = 0;
  else
    ++dword_9C9C8[a1];
  --dword_9C9F0[a1];
  return v4;
}
// 9C238: using guessed type int dword_9C238;
// 9C23C: using guessed type __int16 word_9C23C;
// 9C9C8: using guessed type int dword_9C9C8[5];
// 9C9F0: using guessed type int dword_9C9F0[5];

//----- (00068365) --------------------------------------------------------
int sub_68365(int a1, int a2)
{
  int v2; // edx
  int v3; // eax
  int v4; // ecx
  int v5; // eax
  int v8; // [esp+4h] [ebp-4h]

  if ( !dword_9C9F0[a1] )
    return -1;
  while ( a2 != dword_9C9C8[a1] )
  {
    if ( a2 )
      v8 = a2 - 1;
    else
      v8 = 31;
    v2 = 384 * a1 + 12 * v8;
    v3 = 384 * a1 + 12 * a2;
    v4 = *(int *)((char *)&dword_9C238 + v2);
    *(__int16 *)((char *)&word_9C23C + v3) = *(__int16 *)((char *)&word_9C23C + v2);
    *(int *)((char *)&dword_9C238 + v3) = v4;
    *(int *)((char *)dword_9C234 + v3) = *(int *)((char *)dword_9C234 + v2);
    if ( a2 )
      --a2;
    else
      a2 = 31;
  }
  v5 = 384 * a1 + 12 * a2;
  *(__int16 *)((char *)&word_9C23C + v5) = 0;
  *(int *)((char *)&dword_9C238 + v5) = 0;
  if ( (unsigned int)dword_9C9C8[a1] >= 0x1F )
    dword_9C9C8[a1] = 0;
  else
    ++dword_9C9C8[a1];
  --dword_9C9F0[a1];
  return 0;
}
// 9C234: using guessed type int dword_9C234[];
// 9C238: using guessed type int dword_9C238;
// 9C23C: using guessed type __int16 word_9C23C;
// 9C9C8: using guessed type int dword_9C9C8[5];
// 9C9F0: using guessed type int dword_9C9F0[5];

//----- (00068491) --------------------------------------------------------
int sub_68491(int a1, int a2)
{
  int v2; // edx
  int v3; // eax
  int v4; // ecx
  int v5; // eax
  unsigned int v8; // [esp+4h] [ebp-Ch]
  int v9; // [esp+8h] [ebp-8h]
  unsigned int i; // [esp+Ch] [ebp-4h]

  if ( !dword_9C9F0[a1] )
    return -1;
  for ( i = 0; i < 0x21 && dword_9C234[96 * a1 + 3 * i] != a2; ++i )
    ;
  if ( i == 32 )
    return -1;
  v8 = i;
  while ( i != dword_9C9C8[a1] )
  {
    if ( i )
      v9 = i - 1;
    else
      v9 = 31;
    v2 = 384 * a1 + 12 * v9;
    v3 = 384 * a1 + 12 * i;
    v4 = *(int *)((char *)&dword_9C238 + v2);
    *(__int16 *)((char *)&word_9C23C + v3) = *(__int16 *)((char *)&word_9C23C + v2);
    *(int *)((char *)&dword_9C238 + v3) = v4;
    *(int *)((char *)dword_9C234 + v3) = *(int *)((char *)dword_9C234 + v2);
    if ( i )
      --i;
    else
      i = 31;
  }
  v5 = 384 * a1 + 12 * i;
  *(__int16 *)((char *)&word_9C23C + v5) = 0;
  *(int *)((char *)&dword_9C238 + v5) = 0;
  if ( (unsigned int)dword_9C9C8[a1] >= 0x1F )
    dword_9C9C8[a1] = 0;
  else
    ++dword_9C9C8[a1];
  --dword_9C9F0[a1];
  return v8;
}
// 9C234: using guessed type int dword_9C234[];
// 9C238: using guessed type int dword_9C238;
// 9C23C: using guessed type __int16 word_9C23C;
// 9C9C8: using guessed type int dword_9C9C8[5];
// 9C9F0: using guessed type int dword_9C9F0[5];

//----- (00068600) --------------------------------------------------------
void sub_68600()
{
  ;
}

//----- (00068611) --------------------------------------------------------
void sub_68611()
{
  ;
}

//----- (00068622) --------------------------------------------------------
int sub_68622_68B32(
        __int16 a1,
        int a2,
        unsigned int a3,
        unsigned int a4,
        int *a5,
        unsigned int a6)
{
  int v7; // [esp+0h] [ebp-30h]
  unsigned __int16 v8; // [esp+4h] [ebp-2Ch]
  int v10; // [esp+14h] [ebp-1Ch]
  unsigned int v11; // [esp+18h] [ebp-18h]
  int v12; // [esp+1Ch] [ebp-14h]
  int v13; // [esp+28h] [ebp-8h]
  int v14; // [esp+2Ch] [ebp-4h]

  v12 = 0;
  v11 = 0;
  if ( a4 > 5 )
    return 10;
  if ( dword_9B18E[a4] )
    return 9;
  if ( a3 < 0xA000 || a3 > 0xA200 )
    return 6;
  strcpy(&unk_9EE07, &unk_9ED08);
  strcat(&unk_9EE07, "hmimdrv.386");
  v14 = open((uint32)&unk_9EE07, 512);
  if ( v14 != -1 )
  {
    read(v14, (void*)&unk_9C1D2, 44);
    while ( 1 )
    {
      if ( v11 > dword_9C1F2 || v12 )
      {
        close(v14);
        dword_9B1A2[a4] = dword_9C226;
        dword_9B18E[a4] = 1;
        __writegsword(a6 + 4, v8);
        __writegsdword(a6, v7);
        return 0;
      }
      read(v14, (void*)&unk_9C1FE, 44);
      v13 = dword_9C222;
      if ( dword_9C226 == a3 )
      {
        v12 = 1;
        v10 = (int)malloc(dword_9C222);
        if ( !v10 )
          return 5;
        sub_67557_67A67(a1, a2, v10);
        v8 = a1;
        v7 = sub_67582();
        read(v14, (void*)v10, v13);
        sub_674CD();
        a2 = (int)a5;
        *a5 = v10;
      }
      else
      {
        lseek(v14, dword_9C222, 1);
      }
      ++v11;
    }
  }
  return 15;
}
// 687F5: variable 'v8' is possibly undefined
// 68801: variable 'v7' is possibly undefined
// 6691E: using guessed type _DWORD close(_DWORD);
// 6692C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 6B992: using guessed type _DWORD lseek(_DWORD, _DWORD, char);
// 6CB61: using guessed type _DWORD malloc(_DWORD);
// 6DD0E: using guessed type _DWORD strcpy(_DWORD, _DWORD);
// 6DD33: using guessed type _DWORD strcat(_DWORD, _DWORD);
// 9B18E: using guessed type int dword_9B18E[5];
// 9B1A2: using guessed type int dword_9B1A2[5];
// 9C1F2: using guessed type int dword_9C1F2;
// 9C222: using guessed type int dword_9C222;
// 9C226: using guessed type int dword_9C226;

//----- (00068813) --------------------------------------------------------
int sub_68813(unsigned int a1)
{
  if ( a1 > 5 )
    return 10;
  if ( !dword_9B18E[a1] )
    return 10;
  dword_9B18E[a1] = 0;
  return 0;
}
// 9B18E: using guessed type int dword_9B18E[5];

//----- (0006887D) --------------------------------------------------------
void sub_6887D()
{
  ;
}

//----- (0006888E) --------------------------------------------------------
void sub_6888E()
{
  ;
}

//----- (000688F5) --------------------------------------------------------
void sub_688F5()
{
  ;
}

//----- (00068906) --------------------------------------------------------
void sub_68906()
{
  ;
}

//----- (000689D1) --------------------------------------------------------
void sub_689D1()
{
  ;
}

//----- (000689E2) --------------------------------------------------------
void sub_689E2()
{
  ;
}

//----- (000689F3) --------------------------------------------------------
int *sub_689F3()
{
  return &dword_1314C8;
}
// 1314C8: using guessed type int dword_1314C8;

//----- (00068A14) --------------------------------------------------------
int sub_68A14(int a1, int a2, int a3, unsigned int a4)
{
  int v4; // eax
  unsigned __int8 v6; // [esp+0h] [ebp-8h]
  void *retaddr[2]; // [esp+14h] [ebp+Ch]

  v6 = __readgsbyte(a4) & 0xF0;
  if ( v6 >= 0xB0u )
  {
    if ( v6 <= 0xB0u )
    {
      sub_6FA53(__readgsbyte(a4 + 2), __readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
    }
    else if ( v6 < 0xD0u )
    {
      if ( v6 == 0xC0 )
        sub_6FC44(__readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
    }
    else if ( v6 <= 0xD0u )
    {
      sub_6FDA4(__readgsbyte(a4 + 2), __readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
    }
    else if ( v6 == 0xE0 )
    {
      sub_6FDEC(__readgsbyte(a4 + 2), __readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
    }
    return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
  }
  if ( v6 < 0x90u )
  {
      if (v6 != 0x80)
          return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
LABEL_14:
    sub_6F3B3(__readgsbyte(a4 + 2), __readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
    return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
  }
  if ( v6 <= 0x90u )
  {
    if ( __readgsbyte(a4 + 2) )
    {
      v4 = __readgsbyte(a4 + 2);
      sub_6F4CB(v4, a1, a3, a2, (unsigned __int8)v4, __readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
      return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
    }
    goto LABEL_14;
  }
  if ( v6 == 0xA0 )
    sub_6FDAC(__readgsbyte(a4 + 1), __readgsbyte(a4) & 0xF);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00068BDA) --------------------------------------------------------
int sub_68BDA(int a1, int a2, int a3, __int16 a4)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  sub_70044(a4);
  sub_70AA0();
  dword_A1F24 = (int)&unk_A1F48;
  dword_A1F28 = (int)&off_A2150;
  dword_A1F2C = (int)&unk_A22BC;
  dword_A1F30 = (int)&off_A282F;
  dword_A1F34 = (int)&off_A2995;
  dword_A1F38 = (int)&unk_A2F5F;
  dword_A1F3C = (int)&unk_A59DD;
  sub_6E5B2();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// A1F24: using guessed type int dword_A1F24;
// A1F28: using guessed type int dword_A1F28;
// A1F2C: using guessed type int dword_A1F2C;
// A1F30: using guessed type int dword_A1F30;
// A1F34: using guessed type int dword_A1F34;
// A1F38: using guessed type int dword_A1F38;
// A1F3C: using guessed type int dword_A1F3C;
// A2150: using guessed type void *off_A2150;
// A282F: using guessed type char *off_A282F;
// A2995: using guessed type void *off_A2995;

//----- (00068C4B) --------------------------------------------------------
int sub_68C4B()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  sub_70B3E();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00068C69) --------------------------------------------------------
int sub_68C69()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00068C82) --------------------------------------------------------
int sub_68C82()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00068C9B) --------------------------------------------------------
void sub_68C9B()
{
  ;
}

//----- (00068CAC) --------------------------------------------------------
void sub_68CAC()
{
  ;
}

//----- (00068CBD) --------------------------------------------------------
char sub_68CBD(int a1, int a2, unsigned int a3)
{
  int v3; // eax
  __int16 v4; // ax
  unsigned int i; // [esp+0h] [ebp-4h]

  LOBYTE(v3) = a3;
  if ( __readgsbyte(a3) < 0x10u )
  {
    LOBYTE(v3) = a3;
    if ( __readgsbyte(a3) != 9 )
    {
      dword_A082C[__readgsbyte(a3)] = __readgsbyte(a3 + 1);
      v3 = 4 * __readgsbyte(a3);
      *(int *)((char *)dword_A086C + v3) = 1;
      for ( i = 0; i < 9; ++i )
      {
        LOBYTE(v3) = i;
        if ( byte_A0764[i] )
        {
          LOBYTE(v3) = __readgsbyte(a3);
          if ( (unsigned __int8)v3 == dword_A0808[i] )
          {
            v4 = sub_68D7F(__readgsbyte(a3 + 1), (unsigned __int8)byte_A0764[i], i);
            LOBYTE(v3) = sub_6A085(i, v4);
          }
        }
      }
    }
  }
  return v3;
}
// A0808: using guessed type int dword_A0808[9];
// A082C: using guessed type int dword_A082C[16];
// A086C: using guessed type int dword_A086C[16];

//----- (00068D7F) --------------------------------------------------------
unsigned int sub_68D7F(unsigned int a1, int a2, int a3)
{
  unsigned int i; // [esp+4h] [ebp-18h]
  int v5; // [esp+14h] [ebp-8h]
  unsigned int v7; // [esp+18h] [ebp-4h]
  unsigned int v8; // [esp+18h] [ebp-4h]
  unsigned int v9; // [esp+34h] [ebp+18h]

  v9 = a2 - 12;
  for ( i = v9; i >= 0xC; i -= 12 )
    ;
  v5 = dword_A0A68[v9];
  if ( a1 >= 0x40 )
  {
    v8 = dword_A0A68[dword_A08AC[dword_A0808[a3]] + v9] - v5;
    if ( v8 > 0x2CF )
    {
      v5 = dword_A0C04[11 - i] | ((dword_A0A68[v9] & 0x1C00) + 1024);
      v8 = dword_A0A68[dword_A08AC[dword_A0808[a3]] + v9] - v5;
    }
    return ((1000 * (a1 - 64)) >> 6) * v8 / 0x3E8 + v5;
  }
  else
  {
    v7 = v5 - dword_A0A68[v9 - dword_A08AC[dword_A0808[a3]]];
    if ( v7 > 0x2CF )
      v7 = ((v5 & 0x3FF) - LOWORD(dword_A0C00[dword_A08AC[dword_A0808[a3]]])) & 0x3FF;
    return v5 - ((1000 * (63 - a1)) >> 6) * v7 / 0x3E8;
  }
}
// A0808: using guessed type int dword_A0808[9];
// A08AC: using guessed type int dword_A08AC[16];
// A0A68: using guessed type int dword_A0A68[102];
// A0C00: using guessed type int dword_A0C00[];
// A0C04: using guessed type int dword_A0C04[36];

//----- (00068F15) --------------------------------------------------------
void sub_68F15()
{
  ;
}

//----- (00068F26) --------------------------------------------------------
void sub_68F26()
{
  ;
}

//----- (00068F37) --------------------------------------------------------
char sub_68F37(int a1, int a2, unsigned int a3)
{
  int v3; // eax

  LOBYTE(v3) = __readgsbyte(a3 + 1);
  if ( (unsigned __int8)v3 < 0x66u )
  {
    if ( (unsigned __int8)v3 >= 7u )
    {
      if ( (unsigned __int8)v3 <= 7u )
      {
        LOBYTE(v3) = sub_70B8B(__readgsbyte(a3), __readgsbyte(a3 + 2));
      }
      else if ( (_BYTE)v3 == 64 )
      {
        dword_A0994[__readgsbyte(a3)] = __readgsbyte(a3 + 2);
        LOBYTE(v3) = a3;
        if ( !__readgsbyte(a3 + 2) )
        {
          while ( dword_A09F0 )
          {
            LOBYTE(v3) = sub_6956E(0, 0, (unsigned int)&byte_A09F4[3 * dword_A09F0]);
            --dword_A09F0;
          }
        }
      }
    }
  }
  else if ( (unsigned __int8)v3 <= 0x66u )
  {
    v3 = 4 * __readgsbyte(a3);
    *(int *)((char *)dword_A08AC + v3) = __readgsbyte(a3 + 2);
  }
  else if ( (unsigned __int8)v3 >= 0x79u )
  {
    if ( (unsigned __int8)v3 <= 0x79u )
    {
      LOBYTE(v3) = sub_69716(__readgsbyte(a3));
    }
    else if ( (_BYTE)v3 == 123 )
    {
      LOBYTE(v3) = sub_6966D(__readgsbyte(a3));
    }
  }
  return v3;
}
// A08AC: using guessed type int dword_A08AC[16];
// A0994: using guessed type int dword_A0994[18];
// A09F0: using guessed type int dword_A09F0;

//----- (0006905C) --------------------------------------------------------
void sub_6905C()
{
  ;
}

//----- (0006906D) --------------------------------------------------------
void sub_6906D()
{
  ;
}

//----- (0006907E) --------------------------------------------------------
void sub_6907E(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  __int16 v3; // ax
  unsigned int j; // [esp+0h] [ebp-14h]
  unsigned int i; // [esp+0h] [ebp-14h]
  unsigned int v6; // [esp+4h] [ebp-10h]
  unsigned __int8 v7; // [esp+10h] [ebp-4h]
  unsigned __int8 v8; // [esp+10h] [ebp-4h]

  if ( a3 < 0x10u )
  {
    if ( a3 == 9 )
    {
      v8 = sub_70D55(9u);
      sub_6A297(v8);
      dword_A0808[v8] = 9;
      for ( i = 0; i < 5; ++i )
      {
        sub_6A640(byte_A0776[2 * v8] + 0x80, byte_A0724[(unsigned __int8)byte_A0776[2 * v8]] | 0xF);
        sub_6A640(byte_A0775[2 * v8] + 0x80, byte_A0724[(unsigned __int8)byte_A0775[2 * v8]] | 0xF);
      }
      sub_6A405(dword_A07B6 + 30 * a1, (unsigned __int16)word_A07BA, v8);
      dword_A0930[v8] = a2;
      sub_6A640(
        byte_A0776[2 * v8] + 64,
        byte_A0704[(unsigned __int8)byte_A0776[2 * v8]] & 0xC0 | ((0x2000
                                                                 - (64
                                                                  - (byte_A0704[(unsigned __int8)byte_A0776[2 * v8]] & 0x3F))
                                                                 * 2
                                                                 * (64
                                                                  - (unsigned int)(unsigned __int8)byte_A0A24[(int)(unsigned __int8)(((dword_A08F0[9] << 7) / 127 * dword_A0930[v8]) >> 7) >> 1])) >> 7));
      sub_6A1D5(v8, dword_A0A38[__readgsbyte(dword_A07B0 + 12 * a1 + 2)]);
      byte_A0764[v8] = a1;
    }
    else
    {
      v7 = sub_70D55(a3);
      sub_6A297(v7);
      dword_A0808[v7] = a3;
      for ( j = 0; j < 5; ++j )
      {
        sub_6A640(byte_A0776[2 * v7] + 0x80, byte_A0724[(unsigned __int8)byte_A0776[2 * v7]] | 0xF);
        sub_6A640(byte_A0775[2 * v7] + 0x80, byte_A0724[(unsigned __int8)byte_A0775[2 * v7]] | 0xF);
      }
      sub_6A405(dword_A07A0 + 30 * dword_A07C8[a3], (unsigned __int16)word_A07A4, v7);
      dword_A0930[v7] = a2;
      v6 = (0x2000
          - (64 - (byte_A0704[(unsigned __int8)byte_A0776[2 * v7]] & 0x3F))
          * 2
          * (64
           - (unsigned int)(unsigned __int8)byte_A0A24[(int)(unsigned __int8)(((dword_A08F0[a3] << 7)
                                                                             / 127
                                                                             * dword_A0930[v7]) >> 7) >> 1])) >> 7;
      if ( !__readgsbyte(dword_A07A0 + 30 * dword_A07C8[a3] + 14) )
        sub_6A640(byte_A0775[2 * v7] + 64, byte_A0704[(unsigned __int8)byte_A0775[2 * v7]] & 0xC0 | v6);
      sub_6A640(byte_A0776[2 * v7] + 64, byte_A0704[(unsigned __int8)byte_A0776[2 * v7]] & 0xC0 | v6);
      sub_6A1D5(v7, dword_A0A38[a1]);
      byte_A0764[v7] = a1;
      if ( dword_A07C4 )
      {
        if ( dword_A086C[a3] )
        {
          v3 = sub_68D7F(dword_A082C[a3], a1, v7);
          sub_6A085(v7, v3);
        }
      }
    }
  }
}
// A07A0: using guessed type int dword_A07A0;
// A07A4: using guessed type __int16 word_A07A4;
// A07B0: using guessed type int dword_A07B0;
// A07B6: using guessed type int dword_A07B6;
// A07BA: using guessed type __int16 word_A07BA;
// A07C4: using guessed type int dword_A07C4;
// A07C8: using guessed type int dword_A07C8[16];
// A0808: using guessed type int dword_A0808[9];
// A082C: using guessed type int dword_A082C[16];
// A086C: using guessed type int dword_A086C[16];
// A08F0: using guessed type int dword_A08F0[16];
// A0930: using guessed type int dword_A0930[9];
// A0A38: using guessed type int dword_A0A38[12];

//----- (0006954C) --------------------------------------------------------
void sub_6954C()
{
  ;
}

//----- (0006955D) --------------------------------------------------------
void sub_6955D()
{
  ;
}

//----- (0006956E) --------------------------------------------------------
char sub_6956E(int a1, int a2, unsigned int a3)
{
  int v3; // eax
  unsigned int i; // [esp+4h] [ebp-8h]

  LOBYTE(v3) = a3;
  if ( __readgsbyte(a3 + 2) < 0x10u )
  {
    v3 = 4 * __readgsbyte(a3 + 2);
    if ( *(int *)((char *)dword_A0994 + v3) && (unsigned int)dword_A09F0 < 0x10 )
    {
      byte_A09F4[3 * dword_A09F0] = __readgsbyte(a3);
      byte_A09F5[3 * dword_A09F0] = __readgsbyte(a3 + 1);
      LOBYTE(v3) = __readgsbyte(a3 + 2);
      byte_A09F6[3 * dword_A09F0++] = v3;
    }
    else
    {
      for ( i = 0; i < 9; ++i )
      {
        LOBYTE(v3) = a3;
        if ( byte_A0764[i] == __readgsbyte(a3) )
        {
          LOBYTE(v3) = __readgsbyte(a3 + 2);
          if ( (unsigned __int8)v3 == dword_A0808[i] )
          {
            sub_6A297(i);
            LOBYTE(v3) = i;
            byte_A0764[i] = 0;
          }
        }
      }
    }
  }
  return v3;
}
// A0808: using guessed type int dword_A0808[9];
// A0994: using guessed type int dword_A0994[18];
// A09F0: using guessed type int dword_A09F0;

//----- (0006966D) --------------------------------------------------------
int sub_6966D(unsigned int a1)
{
  int result; // eax
  unsigned int i; // [esp+0h] [ebp-4h]

  if ( a1 < 0x10 )
  {
    dword_A08F0[a1] = 127;
    dword_A0930[a1] = 127;
    dword_A0954[a1] = 0;
    result = 4 * a1;
    dword_A0994[a1] = 0;
    for ( i = 0; i < 9; ++i )
    {
      result = dword_A0808[i];
      if ( result == a1 )
      {
        sub_6A297(i);
        result = i;
        byte_A0764[i] = 0;
      }
    }
  }
  return result;
}
// 69683: conditional instruction was optimized away because %arg_0.4>=10u
// A0808: using guessed type int dword_A0808[9];
// A08F0: using guessed type int dword_A08F0[16];
// A0930: using guessed type int dword_A0930[9];
// A0954: using guessed type int dword_A0954[16];
// A0994: using guessed type int dword_A0994[18];

//----- (00069716) --------------------------------------------------------
int sub_69716(unsigned int a1)
{
  int result; // eax

  if ( a1 < 0x10 )
  {
    dword_A08F0[a1] = 127;
    dword_A0930[a1] = 127;
    dword_A0954[a1] = 0;
    dword_A0994[a1] = 0;
    dword_A082C[a1] = 64;
    result = 4 * a1;
    dword_A08AC[a1] = 2;
  }
  return result;
}
// 6972C: conditional instruction was optimized away because %arg_0.4>=10u
// A082C: using guessed type int dword_A082C[16];
// A08AC: using guessed type int dword_A08AC[16];
// A08F0: using guessed type int dword_A08F0[16];
// A0930: using guessed type int dword_A0930[9];
// A0954: using guessed type int dword_A0954[16];
// A0994: using guessed type int dword_A0994[18];

//----- (0006979E) --------------------------------------------------------
void sub_6979E()
{
  ;
}

//----- (000697AF) --------------------------------------------------------
void sub_697AF()
{
  ;
}

//----- (000697C0) --------------------------------------------------------
void sub_697C0(int a1, int a2, unsigned int a3)
{
  unsigned __int8 v3; // [esp+0h] [ebp-4h]

  v3 = __readgsbyte(a3) & 0xF0;
  if ( v3 < 0xB0u )
  {
    if ( v3 >= 0x80u )
    {
      if ( v3 > 0x80u )
      {
        if ( v3 != 0x90 )
          return;
        if ( __readgsbyte(a3 + 2) )
        {
          sub_6907E(__readgsbyte(a3 + 1), __readgsbyte(a3 + 2), __readgsbyte(a3) & 0xF);
          return;
        }
      }
      byte_A09E0 = __readgsbyte(a3) & 0xF;
      byte_A09DE = __readgsbyte(a3 + 1);
      byte_A09DF = __readgsbyte(a3 + 2);
      sub_6956E(0, 0, (unsigned int)&byte_A09DE);
    }
  }
  else if ( v3 <= 0xB0u )
  {
    byte_A09E3 = __readgsbyte(a3) & 0xF;
    byte_A09E4 = __readgsbyte(a3 + 1);
    byte_A09E5 = __readgsbyte(a3 + 2);
    sub_68F37(0, 0, (unsigned int)&byte_A09E3);
  }
  else if ( v3 >= 0xC0u )
  {
    if ( v3 <= 0xC0u )
    {
      byte_A09E1 = __readgsbyte(a3 + 1);
      byte_A09E2 = __readgsbyte(a3) & 0xF;
      sub_70E1C(0, 0, (unsigned int)&byte_A09E1);
    }
    else if ( v3 == 0xE0 )
    {
      byte_A09E6 = __readgsbyte(a3) & 0xF;
      byte_A09E7 = __readgsbyte(a3 + 2);
      sub_68CBD(0, 0, (unsigned int)&byte_A09E6);
    }
  }
}
// A09DE: using guessed type char byte_A09DE;
// A09DF: using guessed type char byte_A09DF;
// A09E0: using guessed type char byte_A09E0;
// A09E1: using guessed type char byte_A09E1;
// A09E2: using guessed type char byte_A09E2;
// A09E3: using guessed type char byte_A09E3;
// A09E4: using guessed type char byte_A09E4;
// A09E5: using guessed type char byte_A09E5;
// A09E6: using guessed type char byte_A09E6;
// A09E7: using guessed type char byte_A09E7;

//----- (0006999B) --------------------------------------------------------
void sub_6999B()
{
  ;
}

//----- (000699AC) --------------------------------------------------------
void sub_699AC()
{
  ;
}

//----- (000699BD) --------------------------------------------------------
char sub_699BD()
{
  char result; // al
  unsigned int i; // [esp+0h] [ebp-4h]
  unsigned int j; // [esp+0h] [ebp-4h]

  result = sub_6A317();
  dword_A08EC = 0;
  for ( i = 0; i < 9; ++i )
  {
    byte_A0764[i] = 0;
    dword_A0808[i] = 0;
    result = 4 * i;
    dword_A0930[i] = 127;
  }
  for ( j = 0; j < 0x10; ++j )
  {
    dword_A082C[j] = 64;
    dword_A07C8[j] = 0;
    dword_A086C[j] = 0;
    dword_A08F0[j] = 127;
    result = 4 * j;
    dword_A0954[j] = 0;
  }
  return result;
}
// A07C8: using guessed type int dword_A07C8[16];
// A0808: using guessed type int dword_A0808[9];
// A082C: using guessed type int dword_A082C[16];
// A086C: using guessed type int dword_A086C[16];
// A08EC: using guessed type int dword_A08EC;
// A08F0: using guessed type int dword_A08F0[16];
// A0930: using guessed type int dword_A0930[9];
// A0954: using guessed type int dword_A0954[16];

//----- (00069A83) --------------------------------------------------------
void sub_69A83()
{
  ;
}

//----- (00069A94) --------------------------------------------------------
void sub_69A94()
{
  ;
}

//----- (00069AA5) --------------------------------------------------------
int sub_69AA5(int a1, int a2, int a3, __int16 a4)
{
  unsigned int v4; // edx
  unsigned int v5; // edx
  int result; // eax
  unsigned int v7; // edx
  unsigned int v8; // edx
  unsigned __int8 i; // [esp+4h] [ebp-4h]

  sub_69BFE(a3);
  if ( dword_A08EC )
  {
    dword_A08EC = 0;
    word_A07AE = a4;
    dword_A07AA = a3;
    v7 = __readgsdword(*(_DWORD *)byte_A0794 + 12);
    word_A07B4 = a4;
    dword_A07B0 = v7 + a3;
    v8 = __readgsdword(*(_DWORD *)byte_A0794 + 16);
    word_A07BA = a4;
    result = v8 + a3;
    dword_A07B6 = v8 + a3;
    dword_A07BC = 1;
  }
  else
  {
    dword_A08EC = 1;
    *(_WORD *)&byte_A0794[4] = a4;
    *(_DWORD *)byte_A0794 = a3;
    dword_A078C = (__int16)__readgsword(a3 + 8);
    v4 = __readgsdword(a3 + 12);
    word_A079E = a4;
    dword_A079A = v4 + a3;
    v5 = __readgsdword(a3 + 16);
    word_A07A4 = a4;
    result = v5 + a3;
    dword_A07A0 = v5 + a3;
    dword_A07A6 = 1;
    for ( i = 0; i < 9u; ++i )
    {
      byte_A09EE = 0;
      byte_A09EF = i;
      //fix word_A09EC = __DS__;
      dword_A09E8 = (int)&byte_A09EE;
      result = sub_70E1C(i, 1000, (unsigned int)&byte_A09EE);
    }
  }
  return result;
}
// A078C: using guessed type int dword_A078C;
// A079A: using guessed type int dword_A079A;
// A079E: using guessed type __int16 word_A079E;
// A07A0: using guessed type int dword_A07A0;
// A07A4: using guessed type __int16 word_A07A4;
// A07A6: using guessed type int dword_A07A6;
// A07AA: using guessed type int dword_A07AA;
// A07AE: using guessed type __int16 word_A07AE;
// A07B0: using guessed type int dword_A07B0;
// A07B4: using guessed type __int16 word_A07B4;
// A07B6: using guessed type int dword_A07B6;
// A07BA: using guessed type __int16 word_A07BA;
// A07BC: using guessed type int dword_A07BC;
// A08EC: using guessed type int dword_A08EC;
// A09E8: using guessed type int dword_A09E8;
// A09EC: using guessed type __int16 word_A09EC;
// A09EE: using guessed type char byte_A09EE;
// A09EF: using guessed type char byte_A09EF;

//----- (00069BFE) --------------------------------------------------------
int sub_69BFE(int a1)
{
  int result; // eax
  int v2; // [esp+0h] [ebp-10h]
  unsigned __int16 i; // [esp+Ch] [ebp-4h]

  v2 = __readgsdword(a1 + 16) + a1;
  for ( i = 0; ; ++i )
  {
    result = (__int16)__readgsword(a1 + 8) - 2;
    if ( i >= result )
      break;
    __writegsbyte(
      v2 + 11,
      (32 * __readgsbyte(v2 + 7)) | (__readgsbyte(v2 + 12) << 6) | (__readgsbyte(v2 + 11) << 7) | (16
                                                                                                 * __readgsbyte(v2 + 13)) | __readgsbyte(v2 + 3));
    __writegsbyte(v2 + 2, __readgsbyte(v2 + 10) | (__readgsbyte(v2 + 2) << 6));
    __writegsbyte(v2 + 5, __readgsbyte(v2 + 8) | (16 * __readgsbyte(v2 + 5)));
    __writegsbyte(v2 + 6, __readgsbyte(v2 + 9) | (16 * __readgsbyte(v2 + 6)));
    __writegsbyte(v2 + 14, __readgsbyte(v2 + 14) | (2 * __readgsbyte(v2 + 4)));
    __writegsbyte(
      v2 + 24,
      __readgsbyte(v2 + 16) | (16 * __readgsbyte(v2 + 26)) | (32 * __readgsbyte(v2 + 20)) | (__readgsbyte(v2 + 25) << 6) | (__readgsbyte(v2 + 24) << 7));
    __writegsbyte(v2 + 15, __readgsbyte(v2 + 23) | (__readgsbyte(v2 + 15) << 6));
    __writegsbyte(v2 + 18, __readgsbyte(v2 + 21) | (16 * __readgsbyte(v2 + 18)));
    __writegsbyte(v2 + 19, __readgsbyte(v2 + 22) | (16 * __readgsbyte(v2 + 19)));
    v2 += 30;
  }
  return result;
}

//----- (00069DFE) --------------------------------------------------------
void sub_69DFE()
{
  ;
}

//----- (00069E0F) --------------------------------------------------------
void sub_69E0F()
{
  ;
}

//----- (00069E20) --------------------------------------------------------
char sub_69E20()
{
  char result; // al

  dword_A06E8 = dword_A06F0;
  sub_69FE4((unsigned int)&dword_A06E8);
  sub_6A317();
  result = sub_6A60E();
  dword_A0788 = 0;
  return result;
}
// A06E8: using guessed type int dword_A06E8;
// A06F0: using guessed type int dword_A06F0;
// A0788: using guessed type int dword_A0788;

//----- (00069E63) --------------------------------------------------------
void sub_69E63()
{
  ;
}

//----- (00069E74) --------------------------------------------------------
void sub_69E74()
{
  ;
}

//----- (00069E85) --------------------------------------------------------
char sub_69E85(int a1, int a2, unsigned int a3)
{
  char result; // al

  dword_A06EC = __readgsdword(a3);
  sub_69FE4((unsigned int)&dword_A06EC);
  result = sub_6A11B();
  dword_A0788 = 1;
  return result;
}
// A06EC: using guessed type int dword_A06EC;
// A0788: using guessed type int dword_A0788;

//----- (00069ECB) --------------------------------------------------------
void sub_69ECB()
{
  ;
}

//----- (00069EDC) --------------------------------------------------------
void sub_69EDC()
{
  ;
}

//----- (00069EED) --------------------------------------------------------
int sub_69EED(unsigned int a1, __int16 a2, int a3, int a4)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  sub_697C0(a4, a3, a1);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00069F1C) --------------------------------------------------------
int sub_69F1C(int a1, int a2, int a3, int a4)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  dword_131AEC = a4;
  sub_69E85(a4, a4, (unsigned int)&dword_131AEC);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}
// 131AEC: using guessed type int dword_131AEC;

//----- (00069F57) --------------------------------------------------------
int sub_69F57()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  sub_69E20();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00069F75) --------------------------------------------------------
int sub_69F75()
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  sub_699BD();
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00069F93) --------------------------------------------------------
int sub_69F93(int a1, __int16 a2, int a3, int a4)
{
  void *retaddr[2]; // [esp+10h] [ebp+Ch]

  sub_69AA5(a4, a4, a1, a2);
  return 0;//fix MK_FP(retaddr[0], retaddr[0])(0);
}

//----- (00069FC2) --------------------------------------------------------
void sub_69FC2()
{
  ;
}

//----- (00069FD3) --------------------------------------------------------
void sub_69FD3()
{
  ;
}

//----- (00069FE4) --------------------------------------------------------
char sub_69FE4(unsigned int a1)
{
  if ( __readgsdword(a1) != 904 && __readgsdword(a1) != 896 )
    return 1;
  dword_A076F = __readgsdword(a1);
  dword_A06F0 = __readgsdword(a1);
  sub_6A640(1u, 0x20u);
  byte_A0758 = 0;
  sub_6A11B();
  byte_A0773 = 1;
  return 0;
}
// A06F0: using guessed type int dword_A06F0;
// A0758: using guessed type char byte_A0758;
// A076F: using guessed type int dword_A076F;
// A0773: using guessed type char byte_A0773;

//----- (0006A063) --------------------------------------------------------
void sub_6A063()
{
  ;
}

//----- (0006A074) --------------------------------------------------------
void sub_6A074()
{
  ;
}

//----- (0006A085) --------------------------------------------------------
char sub_6A085(unsigned __int8 a1, __int16 a2)
{
  byte_A0734[a1] = a2;
  byte_A073D[a1] = HIBYTE(a2) | 0x20;
  sub_6A640(a1 - 96, byte_A0734[a1]);
  sub_6A640(a1 - 80, byte_A073D[a1]);
  return 0;
}

//----- (0006A0F9) --------------------------------------------------------
void sub_6A0F9()
{
  ;
}

//----- (0006A10A) --------------------------------------------------------
void sub_6A10A()
{
  ;
}

//----- (0006A11B) --------------------------------------------------------
char sub_6A11B()
{
  unsigned int i; // [esp+0h] [ebp-8h]
  unsigned int j; // [esp+0h] [ebp-8h]

  for ( i = 0; i < 9; ++i )
  {
    byte_A073D[i] = 0;
    sub_6A640(i - 80, byte_A073D[i]);
  }
  for ( j = 0; j < 0xB; ++j )
    byte_A0759[j] = 0;
  byte_A0774 = 0;
  byte_A0758 &= 0xC0u;
  sub_6A640(0xBDu, byte_A0758);
  return 0;
}
// A0758: using guessed type char byte_A0758;
// A0774: using guessed type char byte_A0774;

//----- (0006A1B3) --------------------------------------------------------
void sub_6A1B3()
{
  ;
}

//----- (0006A1C4) --------------------------------------------------------
void sub_6A1C4()
{
  ;
}

//----- (0006A1D5) --------------------------------------------------------
char sub_6A1D5(unsigned __int8 a1, __int16 a2)
{
  byte_A0734[a1] = a2;
  byte_A073D[a1] = HIBYTE(a2) | 0x20;
  sub_6A640(a1 - 96, byte_A0734[a1]);
  sub_6A640(a1 - 80, byte_A073D[a1] & 0xDF);
  sub_6A640(a1 - 80, byte_A073D[a1]);
  byte_A0764[a1] = 1;
  return 0;
}

//----- (0006A275) --------------------------------------------------------
void sub_6A275()
{
  ;
}

//----- (0006A286) --------------------------------------------------------
void sub_6A286()
{
  ;
}

//----- (0006A297) --------------------------------------------------------
char sub_6A297(unsigned __int8 a1)
{
  if ( !byte_A0764[a1] )
    return 6;
  byte_A073D[a1] &= ~0x20u;
  sub_6A640(a1 - 80, byte_A073D[a1]);
  byte_A0764[a1] = 0;
  return 0;
}

//----- (0006A2F5) --------------------------------------------------------
void sub_6A2F5()
{
  ;
}

//----- (0006A306) --------------------------------------------------------
void sub_6A306()
{
  ;
}

//----- (0006A317) --------------------------------------------------------
char sub_6A317()
{
  unsigned __int8 i; // [esp+4h] [ebp-4h]
  unsigned __int8 j; // [esp+4h] [ebp-4h]
  unsigned __int8 k; // [esp+4h] [ebp-4h]

  if ( !byte_A0773 )
    return 2;
  byte_A0758 = 0;
  sub_6A640(0xBDu, 0);
  for ( i = 0; i < 9u; ++i )
    sub_6A640(i - 80, byte_A073D[i] & 0xDF);
  for ( j = 0; j < 9u; ++j )
    sub_6A640(byte_A0776[2 * j] + 64, 0xFFu);
  for ( k = 0; k < 0xBu; ++k )
    byte_A0759[k] = 0;
  return 0;
}
// A0758: using guessed type char byte_A0758;
// A0773: using guessed type char byte_A0773;

//----- (0006A3E3) --------------------------------------------------------
void sub_6A3E3()
{
  ;
}

//----- (0006A3F4) --------------------------------------------------------
void sub_6A3F4()
{
  ;
}

//----- (0006A405) --------------------------------------------------------
char sub_6A405(int a1, int a2, unsigned __int8 a3)
{
  unsigned __int8 v4; // [esp+0h] [ebp-38h]
  unsigned __int8 v5; // [esp+4h] [ebp-34h]
  unsigned __int8 v6; // [esp+8h] [ebp-30h]
  unsigned __int8 v7; // [esp+Ch] [ebp-2Ch]
  unsigned __int8 v8; // [esp+10h] [ebp-28h]
  unsigned __int8 v9; // [esp+14h] [ebp-24h]
  unsigned __int8 v10; // [esp+18h] [ebp-20h]
  unsigned __int8 v11; // [esp+1Ch] [ebp-1Ch]
  int v12; // [esp+20h] [ebp-18h]
  int v13; // [esp+20h] [ebp-18h]
  unsigned __int8 v14; // [esp+24h] [ebp-14h]
  unsigned __int8 v15; // [esp+28h] [ebp-10h]
  unsigned __int8 v16; // [esp+2Ch] [ebp-Ch]

  v12 = (unsigned __int8)byte_A0775[2 * a3];
  v15 = __readgsbyte(a1 + 11);
  v16 = __readgsbyte(a1 + 2);
  v5 = __readgsbyte(a1 + 5);
  v14 = __readgsbyte(a1 + 6);
  v4 = __readgsbyte(a1 + 14);
  v11 = __readgsbyte(a1 + 28);
  v10 = __readgsbyte(a1 + 24);
  v9 = __readgsbyte(a1 + 15);
  v8 = __readgsbyte(a1 + 18);
  v7 = __readgsbyte(a1 + 19);
  v6 = __readgsbyte(a1 + 29);
  byte_A0724[(unsigned __int8)byte_A0776[2 * a3]] = v7;
  byte_A0724[(unsigned __int8)byte_A0775[2 * a3]] = v14;
  sub_6A640(v12 + 32, v15);
  sub_6A640(v12 + 64, v16);
  byte_A0704[v12] = v16;
  sub_6A640(v12 + 96, v5);
  sub_6A640(v12 + 0x80, v14);
  sub_6A640(a3 - 64, v4);
  sub_6A640(v12 - 32, v11);
  v13 = (unsigned __int8)byte_A0776[2 * a3];
  sub_6A640(v13 + 32, v10);
  byte_A0704[v13] = v9;
  sub_6A640(v13 + 96, v8);
  sub_6A640(v13 + 0x80, v7);
  sub_6A640(v13 - 32, v6);
  byte_A0759[a3] = 1;
  return 0;
}
// 6A405: using guessed type _DWORD arg_0;

//----- (0006A5EC) --------------------------------------------------------
void sub_6A5EC()
{
  ;
}

//----- (0006A5FD) --------------------------------------------------------
void sub_6A5FD()
{
  ;
}

//----- (0006A60E) --------------------------------------------------------
char sub_6A60E()
{
  byte_A0773 = 0;
  return 0;
}
// A0773: using guessed type char byte_A0773;

//----- (0006A62D) --------------------------------------------------------
void sub_6A62D()
{
  ;
}

//----- (0006A640) --------------------------------------------------------
unsigned __int8 sub_6A640(unsigned __int8 a1, unsigned __int8 a2)
{
  unsigned __int16 v2; // dx

  FixPerifery();

  v2 = dword_A06F0;
  __outbyte(dword_A06F0, a1);
  __inbyte(++v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __outbyte(v2--, a2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  __inbyte(v2);
  return __inbyte(v2);
}
// A06F0: using guessed type int dword_A06F0;

//----- (0006A737) --------------------------------------------------------
__int16 sub_6A737(void (*a1)(_DWORD), unsigned int a2, int a3, int a4, __int16 a5)
{
  int v7; // ecx
  int v8; // edi
  __int16 result; // ax

  //fix
  result = 0;
  //fix

  FixPerifery();

  a1((uint32)a1);
  v7 = 5;
  do
  {
    //fix *MK_FP(a5, a4) = (char *)a1 + __readfsdword(a2);
    v8 = a4 + 4;
    //fix result = __CS__;
    //fix *MK_FP(a5, v8) = __CS__;
    a4 = v8 + 2;
    a2 += 8;
    --v7;
  }
  while ( v7 );
  return result;
}
// 6A737: using guessed type unsigned int arg_4;

//----- (0006B260) --------------------------------------------------------
int sub_6B260(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6)
{
  __int16 v6; // bx
  __int16 v7; // cx
  __int16 v8; // dx
  _BYTE *v10; // edi
  int v11; // eax
  unsigned int v12; // ecx
  int v13; // ecx
  int v14; // esi
  int v15; // esi
  int v16; // [esp+4h] [ebp-4h]

  //fix
  v16 = 0;
  //fix

  v6 = 2 * dword_12F024_12F014;
  v7 = 2 * viewportBegY_12F018_12F008;
  v8 = 2 * dword_12F010;
  if ( a1 < (__int16)(2 * viewportBegX_12F008_12EFF8) )
    a1 = 2 * viewportBegX_12F008_12EFF8;
  if ( a3 < (__int16)(2 * viewportBegX_12F008_12EFF8) )
    return v16;
  if ( a1 >= v6 )
    return v16;
  if ( a3 >= v6 )
    a3 = 2 * dword_12F024_12F014;
  if ( a2 < v7 )
    a2 = 2 * viewportBegY_12F018_12F008;
  if ( a4 < v7 )
    return v16;
  if ( a2 >= v8 )
    return v16;
  if ( a4 >= v8 )
    a4 = 2 * dword_12F010;
  v10 = (_BYTE *)(320 * ((unsigned __int16)a2 >> 1) + begWscreen_2ECFF4_2ECFE4 + ((unsigned __int16)a1 >> 1));
  v11 = a5;
  v12 = (unsigned __int16)a3;
  if ( a3 == a1 )
  {
    v13 = (unsigned __int16)a4;
    LOWORD(v13) = (unsigned __int16)(a4 - a2) >> 1;
    if ( (a6 & 4) != 0 )
    {
      v14 = dword_9AFA0;
      do
      {
        BYTE1(v11) = *v10;
        *v10 = *(_BYTE *)(v11 + v14);
        v10 += 320;
        --v13;
      }
      while ( v13 );
    }
    else
    {
      do
      {
        *v10 = a5;
        v10 += 320;
        --v13;
      }
      while ( v13 );
    }
  }
  else
  {
    LOWORD(v12) = (unsigned __int16)(a3 - a1) >> 1;
    if ( (a6 & 4) != 0 )
    {
      v15 = dword_9AFA0;
      do
      {
        BYTE1(v11) = *v10;
        *v10++ = *(_BYTE *)(v11 + v15);
        --v12;
      }
      while ( v12 );
    }
    else
    {
      memset(v10, a5, v12);
    }
  }
  return v16;
}
// 6B2A5: variable 'v16' is possibly undefined
// 9AFA0: using guessed type int dword_9AFA0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F008: using guessed type int viewportBegX_12F008_12EFF8;
// 12F010: using guessed type int dword_12F010;
// 12F018: using guessed type int viewportBegY_12F018_12F008;
// 12F024: using guessed type int dword_12F024_12F014;

//----- (0006B378) --------------------------------------------------------
int sub_6B378(__int16 a1, __int16 a2, __int16 a3, __int16 a4, unsigned __int16 a5, __int16 a6)
{
  _BYTE *v7; // edi
  int v8; // eax
  unsigned int v9; // ecx
  int v10; // ecx
  int v11; // esi
  int v12; // esi
  int v13; // [esp+4h] [ebp-4h]

  //fix
  v13 = 0;
  //fix

  if ( a1 < (__int16)viewportBegX_12F008_12EFF8 )
    a1 = viewportBegX_12F008_12EFF8;
  if ( a3 < (__int16)viewportBegX_12F008_12EFF8 )
    return v13;
  if ( a1 >= (__int16)dword_12F024_12F014 )
    return v13;
  if ( a3 >= (__int16)dword_12F024_12F014 )
    a3 = dword_12F024_12F014;
  if ( a2 < (__int16)viewportBegY_12F018_12F008 )
    a2 = viewportBegY_12F018_12F008;
  if ( a4 < (__int16)viewportBegY_12F018_12F008 )
    return v13;
  if ( a2 >= (__int16)dword_12F010 )
    return v13;
  if ( a4 >= (__int16)dword_12F010 )
    a4 = dword_12F010;
  v7 = (_BYTE *)(640 * (unsigned __int16)a2 + begWscreen_2ECFF4_2ECFE4 + (unsigned __int16)a1);
  v8 = a5;
  v9 = (unsigned __int16)a3;
  LOWORD(v9) = a3 - a1;
  if ( a3 == a1 )
  {
    v10 = (unsigned __int16)a4;
    LOWORD(v10) = a4 - a2;
    if ( (a6 & 4) != 0 )
    {
      v11 = dword_9AFA0;
      do
      {
        BYTE1(v8) = *v7;
        *v7 = *(_BYTE *)(v8 + v11);
        v7 += 640;
        --v10;
      }
      while ( v10 );
    }
    else
    {
      do
      {
        *v7 = a5;
        v7 += 640;
        --v10;
      }
      while ( v10 );
    }
  }
  else if ( (a6 & 4) != 0 )
  {
    v12 = dword_9AFA0;
    do
    {
      BYTE1(v8) = *v7;
      *v7++ = *(_BYTE *)(v8 + v12);
      --v9;
    }
    while ( v9 );
  }
  else
  {
    memset(v7, a5, v9);
  }
  return v13;
}
// 6B3B1: variable 'v13' is possibly undefined
// 9AFA0: using guessed type int dword_9AFA0;
// 12EFF4: using guessed type int dword_12EFF4;
// 12F008: using guessed type int viewportBegX_12F008_12EFF8;
// 12F010: using guessed type int dword_12F010;
// 12F018: using guessed type int viewportBegY_12F018_12F008;
// 12F024: using guessed type int dword_12F024_12F014;

//----- (0006B47C) --------------------------------------------------------
void sub_6B47C_6B98C(TColor* palette)
{
    FixPerifery((char*)"port0x3C7");
    //VGA_Set_Palette(a1);
    memcpy((uint8_t*)palette, VGA_Get_Palette(), 768);
    /*
  int v3; // [esp+4h] [ebp-4h]

  //fix
  v3 = 0;
  //fix

  FixPerifery((char*)"port0x3C7");

  __outbyte(0x3C7u, 0);
  __inbytestring(0x3C9u, (int)a1, 0x300u);
  */
}
// 6B49D: variable 'v3' is possibly undefined

//----- (0006B87A) --------------------------------------------------------
int sub_6B87A()
{
  return dword_A0CA4;
}
// A0CA4: using guessed type int dword_A0CA4;

//----- (0006BCA3) --------------------------------------------------------
int sub_6BCA3(int a1, unsigned __int8 *a2, int *a3)
{
  int *v3; // edi
  int v4; // ebp
  unsigned __int8 *v5; // ebx
  unsigned __int8 *v6; // ecx
  int v7; // ebx
  int v8; // eax
  unsigned __int8 *v9; // eax
  unsigned int v10; // ebx
  int v11; // eax
  int v13; // [esp-4h] [ebp-18h]
  int v14; // [esp+0h] [ebp-14h]

  v3 = a3;
  v4 = 0;
  v14 = 0;
  *(_BYTE *)(a1 + 16) &= ~2u;
  while ( 1 )
  {
    v5 = a2;
    v6 = ++a2;
    v7 = *v5;
    if ( !v7 )
      break;
    if ( (IsTable[(unsigned __int8)(v7 + 1)] & 2) != 0 )
    {
      v4 += sub_6BF98(a1);
    }
    else if ( v7 == 37 )
    {
      v9 = sub_6BEBB(v6, a1);
      a2 = v9;
      v10 = *v9;
      if ( *v9 )
        a2 = v9 + 1;
      if ( v10 < 0x65 )
      {
        if ( v10 < 0x58 )
        {
          if ( v10 < 0x45 )
          {
            if ( v10 == 37 )
            {
              v8 = (*(int (**)(int))a1)(a1);
              if ( v8 != 37 )
              {
LABEL_7:
                if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
                  (*(void (**)(int, int))(a1 + 4))(v8, a1);
                break;
              }
            }
          }
          else if ( v10 <= 0x45 || v10 == 71 )
          {
LABEL_45:
            sub_6C32A(a1, v3);
            goto LABEL_50;
          }
        }
        else
        {
          if ( v10 <= 0x58 )
          {
LABEL_44:
            sub_6C66D(a1, v3, 16, 1);
            goto LABEL_50;
          }
          if ( v10 >= 0x63 )
          {
            if ( v10 <= 0x63 )
            {
              v11 = sub_6BFCF_6C4DF((_WORD *)a1, a1, v3);
              goto LABEL_50;
            }
            v13 = 1;
LABEL_40:
            sub_6C66D(a1, v3, 10, v13);
            goto LABEL_50;
          }
          if ( v10 == 91 )
          {
            sub_6C224_6C734((_BYTE *)a1, a1, v3, &a2);
            goto LABEL_50;
          }
        }
      }
      else
      {
        if ( v10 <= 0x67 )
          goto LABEL_45;
        if ( v10 < 0x70 )
        {
          if ( v10 < 0x6E )
          {
            if ( v10 == 105 )
            {
              sub_6C66D(a1, v3, 0, 1);
              goto LABEL_50;
            }
          }
          else
          {
            if ( v10 > 0x6E )
            {
              sub_6C66D(a1, v3, 8, 1);
LABEL_50:
              if ( v11 <= 0 )
                break;
              v4 += v11;
              if ( (*(_BYTE *)(a1 + 16) & 1) != 0 )
                ++v14;
              goto LABEL_55;
            }
            sub_6C175(a1, v3, v4);
          }
        }
        else
        {
          if ( v10 <= 0x70 )
            goto LABEL_44;
          if ( v10 < 0x75 )
          {
            if ( v10 == 115 )
            {
              sub_6C05C_6C56C((_BYTE *)a1, a1, v3);
              goto LABEL_50;
            }
          }
          else
          {
            if ( v10 <= 0x75 )
            {
              v13 = 0;
              goto LABEL_40;
            }
            if ( v10 == 120 )
              goto LABEL_44;
          }
        }
      }
    }
    else
    {
      v8 = (*(int (**)(int))a1)(a1);
      if ( v8 != v7 )
        goto LABEL_7;
      ++v4;
    }
LABEL_55:
    if ( (*(_BYTE *)(a1 + 16) & 2) != 0 )
    {
      if ( *a2 == 37 )
      {
        ++a2;
        a2 = sub_6BEBB(a2, a1);
        if ( *a2 == 110 )
          sub_6C175(a1, v3, v4);
      }
      break;
    }
  }
  if ( v14 || (*(_BYTE *)(a1 + 16) & 2) == 0 )
    return v14;
  else
    return -1;
}
// 6BE39: variable 'v11' is possibly undefined

//----- (0006BEBB) --------------------------------------------------------
unsigned __int8 *sub_6BEBB(unsigned __int8 *a1, int a2)
{
  unsigned __int8 *result; // eax
  char v3; // dl
  int v4; // edx
  unsigned __int8 v5; // cl
  int v6; // [esp+0h] [ebp-Ch]

  result = a1;
  v3 = *(_BYTE *)(a2 + 16) | 1;
  *(_DWORD *)(a2 + 12) = -1;
  *(_BYTE *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 16) = v3 & 3;
  if ( *a1 == 42 )
  {
    result = a1 + 1;
    *(_BYTE *)(a2 + 16) &= ~1u;
  }
  v6 = *result;
  if ( (IsTable[(unsigned __int8)(v6 + 1)] & 0x20) != 0 )
  {
    v4 = 0;
    do
    {
      ++result;
      v4 = v6 - 48 + 10 * v4;
      v6 = *result;
    }
    while ( (IsTable[(unsigned __int8)(v6 + 1)] & 0x20) != 0 );
    *(_DWORD *)(a2 + 12) = v4;
  }
  if ( *result == 78 )
  {
    *(_BYTE *)(a2 + 16) |= 8u;
  }
  else
  {
    if ( *result != 70 )
      goto LABEL_12;
    *(_BYTE *)(a2 + 16) |= 4u;
  }
  ++result;
LABEL_12:
  v5 = *result;
  if ( *result < 0x68u )
  {
    if ( v5 == 76 )
    {
      ++result;
      *(_BYTE *)(a2 + 16) |= 0x40u;
    }
  }
  else if ( *result <= 0x68u )
  {
    ++result;
    *(_BYTE *)(a2 + 16) |= 0x10u;
  }
  else if ( v5 >= 0x6Cu && (v5 <= 0x6Cu || v5 == 119) )
  {
    ++result;
    *(_BYTE *)(a2 + 16) |= 0x20u;
  }
  return result;
}

//----- (0006BF98) --------------------------------------------------------
int sub_6BF98(int a1)
{
  int i; // esi
  int v2; // eax

  for ( i = 0; ; ++i )
  {
    v2 = (*(int (**)(int))a1)(a1);
    if ( (IsTable[(unsigned __int8)(v2 + 1)] & 2) == 0 )
      break;
  }
  if ( (*(_BYTE *)(a1 + 16) & 2) == 0 )
    (*(void (**)(int, int))(a1 + 4))(v2, a1);
  return i;
}

//----- (0006BFCF) --------------------------------------------------------
int sub_6BFCF_6C4DF(_WORD *a1, int a2, int *a3)
{
  char v3; // dl
  int v4; // esi
  int v5; // eoff
  int v6; // ecx
  int v7; // edx
  int v8; // edi
  int v9; // ebp
  __int16 v10; // ax
  char v11; // ch

  v3 = *(_BYTE *)(a2 + 16);
  if ( (v3 & 1) != 0 )
  {
    if ( (v3 & 4) != 0 )
    {
      v4 = *a3 + 8;
      *a3 = v4;
      v5 = v4 - 8;
      a1 = *(_WORD **)(v4 - 8);
      //fix __ES__ = *(_WORD *)(v5 + 4);
    }
    else if ( (v3 & 8) != 0 )
    {
      v6 = *a3 + 4;
      *a3 = v6;
      //fix __ES__ = __DS__;
      a1 = *(_WORD **)(v6 - 4);
    }
    else
    {
      v7 = *a3 + 4;
      *a3 = v7;
      //fix __ES__ = __DS__;
      a1 = *(_WORD **)(v7 - 4);
    }
  }
  v8 = *(_DWORD *)(a2 + 12);
  v9 = 0;
  if ( v8 == -1 )
    v8 = 1;
  while ( v8 > 0 )
  {
    v10 = (*(int (**)(int))a2)(a2);
    v11 = *(_BYTE *)(a2 + 16);
    if ( (v11 & 2) != 0 )
      break;
    ++v9;
    --v8;
    if ( (v11 & 1) != 0 )
    {
      if ( (v11 & 0x20) != 0 )
      {
        *a1++ = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
        a1 = (_WORD *)((char *)a1 + 1);
      }
    }
  }
  return v9;
}

//----- (0006C05C) --------------------------------------------------------
void sub_6C05C_6C56C(_BYTE *a1, int a2, int *a3)
{
  char v3; // dh
  int v4; // esi
  int v5; // eoff
  int v6; // ecx
  int v7; // edx
  int i; // edi
  int v9; // eax
  int v10; // [esp+0h] [ebp-1Ch]
  unsigned __int8 v11; // [esp+4h] [ebp-18h]

  if ( (*(_BYTE *)(a2 + 16) & 0x20) != 0 )
    v11 = 2;
  else
    v11 = 1;
  v3 = *(_BYTE *)(a2 + 16);
  if ( (v3 & 1) != 0 )
  {
    if ( (v3 & 4) != 0 )
    {
      v4 = *a3 + 8;
      *a3 = v4;
      v5 = v4 - 8;
      a1 = *(_BYTE **)(v4 - 8);
      //fix __ES__ = *(_WORD *)(v5 + 4);
    }
    else if ( (v3 & 8) != 0 )
    {
      v6 = *a3 + 4;
      *a3 = v6;
      //fix __ES__ = __DS__;
      a1 = *(_BYTE **)(v6 - 4);
    }
    else
    {
      v7 = *a3 + 4;
      *a3 = v7;
      //fix __ES__ = __DS__;
      a1 = *(_BYTE **)(v7 - 4);
    }
  }
  for ( i = 0; ; ++i )
  {
    v10 = (*(int (**)(int))a2)(a2);
    if ( (IsTable[(unsigned __int8)(v10 + 1)] & 2) == 0 )
      break;
  }
  if ( (*(_BYTE *)(a2 + 16) & 2) != 0 )
  {
    i = 0;
  }
  else
  {
    v9 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = v9 - 1;
    if ( v9 )
    {
      while ( 1 )
      {
        ++i;
        if ( (*(_BYTE *)(a2 + 16) & 1) != 0 )
        {
          if ( v11 == 1 )
            *a1 = v10;
          else
            *(_WORD *)a1 = v10;
          a1 += v11;
        }
        v10 = sub_6C8C5(a2);
        if ( v10 == -1 )
          break;
        if ( (IsTable[(unsigned __int8)(v10 + 1)] & 2) != 0 )
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      (*(void (**)(int, int))(a2 + 4))(v10, a2);
    }
  }
  if ( (*(_BYTE *)(a2 + 16) & 1) != 0 && i > 0 )
  {
    if ( v11 == 1 )
      *a1 = 0;
    else
      *(_WORD *)a1 = 0;
  }
  JUMPOUT(0x6C056);
}
// 6C170: control flows out of bounds to 6C056

//----- (0006C175) --------------------------------------------------------
int *sub_6C175(int a1, int *a2, int a3)
{
  int *result; // eax
  char v4; // bl
  int v5; // esi
  int v6; // ecx
  int v7; // ebx

  result = a2;
  v4 = *(_BYTE *)(a1 + 16);
  if ( (v4 & 1) != 0 )
  {
    if ( (v4 & 4) != 0 )
    {
      v5 = *a2 + 8;
      *a2 = v5;
      result = *(int **)(v5 - 8);
      //fix __ES__ = *(_WORD *)(v5 - 8 + 4);
    }
    else if ( (v4 & 8) != 0 )
    {
      v6 = *a2 + 4;
      *a2 = v6;
      //fix __ES__ = __DS__;
      result = *(int **)(v6 - 4);
    }
    else
    {
      v7 = *a2 + 4;
      *a2 = v7;
      //fix __ES__ = __DS__;
      result = *(int **)(v7 - 4);
    }
    if ( (*(_BYTE *)(a1 + 16) & 0x10) != 0 )
      *(_WORD *)result = a3;
    else
      *result = a3;
  }
  return result;
}

//----- (0006C1E0) --------------------------------------------------------
_BYTE *sub_6C1E0(_BYTE *a1, int a2)
{
  int v2; // eax
  _BYTE *v3; // ebx

  memset((void*)a2, 0, 32);
  v2 = (unsigned __int8)*a1;
  v3 = a1 + 1;
  if ( *a1 )
  {
    do
    {
      *(_BYTE *)((v2 >> 3) + a2) |= byte_AC16C[v2 & 7];
      v2 = (unsigned __int8)*v3;
      if ( !*v3 )
        break;
      ++v3;
    }
    while ( v2 != 93 );
  }
  return v3;
}
// 5CC30: using guessed type _DWORD memset(_DWORD, _DWORD, _DWORD);

//----- (0006C224) --------------------------------------------------------
void sub_6C224_6C734(_BYTE *a1, int a2, int *a3, _BYTE **a4)
{
  _BYTE *v4; // eax
  _BOOL1 v5; // zf
  char v6; // cl
  int v7; // ebp
  int v8; // esi
  int v9; // ecx
  int v10; // edi
  int i; // ebp
  int v12; // eax
  char v13; // dl
  char v14[32]; // [esp+0h] [ebp-40h] BYREF
  int v15; // [esp+20h] [ebp-20h]
  bool v16; // [esp+24h] [ebp-1Ch]
  int v17; // [esp+28h] [ebp-18h]

  v4 = *a4;
  v5 = **a4 != 94;
  v16 = **a4 == 94;
  if ( !v5 )
    *a4 = v4 + 1;
  *a4 = sub_6C1E0(*a4, (int)v14);
  v6 = *(_BYTE *)(a2 + 16);
  if ( (v6 & 1) != 0 )
  {
    if ( (v6 & 4) != 0 )
    {
      v7 = *a3 + 8;
      *a3 = v7;
      a1 = *(_BYTE **)(v7 - 8);
      //fix __ES__ = *(_WORD *)(v7 - 8 + 4);
    }
    else if ( (v6 & 8) != 0 )
    {
      v8 = *a3 + 4;
      *a3 = v8;
      //fix __ES__ = __DS__;
      a1 = *(_BYTE **)(v8 - 4);
    }
    else
    {
      v9 = *a3 + 4;
      *a3 = v9;
      //fix __ES__ = __DS__;
      a1 = *(_BYTE **)(v9 - 4);
    }
  }
  v10 = *(_DWORD *)(a2 + 12);
  for ( i = 0; ; ++i )
  {
    if ( !v10 )
      goto LABEL_16;
    v12 = (*(int (**)(int))a2)(a2);
    v13 = *(_BYTE *)(a2 + 16);
    v17 = v12;
    if ( (v13 & 2) != 0 )
      goto LABEL_16;
    v15 = (unsigned __int8)v14[v12 >> 3];
    if ( ((unsigned __int8)(v15 & byte_AC16C[v12 & 7]) == 0) != v16 )
      break;
    --v10;
    if ( (*(_BYTE *)(a2 + 16) & 1) != 0 )
      *a1++ = v17;
  }
  (*(void (**)(int, int))(a2 + 4))(v12, a2);
LABEL_16:
  if ( (*(_BYTE *)(a2 + 16) & 1) != 0 && i > 0 )
    *a1 = 0;
  JUMPOUT(0x6C056);
}
// 6C325: control flows out of bounds to 6C056
// 6C224: using guessed type char var_40[32];

//----- (0006C32A) --------------------------------------------------------
void sub_6C32A(int a1, int *a2)
{
  char *v2; // ebx
  int v3; // edi
  int i; // ebp
  int v5; // eax
  int v6; // ecx
  char *v7; // ecx
  char v8; // al
  int v9; // eax
  char v10; // ah
  int v11; // ecx
  int *v12; // ebx
  int v13; // ebx
  int v14; // edx
  char v15; // dh
  int v16; // eax
  char v17; // [esp+0h] [ebp-80h] BYREF
  _BYTE v18[3]; // [esp+1h] [ebp-7Fh] BYREF
  int v19[2]; // [esp+50h] [ebp-30h] BYREF
  int v20; // [esp+58h] [ebp-28h]
  unsigned int j; // [esp+5Ch] [ebp-24h]
  int v22; // [esp+60h] [ebp-20h]
  int v23; // [esp+64h] [ebp-1Ch]
  int v24; // [esp+68h] [ebp-18h]

  v2 = &v17;
  v3 = 0;
  for ( i = 0; ; ++i )
  {
    v5 = (*(int (**)(int))a1)(a1);
    v22 = v5;
    if ( (IsTable[(unsigned __int8)(v5 + 1)] & 2) == 0 )
      break;
  }
  if ( (*(_BYTE *)(a1 + 16) & 2) != 0 )
    goto LABEL_42;
  v6 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v6 - 1;
  if ( v6 )
  {
    if ( v5 == 43 || v5 == 45 )
    {
      v17 = v22;
      v2 = (char*)v18;
      v22 = sub_6C8C5(a1);
      if ( v22 == -1 )
        goto LABEL_42;
    }
    if ( (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) != 0 || v22 == 46 )
    {
      v20 = 0;
      v23 = 0;
      if ( (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) != 0 )
      {
        v23 = 1;
        while ( 1 )
        {
          *v2++ = v22;
          if ( (*(_BYTE *)(a1 + 16) & 0x10) != 0 )
            HIWORD(v20) = v22 + 10 * HIWORD(v20) - 48;
          ++v3;
          v22 = sub_6C8C5(a1);
          if ( v22 == -1 )
            break;
          if ( (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) == 0 )
            goto LABEL_17;
        }
LABEL_42:
        if ( v3 > 0 && (*(_BYTE *)(a1 + 16) & 1) != 0 )
        {
          *v2 = 0;
          if ( (*(_BYTE *)(a1 + 16) & 0x10) != 0 )
          {
            if ( v17 == 45 )
              v20 = -v20;
          }
          else
          {
            off_A6368((uint32)&v17, (uint32)v19);
          }
          v10 = *(_BYTE *)(a1 + 16);
          if ( (v10 & 4) != 0 )
          {
            v11 = *a2 + 8;
            *a2 = v11;
            v12 = *(int **)(v11 - 8);
            //fix __ES__ = *(_WORD *)(v11 - 8 + 4);
          }
          else if ( (v10 & 8) != 0 )
          {
            v13 = *a2 + 4;
            *a2 = v13;
            //fix __ES__ = __DS__;
            v12 = *(int **)(v13 - 4);
          }
          else
          {
            v14 = *a2 + 4;
            *a2 = v14;
            //fix __ES__ = __DS__;
            v12 = *(int **)(v14 - 4);
          }
          v15 = *(_BYTE *)(a1 + 16);
          if ( (v15 & 0x10) != 0 )
          {
            v16 = v20;
          }
          else
          {
            if ( (v15 & 0x20) != 0 || (v15 & 0x40) != 0 )
            {
              *v12 = v19[0];
              v12[1] = v19[1];
              goto LABEL_60;
            }
            v16 = _FDFS();
          }
          *v12 = v16;
        }
LABEL_60:
        JUMPOUT(0x6C056);
      }
LABEL_17:
      if ( v22 == 46 )
      {
        *v2++ = 46;
        v22 = sub_6C8C5(a1);
        if ( v22 == -1 )
          goto LABEL_42;
        if ( !v23 && (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) == 0 )
          goto LABEL_41;
        ++v3;
        do
        {
          if ( (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) == 0 )
            break;
          ++v3;
          *v2++ = v22;
          v22 = sub_6C8C5(a1);
        }
        while ( v22 != -1 );
        if ( (*(_BYTE *)(a1 + 16) & 0x10) != 0 )
        {
          v7 = v2;
          for ( j = 0; ; j /= 0xAu )
          {
            v8 = *--v7;
            if ( *v7 == 46 )
              break;
            v24 = 10;
            BYTE2(j) = v8 - 48;
          }
          LOWORD(v20) = j;
        }
        if ( v22 == -1 )
          goto LABEL_42;
      }
      if ( (*(_BYTE *)(a1 + 16) & 0x10) == 0 && (v22 == 101 || v22 == 69) )
      {
        ++v3;
        *v2 = v22;
        v9 = sub_6C8C5(a1);
        ++v2;
        v22 = v9;
        if ( v9 == -1 )
          goto LABEL_42;
        if ( v9 == 43 || v9 == 45 )
        {
          ++v3;
          *v2++ = v22;
          v22 = sub_6C8C5(a1);
          if ( v22 == -1 )
            goto LABEL_42;
        }
        if ( (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) != 0 )
        {
          while ( 1 )
          {
            ++v3;
            *v2++ = v22;
            v22 = sub_6C8C5(a1);
            if ( v22 == -1 )
              goto LABEL_42;
            if ( (IsTable[(unsigned __int8)(v22 + 1)] & 0x20) == 0 )
              goto LABEL_41;
          }
        }
        v3 = 0;
      }
    }
  }
LABEL_41:
  (*(void (**)(int, int))(a1 + 4))(v22, a1);
  goto LABEL_42;
}
// 6C668: control flows out of bounds to 6C056
// 713FA: using guessed type int _FDFS(void);
// A6368: using guessed type int (*off_A6368)(_DWORD, _DWORD);

//----- (0006C66D) --------------------------------------------------------
void sub_6C66D(int a1, int *a2, int a3, int a4)
{
  int v4; // ebp
  int v5; // edi
  int v6; // esi
  int v7; // eax
  int v8; // edx
  int v9; // eax
  int v10; // eax
  int v11; // eax
  int v12; // eax
  int v13; // eax
  int v14; // eax
  char v15; // ah
  int v16; // edx
  _WORD *v17; // eax
  int v18; // ebp
  int v19; // ecx
  int v20; // [esp+0h] [ebp-20h]
  int v21; // [esp+4h] [ebp-1Ch]
  int i; // [esp+8h] [ebp-18h]

  v4 = a3;
  v5 = 0;
  v6 = 0;
  for ( i = 0; ; ++i )
  {
    v7 = (*(int (**)(int))a1)(a1);
    v21 = v7;
    if ( (IsTable[(unsigned __int8)(v7 + 1)] & 2) == 0 )
      break;
  }
  if ( (*(_BYTE *)(a1 + 16) & 2) != 0 )
    goto LABEL_34;
  v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v8 - 1;
  if ( v8 )
  {
    v20 = 43;
    if ( a4 && (v7 == 43 || v7 == 45) )
    {
      v20 = v7;
      v21 = sub_6C8C5(a1);
      if ( v21 == -1 )
        goto LABEL_34;
    }
    if ( !a3 )
    {
      if ( v21 != 48 )
      {
        v4 = 10;
        goto LABEL_26;
      }
      v9 = sub_6C8C5(a1);
      v6 = 1;
      v21 = v9;
      if ( v9 != -1 )
      {
        if ( v9 != 120 && v9 != 88 )
        {
          v4 = 8;
          goto LABEL_26;
        }
        v6 = 0;
        v21 = sub_6C8C5(a1);
        if ( v21 != -1 )
        {
          v4 = 16;
          goto LABEL_26;
        }
      }
      goto LABEL_34;
    }
    if ( a3 != 16 || v21 != 48 )
      goto LABEL_26;
    v10 = sub_6C8C5(a1);
    v6 = 1;
    v21 = v10;
    if ( v10 == -1 )
    {
LABEL_34:
      if ( v20 == 45 )
        v5 = -v5;
      if ( v6 > 0 )
      {
        v15 = *(_BYTE *)(a1 + 16);
        if ( (v15 & 1) != 0 )
        {
          if ( (v15 & 4) != 0 )
          {
            v16 = *a2 + 8;
            *a2 = v16;
            v17 = *(_WORD **)(v16 - 8);
            //fix __ES__ = *(_WORD *)(v16 - 8 + 4);
          }
          else if ( (v15 & 8) != 0 )
          {
            v18 = *a2 + 4;
            *a2 = v18;
            //fix __ES__ = __DS__;
            v17 = *(_WORD **)(v18 - 4);
          }
          else
          {
            v19 = *a2 + 4;
            *a2 = v19;
            //fix __ES__ = __DS__;
            v17 = *(_WORD **)(v19 - 4);
          }
          if ( (*(_BYTE *)(a1 + 16) & 0x10) != 0 )
            *v17 = v5;
          else
            *(_DWORD *)v17 = v5;
        }
      }
      JUMPOUT(0x6C056);
    }
    if ( v10 == 120 || v10 == 88 )
    {
      v11 = sub_6C8C5(a1);
      v6 = 0;
      goto LABEL_25;
    }
LABEL_26:
    while ( 1 )
    {
      v12 = sub_6C896(v21);
      if ( v12 >= v4 )
        break;
      v5 = v12 + v4 * v5;
      v11 = sub_6C8C5(a1);
      ++v6;
LABEL_25:
      v21 = v11;
      if ( v11 == -1 )
        goto LABEL_34;
    }
    if ( v21 == 58 && *(char *)(a1 + 16) < 0 )
    {
      while ( 1 )
      {
        v13 = sub_6C8C5(a1);
        ++v6;
        v21 = v13;
        if ( v13 == -1 )
          goto LABEL_34;
        v14 = sub_6C896(v13);
        if ( v14 >= v4 )
          break;
        v5 = v14 + v4 * v5;
      }
    }
  }
  (*(void (**)(int, int))(a1 + 4))(v21, a1);
  goto LABEL_34;
}
// 6C891: control flows out of bounds to 6C056
// 6C822: variable 'v20' is possibly undefined

//----- (0006C896) --------------------------------------------------------
int sub_6C896(int a1)
{
  int v2; // eax

  if ( a1 >= 48 && a1 <= 57 )
    return a1 - 48;
  v2 = tolower(a1);
  if ( v2 < 97 || v2 > 102 )
    return 16;
  else
    return v2 - 87;
}
// 6B5A3: using guessed type _DWORD tolower(_DWORD);

//----- (0006C8C5) --------------------------------------------------------
int sub_6C8C5(int a1)
{
  int v1; // eax
  int result; // eax

  v1 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v1 - 1;
  if ( !v1 )
    return -1;
  result = (*(int (**)(int))a1)(a1);
  if ( (*(_BYTE *)(a1 + 16) & 2) != 0 )
    return -1;
  return result;
}

//----- (0006D35C) --------------------------------------------------------
int sub_6D35C_6D86C(unsigned __int16 a1)
{
  int result; // eax
  char v2[28]; // [esp+0h] [ebp-38h] BYREF
  int v3[7]; // [esp+1Ch] [ebp-1Ch] BYREF

  //fix
  result = 0;
  //fix

  FixPerifery();

  if ( a1 )
  {
    v3[0] = 257;
    v3[3] = a1;
    return int386(49, (uint32)v3, (uint32)v2);
  }
  return result;
}
// 62F78: using guessed type _DWORD int386(_DWORD, _DWORD, _DWORD);
// 6D35C: using guessed type char var_38[28];

//----- (0006D5EC) --------------------------------------------------------
int sub_6D5EC(int a1, int a2)
{
  return *(_DWORD *)a2;
}

//----- (0006DD6C) --------------------------------------------------------
void sub_6DD6C()
{
  ;
}

//----- (0006DD7D) --------------------------------------------------------
int sub_6DD7D(int a1, int a2, __int16 a3)
{
  if ( !*(int *)((char *)&dword_A01CC + 6 * a1) && !word_A01D0[3 * a1] )
    return 1;
  if ( !a2 && !a3 )
    return 2;
  sub_676B0(
    6 * a1,
    (int (*)(_DWORD))dword_A01EA[a1],
    *(int *)((char *)&dword_A01CC + 6 * a1),
    word_A01D0[3 * a1],
    a2,
    a3);
  return 0;
}
// A01CC: using guessed type int dword_A01CC;
// A01D0: using guessed type __int16 word_A01D0[13];
// A01EA: using guessed type int dword_A01EA[5];

//----- (0006DE12) --------------------------------------------------------
void sub_6DE12()
{
  ;
}

//----- (0006DE23) --------------------------------------------------------
void sub_6DE23()
{
  ;
}

//----- (0006DE34) --------------------------------------------------------
int sub_6DE34_6E344(
        __int16 a1,
        int a2,
        unsigned int a3,
        unsigned int a4,
        int *a5,
        unsigned int a6)
{
  int v7; // [esp+0h] [ebp-30h]
  unsigned __int16 v8; // [esp+4h] [ebp-2Ch]
  int v10; // [esp+10h] [ebp-20h]
  unsigned int v11; // [esp+18h] [ebp-18h]
  int v12; // [esp+1Ch] [ebp-14h]
  int v13; // [esp+28h] [ebp-8h]
  int v14; // [esp+2Ch] [ebp-4h]

  v12 = 0;
  v11 = 0;
  if ( a4 > 5 )
    return 10;
  if ( dword_A0230[a4] )
    return 9;
  if ( a3 < 0xE000 || a3 > 0xE200 )
    return 6;
  strcpy(&unk_A05D1, &byte_A04D2);
  strcat(&unk_A05D1, "hmidrv.386");
  v14 = open((uint32)&unk_A05D1, 512);
  if ( v14 != -1 )
  {
    read(v14, (void*)&unk_131BB0, 44);
    while ( 1 )
    {
      if ( v11 > dword_131BD0 || v12 )
      {
        close(v14);
        dword_A02C6[a4] = dword_131BA8;
        dword_A0230[a4] = 1;
        __writegsword(a6 + 4, v8);
        __writegsdword(a6, v7);
        return 0;
      }
      read(v14, (void*)&unk_131B80, 48);
      v13 = dword_131BA4;
      if ( dword_131BA8 == a3 && byte_131BAD < 0 )
      {
        v12 = 1;
        v10 = (int)malloc(dword_131BA4);
        if ( !v10 )
          return 5;
        sub_674CD();
        sub_67557_67A67(a1, a2, v10);
        v8 = a1;
        v7 = sub_67582();
        read(v14, (void*)v10, v13);
        a2 = (int)a5;
        *a5 = v10;
      }
      else
      {
        lseek(v14, dword_131BA4, 1);
      }
      ++v11;
    }
  }
  return 15;
}
// 6E012: variable 'v8' is possibly undefined
// 6E01E: variable 'v7' is possibly undefined
// 6691E: using guessed type _DWORD close(_DWORD);
// 6692C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 6B992: using guessed type _DWORD lseek(_DWORD, _DWORD, char);
// 6CB61: using guessed type _DWORD malloc(_DWORD);
// 6DD0E: using guessed type _DWORD strcpy(_DWORD, _DWORD);
// 6DD33: using guessed type _DWORD strcat(_DWORD, _DWORD);
// A0230: using guessed type int dword_A0230[5];
// A02C6: using guessed type int dword_A02C6[5];
// A04D2: using guessed type char byte_A04D2;
// 131BA4: using guessed type int dword_131BA4;
// 131BA8: using guessed type int dword_131BA8;
// 131BAD: using guessed type char byte_131BAD;
// 131BD0: using guessed type int dword_131BD0;

//----- (0006E030) --------------------------------------------------------
int sub_6E030(unsigned int a1)
{
  if ( a1 > 5 )
    return 10;
  if ( !dword_A0230[a1] )
    return 10;
  dword_A0230[a1] = 0;
  return 0;
}
// A0230: using guessed type int dword_A0230[5];

//----- (0006E09A) --------------------------------------------------------
int sub_6E09A_6E5AA(__int16 a1, int a2, unsigned int a3, int *a4, unsigned int a5)
{
  int v6; // [esp+0h] [ebp-30h]
  unsigned __int16 v7; // [esp+4h] [ebp-2Ch]
  int v9; // [esp+10h] [ebp-20h]
  unsigned int v10; // [esp+18h] [ebp-18h]
  int v11; // [esp+1Ch] [ebp-14h]
  int v12; // [esp+28h] [ebp-8h]
  int v13; // [esp+2Ch] [ebp-4h]

  v11 = 0;
  v10 = 0;
  if ( a3 < 0x1000 || a3 > 0x1023 )
    return 6;
  strcpy(&unk_A05D1, &byte_A04D2);
  strcat(&unk_A05D1, "hmidrv.386");
  v13 = open((uint32)&unk_A05D1, 512);
  if ( v13 != -1 )
  {
    read(v13, (void*)&unk_131BB0, 44);
    while ( 1 )
    {
      if ( v10 > dword_131BD0 || v11 )
      {
        close(v13);
        __writegsword(a5 + 4, v7);
        __writegsdword(a5, v6);
        return 0;
      }
      read(v13, (void*)&unk_131B80, 48);
      v12 = dword_131BA4;
      if ( dword_131BA8 == a3 )
      {
        v11 = 1;
        v9 = (int)malloc(dword_131BA4);
        if ( !v9 )
          return 5;
        sub_674CD();
        sub_67557_67A67(a1, a2, v9);
        v7 = a1;
        v6 = sub_67582();
        read(v13, (void*)v9, v12);
        a2 = (int)a4;
        *a4 = v9;
      }
      else
      {
        lseek(v13, dword_131BA4, 1);
      }
      ++v10;
    }
  }
  return 15;
}
// 6E21E: variable 'v7' is possibly undefined
// 6E22A: variable 'v6' is possibly undefined
// 6691E: using guessed type _DWORD close(_DWORD);
// 6692C: using guessed type _DWORD read(_DWORD, _DWORD, _DWORD);
// 6B992: using guessed type _DWORD lseek(_DWORD, _DWORD, char);
// 6CB61: using guessed type _DWORD malloc(_DWORD);
// 6DD0E: using guessed type _DWORD strcpy(_DWORD, _DWORD);
// 6DD33: using guessed type _DWORD strcat(_DWORD, _DWORD);
// A04D2: using guessed type char byte_A04D2;
// 131BA4: using guessed type int dword_131BA4;
// 131BA8: using guessed type int dword_131BA8;
// 131BD0: using guessed type int dword_131BD0;

//----- (0006E23C) --------------------------------------------------------
int sub_6E23C(int a1, __int16 a2)
{
  if ( a1 || a2 )
    return 0;
  else
    return 2;
}

//----- (0006E295) --------------------------------------------------------
void sub_6E295()
{
  ;
}

//----- (0006E2A6) --------------------------------------------------------
void sub_6E2A6()
{
  ;
}

//----- (0006E33D) --------------------------------------------------------
void sub_6E33D()
{
  ;
}

//----- (0006E34E) --------------------------------------------------------
void sub_6E34E()
{
  ;
}

//----- (0006E3B9) --------------------------------------------------------
void sub_6E3B9()
{
  ;
}

//----- (0006E5A0) --------------------------------------------------------
void *sub_6E5A0()
{
  return &unk_131BE0;
}

//----- (0006E5A6) --------------------------------------------------------
void *sub_6E5A6()
{
  return &unk_131BDC;
}

//----- (0006E5B2) --------------------------------------------------------
int sub_6E5B2()
{
  unsigned __int16 i; // si
  int v1; // eax

  if ( dword_A1F24 )
    dword_A1734[0] = (int)&dword_A1F24;
  for ( i = 0; i < 0x10u; ++i )
  {
    v1 = 15 * i;
    byte_A1B39[v1 * 2] = 0x80;
    byte_A1B36[v1 * 2] = 0;
    byte_A1B3A[v1 * 2] = 127;
    byte_A1B3B[v1 * 2] = 100;
    word_A1B3C[v1] = 0;
    word_A1B3E[v1] = 0;
    word_A1B40[v1] = 512;
    word_A1B4C[v1] = -1;
    word_A1B4E[v1] = -1;
    word_A1B4A[v1] = 0;
    word_A1B42[v1] = 0;
    word_A1B44[v1] = 0;
    word_A1B46[v1] = 0;
    word_A1B48[v1] = -1;
    sub_6FC44(0, i);
  }
  return 0;
}
// A1734: using guessed type int dword_A1734[64];
// A1B3C: using guessed type __int16 word_A1B3C[];
// A1B3E: using guessed type __int16 word_A1B3E[];
// A1B40: using guessed type __int16 word_A1B40[];
// A1B42: using guessed type __int16 word_A1B42[];
// A1B44: using guessed type __int16 word_A1B44[];
// A1B46: using guessed type __int16 word_A1B46[];
// A1B48: using guessed type __int16 word_A1B48[];
// A1B4A: using guessed type __int16 word_A1B4A[];
// A1B4C: using guessed type __int16 word_A1B4C[];
// A1B4E: using guessed type __int16 word_A1B4E[];
// A1F24: using guessed type int dword_A1F24;

//----- (0006E65B) --------------------------------------------------------
unsigned int __stdcall sub_6E65B(unsigned __int16 a1, unsigned __int16 a2)
{
  unsigned int v2; // kr00_4
  int v3; // ebx
  unsigned int result; // eax

  FixPerifery();

  v2 = __readeflags();
  if ( (v2 & 0x200) != 0 )
    _disable();
  v3 = a2;
  __outword(word_A160A + 2050, ((int)a2 >> 7) & 0xE0 | a2 & 0x1F);
  __outword((a2 & 0xC00) + ((v3 >> 8) & 2 | word_A160A), a1);
  result = v2;
  if ( (v2 & 0x200) != 0 )
    _enable();
  return result;
}
// A160A: using guessed type __int16 word_A160A;

//----- (0006E6BF) --------------------------------------------------------
int __stdcall sub_6E6BF(unsigned __int16 a1)
{
  unsigned int v1; // kr00_4
  int v2; // ebx
  int result; // eax

  FixPerifery();

  v1 = __readeflags();
  if ( (v1 & 0x200) != 0 )
    _disable();
  v2 = a1;
  __outword(word_A160A + 2050, ((int)a1 >> 7) & 0xE0 | a1 & 0x1F);
  LOWORD(result) = __inword((word_A160A | (v2 >> 8) & 2) + (a1 & 0xC00));
  if ( (v1 & 0x200) != 0 )
    _enable();
  return (unsigned __int16)result;
}
// A160A: using guessed type __int16 word_A160A;

//----- (0006E727) --------------------------------------------------------
void __stdcall sub_6E727(unsigned __int16 a1, unsigned __int16 a2)
{
  unsigned int v2; // kr00_4
  int v3; // ebx

  FixPerifery();

  v2 = __readeflags();
  if ( (v2 & 0x200) != 0 )
    _disable();
  v3 = a2;
  __outword(word_A160A + 2050, a2 & 0x1F | ((int)a2 >> 7) & 0xE0);
  __outword((a2 & 0xC00) + ((v3 >> 8) & 2 | word_A160A), a1);
  JUMPOUT(0x6E6B2);
}
// 6E79B: control flows out of bounds to 6E6B2
// A160A: using guessed type __int16 word_A160A;

//----- (0006E7A0) --------------------------------------------------------
int __stdcall sub_6E7A0(unsigned __int16 a1)
{
  unsigned int v1; // kr00_4
  int v2; // ebx
  int v3; // ecx
  __int16 v4; // si
  unsigned __int16 v5; // ax
  int v6; // ebx
  unsigned __int16 v7; // ax
  int v8; // ebx

  FixPerifery();

  v1 = __readeflags();
  if ( (v1 & 0x200) != 0 )
    _disable();
  v2 = a1;
  __outword(word_A160A + 2050, ((int)a1 >> 7) & 0xE0 | a1 & 0x1F);
  v3 = (v2 >> 8) & 2;
  v4 = a1 & 0xC00;
  v5 = __inword((a1 & 0xC00) + (v3 | word_A160A));
  v6 = v5;
  v7 = __inword(v4 + (v3 | word_A160A) + 2);
  v8 = (v7 << 16) | v6;
  if ( (v1 & 0x200) != 0 )
    _enable();
  return v8;
}
// A160A: using guessed type __int16 word_A160A;

//----- (0006E822) --------------------------------------------------------
void __stdcall sub_6E822(int a1, __int16 a2, __int16 a3)
{
  unsigned int v3; // kr00_4
  unsigned __int16 j; // di
  unsigned int v5; // esi
  unsigned int v6; // eax
  unsigned __int16 v7; // ax
  unsigned int v8; // esi
  unsigned int v9; // [esp+4h] [ebp-14h]
  unsigned int v10; // [esp+8h] [ebp-10h]
  __int16 v11; // [esp+Ch] [ebp-Ch]
  unsigned __int16 i; // [esp+10h] [ebp-8h]
  unsigned __int16 v13; // [esp+14h] [ebp-4h]

  v3 = __readeflags();
  if ( (v3 & 0x200) != 0 )
    _disable();
  v10 = -1;
  v13 = word_A1608 - 1;
  for ( i = 0; i < 3u; ++i )
  {
    for ( j = i; j < (unsigned __int16)word_A1608; j += 3 )
    {
      v11 = word_A18B4[10 * j];
      if ( (unsigned __int16)v11 < 0xFF00u )
      {
        v9 = sub_6E7A0(j | 0x7000) & 0xFFFFFF;
        v5 = sub_6E7A0(j | 0x6000) & 0xFFFFFF;
        if ( v5 + 10 > v9 )
        {
          v6 = sub_6E7A0(j | 0x400) & 0xFFFFFF;
          if ( v6 >= v5 && v6 <= v9 )
          {
            v13 = j;
            goto LABEL_22;
          }
        }
      }
      if ( v11 == -1 || (unsigned __int16)v11 < 0x1000u )
      {
        v7 = (unsigned int)sub_6E7A0(j | 0x3000) >> 16;
        v8 = v7;
        if ( v11 != -1 )
          v8 = v7 + 1280;
        if ( (((unsigned __int16)sub_6E6BF(j | 0x5400) >> 8) & 0x80u) == 0 )
          v8 += 2688;
        if ( v8 < v10 )
        {
          v10 = v8;
          v13 = j;
        }
      }
    }
  }
LABEL_22:
  word_A18B4[10 * v13] = a2 | (a3 << 8);
  sub_6E65B(0x807Fu, v13 | 0x5400);
  if ( (v3 & 0x200) != 0 )
    _enable();
  JUMPOUT(0x6F3AD);
}
// 6E971: control flows out of bounds to 6F3AD
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];

//----- (0006E976) --------------------------------------------------------
int __stdcall sub_6E976(unsigned __int16 a1, unsigned __int16 a2)
{
  if ( (unsigned __int8)a1 > a2 || (unsigned __int16)((int)a1 >> 8) < a2 )
    JUMPOUT(0x6F84A);
  return 1;
}
// 6E98B: control flows out of bounds to 6F84A

//----- (0006E9A4) --------------------------------------------------------
int __stdcall sub_6E9A4(int a1, unsigned __int16 a2, unsigned __int16 a3)
{
  int result; // eax

  if ( a2 <= 3u )
  {
    result = (int)&unk_A1D34 + 124 * a3 + 4 * a2;
    *(_DWORD *)result += a1;
  }
  else if ( a2 == 4 )
  {
    result = 124 * a3;
    *(__int16 *)((char *)&word_A1D44 + result) += a1;
  }
  else
  {
    result = (int)&unk_A1D34 + 124 * a3 + 2 * a2 + 8;
    *(_WORD *)result = a1;
  }
  return result;
}
// A1D44: using guessed type __int16 word_A1D44;

//----- (0006EA0F) --------------------------------------------------------
int __stdcall sub_6EA0F(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v5; // esi
  int v6; // esi
  int v7; // esi
  int v8; // eax
  __int16 v9; // di
  unsigned __int16 v10; // ax
  unsigned __int16 *v11; // esi
  int v12; // esi
  unsigned __int16 v13; // dx
  int v14; // esi
  int v15; // eax
  unsigned __int16 v16; // ax
  __int16 k; // di
  int v18; // edx
  int v19; // [esp+4h] [ebp-38h]
  unsigned __int16 v20; // [esp+8h] [ebp-34h]
  unsigned __int16 v21; // [esp+Ch] [ebp-30h]
  int v22; // [esp+10h] [ebp-2Ch]
  unsigned __int16 v23; // [esp+18h] [ebp-24h]
  int v24; // [esp+1Ch] [ebp-20h]
  unsigned __int16 v25; // [esp+20h] [ebp-1Ch]
  unsigned __int16 i; // [esp+24h] [ebp-18h]
  unsigned __int16 j; // [esp+28h] [ebp-14h]
  unsigned __int16 v28; // [esp+2Ch] [ebp-10h]
  int v29; // [esp+30h] [ebp-Ch]
  signed __int16 v30; // [esp+34h] [ebp-8h]
  int v31; // [esp+38h] [ebp-4h]

  if ( !dword_A1734[a4] )
    return 0;
  v29 = 0;
  v31 = 0;
  v5 = 4 * a3 + *(_DWORD *)dword_A1734[a4];
  v21 = *(_WORD *)(v5 + 6);
  v25 = *(_WORD *)(v5 + 2);
LABEL_35:
  if ( v25 < v21 )
  {
    v19 = 0;
    v22 = v31;
    v6 = *(_DWORD *)(dword_A1734[a4] + 4);
    v23 = *(_WORD *)(v6 + 2 * v25 + 2);
    for ( i = *(_WORD *)(v6 + 2 * v25); ; ++i )
    {
      if ( i >= v23 )
        goto LABEL_34;
      v7 = 3 * i;
      v8 = *(_DWORD *)(dword_A1734[a4] + 8);
      v9 = *(unsigned __int8 *)(v7 + v8);
      v10 = *(_WORD *)(v7 + v8 + 1);
      v30 = v10;
      if ( v9 == 43 && !sub_6E976(v10, a2) )
        goto LABEL_34;
      if ( v9 == 44 && !sub_6E976(v30, a1) )
        goto LABEL_34;
      word_A1834[2 * (__int16)v31] = v9;
      word_A1836[2 * (__int16)v31++] = v30;
LABEL_10:
      if ( v19 )
      {
LABEL_34:
        ++v25;
        goto LABEL_35;
      }
      if ( v9 == 41 )
      {
        v11 = (unsigned __int16 *)(*(_DWORD *)(dword_A1734[a4] + 12) + 2 * v30);
        v20 = v11[1];
        v28 = *v11;
        while ( 2 )
        {
          if ( v28 < v20 )
          {
            v24 = v31;
            v12 = *(_DWORD *)(dword_A1734[a4] + 16);
            v13 = *(_WORD *)(v12 + 2 * v28 + 2);
            for ( j = *(_WORD *)(v12 + 2 * v28); ; ++j )
            {
              if ( j >= v13 )
                goto LABEL_29;
              v14 = 3 * j;
              v15 = *(_DWORD *)(dword_A1734[a4] + 20);
              v9 = *(unsigned __int8 *)(v14 + v15);
              v16 = *(_WORD *)(v14 + v15 + 1);
              v30 = v16;
              if ( v9 == 41 )
                goto LABEL_10;
              if ( v9 == 53 )
                break;
              if ( v9 == 43 && !sub_6E976(v16, a2) || v9 == 44 && !sub_6E976(v30, a1) )
                goto LABEL_29;
              word_A1834[2 * (__int16)v31] = v9;
              word_A1836[2 * (__int16)v31++] = v30;
            }
            v19 = 1;
            qmemcpy((char *)&unk_A1D34 + 124 * (__int16)v29, &unk_A0E84, 0x7Cu);
            sub_6E9A4(a2, 0x2Eu, v29);
            sub_6E9A4(a1, 0x2Fu, v29);
            for ( k = 0; k < (__int16)v31; ++k )
              sub_6E9A4(word_A1836[2 * k], word_A1834[2 * k], v29);
            v18 = 16 * v30;
            sub_6E9A4(*(_DWORD *)(v18 + *(_DWORD *)(dword_A1734[a4] + 24)), 0, v29);
            sub_6E9A4(*(_DWORD *)(v18 + *(_DWORD *)(dword_A1734[a4] + 24) + 4), 1u, v29);
            sub_6E9A4(*(_DWORD *)(v18 + *(_DWORD *)(dword_A1734[a4] + 24) + 8), 2u, v29);
            sub_6E9A4(*(_DWORD *)(v18 + *(_DWORD *)(dword_A1734[a4] + 24) + 12), 3u, v29);
            if ( dword_A1728 )
              dword_A1728((unsigned __int16)v29 | 0x8000);
            if ( (_WORD)++v29 != 4 )
            {
              v31 = v24;
LABEL_29:
              ++v28;
              continue;
            }
            return v29;
          }
          break;
        }
        v31 = v22;
      }
    }
  }
  return v29;
}
// A1728: using guessed type int (__stdcall *dword_A1728)(_DWORD);
// A1734: using guessed type int dword_A1734[64];
// A1834: using guessed type __int16 word_A1834[];
// A1836: using guessed type __int16 word_A1836[63];

//----- (0006ED47) --------------------------------------------------------
int __stdcall sub_6ED47(unsigned __int16 a1)
{
  int i; // edx

  for ( i = 0; (__int16)i < 128; ++i )
  {
    if ( a1 > (unsigned __int16)word_A0F00[(__int16)i] )
      return i;
  }
  return 127;
}
// A0F00: using guessed type __int16 word_A0F00[128];

//----- (0006ED75) --------------------------------------------------------
int __stdcall sub_6ED75(__int16 a1)
{
  __int16 v1; // si
  int v2; // ebx

  v1 = a1;
  v2 = 0;
  if ( a1 < 0 )
  {
    while ( v1 < 0 )
    {
      --v2;
      v1 += 1200;
    }
  }
  else
  {
    v2 = a1 / 1200;
  }
  if ( (__int16)v2 > 1 )
    v2 = 1;
  return ((v2 + 14) << 12) | (((v1 % 1200) << 12) / 1200);
}

//----- (0006EDD0) --------------------------------------------------------
int sub_6EDD0(int a1, int a2, int a3, int a4, unsigned __int16 a5, int a6, int a7)
{
  __int16 *v7; // edi
  __int16 i; // si
  __int16 v10; // eax^2
  char v11; // al
  int v12; // eax
  int v13; // edx
  char *v14; // esi
  unsigned int v15; // eax
  __int16 v16; // ax
  int v17; // et2
  int v18; // eax
  int v19; // eax
  int v20; // ebx
  int v21; // edx
  int v22; // eax
  unsigned __int16 v23; // cx
  __int64 v24; // rax
  int v25; // ebx
  int v26; // eax
  __int16 v27; // ax
  unsigned __int16 v28; // ax
  _BYTE v29[4]; // [esp+4h] [ebp-3Ch]
  int v30; // [esp+8h] [ebp-38h]
  int v31; // [esp+Ch] [ebp-34h]
  int v32; // [esp+10h] [ebp-30h]
  int v33; // [esp+14h] [ebp-2Ch]
  int v34; // [esp+18h] [ebp-28h]
  int v35; // [esp+1Ch] [ebp-24h]
  int v36; // [esp+20h] [ebp-20h]
  int v37; // [esp+24h] [ebp-1Ch]
  int v38; // [esp+28h] [ebp-18h]
  int v39; // [esp+2Ch] [ebp-14h]
  int v40; // [esp+30h] [ebp-10h]
  int v41; // [esp+34h] [ebp-Ch]
  int v42; // [esp+38h] [ebp-8h]
  int v43; // [esp+3Ch] [ebp-4h]

  //fix
  v10 = 0;
  v11 = 0;
  //fix

  v7 = &word_A1B34[15 * (a7 & 0xF)];
  v36 = sub_6EA0F(a5, a6, *v7, v7[8]);
  if ( !(_WORD)v36 )
    return 1;
  for ( i = 0; i < (__int16)v36; ++i )
  {
    sub_6E822(0, 254, 255);
    HIWORD(a2) = v10;
    v29[i] = v11;
  }
  v38 = 0;
  v35 = a7 << 8;
  HIWORD(v12) = HIWORD(a7);
  LOWORD(v12) = a7 & 0xF;
  v37 = v12;
  while ( (__int16)v38 < (__int16)v36 )
  {
    LOWORD(a2) = (unsigned __int8)v29[(__int16)v38];
    v41 = a2;
    v13 = 20 * (unsigned __int16)a2;
    v33 = (int)word_A18B4 + v13;
    v14 = (char *)&unk_A1D34 + 124 * (__int16)v38;
    v15 = sub_6E65B(0xE000u, v41 | 0x800);
    if ( (_WORD)v37 == 9 )
    {
      if ( *((_WORD *)v14 + 30) == 127 )
        *((_WORD *)v14 + 29) = -18433;
      if ( *((_WORD *)v14 + 38) == 127 )
        *((_WORD *)v14 + 37) = -18433;
    }
    else if ( *((__int16 *)v14 + 38) < 125 )
    {
      v16 = *((_WORD *)v14 + 51);
      if ( (unsigned __int16)v16 < 0x46u )
        v16 = 70;
      v17 = (*((__int16 *)v14 + 12) * v16 + 64) % 127;
      v15 = (*((__int16 *)v14 + 12) * v16 + 64) / 127;
      HIWORD(v13) = HIWORD(v17);
      *((_WORD *)v14 + 12) = v15;
    }
    LOWORD(v15) = *((_WORD *)v14 + 55) + *((_WORD *)v14 + 50);
    v18 = 100 * v15;
    LOWORD(v13) = *((_WORD *)v14 + 56);
    v39 = v18 + v13;
    LOWORD(v18) = *((_WORD *)v14 + 59);
    v39 -= v18;
    if ( *((_WORD *)v14 + 60) == 1 )
    {
      HIWORD(v19) = HIWORD(v39);
      LOWORD(v19) = (__int16)v39 / 2;
      v39 = v19;
    }
    v31 = *((unsigned __int16 *)v14 + 40);
    if ( (_WORD)v37 != 9 )
    {
      *((_WORD *)v14 + 39) -= *((_WORD *)v14 + 43) * (*((_WORD *)v14 + 50) - 60);
      if ( *((__int16 *)v14 + 39) < 0 )
        *((_WORD *)v14 + 39) = 0;
      v31 -= *((__int16 *)v14 + 44) * (*((__int16 *)v14 + 50) - 60);
      if ( v31 < 0 )
        v31 = 0;
      if ( v31 > 0xFFFF )
        v31 = 0xFFFF;
    }
    *((_WORD *)v14 + 39) = 127 - *((__int16 *)v14 + 39) / 92;
    *((_WORD *)v14 + 40) = sub_6ED47(v31);
    v34 = *(_DWORD *)v14 - 46;
    if ( (v14[116] & 1) != 0 )
    {
      v32 = *((_DWORD *)v14 + 2);
      v30 = *((_DWORD *)v14 + 3) + 1;
      if ( *((_DWORD *)v14 + 1) - *((_DWORD *)v14 + 3) >= 10 )
      {
        *(_DWORD *)(v33 + 16) = *((_DWORD *)v14 + 1) + 1;
        goto LABEL_30;
      }
    }
    else
    {
      v32 = *((_DWORD *)v14 + 3) + 6;
      v30 = *((_DWORD *)v14 + 3) + 10;
    }
    *(_DWORD *)(v33 + 16) = 0;
LABEL_30:
    v20 = sub_6ED75(*((_WORD *)v14 + 8) + v39);
    v42 = v20;
    *(_WORD *)(v33 + 12) = v20;
    v21 = v33;
    *(_BYTE *)(v33 + 2) = *((_BYTE *)v7 + 18);
    *(_BYTE *)(v21 + 3) = *(_BYTE *)v7;
    *(_WORD *)(v21 + 6) = *((_WORD *)v14 + 52);
    *(_WORD *)(v21 + 4) = *((_WORD *)v14 + 51);
    *(_WORD *)(v21 + 14) = *((_WORD *)v14 + 9);
    *(_WORD *)(v21 + 8) = *((_WORD *)v14 + 42);
    *(_WORD *)(v21 + 10) = *((_WORD *)v14 + 34);
    if ( v7[7] )
    {
      v22 = v7[7] + (unsigned __int16)v20;
      if ( v22 <= 0xFFFF )
      {
        LOWORD(v22) = v7[7];
        v42 = v20 + v22;
      }
      else
      {
        v42 = 0xFFFF;
      }
    }
    v23 = (unsigned __int8)byte_A1000[(unsigned __int8)v14[102]];
    v43 = (unsigned __int8)byte_A1080[*((unsigned __int8 *)v7 + 7)];
    v24 = 3 * (127 - *((__int16 *)v14 + 52));
    v25 = (int)(v24 - (__CFSHL__(HIDWORD(v24), 3) + 8 * HIDWORD(v24))) >> 3;
    v40 = 8 * (unsigned __int16)(v25 + v23 + v43) / 3;
    if ( (unsigned __int16)v40 < 0xFFu && v23 < 0x32u && (unsigned __int16)v25 < 0x2Fu )
    {
      v43 = (unsigned __int8)byte_A1100[*((unsigned __int8 *)v7 + 6)];
      v40 = (unsigned __int16)v40 + (unsigned __int16)v43 * (255 - (unsigned __int16)v40) / 127;
    }
    else
    {
      v40 = 255;
    }
    sub_6E65B(0x80u, v41 | 0x5400);
    sub_6E727(0xFFFFu, v41 | 0x3000);
    sub_6E65B(*((_WORD *)v14 + 37), v41 | 0x4400);
    sub_6E65B((*((_WORD *)v14 + 38) | (*((_WORD *)v14 + 39) << 8)) & 0x7F7F, v41 | 0x4600);
    sub_6E65B(*((_WORD *)v14 + 29), v41 | 0x6400);
    sub_6E65B(*((_WORD *)v14 + 30) | (*((_WORD *)v14 + 31) << 8), v41 | 0x6600);
    sub_6E65B(*((_WORD *)v14 + 32) | (*((_WORD *)v14 + 33) << 8), v41 | 0x7400);
    sub_6E65B(v42, v41 | 0x800);
    sub_6E65B(v40 | (*((_WORD *)v14 + 12) << 8), v41 | 0x1800);
    sub_6E65B(*((_WORD *)v14 + 25), v41 | 0x5600);
    sub_6E65B(*((_WORD *)v14 + 27), v41 | 0x7600);
    sub_6E65B(*((_WORD *)v14 + 15) | (*((_WORD *)v14 + 11) << 8), v41 | 0x2800);
    v31 = v7[5] + v7[4] + *((__int16 *)v14 + 9);
    if ( v31 > 127 )
      v31 = 127;
    sub_6E65B(*((_WORD *)v14 + 14) | ((_WORD)v31 << 8), v41 | 0x3800);
    sub_6E65B(*((_WORD *)v14 + 26) | (*((_WORD *)v14 + 17) << 8), v41 | 0x4800);
    sub_6E65B(*((_WORD *)v14 + 28) | (*((_WORD *)v14 + 10) << 8), v41 | 0x5800);
    v26 = sub_6E7A0(v41 | 0x1000);
    BYTE1(v26) = 0;
    v31 = v26;
    v27 = *((_WORD *)v14 + 20) + *((unsigned __int8 *)v7 + 3);
    if ( (unsigned __int16)v27 > 0xFFu )
      v27 = 255;
    sub_6E727(v31 | (v27 << 8), v41 | 0x1000);
    v31 = *((unsigned __int8 *)v7 + 5) + 255 - 2 * *((__int16 *)v14 + 21) - 129;
    if ( v31 > 255 )
      v31 = 255;
    if ( v31 < 0 )
      v31 = 0;
    v32 |= v31 << 24;
    sub_6E727(v32, v41 | 0x6000);
    v28 = *((_WORD *)v14 + 19) + *((unsigned __int8 *)v7 + 4);
    if ( v28 > 0xFFu )
      v28 = 255;
    v30 |= v28 << 24;
    sub_6E727(v30, v41 | 0x7000);
    v34 |= *((__int16 *)v14 + 13) << 28;
    sub_6E727(v34, v41 | 0x400);
    sub_6E65B(*((_WORD *)v14 + 40) | (*((_WORD *)v14 + 41) << 8), v41 | 0x5400);
    HIWORD(a2) = HIWORD(a6) | HIWORD(v35);
    *(_WORD *)v33 = a6 | v35;
    ++v38;
  }
  return 0;
}
// 6EE29: variable 'v10' is possibly undefined
// 6EE2E: variable 'v11' is possibly undefined
// A18B4: using guessed type __int16 word_A18B4[];
// A1B34: using guessed type __int16 word_A1B34[];

//----- (0006F3B3) --------------------------------------------------------
void __stdcall sub_6F3B3(int a1, __int16 a2, unsigned __int16 a3)
{
  unsigned __int16 i; // di
  unsigned __int16 v4; // ax
  unsigned __int16 v5; // ax
  unsigned __int16 v6; // ax

  for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
  {
    if ( (int)(unsigned __int16)word_A18B4[10 * i] >> 8 != 255 )
    {
      v4 = word_A18B4[10 * i];
      HIBYTE(v4) &= 0xFu;
      if ( v4 == (unsigned __int16)((a3 << 8) | a2) )
      {
        if ( byte_A1B36[30 * a3] )
        {
          LOBYTE(word_A18B4[10 * i]) = -1;
        }
        else
        {
          word_A18B4[10 * i] = -1;
          v5 = word_A18BC[10 * i];
          HIBYTE(v5) |= 0x80u;
          sub_6E65B(v5, i | 0x5400);
          v6 = word_A18BE[10 * i];
          HIBYTE(v6) |= 0x80u;
          sub_6E65B(v6, i | 0x7400);
          if ( dword_A18C4[5 * i] )
          {
            sub_6E7A0(i | 0x7000);
            sub_6E727(LOWORD(dword_A18C4[5 * i]) + 4, i | 0x7000);
            sub_6E7A0(i | 0x6000);
            sub_6E727(dword_A18C4[5 * i], i | 0x6000);
          }
        }
      }
    }
  }
  JUMPOUT(0x6F3AB);
}
// 6F4C6: control flows out of bounds to 6F3AB
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];
// A18BC: using guessed type __int16 word_A18BC[];
// A18BE: using guessed type __int16 word_A18BE[];
// A18C4: using guessed type int dword_A18C4[156];

//----- (0006F4CB) --------------------------------------------------------
void sub_6F4CB(
        int a1,
        int a2,
        int a3,
        int a4,
        unsigned __int16 a5,
        unsigned __int16 a6,
        unsigned __int16 a7)
{
  if ( a5 )
    sub_6EDD0(a5, a2, a3, a4, a5, a6, a7);
  else
    sub_6F3B3(0, a6, a7);
}

//----- (0006F502) --------------------------------------------------------
void __stdcall sub_6F502(__int16 a1, unsigned __int16 a2)
{
  if ( word_A1B48[15 * a2] == -1 )
    word_A1B46[15 * a2] = a1;
  word_A1B48[15 * a2] = a1;
  JUMPOUT(0x6F84A);
}
// 6F531: control flows out of bounds to 6F84A
// A1B46: using guessed type __int16 word_A1B46[];
// A1B48: using guessed type __int16 word_A1B48[];

//----- (0006F536) --------------------------------------------------------
void __stdcall sub_6F536(__int16 a1, unsigned __int16 a2)
{
  byte_A1B37[30 * a2] = 2 * ((unsigned __int16)(45 * a1) / 0x64u);
  JUMPOUT(0x6F84A);
}
// 6F55A: control flows out of bounds to 6F84A

//----- (0006F55F) --------------------------------------------------------
void __stdcall sub_6F55F(__int16 a1, unsigned __int16 a2)
{
  byte_A1B38[30 * a2] = 2 * ((unsigned __int16)(45 * a1) / 0x64u);
  JUMPOUT(0x6F84A);
}
// 6F583: control flows out of bounds to 6F84A

//----- (0006F588) --------------------------------------------------------
void __stdcall sub_6F588(char a1, unsigned __int16 a2)
{
  byte_A1B39[30 * a2] = -1 - 2 * a1 - 1;
  JUMPOUT(0x6F84A);
}
// 6F5A3: control flows out of bounds to 6F84A

//----- (0006F5A8) --------------------------------------------------------
int __stdcall sub_6F5A8(unsigned __int8 a1, unsigned __int16 a2)
{
  unsigned __int16 i; // di
  __int64 v3; // rax
  int v4; // ecx
  int v5; // esi
  __int16 v6; // si
  int v7; // eax
  unsigned __int16 v9; // [esp+4h] [ebp-4h]

  byte_A1B3B[30 * a2] = a1;
  for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
  {
    if ( (int)(unsigned __int16)word_A18B4[10 * i] >> 8 == a2 )
    {
      v9 = (unsigned __int8)byte_A1000[(unsigned __int8)byte_A18B8[20 * i]];
      v3 = 3 * (127 - (unsigned __int16)word_A18BA[10 * i]);
      v4 = (int)(v3 - (__CFSHL__(HIDWORD(v3), 3) + 8 * HIDWORD(v3))) >> 3;
      v5 = 8 * (unsigned __int16)(v4 + v9 + (unsigned __int8)byte_A1080[a1]) / 3;
      if ( (unsigned __int16)v5 < 0xFFu && v9 < 0x32u && (unsigned __int16)v4 < 0x2Fu )
        v6 = v5 + (255 - (unsigned __int16)v5) * (unsigned __int8)byte_A1100[(unsigned __int8)byte_A1B3A[30 * a2]] / 127;
      else
        v6 = 255;
      v7 = sub_6E6BF(i | 0x1800);
      LOBYTE(v7) = 0;
      sub_6E65B(v7 | v6, i | 0x1800);
    }
  }
  return 0;
}
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];
// A18BA: using guessed type __int16 word_A18BA[];

//----- (0006F6AF) --------------------------------------------------------
int __stdcall sub_6F6AF(char a1, unsigned __int16 a2)
{
  int v2; // eax

  v2 = 30 * a2;
  byte_A1B3A[v2] = a1;
  return sub_6F5A8(byte_A1B3B[v2], a2);
}

//----- (0006F6D8) --------------------------------------------------------
int __stdcall sub_6F6D8(unsigned __int16 a1, unsigned __int16 a2)
{
  unsigned __int16 i; // si
  unsigned __int16 v3; // bx
  unsigned __int16 v4; // ax

  if ( a1 >= 0x40u )
  {
    byte_A1B36[30 * a2] = 1;
  }
  else
  {
    byte_A1B36[30 * (a2 & 0xF)] = 0;
    for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
    {
      v3 = word_A18B4[10 * i];
      if ( (unsigned __int8)v3 == 255 && (int)v3 >> 8 != 255 && (HIBYTE(v3) & 0xF) == a2 )
      {
        word_A18B4[10 * i] = -1;
        v4 = word_A18BC[10 * i];
        HIBYTE(v4) |= 0x80u;
        sub_6E65B(v4, i | 0x5400);
      }
    }
  }
  return 0;
}
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];
// A18BC: using guessed type __int16 word_A18BC[];

//----- (0006F77A) --------------------------------------------------------
void __stdcall sub_6F77A(unsigned __int16 a1, unsigned __int16 a2)
{
  int v2; // edx
  __int16 v3; // si
  unsigned __int8 v4; // al
  unsigned __int16 i; // [esp+0h] [ebp-4h]
  __int16 v6; // [esp+14h] [ebp+10h]

  v6 = a1 / 0x1Eu;
  word_A1B3C[15 * a2] = v6;
  for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
  {
    v2 = (int)(unsigned __int16)word_A18B4[10 * i] >> 8;
    if ( (_WORD)v2 != 255 && (v2 & 0xF) == a2 )
    {
      v3 = word_A18C2[10 * i] + word_A1B3E[15 * a2] + v6;
      if ( v3 > 127 )
        v3 = 127;
      v4 = sub_6E6BF(i | 0x3800);
      sub_6E65B(v4 | (unsigned __int16)(v3 << 8), i | 0x3800);
    }
  }
  JUMPOUT(0x6F6A7);
}
// 6F81F: control flows out of bounds to 6F6A7
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];
// A18C2: using guessed type __int16 word_A18C2[];
// A1B3C: using guessed type __int16 word_A1B3C[];
// A1B3E: using guessed type __int16 word_A1B3E[];

//----- (0006F824) --------------------------------------------------------
int __stdcall sub_6F824(unsigned __int8 a1, unsigned __int16 a2)
{
  int v2; // eax

  v2 = 15 * a2;
  word_A1B4A[v2] = 256;
  LOBYTE(word_A1B4C[v2]) = 0;
  word_A1B4C[v2] |= a1;
  return 0;
}
// A1B4A: using guessed type __int16 word_A1B4A[];
// A1B4C: using guessed type __int16 word_A1B4C[];

//----- (0006F850) --------------------------------------------------------
void __stdcall sub_6F850(int a1, unsigned __int16 a2)
{
  int v2; // eax

  v2 = 15 * a2;
  word_A1B4A[v2] = 256;
  HIBYTE(word_A1B4C[v2]) = 0;
  JUMPOUT(0x6F843);
}
// 6F870: control flows out of bounds to 6F843
// A1B4A: using guessed type __int16 word_A1B4A[];
// A1B4C: using guessed type __int16 word_A1B4C[];

//----- (0006F872) --------------------------------------------------------
int __stdcall sub_6F872(__int16 a1, unsigned __int16 a2)
{
  __int16 v2; // bx

  v2 = word_A1B4A[15 * a2];
  if ( (unsigned __int16)v2 >= 0x100u )
  {
    if ( (unsigned __int16)v2 <= 0x100u )
    {
      if ( !word_A1B4C[15 * a2] )
      {
        HIBYTE(word_A1B40[15 * a2]) = 0;
        word_A1B40[15 * a2] |= a1 << 8;
        return 0;
      }
    }
    else if ( v2 == 512 && dword_A1728 )
    {
      HIBYTE(word_A1B50[15 * a2]) = 0;
      LOBYTE(word_A1B50[15 * a2]) &= ~0x80u;
      word_A1B50[15 * a2] |= a1 << 7;
      return dword_A1728(a2);
    }
  }
  return 1;
}
// A1728: using guessed type int (__stdcall *dword_A1728)(_DWORD);
// A1B40: using guessed type __int16 word_A1B40[];
// A1B4A: using guessed type __int16 word_A1B4A[];
// A1B4C: using guessed type __int16 word_A1B4C[];
// A1B50: using guessed type __int16 word_A1B50[];

//----- (0006F8F1) --------------------------------------------------------
int __stdcall sub_6F8F1(__int16 a1, unsigned __int16 a2)
{
  __int16 v2; // bx

  v2 = word_A1B4A[15 * a2];
  if ( (unsigned __int16)v2 >= 0x100u )
  {
    if ( (unsigned __int16)v2 <= 0x100u )
    {
      if ( !word_A1B4C[15 * a2] )
      {
        LOBYTE(word_A1B40[15 * a2]) = 0;
        word_A1B40[15 * a2] |= a1;
        return 0;
      }
    }
    else if ( v2 == 512 && dword_A1728 )
    {
      LOBYTE(word_A1B50[15 * a2]) &= 0x80u;
      word_A1B50[15 * a2] |= a1;
      return dword_A1728(a2);
    }
  }
  return 1;
}
// A1728: using guessed type int (__stdcall *dword_A1728)(_DWORD);
// A1B40: using guessed type __int16 word_A1B40[];
// A1B4A: using guessed type __int16 word_A1B4A[];
// A1B4C: using guessed type __int16 word_A1B4C[];
// A1B50: using guessed type __int16 word_A1B50[];

//----- (0006F963) --------------------------------------------------------
void __stdcall sub_6F963(int a1, __int16 a2)
{
  int v2; // edx
  int v3; // eax
  int savedregs; // [esp+0h] [ebp+0h]

  //fix
  savedregs = 0;
  //fix

  v2 = a2 & 0xF;
  v3 = 15 * v2;
  byte_A1B37[v3 * 2] = 0;
  byte_A1B38[v3 * 2] = 0;
  byte_A1B39[v3 * 2] = 0x80;
  byte_A1B3A[v3 * 2] = 127;
  byte_A1B3B[v3 * 2] = 100;
  word_A1B3C[v3] = 0;
  byte_A1B36[v3 * 2] = 0;
  word_A1B42[v3] = 0;
  word_A1B40[v3] = 512;
  word_A1B4C[v3] = -1;
  word_A1B4E[v3] = -1;
  word_A1B46[v3] = 0;
  word_A1B48[v3] = -1;
  if ( dword_A1730 )
    dword_A1730(0, v2, savedregs);
  JUMPOUT(0x6F84A);
}
// 6F9F4: control flows out of bounds to 6F84A
// 6F9EE: variable 'savedregs' is possibly undefined
// A1730: using guessed type int (__stdcall *dword_A1730)(_DWORD, _DWORD, _DWORD);
// A1B3C: using guessed type __int16 word_A1B3C[];
// A1B40: using guessed type __int16 word_A1B40[];
// A1B42: using guessed type __int16 word_A1B42[];
// A1B46: using guessed type __int16 word_A1B46[];
// A1B48: using guessed type __int16 word_A1B48[];
// A1B4C: using guessed type __int16 word_A1B4C[];
// A1B4E: using guessed type __int16 word_A1B4E[];

//----- (0006F9F9) --------------------------------------------------------
void __stdcall sub_6F9F9(int a1, __int16 a2)
{
  unsigned __int16 i; // si
  int v3; // edx

  for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
  {
    v3 = (int)(unsigned __int16)word_A18B4[10 * i] >> 8;
    if ( (_WORD)v3 != 255 && (v3 & 0xF) == a2 )
    {
      word_A18B4[10 * i] = -1;
      sub_6E65B(0x807Fu, i | 0x5400);
    }
  }
  JUMPOUT(0x6F773);
}
// 6FA4E: control flows out of bounds to 6F773
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];

//----- (0006FA53) --------------------------------------------------------
int __stdcall sub_6FA53(unsigned __int16 a1, unsigned __int16 a2, unsigned __int16 a3)
{
  int savedregs; // [esp+0h] [ebp+0h]

  //fix
  savedregs = 0;
  //fix

  if ( a2 < 0x40u )
  {
    if ( a2 < 7u )
    {
      if ( a2 )
      {
        if ( a2 <= 1u )
        {
          sub_6F77A(a1, a3);
        }
        else
        {
          if ( a2 != 6 )
            return 1;
          sub_6F872(a1, a3);
        }
      }
      else
      {
        sub_6F502(a1, a3);
      }
    }
    else if ( a2 <= 7u )
    {
      sub_6F5A8(a1, a3);
    }
    else if ( a2 < 0xBu )
    {
      if ( a2 != 10 )
        return 1;
      sub_6F588(a1, a3);
    }
    else if ( a2 <= 0xBu )
    {
      sub_6F6AF(a1, a3);
    }
    else
    {
      if ( a2 != 38 )
        return 1;
      sub_6F8F1(a1, a3);
    }
    return 0;
  }
  if ( a2 <= 0x40u )
  {
    sub_6F6D8(a1, a3);
    return 0;
  }
  if ( a2 < 0x63u )
  {
    if ( a2 < 0x5Du )
    {
      if ( a2 != 91 )
        return 1;
      sub_6F536(a1, a3);
    }
    else
    {
      if ( a2 > 0x5Du )
      {
        if ( a2 == 98 && dword_A172C )
          return dword_A172C(a1, a3);
        return 1;
      }
      sub_6F55F(a1, a3);
    }
    return 0;
  }
  if ( a2 > 0x63u )
  {
    if ( a2 < 0x65u )
    {
      sub_6F824(a1, a3);
      return 0;
    }
    if ( a2 <= 0x65u )
    {
      sub_6F850(a1, a3);
      return 0;
    }
    if ( a2 >= 0x79u )
    {
      if ( a2 <= 0x79u )
      {
        sub_6F963(a1, a3);
      }
      else
      {
        if ( a2 != 123 )
          return 1;
        sub_6F9F9(a1, a3);
      }
      return 0;
    }
    return 1;
  }
  if ( !dword_A1730 )
    return 1;
  return dword_A1730(a1, a3, savedregs);
}
// 6FC3A: variable 'savedregs' is possibly undefined
// A172C: using guessed type int (__stdcall *dword_A172C)(_DWORD, _DWORD);
// A1730: using guessed type int (__stdcall *dword_A1730)(_DWORD, _DWORD, _DWORD);

//----- (0006FC44) --------------------------------------------------------
void __stdcall sub_6FC44(unsigned __int16 a1, __int16 a2)
{
  __int16 v2; // cx
  int v3; // eax
  unsigned __int16 i; // dx
  unsigned __int16 j; // si
  int v6; // ebx
  unsigned __int8 *v7; // eax
  _BOOL1 k; // zf
  unsigned __int16 m; // dx
  unsigned __int16 n; // si
  int v11; // eax
  unsigned __int8 *v12; // eax
  __int16 v13; // [esp+0h] [ebp-8h]
  unsigned __int16 v14; // [esp+4h] [ebp-4h]
  unsigned __int16 v15; // [esp+1Ch] [ebp+14h]

  v2 = 1;
  v15 = a2 & 0xF;
  if ( word_A1B48[15 * v15] != -1 )
    word_A1B46[15 * v15] = word_A1B48[15 * v15];
  v3 = 15 * v15;
  word_A1B44[v3] = 0;
  word_A1B34[v3] = 0;
  if ( v15 == 9 )
  {
    v14 = 0;
    for ( i = 0; i < 0x40u; ++i )
    {
      if ( dword_A1734[i] )
      {
        for ( j = 0; ; ++j )
        {
          v7 = (unsigned __int8 *)(4 * j + *(_DWORD *)dword_A1734[i]);
          if ( v7[1] == 0xFF )
            break;
          if ( v7[1] == 0x80 )
          {
            v6 = *v7;
            if ( v6 <= a1 && v6 >= v14 )
            {
              v2 = 0;
              v14 = *v7;
              word_A1B44[135] = i;
              word_A1B34[135] = j;
            }
          }
        }
      }
    }
    for ( k = v2 == 0; ; k = v13 == 0 )
    {
      if ( k )
        goto LABEL_29;
      v13 = 0;
LABEL_17:
      for ( m = 0; m < 0x40u; ++m )
      {
        if ( dword_A1734[m] )
        {
          for ( n = 0; ; ++n )
          {
            v12 = (unsigned __int8 *)(4 * n + *(_DWORD *)dword_A1734[m]);
            if ( v12[1] == 0xFF )
              goto LABEL_26;
            if ( v12[1] == v13 && *v12 == a1 )
              break;
          }
          v11 = 15 * v15;
          word_A1B44[v11] = m;
          word_A1B34[v11] = n;
LABEL_29:
          JUMPOUT(0x6F6A9);
        }
LABEL_26:
        ;
      }
    }
  }
  v13 = word_A1B46[15 * v15];
  goto LABEL_17;
}
// 6FD9F: control flows out of bounds to 6F6A9
// A1734: using guessed type int dword_A1734[64];
// A1B34: using guessed type __int16 word_A1B34[];
// A1B44: using guessed type __int16 word_A1B44[];
// A1B46: using guessed type __int16 word_A1B46[];
// A1B48: using guessed type __int16 word_A1B48[];

//----- (0006FDA4) --------------------------------------------------------
void __stdcall sub_6FDA4(int a1, int a2, int a3)
{
  JUMPOUT(0x6FB75);
}
// 6FDA7: control flows out of bounds to 6FB75

//----- (0006FDAC) --------------------------------------------------------
void __stdcall sub_6FDAC(unsigned __int16 a1, __int16 a2)
{
  int v2; // eax
  unsigned __int16 v3; // [esp+Ch] [ebp+Ch]

  v3 = a2 & 0xF;
  v2 = 15 * v3;
  word_A1B3E[v2] = a1 / 0x1Eu;
  sub_6F77A(30 * word_A1B3C[v2], v3);
}
// A1B3C: using guessed type __int16 word_A1B3C[];
// A1B3E: using guessed type __int16 word_A1B3E[];

//----- (0006FDEC) --------------------------------------------------------
int __stdcall sub_6FDEC(unsigned __int8 a1, unsigned __int8 a2, __int16 a3)
{
  unsigned __int8 v3; // al
  __int64 v4; // rax
  int v5; // edi
  unsigned __int16 i; // si
  int v7; // edx
  int v8; // eax

  v3 = HIBYTE(word_A1B40[15 * (a3 & 0xF)]);
  if ( !v3 )
    v3 = 2;
  v4 = (__int16)(a2 + (a1 << 7) - 0x2000) * (__int16)(341 * v3);
  v5 = (int)(v4 - (__CFSHL__(HIDWORD(v4), 13) + (HIDWORD(v4) << 13))) >> 13;
  word_A1B42[15 * (a3 & 0xF)] = v5;
  for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
  {
    v7 = (int)(unsigned __int16)word_A18B4[10 * i] >> 8;
    if ( (_WORD)v7 != 255 && (v7 & 0xF) == a3 )
    {
      v8 = (__int16)v5 + (unsigned __int16)word_A18C0[10 * i];
      if ( v8 >= 0xFFFF )
        LOWORD(v8) = -1;
      sub_6E65B(v8, i | 0x800);
    }
  }
  return 0;
}
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];
// A18C0: using guessed type __int16 word_A18C0[];
// A1B40: using guessed type __int16 word_A1B40[];
// A1B42: using guessed type __int16 word_A1B42[];

//----- (0006FEBF) --------------------------------------------------------
int __stdcall sub_6FEBF(unsigned __int16 a1)
{
  int v2; // esi

  if ( a1 >= 8u )
    return 1;
  v2 = 7 * a1;
  sub_6E65B(word_A1180[v2], 0x3409u);
  sub_6E65B(word_A1182[v2], 0x340Cu);
  sub_6E65B(word_A1184[v2], 0x3603u);
  sub_6E727(*(int *)((char *)&dword_A1186 + v2 * 2), 0x1409u);
  sub_6E727(*(int *)((char *)&dword_A118A + v2 * 2), 0x140Au);
  sub_6E727(0x8000u, 0x140Du);
  sub_6E727(0, 0x140Eu);
  return 0;
}
// A1180: using guessed type __int16 word_A1180[];
// A1182: using guessed type __int16 word_A1182[];
// A1184: using guessed type __int16 word_A1184[];
// A1186: using guessed type int dword_A1186;
// A118A: using guessed type int dword_A118A;

//----- (0006FF53) --------------------------------------------------------
int __stdcall sub_6FF53(unsigned __int16 a1)
{
  __int16 i; // si
  __int16 v3[4]; // [esp+0h] [ebp-8h]

  if ( a1 >= 8u )
    return 1;
  v3[0] = 9216;
  v3[1] = 9728;
  v3[2] = 13312;
  v3[3] = 13824;
  for ( i = 0; i < 28; ++i )
    sub_6E65B(
      word_A120C[28 * a1 + i],
      v3[(int)(unsigned __int8)byte_A11F0[i] >> 5] | ((unsigned __int8)byte_A11F0[i] % 32));
  return 0;
}
// A120C: using guessed type __int16 word_A120C[224];

//----- (00070044) --------------------------------------------------------
char __stdcall sub_70044(__int16 a1)
{
  __int16 v1; // si
  __int16 v2; // ax

  v1 = word_A160A;
  word_A160A = a1;
  if ( (unsigned __int16)a1 < 0x300u || (LOBYTE(v2) = sub_7008A(), v2) )
  {
    HIBYTE(word_A160A) += 4;
    LOBYTE(v2) = sub_7008A();
    if ( v2 )
    {
      word_A160A = v1;
      LOBYTE(v2) = 1;
    }
  }
  return v2;
}
// 70066: variable 'v2' is possibly undefined
// A160A: using guessed type __int16 word_A160A;

//----- (0007008A) --------------------------------------------------------
_BOOL1 sub_7008A()
{
  return (unsigned __int16)sub_6E6BF(0x7800u) == 0xFFFF
      || (unsigned __int16)sub_6E6BF(0x141Du) == 0xFFFF
      || (unsigned __int16)sub_6E6BF(0x141Eu) == 0xFFFF
      || (unsigned __int16)sub_6E6BF(0x141Fu) == 0xFFFF
      || (sub_6E6BF(0x7800u) & 0xC) != 12
      || (sub_6E6BF(0x141Du) & 0x58) != 88
      || (sub_6E6BF(0x141Eu) & 3) != 3;
}

//----- (00070113) --------------------------------------------------------
unsigned int __stdcall sub_70113(__int16 a1)
{
  unsigned int v1; // esi
  __int16 v2; // di
  unsigned int result; // eax

  v1 = 0;
  v2 = sub_6E6BF(0x161Bu) + a1;
  do
  {
    result = sub_6E6BF(0x161Bu);
    if ( (_WORD)result == v2 )
      break;
    result = v1++;
  }
  while ( result < 0x7FFF );
  return result;
}

//----- (00070148) --------------------------------------------------------
unsigned int sub_70148()
{
  unsigned __int16 i; // si
  unsigned int result; // eax

  for ( i = 0; i < 0x20u; ++i )
  {
    sub_6E65B(0x80u, i | 0x5400);
    sub_6E65B(0, i | 0x6600);
    sub_6E65B(0, i | 0x7400);
    sub_6E65B(0, i | 0x800);
    sub_6E65B(0xFF00u, i | 0x1800);
    sub_6E65B(0, i | 0x2800);
    sub_6E65B(0, i | 0x3800);
    sub_6E65B(0x18u, i | 0x4800);
    sub_6E65B(0x18u, i | 0x5800);
    sub_6E65B(0, i | 0x6800);
    sub_6E65B(0, i | 0x7600);
    sub_6E65B(0, i | 0x5600);
    sub_6E65B(0, i | 0x4600);
    sub_6E65B(0, i | 0x4400);
    result = sub_6E65B(0, i | 0x6400);
  }
  return result;
}

//----- (0007024E) --------------------------------------------------------
void sub_7024E()
{
  unsigned __int16 i; // si

  sub_70113(2);
  for ( i = 0; i < 0x20u; ++i )
  {
    sub_6E727(0, i | 0x1000);
    sub_6E727(0xFFFFu, i | 0x3000);
    sub_6E727(0, i | 0x6000);
    sub_6E727(0, i | 0x7000);
    sub_6E727(0, i);
    sub_6E727(0xFFFFu, i | 0x2000);
    sub_6E727(0, i | 0x400);
    sub_6E727(0, i | 0x5000);
    sub_6E727(0, i | 0x4000);
  }
}

//----- (000702F6) --------------------------------------------------------
unsigned int sub_702F6()
{
  int v0; // esi
  unsigned __int16 i; // di
  unsigned __int16 j; // di
  unsigned __int16 k; // di
  unsigned __int16 m; // di
  int v5; // esi
  unsigned __int16 n; // di
  __int16 v7; // ax
  unsigned __int16 ii; // di
  __int16 v9; // ax
  unsigned __int16 jj; // di
  __int16 v11; // ax
  unsigned __int16 kk; // di
  __int16 v13; // ax
  unsigned __int16 mm; // si
  int v15; // esi
  unsigned __int16 nn; // di
  __int16 v17; // ax
  unsigned __int16 i1; // di
  __int16 v19; // ax
  unsigned __int16 i2; // di
  __int16 v21; // ax
  unsigned __int16 i3; // di
  __int16 v23; // ax
  int v24; // esi
  unsigned __int16 i4; // di
  unsigned __int16 i5; // di
  unsigned __int16 i6; // di
  unsigned __int16 i7; // di
  unsigned int result; // eax
  unsigned __int16 v30; // [esp-8h] [ebp-10h]
  unsigned __int16 v31; // [esp-8h] [ebp-10h]
  unsigned __int16 v32; // [esp-8h] [ebp-10h]
  unsigned __int16 v33; // [esp-8h] [ebp-10h]
  unsigned __int16 v34; // [esp-8h] [ebp-10h]
  unsigned __int16 v35; // [esp-8h] [ebp-10h]
  unsigned __int16 v36; // [esp-8h] [ebp-10h]
  unsigned __int16 v37; // [esp-8h] [ebp-10h]
  unsigned __int16 v38; // [esp-8h] [ebp-10h]
  unsigned __int16 v39; // [esp-8h] [ebp-10h]
  unsigned __int16 v40; // [esp-8h] [ebp-10h]
  unsigned __int16 v41; // [esp-8h] [ebp-10h]
  unsigned __int16 v42; // [esp-8h] [ebp-10h]
  unsigned __int16 v43; // [esp-8h] [ebp-10h]
  unsigned __int16 v44; // [esp-8h] [ebp-10h]
  unsigned __int16 v45; // [esp-8h] [ebp-10h]

  sub_6E65B(0, 0x1414u);
  sub_6E65B(0, 0x1415u);
  sub_6E65B(0, 0x1416u);
  sub_6E65B(0, 0x1415u);
  v0 = 0;
  for ( i = 0; i < 0x20u; ++i )
  {
    v30 = word_A1400[(unsigned __int16)v0++];
    sub_6E65B(v30, i | 0x2400);
  }
  for ( j = 0; j < 0x20u; ++j )
  {
    v31 = word_A1400[(unsigned __int16)v0++];
    sub_6E65B(v31, j | 0x2600);
  }
  for ( k = 0; k < 0x20u; ++k )
  {
    v32 = word_A1400[(unsigned __int16)v0++];
    sub_6E65B(v32, k | 0x3400);
  }
  for ( m = 0; m < 0x20u; ++m )
  {
    v33 = word_A1400[(unsigned __int16)v0++];
    sub_6E65B(v33, m | 0x3600);
  }
  sub_70113(1024);
  v5 = 0;
  for ( n = 0; n < 0x20u; ++n )
  {
    if ( n % 2 )
      v7 = 0x8000;
    else
      v7 = 0;
    v34 = v7 | word_A1400[(unsigned __int16)v5++];
    sub_6E65B(v34, n | 0x2400);
  }
  for ( ii = 0; ii < 0x20u; ++ii )
  {
    if ( ii % 2 )
      v9 = 0x8000;
    else
      v9 = 0;
    v35 = word_A1400[(unsigned __int16)v5++] | v9;
    sub_6E65B(v35, ii | 0x2600);
  }
  for ( jj = 0; jj < 0x20u; ++jj )
  {
    if ( jj % 2 )
      v11 = 0x8000;
    else
      v11 = 0;
    v36 = v11 | word_A1400[(unsigned __int16)v5++];
    sub_6E65B(v36, jj | 0x3400);
  }
  for ( kk = 0; kk < 0x20u; ++kk )
  {
    if ( kk % 2 )
      v13 = 0x8000;
    else
      v13 = 0;
    v37 = v13 | word_A1400[(unsigned __int16)v5++];
    sub_6E65B(v37, kk | 0x3600);
  }
  for ( mm = 0; mm < 0x14u; ++mm )
    sub_6E727(0, mm | 0x1400);
  v15 = 0;
  for ( nn = 0; nn < 0x20u; ++nn )
  {
    if ( nn % 2 )
      v17 = 0x8000;
    else
      v17 = 0;
    v38 = v17 | word_A1500[(unsigned __int16)v15++];
    sub_6E65B(v38, nn | 0x2400);
  }
  for ( i1 = 0; i1 < 0x20u; ++i1 )
  {
    if ( i1 % 2 )
      v19 = 0x8000;
    else
      v19 = 0;
    v39 = v19 | word_A1500[(unsigned __int16)v15++];
    sub_6E65B(v39, i1 | 0x2600);
  }
  for ( i2 = 0; i2 < 0x20u; ++i2 )
  {
    if ( i2 % 2 )
      v21 = 0x8000;
    else
      v21 = 0;
    v40 = word_A1500[(unsigned __int16)v15++] | v21;
    sub_6E65B(v40, i2 | 0x3400);
  }
  for ( i3 = 0; i3 < 0x20u; ++i3 )
  {
    if ( i3 % 2 )
      v23 = 0x8000;
    else
      v23 = 0;
    v41 = word_A1500[(unsigned __int16)v15++] | v23;
    sub_6E65B(v41, i3 | 0x3600);
  }
  sub_6E727(0, 0x1409u);
  sub_6E727(0x83u, 0x140Au);
  sub_6E727(0x8000u, 0x140Du);
  sub_6E727(0, 0x140Eu);
  v24 = 0;
  for ( i4 = 0; i4 < 0x20u; ++i4 )
  {
    v42 = word_A1500[(unsigned __int16)v24++];
    sub_6E65B(v42, i4 | 0x2400);
  }
  for ( i5 = 0; i5 < 0x20u; ++i5 )
  {
    v43 = word_A1500[(unsigned __int16)v24++];
    sub_6E65B(v43, i5 | 0x2600);
  }
  for ( i6 = 0; i6 < 0x20u; ++i6 )
  {
    v44 = word_A1500[(unsigned __int16)v24++];
    sub_6E65B(v44, i6 | 0x3400);
  }
  for ( i7 = 0; i7 < 0x20u; ++i7 )
  {
    v45 = word_A1500[(unsigned __int16)v24++];
    result = sub_6E65B(v45, i7 | 0x3600);
  }
  return result;
}
// A1400: using guessed type __int16 word_A1400[128];
// A1500: using guessed type __int16 word_A1500[128];

//----- (000706CC) --------------------------------------------------------
void sub_706CC()
{
  unsigned __int16 v0; // si
  unsigned int v1; // kr00_4
  unsigned __int16 v2; // ax
  unsigned __int16 v3; // ax

  FixPerifery();

  sub_6E65B(0x80u, 0x541Eu);
  sub_6E727(0xFFE0u, 0x601Eu);
  sub_6E727(0xFFE8u, 0x701Eu);
  sub_6E727(0, 0x101Eu);
  sub_6E727(0, 0x1Eu);
  sub_6E727(0xFFE3u, 0x41Eu);
  sub_6E65B(0x80u, 0x541Fu);
  sub_6E727(0xFFF0u, 0x601Fu);
  sub_6E727(0xFFF8u, 0x701Fu);
  sub_6E727(0xFFu, 0x101Fu);
  sub_6E727(0x8000u, 0x1Fu);
  sub_6E727(0xFFF3u, 0x41Fu);
  v0 = word_A160A + 2050;
  v1 = __readeflags();
  if ( (v1 & 0x200) != 0 )
    _disable();
  __outword(v0, 0x3Eu);
  __outword(word_A160A, 0);
  do
    v2 = __inword(v0);
  while ( (v2 & 0x1000) == 0 );
  do
    v3 = __inword(v0);
  while ( (v3 & 0x1000) != 0 );
  __outword(word_A160A + 2, 0x4828u);
  __outword(v0, 0x3Cu);
  __outword(word_A160A + 1024, 0);
  if ( (v1 & 0x200) != 0 )
    _enable();
  sub_6E727(0xFFFFu, 0x301Eu);
  sub_6E727(0xFFFFu, 0x301Fu);
}
// A160A: using guessed type __int16 word_A160A;

//----- (00070812) --------------------------------------------------------
void sub_70812()
{
  unsigned int v0; // esi
  unsigned __int16 i; // di
  unsigned __int16 j; // si

  v0 = 0x200000;
  sub_6E65B(0x20u, 0x141Eu);
  for ( i = 0; i < 0x1Eu; ++i )
  {
    sub_6E65B(0x80u, i | 0x5400);
    sub_6E727(0, i | 0x3000);
    sub_6E727(0, i | 0x2000);
    sub_6E727(0, i | 0x6000);
    sub_6E727(0, i | 0x7000);
    sub_6E727(0, i | 0x1000);
    sub_6E727(0, i);
    sub_6E727(0, i | 0x400);
  }
  sub_6E727(0, 0x1416u);
  sub_6E65B(0xFFFFu, 0x141Au);
  sub_6E65B(0xAAAAu, 0x141Au);
  sub_6E65B(0x5555u, 0x141Au);
  sub_6E65B(0xDDDDu, 0x141Au);
  sub_70113(2);
  sub_6E727(0, 0x1414u);
  sub_6E6BF(0x141Au);
  if ( (unsigned __int16)sub_6E6BF(0x141Au) == 0xFFFF
    && (unsigned __int16)sub_6E6BF(0x141Au) == 0xAAAA
    && (unsigned __int16)sub_6E6BF(0x141Au) == 21845
    && (unsigned __int16)sub_6E6BF(0x141Au) == 0xDDDD )
  {
    do
    {
      if ( v0 > 0xFF8000 )
        break;
      v0 += 0x8000;
      sub_6E727(v0, 0x1416u);
      sub_6E65B(0x1234u, 0x141Au);
      sub_6E65B(0x1234u, 0x141Au);
      sub_6E65B(0x1234u, 0x141Au);
      sub_6E65B(0x1234u, 0x141Au);
      sub_70113(2);
      sub_6E727(0, 0x1414u);
      sub_6E6BF(0x141Au);
      if ( (unsigned __int16)sub_6E6BF(0x141Au) == 4660 )
        break;
      sub_6E727(v0, 0x1414u);
      sub_6E6BF(0x141Au);
      if ( (unsigned __int16)sub_6E6BF(0x141Au) != 4660 )
        break;
    }
    while ( (unsigned __int16)sub_6E6BF(0x141Au) == 4660
         && (unsigned __int16)sub_6E6BF(0x141Au) == 4660
         && (unsigned __int16)sub_6E6BF(0x141Au) == 4660 );
  }
  dword_A160C = v0 - 0x200000;
  for ( j = 0; j < 0x1Eu; ++j )
    sub_6E727(0, j | 0x400);
}
// A160C: using guessed type int dword_A160C;

//----- (00070AA0) --------------------------------------------------------
int sub_70AA0()
{
  unsigned __int16 i; // dx
  int v1; // eax

  if ( (unsigned __int16)sub_6E6BF(0x7800u) == 12 )
  {
    sub_6E65B(0x59u, 0x141Du);
    sub_6E65B(0x20u, 0x141Eu);
    sub_6E65B(0, 0x141Fu);
    sub_70148();
    sub_7024E();
    sub_702F6();
    if ( (unsigned __int16)word_A1608 <= 0x1Eu )
      sub_706CC();
    sub_70812();
    sub_6E65B(4u, 0x141Fu);
    if ( (sub_6E6BF(0x141Eu) & 0x40) != 0 )
    {
      for ( i = 0; i < (unsigned __int16)word_A1608; ++i )
      {
        v1 = 10 * i;
        word_A18B4[v1] = -1;
        word_A18C2[v1] = 0;
      }
    }
  }
  return 0;
}
// A1608: using guessed type __int16 word_A1608;
// A18B4: using guessed type __int16 word_A18B4[];
// A18C2: using guessed type __int16 word_A18C2[];

//----- (00070B3E) --------------------------------------------------------
int sub_70B3E()
{
  __int16 i; // si

  for ( i = 32; i--; sub_6E65B(0x807Fu, i | 0x5400) )
    ;
  sub_70113(128);
  sub_706CC();
  return 0;
}

//----- (00070B8B) --------------------------------------------------------
char sub_70B8B(unsigned int a1, unsigned __int8 a2)
{
  int v2; // eax
  unsigned int v4; // [esp+4h] [ebp-Ch]
  unsigned int i; // [esp+8h] [ebp-8h]

  if ( a1 < 0x10 )
  {
    dword_A08F0[a1] = a2;
    LOBYTE(v2) = 4 * a1;
    dword_A0954[a1] = 1;
    for ( i = 0; i < 9; ++i )
    {
      LOBYTE(v2) = i;
      if ( byte_A0764[i] )
      {
        v2 = dword_A0808[i];
        if ( v2 == a1 )
        {
          v4 = (0x2000
              - (64 - (byte_A0704[(unsigned __int8)byte_A0776[2 * i]] & 0x3F))
              * ((2
                * (64
                 - (unsigned __int8)byte_A0A24[(int)(unsigned __int8)((dword_A0930[i] * ((a2 << 7) / 0x7Fu)) >> 7) >> 1])) & 0x3FFFFFFu)) >> 7;
          if ( !__readgsbyte(dword_A07A0 + 30 * dword_A07C8[dword_A0808[i]] + 14) )
            sub_6A640(byte_A0775[2 * i] + 64, byte_A0704[(unsigned __int8)byte_A0775[2 * i]] & 0xC0 | v4);
          LOBYTE(v2) = sub_6A640(byte_A0776[2 * i] + 64, byte_A0704[(unsigned __int8)byte_A0776[2 * i]] & 0xC0 | v4);
        }
      }
    }
  }
  return v2;
}
// 70D2E: variable 'v2' is possibly undefined
// A07A0: using guessed type int dword_A07A0;
// A07C8: using guessed type int dword_A07C8[16];
// A0808: using guessed type int dword_A0808[9];
// A08F0: using guessed type int dword_A08F0[16];
// A0930: using guessed type int dword_A0930[9];
// A0954: using guessed type int dword_A0954[16];

//----- (00070D55) --------------------------------------------------------
unsigned __int8 sub_70D55(unsigned __int8 a1)
{
  unsigned int k; // [esp+0h] [ebp-Ch]
  unsigned int i; // [esp+4h] [ebp-8h]
  unsigned int j; // [esp+4h] [ebp-8h]

  for ( i = 0; i < 9; ++i )
  {
    if ( !byte_A0764[i] )
      return i;
  }
  for ( j = 0; j < 0x10; ++j )
  {
    if ( !dword_A086C[j] )
    {
      for ( k = 0; k < 9; ++k )
      {
        if ( dword_A0808[k] == j )
          return k;
      }
    }
  }
  if ( a1 >= 9u )
    a1 -= 9;
  return a1;
}
// A0808: using guessed type int dword_A0808[9];
// A086C: using guessed type int dword_A086C[16];

//----- (00070E1C) --------------------------------------------------------
int sub_70E1C(int a1, int a2, unsigned int a3)
{
  int result; // eax

  result = __readgsbyte(a3 + 1);
  dword_A07C8[result] = __readgsbyte(a3);
  return result * 4;
}
// A07C8: using guessed type int dword_A07C8[];

//----- (00071012) --------------------------------------------------------
char *sub_71012()
{
  void *retaddr; // [esp+0h] [ebp+0h] BYREF

  return (char *)&retaddr - dword_A0CA8;
}
// 71014: returning address of temporary local variable '%" r"'
// A0CA8: using guessed type int dword_A0CA8;

//----- (0007101B) --------------------------------------------------------
void sub_7101B()
{
  dword_A8874 = 0x8000;
}
// A8874: using guessed type int dword_A8874;

//----- (00071524) --------------------------------------------------------
void sub_71524()
{
    //fix word_A636C = __SS__;
}
// A636C: using guessed type __int16 word_A636C;

//----- (00071B53) --------------------------------------------------------
int sub_71B53()
{
  return 0;
}

//----- (00071BC9) --------------------------------------------------------
void sub_71BC9(int a1, const void *a2, void *a3)
{
    FixPerifery();

  if ( byte_A0CC6 == 9 )
  {
    //fix __asm { int     21h; DOS - GET DISK TRANSFER AREA ADDRESS }
    qmemcpy(a3, a2, 0x2Bu);
  }
}
// A0CC6: using guessed type char byte_A0CC6;

//SYNCHRONIZED WITH REMC1
int sub_724C0_729D0(uint16_t inX, uint16_t inY)
{
	uint8_t point1;
	uint8_t point2;
	int finalComp;
	int result;

	uaxis_2d tempAxis;
	uaxis_2d tempInX;
	uaxis_2d tempInY;
	tempInX.word = inX;
	tempInY.word = inY;
	tempAxis._axis_2d.x = tempInX._axis_2d.y;
	tempAxis._axis_2d.y = tempInY._axis_2d.y;

	if ((tempInX._axis_2d.y + tempInY._axis_2d.y) & 1)
	{
        //if ( __CFADD__((_BYTE)inY, (_BYTE)inX) )
		if (tempInY._axis_2d.x > (tempInY._axis_2d.x + tempInX._axis_2d.x) % 256)
		{
			tempAxis._axis_2d.y++;
			point1 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
			tempAxis._axis_2d.x++;
			point2 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
			tempInY._axis_2d.x = 255 - tempInY._axis_2d.x;
			tempAxis._axis_2d.y--;
			finalComp = tempInY._axis_2d.x * (mapHeightmap_DC1E0_DC1D0[tempAxis.word] - point2) + tempInX._axis_2d.x * (point2 - point1);
		}
		else
		{
			point1 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
			tempAxis._axis_2d.x++;
			point2 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
			tempAxis._axis_2d.x--;
			tempAxis._axis_2d.y++;
			finalComp = tempInY._axis_2d.x * (mapHeightmap_DC1E0_DC1D0[tempAxis.word] - point1) + tempInX._axis_2d.x * (point2 - point1);
		}
		return (finalComp >> 3) + 32 * point1;
	}
	else
	{
		if (tempInX._axis_2d.x <= tempInY._axis_2d.x)
		{
			point1 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
			tempAxis._axis_2d.y++;
			point2 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
			tempAxis._axis_2d.x++;
			finalComp = tempInY._axis_2d.x * (point2 - point1) + tempInX._axis_2d.x * (mapHeightmap_DC1E0_DC1D0[tempAxis.word] - point2);
		}
		else
		{
			point1 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
			tempAxis._axis_2d.x++;
			point2 = mapHeightmap_DC1E0_DC1D0[tempAxis.word];
			tempAxis._axis_2d.y++;
			finalComp = tempInY._axis_2d.x * (mapHeightmap_DC1E0_DC1D0[tempAxis.word] - point2) + tempInX._axis_2d.x * (point2 - point1);
		}
		return (finalComp >> 3) + 32 * point1;
	}
}

long counter_725C8 = 0;
//----- (000725C8) --------------------------------------------------------
void sub_725C8(__int16 a1, unsigned __int16 a2, __int16 a3)//2435C8_
{
  int v3; // ebx
  __int16 v4; // cx
  char v6; // [esp+1h] [ebp-3h]
  char v7; // [esp+1h] [ebp-3h]
  char v8; // [esp+2h] [ebp-2h]
  char v9; // [esp+2h] [ebp-2h]
  char v10; // [esp+3h] [ebp-1h]
  uint32_t savedregs[6] = {
      0x00000010, 0x00202AF7, 0x00000781, 0x0000A17B,
      0x00000B12, 0x00000000/*, 0x00000000, 0x00211817,
      0x0004EB93, 0x00000001, 0x002052E5, 0x002F0BD4,
      0x0026B1A0, 0x002EFC01, 0x00000001, 0x0021153E,
      0x00000001, 0x0019F0E1, 0x0023C4E8, 0x00000001 */};


  mapEntityIndex_10C1E0_10C1D0[a2] = a3;
  v10 = 7;
  do
  {
    v3 = a2;
    v4 = (unsigned __int8)(1 << v10);
    v6 = 1 << (7 - v10);
    do
    {
      v8 = 1 << (7 - v10);
      do
      {
//debug
#ifdef debug1
          //if (counter_725C8 == 0xdf3)
          /*if (counter_725C8 == 0x1)
          {
              counter_725C8++;
              counter_725C8--;
          }
              add_compare(0x243613, true);
              counter_725C8++;*/
#endif debug1
//debug
        sub_72652_72B62(v4, (uint16_t*)&v3, (int)&savedregs, (uint16_t*)&a1);
        --v8;
      }
      while ( v8 );
      BYTE1(v3) += v4 + v4;
      --v6;
    }
    while ( v6 );
    v7 = 1 << (7 - v10);
    do
    {
      v9 = 1 << (7 - v10);
      do
      {          
//debug
#ifdef debug1
              //add_compare(0x243632, true);
#endif debug1
//debug
        sub_726E7_72BF7(v4, (uint16_t*)&v3, (int)&savedregs, (uint16_t*)&a1);
        --v9;
      }
      while ( v9 );
      BYTE1(v3) += v4 + v4;
      --v7;
    }
    while ( v7 );
  }
  while ( v10-- >= 1 );
}
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (00072652) --------------------------------------------------------
void sub_72652_72B62(__int16 a1, uint16_t* a2, int a3, uint16_t* a4)//243652_
{
  __int16 v4; // di
  __int16 v5; // di
  __int16 v6; // di
  __int16 v7; // di
  __int16 v8; // di
  __int16 result; // ax

  v4 = mapEntityIndex_10C1E0_10C1D0[a2[0]];
  LOBYTE(a2[0]) = a1 + a1 + a2[0];
  v5 = mapEntityIndex_10C1E0_10C1D0[a2[0]] + v4;
  BYTE1(a2[0]) += a1 + a1;
  v6 = mapEntityIndex_10C1E0_10C1D0[a2[0]] + v5;
  LOBYTE(a2[0]) = a2[0] - a1 - a1;
  v7 = mapEntityIndex_10C1E0_10C1D0[a2[0]] + v6;
  LOBYTE(a2[0]) = a1 + a2[0];
  BYTE1(a2[0]) -= a1;
  a4[0] = 9377 * a4[0] + 9439;
  v8 = a4[0] % (unsigned __int16)(2 * *(_WORD *)(a3 + 20) + 1)
     + a4[0] % (unsigned __int16)((a1 << 6) + 1)
     + (v7 >> 2)
     - 32 * a1
     - *(_WORD *)(a3 + 20);
  result = v8;
  if ( !mapEntityIndex_10C1E0_10C1D0[a2[0]] )
    mapEntityIndex_10C1E0_10C1D0[a2[0]] = v8;
  LOBYTE(a2[0]) += a1;
  BYTE1(a2[0]) -= a1;
}
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (000726E7) --------------------------------------------------------
void sub_726E7_72BF7(__int16 a1, uint16_t* a2, int a3, uint16_t* a4)//2436E7_
{
  __int16 v4; // di
  __int16 v5; // di
  //unsigned __int16 v6; // si
  __int16 v7; // ax
  __int16 v8; // di
  __int16 v9; // di
  __int16 v10; // di
  __int16 v11; // di
  __int16 result; // ax
  __int16 v13; // [esp-2h] [ebp-2h]

  v13 = mapEntityIndex_10C1E0_10C1D0[a2[0]];
  LOBYTE(a2[0]) = a1 + a2[0];
  BYTE1(a2[0]) -= a1;
  v4 = mapEntityIndex_10C1E0_10C1D0[a2[0]] + v13;
  LOBYTE(a2[0]) = a1 + a2[0];
  BYTE1(a2[0]) += a1;
  v5 = mapEntityIndex_10C1E0_10C1D0[a2[0]] + v4;
  LOBYTE(a2[0]) = a2[0] - a1;
  BYTE1(a2[0]) += a1;
  a4[0] = 9377 * a4[0] + 9439;
  v7 = a4[0] % (unsigned __int16)(2 * *(_WORD *)(a3 + 20) + 1)
     + a4[0] % (unsigned __int16)((a1 << 6) + 1)
     + ((__int16)(mapEntityIndex_10C1E0_10C1D0[a2[0]] + v5) >> 2)
     - 32 * a1
     - *(_WORD *)(a3 + 20);
  v8 = mapEntityIndex_10C1E0_10C1D0[a2[0]];
  BYTE1(a2[0]) -= a1;
  if ( !mapEntityIndex_10C1E0_10C1D0[a2[0]] )
    mapEntityIndex_10C1E0_10C1D0[a2[0]] = v7;
  LOBYTE(a2[0]) = a2[0] - a1 - a1;
  BYTE1(a2[0]) += a1;
  v9 = mapEntityIndex_10C1E0_10C1D0[a2[0]] + v13 + v8;
  LOBYTE(a2[0]) = a1 + a2[0];
  BYTE1(a2[0]) += a1;
  v10 = mapEntityIndex_10C1E0_10C1D0[a2[0]] + v9;
  BYTE1(a2[0]) -= a1;
  a4[0] = 9377 * a4[0] + 9439;
  v11 = a4[0] % (unsigned __int16)(2 * *(_WORD *)(a3 + 20) + 1)
      + a4[0] % (unsigned __int16)((a1 << 6) + 1)
      + (v10 >> 2)
      - 32 * a1
      - *(_WORD *)(a3 + 20);
  result = v11;
  if ( !mapEntityIndex_10C1E0_10C1D0[a2[0]] )
    mapEntityIndex_10C1E0_10C1D0[a2[0]] = v11;  
  BYTE1(a2[0]) -= a1;
  LOBYTE(a2[0]) += a1;
  LOBYTE(a2[0]) += a1;
}
// 10C1E0: using guessed type __int16 mapEntityIndex_10C1E0_10C1D0[7953];

//----- (00072807) --------------------------------------------------------
char sub_72807_72D17(unsigned __int8 *a1, _BYTE *a2)
{
  unsigned __int8 *v2; // edi
  unsigned int v3; // ebx
  unsigned int v4; // ecx
  unsigned int v5; // edx
  int v6; // eax
  unsigned __int8 *v7; // esi
  unsigned int v8; // ebx
  unsigned int v9; // ecx
  unsigned int v10; // edx
  unsigned __int8 *v11; // esi
  __int16 v12; // di
  char result; // al
  char v14; // [esp+6h] [ebp-Ah]
  char v15; // [esp+7h] [ebp-9h]
  char v16; // [esp+8h] [ebp-8h]
  char v17; // [esp+8h] [ebp-8h]
  char v18; // [esp+9h] [ebp-7h]
  __int16 v19; // [esp+Ah] [ebp-6h]
  int *v20; // [esp+Ch] [ebp-4h]

  v18 = 0;
  v20 = (int*)&dword_9334C;
  do
  {
    v2 = (unsigned __int8 *)*v20;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v15 = 32;
    do
    {
      v16 = 32;
      do
      {
        v7 = &a1[3 * *v2];
        LOBYTE(v6) = *v7++;
        v3 += v6;
        LOBYTE(v6) = *v7;
        v4 += v6;
        LOBYTE(v6) = v7[1];
        v5 += v6;
        ++v2;
        --v16;
      }
      while ( v16 );
      v2 += 224;
      --v15;
    }
    while ( v15 );
    v8 = v3 >> 10;
    v9 = v4 >> 10;
    v10 = v5 >> 10;
    v19 = 0x7FFF;
    v14 = 0;
    v11 = a1;
    v17 = 0;
    do
    {
      v12 = (v11[2] - (_WORD)v10) * (v11[2] - (_WORD)v10);
      if ( (__int16)(v12 + (v11[1] - (_WORD)v9) * (v11[1] - (_WORD)v9) + (*v11 - (_WORD)v8) * (*v11 - (_WORD)v8)) < v19 )
      {
        v19 = v12 + (v11[1] - (_WORD)v9) * (v11[1] - (_WORD)v9) + (*v11 - (_WORD)v8) * (*v11 - (_WORD)v8);
        v14 = v17;
      }
      v11 += 3;
      ++v17;
    }
    while ( v17 );
    result = v14;
    *a2 = v14;
    a2[128] = v14;
    ++a2;
    ++v20;
    --v18;
  }
  while ( v18 );
  return result;
}
// 9334C: using guessed type int dword_9334C;

int compare_index_729A7 = 0;
int compare_index_245FFB = 0;
int compare_index_24674B = 0;
int compare_index_24629B = 0;

void DrawTriangle_729A3_72EB3_old(_DWORD* a1, _DWORD* a2, _DWORD* a3)
{
    int32* v3; // esi
    int32* v4; // edi
    int32* v5; // ecx
    int32 v6; // eax
    int32 v7; // ebx
    int32 v8; // edx
    int v9; // eax
    int v10; // ebx
    int v11; // ebx
    int v12; // ebx
    int v13; // eax
    int v14; // ebx
    _BOOL1 v15; // zf
    char v16; // cc
    int v17; // ebx
    int v18; // ebx
    int v19; // eax
    int v20; // ebx
    int v21; // ecx
    int v22; // edx
    int v23; // esi
    int v24; // ebx
    _DWORD* v25; // edi
    int v26; // edi
    _BOOL1 v27; // of
    int v28; // edi
    unsigned int v29; // eax
    int v30; // eax
    int v31; // ebx
    _BOOL1 v32; // zf
    int v33; // ebx
    int v34; // ebx
    int v35; // eax
    int v36; // ebx
    int v37; // ecx
    int v38; // edx
    int v39; // ebx
    _DWORD* v40; // edi
    int v41; // edi
    int v42; // edi
    int v43; // eax
    int v44; // ebx
    _BOOL1 v45; // zf
    int v46; // ebx
    int v47; // eax
    int v48; // ebx
    int v49; // esi
    int v50; // ebx
    _DWORD* v51; // edi
    int v52; // edi
    int v53; // edi
    int v54; // eax
    int v55; // ebx
    int v56; // ebx
    _DWORD* v57; // edi
    int v58; // edi
    int v59; // edi
    int v60; // eax
    int v61; // ebx
    int v62; // ebx
    int v63; // ebx
    int v64; // eax
    int v65; // ebx
    _BOOL1 v66; // zf
    int v67; // ebx
    int v68; // ebx
    int v69; // eax
    int v70; // ebx
    int v71; // ecx
    int v72; // edx
    int v73; // esi
    int v74; // eax
    _DWORD* v75; // edi
    int v76; // edi
    int v77; // edi
    int v78; // eax
    int v79; // ebx
    _BOOL1 v80; // zf
    int v81; // ebx
    int v82; // ebx
    int v83; // eax
    int v84; // ebx
    int v85; // ecx
    int v86; // edx
    int v87; // eax
    _DWORD* v88; // edi
    int v89; // edi
    int v90; // edi
    int v91; // eax
    int v92; // ebx
    _BOOL1 v93; // zf
    int v94; // ebx
    int v95; // eax
    int v96; // ebx
    int v97; // esi
    int v98; // eax
    _DWORD* v99; // edi
    int v100; // edi
    int v101; // edi
    int v102; // eax
    int v103; // ebx
    int v104; // eax
    _DWORD* v105; // edi
    int v106; // edi
    int v107; // edi
    int v108; // eax
    int v109; // ebx
    int v110; // ebx
    int v111; // eax
    int v112; // ebx
    int v113; // ecx
    int v114; // edx
    int v115; // esi
    int v116; // edi
    _DWORD* v117; // edi
    int v118; // ebx
    int v119; // eax
    int v120; // ebx
    int v121; // ecx
    int v122; // edx
    int v123; // edi
    _DWORD* v124; // edi
    int v125; // eax
    int v126; // ebx
    int v127; // esi
    int v128; // edi
    _DWORD* v129; // edi
    int v130; // eax
    int v131; // ebx
    int v132; // edi
    _DWORD* v133; // edi
    int v134; // eax
    int v135; // ebx
    int v136; // ebx
    int v137; // eax
    int v138; // ebx
    int v139; // ecx
    int v140; // edx
    int v141; // esi
    int v142; // edi
    _DWORD* v143; // edi
    int v144; // ebx
    int v145; // eax
    int v146; // ebx
    int v147; // ecx
    int v148; // edx
    int v149; // edi
    _DWORD* v150; // edi
    int v151; // eax
    int v152; // ebx
    int v153; // esi
    int v154; // edi
    _DWORD* v155; // edi
    int v156; // eax
    int v157; // ebx
    int v158; // edi
    _DWORD* v159; // edi
    unsigned __int16* v160; // esi
    char* v161; // edx
    char v162; // al
    int v163; // ebx
    signed int v164; // ecx
    char* v165; // edi
    _WORD* i; // esi
    int v167; // ecx
    _BYTE* v168; // edi
    unsigned int v169; // eax
    __int16 v170; // bx
    _BOOL1 v171; // cf
    __int16 v172; // bx
    __int16 v173; // bx
    char v174; // ah
    __int16 v175; // cx
    __int16 v176; // bx
    char v177; // ah
    __int16 v178; // cx
    __int16 v179; // bx
    char v180; // ah
    __int16 v181; // cx
    __int16 v182; // bx
    char v183; // ah
    __int16 v184; // cx
    __int16 v185; // bx
    char v186; // ah
    __int16 v187; // cx
    __int16 v188; // bx
    char v189; // ah
    __int16 v190; // cx
    __int16 v191; // bx
    char v192; // ah
    __int16 v193; // cx
    __int16 v194; // bx
    char v195; // ah
    __int16 v196; // cx
    __int16 v197; // bx
    char v198; // ah
    __int16 v199; // cx
    __int16 v200; // bx
    char v201; // ah
    __int16 v202; // cx
    __int16 v203; // bx
    char v204; // ah
    __int16 v205; // cx
    __int16 v206; // bx
    char v207; // ah
    __int16 v208; // cx
    __int16 v209; // bx
    char v210; // ah
    __int16 v211; // cx
    __int16 v212; // bx
    char v213; // ah
    __int16 v214; // cx
    __int16 v215; // bx
    char v216; // ah
    __int16 v217; // cx
    unsigned __int16* v218; // esi
    int v219; // eax
    int v220; // ebx
    int v221; // ecx
    _BYTE* v222; // edi
    int v223; // eax
    unsigned int v224; // eax
    int v225; // edx
    unsigned int v226; // eax
    int v227; // esi
    char v228; // al
    int v229; // edx
    __int16 v230; // cx
    char v231; // al
    int v232; // edx
    __int16 v233; // cx
    char v234; // al
    int v235; // edx
    __int16 v236; // cx
    char v237; // al
    int v238; // edx
    __int16 v239; // cx
    char v240; // al
    int v241; // edx
    __int16 v242; // cx
    char v243; // al
    int v244; // edx
    __int16 v245; // cx
    char v246; // al
    int v247; // edx
    __int16 v248; // cx
    char v249; // al
    int v250; // edx
    __int16 v251; // cx
    char v252; // al
    int v253; // edx
    __int16 v254; // cx
    char v255; // al
    int v256; // edx
    __int16 v257; // cx
    char v258; // al
    int v259; // edx
    __int16 v260; // cx
    char v261; // al
    int v262; // edx
    __int16 v263; // cx
    char v264; // al
    int v265; // edx
    __int16 v266; // cx
    char v267; // al
    int v268; // edx
    __int16 v269; // cx
    char v270; // al
    int v271; // edx
    __int16 v272; // cx
    char v273; // al
    unsigned __int16* v274; // esi
    int v275; // eax
    int v276; // ebx
    int v277; // ecx
    _BYTE* v278; // edi
    int v279; // eax
    unsigned int v280; // eax
    int v281; // edx
    unsigned int v282; // eax
    int v283; // esi
    char v284; // al
    int v285; // edx
    __int16 v286; // cx
    char v287; // al
    int v288; // edx
    __int16 v289; // cx
    char v290; // al
    int v291; // edx
    __int16 v292; // cx
    char v293; // al
    int v294; // edx
    __int16 v295; // cx
    char v296; // al
    int v297; // edx
    __int16 v298; // cx
    char v299; // al
    int v300; // edx
    __int16 v301; // cx
    char v302; // al
    int v303; // edx
    __int16 v304; // cx
    char v305; // al
    int v306; // edx
    __int16 v307; // cx
    char v308; // al
    int v309; // edx
    __int16 v310; // cx
    char v311; // al
    int v312; // edx
    __int16 v313; // cx
    char v314; // al
    int v315; // edx
    __int16 v316; // cx
    char v317; // al
    int v318; // edx
    __int16 v319; // cx
    char v320; // al
    int v321; // edx
    __int16 v322; // cx
    char v323; // al
    int v324; // edx
    __int16 v325; // cx
    char v326; // al
    int v327; // edx
    __int16 v328; // cx
    char v329; // al
    _WORD* j; // esi
    int v331; // ecx
    _BYTE* v332; // edi
    unsigned int v333; // eax
    __int16 v334; // bx
    __int16 v335; // bx
    __int16 v336; // bx
    __int16 v337; // cx
    __int16 v338; // bx
    __int16 v339; // cx
    __int16 v340; // bx
    __int16 v341; // cx
    __int16 v342; // bx
    __int16 v343; // cx
    __int16 v344; // bx
    __int16 v345; // cx
    __int16 v346; // bx
    __int16 v347; // cx
    __int16 v348; // bx
    __int16 v349; // cx
    __int16 v350; // bx
    __int16 v351; // cx
    __int16 v352; // bx
    __int16 v353; // cx
    __int16 v354; // bx
    __int16 v355; // cx
    __int16 v356; // bx
    __int16 v357; // cx
    __int16 v358; // bx
    __int16 v359; // cx
    __int16 v360; // bx
    __int16 v361; // cx
    __int16 v362; // bx
    __int16 v363; // cx
    __int16 v364; // bx
    __int16 v365; // cx
    unsigned int textPointer; // eax
    int v367; // ebx
    //char* v368; // esi
    int v369; // ecx
    uint8* v370; // edi
    int textIndex; // ecx
    int v372; // edx
    int v373; // ecx
    __int16 v374; // cx
    __int16 v375; // bp
    _BYTE* v376; // edi
    int v377; // ebp
    unsigned int v378; // eax
    int v379; // ebx
    char* v380; // esi
    int v381; // ecx
    uint8* v382; // edi
    int v383; // ecx
    int v384; // edx
    int v385; // ecx
    __int16 v386; // cx
    __int16 v387; // bp
    _BYTE* v388; // edi
    int v389; // ebp
    unsigned __int16* v390; // esi
    int v391; // eax
    int v392; // ebx
    int v393; // ecx
    _BYTE* v394; // edi
    int v395; // eax
    unsigned int v396; // eax
    int v397; // edx
    unsigned int v398; // eax
    int v399; // esi
    int v400; // edx
    __int16 v401; // cx
    int v402; // edx
    __int16 v403; // cx
    int v404; // edx
    __int16 v405; // cx
    int v406; // edx
    __int16 v407; // cx
    int v408; // edx
    __int16 v409; // cx
    int v410; // edx
    __int16 v411; // cx
    int v412; // edx
    __int16 v413; // cx
    int v414; // edx
    __int16 v415; // cx
    int v416; // edx
    __int16 v417; // cx
    int v418; // edx
    __int16 v419; // cx
    int v420; // edx
    __int16 v421; // cx
    int v422; // edx
    __int16 v423; // cx
    int v424; // edx
    __int16 v425; // cx
    int v426; // edx
    __int16 v427; // cx
    int v428; // edx
    __int16 v429; // cx
    unsigned __int16* v430; // esi
    int v431; // eax
    int v432; // ebx
    int v433; // ecx
    _BYTE* v434; // edi
    int v435; // eax
    unsigned int v436; // eax
    int v437; // edx
    unsigned int v438; // eax
    int v439; // esi
    int v440; // edx
    __int16 v441; // cx
    int v442; // edx
    __int16 v443; // cx
    int v444; // edx
    __int16 v445; // cx
    int v446; // edx
    __int16 v447; // cx
    int v448; // edx
    __int16 v449; // cx
    int v450; // edx
    __int16 v451; // cx
    int v452; // edx
    __int16 v453; // cx
    int v454; // edx
    __int16 v455; // cx
    int v456; // edx
    __int16 v457; // cx
    int v458; // edx
    __int16 v459; // cx
    int v460; // edx
    __int16 v461; // cx
    int v462; // edx
    __int16 v463; // cx
    int v464; // edx
    __int16 v465; // cx
    int v466; // edx
    __int16 v467; // cx
    int v468; // edx
    __int16 v469; // cx
    unsigned __int16* v470; // esi
    int v471; // eax
    int v472; // ebx
    int v473; // ecx
    _BYTE* v474; // edi
    int v475; // eax
    unsigned int v476; // eax
    int v477; // edx
    unsigned int v478; // eax
    int v479; // esi
    int v480; // edx
    __int16 v481; // cx
    int v482; // edx
    __int16 v483; // cx
    int v484; // edx
    __int16 v485; // cx
    int v486; // edx
    __int16 v487; // cx
    int v488; // edx
    __int16 v489; // cx
    int v490; // edx
    __int16 v491; // cx
    int v492; // edx
    __int16 v493; // cx
    int v494; // edx
    __int16 v495; // cx
    int v496; // edx
    __int16 v497; // cx
    int v498; // edx
    __int16 v499; // cx
    int v500; // edx
    __int16 v501; // cx
    int v502; // edx
    __int16 v503; // cx
    int v504; // edx
    __int16 v505; // cx
    int v506; // edx
    __int16 v507; // cx
    int v508; // edx
    __int16 v509; // cx
    unsigned __int16* v510; // esi
    int v511; // eax
    int v512; // ebx
    int v513; // ecx
    _BYTE* v514; // edi
    int v515; // eax
    unsigned int v516; // eax
    int v517; // edx
    unsigned int v518; // eax
    int v519; // esi
    int v520; // edx
    __int16 v521; // cx
    int v522; // edx
    __int16 v523; // cx
    int v524; // edx
    __int16 v525; // cx
    int v526; // edx
    __int16 v527; // cx
    int v528; // edx
    __int16 v529; // cx
    int v530; // edx
    __int16 v531; // cx
    int v532; // edx
    __int16 v533; // cx
    int v534; // edx
    __int16 v535; // cx
    int v536; // edx
    __int16 v537; // cx
    int v538; // edx
    __int16 v539; // cx
    int v540; // edx
    __int16 v541; // cx
    int v542; // edx
    __int16 v543; // cx
    int v544; // edx
    __int16 v545; // cx
    int v546; // edx
    __int16 v547; // cx
    int v548; // edx
    __int16 v549; // cx
    unsigned __int16* v550; // esi
    int v551; // eax
    int v552; // ebx
    int v553; // ecx
    _BYTE* v554; // edi
    int v555; // eax
    unsigned int v556; // eax
    int v557; // edx
    unsigned int v558; // eax
    int v559; // esi
    int v560; // edx
    __int16 v561; // cx
    int v562; // edx
    __int16 v563; // cx
    int v564; // edx
    __int16 v565; // cx
    int v566; // edx
    __int16 v567; // cx
    int v568; // edx
    __int16 v569; // cx
    int v570; // edx
    __int16 v571; // cx
    int v572; // edx
    __int16 v573; // cx
    int v574; // edx
    __int16 v575; // cx
    int v576; // edx
    __int16 v577; // cx
    int v578; // edx
    __int16 v579; // cx
    int v580; // edx
    __int16 v581; // cx
    int v582; // edx
    __int16 v583; // cx
    int v584; // edx
    __int16 v585; // cx
    int v586; // edx
    __int16 v587; // cx
    int v588; // edx
    __int16 v589; // cx
    unsigned __int16* v590; // esi
    _BYTE* v591; // edx
    int v592; // eax
    int v593; // ebx
    int v594; // ecx
    _BYTE* k; // edi
    __int16 v596; // cx
    __int16 v597; // cx
    __int16 v598; // cx
    __int16 v599; // cx
    __int16 v600; // cx
    __int16 v601; // cx
    __int16 v602; // cx
    __int16 v603; // cx
    __int16 v604; // cx
    __int16 v605; // cx
    __int16 v606; // cx
    __int16 v607; // cx
    __int16 v608; // cx
    __int16 v609; // cx
    __int16 v610; // cx
    unsigned __int16* v611; // esi
    _BYTE* v612; // edx
    int v613; // eax
    int v614; // ebx
    int v615; // ecx
    _BYTE* m; // edi
    __int16 v617; // cx
    __int16 v618; // cx
    __int16 v619; // cx
    __int16 v620; // cx
    __int16 v621; // cx
    __int16 v622; // cx
    __int16 v623; // cx
    __int16 v624; // cx
    __int16 v625; // cx
    __int16 v626; // cx
    __int16 v627; // cx
    __int16 v628; // cx
    __int16 v629; // cx
    __int16 v630; // cx
    __int16 v631; // cx
    unsigned __int16* v632; // esi
    int v633; // edx
    int v634; // ecx
    _BYTE* v635; // edi
    unsigned int v636; // eax
    __int16 v637; // bx
    unsigned __int16 v638; // bx
    __int16 v639; // bx
    __int16 v640; // cx
    __int16 v641; // bx
    __int16 v642; // cx
    __int16 v643; // bx
    __int16 v644; // cx
    __int16 v645; // bx
    __int16 v646; // cx
    __int16 v647; // bx
    __int16 v648; // cx
    __int16 v649; // bx
    __int16 v650; // cx
    __int16 v651; // bx
    __int16 v652; // cx
    __int16 v653; // bx
    __int16 v654; // cx
    __int16 v655; // bx
    __int16 v656; // cx
    __int16 v657; // bx
    __int16 v658; // cx
    __int16 v659; // bx
    __int16 v660; // cx
    __int16 v661; // bx
    __int16 v662; // cx
    __int16 v663; // bx
    __int16 v664; // cx
    __int16 v665; // bx
    __int16 v666; // cx
    __int16 v667; // bx
    __int16 v668; // cx
    unsigned __int16* v669; // esi
    int v670; // edx
    int v671; // ecx
    _BYTE* v672; // edi
    unsigned int v673; // eax
    __int16 v674; // bx
    unsigned __int16 v675; // bx
    __int16 v676; // bx
    __int16 v677; // cx
    __int16 v678; // bx
    __int16 v679; // cx
    __int16 v680; // bx
    __int16 v681; // cx
    __int16 v682; // bx
    __int16 v683; // cx
    __int16 v684; // bx
    __int16 v685; // cx
    __int16 v686; // bx
    __int16 v687; // cx
    __int16 v688; // bx
    __int16 v689; // cx
    __int16 v690; // bx
    __int16 v691; // cx
    __int16 v692; // bx
    __int16 v693; // cx
    __int16 v694; // bx
    __int16 v695; // cx
    __int16 v696; // bx
    __int16 v697; // cx
    __int16 v698; // bx
    __int16 v699; // cx
    __int16 v700; // bx
    __int16 v701; // cx
    __int16 v702; // bx
    __int16 v703; // cx
    __int16 v704; // bx
    __int16 v705; // cx
    unsigned __int16* v706; // esi
    int v707; // eax
    int v708; // ebx
    int v709; // ecx
    _BYTE* v710; // edi
    int v711; // eax
    unsigned int v712; // eax
    int v713; // edx
    unsigned int v714; // eax
    int v715; // esi
    int v716; // edx
    __int16 v717; // cx
    int v718; // edx
    __int16 v719; // cx
    int v720; // edx
    __int16 v721; // cx
    int v722; // edx
    __int16 v723; // cx
    int v724; // edx
    __int16 v725; // cx
    int v726; // edx
    __int16 v727; // cx
    int v728; // edx
    __int16 v729; // cx
    int v730; // edx
    __int16 v731; // cx
    int v732; // edx
    __int16 v733; // cx
    int v734; // edx
    __int16 v735; // cx
    int v736; // edx
    __int16 v737; // cx
    int v738; // edx
    __int16 v739; // cx
    int v740; // edx
    __int16 v741; // cx
    int v742; // edx
    __int16 v743; // cx
    int v744; // edx
    __int16 v745; // cx
    unsigned __int16* v746; // esi
    int v747; // eax
    int v748; // ebx
    int v749; // ecx
    _BYTE* v750; // edi
    int v751; // eax
    unsigned int v752; // eax
    int v753; // edx
    unsigned int v754; // eax
    int v755; // esi
    int v756; // edx
    __int16 v757; // cx
    int v758; // edx
    __int16 v759; // cx
    int v760; // edx
    __int16 v761; // cx
    int v762; // edx
    __int16 v763; // cx
    int v764; // edx
    __int16 v765; // cx
    int v766; // edx
    __int16 v767; // cx
    int v768; // edx
    __int16 v769; // cx
    int v770; // edx
    __int16 v771; // cx
    int v772; // edx
    __int16 v773; // cx
    int v774; // edx
    __int16 v775; // cx
    int v776; // edx
    __int16 v777; // cx
    int v778; // edx
    __int16 v779; // cx
    int v780; // edx
    __int16 v781; // cx
    int v782; // edx
    __int16 v783; // cx
    int v784; // edx
    __int16 v785; // cx
    unsigned __int16* v786; // esi
    unsigned int v787; // eax
    int v788; // ebx
    int v789; // ecx
    _BYTE* v790; // edi
    int v791; // ecx
    int v792; // edx
    int v793; // ecx
    int v794; // esi
    int v795; // edx
    int v796; // ecx
    int v797; // edx
    int v798; // ecx
    int v799; // edx
    int v800; // ecx
    int v801; // edx
    int v802; // ecx
    int v803; // edx
    int v804; // ecx
    int v805; // edx
    int v806; // ecx
    int v807; // edx
    int v808; // ecx
    int v809; // edx
    int v810; // ecx
    int v811; // edx
    int v812; // ecx
    int v813; // edx
    int v814; // ecx
    int v815; // edx
    int v816; // ecx
    int v817; // edx
    int v818; // ecx
    int v819; // edx
    int v820; // ecx
    int v821; // edx
    int v822; // ecx
    int v823; // edx
    int v824; // ecx
    unsigned __int16* v825; // esi
    unsigned int v826; // eax
    int v827; // ebx
    int v828; // ecx
    _BYTE* v829; // edi
    int v830; // ecx
    int v831; // edx
    int v832; // ecx
    int v833; // esi
    int v834; // edx
    int v835; // ecx
    int v836; // edx
    int v837; // ecx
    int v838; // edx
    int v839; // ecx
    int v840; // edx
    int v841; // ecx
    int v842; // edx
    int v843; // ecx
    int v844; // edx
    int v845; // ecx
    int v846; // edx
    int v847; // ecx
    int v848; // edx
    int v849; // ecx
    int v850; // edx
    int v851; // ecx
    int v852; // edx
    int v853; // ecx
    int v854; // edx
    int v855; // ecx
    int v856; // edx
    int v857; // ecx
    int v858; // edx
    int v859; // ecx
    int v860; // edx
    int v861; // ecx
    int v862; // edx
    int v863; // ecx
    unsigned __int16* v864; // esi
    int v865; // eax
    int v866; // ebx
    int v867; // ecx
    _BYTE* v868; // edi
    int v869; // eax
    unsigned int v870; // eax
    int v871; // edx
    unsigned int v872; // eax
    int v873; // esi
    int v874; // edx
    __int16 v875; // cx
    int v876; // edx
    __int16 v877; // cx
    int v878; // edx
    __int16 v879; // cx
    int v880; // edx
    __int16 v881; // cx
    int v882; // edx
    __int16 v883; // cx
    int v884; // edx
    __int16 v885; // cx
    int v886; // edx
    __int16 v887; // cx
    int v888; // edx
    __int16 v889; // cx
    int v890; // edx
    __int16 v891; // cx
    int v892; // edx
    __int16 v893; // cx
    int v894; // edx
    __int16 v895; // cx
    int v896; // edx
    __int16 v897; // cx
    int v898; // edx
    __int16 v899; // cx
    int v900; // edx
    __int16 v901; // cx
    int v902; // edx
    __int16 v903; // cx
    unsigned __int16* v904; // esi
    int v905; // eax
    int v906; // ebx
    int v907; // ecx
    _BYTE* v908; // edi
    int v909; // eax
    unsigned int v910; // eax
    int v911; // edx
    unsigned int v912; // eax
    int v913; // esi
    int v914; // edx
    __int16 v915; // cx
    int v916; // edx
    __int16 v917; // cx
    int v918; // edx
    __int16 v919; // cx
    int v920; // edx
    __int16 v921; // cx
    int v922; // edx
    __int16 v923; // cx
    int v924; // edx
    __int16 v925; // cx
    int v926; // edx
    __int16 v927; // cx
    int v928; // edx
    __int16 v929; // cx
    int v930; // edx
    __int16 v931; // cx
    int v932; // edx
    __int16 v933; // cx
    int v934; // edx
    __int16 v935; // cx
    int v936; // edx
    __int16 v937; // cx
    int v938; // edx
    __int16 v939; // cx
    int v940; // edx
    __int16 v941; // cx
    int v942; // edx
    __int16 v943; // cx
    unsigned __int16* v944; // esi
    unsigned int v945; // eax
    int v946; // ebx
    int v947; // ecx
    _BYTE* v948; // edi
    int v949; // ecx
    int v950; // edx
    int v951; // ecx
    int v952; // esi
    int v953; // edx
    int v954; // ecx
    int v955; // edx
    int v956; // ecx
    int v957; // edx
    int v958; // ecx
    int v959; // edx
    int v960; // ecx
    int v961; // edx
    int v962; // ecx
    int v963; // edx
    int v964; // ecx
    int v965; // edx
    int v966; // ecx
    int v967; // edx
    int v968; // ecx
    int v969; // edx
    int v970; // ecx
    int v971; // edx
    int v972; // ecx
    int v973; // edx
    int v974; // ecx
    int v975; // edx
    int v976; // ecx
    int v977; // edx
    int v978; // ecx
    int v979; // edx
    int v980; // ecx
    int v981; // edx
    int v982; // ecx
    unsigned __int16* v983; // esi
    unsigned int v984; // eax
    int v985; // ebx
    int v986; // ecx
    _BYTE* v987; // edi
    int v988; // ecx
    int v989; // edx
    int v990; // ecx
    int v991; // esi
    int v992; // edx
    int v993; // ecx
    int v994; // edx
    int v995; // ecx
    int v996; // edx
    int v997; // ecx
    int v998; // edx
    int v999; // ecx
    int v1000; // edx
    int v1001; // ecx
    int v1002; // edx
    int v1003; // ecx
    int v1004; // edx
    int v1005; // ecx
    int v1006; // edx
    int v1007; // ecx
    int v1008; // edx
    int v1009; // ecx
    int v1010; // edx
    int v1011; // ecx
    int v1012; // edx
    int v1013; // ecx
    int v1014; // edx
    int v1015; // ecx
    int v1016; // edx
    int v1017; // ecx
    int v1018; // edx
    int v1019; // ecx
    int v1020; // edx
    int v1021; // ecx
    unsigned __int16* v1022; // esi
    unsigned int v1023; // eax
    int v1024; // ebx
    int v1025; // ecx
    char* v1026; // edi
    int v1027; // ecx
    int v1028; // edx
    int v1029; // ecx
    int v1030; // esi
    char v1031; // al
    int v1032; // edx
    int v1033; // ecx
    char v1034; // al
    int v1035; // edx
    int v1036; // ecx
    char v1037; // al
    int v1038; // edx
    int v1039; // ecx
    char v1040; // al
    int v1041; // edx
    int v1042; // ecx
    char v1043; // al
    int v1044; // edx
    int v1045; // ecx
    char v1046; // al
    int v1047; // edx
    int v1048; // ecx
    char v1049; // al
    int v1050; // edx
    int v1051; // ecx
    char v1052; // al
    int v1053; // edx
    int v1054; // ecx
    char v1055; // al
    int v1056; // edx
    int v1057; // ecx
    char v1058; // al
    int v1059; // edx
    int v1060; // ecx
    char v1061; // al
    int v1062; // edx
    int v1063; // ecx
    char v1064; // al
    int v1065; // edx
    int v1066; // ecx
    char v1067; // al
    int v1068; // edx
    int v1069; // ecx
    char v1070; // al
    int v1071; // edx
    int v1072; // ecx
    char v1073; // al
    int v1074; // edx
    int v1075; // ecx
    char v1076; // al
    uint8* actScrPtr; // [esp+0h] [ebp-88h]
    int v1078; // [esp+4h] [ebp-84h]
    int v1079; // [esp+4h] [ebp-84h]
    int v1080; // [esp+4h] [ebp-84h]
    int v1081; // [esp+4h] [ebp-84h]
    int v1082; // [esp+8h] [ebp-80h]
    int v1083; // [esp+8h] [ebp-80h]
    int v1084; // [esp+8h] [ebp-80h]
    int v1085; // [esp+8h] [ebp-80h]
    int v1086; // [esp+Ch] [ebp-7Ch]
    int v1087; // [esp+Ch] [ebp-7Ch]
    int v1088; // [esp+10h] [ebp-78h]
    int v1089; // [esp+10h] [ebp-78h]
    int v1090; // [esp+10h] [ebp-78h]
    int v1091; // [esp+10h] [ebp-78h]
    int diffPnt2Pnt1Var1; // [esp+14h] [ebp-74h]
    int v1093; // [esp+14h] [ebp-74h]
    int v1094; // [esp+18h] [ebp-70h]
    int v1095; // [esp+18h] [ebp-70h]
    int v1096; // [esp+1Ch] [ebp-6Ch]
    int v1097; // [esp+1Ch] [ebp-6Ch]
    int ySum; // [esp+20h] [ebp-68h]
    int scaledU; // [esp+24h] [ebp-64h]
    int v1100; // [esp+28h] [ebp-60h]
    int v1101; // [esp+28h] [ebp-60h]
    int v1102; // [esp+28h] [ebp-60h]
    int v1103; // [esp+28h] [ebp-60h]
    int v1104; // [esp+28h] [ebp-60h]
    int v1105; // [esp+28h] [ebp-60h]
    int v1106; // [esp+28h] [ebp-60h]
    int v1107; // [esp+28h] [ebp-60h]
    int v1108; // [esp+2Ch] [ebp-5Ch]
    int v1109; // [esp+2Ch] [ebp-5Ch]
    int scaledV; // [esp+30h] [ebp-58h]
    int v1111; // [esp+34h] [ebp-54h]
    int v1112; // [esp+34h] [ebp-54h]
    int v1113; // [esp+34h] [ebp-54h]
    int v1114; // [esp+34h] [ebp-54h]
    int v1115; // [esp+34h] [ebp-54h]
    int v1116; // [esp+34h] [ebp-54h]
    int v1117; // [esp+34h] [ebp-54h]
    int v1118; // [esp+34h] [ebp-54h]
    int v1119; // [esp+38h] [ebp-50h]
    int v1120; // [esp+38h] [ebp-50h]
    int scaledZ; // [esp+3Ch] [ebp-4Ch]
    int v1122; // [esp+40h] [ebp-48h]
    int v1123; // [esp+40h] [ebp-48h]
    int v1124; // [esp+40h] [ebp-48h]
    int v1125; // [esp+40h] [ebp-48h]
    int v1126; // [esp+40h] [ebp-48h]
    int v1127; // [esp+40h] [ebp-48h]
    int v1128; // [esp+40h] [ebp-48h]
    int v1129; // [esp+40h] [ebp-48h]
    int v1130; // [esp+44h] [ebp-44h]
    int v1131; // [esp+44h] [ebp-44h]
    int v1132; // [esp+48h] [ebp-40h]
    int v1133; // [esp+48h] [ebp-40h]
    int v1134; // [esp+48h] [ebp-40h]
    int v1135; // [esp+48h] [ebp-40h]
    int v1136; // [esp+48h] [ebp-40h]
    int v1137; // [esp+48h] [ebp-40h]
    int v1138; // [esp+48h] [ebp-40h]
    int v1139; // [esp+48h] [ebp-40h]
    int v1140; // [esp+48h] [ebp-40h]
    int v1141; // [esp+48h] [ebp-40h]
    int v1142; // [esp+48h] [ebp-40h]
    int v1143; // [esp+48h] [ebp-40h]
    int v1144; // [esp+48h] [ebp-40h]
    int v1145; // [esp+48h] [ebp-40h]
    int v1146; // [esp+48h] [ebp-40h]
    int v1147; // [esp+48h] [ebp-40h]
    int v1148; // [esp+4Ch] [ebp-3Ch]
    int v1149; // [esp+4Ch] [ebp-3Ch]
    int v1150; // [esp+4Ch] [ebp-3Ch]
    int v1151; // [esp+4Ch] [ebp-3Ch]
    int v1152; // [esp+4Ch] [ebp-3Ch]
    int v1153; // [esp+4Ch] [ebp-3Ch]
    int v1154; // [esp+4Ch] [ebp-3Ch]
    int v1155; // [esp+4Ch] [ebp-3Ch]
    int v1156; // [esp+4Ch] [ebp-3Ch]
    int v1157; // [esp+4Ch] [ebp-3Ch]
    int v1158; // [esp+4Ch] [ebp-3Ch]
    int v1159; // [esp+4Ch] [ebp-3Ch]
    int v1160; // [esp+4Ch] [ebp-3Ch]
    int v1161; // [esp+4Ch] [ebp-3Ch]
    int v1162; // [esp+4Ch] [ebp-3Ch]
    int v1163; // [esp+4Ch] [ebp-3Ch]
    int v1164; // [esp+4Ch] [ebp-3Ch]
    int v1165; // [esp+4Ch] [ebp-3Ch]
    int v1166; // [esp+50h] [ebp-38h]
    int v1167; // [esp+50h] [ebp-38h]
    int v1168; // [esp+50h] [ebp-38h]
    int v1169; // [esp+50h] [ebp-38h]
    int v1170; // [esp+50h] [ebp-38h]
    int v1171; // [esp+50h] [ebp-38h]
    int v1172; // [esp+50h] [ebp-38h]
    int v1173; // [esp+54h] [ebp-34h]
    int v1174; // [esp+54h] [ebp-34h]
    int v1175; // [esp+54h] [ebp-34h]
    int v1176; // [esp+54h] [ebp-34h]
    int v1177; // [esp+58h] [ebp-30h]
    int v1178; // [esp+58h] [ebp-30h]
    int v1179; // [esp+58h] [ebp-30h]
    int v1180; // [esp+58h] [ebp-30h]
    int v1181; // [esp+58h] [ebp-30h]
    int v1182; // [esp+58h] [ebp-30h]
    int v1183; // [esp+58h] [ebp-30h]
    int v1184; // [esp+58h] [ebp-30h]
    int v1185; // [esp+58h] [ebp-30h]
    int v1186; // [esp+58h] [ebp-30h]
    int v1187; // [esp+58h] [ebp-30h]
    int v1188; // [esp+58h] [ebp-30h]
    int v1189; // [esp+58h] [ebp-30h]
    int v1190; // [esp+58h] [ebp-30h]
    int v1191; // [esp+58h] [ebp-30h]
    int v1192; // [esp+58h] [ebp-30h]
    int v1193; // [esp+58h] [ebp-30h]
    int v1194; // [esp+58h] [ebp-30h]
    int v1195; // [esp+58h] [ebp-30h]
    int v1196; // [esp+58h] [ebp-30h]
    int v1197; // [esp+58h] [ebp-30h]
    int v1198; // [esp+58h] [ebp-30h]
    int v1199; // [esp+58h] [ebp-30h]
    int v1200; // [esp+58h] [ebp-30h]
    int v1201; // [esp+58h] [ebp-30h]
    int v1202; // [esp+58h] [ebp-30h]
    int v1203; // [esp+58h] [ebp-30h]
    int v1204; // [esp+58h] [ebp-30h]
    int v1205; // [esp+58h] [ebp-30h]
    int v1206; // [esp+58h] [ebp-30h]
    int v1207; // [esp+58h] [ebp-30h]
    int v1208; // [esp+58h] [ebp-30h]
    int v1209; // [esp+58h] [ebp-30h]
    int v1210; // [esp+58h] [ebp-30h]
    int v1211; // [esp+58h] [ebp-30h]
    int v1212; // [esp+58h] [ebp-30h]
    int v1213; // [esp+58h] [ebp-30h]
    int v1214; // [esp+58h] [ebp-30h]
    int v1215; // [esp+58h] [ebp-30h]
    int v1216; // [esp+58h] [ebp-30h]
    int v1217; // [esp+58h] [ebp-30h]
    int v1218; // [esp+58h] [ebp-30h]
    int v1219; // [esp+58h] [ebp-30h]
    int v1220; // [esp+58h] [ebp-30h]
    int v1221; // [esp+58h] [ebp-30h]
    int v1222; // [esp+58h] [ebp-30h]
    int v1223; // [esp+58h] [ebp-30h]
    int v1224; // [esp+58h] [ebp-30h]
    int v1225; // [esp+58h] [ebp-30h]
    int v1226; // [esp+58h] [ebp-30h]
    int v1227; // [esp+58h] [ebp-30h]
    int v1228; // [esp+58h] [ebp-30h]
    int v1229; // [esp+58h] [ebp-30h]
    int v1230; // [esp+58h] [ebp-30h]
    int v1231; // [esp+58h] [ebp-30h]
    int v1232; // [esp+58h] [ebp-30h]
    int v1233; // [esp+58h] [ebp-30h]
    int v1234; // [esp+58h] [ebp-30h]
    int v1235; // [esp+58h] [ebp-30h]
    int v1236; // [esp+58h] [ebp-30h]
    int v1237; // [esp+58h] [ebp-30h]
    int v1238; // [esp+58h] [ebp-30h]
    int v1239; // [esp+58h] [ebp-30h]
    int v1240; // [esp+58h] [ebp-30h]
    int v1241; // [esp+58h] [ebp-30h]
    int v1242; // [esp+58h] [ebp-30h]
    int v1243; // [esp+58h] [ebp-30h]
    int v1244; // [esp+58h] [ebp-30h]
    int v1245; // [esp+58h] [ebp-30h]
    int v1246; // [esp+58h] [ebp-30h]
    int v1247; // [esp+58h] [ebp-30h]
    int v1248; // [esp+58h] [ebp-30h]
    int v1249; // [esp+58h] [ebp-30h]
    int v1250; // [esp+58h] [ebp-30h]
    int v1251; // [esp+58h] [ebp-30h]
    int v1252; // [esp+58h] [ebp-30h]
    int v1253; // [esp+58h] [ebp-30h]
    int v1254; // [esp+58h] [ebp-30h]
    int v1255; // [esp+58h] [ebp-30h]
    int v1256; // [esp+58h] [ebp-30h]
    unsigned __int16* v1257; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1258; // [esp+5Ch] [ebp-2Ch]
    //char* v1259; // [esp+5Ch] [ebp-2Ch]
    int v1259x;
    char* v1260; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1261; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1262; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1263; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1264; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1265; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1266; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1267; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1268; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1269; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1270; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1271; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1272; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1273; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1274; // [esp+5Ch] [ebp-2Ch]
    char v1275; // [esp+62h] [ebp-26h]
    char v1276; // [esp+62h] [ebp-26h]
    char v1277; // [esp+62h] [ebp-26h]
    char v1278; // [esp+62h] [ebp-26h]
    char v1279; // [esp+63h] [ebp-25h]
    char v1280; // [esp+63h] [ebp-25h]
    _BOOL1 v1281; // [esp+63h] [ebp-25h]
    _BOOL1 v1282; // [esp+63h] [ebp-25h]
    _BOOL1 pnt3Var1After; // [esp+64h] [ebp-24h]
    _BOOL1 v1284; // [esp+64h] [ebp-24h]

    //  adress 2439A3_
    //debug
#ifdef debug1
  /*if (compare_index_729A7 == 0x240c)
  {
      compare_index_729A7++;
      compare_index_729A7--;
  }
  //add_compare(0x2439A7, true, true);
  add_compare(0x2439A7, true, true, -1, false, 1000000, 0x2400);
  uint8 origbyte20;
  uint8 remakebyte20;
  int comp20 = compare_with_sequence("002439C2-FFFFFFF4", (uint8_t*)&a1[1], 0x28A1E0, compare_index_729A7, 0x4, 0x4, &origbyte20, &remakebyte20, 0, 0);
  compare_index_729A7++;*/
#endif debug1
  //debug

  //fix
    v16 = 0;
    v27 = 0;
    v1022 = 0;
    scaledU = 0;
    scaledV = 0;
    //fix

    v3 = (int32*)a1;
    v4 = (int32*)a2;
    v5 = (int32*)a3;
    v6 = a1[1];
    v7 = a2[1];
    v8 = a3[1];
    if (v6 == v7)
    {
        if (v6 == v8)
            return;
        if (v6 >= v8)
        {
            if (*(int32*)a1 <= *(int32*)a2)
                return;
            v3 = (int32*)a3;
            v4 = (int32*)a1;
            v5 = (int32*)a2;
            goto LABEL_225;
        }
        if (*(int32*)a2 <= *(int32*)a1)
            return;
        goto LABEL_268;
    }
    if (v6 <= v7)
    {
        if (v6 != v8)
        {
            if (v6 >= v8)
            {
                v3 = (int32*)a3;
                v4 = (int32*)a1;
                v5 = (int32*)a2;
            LABEL_24:
                v9 = v3[1];
                v1173 = v9;
                if (v9 >= 0)
                {
                    if (v9 >= heightViewPort_93ADC)
                        return;
                    actScrPtr = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * v9;
                    v1275 = 0;
                }
                else
                {
                    actScrPtr = beginPrevLineFrame_93AC8;
                    v1275 = 1;
                }
                v10 = v5[1];
                pnt3Var1After = v10 > heightViewPort_93ADC;
                v1088 = v10 - v9;
                ySum = v10 - v9;
                v11 = v4[1];
                v1279 = v11 > heightViewPort_93ADC;
                v12 = v11 - v9;
                diffPnt2Pnt1Var1 = v12;
                v1078 = ((*v5 - *v3) << 16) / v1088;
                if (((*v4 - *v3) << 16) / v12 > v1078)
                {
                    v1082 = ((*v4 - *v3) << 16) / v12;
                    v1086 = ((*v5 - *v4) << 16) / (v5[1] - v4[1]);
                    v1094 = v5[1] - v4[1];
                    v1096 = *v4 << 16;
                    switch (byte_967E1)
                    {
                    case 0:
                    case 14:
                    case 15:
                        v54 = *v3 << 16;
                        v55 = v54;
                        if (!v1275)
                        {
                            if (pnt3Var1After)
                            {
                                v58 = heightViewPort_93ADC - v1173;
                                ySum = heightViewPort_93ADC - v1173;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC - v1173;
                                }
                                else
                                {
                                    v27 = __OFSUB__(v58, diffPnt2Pnt1Var1);
                                    v59 = v58 - diffPnt2Pnt1Var1;
                                    v1279 = (v59 < 0) ^ v27 | (v59 == 0);
                                    v1094 = v59;
                                }
                            }
                            goto LABEL_116;
                        }
                        v16 = ySum <= -v1173;
                        ySum += v1173;
                        if (!v16)
                        {
                            v1138 = -v1173;
                            if (-v1173 - diffPnt2Pnt1Var1 >= 0)
                            {
                                v1094 -= v1138 - diffPnt2Pnt1Var1;
                                v1139 = v1138 - diffPnt2Pnt1Var1;
                                v54 += v1078 * v1139 + diffPnt2Pnt1Var1 * v1078;
                                v56 = v1086 * v1139 + v1096;
                                if (pnt3Var1After)
                                {
                                    v1094 = heightViewPort_93ADC;
                                    ySum = heightViewPort_93ADC;
                                }
                                v57 = (uint32*)&unk_93AE0;
                            LABEL_119:
                                if (v1279)
                                {
                                    v29 = (unsigned __int8)byte_967E1;
                                    switch (byte_967E1)
                                    {
                                    case 0:
                                        goto LABEL_309;
                                    case 1:
                                        goto LABEL_322;
                                    case 2:
                                        goto LABEL_351;
                                    case 3:
                                        goto LABEL_382;
                                    case 4:
                                        goto LABEL_445;
                                    case 5:
                                        goto LABEL_474;
                                    case 6:
                                        goto LABEL_503;
                                    case 7:
                                    case 11:
                                        goto LABEL_564;
                                    case 8:
                                        goto LABEL_595;
                                    case 9:
                                    case 10:
                                        goto LABEL_658;
                                    case 12:
                                        goto LABEL_721;
                                    case 13:
                                        goto LABEL_752;
                                    case 14:
                                        goto LABEL_783;
                                    case 15:
                                        goto LABEL_812;
                                    case 16:
                                        goto LABEL_841;
                                    case 17:
                                        goto LABEL_870;
                                    case 18:
                                        goto LABEL_899;
                                    case 19:
                                        goto LABEL_930;
                                    case 20:
                                        goto LABEL_961;
                                    case 21:
                                        goto LABEL_992;
                                    case 22:
                                        goto LABEL_1023;
                                    case 23:
                                        goto LABEL_1086;
                                    case 24:
                                        goto LABEL_1149;
                                    case 25:
                                        goto LABEL_1212;
                                    case 26:
                                        goto LABEL_1275;
                                    }
                                }
                                do
                                {
                                    *v57 = v54;
                                    v54 += v1078;
                                    v57[1] = v56;
                                    v56 += v1086;
                                    v57 += 5;
                                    --v1094;
                                } while (v1094);
                                v29 = (unsigned __int8)byte_967E1;
                                switch (byte_967E1)
                                {
                                case 0:
                                    goto LABEL_309;
                                case 1:
                                    goto LABEL_322;
                                case 2:
                                    goto LABEL_351;
                                case 3:
                                    goto LABEL_382;
                                case 4:
                                    goto LABEL_445;
                                case 5:
                                    goto LABEL_474;
                                case 6:
                                    goto LABEL_503;
                                case 7:
                                case 11:
                                    goto LABEL_564;
                                case 8:
                                    goto LABEL_595;
                                case 9:
                                case 10:
                                    goto LABEL_658;
                                case 12:
                                    goto LABEL_721;
                                case 13:
                                    goto LABEL_752;
                                case 14:
                                    goto LABEL_783;
                                case 15:
                                    goto LABEL_812;
                                case 16:
                                    goto LABEL_841;
                                case 17:
                                    goto LABEL_870;
                                case 18:
                                    goto LABEL_899;
                                case 19:
                                    goto LABEL_930;
                                case 20:
                                    goto LABEL_961;
                                case 21:
                                    goto LABEL_992;
                                case 22:
                                    goto LABEL_1023;
                                case 23:
                                    goto LABEL_1086;
                                case 24:
                                    goto LABEL_1149;
                                case 25:
                                    goto LABEL_1212;
                                case 26:
                                    goto LABEL_1275;
                                }
                            }
                            diffPnt2Pnt1Var1 += v1173;
                            v54 += v1078 * v1138;
                            v55 += v1138 * v1082;
                            if (pnt3Var1After)
                            {
                                ySum = heightViewPort_93ADC;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC;
                                }
                                else
                                {
                                    v1279 = heightViewPort_93ADC <= diffPnt2Pnt1Var1;
                                    v1094 = heightViewPort_93ADC - diffPnt2Pnt1Var1;
                                }
                            }
                        LABEL_116:
                            v57 = (uint32*)&unk_93AE0;
                            do
                            {
                                *v57 = v54;
                                v54 += v1078;
                                v57[1] = v55;
                                v55 += v1082;
                                v57 += 5;
                                --diffPnt2Pnt1Var1;
                            } while (diffPnt2Pnt1Var1);
                            v56 = v1096;
                            goto LABEL_119;
                        }
                        return;
                    case 1:
                    case 4:
                    case 16:
                    case 17:
                        v43 = v12 * (__int64)(*v3 - *v5) / v1088;
                        v44 = *v4 - *v3;
                        v45 = v43 + v44 == 0;
                        v16 = (v43 + v44 < 0) ^ __OFADD__(v43, v44);
                        v46 = v43 + v44;
                        if (v16)
                            return;
                        if (!v45)
                            scaledZ = (int)(v4[4] + diffPnt2Pnt1Var1 * (__int64)(v3[4] - v5[4]) / v1088 - v3[4]) / (v46 + 1);
                        v1123 = (v5[4] - v3[4]) / v1088;
                        v47 = *v3 << 16;
                        v48 = v47;
                        v49 = v3[4];
                        if (!v1275)
                        {
                            if (pnt3Var1After)
                            {
                                v52 = heightViewPort_93ADC - v1173;
                                ySum = heightViewPort_93ADC - v1173;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC - v1173;
                                }
                                else
                                {
                                    v27 = __OFSUB__(v52, diffPnt2Pnt1Var1);
                                    v53 = v52 - diffPnt2Pnt1Var1;
                                    v1279 = (v53 < 0) ^ v27 | (v53 == 0);
                                    v1094 = v53;
                                }
                            }
                            goto LABEL_95;
                        }
                        v16 = ySum <= -v1173;
                        ySum += v1173;
                        if (!v16)
                        {
                            v1136 = -v1173;
                            if (-v1173 - diffPnt2Pnt1Var1 >= 0)
                            {
                                v1094 -= v1136 - diffPnt2Pnt1Var1;
                                v1137 = v1136 - diffPnt2Pnt1Var1;
                                v47 += v1078 * v1137 + diffPnt2Pnt1Var1 * v1078;
                                v50 = v1086 * v1137 + v1096;
                                v49 += v1137 * v1123 + diffPnt2Pnt1Var1 * v1123;
                                if (pnt3Var1After)
                                {
                                    v1094 = heightViewPort_93ADC;
                                    ySum = heightViewPort_93ADC;
                                }
                                v51 = (uint32*)&unk_93AE0;
                            LABEL_98:
                                if (v1279)
                                {
                                    v29 = (unsigned __int8)byte_967E1;
                                    switch (byte_967E1)
                                    {
                                    case 0:
                                        goto LABEL_309;
                                    case 1:
                                        goto LABEL_322;
                                    case 2:
                                        goto LABEL_351;
                                    case 3:
                                        goto LABEL_382;
                                    case 4:
                                        goto LABEL_445;
                                    case 5:
                                        goto LABEL_474;
                                    case 6:
                                        goto LABEL_503;
                                    case 7:
                                    case 11:
                                        goto LABEL_564;
                                    case 8:
                                        goto LABEL_595;
                                    case 9:
                                    case 10:
                                        goto LABEL_658;
                                    case 12:
                                        goto LABEL_721;
                                    case 13:
                                        goto LABEL_752;
                                    case 14:
                                        goto LABEL_783;
                                    case 15:
                                        goto LABEL_812;
                                    case 16:
                                        goto LABEL_841;
                                    case 17:
                                        goto LABEL_870;
                                    case 18:
                                        goto LABEL_899;
                                    case 19:
                                        goto LABEL_930;
                                    case 20:
                                        goto LABEL_961;
                                    case 21:
                                        goto LABEL_992;
                                    case 22:
                                        goto LABEL_1023;
                                    case 23:
                                        goto LABEL_1086;
                                    case 24:
                                        goto LABEL_1149;
                                    case 25:
                                        goto LABEL_1212;
                                    case 26:
                                        goto LABEL_1275;
                                    }
                                }
                                do
                                {
                                    *v51 = v47;
                                    v47 += v1078;
                                    v51[1] = v50;
                                    v50 += v1086;
                                    v51[4] = v49;
                                    v49 += v1123;
                                    v51 += 5;
                                    --v1094;
                                } while (v1094);
                                v29 = (unsigned __int8)byte_967E1;
                                switch (byte_967E1)
                                {
                                case 0:
                                    goto LABEL_309;
                                case 1:
                                    goto LABEL_322;
                                case 2:
                                    goto LABEL_351;
                                case 3:
                                    goto LABEL_382;
                                case 4:
                                    goto LABEL_445;
                                case 5:
                                    goto LABEL_474;
                                case 6:
                                    goto LABEL_503;
                                case 7:
                                case 11:
                                    goto LABEL_564;
                                case 8:
                                    goto LABEL_595;
                                case 9:
                                case 10:
                                    goto LABEL_658;
                                case 12:
                                    goto LABEL_721;
                                case 13:
                                    goto LABEL_752;
                                case 14:
                                    goto LABEL_783;
                                case 15:
                                    goto LABEL_812;
                                case 16:
                                    goto LABEL_841;
                                case 17:
                                    goto LABEL_870;
                                case 18:
                                    goto LABEL_899;
                                case 19:
                                    goto LABEL_930;
                                case 20:
                                    goto LABEL_961;
                                case 21:
                                    goto LABEL_992;
                                case 22:
                                    goto LABEL_1023;
                                case 23:
                                    goto LABEL_1086;
                                case 24:
                                    goto LABEL_1149;
                                case 25:
                                    goto LABEL_1212;
                                case 26:
                                    goto LABEL_1275;
                                }
                            }
                            diffPnt2Pnt1Var1 += v1173;
                            v47 += v1078 * v1136;
                            v48 += v1136 * v1082;
                            v49 += v1136 * v1123;
                            if (pnt3Var1After)
                            {
                                ySum = heightViewPort_93ADC;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC;
                                }
                                else
                                {
                                    v1279 = heightViewPort_93ADC <= diffPnt2Pnt1Var1;
                                    v1094 = heightViewPort_93ADC - diffPnt2Pnt1Var1;
                                }
                            }
                        LABEL_95:
                            v51 = (uint32*)&unk_93AE0;
                            do
                            {
                                *v51 = v47;
                                v47 += v1078;
                                v51[1] = v48;
                                v48 += v1082;
                                v51[4] = v49;
                                v49 += v1123;
                                v51 += 5;
                                --diffPnt2Pnt1Var1;
                            } while (diffPnt2Pnt1Var1);
                            v50 = v1096;
                            goto LABEL_98;
                        }
                        return;
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 18:
                    case 19:
                    case 22:
                    case 23:
                        v30 = v12 * (__int64)(*v3 - *v5) / v1088;
                        v31 = *v4 - *v3;
                        v32 = v30 + v31 == 0;
                        v16 = (v30 + v31 < 0) ^ __OFADD__(v30, v31);
                        v33 = v30 + v31;
                        if (v16)
                            return;
                        if (!v32)
                        {
                            v34 = v33 + 1;
                            scaledU = (int)(v4[2] + diffPnt2Pnt1Var1 * (__int64)(v3[2] - v5[2]) / v1088 - v3[2]) / v34;
                            scaledV = (int)(v4[3] + diffPnt2Pnt1Var1 * (__int64)(v3[3] - v5[3]) / v1088 - v3[3]) / v34;
                        }
                        v1101 = (v5[2] - v3[2]) / v1088;
                        v1112 = (v5[3] - v3[3]) / v1088;
                        v35 = *v3 << 16;
                        v36 = v35;
                        v37 = v3[2];
                        v38 = v3[3];
                        if (!v1275)
                        {
                            if (pnt3Var1After)
                            {
                                v41 = heightViewPort_93ADC - v1173;
                                ySum = heightViewPort_93ADC - v1173;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC - v1173;
                                }
                                else
                                {
                                    v27 = __OFSUB__(v41, diffPnt2Pnt1Var1);
                                    v42 = v41 - diffPnt2Pnt1Var1;
                                    v1279 = (v42 < 0) ^ v27 | (v42 == 0);
                                    v1094 = v42;
                                }
                            }
                            goto LABEL_71;
                        }
                        v16 = ySum <= -v1173;
                        ySum += v1173;
                        if (!v16)
                        {
                            v1134 = -v1173;
                            if (-v1173 - diffPnt2Pnt1Var1 >= 0)
                            {
                                v1094 -= v1134 - diffPnt2Pnt1Var1;
                                v1135 = v1134 - diffPnt2Pnt1Var1;
                                v35 += v1078 * v1135 + diffPnt2Pnt1Var1 * v1078;
                                v39 = v1086 * v1135 + v1096;
                                v37 += v1135 * v1101 + diffPnt2Pnt1Var1 * v1101;
                                v38 += v1135 * v1112 + diffPnt2Pnt1Var1 * v1112;
                                if (pnt3Var1After)
                                {
                                    v1094 = heightViewPort_93ADC;
                                    ySum = heightViewPort_93ADC;
                                }
                                v40 = (uint32*)&unk_93AE0;
                            LABEL_74:
                                if (v1279)
                                {
                                    v29 = (unsigned __int8)byte_967E1;
                                    switch (byte_967E1)
                                    {
                                    case 0:
                                        goto LABEL_309;
                                    case 1:
                                        goto LABEL_322;
                                    case 2:
                                        goto LABEL_351;
                                    case 3:
                                        goto LABEL_382;
                                    case 4:
                                        goto LABEL_445;
                                    case 5:
                                        goto LABEL_474;
                                    case 6:
                                        goto LABEL_503;
                                    case 7:
                                    case 11:
                                        goto LABEL_564;
                                    case 8:
                                        goto LABEL_595;
                                    case 9:
                                    case 10:
                                        goto LABEL_658;
                                    case 12:
                                        goto LABEL_721;
                                    case 13:
                                        goto LABEL_752;
                                    case 14:
                                        goto LABEL_783;
                                    case 15:
                                        goto LABEL_812;
                                    case 16:
                                        goto LABEL_841;
                                    case 17:
                                        goto LABEL_870;
                                    case 18:
                                        goto LABEL_899;
                                    case 19:
                                        goto LABEL_930;
                                    case 20:
                                        goto LABEL_961;
                                    case 21:
                                        goto LABEL_992;
                                    case 22:
                                        goto LABEL_1023;
                                    case 23:
                                        goto LABEL_1086;
                                    case 24:
                                        goto LABEL_1149;
                                    case 25:
                                        goto LABEL_1212;
                                    case 26:
                                        goto LABEL_1275;
                                    }
                                }
                                do
                                {
                                    *v40 = v35;
                                    v35 += v1078;
                                    v40[1] = v39;
                                    v39 += v1086;
                                    v40[2] = v37;
                                    v37 += v1101;
                                    v40[3] = v38;
                                    v38 += v1112;
                                    v40 += 5;
                                    --v1094;
                                } while (v1094);
                                v29 = (unsigned __int8)byte_967E1;
                                switch (byte_967E1)
                                {
                                case 0:
                                    goto LABEL_309;
                                case 1:
                                    goto LABEL_322;
                                case 2:
                                    goto LABEL_351;
                                case 3:
                                    goto LABEL_382;
                                case 4:
                                    goto LABEL_445;
                                case 5:
                                    goto LABEL_474;
                                case 6:
                                    goto LABEL_503;
                                case 7:
                                case 11:
                                    goto LABEL_564;
                                case 8:
                                    goto LABEL_595;
                                case 9:
                                case 10:
                                    goto LABEL_658;
                                case 12:
                                    goto LABEL_721;
                                case 13:
                                    goto LABEL_752;
                                case 14:
                                    goto LABEL_783;
                                case 15:
                                    goto LABEL_812;
                                case 16:
                                    goto LABEL_841;
                                case 17:
                                    goto LABEL_870;
                                case 18:
                                    goto LABEL_899;
                                case 19:
                                    goto LABEL_930;
                                case 20:
                                    goto LABEL_961;
                                case 21:
                                    goto LABEL_992;
                                case 22:
                                    goto LABEL_1023;
                                case 23:
                                    goto LABEL_1086;
                                case 24:
                                    goto LABEL_1149;
                                case 25:
                                    goto LABEL_1212;
                                case 26:
                                    goto LABEL_1275;
                                }
                            }
                            diffPnt2Pnt1Var1 += v1173;
                            v35 += v1078 * v1134;
                            v36 += v1134 * v1082;
                            v37 += v1134 * v1101;
                            v38 += v1134 * v1112;
                            if (pnt3Var1After)
                            {
                                ySum = heightViewPort_93ADC;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC;
                                }
                                else
                                {
                                    v1279 = heightViewPort_93ADC <= diffPnt2Pnt1Var1;
                                    v1094 = heightViewPort_93ADC - diffPnt2Pnt1Var1;
                                }
                            }
                        LABEL_71:
                            v40 = (uint32*)&unk_93AE0;
                            do
                            {
                                *v40 = v35;
                                v35 += v1078;
                                v40[1] = v36;
                                v36 += v1082;
                                v40[2] = v37;
                                v37 += v1101;
                                v40[3] = v38;
                                v38 += v1112;
                                v40 += 5;
                                --diffPnt2Pnt1Var1;
                            } while (diffPnt2Pnt1Var1);
                            v39 = v1096;
                            goto LABEL_74;
                        }
                        return;
                    case 5:
                    case 6:
                    case 20:
                    case 21:
                    case 24:
                    case 25:
                    case 26:
                        v13 = v12 * (__int64)(*v3 - *v5) / v1088;
                        v14 = *v4 - *v3;
                        v15 = v13 + v14 == 0;
                        v16 = (v13 + v14 < 0) ^ __OFADD__(v13, v14);
                        v17 = v13 + v14;
                        if (v16)
                            return;
                        if (!v15)
                        {
                            v18 = v17 + 1;
                            scaledU = (int)(v4[2] + diffPnt2Pnt1Var1 * (__int64)(v3[2] - v5[2]) / v1088 - v3[2]) / v18;
                            scaledV = (int)(v4[3] + diffPnt2Pnt1Var1 * (__int64)(v3[3] - v5[3]) / v1088 - v3[3]) / v18;
                            scaledZ = (int)(v4[4] + diffPnt2Pnt1Var1 * (__int64)(v3[4] - v5[4]) / v1088 - v3[4]) / v18;
                        }
                        v1100 = (v5[2] - v3[2]) / v1088;
                        v1111 = (v5[3] - v3[3]) / v1088;
                        v1122 = (v5[4] - v3[4]) / v1088;
                        v19 = *v3 << 16;
                        v20 = v19;
                        v21 = v3[2];
                        v22 = v3[3];
                        v23 = v3[4];
                        if (!v1275)
                        {
                            if (pnt3Var1After)
                            {
                                v26 = heightViewPort_93ADC - v1173;
                                ySum = heightViewPort_93ADC - v1173;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC - v1173;
                                }
                                else
                                {
                                    v27 = __OFSUB__(v26, diffPnt2Pnt1Var1);
                                    v28 = v26 - diffPnt2Pnt1Var1;
                                    v1279 = (v28 < 0) ^ v27 | (v28 == 0);
                                    v1094 = v28;
                                }
                            }
                            goto LABEL_47;
                        }
                        v16 = ySum <= -v1173;
                        ySum += v1173;
                        if (!v16)
                        {
                            v1132 = -v1173;
                            if (-v1173 - diffPnt2Pnt1Var1 >= 0)
                            {
                                v1094 -= v1132 - diffPnt2Pnt1Var1;
                                v1133 = v1132 - diffPnt2Pnt1Var1;
                                v19 += v1078 * v1133 + diffPnt2Pnt1Var1 * v1078;
                                v24 = v1086 * v1133 + v1096;
                                v21 += v1133 * v1100 + diffPnt2Pnt1Var1 * v1100;
                                v22 += v1133 * v1111 + diffPnt2Pnt1Var1 * v1111;
                                v23 += v1133 * v1122 + diffPnt2Pnt1Var1 * v1122;
                                if (pnt3Var1After)
                                {
                                    v1094 = heightViewPort_93ADC;
                                    ySum = heightViewPort_93ADC;
                                }
                                v25 = (uint32*)&unk_93AE0;
                            LABEL_50:
                                if (v1279)
                                {
                                    v29 = (unsigned __int8)byte_967E1;
                                    switch (byte_967E1)
                                    {
                                    case 0:
                                        goto LABEL_309;
                                    case 1:
                                        goto LABEL_322;
                                    case 2:
                                        goto LABEL_351;
                                    case 3:
                                        goto LABEL_382;
                                    case 4:
                                        goto LABEL_445;
                                    case 5:
                                        goto LABEL_474;
                                    case 6:
                                        goto LABEL_503;
                                    case 7:
                                    case 11:
                                        goto LABEL_564;
                                    case 8:
                                        goto LABEL_595;
                                    case 9:
                                    case 10:
                                        goto LABEL_658;
                                    case 12:
                                        goto LABEL_721;
                                    case 13:
                                        goto LABEL_752;
                                    case 14:
                                        goto LABEL_783;
                                    case 15:
                                        goto LABEL_812;
                                    case 16:
                                        goto LABEL_841;
                                    case 17:
                                        goto LABEL_870;
                                    case 18:
                                        goto LABEL_899;
                                    case 19:
                                        goto LABEL_930;
                                    case 20:
                                        goto LABEL_961;
                                    case 21:
                                        goto LABEL_992;
                                    case 22:
                                        goto LABEL_1023;
                                    case 23:
                                        goto LABEL_1086;
                                    case 24:
                                        goto LABEL_1149;
                                    case 25:
                                        goto LABEL_1212;
                                    case 26:
                                        goto LABEL_1275;
                                    }
                                }
                                do
                                {
                                    *v25 = v19;
                                    v19 += v1078;
                                    v25[1] = v24;
                                    v24 += v1086;
                                    v25[2] = v21;
                                    v21 += v1100;
                                    v25[3] = v22;
                                    v22 += v1111;
                                    v25[4] = v23;
                                    v23 += v1122;
                                    v25 += 5;
                                    --v1094;
                                } while (v1094);
                                v29 = (unsigned __int8)byte_967E1;
                                switch (byte_967E1)
                                {
                                case 0:
                                    goto LABEL_309;
                                case 1:
                                    goto LABEL_322;
                                case 2:
                                    goto LABEL_351;
                                case 3:
                                    goto LABEL_382;
                                case 4:
                                    goto LABEL_445;
                                case 5:
                                    goto LABEL_474;
                                case 6:
                                    goto LABEL_503;
                                case 7:
                                case 11:
                                    goto LABEL_564;
                                case 8:
                                    goto LABEL_595;
                                case 9:
                                case 10:
                                    goto LABEL_658;
                                case 12:
                                    goto LABEL_721;
                                case 13:
                                    goto LABEL_752;
                                case 14:
                                    goto LABEL_783;
                                case 15:
                                    goto LABEL_812;
                                case 16:
                                    goto LABEL_841;
                                case 17:
                                    goto LABEL_870;
                                case 18:
                                    goto LABEL_899;
                                case 19:
                                    goto LABEL_930;
                                case 20:
                                    goto LABEL_961;
                                case 21:
                                    goto LABEL_992;
                                case 22:
                                    goto LABEL_1023;
                                case 23:
                                    goto LABEL_1086;
                                case 24:
                                    goto LABEL_1149;
                                case 25:
                                    goto LABEL_1212;
                                case 26:
                                    goto LABEL_1275;
                                }
                            }
                            diffPnt2Pnt1Var1 += v1173;
                            v19 += v1078 * v1132;
                            v20 += v1132 * v1082;
                            v21 += v1132 * v1100;
                            v22 += v1132 * v1111;
                            v23 += v1132 * v1122;
                            if (pnt3Var1After)
                            {
                                ySum = heightViewPort_93ADC;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC;
                                }
                                else
                                {
                                    v1279 = heightViewPort_93ADC <= diffPnt2Pnt1Var1;
                                    v1094 = heightViewPort_93ADC - diffPnt2Pnt1Var1;
                                }
                            }
                        LABEL_47:
                            v25 = (uint32*)&unk_93AE0;
                            do
                            {
                                *v25 = v19;
                                v19 += v1078;
                                v25[1] = v20;
                                v20 += v1082;
                                v25[2] = v21;
                                v21 += v1100;
                                v25[3] = v22;
                                v22 += v1111;
                                v25[4] = v23;
                                v23 += v1122;
                                v25 += 5;
                                --diffPnt2Pnt1Var1;
                            } while (diffPnt2Pnt1Var1);
                            v24 = v1096;
                            goto LABEL_50;
                        }
                        break;
                    }
                }
                return;
            }
            if (v7 != v8)
            {
                if (v7 <= v8)
                    goto LABEL_24;
                goto LABEL_124;
            }
            if (*(int32*)a2 <= *(int32*)a3)
                return;
        LABEL_225:
            v108 = v3[1];
            v1175 = v108;
            if (v108 >= 0)
            {
                if (v108 >= heightViewPort_93ADC)
                    return;
                actScrPtr = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * v108;
                v1277 = 0;
            }
            else
            {
                actScrPtr = beginPrevLineFrame_93AC8;
                v1277 = 1;
            }
            v109 = v5[1];
            v1281 = v109 > heightViewPort_93ADC;
            v1090 = v109 - v108;
            ySum = v109 - v108;
            v1080 = ((*v5 - *v3) << 16) / (v109 - v108);
            v1084 = ((*v4 - *v3) << 16) / (v109 - v108);
            switch (byte_967E1)
            {
            case 0:
            case 14:
            case 15:
                v130 = *v3 << 16;
                v131 = v130;
                if (v1277)
                {
                    v132 = -v1175;
                    v1090 += v1175;
                    v16 = ySum <= -v1175;
                    ySum += v1175;
                    if (v16)
                        return;
                    v130 += v1080 * v132;
                    v131 += v132 * v1084;
                    if (v1281)
                    {
                        ySum = heightViewPort_93ADC;
                        v1090 = heightViewPort_93ADC;
                    }
                }
                else if (v1281)
                {
                    ySum = heightViewPort_93ADC - v1175;
                    v1090 = heightViewPort_93ADC - v1175;
                }
                v133 = (uint32*)&unk_93AE0;
                do
                {
                    *v133 = v130;
                    v130 += v1080;
                    v133[1] = v131;
                    v131 += v1084;
                    v133 += 5;
                    --v1090;
                } while (v1090);
                v29 = (unsigned __int8)byte_967E1;
                switch (byte_967E1)
                {
                case 0:
                    goto LABEL_309;
                case 1:
                    goto LABEL_322;
                case 2:
                    goto LABEL_351;
                case 3:
                    goto LABEL_382;
                case 4:
                    goto LABEL_445;
                case 5:
                    goto LABEL_474;
                case 6:
                    goto LABEL_503;
                case 7:
                case 11:
                    goto LABEL_564;
                case 8:
                    goto LABEL_595;
                case 9:
                case 10:
                    goto LABEL_658;
                case 12:
                    goto LABEL_721;
                case 13:
                    goto LABEL_752;
                case 14:
                    goto LABEL_783;
                case 15:
                    goto LABEL_812;
                case 16:
                    goto LABEL_841;
                case 17:
                    goto LABEL_870;
                case 18:
                    goto LABEL_899;
                case 19:
                    goto LABEL_930;
                case 20:
                    goto LABEL_961;
                case 21:
                    goto LABEL_992;
                case 22:
                    goto LABEL_1023;
                case 23:
                    goto LABEL_1086;
                case 24:
                    goto LABEL_1149;
                case 25:
                    goto LABEL_1212;
                case 26:
                    goto LABEL_1275;
                }
            case 1:
            case 4:
            case 16:
            case 17:
                scaledZ = (v4[4] - v5[4]) / (*v4 - *v5);
                v1127 = (v5[4] - v3[4]) / ySum;
                v125 = *v3 << 16;
                v126 = v125;
                v127 = v3[4];
                if (v1277)
                {
                    v128 = -v1175;
                    v1090 += v1175;
                    v16 = ySum <= -v1175;
                    ySum += v1175;
                    if (v16)
                        return;
                    v125 += v1080 * v128;
                    v126 += v128 * v1084;
                    v127 += v128 * v1127;
                    if (v1281)
                    {
                        ySum = heightViewPort_93ADC;
                        v1090 = heightViewPort_93ADC;
                    }
                }
                else if (v1281)
                {
                    ySum = heightViewPort_93ADC - v1175;
                    v1090 = heightViewPort_93ADC - v1175;
                }
                v129 = (uint32*)&unk_93AE0;
                do
                {
                    *v129 = v125;
                    v125 += v1080;
                    v129[1] = v126;
                    v126 += v1084;
                    v129[4] = v127;
                    v127 += v1127;
                    v129 += 5;
                    --v1090;
                } while (v1090);
                v29 = (unsigned __int8)byte_967E1;
                switch (byte_967E1)
                {
                case 0:
                    goto LABEL_309;
                case 1:
                    goto LABEL_322;
                case 2:
                    goto LABEL_351;
                case 3:
                    goto LABEL_382;
                case 4:
                    goto LABEL_445;
                case 5:
                    goto LABEL_474;
                case 6:
                    goto LABEL_503;
                case 7:
                case 11:
                    goto LABEL_564;
                case 8:
                    goto LABEL_595;
                case 9:
                case 10:
                    goto LABEL_658;
                case 12:
                    goto LABEL_721;
                case 13:
                    goto LABEL_752;
                case 14:
                    goto LABEL_783;
                case 15:
                    goto LABEL_812;
                case 16:
                    goto LABEL_841;
                case 17:
                    goto LABEL_870;
                case 18:
                    goto LABEL_899;
                case 19:
                    goto LABEL_930;
                case 20:
                    goto LABEL_961;
                case 21:
                    goto LABEL_992;
                case 22:
                    goto LABEL_1023;
                case 23:
                    goto LABEL_1086;
                case 24:
                    goto LABEL_1149;
                case 25:
                    goto LABEL_1212;
                case 26:
                    goto LABEL_1275;
                }
            case 2:
            case 3:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 18:
            case 19:
            case 22:
            case 23:
                v118 = *v4 - *v5;
                scaledU = (v4[2] - v5[2]) / v118;
                scaledV = (v4[3] - v5[3]) / v118;
                v1105 = (v5[2] - v3[2]) / ySum;
                v1116 = (v5[3] - v3[3]) / ySum;
                v119 = *v3 << 16;
                v120 = v119;
                v121 = v3[2];
                v122 = v3[3];
                if (v1277)
                {
                    v123 = -v1175;
                    v1090 += v1175;
                    v16 = ySum <= -v1175;
                    ySum += v1175;
                    if (v16)
                        return;
                    v119 += v1080 * v123;
                    v120 += v123 * v1084;
                    v121 += v123 * v1105;
                    v122 += v123 * v1116;
                    if (v1281)
                    {
                        ySum = heightViewPort_93ADC;
                        v1090 = heightViewPort_93ADC;
                    }
                }
                else if (v1281)
                {
                    ySum = heightViewPort_93ADC - v1175;
                    v1090 = heightViewPort_93ADC - v1175;
                }
                v124 = (uint32*)&unk_93AE0;
                do
                {
                    *v124 = v119;
                    v119 += v1080;
                    v124[1] = v120;
                    v120 += v1084;
                    v124[2] = v121;
                    v121 += v1105;
                    v124[3] = v122;
                    v122 += v1116;
                    v124 += 5;
                    --v1090;
                } while (v1090);
                v29 = (unsigned __int8)byte_967E1;
                switch (byte_967E1)
                {
                case 0:
                    goto LABEL_309;
                case 1:
                    goto LABEL_322;
                case 2:
                    goto LABEL_351;
                case 3:
                    goto LABEL_382;
                case 4:
                    goto LABEL_445;
                case 5:
                    goto LABEL_474;
                case 6:
                    goto LABEL_503;
                case 7:
                case 11:
                    goto LABEL_564;
                case 8:
                    goto LABEL_595;
                case 9:
                case 10:
                    goto LABEL_658;
                case 12:
                    goto LABEL_721;
                case 13:
                    goto LABEL_752;
                case 14:
                    goto LABEL_783;
                case 15:
                    goto LABEL_812;
                case 16:
                    goto LABEL_841;
                case 17:
                    goto LABEL_870;
                case 18:
                    goto LABEL_899;
                case 19:
                    goto LABEL_930;
                case 20:
                    goto LABEL_961;
                case 21:
                    goto LABEL_992;
                case 22:
                    goto LABEL_1023;
                case 23:
                    goto LABEL_1086;
                case 24:
                    goto LABEL_1149;
                case 25:
                    goto LABEL_1212;
                case 26:
                    goto LABEL_1275;
                }
            case 5:
            case 6:
            case 20:
            case 21:
            case 24:
            case 25:
            case 26:
                v110 = *v4 - *v5;
                scaledU = (v4[2] - v5[2]) / v110;
                scaledV = (v4[3] - v5[3]) / v110;
                scaledZ = (v4[4] - v5[4]) / v110;
                v1104 = (v5[2] - v3[2]) / ySum;
                v1115 = (v5[3] - v3[3]) / ySum;
                v1126 = (v5[4] - v3[4]) / ySum;
                v111 = *v3 << 16;
                v112 = v111;
                v113 = v3[2];
                v114 = v3[3];
                v115 = v3[4];
                if (v1277)
                {
                    v116 = -v1175;
                    v1090 += v1175;
                    v16 = ySum <= -v1175;
                    ySum += v1175;
                    if (v16)
                        return;
                    v111 += v1080 * v116;
                    v112 += v116 * v1084;
                    v113 += v116 * v1104;
                    v114 += v116 * v1115;
                    v115 += v116 * v1126;
                    if (v1281)
                    {
                        ySum = heightViewPort_93ADC;
                        v1090 = heightViewPort_93ADC;
                    }
                }
                else if (v1281)
                {
                    ySum = heightViewPort_93ADC - v1175;
                    v1090 = heightViewPort_93ADC - v1175;
                }
                v117 = (uint32*)&unk_93AE0;
                do
                {
                    *v117 = v111;
                    v111 += v1080;
                    v117[1] = v112;
                    v112 += v1084;
                    v117[2] = v113;
                    v113 += v1104;
                    v117[3] = v114;
                    v114 += v1115;
                    v117[4] = v115;
                    v115 += v1126;
                    v117 += 5;
                    --v1090;
                } while (v1090);
                v29 = (unsigned __int8)byte_967E1;
                switch (byte_967E1)
                {
                case 0:
                    goto LABEL_309;
                case 1:
                    goto LABEL_322;
                case 2:
                    goto LABEL_351;
                case 3:
                    goto LABEL_382;
                case 4:
                    goto LABEL_445;
                case 5:
                    goto LABEL_474;
                case 6:
                    goto LABEL_503;
                case 7:
                case 11:
                    goto LABEL_564;
                case 8:
                    goto LABEL_595;
                case 9:
                case 10:
                    goto LABEL_658;
                case 12:
                    goto LABEL_721;
                case 13:
                    goto LABEL_752;
                case 14:
                    goto LABEL_783;
                case 15:
                    goto LABEL_812;
                case 16:
                    goto LABEL_841;
                case 17:
                    goto LABEL_870;
                case 18:
                    goto LABEL_899;
                case 19:
                    goto LABEL_930;
                case 20:
                    goto LABEL_961;
                case 21:
                    goto LABEL_992;
                case 22:
                    goto LABEL_1023;
                case 23:
                    goto LABEL_1086;
                case 24:
                    goto LABEL_1149;
                case 25:
                    goto LABEL_1212;
                case 26:
                    goto LABEL_1275;
                }
            }
        }
        if (*(int32*)a1 <= *(int32*)a3)
            return;
        v3 = (int32*)a3;
        v4 = (int32*)a1;
        v5 = (int32*)a2;
    LABEL_268:
        v134 = v3[1];
        v1176 = v134;
        if (v134 >= 0)
        {
            if (v134 >= heightViewPort_93ADC)
                return;
            actScrPtr = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * v134;
            v1278 = 0;
        }
        else
        {
            actScrPtr = beginPrevLineFrame_93AC8;
            v1278 = 1;
        }
        v135 = v5[1];
        v1282 = v135 > heightViewPort_93ADC;
        v1091 = v135 - v134;
        ySum = v135 - v134;
        v1081 = ((*v5 - *v3) << 16) / (v135 - v134);
        v1085 = ((*v5 - *v4) << 16) / (v135 - v134);
        switch (byte_967E1)
        {
        case 0:
        case 14:
        case 15:
            v156 = *v3 << 16;
            v157 = *v4 << 16;
            if (v1278)
            {
                v158 = -v1176;
                v1091 += v1176;
                v16 = ySum <= -v1176;
                ySum += v1176;
                if (v16)
                    return;
                v156 += v1081 * v158;
                v157 += v158 * v1085;
                if (v1282)
                {
                    ySum = heightViewPort_93ADC;
                    v1091 = heightViewPort_93ADC;
                }
            }
            else if (v1282)
            {
                ySum = heightViewPort_93ADC - v1176;
                v1091 = heightViewPort_93ADC - v1176;
            }
            v159 = (uint32*)&unk_93AE0;
            do
            {
                *v159 = v156;
                v156 += v1081;
                v159[1] = v157;
                v157 += v1085;
                v159 += 5;
                --v1091;
            } while (v1091);
            v29 = (unsigned __int8)byte_967E1;
            switch (byte_967E1)
            {
            case 0:
                goto LABEL_309;
            case 1:
                goto LABEL_322;
            case 2:
                goto LABEL_351;
            case 3:
                goto LABEL_382;
            case 4:
                goto LABEL_445;
            case 5:
                goto LABEL_474;
            case 6:
                goto LABEL_503;
            case 7:
            case 11:
                goto LABEL_564;
            case 8:
                goto LABEL_595;
            case 9:
            case 10:
                goto LABEL_658;
            case 12:
                goto LABEL_721;
            case 13:
                goto LABEL_752;
            case 14:
                goto LABEL_783;
            case 15:
                goto LABEL_812;
            case 16:
                goto LABEL_841;
            case 17:
                goto LABEL_870;
            case 18:
                goto LABEL_899;
            case 19:
                goto LABEL_930;
            case 20:
                goto LABEL_961;
            case 21:
                goto LABEL_992;
            case 22:
                goto LABEL_1023;
            case 23:
                goto LABEL_1086;
            case 24:
                goto LABEL_1149;
            case 25:
                goto LABEL_1212;
            case 26:
                goto LABEL_1275;
            }
        case 1:
        case 4:
        case 16:
        case 17:
            scaledZ = (v4[4] - v3[4]) / (*v4 - *v3);
            v1129 = (v5[4] - v3[4]) / ySum;
            v151 = *v3 << 16;
            v152 = *v4 << 16;
            v153 = v3[4];
            if (v1278)
            {
                v154 = -v1176;
                v1091 += v1176;
                v16 = ySum <= -v1176;
                ySum += v1176;
                if (v16)
                    return;
                v151 += v1081 * v154;
                v152 += v154 * v1085;
                v153 += v154 * v1129;
                if (v1282)
                {
                    ySum = heightViewPort_93ADC;
                    v1091 = heightViewPort_93ADC;
                }
            }
            else if (v1282)
            {
                ySum = heightViewPort_93ADC - v1176;
                v1091 = heightViewPort_93ADC - v1176;
            }
            v155 = (uint32*)&unk_93AE0;
            do
            {
                *v155 = v151;
                v151 += v1081;
                v155[1] = v152;
                v152 += v1085;
                v155[4] = v153;
                v153 += v1129;
                v155 += 5;
                --v1091;
            } while (v1091);
            v29 = (unsigned __int8)byte_967E1;
            switch (byte_967E1)
            {
            case 0:
                goto LABEL_309;
            case 1:
                goto LABEL_322;
            case 2:
                goto LABEL_351;
            case 3:
                goto LABEL_382;
            case 4:
                goto LABEL_445;
            case 5:
                goto LABEL_474;
            case 6:
                goto LABEL_503;
            case 7:
            case 11:
                goto LABEL_564;
            case 8:
                goto LABEL_595;
            case 9:
            case 10:
                goto LABEL_658;
            case 12:
                goto LABEL_721;
            case 13:
                goto LABEL_752;
            case 14:
                goto LABEL_783;
            case 15:
                goto LABEL_812;
            case 16:
                goto LABEL_841;
            case 17:
                goto LABEL_870;
            case 18:
                goto LABEL_899;
            case 19:
                goto LABEL_930;
            case 20:
                goto LABEL_961;
            case 21:
                goto LABEL_992;
            case 22:
                goto LABEL_1023;
            case 23:
                goto LABEL_1086;
            case 24:
                goto LABEL_1149;
            case 25:
                goto LABEL_1212;
            case 26:
                goto LABEL_1275;
            }
        case 2:
        case 3:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 18:
        case 19:
        case 22:
        case 23:
            v144 = *v4 - *v3;
            scaledU = (v4[2] - v3[2]) / v144;
            scaledV = (v4[3] - v3[3]) / v144;
            v1107 = (v5[2] - v3[2]) / ySum;
            v1118 = (v5[3] - v3[3]) / ySum;
            v145 = *v3 << 16;
            v146 = *v4 << 16;
            v147 = v3[2];
            v148 = v3[3];
            if (v1278)
            {
                v149 = -v1176;
                v1091 += v1176;
                v16 = ySum <= -v1176;
                ySum += v1176;
                if (v16)
                    return;
                v145 += v1081 * v149;
                v146 += v149 * v1085;
                v147 += v149 * v1107;
                v148 += v149 * v1118;
                if (v1282)
                {
                    ySum = heightViewPort_93ADC;
                    v1091 = heightViewPort_93ADC;
                }
            }
            else if (v1282)
            {
                ySum = heightViewPort_93ADC - v1176;
                v1091 = heightViewPort_93ADC - v1176;
            }
            v150 = (uint32*)&unk_93AE0;
            do
            {
                *v150 = v145;
                v145 += v1081;
                v150[1] = v146;
                v146 += v1085;
                v150[2] = v147;
                v147 += v1107;
                v150[3] = v148;
                v148 += v1118;
                v150 += 5;
                --v1091;
            } while (v1091);
            v29 = (unsigned __int8)byte_967E1;
            switch (byte_967E1)
            {
            case 0:
                goto LABEL_309;
            case 1:
                goto LABEL_322;
            case 2:
                goto LABEL_351;
            case 3:
                goto LABEL_382;
            case 4:
                goto LABEL_445;
            case 5:
                goto LABEL_474;
            case 6:
                goto LABEL_503;
            case 7:
            case 11:
                goto LABEL_564;
            case 8:
                goto LABEL_595;
            case 9:
            case 10:
                goto LABEL_658;
            case 12:
                goto LABEL_721;
            case 13:
                goto LABEL_752;
            case 14:
                goto LABEL_783;
            case 15:
                goto LABEL_812;
            case 16:
                goto LABEL_841;
            case 17:
                goto LABEL_870;
            case 18:
                goto LABEL_899;
            case 19:
                goto LABEL_930;
            case 20:
                goto LABEL_961;
            case 21:
                goto LABEL_992;
            case 22:
                goto LABEL_1023;
            case 23:
                goto LABEL_1086;
            case 24:
                goto LABEL_1149;
            case 25:
                goto LABEL_1212;
            case 26:
                goto LABEL_1275;
            }
        case 5:
        case 6:
        case 20:
        case 21:
        case 24:
        case 25:
        case 26:
            v136 = *v4 - *v3;
            scaledU = (v4[2] - v3[2]) / v136;
            scaledV = (v4[3] - v3[3]) / v136;
            scaledZ = (v4[4] - v3[4]) / v136;
            v1106 = (v5[2] - v3[2]) / ySum;
            v1117 = (v5[3] - v3[3]) / ySum;
            v1128 = (v5[4] - v3[4]) / ySum;
            v137 = *v3 << 16;
            v138 = *v4 << 16;
            v139 = v3[2];
            v140 = v3[3];
            v141 = v3[4];
            if (v1278)
            {
                v142 = -v1176;
                v1091 += v1176;
                v16 = ySum <= -v1176;
                ySum += v1176;
                if (v16)
                    return;
                v137 += v1081 * v142;
                v138 += v142 * v1085;
                v139 += v142 * v1106;
                v140 += v142 * v1117;
                v141 += v142 * v1128;
                if (v1282)
                {
                    ySum = heightViewPort_93ADC;
                    v1091 = heightViewPort_93ADC;
                }
            }
            else if (v1282)
            {
                ySum = heightViewPort_93ADC - v1176;
                v1091 = heightViewPort_93ADC - v1176;
            }
            v143 = (uint32*)&unk_93AE0;
            do
            {
                *v143 = v137;
                v137 += v1081;
                v143[1] = v138;
                v138 += v1085;
                v143[2] = v139;
                v139 += v1106;
                v143[3] = v140;
                v140 += v1117;
                v143[4] = v141;
                v141 += v1128;
                v143 += 5;
                --v1091;
            } while (v1091);
            break;
        }
        v29 = (unsigned __int8)byte_967E1;
        switch (byte_967E1)
        {
        case 0:
        LABEL_309:
            v160 = (unsigned __int16*)&unk_93AE0;
            v161 = (char*)actScrPtr;
            v162 = byte_967E0;
            HIWORD(v163) = 0;
            while (1)
            {
                LOWORD(v163) = v160[1];
                v164 = v160[3];
                v161 += pitchViewPort_93AD4;
                if ((v163 & 0x8000u) == 0)
                    break;
                if ((__int16)v164 > 0)
                {
                    if (v164 > widthViewPort_93AD8)
                        v164 = widthViewPort_93AD8;
                    v165 = v161;
                LABEL_319:
                    memset(v165, v162, v164);
                }
            LABEL_320:
                v160 += 10;
                if (!--ySum)
                    return;
            }
            if (v164 > widthViewPort_93AD8)
                v164 = widthViewPort_93AD8;
            v16 = (__int16)v164 <= (__int16)v163;
            LOWORD(v164) = v164 - v163;
            if (v16)
                goto LABEL_320;
            v165 = &v161[v163];
            goto LABEL_319;
        case 1:
        LABEL_322:
            for (i = (uint16*)&unk_93AE0; ; i += 10)
            {
                LOWORD(v29) = i[1];
                v167 = (unsigned __int16)i[3];
                v168 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v29 & 0x8000u) == 0)
                    break;
                if ((__int16)v167 > 0)
                {
                    v169 = scaledZ * (unsigned __int16)-(__int16)v29;
                    v170 = v169;
                    v29 = v169 >> 8;
                    v171 = __CFADD__(i[8], v170);
                    v172 = i[8] + v170;
                    BYTE1(v29) += *((_BYTE*)i + 18) + v171;
                    if (v167 > widthViewPort_93AD8)
                        LOWORD(v167) = widthViewPort_93AD8;
                    v29 = (unsigned __int16)v29;
                LABEL_332:
                    while (1)
                    {
                        *v168 = BYTE1(v29);
                        v171 = __CFADD__((_WORD)scaledZ, v172);
                        v173 = scaledZ + v172;
                        v174 = BYTE2(scaledZ) + v171 + BYTE1(v29);
                        v175 = v167 - 1;
                        if (!v175)
                            break;
                        v168[1] = v174;
                        v171 = __CFADD__((_WORD)scaledZ, v173);
                        v176 = scaledZ + v173;
                        v177 = BYTE2(scaledZ) + v171 + v174;
                        v178 = v175 - 1;
                        if (!v178)
                            break;
                        v168[2] = v177;
                        v171 = __CFADD__((_WORD)scaledZ, v176);
                        v179 = scaledZ + v176;
                        v180 = BYTE2(scaledZ) + v171 + v177;
                        v181 = v178 - 1;
                        if (!v181)
                            break;
                        v168[3] = v180;
                        v171 = __CFADD__((_WORD)scaledZ, v179);
                        v182 = scaledZ + v179;
                        v183 = BYTE2(scaledZ) + v171 + v180;
                        v184 = v181 - 1;
                        if (!v184)
                            break;
                        v168[4] = v183;
                        v171 = __CFADD__((_WORD)scaledZ, v182);
                        v185 = scaledZ + v182;
                        v186 = BYTE2(scaledZ) + v171 + v183;
                        v187 = v184 - 1;
                        if (!v187)
                            break;
                        v168[5] = v186;
                        v171 = __CFADD__((_WORD)scaledZ, v185);
                        v188 = scaledZ + v185;
                        v189 = BYTE2(scaledZ) + v171 + v186;
                        v190 = v187 - 1;
                        if (!v190)
                            break;
                        v168[6] = v189;
                        v171 = __CFADD__((_WORD)scaledZ, v188);
                        v191 = scaledZ + v188;
                        v192 = BYTE2(scaledZ) + v171 + v189;
                        v193 = v190 - 1;
                        if (!v193)
                            break;
                        v168[7] = v192;
                        v171 = __CFADD__((_WORD)scaledZ, v191);
                        v194 = scaledZ + v191;
                        v195 = BYTE2(scaledZ) + v171 + v192;
                        v196 = v193 - 1;
                        if (!v196)
                            break;
                        v168[8] = v195;
                        v171 = __CFADD__((_WORD)scaledZ, v194);
                        v197 = scaledZ + v194;
                        v198 = BYTE2(scaledZ) + v171 + v195;
                        v199 = v196 - 1;
                        if (!v199)
                            break;
                        v168[9] = v198;
                        v171 = __CFADD__((_WORD)scaledZ, v197);
                        v200 = scaledZ + v197;
                        v201 = BYTE2(scaledZ) + v171 + v198;
                        v202 = v199 - 1;
                        if (!v202)
                            break;
                        v168[10] = v201;
                        v171 = __CFADD__((_WORD)scaledZ, v200);
                        v203 = scaledZ + v200;
                        v204 = BYTE2(scaledZ) + v171 + v201;
                        v205 = v202 - 1;
                        if (!v205)
                            break;
                        v168[11] = v204;
                        v171 = __CFADD__((_WORD)scaledZ, v203);
                        v206 = scaledZ + v203;
                        v207 = BYTE2(scaledZ) + v171 + v204;
                        v208 = v205 - 1;
                        if (!v208)
                            break;
                        v168[12] = v207;
                        v171 = __CFADD__((_WORD)scaledZ, v206);
                        v209 = scaledZ + v206;
                        v210 = BYTE2(scaledZ) + v171 + v207;
                        v211 = v208 - 1;
                        if (!v211)
                            break;
                        v168[13] = v210;
                        v171 = __CFADD__((_WORD)scaledZ, v209);
                        v212 = scaledZ + v209;
                        v213 = BYTE2(scaledZ) + v171 + v210;
                        v214 = v211 - 1;
                        if (!v214)
                            break;
                        v168[14] = v213;
                        v171 = __CFADD__((_WORD)scaledZ, v212);
                        v215 = scaledZ + v212;
                        v216 = BYTE2(scaledZ) + v171 + v213;
                        v217 = v214 - 1;
                        if (!v217)
                            break;
                        v168[15] = v216;
                        v171 = __CFADD__((_WORD)scaledZ, v215);
                        v172 = scaledZ + v215;
                        BYTE1(v29) = BYTE2(scaledZ) + v171 + v216;
                        LOWORD(v167) = v217 - 1;
                        if (!(_WORD)v167)
                            break;
                        v168 += 16;
                    }
                }
            LABEL_349:
                if (!--ySum)
                    return;
            }
            if (v167 > widthViewPort_93AD8)
                LOWORD(v167) = widthViewPort_93AD8;
            v16 = (__int16)v167 <= (__int16)v29;
            LOWORD(v167) = v167 - v29;
            if (v16)
                goto LABEL_349;
            v168 += v29;
            v29 = (unsigned __int8)byte_967E0;
            v172 = i[8];
            BYTE1(v29) = *((_BYTE*)i + 18);
            goto LABEL_332;
        case 2:
        LABEL_351:
            v218 = (unsigned __int16*)&unk_93AE0;
            v1148 = scaledV << 16;
            HIWORD(v219) = 0;
            HIWORD(v220) = 0;
            while (1)
            {
                LOWORD(v219) = v218[1];
                v221 = v218[3];
                v222 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v219 & 0x8000u) == 0)
                    break;
                if ((__int16)v221 > 0)
                {
                    v223 = (unsigned __int16)-(__int16)v219;
                    v225 = __ROL4__(*((_DWORD*)v218 + 3) + scaledV * v223, 16);
                    BYTE1(v220) = v225;
                    v224 = *((_DWORD*)v218 + 2) + scaledU * v223;
                    LOWORD(v225) = v224;
                    v226 = v224 >> 8;
                    LOBYTE(v220) = BYTE1(v226);
                    if (v221 > widthViewPort_93AD8)
                        LOWORD(v221) = widthViewPort_93AD8;
                    v219 = (unsigned __int16)v226;
                LABEL_361:
                    v1257 = v218;
                    v227 = (int)actTexture_93AD0;
                    while (1)
                    {
                        v228 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v225);
                        LOWORD(v225) = scaledU + v225;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        *v222 = v228;
                        v171 = __CFADD__(v1148, v225);
                        v229 = v1148 + v225;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v230 = v221 - 1;
                        if (!v230)
                            break;
                        v231 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v229);
                        LOWORD(v229) = scaledU + v229;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[1] = v231;
                        v171 = __CFADD__(v1148, v229);
                        v232 = v1148 + v229;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v233 = v230 - 1;
                        if (!v233)
                            break;
                        v234 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v232);
                        LOWORD(v232) = scaledU + v232;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[2] = v234;
                        v171 = __CFADD__(v1148, v232);
                        v235 = v1148 + v232;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v236 = v233 - 1;
                        if (!v236)
                            break;
                        v237 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v235);
                        LOWORD(v235) = scaledU + v235;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[3] = v237;
                        v171 = __CFADD__(v1148, v235);
                        v238 = v1148 + v235;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v239 = v236 - 1;
                        if (!v239)
                            break;
                        v240 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v238);
                        LOWORD(v238) = scaledU + v238;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[4] = v240;
                        v171 = __CFADD__(v1148, v238);
                        v241 = v1148 + v238;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v242 = v239 - 1;
                        if (!v242)
                            break;
                        v243 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v241);
                        LOWORD(v241) = scaledU + v241;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[5] = v243;
                        v171 = __CFADD__(v1148, v241);
                        v244 = v1148 + v241;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v245 = v242 - 1;
                        if (!v245)
                            break;
                        v246 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v244);
                        LOWORD(v244) = scaledU + v244;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[6] = v246;
                        v171 = __CFADD__(v1148, v244);
                        v247 = v1148 + v244;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v248 = v245 - 1;
                        if (!v248)
                            break;
                        v249 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v247);
                        LOWORD(v247) = scaledU + v247;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[7] = v249;
                        v171 = __CFADD__(v1148, v247);
                        v250 = v1148 + v247;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v251 = v248 - 1;
                        if (!v251)
                            break;
                        v252 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v250);
                        LOWORD(v250) = scaledU + v250;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[8] = v252;
                        v171 = __CFADD__(v1148, v250);
                        v253 = v1148 + v250;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v254 = v251 - 1;
                        if (!v254)
                            break;
                        v255 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v253);
                        LOWORD(v253) = scaledU + v253;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[9] = v255;
                        v171 = __CFADD__(v1148, v253);
                        v256 = v1148 + v253;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v257 = v254 - 1;
                        if (!v257)
                            break;
                        v258 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v256);
                        LOWORD(v256) = scaledU + v256;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[10] = v258;
                        v171 = __CFADD__(v1148, v256);
                        v259 = v1148 + v256;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v260 = v257 - 1;
                        if (!v260)
                            break;
                        v261 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v259);
                        LOWORD(v259) = scaledU + v259;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[11] = v261;
                        v171 = __CFADD__(v1148, v259);
                        v262 = v1148 + v259;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v263 = v260 - 1;
                        if (!v263)
                            break;
                        v264 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v262);
                        LOWORD(v262) = scaledU + v262;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[12] = v264;
                        v171 = __CFADD__(v1148, v262);
                        v265 = v1148 + v262;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v266 = v263 - 1;
                        if (!v266)
                            break;
                        v267 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v265);
                        LOWORD(v265) = scaledU + v265;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[13] = v267;
                        v171 = __CFADD__(v1148, v265);
                        v268 = v1148 + v265;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v269 = v266 - 1;
                        if (!v269)
                            break;
                        v270 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v268);
                        LOWORD(v268) = scaledU + v268;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[14] = v270;
                        v171 = __CFADD__(v1148, v268);
                        v271 = v1148 + v268;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v272 = v269 - 1;
                        if (!v272)
                            break;
                        v273 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v271);
                        LOWORD(v271) = scaledU + v271;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[15] = v273;
                        v171 = __CFADD__(v1148, v271);
                        v225 = v1148 + v271;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        LOWORD(v221) = v272 - 1;
                        if (!(_WORD)v221)
                            break;
                        v222 += 16;
                    }
                    v218 = v1257;
                }
            LABEL_380:
                v218 += 10;
                if (!--ySum)
                    return;
            }
            if (v221 > widthViewPort_93AD8)
                LOWORD(v221) = widthViewPort_93AD8;
            v16 = (__int16)v221 <= (__int16)v219;
            LOWORD(v221) = v221 - v219;
            if (v16)
                goto LABEL_380;
            v222 += v219;
            v225 = __ROL4__(*((_DWORD*)v218 + 3), 16);
            BYTE1(v220) = v225;
            LOWORD(v225) = v218[4];
            LOBYTE(v220) = *((_BYTE*)v218 + 10);
            goto LABEL_361;
        case 3:
        LABEL_382:
            v274 = (unsigned __int16*)&unk_93AE0;
            v1149 = scaledV << 16;
            HIWORD(v275) = 0;
            HIWORD(v276) = 0;
            while (1)
            {
                LOWORD(v275) = v274[1];
                v277 = v274[3];
                v278 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v275 & 0x8000u) == 0)
                    break;
                if ((__int16)v277 > 0)
                {
                    v279 = (unsigned __int16)-(__int16)v275;
                    v281 = __ROL4__(*((_DWORD*)v274 + 3) + scaledV * v279, 16);
                    BYTE1(v276) = v281;
                    v280 = *((_DWORD*)v274 + 2) + scaledU * v279;
                    LOWORD(v281) = v280;
                    v282 = v280 >> 8;
                    LOBYTE(v276) = BYTE1(v282);
                    if (v277 > widthViewPort_93AD8)
                        LOWORD(v277) = widthViewPort_93AD8;
                    v275 = (unsigned __int16)v282;
                LABEL_392:
                    v1258 = v274;
                    v283 = (int)actTexture_93AD0;
                    while (1)
                    {
                        v284 = *(_BYTE*)(v276 + v283);
                        if (v284)
                            *v278 = v284;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v281);
                        LOWORD(v281) = scaledU + v281;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v281);
                        v285 = v1149 + v281;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v286 = v277 - 1;
                        if (!v286)
                            break;
                        v287 = *(_BYTE*)(v276 + v283);
                        if (v287)
                            v278[1] = v287;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v285);
                        LOWORD(v285) = scaledU + v285;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v285);
                        v288 = v1149 + v285;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v289 = v286 - 1;
                        if (!v289)
                            break;
                        v290 = *(_BYTE*)(v276 + v283);
                        if (v290)
                            v278[2] = v290;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v288);
                        LOWORD(v288) = scaledU + v288;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v288);
                        v291 = v1149 + v288;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v292 = v289 - 1;
                        if (!v292)
                            break;
                        v293 = *(_BYTE*)(v276 + v283);
                        if (v293)
                            v278[3] = v293;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v291);
                        LOWORD(v291) = scaledU + v291;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v291);
                        v294 = v1149 + v291;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v295 = v292 - 1;
                        if (!v295)
                            break;
                        v296 = *(_BYTE*)(v276 + v283);
                        if (v296)
                            v278[4] = v296;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v294);
                        LOWORD(v294) = scaledU + v294;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v294);
                        v297 = v1149 + v294;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v298 = v295 - 1;
                        if (!v298)
                            break;
                        v299 = *(_BYTE*)(v276 + v283);
                        if (v299)
                            v278[5] = v299;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v297);
                        LOWORD(v297) = scaledU + v297;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v297);
                        v300 = v1149 + v297;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v301 = v298 - 1;
                        if (!v301)
                            break;
                        v302 = *(_BYTE*)(v276 + v283);
                        if (v302)
                            v278[6] = v302;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v300);
                        LOWORD(v300) = scaledU + v300;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v300);
                        v303 = v1149 + v300;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v304 = v301 - 1;
                        if (!v304)
                            break;
                        v305 = *(_BYTE*)(v276 + v283);
                        if (v305)
                            v278[7] = v305;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v303);
                        LOWORD(v303) = scaledU + v303;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v303);
                        v306 = v1149 + v303;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v307 = v304 - 1;
                        if (!v307)
                            break;
                        v308 = *(_BYTE*)(v276 + v283);
                        if (v308)
                            v278[8] = v308;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v306);
                        LOWORD(v306) = scaledU + v306;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v306);
                        v309 = v1149 + v306;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v310 = v307 - 1;
                        if (!v310)
                            break;
                        v311 = *(_BYTE*)(v276 + v283);
                        if (v311)
                            v278[9] = v311;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v309);
                        LOWORD(v309) = scaledU + v309;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v309);
                        v312 = v1149 + v309;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v313 = v310 - 1;
                        if (!v313)
                            break;
                        v314 = *(_BYTE*)(v276 + v283);
                        if (v314)
                            v278[10] = v314;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v312);
                        LOWORD(v312) = scaledU + v312;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v312);
                        v315 = v1149 + v312;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v316 = v313 - 1;
                        if (!v316)
                            break;
                        v317 = *(_BYTE*)(v276 + v283);
                        if (v317)
                            v278[11] = v317;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v315);
                        LOWORD(v315) = scaledU + v315;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v315);
                        v318 = v1149 + v315;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v319 = v316 - 1;
                        if (!v319)
                            break;
                        v320 = *(_BYTE*)(v276 + v283);
                        if (v320)
                            v278[12] = v320;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v318);
                        LOWORD(v318) = scaledU + v318;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v318);
                        v321 = v1149 + v318;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v322 = v319 - 1;
                        if (!v322)
                            break;
                        v323 = *(_BYTE*)(v276 + v283);
                        if (v323)
                            v278[13] = v323;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v321);
                        LOWORD(v321) = scaledU + v321;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v321);
                        v324 = v1149 + v321;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v325 = v322 - 1;
                        if (!v325)
                            break;
                        v326 = *(_BYTE*)(v276 + v283);
                        if (v326)
                            v278[14] = v326;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v324);
                        LOWORD(v324) = scaledU + v324;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v324);
                        v327 = v1149 + v324;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v328 = v325 - 1;
                        if (!v328)
                            break;
                        v329 = *(_BYTE*)(v276 + v283);
                        if (v329)
                            v278[15] = v329;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v327);
                        LOWORD(v327) = scaledU + v327;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v327);
                        v281 = v1149 + v327;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        LOWORD(v277) = v328 - 1;
                        if (!(_WORD)v277)
                            break;
                        v278 += 16;
                    }
                    v274 = v1258;
                }
            LABEL_443:
                v274 += 10;
                if (!--ySum)
                    return;
            }
            if (v277 > widthViewPort_93AD8)
                LOWORD(v277) = widthViewPort_93AD8;
            v16 = (__int16)v277 <= (__int16)v275;
            LOWORD(v277) = v277 - v275;
            if (v16)
                goto LABEL_443;
            v278 += v275;
            v281 = __ROL4__(*((_DWORD*)v274 + 3), 16);
            BYTE1(v276) = v281;
            LOWORD(v281) = v274[4];
            LOBYTE(v276) = *((_BYTE*)v274 + 10);
            goto LABEL_392;
        case 4:
        LABEL_445:
            for (j = (uint16*)&unk_93AE0; ; j += 10)
            {
                LOWORD(v29) = j[1];
                v331 = (unsigned __int16)j[3];
                v332 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v29 & 0x8000u) == 0)
                    break;
                if ((__int16)v331 > 0)
                {
                    v333 = scaledZ * (unsigned __int16)-(__int16)v29;
                    v334 = v333;
                    v29 = v333 >> 8;
                    v171 = __CFADD__(j[8], v334);
                    v335 = j[8] + v334;
                    BYTE1(v29) += *((_BYTE*)j + 18) + v171;
                    if (v331 > widthViewPort_93AD8)
                        LOWORD(v331) = widthViewPort_93AD8;
                    v29 = (unsigned __int16)v29;
                    LOBYTE(v29) = byte_967E0;
                LABEL_455:
                    while (1)
                    {
                        *v332 = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v335);
                        v336 = scaledZ + v335;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v337 = v331 - 1;
                        if (!v337)
                            break;
                        v332[1] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v336);
                        v338 = scaledZ + v336;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v339 = v337 - 1;
                        if (!v339)
                            break;
                        v332[2] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v338);
                        v340 = scaledZ + v338;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v341 = v339 - 1;
                        if (!v341)
                            break;
                        v332[3] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v340);
                        v342 = scaledZ + v340;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v343 = v341 - 1;
                        if (!v343)
                            break;
                        v332[4] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v342);
                        v344 = scaledZ + v342;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v345 = v343 - 1;
                        if (!v345)
                            break;
                        v332[5] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v344);
                        v346 = scaledZ + v344;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v347 = v345 - 1;
                        if (!v347)
                            break;
                        v332[6] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v346);
                        v348 = scaledZ + v346;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v349 = v347 - 1;
                        if (!v349)
                            break;
                        v332[7] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v348);
                        v350 = scaledZ + v348;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v351 = v349 - 1;
                        if (!v351)
                            break;
                        v332[8] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v350);
                        v352 = scaledZ + v350;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v353 = v351 - 1;
                        if (!v353)
                            break;
                        v332[9] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v352);
                        v354 = scaledZ + v352;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v355 = v353 - 1;
                        if (!v355)
                            break;
                        v332[10] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v354);
                        v356 = scaledZ + v354;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v357 = v355 - 1;
                        if (!v357)
                            break;
                        v332[11] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v356);
                        v358 = scaledZ + v356;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v359 = v357 - 1;
                        if (!v359)
                            break;
                        v332[12] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v358);
                        v360 = scaledZ + v358;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v361 = v359 - 1;
                        if (!v361)
                            break;
                        v332[13] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v360);
                        v362 = scaledZ + v360;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v363 = v361 - 1;
                        if (!v363)
                            break;
                        v332[14] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v362);
                        v364 = scaledZ + v362;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v365 = v363 - 1;
                        if (!v365)
                            break;
                        v332[15] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v364);
                        v335 = scaledZ + v364;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        LOWORD(v331) = v365 - 1;
                        if (!(_WORD)v331)
                            break;
                        v332 += 16;
                    }
                }
            LABEL_472:
                if (!--ySum)
                    return;
            }
            if (v331 > widthViewPort_93AD8)
                LOWORD(v331) = widthViewPort_93AD8;
            v16 = (__int16)v331 <= (__int16)v29;
            LOWORD(v331) = v331 - v29;
            if (v16)
                goto LABEL_472;
            v332 += v29;
            v29 = (unsigned __int8)byte_967E0;
            v335 = j[8];
            BYTE1(v29) = *((_BYTE*)j + 18);
            goto LABEL_455;
        case 5:
        LABEL_474:
            //v1259 = (char*)&unk_93AE0;
            v1259x = 0;
            v1150 = scaledV << 16;
            v1166 = scaledZ << 16;
            HIWORD(textPointer) = 0;
            HIWORD(v367) = 0;
            while (1)
            {
                //adress 0x245FFB_
                //debug
#ifdef debug1
            //if (compare_index_245FFB == 0x1d3)
            /*if (compare_index_245FFB == 0x1D0)
            {
                compare_index_245FFB++;
                compare_index_245FFB--;
            }
            add_compare(0x245FFB, true, true);
            compare_index_245FFB++;*/
#endif debug1
            //debug

            //v368 = (char*)&unk_93AE0[v1259x];
                v1259x++;
                //v368 = v1259;
                //v1259 += 20;
                LOWORD(textPointer) = unk_93AE0[v1259x].x_0.a16[1];
                v369 = unk_93AE0[v1259x].y_1.a16[1];
                v370 = pitchViewPort_93AD4 + actScrPtr;
                actScrPtr += pitchViewPort_93AD4;
                if ((textPointer & 0x8000u) == 0)
                    break;
                if ((__int16)v369 > 0)
                {
                    textIndex = (unsigned __int16)-(__int16)textPointer;
                    v372 = __ROL4__(unk_93AE0[v1259x].v_3.a32 + scaledV * textIndex, 16);
                    BYTE1(v367) = v372;
                    LOWORD(v372) = unk_93AE0[v1259x].u_2.a16[0] + scaledU * textIndex;
                    textPointer = (unsigned int)(unk_93AE0[v1259x].u_2.a32 + scaledU * textIndex) >> 8;
                    LOBYTE(v367) = (unsigned int)(unk_93AE0[v1259x].y_1.a16[0] + scaledU * textIndex) >> 16;
                    v373 = __ROL4__(unk_93AE0[v1259x].z_4.a32 + scaledZ * textIndex, 16);
                    BYTE1(textPointer) = v373;
                    LOWORD(v373) = unk_93AE0[v1259x].y_1.a16[1];
                    textPointer = (unsigned __int16)textPointer;
                    if ((__int16)v373 > (__int16)widthViewPort_93AD8)
                        LOWORD(v373) = widthViewPort_93AD8;
                LABEL_484:
                    v376 = (_BYTE*)(dword_74F95_754A5[v373 & 0xF] + v370);
                    v377 = (int)actTexture_93AD0;
                    switch (v373 & 0xF)
                    {
                    case 0:
                        goto LABEL_485;
                    case 1:
                        goto LABEL_500;
                    case 2:
                        goto LABEL_499;
                    case 3:
                        goto LABEL_498;
                    case 4:
                        goto LABEL_497;
                    case 5:
                        goto LABEL_496;
                    case 6:
                        goto LABEL_495;
                    case 7:
                        goto LABEL_494;
                    case 8:
                        goto LABEL_493;
                    case 9:
                        goto LABEL_492;
                    case 0xA:
                        goto LABEL_491;
                    case 0xB:
                        goto LABEL_490;
                    case 0xC:
                        goto LABEL_489;
                    case 0xD:
                        goto LABEL_488;
                    case 0xE:
                        goto LABEL_487;
                    case 0xF:
                        while (1)
                        {
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[1] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_487:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[2] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_488:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[3] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_489:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[4] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_490:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[5] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_491:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[6] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_492:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[7] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_493:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[8] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_494:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[9] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_495:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[10] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_496:
                            //adress 0x24629B_ 
                            //debug
                            /*#ifdef debug1
                                              if (compare_index_24629B == 0xa5)
                                              {
                                                  compare_index_24629B++;
                                                  compare_index_24629B--;
                                              }
                            add_compare(0x24629B, true, true);
                            compare_index_24629B++;
                            #endif debug1*/
                            //debug
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[11] = strPal.fog_B7934_B7924[textPointer];//here
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_497:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[12] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_498:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[13] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_499:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[14] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_500:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[15] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                            v376 += 16;
                            v16 = (__int16)v373 <= 16;
                            LOWORD(v373) = v373 - 16;
                            if (v16)
                                break;
                        LABEL_485:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            *v376 = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        }
                        break;
                    }
                }
            LABEL_501:
                if (!--ySum)
                    return;
            }
            if (v369 > widthViewPort_93AD8)
                LOWORD(v369) = widthViewPort_93AD8;
            v16 = (__int16)v369 <= (__int16)textPointer;
            v374 = v369 - textPointer;
            if (v16)
                goto LABEL_501;
            v370 += textPointer;
            LOBYTE(v367) = unk_93AE0[v1259x].u_2.a16[1];
            v372 = __ROL4__(unk_93AE0[v1259x].v_3.a32, 16);
            v375 = v374;
            BYTE1(v367) = v372;
            LOWORD(v372) = unk_93AE0[v1259x].u_2.a16[0];
            v373 = __ROL4__(unk_93AE0[v1259x].z_4.a32, 16);
            BYTE1(textPointer) = v373;
            LOWORD(v373) = v375;
            goto LABEL_484;
        case 6:
        LABEL_503:
            v1260 = (char*)&unk_93AE0;
            v1151 = scaledV << 16;
            v1167 = scaledZ << 16;
            HIWORD(v378) = 0;
            HIWORD(v379) = 0;
            while (1)
            {
                v380 = v1260;
                v1260 += 20;
                LOWORD(v378) = *((_WORD*)v380 + 1);
                v381 = *((unsigned __int16*)v380 + 3);
                v382 = pitchViewPort_93AD4 + actScrPtr;
                actScrPtr += pitchViewPort_93AD4;
                if ((v378 & 0x8000u) == 0)
                    break;
                if ((__int16)v381 > 0)
                {
                    v383 = (unsigned __int16)-(__int16)v378;
                    v384 = __ROL4__(*((_DWORD*)v380 + 3) + scaledV * v383, 16);
                    BYTE1(v379) = v384;
                    LOWORD(v384) = *((_WORD*)v380 + 4) + scaledU * v383;
                    v378 = (unsigned int)(*((_DWORD*)v380 + 2) + scaledU * v383) >> 8;
                    LOBYTE(v379) = (unsigned int)(*((_DWORD*)v380 + 2) + scaledU * v383) >> 16;
                    v385 = __ROL4__(*((_DWORD*)v380 + 4) + scaledZ * v383, 16);
                    BYTE1(v378) = v385;
                    LOWORD(v385) = *((_WORD*)v380 + 3);
                    v378 = (unsigned __int16)v378;
                    if ((__int16)v385 > (__int16)widthViewPort_93AD8)
                        LOWORD(v385) = widthViewPort_93AD8;
                LABEL_513:
                    v388 = (_BYTE*)(dword_74F95_754A5[v385 & 0xF] + v382);
                    v389 = (int)actTexture_93AD0;
                    switch (v385 & 0xF)
                    {
                    case 0:
                        goto LABEL_514;
                    case 1:
                        goto LABEL_559;
                    case 2:
                        goto LABEL_556;
                    case 3:
                        goto LABEL_553;
                    case 4:
                        goto LABEL_550;
                    case 5:
                        goto LABEL_547;
                    case 6:
                        goto LABEL_544;
                    case 7:
                        goto LABEL_541;
                    case 8:
                        goto LABEL_538;
                    case 9:
                        goto LABEL_535;
                    case 0xA:
                        goto LABEL_532;
                    case 0xB:
                        goto LABEL_529;
                    case 0xC:
                        goto LABEL_526;
                    case 0xD:
                        goto LABEL_523;
                    case 0xE:
                        goto LABEL_520;
                    case 0xF:
                        while (1)
                        {
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[1] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_520:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[2] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_523:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[3] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_526:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[4] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_529:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[5] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_532:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[6] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_535:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[7] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_538:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[8] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_541:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[9] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_544:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[10] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_547:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[11] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_550:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[12] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_553:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[13] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_556:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[14] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_559:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[15] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                            v388 += 16;
                            v16 = (__int16)v385 <= 16;
                            LOWORD(v385) = v385 - 16;
                            if (v16)
                                break;
                        LABEL_514:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                *v388 = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        }
                        break;
                    }
                }
            LABEL_562:
                if (!--ySum)
                    return;
            }
            if (v381 > widthViewPort_93AD8)
                LOWORD(v381) = widthViewPort_93AD8;
            v16 = (__int16)v381 <= (__int16)v378;
            v386 = v381 - v378;
            if (v16)
                goto LABEL_562;
            v382 += v378;
            LOBYTE(v379) = v380[10];
            v384 = __ROL4__(*((_DWORD*)v380 + 3), 16);
            v387 = v386;
            BYTE1(v379) = v384;
            LOWORD(v384) = *((_WORD*)v380 + 4);
            v385 = __ROL4__(*((_DWORD*)v380 + 4), 16);
            BYTE1(v378) = v385;
            LOWORD(v385) = v387;
            goto LABEL_513;
        case 7:
        case 11:
        LABEL_564:
            //adress 0x24674B_
            //debug
#ifdef debug1
            if (compare_index_24674B == 0)
            {
                compare_index_24674B++;
                compare_index_24674B--;
            }
            //add_compare(0x24674B, true, true);
            compare_index_24674B++;
#endif debug1
            //debug
            v390 = (unsigned __int16*)&unk_93AE0;
            v1152 = scaledV << 16;
            HIWORD(v391) = 0;
            HIWORD(v392) = 0;
            while (1)
            {
                LOWORD(v391) = v390[1];
                v393 = v390[3];
                v394 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v391 & 0x8000u) == 0)
                    break;
                if ((__int16)v393 > 0)
                {
                    v395 = (unsigned __int16)-(__int16)v391;
                    v397 = __ROL4__(*((_DWORD*)v390 + 3) + scaledV * v395, 16);
                    BYTE1(v392) = v397;
                    v396 = *((_DWORD*)v390 + 2) + scaledU * v395;
                    LOWORD(v397) = v396;
                    v398 = v396 >> 8;
                    LOBYTE(v392) = BYTE1(v398);
                    if (v393 > widthViewPort_93AD8)
                        LOWORD(v393) = widthViewPort_93AD8;
                    v391 = (unsigned __int16)v398;
                LABEL_574:
                    v1261 = v390;
                    v399 = (int)actTexture_93AD0;
                    BYTE1(v391) = byte_967E0;
                    while (1)
                    {
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v397);
                        LOWORD(v397) = scaledU + v397;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v397);
                        v400 = v1152 + v397;
                        *v394 = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v401 = v393 - 1;
                        if (!v401)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v400);
                        LOWORD(v400) = scaledU + v400;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v400);
                        v402 = v1152 + v400;
                        v394[1] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v403 = v401 - 1;
                        if (!v403)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v402);
                        LOWORD(v402) = scaledU + v402;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v402);
                        v404 = v1152 + v402;
                        v394[2] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v405 = v403 - 1;
                        if (!v405)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v404);
                        LOWORD(v404) = scaledU + v404;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v404);
                        v406 = v1152 + v404;
                        v394[3] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v407 = v405 - 1;
                        if (!v407)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v406);
                        LOWORD(v406) = scaledU + v406;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v406);
                        v408 = v1152 + v406;
                        v394[4] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v409 = v407 - 1;
                        if (!v409)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v408);
                        LOWORD(v408) = scaledU + v408;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v408);
                        v410 = v1152 + v408;
                        v394[5] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v411 = v409 - 1;
                        if (!v411)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v410);
                        LOWORD(v410) = scaledU + v410;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v410);
                        v412 = v1152 + v410;
                        v394[6] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v413 = v411 - 1;
                        if (!v413)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v412);
                        LOWORD(v412) = scaledU + v412;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v412);
                        v414 = v1152 + v412;
                        v394[7] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v415 = v413 - 1;
                        if (!v415)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v414);
                        LOWORD(v414) = scaledU + v414;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v414);
                        v416 = v1152 + v414;
                        v394[8] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v417 = v415 - 1;
                        if (!v417)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v416);
                        LOWORD(v416) = scaledU + v416;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v416);
                        v418 = v1152 + v416;
                        v394[9] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v419 = v417 - 1;
                        if (!v419)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v418);
                        LOWORD(v418) = scaledU + v418;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v418);
                        v420 = v1152 + v418;
                        v394[10] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v421 = v419 - 1;
                        if (!v421)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v420);
                        LOWORD(v420) = scaledU + v420;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v420);
                        v422 = v1152 + v420;
                        v394[11] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v423 = v421 - 1;
                        if (!v423)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v422);
                        LOWORD(v422) = scaledU + v422;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v422);
                        v424 = v1152 + v422;
                        v394[12] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v425 = v423 - 1;
                        if (!v425)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v424);
                        LOWORD(v424) = scaledU + v424;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v424);
                        v426 = v1152 + v424;
                        v394[13] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v427 = v425 - 1;
                        if (!v427)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v426);
                        LOWORD(v426) = scaledU + v426;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v426);
                        v428 = v1152 + v426;
                        v394[14] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v429 = v427 - 1;
                        if (!v429)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v428);
                        LOWORD(v428) = scaledU + v428;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v428);
                        v397 = v1152 + v428;
                        v394[15] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        LOWORD(v393) = v429 - 1;
                        if (!(_WORD)v393)
                            break;
                        v394 += 16;
                    }
                    v390 = v1261;
                }
            LABEL_593:
                v390 += 10;
                if (!--ySum)
                    return;
            }
            if (v393 > widthViewPort_93AD8)
                LOWORD(v393) = widthViewPort_93AD8;
            v16 = (__int16)v393 <= (__int16)v391;
            LOWORD(v393) = v393 - v391;
            if (v16)
                goto LABEL_593;
            v394 += v391;
            v397 = __ROL4__(*((_DWORD*)v390 + 3), 16);
            BYTE1(v392) = v397;
            LOWORD(v397) = v390[4];
            LOBYTE(v392) = *((_BYTE*)v390 + 10);
            goto LABEL_574;
        case 8:
        LABEL_595:
            v430 = (unsigned __int16*)&unk_93AE0;
            v1153 = scaledV << 16;
            HIWORD(v431) = 0;
            HIWORD(v432) = 0;
            while (1)
            {
                LOWORD(v431) = v430[1];
                v433 = v430[3];
                v434 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v431 & 0x8000u) == 0)
                    break;
                if ((__int16)v433 > 0)
                {
                    v435 = (unsigned __int16)-(__int16)v431;
                    v437 = __ROL4__(*((_DWORD*)v430 + 3) + scaledV * v435, 16);
                    BYTE1(v432) = v437;
                    v436 = *((_DWORD*)v430 + 2) + scaledU * v435;
                    LOWORD(v437) = v436;
                    v438 = v436 >> 8;
                    LOBYTE(v432) = BYTE1(v438);
                    if (v433 > widthViewPort_93AD8)
                        LOWORD(v433) = widthViewPort_93AD8;
                    v431 = (unsigned __int16)v438;
                LABEL_605:
                    v1262 = v430;
                    v439 = (int)actTexture_93AD0;
                    BYTE1(v431) = byte_967E0;
                    while (1)
                    {
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v437);
                        LOWORD(v437) = scaledU + v437;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            *v434 = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v437);
                        v440 = v1153 + v437;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v441 = v433 - 1;
                        if (!v441)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v440);
                        LOWORD(v440) = scaledU + v440;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[1] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v440);
                        v442 = v1153 + v440;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v443 = v441 - 1;
                        if (!v443)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v442);
                        LOWORD(v442) = scaledU + v442;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[2] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v442);
                        v444 = v1153 + v442;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v445 = v443 - 1;
                        if (!v445)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v444);
                        LOWORD(v444) = scaledU + v444;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[3] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v444);
                        v446 = v1153 + v444;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v447 = v445 - 1;
                        if (!v447)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v446);
                        LOWORD(v446) = scaledU + v446;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[4] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v446);
                        v448 = v1153 + v446;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v449 = v447 - 1;
                        if (!v449)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v448);
                        LOWORD(v448) = scaledU + v448;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[5] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v448);
                        v450 = v1153 + v448;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v451 = v449 - 1;
                        if (!v451)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v450);
                        LOWORD(v450) = scaledU + v450;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[6] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v450);
                        v452 = v1153 + v450;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v453 = v451 - 1;
                        if (!v453)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v452);
                        LOWORD(v452) = scaledU + v452;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[7] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v452);
                        v454 = v1153 + v452;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v455 = v453 - 1;
                        if (!v455)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v454);
                        LOWORD(v454) = scaledU + v454;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[8] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v454);
                        v456 = v1153 + v454;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v457 = v455 - 1;
                        if (!v457)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v456);
                        LOWORD(v456) = scaledU + v456;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[9] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v456);
                        v458 = v1153 + v456;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v459 = v457 - 1;
                        if (!v459)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v458);
                        LOWORD(v458) = scaledU + v458;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[10] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v458);
                        v460 = v1153 + v458;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v461 = v459 - 1;
                        if (!v461)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v460);
                        LOWORD(v460) = scaledU + v460;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[11] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v460);
                        v462 = v1153 + v460;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v463 = v461 - 1;
                        if (!v463)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v462);
                        LOWORD(v462) = scaledU + v462;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[12] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v462);
                        v464 = v1153 + v462;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v465 = v463 - 1;
                        if (!v465)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v464);
                        LOWORD(v464) = scaledU + v464;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[13] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v464);
                        v466 = v1153 + v464;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v467 = v465 - 1;
                        if (!v467)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v466);
                        LOWORD(v466) = scaledU + v466;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[14] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v466);
                        v468 = v1153 + v466;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v469 = v467 - 1;
                        if (!v469)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v468);
                        LOWORD(v468) = scaledU + v468;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[15] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v468);
                        v437 = v1153 + v468;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        LOWORD(v433) = v469 - 1;
                        if (!(_WORD)v433)
                            break;
                        v434 += 16;
                    }
                    v430 = v1262;
                }
            LABEL_656:
                v430 += 10;
                if (!--ySum)
                    return;
            }
            if (v433 > widthViewPort_93AD8)
                LOWORD(v433) = widthViewPort_93AD8;
            v16 = (__int16)v433 <= (__int16)v431;
            LOWORD(v433) = v433 - v431;
            if (v16)
                goto LABEL_656;
            v434 += v431;
            v437 = __ROL4__(*((_DWORD*)v430 + 3), 16);
            BYTE1(v432) = v437;
            LOWORD(v437) = v430[4];
            LOBYTE(v432) = *((_BYTE*)v430 + 10);
            goto LABEL_605;
        case 9:
        case 10:
        LABEL_658:
            v470 = (unsigned __int16*)&unk_93AE0;
            v1154 = scaledV << 16;
            HIWORD(v471) = 0;
            HIWORD(v472) = 0;
            while (1)
            {
                LOWORD(v471) = v470[1];
                v473 = v470[3];
                v474 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v471 & 0x8000u) == 0)
                    break;
                if ((__int16)v473 > 0)
                {
                    v475 = (unsigned __int16)-(__int16)v471;
                    v477 = __ROL4__(*((_DWORD*)v470 + 3) + scaledV * v475, 16);
                    BYTE1(v472) = v477;
                    v476 = *((_DWORD*)v470 + 2) + scaledU * v475;
                    LOWORD(v477) = v476;
                    v478 = v476 >> 8;
                    LOBYTE(v472) = BYTE1(v478);
                    if (v473 > widthViewPort_93AD8)
                        LOWORD(v473) = widthViewPort_93AD8;
                    v471 = (unsigned __int16)v478;
                LABEL_668:
                    v1263 = v470;
                    v479 = (int)actTexture_93AD0;
                    while (1)
                    {
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v477);
                        LOWORD(v477) = scaledU + v477;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = *v474;
                            *v474 = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v477);
                        v480 = v1154 + v477;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v481 = v473 - 1;
                        if (!v481)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v480);
                        LOWORD(v480) = scaledU + v480;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[1];
                            v474[1] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v480);
                        v482 = v1154 + v480;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v483 = v481 - 1;
                        if (!v483)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v482);
                        LOWORD(v482) = scaledU + v482;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[2];
                            v474[2] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v482);
                        v484 = v1154 + v482;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v485 = v483 - 1;
                        if (!v485)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v484);
                        LOWORD(v484) = scaledU + v484;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[3];
                            v474[3] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v484);
                        v486 = v1154 + v484;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v487 = v485 - 1;
                        if (!v487)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v486);
                        LOWORD(v486) = scaledU + v486;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[4];
                            v474[4] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v486);
                        v488 = v1154 + v486;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v489 = v487 - 1;
                        if (!v489)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v488);
                        LOWORD(v488) = scaledU + v488;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[5];
                            v474[5] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v488);
                        v490 = v1154 + v488;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v491 = v489 - 1;
                        if (!v491)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v490);
                        LOWORD(v490) = scaledU + v490;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[6];
                            v474[6] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v490);
                        v492 = v1154 + v490;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v493 = v491 - 1;
                        if (!v493)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v492);
                        LOWORD(v492) = scaledU + v492;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[7];
                            v474[7] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v492);
                        v494 = v1154 + v492;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v495 = v493 - 1;
                        if (!v495)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v494);
                        LOWORD(v494) = scaledU + v494;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[8];
                            v474[8] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v494);
                        v496 = v1154 + v494;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v497 = v495 - 1;
                        if (!v497)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v496);
                        LOWORD(v496) = scaledU + v496;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[9];
                            v474[9] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v496);
                        v498 = v1154 + v496;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v499 = v497 - 1;
                        if (!v499)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v498);
                        LOWORD(v498) = scaledU + v498;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[10];
                            v474[10] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v498);
                        v500 = v1154 + v498;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v501 = v499 - 1;
                        if (!v501)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v500);
                        LOWORD(v500) = scaledU + v500;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[11];
                            v474[11] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v500);
                        v502 = v1154 + v500;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v503 = v501 - 1;
                        if (!v503)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v502);
                        LOWORD(v502) = scaledU + v502;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[12];
                            v474[12] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v502);
                        v504 = v1154 + v502;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v505 = v503 - 1;
                        if (!v505)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v504);
                        LOWORD(v504) = scaledU + v504;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[13];
                            v474[13] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v504);
                        v506 = v1154 + v504;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v507 = v505 - 1;
                        if (!v507)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v506);
                        LOWORD(v506) = scaledU + v506;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[14];
                            v474[14] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v506);
                        v508 = v1154 + v506;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v509 = v507 - 1;
                        if (!v509)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v508);
                        LOWORD(v508) = scaledU + v508;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[15];
                            v474[15] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v508);
                        v477 = v1154 + v508;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        LOWORD(v473) = v509 - 1;
                        if (!(_WORD)v473)
                            break;
                        v474 += 16;
                    }
                    v470 = v1263;
                }
            LABEL_719:
                v470 += 10;
                if (!--ySum)
                    return;
            }
            if (v473 > widthViewPort_93AD8)
                LOWORD(v473) = widthViewPort_93AD8;
            v16 = (__int16)v473 <= (__int16)v471;
            LOWORD(v473) = v473 - v471;
            if (v16)
                goto LABEL_719;
            v474 += v471;
            v477 = __ROL4__(*((_DWORD*)v470 + 3), 16);
            BYTE1(v472) = v477;
            LOWORD(v477) = v470[4];
            LOBYTE(v472) = *((_BYTE*)v470 + 10);
            goto LABEL_668;
        case 12:
        LABEL_721:
            v510 = (unsigned __int16*)&unk_93AE0;
            v1155 = scaledV << 16;
            HIWORD(v511) = 0;
            HIWORD(v512) = 0;
            while (1)
            {
                LOWORD(v511) = v510[1];
                v513 = v510[3];
                v514 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v511 & 0x8000u) == 0)
                    break;
                if ((__int16)v513 > 0)
                {
                    v515 = (unsigned __int16)-(__int16)v511;
                    v517 = __ROL4__(*((_DWORD*)v510 + 3) + scaledV * v515, 16);
                    BYTE1(v512) = v517;
                    v516 = *((_DWORD*)v510 + 2) + scaledU * v515;
                    LOWORD(v517) = v516;
                    v518 = v516 >> 8;
                    LOBYTE(v512) = BYTE1(v518);
                    if (v513 > widthViewPort_93AD8)
                        LOWORD(v513) = widthViewPort_93AD8;
                    v511 = (unsigned __int16)v518;
                LABEL_731:
                    v1264 = v510;
                    v519 = (int)actTexture_93AD0;
                    LOBYTE(v511) = byte_967E0;
                    while (1)
                    {
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v517);
                        LOWORD(v517) = scaledU + v517;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v517);
                        v520 = v1155 + v517;
                        *v514 = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v521 = v513 - 1;
                        if (!v521)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v520);
                        LOWORD(v520) = scaledU + v520;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v520);
                        v522 = v1155 + v520;
                        v514[1] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v523 = v521 - 1;
                        if (!v523)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v522);
                        LOWORD(v522) = scaledU + v522;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v522);
                        v524 = v1155 + v522;
                        v514[2] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v525 = v523 - 1;
                        if (!v525)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v524);
                        LOWORD(v524) = scaledU + v524;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v524);
                        v526 = v1155 + v524;
                        v514[3] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v527 = v525 - 1;
                        if (!v527)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v526);
                        LOWORD(v526) = scaledU + v526;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v526);
                        v528 = v1155 + v526;
                        v514[4] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v529 = v527 - 1;
                        if (!v529)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v528);
                        LOWORD(v528) = scaledU + v528;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v528);
                        v530 = v1155 + v528;
                        v514[5] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v531 = v529 - 1;
                        if (!v531)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v530);
                        LOWORD(v530) = scaledU + v530;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v530);
                        v532 = v1155 + v530;
                        v514[6] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v533 = v531 - 1;
                        if (!v533)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v532);
                        LOWORD(v532) = scaledU + v532;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v532);
                        v534 = v1155 + v532;
                        v514[7] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v535 = v533 - 1;
                        if (!v535)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v534);
                        LOWORD(v534) = scaledU + v534;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v534);
                        v536 = v1155 + v534;
                        v514[8] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v537 = v535 - 1;
                        if (!v537)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v536);
                        LOWORD(v536) = scaledU + v536;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v536);
                        v538 = v1155 + v536;
                        v514[9] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v539 = v537 - 1;
                        if (!v539)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v538);
                        LOWORD(v538) = scaledU + v538;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v538);
                        v540 = v1155 + v538;
                        v514[10] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v541 = v539 - 1;
                        if (!v541)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v540);
                        LOWORD(v540) = scaledU + v540;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v540);
                        v542 = v1155 + v540;
                        v514[11] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v543 = v541 - 1;
                        if (!v543)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v542);
                        LOWORD(v542) = scaledU + v542;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v542);
                        v544 = v1155 + v542;
                        v514[12] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v545 = v543 - 1;
                        if (!v545)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v544);
                        LOWORD(v544) = scaledU + v544;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v544);
                        v546 = v1155 + v544;
                        v514[13] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v547 = v545 - 1;
                        if (!v547)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v546);
                        LOWORD(v546) = scaledU + v546;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v546);
                        v548 = v1155 + v546;
                        v514[14] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v549 = v547 - 1;
                        if (!v549)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v548);
                        LOWORD(v548) = scaledU + v548;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v548);
                        v517 = v1155 + v548;
                        v514[15] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        LOWORD(v513) = v549 - 1;
                        if (!(_WORD)v513)
                            break;
                        v514 += 16;
                    }
                    v510 = v1264;
                }
            LABEL_750:
                v510 += 10;
                if (!--ySum)
                    return;
            }
            if (v513 > widthViewPort_93AD8)
                LOWORD(v513) = widthViewPort_93AD8;
            v16 = (__int16)v513 <= (__int16)v511;
            LOWORD(v513) = v513 - v511;
            if (v16)
                goto LABEL_750;
            v514 += v511;
            v517 = __ROL4__(*((_DWORD*)v510 + 3), 16);
            BYTE1(v512) = v517;
            LOWORD(v517) = v510[4];
            LOBYTE(v512) = *((_BYTE*)v510 + 10);
            goto LABEL_731;
        case 13:
        LABEL_752:
            v550 = (unsigned __int16*)&unk_93AE0;
            v1156 = scaledV << 16;
            HIWORD(v551) = 0;
            HIWORD(v552) = 0;
            while (1)
            {
                LOWORD(v551) = v550[1];
                v553 = v550[3];
                v554 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v551 & 0x8000u) == 0)
                    break;
                if ((__int16)v553 > 0)
                {
                    v555 = (unsigned __int16)-(__int16)v551;
                    v557 = __ROL4__(*((_DWORD*)v550 + 3) + scaledV * v555, 16);
                    BYTE1(v552) = v557;
                    v556 = *((_DWORD*)v550 + 2) + scaledU * v555;
                    LOWORD(v557) = v556;
                    v558 = v556 >> 8;
                    LOBYTE(v552) = BYTE1(v558);
                    if (v553 > widthViewPort_93AD8)
                        LOWORD(v553) = widthViewPort_93AD8;
                    v551 = (unsigned __int16)v558;
                LABEL_762:
                    v1265 = v550;
                    v559 = (int)actTexture_93AD0;
                    BYTE1(v551) = byte_967E0;
                    while (1)
                    {
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v557);
                        LOWORD(v557) = scaledU + v557;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v557);
                        v560 = v1156 + v557;
                        *v554 = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v561 = v553 - 1;
                        if (!v561)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v560);
                        LOWORD(v560) = scaledU + v560;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v560);
                        v562 = v1156 + v560;
                        v554[1] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v563 = v561 - 1;
                        if (!v563)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v562);
                        LOWORD(v562) = scaledU + v562;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v562);
                        v564 = v1156 + v562;
                        v554[2] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v565 = v563 - 1;
                        if (!v565)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v564);
                        LOWORD(v564) = scaledU + v564;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v564);
                        v566 = v1156 + v564;
                        v554[3] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v567 = v565 - 1;
                        if (!v567)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v566);
                        LOWORD(v566) = scaledU + v566;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v566);
                        v568 = v1156 + v566;
                        v554[4] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v569 = v567 - 1;
                        if (!v569)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v568);
                        LOWORD(v568) = scaledU + v568;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v568);
                        v570 = v1156 + v568;
                        v554[5] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v571 = v569 - 1;
                        if (!v571)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v570);
                        LOWORD(v570) = scaledU + v570;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v570);
                        v572 = v1156 + v570;
                        v554[6] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v573 = v571 - 1;
                        if (!v573)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v572);
                        LOWORD(v572) = scaledU + v572;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v572);
                        v574 = v1156 + v572;
                        v554[7] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v575 = v573 - 1;
                        if (!v575)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v574);
                        LOWORD(v574) = scaledU + v574;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v574);
                        v576 = v1156 + v574;
                        v554[8] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v577 = v575 - 1;
                        if (!v577)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v576);
                        LOWORD(v576) = scaledU + v576;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v576);
                        v578 = v1156 + v576;
                        v554[9] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v579 = v577 - 1;
                        if (!v579)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v578);
                        LOWORD(v578) = scaledU + v578;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v578);
                        v580 = v1156 + v578;
                        v554[10] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v581 = v579 - 1;
                        if (!v581)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v580);
                        LOWORD(v580) = scaledU + v580;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v580);
                        v582 = v1156 + v580;
                        v554[11] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v583 = v581 - 1;
                        if (!v583)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v582);
                        LOWORD(v582) = scaledU + v582;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v582);
                        v584 = v1156 + v582;
                        v554[12] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v585 = v583 - 1;
                        if (!v585)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v584);
                        LOWORD(v584) = scaledU + v584;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v584);
                        v586 = v1156 + v584;
                        v554[13] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v587 = v585 - 1;
                        if (!v587)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v586);
                        LOWORD(v586) = scaledU + v586;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v586);
                        v588 = v1156 + v586;
                        v554[14] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v589 = v587 - 1;
                        if (!v589)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v588);
                        LOWORD(v588) = scaledU + v588;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v588);
                        v557 = v1156 + v588;
                        v554[15] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        LOWORD(v553) = v589 - 1;
                        if (!(_WORD)v553)
                            break;
                        v554 += 16;
                    }
                    v550 = v1265;
                }
            LABEL_781:
                v550 += 10;
                if (!--ySum)
                    return;
            }
            if (v553 > widthViewPort_93AD8)
                LOWORD(v553) = widthViewPort_93AD8;
            v16 = (__int16)v553 <= (__int16)v551;
            LOWORD(v553) = v553 - v551;
            if (v16)
                goto LABEL_781;
            v554 += v551;
            v557 = __ROL4__(*((_DWORD*)v550 + 3), 16);
            BYTE1(v552) = v557;
            LOWORD(v557) = v550[4];
            LOBYTE(v552) = *((_BYTE*)v550 + 10);
            goto LABEL_762;
        case 14:
        LABEL_783:
            v590 = (unsigned __int16*)&unk_93AE0;
            v591 = (_BYTE*)actScrPtr;
            HIWORD(v592) = 0;
            BYTE1(v592) = byte_967E0;
            HIWORD(v593) = 0;
            while (1)
            {
                LOWORD(v593) = v590[1];
                v594 = v590[3];
                v591 += pitchViewPort_93AD4;
                if ((v593 & 0x8000u) == 0)
                    break;
                if ((__int16)v594 > 0)
                {
                    if (v594 > widthViewPort_93AD8)
                        LOWORD(v594) = widthViewPort_93AD8;
                LABEL_793:
                    for (k = v591; ; k += 16)
                    {
                        LOBYTE(v592) = *k;
                        *k = strPal.byte_BB934_BB924[v592];
                        v596 = v594 - 1;
                        if (!v596)
                            break;
                        LOBYTE(v592) = k[1];
                        k[1] = strPal.byte_BB934_BB924[v592];
                        v597 = v596 - 1;
                        if (!v597)
                            break;
                        LOBYTE(v592) = k[2];
                        k[2] = strPal.byte_BB934_BB924[v592];
                        v598 = v597 - 1;
                        if (!v598)
                            break;
                        LOBYTE(v592) = k[3];
                        k[3] = strPal.byte_BB934_BB924[v592];
                        v599 = v598 - 1;
                        if (!v599)
                            break;
                        LOBYTE(v592) = k[4];
                        k[4] = strPal.byte_BB934_BB924[v592];
                        v600 = v599 - 1;
                        if (!v600)
                            break;
                        LOBYTE(v592) = k[5];
                        k[5] = strPal.byte_BB934_BB924[v592];
                        v601 = v600 - 1;
                        if (!v601)
                            break;
                        LOBYTE(v592) = k[6];
                        k[6] = strPal.byte_BB934_BB924[v592];
                        v602 = v601 - 1;
                        if (!v602)
                            break;
                        LOBYTE(v592) = k[7];
                        k[7] = strPal.byte_BB934_BB924[v592];
                        v603 = v602 - 1;
                        if (!v603)
                            break;
                        LOBYTE(v592) = k[8];
                        k[8] = strPal.byte_BB934_BB924[v592];
                        v604 = v603 - 1;
                        if (!v604)
                            break;
                        LOBYTE(v592) = k[9];
                        k[9] = strPal.byte_BB934_BB924[v592];
                        v605 = v604 - 1;
                        if (!v605)
                            break;
                        LOBYTE(v592) = k[10];
                        k[10] = strPal.byte_BB934_BB924[v592];
                        v606 = v605 - 1;
                        if (!v606)
                            break;
                        LOBYTE(v592) = k[11];
                        k[11] = strPal.byte_BB934_BB924[v592];
                        v607 = v606 - 1;
                        if (!v607)
                            break;
                        LOBYTE(v592) = k[12];
                        k[12] = strPal.byte_BB934_BB924[v592];
                        v608 = v607 - 1;
                        if (!v608)
                            break;
                        LOBYTE(v592) = k[13];
                        k[13] = strPal.byte_BB934_BB924[v592];
                        v609 = v608 - 1;
                        if (!v609)
                            break;
                        LOBYTE(v592) = k[14];
                        k[14] = strPal.byte_BB934_BB924[v592];
                        v610 = v609 - 1;
                        if (!v610)
                            break;
                        LOBYTE(v592) = k[15];
                        k[15] = strPal.byte_BB934_BB924[v592];
                        LOWORD(v594) = v610 - 1;
                        if (!(_WORD)v594)
                            break;
                    }
                }
            LABEL_810:
                v590 += 10;
                if (!--ySum)
                    return;
            }
            if (v594 > widthViewPort_93AD8)
                LOWORD(v594) = widthViewPort_93AD8;
            v16 = (__int16)v594 <= (__int16)v593;
            LOWORD(v594) = v594 - v593;
            if (v16)
                goto LABEL_810;
            k = &v591[v593];
            goto LABEL_793;
        case 15:
        LABEL_812:
            v611 = (unsigned __int16*)&unk_93AE0;
            v612 = (_BYTE*)actScrPtr;
            v613 = (unsigned __int8)byte_967E0;
            HIWORD(v614) = 0;
            while (1)
            {
                LOWORD(v614) = v611[1];
                v615 = v611[3];
                v612 += pitchViewPort_93AD4;
                if ((v614 & 0x8000u) == 0)
                    break;
                if ((__int16)v615 > 0)
                {
                    if (v615 > widthViewPort_93AD8)
                        LOWORD(v615) = widthViewPort_93AD8;
                LABEL_822:
                    for (m = v612; ; m += 16)
                    {
                        BYTE1(v613) = *m;
                        *m = strPal.byte_BB934_BB924[v613];
                        v617 = v615 - 1;
                        if (!v617)
                            break;
                        BYTE1(v613) = m[1];
                        m[1] = strPal.byte_BB934_BB924[v613];
                        v618 = v617 - 1;
                        if (!v618)
                            break;
                        BYTE1(v613) = m[2];
                        m[2] = strPal.byte_BB934_BB924[v613];
                        v619 = v618 - 1;
                        if (!v619)
                            break;
                        BYTE1(v613) = m[3];
                        m[3] = strPal.byte_BB934_BB924[v613];
                        v620 = v619 - 1;
                        if (!v620)
                            break;
                        BYTE1(v613) = m[4];
                        m[4] = strPal.byte_BB934_BB924[v613];
                        v621 = v620 - 1;
                        if (!v621)
                            break;
                        BYTE1(v613) = m[5];
                        m[5] = strPal.byte_BB934_BB924[v613];
                        v622 = v621 - 1;
                        if (!v622)
                            break;
                        BYTE1(v613) = m[6];
                        m[6] = strPal.byte_BB934_BB924[v613];
                        v623 = v622 - 1;
                        if (!v623)
                            break;
                        BYTE1(v613) = m[7];
                        m[7] = strPal.byte_BB934_BB924[v613];
                        v624 = v623 - 1;
                        if (!v624)
                            break;
                        BYTE1(v613) = m[8];
                        m[8] = strPal.byte_BB934_BB924[v613];
                        v625 = v624 - 1;
                        if (!v625)
                            break;
                        BYTE1(v613) = m[9];
                        m[9] = strPal.byte_BB934_BB924[v613];
                        v626 = v625 - 1;
                        if (!v626)
                            break;
                        BYTE1(v613) = m[10];
                        m[10] = strPal.byte_BB934_BB924[v613];
                        v627 = v626 - 1;
                        if (!v627)
                            break;
                        BYTE1(v613) = m[11];
                        m[11] = strPal.byte_BB934_BB924[v613];
                        v628 = v627 - 1;
                        if (!v628)
                            break;
                        BYTE1(v613) = m[12];
                        m[12] = strPal.byte_BB934_BB924[v613];
                        v629 = v628 - 1;
                        if (!v629)
                            break;
                        BYTE1(v613) = m[13];
                        m[13] = strPal.byte_BB934_BB924[v613];
                        v630 = v629 - 1;
                        if (!v630)
                            break;
                        BYTE1(v613) = m[14];
                        m[14] = strPal.byte_BB934_BB924[v613];
                        v631 = v630 - 1;
                        if (!v631)
                            break;
                        BYTE1(v613) = m[15];
                        m[15] = strPal.byte_BB934_BB924[v613];
                        LOWORD(v615) = v631 - 1;
                        if (!(_WORD)v615)
                            break;
                    }
                }
            LABEL_839:
                v611 += 10;
                if (!--ySum)
                    return;
            }
            if (v615 > widthViewPort_93AD8)
                LOWORD(v615) = widthViewPort_93AD8;
            v16 = (__int16)v615 <= (__int16)v614;
            LOWORD(v615) = v615 - v614;
            if (v16)
                goto LABEL_839;
            m = &v612[v614];
            goto LABEL_822;
        case 16:
        LABEL_841:
            v632 = (unsigned __int16*)&unk_93AE0;
            HIWORD(v633) = 0;
            while (1)
            {
                LOWORD(v29) = v632[1];
                v634 = v632[3];
                v635 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v29 & 0x8000u) == 0)
                    break;
                if ((__int16)v634 > 0)
                {
                    v636 = scaledZ * (unsigned __int16)-(__int16)v29;
                    v637 = v636;
                    v29 = v636 >> 8;
                    v171 = __CFADD__(v632[8], v637);
                    v638 = v632[8] + v637;
                    BYTE1(v29) += *((_BYTE*)v632 + 18) + v171;
                    if (v634 > widthViewPort_93AD8)
                        LOWORD(v634) = widthViewPort_93AD8;
                    v29 = (unsigned __int16)v29;
                    LOBYTE(v29) = byte_967E0;
                LABEL_851:
                    while (1)
                    {
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = *v635;
                        *v635 = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v638);
                        v639 = scaledZ + v638;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v640 = v634 - 1;
                        if (!v640)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[1];
                        v635[1] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v639);
                        v641 = scaledZ + v639;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v642 = v640 - 1;
                        if (!v642)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[2];
                        v635[2] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v641);
                        v643 = scaledZ + v641;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v644 = v642 - 1;
                        if (!v644)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[3];
                        v635[3] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v643);
                        v645 = scaledZ + v643;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v646 = v644 - 1;
                        if (!v646)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[4];
                        v635[4] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v645);
                        v647 = scaledZ + v645;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v648 = v646 - 1;
                        if (!v648)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[5];
                        v635[5] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v647);
                        v649 = scaledZ + v647;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v650 = v648 - 1;
                        if (!v650)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[6];
                        v635[6] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v649);
                        v651 = scaledZ + v649;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v652 = v650 - 1;
                        if (!v652)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[7];
                        v635[7] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v651);
                        v653 = scaledZ + v651;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v654 = v652 - 1;
                        if (!v654)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[8];
                        v635[8] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v653);
                        v655 = scaledZ + v653;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v656 = v654 - 1;
                        if (!v656)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[9];
                        v635[9] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v655);
                        v657 = scaledZ + v655;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v658 = v656 - 1;
                        if (!v658)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[10];
                        v635[10] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v657);
                        v659 = scaledZ + v657;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v660 = v658 - 1;
                        if (!v660)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[11];
                        v635[11] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v659);
                        v661 = scaledZ + v659;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v662 = v660 - 1;
                        if (!v662)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[12];
                        v635[12] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v661);
                        v663 = scaledZ + v661;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v664 = v662 - 1;
                        if (!v664)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[13];
                        v635[13] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v663);
                        v665 = scaledZ + v663;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v666 = v664 - 1;
                        if (!v666)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[14];
                        v635[14] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v665);
                        v667 = scaledZ + v665;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v668 = v666 - 1;
                        if (!v668)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[15];
                        v635[15] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v667);
                        v638 = scaledZ + v667;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        LOWORD(v634) = v668 - 1;
                        if (!(_WORD)v634)
                            break;
                        v635 += 16;
                    }
                }
            LABEL_868:
                v632 += 10;
                if (!--ySum)
                    return;
            }
            if (v634 > widthViewPort_93AD8)
                LOWORD(v634) = widthViewPort_93AD8;
            v16 = (__int16)v634 <= (__int16)v29;
            LOWORD(v634) = v634 - v29;
            if (v16)
                goto LABEL_868;
            v635 += v29;
            v29 = (unsigned __int8)byte_967E0;
            v638 = v632[8];
            BYTE1(v29) = *((_BYTE*)v632 + 18);
            goto LABEL_851;
        case 17:
        LABEL_870:
            v669 = (unsigned __int16*)&unk_93AE0;
            HIWORD(v670) = 0;
            while (1)
            {
                LOWORD(v29) = v669[1];
                v671 = v669[3];
                v672 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v29 & 0x8000u) == 0)
                    break;
                if ((__int16)v671 > 0)
                {
                    v673 = scaledZ * (unsigned __int16)-(__int16)v29;
                    v674 = v673;
                    v29 = v673 >> 8;
                    v171 = __CFADD__(v669[8], v674);
                    v675 = v669[8] + v674;
                    BYTE1(v29) += *((_BYTE*)v669 + 18) + v171;
                    if (v671 > widthViewPort_93AD8)
                        LOWORD(v671) = widthViewPort_93AD8;
                    v29 = (unsigned __int16)v29;
                    LOBYTE(v29) = byte_967E0;
                LABEL_880:
                    while (1)
                    {
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = *v672;
                        *v672 = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v675);
                        v676 = scaledZ + v675;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v677 = v671 - 1;
                        if (!v677)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[1];
                        v672[1] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v676);
                        v678 = scaledZ + v676;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v679 = v677 - 1;
                        if (!v679)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[2];
                        v672[2] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v678);
                        v680 = scaledZ + v678;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v681 = v679 - 1;
                        if (!v681)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[3];
                        v672[3] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v680);
                        v682 = scaledZ + v680;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v683 = v681 - 1;
                        if (!v683)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[4];
                        v672[4] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v682);
                        v684 = scaledZ + v682;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v685 = v683 - 1;
                        if (!v685)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[5];
                        v672[5] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v684);
                        v686 = scaledZ + v684;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v687 = v685 - 1;
                        if (!v687)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[6];
                        v672[6] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v686);
                        v688 = scaledZ + v686;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v689 = v687 - 1;
                        if (!v689)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[7];
                        v672[7] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v688);
                        v690 = scaledZ + v688;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v691 = v689 - 1;
                        if (!v691)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[8];
                        v672[8] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v690);
                        v692 = scaledZ + v690;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v693 = v691 - 1;
                        if (!v693)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[9];
                        v672[9] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v692);
                        v694 = scaledZ + v692;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v695 = v693 - 1;
                        if (!v695)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[10];
                        v672[10] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v694);
                        v696 = scaledZ + v694;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v697 = v695 - 1;
                        if (!v697)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[11];
                        v672[11] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v696);
                        v698 = scaledZ + v696;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v699 = v697 - 1;
                        if (!v699)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[12];
                        v672[12] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v698);
                        v700 = scaledZ + v698;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v701 = v699 - 1;
                        if (!v701)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[13];
                        v672[13] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v700);
                        v702 = scaledZ + v700;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v703 = v701 - 1;
                        if (!v703)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[14];
                        v672[14] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v702);
                        v704 = scaledZ + v702;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v705 = v703 - 1;
                        if (!v705)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[15];
                        v672[15] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v704);
                        v675 = scaledZ + v704;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        LOWORD(v671) = v705 - 1;
                        if (!(_WORD)v671)
                            break;
                        v672 += 16;
                    }
                }
            LABEL_897:
                v669 += 10;
                if (!--ySum)
                    return;
            }
            if (v671 > widthViewPort_93AD8)
                LOWORD(v671) = widthViewPort_93AD8;
            v16 = (__int16)v671 <= (__int16)v29;
            LOWORD(v671) = v671 - v29;
            if (v16)
                goto LABEL_897;
            v672 += v29;
            v29 = (unsigned __int8)byte_967E0;
            v675 = v669[8];
            BYTE1(v29) = *((_BYTE*)v669 + 18);
            goto LABEL_880;
        case 18:
        LABEL_899:
            v706 = (unsigned __int16*)&unk_93AE0;
            v1157 = scaledV << 16;
            HIWORD(v707) = 0;
            HIWORD(v708) = 0;
            while (1)
            {
                LOWORD(v707) = v706[1];
                v709 = v706[3];
                v710 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v707 & 0x8000u) == 0)
                    break;
                if ((__int16)v709 > 0)
                {
                    v711 = (unsigned __int16)-(__int16)v707;
                    v713 = __ROL4__(*((_DWORD*)v706 + 3) + scaledV * v711, 16);
                    BYTE1(v708) = v713;
                    v712 = *((_DWORD*)v706 + 2) + scaledU * v711;
                    LOWORD(v713) = v712;
                    v714 = v712 >> 8;
                    LOBYTE(v708) = BYTE1(v714);
                    if (v709 > widthViewPort_93AD8)
                        LOWORD(v709) = widthViewPort_93AD8;
                    v707 = (unsigned __int16)v714;
                LABEL_909:
                    v1266 = v706;
                    v715 = (int)actTexture_93AD0;
                    while (1)
                    {
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v713);
                        LOWORD(v713) = scaledU + v713;
                        LOBYTE(v707) = *v710;
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v713);
                        v716 = v1157 + v713;
                        *v710 = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v717 = v709 - 1;
                        if (!v717)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v716);
                        LOWORD(v716) = scaledU + v716;
                        LOBYTE(v707) = v710[1];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v716);
                        v718 = v1157 + v716;
                        v710[1] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v719 = v717 - 1;
                        if (!v719)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v718);
                        LOWORD(v718) = scaledU + v718;
                        LOBYTE(v707) = v710[2];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v718);
                        v720 = v1157 + v718;
                        v710[2] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v721 = v719 - 1;
                        if (!v721)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v720);
                        LOWORD(v720) = scaledU + v720;
                        LOBYTE(v707) = v710[3];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v720);
                        v722 = v1157 + v720;
                        v710[3] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v723 = v721 - 1;
                        if (!v723)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v722);
                        LOWORD(v722) = scaledU + v722;
                        LOBYTE(v707) = v710[4];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v722);
                        v724 = v1157 + v722;
                        v710[4] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v725 = v723 - 1;
                        if (!v725)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v724);
                        LOWORD(v724) = scaledU + v724;
                        LOBYTE(v707) = v710[5];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v724);
                        v726 = v1157 + v724;
                        v710[5] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v727 = v725 - 1;
                        if (!v727)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v726);
                        LOWORD(v726) = scaledU + v726;
                        LOBYTE(v707) = v710[6];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v726);
                        v728 = v1157 + v726;
                        v710[6] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v729 = v727 - 1;
                        if (!v729)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v728);
                        LOWORD(v728) = scaledU + v728;
                        LOBYTE(v707) = v710[7];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v728);
                        v730 = v1157 + v728;
                        v710[7] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v731 = v729 - 1;
                        if (!v731)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v730);
                        LOWORD(v730) = scaledU + v730;
                        LOBYTE(v707) = v710[8];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v730);
                        v732 = v1157 + v730;
                        v710[8] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v733 = v731 - 1;
                        if (!v733)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v732);
                        LOWORD(v732) = scaledU + v732;
                        LOBYTE(v707) = v710[9];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v732);
                        v734 = v1157 + v732;
                        v710[9] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v735 = v733 - 1;
                        if (!v735)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v734);
                        LOWORD(v734) = scaledU + v734;
                        LOBYTE(v707) = v710[10];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v734);
                        v736 = v1157 + v734;
                        v710[10] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v737 = v735 - 1;
                        if (!v737)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v736);
                        LOWORD(v736) = scaledU + v736;
                        LOBYTE(v707) = v710[11];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v736);
                        v738 = v1157 + v736;
                        v710[11] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v739 = v737 - 1;
                        if (!v739)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v738);
                        LOWORD(v738) = scaledU + v738;
                        LOBYTE(v707) = v710[12];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v738);
                        v740 = v1157 + v738;
                        v710[12] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v741 = v739 - 1;
                        if (!v741)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v740);
                        LOWORD(v740) = scaledU + v740;
                        LOBYTE(v707) = v710[13];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v740);
                        v742 = v1157 + v740;
                        v710[13] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v743 = v741 - 1;
                        if (!v743)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v742);
                        LOWORD(v742) = scaledU + v742;
                        LOBYTE(v707) = v710[14];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v742);
                        v744 = v1157 + v742;
                        v710[14] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v745 = v743 - 1;
                        if (!v745)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v744);
                        LOWORD(v744) = scaledU + v744;
                        LOBYTE(v707) = v710[15];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v744);
                        v713 = v1157 + v744;
                        v710[15] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        LOWORD(v709) = v745 - 1;
                        if (!(_WORD)v709)
                            break;
                        v710 += 16;
                    }
                    v706 = v1266;
                }
            LABEL_928:
                v706 += 10;
                if (!--ySum)
                    return;
            }
            if (v709 > widthViewPort_93AD8)
                LOWORD(v709) = widthViewPort_93AD8;
            v16 = (__int16)v709 <= (__int16)v707;
            LOWORD(v709) = v709 - v707;
            if (v16)
                goto LABEL_928;
            v710 += v707;
            v713 = __ROL4__(*((_DWORD*)v706 + 3), 16);
            BYTE1(v708) = v713;
            LOWORD(v713) = v706[4];
            LOBYTE(v708) = *((_BYTE*)v706 + 10);
            goto LABEL_909;
        case 19:
        LABEL_930:
            v746 = (unsigned __int16*)&unk_93AE0;
            v1158 = scaledV << 16;
            HIWORD(v747) = 0;
            HIWORD(v748) = 0;
            while (1)
            {
                LOWORD(v747) = v746[1];
                v749 = v746[3];
                v750 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v747 & 0x8000u) == 0)
                    break;
                if ((__int16)v749 > 0)
                {
                    v751 = (unsigned __int16)-(__int16)v747;
                    v753 = __ROL4__(*((_DWORD*)v746 + 3) + scaledV * v751, 16);
                    BYTE1(v748) = v753;
                    v752 = *((_DWORD*)v746 + 2) + scaledU * v751;
                    LOWORD(v753) = v752;
                    v754 = v752 >> 8;
                    LOBYTE(v748) = BYTE1(v754);
                    if (v749 > widthViewPort_93AD8)
                        LOWORD(v749) = widthViewPort_93AD8;
                    v747 = (unsigned __int16)v754;
                LABEL_940:
                    v1267 = v746;
                    v755 = (int)actTexture_93AD0;
                    while (1)
                    {
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v753);
                        LOWORD(v753) = scaledU + v753;
                        BYTE1(v747) = *v750;
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v753);
                        v756 = v1158 + v753;
                        *v750 = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v757 = v749 - 1;
                        if (!v757)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v756);
                        LOWORD(v756) = scaledU + v756;
                        BYTE1(v747) = v750[1];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v756);
                        v758 = v1158 + v756;
                        v750[1] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v759 = v757 - 1;
                        if (!v759)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v758);
                        LOWORD(v758) = scaledU + v758;
                        BYTE1(v747) = v750[2];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v758);
                        v760 = v1158 + v758;
                        v750[2] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v761 = v759 - 1;
                        if (!v761)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v760);
                        LOWORD(v760) = scaledU + v760;
                        BYTE1(v747) = v750[3];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v760);
                        v762 = v1158 + v760;
                        v750[3] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v763 = v761 - 1;
                        if (!v763)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v762);
                        LOWORD(v762) = scaledU + v762;
                        BYTE1(v747) = v750[4];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v762);
                        v764 = v1158 + v762;
                        v750[4] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v765 = v763 - 1;
                        if (!v765)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v764);
                        LOWORD(v764) = scaledU + v764;
                        BYTE1(v747) = v750[5];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v764);
                        v766 = v1158 + v764;
                        v750[5] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v767 = v765 - 1;
                        if (!v767)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v766);
                        LOWORD(v766) = scaledU + v766;
                        BYTE1(v747) = v750[6];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v766);
                        v768 = v1158 + v766;
                        v750[6] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v769 = v767 - 1;
                        if (!v769)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v768);
                        LOWORD(v768) = scaledU + v768;
                        BYTE1(v747) = v750[7];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v768);
                        v770 = v1158 + v768;
                        v750[7] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v771 = v769 - 1;
                        if (!v771)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v770);
                        LOWORD(v770) = scaledU + v770;
                        BYTE1(v747) = v750[8];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v770);
                        v772 = v1158 + v770;
                        v750[8] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v773 = v771 - 1;
                        if (!v773)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v772);
                        LOWORD(v772) = scaledU + v772;
                        BYTE1(v747) = v750[9];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v772);
                        v774 = v1158 + v772;
                        v750[9] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v775 = v773 - 1;
                        if (!v775)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v774);
                        LOWORD(v774) = scaledU + v774;
                        BYTE1(v747) = v750[10];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v774);
                        v776 = v1158 + v774;
                        v750[10] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v777 = v775 - 1;
                        if (!v777)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v776);
                        LOWORD(v776) = scaledU + v776;
                        BYTE1(v747) = v750[11];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v776);
                        v778 = v1158 + v776;
                        v750[11] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v779 = v777 - 1;
                        if (!v779)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v778);
                        LOWORD(v778) = scaledU + v778;
                        BYTE1(v747) = v750[12];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v778);
                        v780 = v1158 + v778;
                        v750[12] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v781 = v779 - 1;
                        if (!v781)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v780);
                        LOWORD(v780) = scaledU + v780;
                        BYTE1(v747) = v750[13];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v780);
                        v782 = v1158 + v780;
                        v750[13] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v783 = v781 - 1;
                        if (!v783)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v782);
                        LOWORD(v782) = scaledU + v782;
                        BYTE1(v747) = v750[14];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v782);
                        v784 = v1158 + v782;
                        v750[14] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v785 = v783 - 1;
                        if (!v785)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v784);
                        LOWORD(v784) = scaledU + v784;
                        BYTE1(v747) = v750[15];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v784);
                        v753 = v1158 + v784;
                        v750[15] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        LOWORD(v749) = v785 - 1;
                        if (!(_WORD)v749)
                            break;
                        v750 += 16;
                    }
                    v746 = v1267;
                }
            LABEL_959:
                v746 += 10;
                if (!--ySum)
                    return;
            }
            if (v749 > widthViewPort_93AD8)
                LOWORD(v749) = widthViewPort_93AD8;
            v16 = (__int16)v749 <= (__int16)v747;
            LOWORD(v749) = v749 - v747;
            if (v16)
                goto LABEL_959;
            v750 += v747;
            v753 = __ROL4__(*((_DWORD*)v746 + 3), 16);
            BYTE1(v748) = v753;
            LOWORD(v753) = v746[4];
            LOBYTE(v748) = *((_BYTE*)v746 + 10);
            goto LABEL_940;
        case 20:
        LABEL_961:
            v786 = (unsigned __int16*)&unk_93AE0;
            v1159 = scaledV << 16;
            v1168 = scaledZ << 16;
            HIWORD(v787) = 0;
            HIWORD(v788) = 0;
            while (1)
            {
                LOWORD(v787) = v786[1];
                v789 = v786[3];
                v790 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v787 & 0x8000u) == 0)
                    break;
                if ((__int16)v789 > 0)
                {
                    if (v789 > widthViewPort_93AD8)
                        v789 = widthViewPort_93AD8;
                    v1177 = v789;
                    v791 = (unsigned __int16)-(__int16)v787;
                    v792 = __ROL4__(*((_DWORD*)v786 + 3) + scaledV * v791, 16);
                    BYTE1(v788) = v792;
                    LOWORD(v792) = v786[4] + scaledU * v791;
                    v787 = (unsigned int)(*((_DWORD*)v786 + 2) + scaledU * v791) >> 8;
                    LOBYTE(v788) = (unsigned int)(*((_DWORD*)v786 + 2) + scaledU * v791) >> 16;
                    v793 = __ROL4__(*((_DWORD*)v786 + 4) + scaledZ * v791, 16);
                    v787 = (unsigned __int16)v787;
                LABEL_971:
                    v1268 = v786;
                    v794 = (int)actTexture_93AD0;
                    while (1)
                    {
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v792);
                        LOWORD(v792) = scaledU + v792;
                        BYTE1(v787) = v793;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v792);
                        v795 = v1159 + v792;
                        LOBYTE(v787) = *v790;
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v793);
                        v796 = v1168 + v793;
                        *v790 = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v796) = BYTE2(scaledZ) + v171 + v796;
                        v1178 = v1177 - 1;
                        if (!v1178)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v795);
                        LOWORD(v795) = scaledU + v795;
                        BYTE1(v787) = v796;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v795);
                        v797 = v1159 + v795;
                        LOBYTE(v787) = v790[1];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v796);
                        v798 = v1168 + v796;
                        v790[1] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v798) = BYTE2(scaledZ) + v171 + v798;
                        v1179 = v1178 - 1;
                        if (!v1179)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v797);
                        LOWORD(v797) = scaledU + v797;
                        BYTE1(v787) = v798;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v797);
                        v799 = v1159 + v797;
                        LOBYTE(v787) = v790[2];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v798);
                        v800 = v1168 + v798;
                        v790[2] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v800) = BYTE2(scaledZ) + v171 + v800;
                        v1180 = v1179 - 1;
                        if (!v1180)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v799);
                        LOWORD(v799) = scaledU + v799;
                        BYTE1(v787) = v800;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v799);
                        v801 = v1159 + v799;
                        LOBYTE(v787) = v790[3];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v800);
                        v802 = v1168 + v800;
                        v790[3] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v802) = BYTE2(scaledZ) + v171 + v802;
                        v1181 = v1180 - 1;
                        if (!v1181)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v801);
                        LOWORD(v801) = scaledU + v801;
                        BYTE1(v787) = v802;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v801);
                        v803 = v1159 + v801;
                        LOBYTE(v787) = v790[4];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v802);
                        v804 = v1168 + v802;
                        v790[4] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v804) = BYTE2(scaledZ) + v171 + v804;
                        v1182 = v1181 - 1;
                        if (!v1182)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v803);
                        LOWORD(v803) = scaledU + v803;
                        BYTE1(v787) = v804;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v803);
                        v805 = v1159 + v803;
                        LOBYTE(v787) = v790[5];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v804);
                        v806 = v1168 + v804;
                        v790[5] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v806) = BYTE2(scaledZ) + v171 + v806;
                        v1183 = v1182 - 1;
                        if (!v1183)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v805);
                        LOWORD(v805) = scaledU + v805;
                        BYTE1(v787) = v806;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v805);
                        v807 = v1159 + v805;
                        LOBYTE(v787) = v790[6];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v806);
                        v808 = v1168 + v806;
                        v790[6] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v808) = BYTE2(scaledZ) + v171 + v808;
                        v1184 = v1183 - 1;
                        if (!v1184)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v807);
                        LOWORD(v807) = scaledU + v807;
                        BYTE1(v787) = v808;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v807);
                        v809 = v1159 + v807;
                        LOBYTE(v787) = v790[7];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v808);
                        v810 = v1168 + v808;
                        v790[7] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v810) = BYTE2(scaledZ) + v171 + v810;
                        v1185 = v1184 - 1;
                        if (!v1185)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v809);
                        LOWORD(v809) = scaledU + v809;
                        BYTE1(v787) = v810;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v809);
                        v811 = v1159 + v809;
                        LOBYTE(v787) = v790[8];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v810);
                        v812 = v1168 + v810;
                        v790[8] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v812) = BYTE2(scaledZ) + v171 + v812;
                        v1186 = v1185 - 1;
                        if (!v1186)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v811);
                        LOWORD(v811) = scaledU + v811;
                        BYTE1(v787) = v812;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v811);
                        v813 = v1159 + v811;
                        LOBYTE(v787) = v790[9];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v812);
                        v814 = v1168 + v812;
                        v790[9] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v814) = BYTE2(scaledZ) + v171 + v814;
                        v1187 = v1186 - 1;
                        if (!v1187)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v813);
                        LOWORD(v813) = scaledU + v813;
                        BYTE1(v787) = v814;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v813);
                        v815 = v1159 + v813;
                        LOBYTE(v787) = v790[10];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v814);
                        v816 = v1168 + v814;
                        v790[10] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v816) = BYTE2(scaledZ) + v171 + v816;
                        v1188 = v1187 - 1;
                        if (!v1188)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v815);
                        LOWORD(v815) = scaledU + v815;
                        BYTE1(v787) = v816;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v815);
                        v817 = v1159 + v815;
                        LOBYTE(v787) = v790[11];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v816);
                        v818 = v1168 + v816;
                        v790[11] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v818) = BYTE2(scaledZ) + v171 + v818;
                        v1189 = v1188 - 1;
                        if (!v1189)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v817);
                        LOWORD(v817) = scaledU + v817;
                        BYTE1(v787) = v818;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v817);
                        v819 = v1159 + v817;
                        LOBYTE(v787) = v790[12];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v818);
                        v820 = v1168 + v818;
                        v790[12] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v820) = BYTE2(scaledZ) + v171 + v820;
                        v1190 = v1189 - 1;
                        if (!v1190)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v819);
                        LOWORD(v819) = scaledU + v819;
                        BYTE1(v787) = v820;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v819);
                        v821 = v1159 + v819;
                        LOBYTE(v787) = v790[13];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v820);
                        v822 = v1168 + v820;
                        v790[13] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v822) = BYTE2(scaledZ) + v171 + v822;
                        v1191 = v1190 - 1;
                        if (!v1191)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v821);
                        LOWORD(v821) = scaledU + v821;
                        BYTE1(v787) = v822;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v821);
                        v823 = v1159 + v821;
                        LOBYTE(v787) = v790[14];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v822);
                        v824 = v1168 + v822;
                        v790[14] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v824) = BYTE2(scaledZ) + v171 + v824;
                        v1192 = v1191 - 1;
                        if (!v1192)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v823);
                        LOWORD(v823) = scaledU + v823;
                        BYTE1(v787) = v824;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v823);
                        v792 = v1159 + v823;
                        LOBYTE(v787) = v790[15];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v824);
                        v793 = v1168 + v824;
                        v790[15] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v793) = BYTE2(scaledZ) + v171 + v793;
                        v1177 = v1192 - 1;
                        if (!v1177)
                            break;
                        v790 += 16;
                    }
                    v786 = v1268;
                }
            LABEL_990:
                v786 += 10;
                if (!--ySum)
                    return;
            }
            if (v789 > widthViewPort_93AD8)
                v789 = widthViewPort_93AD8;
            v16 = (__int16)v789 <= (__int16)v787;
            LOWORD(v789) = v789 - v787;
            if (v16)
                goto LABEL_990;
            v790 += v787;
            v792 = __ROL4__(*((_DWORD*)v786 + 3), 16);
            BYTE1(v788) = v792;
            LOWORD(v792) = v786[4];
            LOBYTE(v788) = *((_BYTE*)v786 + 10);
            v1177 = v789;
            v793 = __ROL4__(*((_DWORD*)v786 + 4), 16);
            goto LABEL_971;
        case 21:
        LABEL_992:
            v825 = (unsigned __int16*)&unk_93AE0;
            v1160 = scaledV << 16;
            v1169 = scaledZ << 16;
            HIWORD(v826) = 0;
            HIWORD(v827) = 0;
            while (1)
            {
                LOWORD(v826) = v825[1];
                v828 = v825[3];
                v829 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v826 & 0x8000u) == 0)
                    break;
                if ((__int16)v828 > 0)
                {
                    if (v828 > widthViewPort_93AD8)
                        v828 = widthViewPort_93AD8;
                    v1193 = v828;
                    v830 = (unsigned __int16)-(__int16)v826;
                    v831 = __ROL4__(*((_DWORD*)v825 + 3) + scaledV * v830, 16);
                    BYTE1(v827) = v831;
                    LOWORD(v831) = v825[4] + scaledU * v830;
                    v826 = (unsigned int)(*((_DWORD*)v825 + 2) + scaledU * v830) >> 8;
                    LOBYTE(v827) = (unsigned int)(*((_DWORD*)v825 + 2) + scaledU * v830) >> 16;
                    v832 = __ROL4__(*((_DWORD*)v825 + 4) + scaledZ * v830, 16);
                    v826 = (unsigned __int16)v826;
                LABEL_1002:
                    v1269 = v825;
                    v833 = (int)actTexture_93AD0;
                    while (1)
                    {
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v831);
                        LOWORD(v831) = scaledU + v831;
                        BYTE1(v826) = v832;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v831);
                        v834 = v1160 + v831;
                        BYTE1(v826) = *v829;
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v832);
                        v835 = v1169 + v832;
                        *v829 = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v835) = BYTE2(scaledZ) + v171 + v835;
                        v1194 = v1193 - 1;
                        if (!v1194)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v834);
                        LOWORD(v834) = scaledU + v834;
                        BYTE1(v826) = v835;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v834);
                        v836 = v1160 + v834;
                        BYTE1(v826) = v829[1];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v835);
                        v837 = v1169 + v835;
                        v829[1] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v837) = BYTE2(scaledZ) + v171 + v837;
                        v1195 = v1194 - 1;
                        if (!v1195)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v836);
                        LOWORD(v836) = scaledU + v836;
                        BYTE1(v826) = v837;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v836);
                        v838 = v1160 + v836;
                        BYTE1(v826) = v829[2];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v837);
                        v839 = v1169 + v837;
                        v829[2] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v839) = BYTE2(scaledZ) + v171 + v839;
                        v1196 = v1195 - 1;
                        if (!v1196)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v838);
                        LOWORD(v838) = scaledU + v838;
                        BYTE1(v826) = v839;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v838);
                        v840 = v1160 + v838;
                        BYTE1(v826) = v829[3];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v839);
                        v841 = v1169 + v839;
                        v829[3] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v841) = BYTE2(scaledZ) + v171 + v841;
                        v1197 = v1196 - 1;
                        if (!v1197)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v840);
                        LOWORD(v840) = scaledU + v840;
                        BYTE1(v826) = v841;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v840);
                        v842 = v1160 + v840;
                        BYTE1(v826) = v829[4];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v841);
                        v843 = v1169 + v841;
                        v829[4] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v843) = BYTE2(scaledZ) + v171 + v843;
                        v1198 = v1197 - 1;
                        if (!v1198)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v842);
                        LOWORD(v842) = scaledU + v842;
                        BYTE1(v826) = v843;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v842);
                        v844 = v1160 + v842;
                        BYTE1(v826) = v829[5];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v843);
                        v845 = v1169 + v843;
                        v829[5] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v845) = BYTE2(scaledZ) + v171 + v845;
                        v1199 = v1198 - 1;
                        if (!v1199)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v844);
                        LOWORD(v844) = scaledU + v844;
                        BYTE1(v826) = v845;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v844);
                        v846 = v1160 + v844;
                        BYTE1(v826) = v829[6];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v845);
                        v847 = v1169 + v845;
                        v829[6] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v847) = BYTE2(scaledZ) + v171 + v847;
                        v1200 = v1199 - 1;
                        if (!v1200)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v846);
                        LOWORD(v846) = scaledU + v846;
                        BYTE1(v826) = v847;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v846);
                        v848 = v1160 + v846;
                        BYTE1(v826) = v829[7];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v847);
                        v849 = v1169 + v847;
                        v829[7] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v849) = BYTE2(scaledZ) + v171 + v849;
                        v1201 = v1200 - 1;
                        if (!v1201)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v848);
                        LOWORD(v848) = scaledU + v848;
                        BYTE1(v826) = v849;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v848);
                        v850 = v1160 + v848;
                        BYTE1(v826) = v829[8];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v849);
                        v851 = v1169 + v849;
                        v829[8] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v851) = BYTE2(scaledZ) + v171 + v851;
                        v1202 = v1201 - 1;
                        if (!v1202)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v850);
                        LOWORD(v850) = scaledU + v850;
                        BYTE1(v826) = v851;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v850);
                        v852 = v1160 + v850;
                        BYTE1(v826) = v829[9];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v851);
                        v853 = v1169 + v851;
                        v829[9] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v853) = BYTE2(scaledZ) + v171 + v853;
                        v1203 = v1202 - 1;
                        if (!v1203)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v852);
                        LOWORD(v852) = scaledU + v852;
                        BYTE1(v826) = v853;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v852);
                        v854 = v1160 + v852;
                        BYTE1(v826) = v829[10];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v853);
                        v855 = v1169 + v853;
                        v829[10] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v855) = BYTE2(scaledZ) + v171 + v855;
                        v1204 = v1203 - 1;
                        if (!v1204)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v854);
                        LOWORD(v854) = scaledU + v854;
                        BYTE1(v826) = v855;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v854);
                        v856 = v1160 + v854;
                        BYTE1(v826) = v829[11];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v855);
                        v857 = v1169 + v855;
                        v829[11] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v857) = BYTE2(scaledZ) + v171 + v857;
                        v1205 = v1204 - 1;
                        if (!v1205)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v856);
                        LOWORD(v856) = scaledU + v856;
                        BYTE1(v826) = v857;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v856);
                        v858 = v1160 + v856;
                        BYTE1(v826) = v829[12];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v857);
                        v859 = v1169 + v857;
                        v829[12] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v859) = BYTE2(scaledZ) + v171 + v859;
                        v1206 = v1205 - 1;
                        if (!v1206)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v858);
                        LOWORD(v858) = scaledU + v858;
                        BYTE1(v826) = v859;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v858);
                        v860 = v1160 + v858;
                        BYTE1(v826) = v829[13];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v859);
                        v861 = v1169 + v859;
                        v829[13] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v861) = BYTE2(scaledZ) + v171 + v861;
                        v1207 = v1206 - 1;
                        if (!v1207)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v860);
                        LOWORD(v860) = scaledU + v860;
                        BYTE1(v826) = v861;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v860);
                        v862 = v1160 + v860;
                        BYTE1(v826) = v829[14];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v861);
                        v863 = v1169 + v861;
                        v829[14] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v863) = BYTE2(scaledZ) + v171 + v863;
                        v1208 = v1207 - 1;
                        if (!v1208)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v862);
                        LOWORD(v862) = scaledU + v862;
                        BYTE1(v826) = v863;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v862);
                        v831 = v1160 + v862;
                        BYTE1(v826) = v829[15];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v863);
                        v832 = v1169 + v863;
                        v829[15] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v832) = BYTE2(scaledZ) + v171 + v832;
                        v1193 = v1208 - 1;
                        if (!v1193)
                            break;
                        v829 += 16;
                    }
                    v825 = v1269;
                }
            LABEL_1021:
                v825 += 10;
                if (!--ySum)
                    return;
            }
            if (v828 > widthViewPort_93AD8)
                v828 = widthViewPort_93AD8;
            v16 = (__int16)v828 <= (__int16)v826;
            LOWORD(v828) = v828 - v826;
            if (v16)
                goto LABEL_1021;
            v829 += v826;
            v831 = __ROL4__(*((_DWORD*)v825 + 3), 16);
            BYTE1(v827) = v831;
            LOWORD(v831) = v825[4];
            LOBYTE(v827) = *((_BYTE*)v825 + 10);
            v1193 = v828;
            v832 = __ROL4__(*((_DWORD*)v825 + 4), 16);
            goto LABEL_1002;
        case 22:
        LABEL_1023:
            v864 = (unsigned __int16*)&unk_93AE0;
            v1161 = scaledV << 16;
            HIWORD(v865) = 0;
            HIWORD(v866) = 0;
            while (1)
            {
                LOWORD(v865) = v864[1];
                v867 = v864[3];
                v868 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v865 & 0x8000u) == 0)
                    break;
                if ((__int16)v867 > 0)
                {
                    v869 = (unsigned __int16)-(__int16)v865;
                    v871 = __ROL4__(*((_DWORD*)v864 + 3) + scaledV * v869, 16);
                    BYTE1(v866) = v871;
                    v870 = *((_DWORD*)v864 + 2) + scaledU * v869;
                    LOWORD(v871) = v870;
                    v872 = v870 >> 8;
                    LOBYTE(v866) = BYTE1(v872);
                    if (v867 > widthViewPort_93AD8)
                        LOWORD(v867) = widthViewPort_93AD8;
                    v865 = (unsigned __int16)v872;
                LABEL_1033:
                    v1270 = v864;
                    v873 = (int)actTexture_93AD0;
                    while (1)
                    {
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = *v868;
                            *v868 = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v871);
                        LOWORD(v871) = scaledU + v871;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v871);
                        v874 = v1161 + v871;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v875 = v867 - 1;
                        if (!v875)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[1];
                            v868[1] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v874);
                        LOWORD(v874) = scaledU + v874;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v874);
                        v876 = v1161 + v874;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v877 = v875 - 1;
                        if (!v877)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[2];
                            v868[2] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v876);
                        LOWORD(v876) = scaledU + v876;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v876);
                        v878 = v1161 + v876;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v879 = v877 - 1;
                        if (!v879)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[3];
                            v868[3] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v878);
                        LOWORD(v878) = scaledU + v878;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v878);
                        v880 = v1161 + v878;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v881 = v879 - 1;
                        if (!v881)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[4];
                            v868[4] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v880);
                        LOWORD(v880) = scaledU + v880;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v880);
                        v882 = v1161 + v880;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v883 = v881 - 1;
                        if (!v883)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[5];
                            v868[5] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v882);
                        LOWORD(v882) = scaledU + v882;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v882);
                        v884 = v1161 + v882;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v885 = v883 - 1;
                        if (!v885)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[6];
                            v868[6] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v884);
                        LOWORD(v884) = scaledU + v884;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v884);
                        v886 = v1161 + v884;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v887 = v885 - 1;
                        if (!v887)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[7];
                            v868[7] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v886);
                        LOWORD(v886) = scaledU + v886;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v886);
                        v888 = v1161 + v886;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v889 = v887 - 1;
                        if (!v889)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[8];
                            v868[8] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v888);
                        LOWORD(v888) = scaledU + v888;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v888);
                        v890 = v1161 + v888;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v891 = v889 - 1;
                        if (!v891)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[9];
                            v868[9] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v890);
                        LOWORD(v890) = scaledU + v890;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v890);
                        v892 = v1161 + v890;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v893 = v891 - 1;
                        if (!v893)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[10];
                            v868[10] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v892);
                        LOWORD(v892) = scaledU + v892;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v892);
                        v894 = v1161 + v892;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v895 = v893 - 1;
                        if (!v895)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[11];
                            v868[11] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v894);
                        LOWORD(v894) = scaledU + v894;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v894);
                        v896 = v1161 + v894;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v897 = v895 - 1;
                        if (!v897)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[12];
                            v868[12] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v896);
                        LOWORD(v896) = scaledU + v896;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v896);
                        v898 = v1161 + v896;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v899 = v897 - 1;
                        if (!v899)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[13];
                            v868[13] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v898);
                        LOWORD(v898) = scaledU + v898;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v898);
                        v900 = v1161 + v898;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v901 = v899 - 1;
                        if (!v901)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[14];
                            v868[14] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v900);
                        LOWORD(v900) = scaledU + v900;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v900);
                        v902 = v1161 + v900;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v903 = v901 - 1;
                        if (!v903)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[15];
                            v868[15] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v902);
                        LOWORD(v902) = scaledU + v902;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v902);
                        v871 = v1161 + v902;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        LOWORD(v867) = v903 - 1;
                        if (!(_WORD)v867)
                            break;
                        v868 += 16;
                    }
                    v864 = v1270;
                }
            LABEL_1084:
                v864 += 10;
                if (!--ySum)
                    return;
            }
            if (v867 > widthViewPort_93AD8)
                LOWORD(v867) = widthViewPort_93AD8;
            v16 = (__int16)v867 <= (__int16)v865;
            LOWORD(v867) = v867 - v865;
            if (v16)
                goto LABEL_1084;
            v868 += v865;
            v871 = __ROL4__(*((_DWORD*)v864 + 3), 16);
            BYTE1(v866) = v871;
            LOWORD(v871) = v864[4];
            LOBYTE(v866) = *((_BYTE*)v864 + 10);
            goto LABEL_1033;
        case 23:
        LABEL_1086:
            v904 = (unsigned __int16*)&unk_93AE0;
            v1162 = scaledV << 16;
            HIWORD(v905) = 0;
            HIWORD(v906) = 0;
            while (1)
            {
                LOWORD(v905) = v904[1];
                v907 = v904[3];
                v908 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v905 & 0x8000u) == 0)
                    break;
                if ((__int16)v907 > 0)
                {
                    v909 = (unsigned __int16)-(__int16)v905;
                    v911 = __ROL4__(*((_DWORD*)v904 + 3) + scaledV * v909, 16);
                    BYTE1(v906) = v911;
                    v910 = *((_DWORD*)v904 + 2) + scaledU * v909;
                    LOWORD(v911) = v910;
                    v912 = v910 >> 8;
                    LOBYTE(v906) = BYTE1(v912);
                    if (v907 > widthViewPort_93AD8)
                        LOWORD(v907) = widthViewPort_93AD8;
                    v905 = (unsigned __int16)v912;
                LABEL_1096:
                    v1271 = v904;
                    v913 = (int)actTexture_93AD0;
                    while (1)
                    {
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = *v908;
                            *v908 = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v911);
                        LOWORD(v911) = scaledU + v911;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v911);
                        v914 = v1162 + v911;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v915 = v907 - 1;
                        if (!v915)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[1];
                            v908[1] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v914);
                        LOWORD(v914) = scaledU + v914;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v914);
                        v916 = v1162 + v914;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v917 = v915 - 1;
                        if (!v917)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[2];
                            v908[2] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v916);
                        LOWORD(v916) = scaledU + v916;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v916);
                        v918 = v1162 + v916;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v919 = v917 - 1;
                        if (!v919)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[3];
                            v908[3] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v918);
                        LOWORD(v918) = scaledU + v918;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v918);
                        v920 = v1162 + v918;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v921 = v919 - 1;
                        if (!v921)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[4];
                            v908[4] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v920);
                        LOWORD(v920) = scaledU + v920;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v920);
                        v922 = v1162 + v920;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v923 = v921 - 1;
                        if (!v923)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[5];
                            v908[5] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v922);
                        LOWORD(v922) = scaledU + v922;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v922);
                        v924 = v1162 + v922;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v925 = v923 - 1;
                        if (!v925)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[6];
                            v908[6] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v924);
                        LOWORD(v924) = scaledU + v924;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v924);
                        v926 = v1162 + v924;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v927 = v925 - 1;
                        if (!v927)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[7];
                            v908[7] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v926);
                        LOWORD(v926) = scaledU + v926;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v926);
                        v928 = v1162 + v926;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v929 = v927 - 1;
                        if (!v929)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[8];
                            v908[8] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v928);
                        LOWORD(v928) = scaledU + v928;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v928);
                        v930 = v1162 + v928;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v931 = v929 - 1;
                        if (!v931)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[9];
                            v908[9] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v930);
                        LOWORD(v930) = scaledU + v930;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v930);
                        v932 = v1162 + v930;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v933 = v931 - 1;
                        if (!v933)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[10];
                            v908[10] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v932);
                        LOWORD(v932) = scaledU + v932;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v932);
                        v934 = v1162 + v932;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v935 = v933 - 1;
                        if (!v935)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[11];
                            v908[11] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v934);
                        LOWORD(v934) = scaledU + v934;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v934);
                        v936 = v1162 + v934;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v937 = v935 - 1;
                        if (!v937)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[12];
                            v908[12] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v936);
                        LOWORD(v936) = scaledU + v936;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v936);
                        v938 = v1162 + v936;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v939 = v937 - 1;
                        if (!v939)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[13];
                            v908[13] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v938);
                        LOWORD(v938) = scaledU + v938;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v938);
                        v940 = v1162 + v938;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v941 = v939 - 1;
                        if (!v941)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[14];
                            v908[14] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v940);
                        LOWORD(v940) = scaledU + v940;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v940);
                        v942 = v1162 + v940;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v943 = v941 - 1;
                        if (!v943)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[15];
                            v908[15] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v942);
                        LOWORD(v942) = scaledU + v942;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v942);
                        v911 = v1162 + v942;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        LOWORD(v907) = v943 - 1;
                        if (!(_WORD)v907)
                            break;
                        v908 += 16;
                    }
                    v904 = v1271;
                }
            LABEL_1147:
                v904 += 10;
                if (!--ySum)
                    return;
            }
            if (v907 > widthViewPort_93AD8)
                LOWORD(v907) = widthViewPort_93AD8;
            v16 = (__int16)v907 <= (__int16)v905;
            LOWORD(v907) = v907 - v905;
            if (v16)
                goto LABEL_1147;
            v908 += v905;
            v911 = __ROL4__(*((_DWORD*)v904 + 3), 16);
            BYTE1(v906) = v911;
            LOWORD(v911) = v904[4];
            LOBYTE(v906) = *((_BYTE*)v904 + 10);
            goto LABEL_1096;
        case 24:
        LABEL_1149:
            v944 = (unsigned __int16*)&unk_93AE0;
            v1163 = scaledV << 16;
            v1170 = scaledZ << 16;
            HIWORD(v945) = 0;
            HIWORD(v946) = 0;
            while (1)
            {
                LOWORD(v945) = v944[1];
                v947 = v944[3];
                v948 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v945 & 0x8000u) == 0)
                    break;
                if ((__int16)v947 > 0)
                {
                    if (v947 > widthViewPort_93AD8)
                        v947 = widthViewPort_93AD8;
                    v1209 = v947;
                    v949 = (unsigned __int16)-(__int16)v945;
                    v950 = __ROL4__(*((_DWORD*)v944 + 3) + scaledV * v949, 16);
                    BYTE1(v946) = v950;
                    LOWORD(v950) = v944[4] + scaledU * v949;
                    v945 = (unsigned int)(*((_DWORD*)v944 + 2) + scaledU * v949) >> 8;
                    LOBYTE(v946) = (unsigned int)(*((_DWORD*)v944 + 2) + scaledU * v949) >> 16;
                    v951 = __ROL4__(*((_DWORD*)v944 + 4) + scaledZ * v949, 16);
                    v945 = (unsigned __int16)v945;
                LABEL_1159:
                    v1272 = v944;
                    v952 = (int)actTexture_93AD0;
                    while (1)
                    {
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v951;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = *v948;
                            *v948 = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v950);
                        LOWORD(v950) = scaledU + v950;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v950);
                        v953 = v1163 + v950;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v951);
                        v954 = v1170 + v951;
                        LOBYTE(v954) = BYTE2(scaledZ) + v171 + v954;
                        v1210 = v1209 - 1;
                        if (!v1210)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v954;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[1];
                            v948[1] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v953);
                        LOWORD(v953) = scaledU + v953;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v953);
                        v955 = v1163 + v953;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v954);
                        v956 = v1170 + v954;
                        LOBYTE(v956) = BYTE2(scaledZ) + v171 + v956;
                        v1211 = v1210 - 1;
                        if (!v1211)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v956;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[2];
                            v948[2] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v955);
                        LOWORD(v955) = scaledU + v955;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v955);
                        v957 = v1163 + v955;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v956);
                        v958 = v1170 + v956;
                        LOBYTE(v958) = BYTE2(scaledZ) + v171 + v958;
                        v1212 = v1211 - 1;
                        if (!v1212)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v958;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[3];
                            v948[3] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v957);
                        LOWORD(v957) = scaledU + v957;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v957);
                        v959 = v1163 + v957;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v958);
                        v960 = v1170 + v958;
                        LOBYTE(v960) = BYTE2(scaledZ) + v171 + v960;
                        v1213 = v1212 - 1;
                        if (!v1213)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v960;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[4];
                            v948[4] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v959);
                        LOWORD(v959) = scaledU + v959;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v959);
                        v961 = v1163 + v959;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v960);
                        v962 = v1170 + v960;
                        LOBYTE(v962) = BYTE2(scaledZ) + v171 + v962;
                        v1214 = v1213 - 1;
                        if (!v1214)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v962;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[5];
                            v948[5] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v961);
                        LOWORD(v961) = scaledU + v961;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v961);
                        v963 = v1163 + v961;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v962);
                        v964 = v1170 + v962;
                        LOBYTE(v964) = BYTE2(scaledZ) + v171 + v964;
                        v1215 = v1214 - 1;
                        if (!v1215)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v964;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[6];
                            v948[6] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v963);
                        LOWORD(v963) = scaledU + v963;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v963);
                        v965 = v1163 + v963;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v964);
                        v966 = v1170 + v964;
                        LOBYTE(v966) = BYTE2(scaledZ) + v171 + v966;
                        v1216 = v1215 - 1;
                        if (!v1216)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v966;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[7];
                            v948[7] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v965);
                        LOWORD(v965) = scaledU + v965;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v965);
                        v967 = v1163 + v965;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v966);
                        v968 = v1170 + v966;
                        LOBYTE(v968) = BYTE2(scaledZ) + v171 + v968;
                        v1217 = v1216 - 1;
                        if (!v1217)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v968;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[8];
                            v948[8] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v967);
                        LOWORD(v967) = scaledU + v967;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v967);
                        v969 = v1163 + v967;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v968);
                        v970 = v1170 + v968;
                        LOBYTE(v970) = BYTE2(scaledZ) + v171 + v970;
                        v1218 = v1217 - 1;
                        if (!v1218)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v970;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[9];
                            v948[9] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v969);
                        LOWORD(v969) = scaledU + v969;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v969);
                        v971 = v1163 + v969;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v970);
                        v972 = v1170 + v970;
                        LOBYTE(v972) = BYTE2(scaledZ) + v171 + v972;
                        v1219 = v1218 - 1;
                        if (!v1219)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v972;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[10];
                            v948[10] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v971);
                        LOWORD(v971) = scaledU + v971;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v971);
                        v973 = v1163 + v971;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v972);
                        v974 = v1170 + v972;
                        LOBYTE(v974) = BYTE2(scaledZ) + v171 + v974;
                        v1220 = v1219 - 1;
                        if (!v1220)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v974;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[11];
                            v948[11] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v973);
                        LOWORD(v973) = scaledU + v973;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v973);
                        v975 = v1163 + v973;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v974);
                        v976 = v1170 + v974;
                        LOBYTE(v976) = BYTE2(scaledZ) + v171 + v976;
                        v1221 = v1220 - 1;
                        if (!v1221)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v976;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[12];
                            v948[12] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v975);
                        LOWORD(v975) = scaledU + v975;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v975);
                        v977 = v1163 + v975;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v976);
                        v978 = v1170 + v976;
                        LOBYTE(v978) = BYTE2(scaledZ) + v171 + v978;
                        v1222 = v1221 - 1;
                        if (!v1222)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v978;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[13];
                            v948[13] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v977);
                        LOWORD(v977) = scaledU + v977;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v977);
                        v979 = v1163 + v977;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v978);
                        v980 = v1170 + v978;
                        LOBYTE(v980) = BYTE2(scaledZ) + v171 + v980;
                        v1223 = v1222 - 1;
                        if (!v1223)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v980;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[14];
                            v948[14] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v979);
                        LOWORD(v979) = scaledU + v979;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v979);
                        v981 = v1163 + v979;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v980);
                        v982 = v1170 + v980;
                        LOBYTE(v982) = BYTE2(scaledZ) + v171 + v982;
                        v1224 = v1223 - 1;
                        if (!v1224)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v982;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[15];
                            v948[15] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v981);
                        LOWORD(v981) = scaledU + v981;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v981);
                        v950 = v1163 + v981;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v982);
                        v951 = v1170 + v982;
                        LOBYTE(v951) = BYTE2(scaledZ) + v171 + v951;
                        v1209 = v1224 - 1;
                        if (!v1209)
                            break;
                        v948 += 16;
                    }
                    v944 = v1272;
                }
            LABEL_1210:
                v944 += 10;
                if (!--ySum)
                    return;
            }
            if (v947 > widthViewPort_93AD8)
                v947 = widthViewPort_93AD8;
            v16 = (__int16)v947 <= (__int16)v945;
            LOWORD(v947) = v947 - v945;
            if (v16)
                goto LABEL_1210;
            v948 += v945;
            v950 = __ROL4__(*((_DWORD*)v944 + 3), 16);
            BYTE1(v946) = v950;
            LOWORD(v950) = v944[4];
            LOBYTE(v946) = *((_BYTE*)v944 + 10);
            v1209 = v947;
            v951 = __ROL4__(*((_DWORD*)v944 + 4), 16);
            goto LABEL_1159;
        case 25:
        LABEL_1212:
            v983 = (unsigned __int16*)&unk_93AE0;
            v1164 = scaledV << 16;
            v1171 = scaledZ << 16;
            HIWORD(v984) = 0;
            HIWORD(v985) = 0;
            while (1)
            {
                LOWORD(v984) = v983[1];
                v986 = v983[3];
                v987 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v984 & 0x8000u) == 0)
                    break;
                if ((__int16)v986 > 0)
                {
                    if (v986 > widthViewPort_93AD8)
                        v986 = widthViewPort_93AD8;
                    v1225 = v986;
                    v988 = (unsigned __int16)-(__int16)v984;
                    v989 = __ROL4__(*((_DWORD*)v983 + 3) + scaledV * v988, 16);
                    BYTE1(v985) = v989;
                    LOWORD(v989) = v983[4] + scaledU * v988;
                    v984 = (unsigned int)(*((_DWORD*)v983 + 2) + scaledU * v988) >> 8;
                    LOBYTE(v985) = (unsigned int)(*((_DWORD*)v983 + 2) + scaledU * v988) >> 16;
                    v990 = __ROL4__(*((_DWORD*)v983 + 4) + scaledZ * v988, 16);
                    v984 = (unsigned __int16)v984;
                LABEL_1222:
                    v1273 = v983;
                    v991 = (int)actTexture_93AD0;
                    while (1)
                    {
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v990;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = *v987;
                            *v987 = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v989);
                        LOWORD(v989) = scaledU + v989;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v989);
                        v992 = v1164 + v989;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v990);
                        v993 = v1171 + v990;
                        LOBYTE(v993) = BYTE2(scaledZ) + v171 + v993;
                        v1226 = v1225 - 1;
                        if (!v1226)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v993;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[1];
                            v987[1] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v992);
                        LOWORD(v992) = scaledU + v992;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v992);
                        v994 = v1164 + v992;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v993);
                        v995 = v1171 + v993;
                        LOBYTE(v995) = BYTE2(scaledZ) + v171 + v995;
                        v1227 = v1226 - 1;
                        if (!v1227)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v995;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[2];
                            v987[2] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v994);
                        LOWORD(v994) = scaledU + v994;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v994);
                        v996 = v1164 + v994;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v995);
                        v997 = v1171 + v995;
                        LOBYTE(v997) = BYTE2(scaledZ) + v171 + v997;
                        v1228 = v1227 - 1;
                        if (!v1228)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v997;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[3];
                            v987[3] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v996);
                        LOWORD(v996) = scaledU + v996;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v996);
                        v998 = v1164 + v996;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v997);
                        v999 = v1171 + v997;
                        LOBYTE(v999) = BYTE2(scaledZ) + v171 + v999;
                        v1229 = v1228 - 1;
                        if (!v1229)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v999;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[4];
                            v987[4] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v998);
                        LOWORD(v998) = scaledU + v998;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v998);
                        v1000 = v1164 + v998;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v999);
                        v1001 = v1171 + v999;
                        LOBYTE(v1001) = BYTE2(scaledZ) + v171 + v1001;
                        v1230 = v1229 - 1;
                        if (!v1230)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1001;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[5];
                            v987[5] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1000);
                        LOWORD(v1000) = scaledU + v1000;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1000);
                        v1002 = v1164 + v1000;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1001);
                        v1003 = v1171 + v1001;
                        LOBYTE(v1003) = BYTE2(scaledZ) + v171 + v1003;
                        v1231 = v1230 - 1;
                        if (!v1231)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1003;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[6];
                            v987[6] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1002);
                        LOWORD(v1002) = scaledU + v1002;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1002);
                        v1004 = v1164 + v1002;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1003);
                        v1005 = v1171 + v1003;
                        LOBYTE(v1005) = BYTE2(scaledZ) + v171 + v1005;
                        v1232 = v1231 - 1;
                        if (!v1232)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1005;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[7];
                            v987[7] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1004);
                        LOWORD(v1004) = scaledU + v1004;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1004);
                        v1006 = v1164 + v1004;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1005);
                        v1007 = v1171 + v1005;
                        LOBYTE(v1007) = BYTE2(scaledZ) + v171 + v1007;
                        v1233 = v1232 - 1;
                        if (!v1233)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1007;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[8];
                            v987[8] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1006);
                        LOWORD(v1006) = scaledU + v1006;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1006);
                        v1008 = v1164 + v1006;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1007);
                        v1009 = v1171 + v1007;
                        LOBYTE(v1009) = BYTE2(scaledZ) + v171 + v1009;
                        v1234 = v1233 - 1;
                        if (!v1234)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1009;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[9];
                            v987[9] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1008);
                        LOWORD(v1008) = scaledU + v1008;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1008);
                        v1010 = v1164 + v1008;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1009);
                        v1011 = v1171 + v1009;
                        LOBYTE(v1011) = BYTE2(scaledZ) + v171 + v1011;
                        v1235 = v1234 - 1;
                        if (!v1235)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1011;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[10];
                            v987[10] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1010);
                        LOWORD(v1010) = scaledU + v1010;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1010);
                        v1012 = v1164 + v1010;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1011);
                        v1013 = v1171 + v1011;
                        LOBYTE(v1013) = BYTE2(scaledZ) + v171 + v1013;
                        v1236 = v1235 - 1;
                        if (!v1236)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1013;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[11];
                            v987[11] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1012);
                        LOWORD(v1012) = scaledU + v1012;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1012);
                        v1014 = v1164 + v1012;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1013);
                        v1015 = v1171 + v1013;
                        LOBYTE(v1015) = BYTE2(scaledZ) + v171 + v1015;
                        v1237 = v1236 - 1;
                        if (!v1237)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1015;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[12];
                            v987[12] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1014);
                        LOWORD(v1014) = scaledU + v1014;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1014);
                        v1016 = v1164 + v1014;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1015);
                        v1017 = v1171 + v1015;
                        LOBYTE(v1017) = BYTE2(scaledZ) + v171 + v1017;
                        v1238 = v1237 - 1;
                        if (!v1238)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1017;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[13];
                            v987[13] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1016);
                        LOWORD(v1016) = scaledU + v1016;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1016);
                        v1018 = v1164 + v1016;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1017);
                        v1019 = v1171 + v1017;
                        LOBYTE(v1019) = BYTE2(scaledZ) + v171 + v1019;
                        v1239 = v1238 - 1;
                        if (!v1239)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1019;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[14];
                            v987[14] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1018);
                        LOWORD(v1018) = scaledU + v1018;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1018);
                        v1020 = v1164 + v1018;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1019);
                        v1021 = v1171 + v1019;
                        LOBYTE(v1021) = BYTE2(scaledZ) + v171 + v1021;
                        v1240 = v1239 - 1;
                        if (!v1240)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1021;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[15];
                            v987[15] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1020);
                        LOWORD(v1020) = scaledU + v1020;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1020);
                        v989 = v1164 + v1020;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1021);
                        v990 = v1171 + v1021;
                        LOBYTE(v990) = BYTE2(scaledZ) + v171 + v990;
                        v1225 = v1240 - 1;
                        if (!v1225)
                            break;
                        v987 += 16;
                    }
                    v983 = v1273;
                }
            LABEL_1273:
                v983 += 10;
                if (!--ySum)
                    return;
            }
            if (v986 > widthViewPort_93AD8)
                v986 = widthViewPort_93AD8;
            v16 = (__int16)v986 <= (__int16)v984;
            LOWORD(v986) = v986 - v984;
            if (v16)
                goto LABEL_1273;
            v987 += v984;
            v989 = __ROL4__(*((_DWORD*)v983 + 3), 16);
            BYTE1(v985) = v989;
            LOWORD(v989) = v983[4];
            LOBYTE(v985) = *((_BYTE*)v983 + 10);
            v1225 = v986;
            v990 = __ROL4__(*((_DWORD*)v983 + 4), 16);
            goto LABEL_1222;
        case 26:
        LABEL_1275:
            v1022 = (unsigned __int16*)&unk_93AE0;
            v1165 = scaledV << 16;
            v1172 = scaledZ << 16;
            HIWORD(v1023) = 0;
            HIWORD(v1024) = 0;
            break;
        }
        while (1)
        {
            LOWORD(v1023) = v1022[1];
            v1025 = v1022[3];
            v1026 = (char*)(pitchViewPort_93AD4 + actScrPtr);
            actScrPtr += pitchViewPort_93AD4;
            if ((v1023 & 0x8000u) == 0)
                break;
            if ((__int16)v1025 > 0)
            {
                if (v1025 > widthViewPort_93AD8)
                    v1025 = widthViewPort_93AD8;
                v1241 = v1025;
                v1027 = (unsigned __int16)-(__int16)v1023;
                v1028 = __ROL4__(*((_DWORD*)v1022 + 3) + scaledV * v1027, 16);
                BYTE1(v1024) = v1028;
                LOWORD(v1028) = v1022[4] + scaledU * v1027;
                v1023 = (unsigned int)(*((_DWORD*)v1022 + 2) + scaledU * v1027) >> 8;
                LOBYTE(v1024) = (unsigned int)(*((_DWORD*)v1022 + 2) + scaledU * v1027) >> 16;
                v1029 = __ROL4__(*((_DWORD*)v1022 + 4) + scaledZ * v1027, 16);
                v1023 = (unsigned __int16)v1023;
            LABEL_1285:
                v1274 = v1022;
                v1030 = (int)actTexture_93AD0;
                while (1)
                {
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1028);
                    LOWORD(v1028) = scaledU + v1028;
                    BYTE1(v1023) = v1029;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1031 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = *v1026;
                        v1031 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1028);
                    v1032 = v1165 + v1028;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1029);
                    v1033 = v1172 + v1029;
                    *v1026 = v1031;
                    LOBYTE(v1033) = BYTE2(scaledZ) + v171 + v1033;
                    v1242 = v1241 - 1;
                    if (!v1242)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1032);
                    LOWORD(v1032) = scaledU + v1032;
                    BYTE1(v1023) = v1033;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1034 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[1];
                        v1034 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1032);
                    v1035 = v1165 + v1032;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1033);
                    v1036 = v1172 + v1033;
                    v1026[1] = v1034;
                    LOBYTE(v1036) = BYTE2(scaledZ) + v171 + v1036;
                    v1243 = v1242 - 1;
                    if (!v1243)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1035);
                    LOWORD(v1035) = scaledU + v1035;
                    BYTE1(v1023) = v1036;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1037 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[2];
                        v1037 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1035);
                    v1038 = v1165 + v1035;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1036);
                    v1039 = v1172 + v1036;
                    v1026[2] = v1037;
                    LOBYTE(v1039) = BYTE2(scaledZ) + v171 + v1039;
                    v1244 = v1243 - 1;
                    if (!v1244)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1038);
                    LOWORD(v1038) = scaledU + v1038;
                    BYTE1(v1023) = v1039;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1040 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[3];
                        v1040 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1038);
                    v1041 = v1165 + v1038;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1039);
                    v1042 = v1172 + v1039;
                    v1026[3] = v1040;
                    LOBYTE(v1042) = BYTE2(scaledZ) + v171 + v1042;
                    v1245 = v1244 - 1;
                    if (!v1245)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1041);
                    LOWORD(v1041) = scaledU + v1041;
                    BYTE1(v1023) = v1042;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1043 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[4];
                        v1043 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1041);
                    v1044 = v1165 + v1041;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1042);
                    v1045 = v1172 + v1042;
                    v1026[4] = v1043;
                    LOBYTE(v1045) = BYTE2(scaledZ) + v171 + v1045;
                    v1246 = v1245 - 1;
                    if (!v1246)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1044);
                    LOWORD(v1044) = scaledU + v1044;
                    BYTE1(v1023) = v1045;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1046 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[5];
                        v1046 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1044);
                    v1047 = v1165 + v1044;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1045);
                    v1048 = v1172 + v1045;
                    v1026[5] = v1046;
                    LOBYTE(v1048) = BYTE2(scaledZ) + v171 + v1048;
                    v1247 = v1246 - 1;
                    if (!v1247)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1047);
                    LOWORD(v1047) = scaledU + v1047;
                    BYTE1(v1023) = v1048;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1049 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[6];
                        v1049 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1047);
                    v1050 = v1165 + v1047;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1048);
                    v1051 = v1172 + v1048;
                    v1026[6] = v1049;
                    LOBYTE(v1051) = BYTE2(scaledZ) + v171 + v1051;
                    v1248 = v1247 - 1;
                    if (!v1248)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1050);
                    LOWORD(v1050) = scaledU + v1050;
                    BYTE1(v1023) = v1051;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1052 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[7];
                        v1052 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1050);
                    v1053 = v1165 + v1050;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1051);
                    v1054 = v1172 + v1051;
                    v1026[7] = v1052;
                    LOBYTE(v1054) = BYTE2(scaledZ) + v171 + v1054;
                    v1249 = v1248 - 1;
                    if (!v1249)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1053);
                    LOWORD(v1053) = scaledU + v1053;
                    BYTE1(v1023) = v1054;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1055 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[8];
                        v1055 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1053);
                    v1056 = v1165 + v1053;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1054);
                    v1057 = v1172 + v1054;
                    v1026[8] = v1055;
                    LOBYTE(v1057) = BYTE2(scaledZ) + v171 + v1057;
                    v1250 = v1249 - 1;
                    if (!v1250)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1056);
                    LOWORD(v1056) = scaledU + v1056;
                    BYTE1(v1023) = v1057;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1058 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[9];
                        v1058 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1056);
                    v1059 = v1165 + v1056;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1057);
                    v1060 = v1172 + v1057;
                    v1026[9] = v1058;
                    LOBYTE(v1060) = BYTE2(scaledZ) + v171 + v1060;
                    v1251 = v1250 - 1;
                    if (!v1251)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1059);
                    LOWORD(v1059) = scaledU + v1059;
                    BYTE1(v1023) = v1060;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1061 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[10];
                        v1061 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1059);
                    v1062 = v1165 + v1059;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1060);
                    v1063 = v1172 + v1060;
                    v1026[10] = v1061;
                    LOBYTE(v1063) = BYTE2(scaledZ) + v171 + v1063;
                    v1252 = v1251 - 1;
                    if (!v1252)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1062);
                    LOWORD(v1062) = scaledU + v1062;
                    BYTE1(v1023) = v1063;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1064 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[11];
                        v1064 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1062);
                    v1065 = v1165 + v1062;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1063);
                    v1066 = v1172 + v1063;
                    v1026[11] = v1064;
                    LOBYTE(v1066) = BYTE2(scaledZ) + v171 + v1066;
                    v1253 = v1252 - 1;
                    if (!v1253)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1065);
                    LOWORD(v1065) = scaledU + v1065;
                    BYTE1(v1023) = v1066;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1067 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[12];
                        v1067 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1065);
                    v1068 = v1165 + v1065;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1066);
                    v1069 = v1172 + v1066;
                    v1026[12] = v1067;
                    LOBYTE(v1069) = BYTE2(scaledZ) + v171 + v1069;
                    v1254 = v1253 - 1;
                    if (!v1254)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1068);
                    LOWORD(v1068) = scaledU + v1068;
                    BYTE1(v1023) = v1069;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1070 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[13];
                        v1070 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1068);
                    v1071 = v1165 + v1068;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1069);
                    v1072 = v1172 + v1069;
                    v1026[13] = v1070;
                    LOBYTE(v1072) = BYTE2(scaledZ) + v171 + v1072;
                    v1255 = v1254 - 1;
                    if (!v1255)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1071);
                    LOWORD(v1071) = scaledU + v1071;
                    BYTE1(v1023) = v1072;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1073 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[14];
                        v1073 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1071);
                    v1074 = v1165 + v1071;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1072);
                    v1075 = v1172 + v1072;
                    v1026[14] = v1073;
                    LOBYTE(v1075) = BYTE2(scaledZ) + v171 + v1075;
                    v1256 = v1255 - 1;
                    if (!v1256)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1074);
                    LOWORD(v1074) = scaledU + v1074;
                    BYTE1(v1023) = v1075;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1076 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[15];
                        v1076 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1074);
                    v1028 = v1165 + v1074;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1075);
                    v1029 = v1172 + v1075;
                    v1026[15] = v1076;
                    LOBYTE(v1029) = BYTE2(scaledZ) + v171 + v1029;
                    v1241 = v1256 - 1;
                    if (!v1241)
                        break;
                    v1026 += 16;
                }
                v1022 = v1274;
            }
        LABEL_1352:
            v1022 += 10;
            if (!--ySum)
                return;
        }
        if (v1025 > widthViewPort_93AD8)
            v1025 = widthViewPort_93AD8;
        v16 = (__int16)v1025 <= (__int16)v1023;
        LOWORD(v1025) = v1025 - v1023;
        if (v16)
            goto LABEL_1352;
        v1026 += v1023;
        v1028 = __ROL4__(*((_DWORD*)v1022 + 3), 16);
        BYTE1(v1024) = v1028;
        LOWORD(v1028) = v1022[4];
        LOBYTE(v1024) = *((_BYTE*)v1022 + 10);
        v1241 = v1025;
        v1029 = __ROL4__(*((_DWORD*)v1022 + 4), 16);
        goto LABEL_1285;
    }
    if (v6 == v8)
    {
        if (*a3 <= *a1)
            return;
        v3 = (int32*)a2;
        v4 = (int32*)a3;
        v5 = (int32*)a1;
        goto LABEL_225;
    }
    if (v6 < v8)
    {
        v3 = (int32*)a2;
        v4 = (int32*)a3;
        v5 = (int32*)a1;
        goto LABEL_124;
    }
    if (v7 == v8)
    {
        if (*(int32*)a3 <= *(int32*)a2)
            return;
        v3 = (int32*)a2;
        v4 = (int32*)a3;
        v5 = (int32*)a1;
        goto LABEL_268;
    }
    if (v7 < v8)
    {
        v3 = (int32*)a2;
        v4 = (int32*)a3;
        v5 = (int32*)a1;
        goto LABEL_24;
    }
    v3 = (int32*)a3;
    v4 = (int32*)a1;
    v5 = (int32*)a2;
LABEL_124:
    v60 = v3[1];
    v1174 = v60;
    if (v60 >= 0)
    {
        if (v60 >= heightViewPort_93ADC)
            return;
        actScrPtr = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * v60;
        v1276 = 0;
    }
    else
    {
        actScrPtr = beginPrevLineFrame_93AC8;
        v1276 = 1;
    }
    v61 = v5[1];
    v1280 = v61 > heightViewPort_93ADC;
    v1089 = v61 - v60;
    v62 = v4[1];
    v1284 = v62 > heightViewPort_93ADC;
    v63 = v62 - v60;
    v1093 = v63;
    ySum = v63;
    v1079 = ((*v5 - *v3) << 16) / v1089;
    if (((*v4 - *v3) << 16) / v63 > v1079)
    {
        v1083 = ((*v4 - *v3) << 16) / v63;
        v1087 = ((*v4 - *v5) << 16) / (v4[1] - v5[1]);
        v1095 = v4[1] - v5[1];
        v1097 = *v5 << 16;
        switch (byte_967E1)
        {
        case 0:
        case 14:
        case 15:
            v102 = *v3 << 16;
            v103 = v102;
            if (v1276)
            {
                v16 = ySum <= -v1174;
                ySum += v1174;
                if (v16)
                    return;
                v1146 = -v1174;
                if (-v1174 - v1089 >= 0)
                {
                    v1147 = v1146 - v1089;
                    v1095 -= v1147;
                    v104 = v1087 * v1147 + v1097;
                    v103 += v1147 * v1083 + v1089 * v1083;
                    if (v1284)
                    {
                        v1095 = heightViewPort_93ADC;
                        ySum = heightViewPort_93ADC;
                    }
                    v105 = (uint32*)&unk_93AE0;
                LABEL_219:
                    if (v1280)
                    {
                        v29 = (unsigned __int8)byte_967E1;
                        switch (byte_967E1)
                        {
                        case 0:
                            goto LABEL_309;
                        case 1:
                            goto LABEL_322;
                        case 2:
                            goto LABEL_351;
                        case 3:
                            goto LABEL_382;
                        case 4:
                            goto LABEL_445;
                        case 5:
                            goto LABEL_474;
                        case 6:
                            goto LABEL_503;
                        case 7:
                        case 11:
                            goto LABEL_564;
                        case 8:
                            goto LABEL_595;
                        case 9:
                        case 10:
                            goto LABEL_658;
                        case 12:
                            goto LABEL_721;
                        case 13:
                            goto LABEL_752;
                        case 14:
                            goto LABEL_783;
                        case 15:
                            goto LABEL_812;
                        case 16:
                            goto LABEL_841;
                        case 17:
                            goto LABEL_870;
                        case 18:
                            goto LABEL_899;
                        case 19:
                            goto LABEL_930;
                        case 20:
                            goto LABEL_961;
                        case 21:
                            goto LABEL_992;
                        case 22:
                            goto LABEL_1023;
                        case 23:
                            goto LABEL_1086;
                        case 24:
                            goto LABEL_1149;
                        case 25:
                            goto LABEL_1212;
                        case 26:
                            goto LABEL_1275;
                        }
                    }
                    do
                    {
                        *v105 = v104;
                        v104 += v1087;
                        v105[1] = v103;
                        v103 += v1083;
                        v105 += 5;
                        --v1095;
                    } while (v1095);
                    v29 = (unsigned __int8)byte_967E1;
                    switch (byte_967E1)
                    {
                    case 0:
                        goto LABEL_309;
                    case 1:
                        goto LABEL_322;
                    case 2:
                        goto LABEL_351;
                    case 3:
                        goto LABEL_382;
                    case 4:
                        goto LABEL_445;
                    case 5:
                        goto LABEL_474;
                    case 6:
                        goto LABEL_503;
                    case 7:
                    case 11:
                        goto LABEL_564;
                    case 8:
                        goto LABEL_595;
                    case 9:
                    case 10:
                        goto LABEL_658;
                    case 12:
                        goto LABEL_721;
                    case 13:
                        goto LABEL_752;
                    case 14:
                        goto LABEL_783;
                    case 15:
                        goto LABEL_812;
                    case 16:
                        goto LABEL_841;
                    case 17:
                        goto LABEL_870;
                    case 18:
                        goto LABEL_899;
                    case 19:
                        goto LABEL_930;
                    case 20:
                        goto LABEL_961;
                    case 21:
                        goto LABEL_992;
                    case 22:
                        goto LABEL_1023;
                    case 23:
                        goto LABEL_1086;
                    case 24:
                        goto LABEL_1149;
                    case 25:
                        goto LABEL_1212;
                    case 26:
                        goto LABEL_1275;
                    }
                }
                v1089 += v1174;
                v102 += v1079 * v1146;
                v103 += v1146 * v1083;
                if (v1284)
                {
                    ySum = heightViewPort_93ADC;
                    if (v1280)
                    {
                        v1089 = heightViewPort_93ADC;
                    }
                    else
                    {
                        v1280 = heightViewPort_93ADC <= v1089;
                        v1095 = heightViewPort_93ADC - v1089;
                    }
                }
            }
            else if (v1284)
            {
                v106 = heightViewPort_93ADC - v1174;
                ySum = heightViewPort_93ADC - v1174;
                if (v1280)
                {
                    v1089 = heightViewPort_93ADC - v1174;
                }
                else
                {
                    v27 = __OFSUB__(v106, v1089);
                    v107 = v106 - v1089;
                    v1280 = (v107 < 0) ^ v27 | (v107 == 0);
                    v1095 = v107;
                }
            }
            v105 = (uint32*)&unk_93AE0;
            do
            {
                *v105 = v102;
                v102 += v1079;
                v105[1] = v103;
                v103 += v1083;
                v105 += 5;
                --v1089;
            } while (v1089);
            v104 = v1097;
            goto LABEL_219;
        case 1:
        case 4:
        case 16:
        case 17:
            v91 = v1089 * (__int64)(*v4 - *v3) / v63;
            v92 = *v3 - *v5;
            v93 = v91 + v92 == 0;
            v16 = (v91 + v92 < 0) ^ __OFADD__(v91, v92);
            v94 = v91 + v92;
            if (v16)
                return;
            if (!v93)
                scaledZ = (int)(v3[4] + v1089 * (__int64)(v4[4] - v3[4]) / v1093 - v5[4]) / (v94 + 1);
            v1125 = (v5[4] - v3[4]) / v1089;
            v1131 = (v4[4] - v5[4]) / v1095;
            v95 = *v3 << 16;
            v96 = v95;
            v97 = v3[4];
            if (v1276)
            {
                v16 = ySum <= -v1174;
                ySum += v1174;
                if (v16)
                    return;
                v1144 = -v1174;
                if (-v1174 - v1089 >= 0)
                {
                    v1145 = v1144 - v1089;
                    v1095 -= v1145;
                    v98 = v1087 * v1145 + v1097;
                    v96 += v1145 * v1083 + v1089 * v1083;
                    v97 += v1145 * v1131 + v1089 * v1125;
                    if (v1284)
                    {
                        v1095 = heightViewPort_93ADC;
                        ySum = heightViewPort_93ADC;
                    }
                    v99 = (uint32*)&unk_93AE0;
                LABEL_198:
                    if (v1280)
                    {
                        v29 = (unsigned __int8)byte_967E1;
                        switch (byte_967E1)
                        {
                        case 0:
                            goto LABEL_309;
                        case 1:
                            goto LABEL_322;
                        case 2:
                            goto LABEL_351;
                        case 3:
                            goto LABEL_382;
                        case 4:
                            goto LABEL_445;
                        case 5:
                            goto LABEL_474;
                        case 6:
                            goto LABEL_503;
                        case 7:
                        case 11:
                            goto LABEL_564;
                        case 8:
                            goto LABEL_595;
                        case 9:
                        case 10:
                            goto LABEL_658;
                        case 12:
                            goto LABEL_721;
                        case 13:
                            goto LABEL_752;
                        case 14:
                            goto LABEL_783;
                        case 15:
                            goto LABEL_812;
                        case 16:
                            goto LABEL_841;
                        case 17:
                            goto LABEL_870;
                        case 18:
                            goto LABEL_899;
                        case 19:
                            goto LABEL_930;
                        case 20:
                            goto LABEL_961;
                        case 21:
                            goto LABEL_992;
                        case 22:
                            goto LABEL_1023;
                        case 23:
                            goto LABEL_1086;
                        case 24:
                            goto LABEL_1149;
                        case 25:
                            goto LABEL_1212;
                        case 26:
                            goto LABEL_1275;
                        }
                    }
                    do
                    {
                        *v99 = v98;
                        v98 += v1087;
                        v99[1] = v96;
                        v96 += v1083;
                        v99[4] = v97;
                        v97 += v1131;
                        v99 += 5;
                        --v1095;
                    } while (v1095);
                    v29 = (unsigned __int8)byte_967E1;
                    switch (byte_967E1)
                    {
                    case 0:
                        goto LABEL_309;
                    case 1:
                        goto LABEL_322;
                    case 2:
                        goto LABEL_351;
                    case 3:
                        goto LABEL_382;
                    case 4:
                        goto LABEL_445;
                    case 5:
                        goto LABEL_474;
                    case 6:
                        goto LABEL_503;
                    case 7:
                    case 11:
                        goto LABEL_564;
                    case 8:
                        goto LABEL_595;
                    case 9:
                    case 10:
                        goto LABEL_658;
                    case 12:
                        goto LABEL_721;
                    case 13:
                        goto LABEL_752;
                    case 14:
                        goto LABEL_783;
                    case 15:
                        goto LABEL_812;
                    case 16:
                        goto LABEL_841;
                    case 17:
                        goto LABEL_870;
                    case 18:
                        goto LABEL_899;
                    case 19:
                        goto LABEL_930;
                    case 20:
                        goto LABEL_961;
                    case 21:
                        goto LABEL_992;
                    case 22:
                        goto LABEL_1023;
                    case 23:
                        goto LABEL_1086;
                    case 24:
                        goto LABEL_1149;
                    case 25:
                        goto LABEL_1212;
                    case 26:
                        goto LABEL_1275;
                    }
                }
                v1089 += v1174;
                v95 += v1079 * v1144;
                v96 += v1144 * v1083;
                v97 += v1144 * v1125;
                if (v1284)
                {
                    ySum = heightViewPort_93ADC;
                    if (v1280)
                    {
                        v1089 = heightViewPort_93ADC;
                    }
                    else
                    {
                        v1280 = heightViewPort_93ADC <= v1089;
                        v1095 = heightViewPort_93ADC - v1089;
                    }
                }
            }
            else if (v1284)
            {
                v100 = heightViewPort_93ADC - v1174;
                ySum = heightViewPort_93ADC - v1174;
                if (v1280)
                {
                    v1089 = heightViewPort_93ADC - v1174;
                }
                else
                {
                    v27 = __OFSUB__(v100, v1089);
                    v101 = v100 - v1089;
                    v1280 = (v101 < 0) ^ v27 | (v101 == 0);
                    v1095 = v101;
                }
            }
            v99 = (uint32*)&unk_93AE0;
            do
            {
                *v99 = v95;
                v95 += v1079;
                v99[1] = v96;
                v96 += v1083;
                v99[4] = v97;
                v97 += v1125;
                v99 += 5;
                --v1089;
            } while (v1089);
            v98 = v1097;
            goto LABEL_198;
        case 2:
        case 3:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 18:
        case 19:
        case 22:
        case 23:
            v78 = v1089 * (__int64)(*v4 - *v3) / v63;
            v79 = *v3 - *v5;
            v80 = v78 + v79 == 0;
            v16 = (v78 + v79 < 0) ^ __OFADD__(v78, v79);
            v81 = v78 + v79;
            if (v16)
                return;
            if (!v80)
            {
                v82 = v81 + 1;
                scaledU = (int)(v3[2] + v1089 * (__int64)(v4[2] - v3[2]) / v1093 - v5[2]) / v82;
                scaledV = (int)(v3[3] + v1089 * (__int64)(v4[3] - v3[3]) / v1093 - v5[3]) / v82;
            }
            v1103 = (v5[2] - v3[2]) / v1089;
            v1114 = (v5[3] - v3[3]) / v1089;
            v1109 = (v4[2] - v5[2]) / v1095;
            v1120 = (v4[3] - v5[3]) / v1095;
            v83 = *v3 << 16;
            v84 = v83;
            v85 = v3[2];
            v86 = v3[3];
            if (v1276)
            {
                v16 = ySum <= -v1174;
                ySum += v1174;
                if (v16)
                    return;
                v1142 = -v1174;
                if (-v1174 - v1089 >= 0)
                {
                    v1143 = v1142 - v1089;
                    v1095 -= v1143;
                    v87 = v1087 * v1143 + v1097;
                    v84 += v1143 * v1083 + v1089 * v1083;
                    v85 += v1143 * v1109 + v1089 * v1103;
                    v86 += v1143 * v1120 + v1089 * v1114;
                    if (v1284)
                    {
                        v1095 = heightViewPort_93ADC;
                        ySum = heightViewPort_93ADC;
                    }
                    v88 = (uint32*)&unk_93AE0;
                LABEL_174:
                    if (v1280)
                    {
                        v29 = (unsigned __int8)byte_967E1;
                        switch (byte_967E1)
                        {
                        case 0:
                            goto LABEL_309;
                        case 1:
                            goto LABEL_322;
                        case 2:
                            goto LABEL_351;
                        case 3:
                            goto LABEL_382;
                        case 4:
                            goto LABEL_445;
                        case 5:
                            goto LABEL_474;
                        case 6:
                            goto LABEL_503;
                        case 7:
                        case 11:
                            goto LABEL_564;
                        case 8:
                            goto LABEL_595;
                        case 9:
                        case 10:
                            goto LABEL_658;
                        case 12:
                            goto LABEL_721;
                        case 13:
                            goto LABEL_752;
                        case 14:
                            goto LABEL_783;
                        case 15:
                            goto LABEL_812;
                        case 16:
                            goto LABEL_841;
                        case 17:
                            goto LABEL_870;
                        case 18:
                            goto LABEL_899;
                        case 19:
                            goto LABEL_930;
                        case 20:
                            goto LABEL_961;
                        case 21:
                            goto LABEL_992;
                        case 22:
                            goto LABEL_1023;
                        case 23:
                            goto LABEL_1086;
                        case 24:
                            goto LABEL_1149;
                        case 25:
                            goto LABEL_1212;
                        case 26:
                            goto LABEL_1275;
                        }
                    }
                    do
                    {
                        *v88 = v87;
                        v87 += v1087;
                        v88[1] = v84;
                        v84 += v1083;
                        v88[2] = v85;
                        v85 += v1109;
                        v88[3] = v86;
                        v86 += v1120;
                        v88 += 5;
                        --v1095;
                    } while (v1095);
                    v29 = (unsigned __int8)byte_967E1;
                    switch (byte_967E1)
                    {
                    case 0:
                        goto LABEL_309;
                    case 1:
                        goto LABEL_322;
                    case 2:
                        goto LABEL_351;
                    case 3:
                        goto LABEL_382;
                    case 4:
                        goto LABEL_445;
                    case 5:
                        goto LABEL_474;
                    case 6:
                        goto LABEL_503;
                    case 7:
                    case 11:
                        goto LABEL_564;
                    case 8:
                        goto LABEL_595;
                    case 9:
                    case 10:
                        goto LABEL_658;
                    case 12:
                        goto LABEL_721;
                    case 13:
                        goto LABEL_752;
                    case 14:
                        goto LABEL_783;
                    case 15:
                        goto LABEL_812;
                    case 16:
                        goto LABEL_841;
                    case 17:
                        goto LABEL_870;
                    case 18:
                        goto LABEL_899;
                    case 19:
                        goto LABEL_930;
                    case 20:
                        goto LABEL_961;
                    case 21:
                        goto LABEL_992;
                    case 22:
                        goto LABEL_1023;
                    case 23:
                        goto LABEL_1086;
                    case 24:
                        goto LABEL_1149;
                    case 25:
                        goto LABEL_1212;
                    case 26:
                        goto LABEL_1275;
                    }
                }
                v1089 += v1174;
                v83 += v1079 * v1142;
                v84 += v1142 * v1083;
                v85 += v1142 * v1103;
                v86 += v1142 * v1114;
                if (v1284)
                {
                    ySum = heightViewPort_93ADC;
                    if (v1280)
                    {
                        v1089 = heightViewPort_93ADC;
                    }
                    else
                    {
                        v1280 = heightViewPort_93ADC <= v1089;
                        v1095 = heightViewPort_93ADC - v1089;
                    }
                }
            }
            else if (v1284)
            {
                v89 = heightViewPort_93ADC - v1174;
                ySum = heightViewPort_93ADC - v1174;
                if (v1280)
                {
                    v1089 = heightViewPort_93ADC - v1174;
                }
                else
                {
                    v27 = __OFSUB__(v89, v1089);
                    v90 = v89 - v1089;
                    v1280 = (v90 < 0) ^ v27 | (v90 == 0);
                    v1095 = v90;
                }
            }
            v88 = (uint32*)&unk_93AE0;
            do
            {
                *v88 = v83;
                v83 += v1079;
                v88[1] = v84;
                v84 += v1083;
                v88[2] = v85;
                v85 += v1103;
                v88[3] = v86;
                v86 += v1114;
                v88 += 5;
                --v1089;
            } while (v1089);
            v87 = v1097;
            goto LABEL_174;
        case 5:
        case 6:
        case 20:
        case 21:
        case 24:
        case 25:
        case 26:
            v64 = v1089 * (__int64)(*v4 - *v3) / v63;
            v65 = *v3 - *v5;
            v66 = v64 + v65 == 0;
            v16 = (v64 + v65 < 0) ^ __OFADD__(v64, v65);
            v67 = v64 + v65;
            if (v16)
                return;
            if (!v66)
            {
                v68 = v67 + 1;
                scaledU = (int)(v3[2] + v1089 * (__int64)(v4[2] - v3[2]) / v1093 - v5[2]) / v68;
                scaledV = (int)(v3[3] + v1089 * (__int64)(v4[3] - v3[3]) / v1093 - v5[3]) / v68;
                v64 = (int)(v3[4] + v1089 * (__int64)(v4[4] - v3[4]) / v1093 - v5[4]) / v68;
            }
            scaledZ = v64;
            v1102 = (v5[2] - v3[2]) / v1089;
            v1113 = (v5[3] - v3[3]) / v1089;
            v1124 = (v5[4] - v3[4]) / v1089;
            v1108 = (v4[2] - v5[2]) / v1095;
            v1119 = (v4[3] - v5[3]) / v1095;
            v1130 = (v4[4] - v5[4]) / v1095;
            v69 = *v3 << 16;
            v70 = v69;
            v71 = v3[2];
            v72 = v3[3];
            v73 = v3[4];
            if (v1276)
            {
                v16 = ySum <= -v1174;
                ySum += v1174;
                if (v16)
                    return;
                v1140 = -v1174;
                if (-v1174 - v1089 >= 0)
                {
                    v1141 = v1140 - v1089;
                    v1095 -= v1141;
                    v74 = v1087 * v1141 + v1097;
                    v70 += v1141 * v1083 + v1089 * v1083;
                    v71 += v1141 * v1108 + v1089 * v1102;
                    v72 += v1141 * v1119 + v1089 * v1113;
                    v73 += v1141 * v1130 + v1089 * v1124;
                    if (v1284)
                    {
                        v1095 = heightViewPort_93ADC;
                        ySum = heightViewPort_93ADC;
                    }
                    v75 = (uint32*)&unk_93AE0;
                LABEL_150:
                    if (v1280)
                    {
                        v29 = (unsigned __int8)byte_967E1;
                        switch (byte_967E1)
                        {
                        case 0:
                            goto LABEL_309;
                        case 1:
                            goto LABEL_322;
                        case 2:
                            goto LABEL_351;
                        case 3:
                            goto LABEL_382;
                        case 4:
                            goto LABEL_445;
                        case 5:
                            goto LABEL_474;
                        case 6:
                            goto LABEL_503;
                        case 7:
                        case 11:
                            goto LABEL_564;
                        case 8:
                            goto LABEL_595;
                        case 9:
                        case 10:
                            goto LABEL_658;
                        case 12:
                            goto LABEL_721;
                        case 13:
                            goto LABEL_752;
                        case 14:
                            goto LABEL_783;
                        case 15:
                            goto LABEL_812;
                        case 16:
                            goto LABEL_841;
                        case 17:
                            goto LABEL_870;
                        case 18:
                            goto LABEL_899;
                        case 19:
                            goto LABEL_930;
                        case 20:
                            goto LABEL_961;
                        case 21:
                            goto LABEL_992;
                        case 22:
                            goto LABEL_1023;
                        case 23:
                            goto LABEL_1086;
                        case 24:
                            goto LABEL_1149;
                        case 25:
                            goto LABEL_1212;
                        case 26:
                            goto LABEL_1275;
                        }
                    }
                    do
                    {
                        *v75 = v74;
                        v74 += v1087;
                        v75[1] = v70;
                        v70 += v1083;
                        v75[2] = v71;
                        v71 += v1108;
                        v75[3] = v72;
                        v72 += v1119;
                        v75[4] = v73;
                        v73 += v1130;
                        v75 += 5;
                        --v1095;
                    } while (v1095);
                    v29 = (unsigned __int8)byte_967E1;
                    switch (byte_967E1)
                    {
                    case 0:
                        goto LABEL_309;
                    case 1:
                        goto LABEL_322;
                    case 2:
                        goto LABEL_351;
                    case 3:
                        goto LABEL_382;
                    case 4:
                        goto LABEL_445;
                    case 5:
                        goto LABEL_474;
                    case 6:
                        goto LABEL_503;
                    case 7:
                    case 11:
                        goto LABEL_564;
                    case 8:
                        goto LABEL_595;
                    case 9:
                    case 10:
                        goto LABEL_658;
                    case 12:
                        goto LABEL_721;
                    case 13:
                        goto LABEL_752;
                    case 14:
                        goto LABEL_783;
                    case 15:
                        goto LABEL_812;
                    case 16:
                        goto LABEL_841;
                    case 17:
                        goto LABEL_870;
                    case 18:
                        goto LABEL_899;
                    case 19:
                        goto LABEL_930;
                    case 20:
                        goto LABEL_961;
                    case 21:
                        goto LABEL_992;
                    case 22:
                        goto LABEL_1023;
                    case 23:
                        goto LABEL_1086;
                    case 24:
                        goto LABEL_1149;
                    case 25:
                        goto LABEL_1212;
                    case 26:
                        goto LABEL_1275;
                    }
                }
                v1089 += v1174;
                v69 += v1079 * v1140;
                v70 += v1140 * v1083;
                v71 += v1140 * v1102;
                v72 += v1140 * v1113;
                v73 += v1140 * v1124;
                if (v1284)
                {
                    ySum = heightViewPort_93ADC;
                    if (v1280)
                    {
                        v1089 = heightViewPort_93ADC;
                    }
                    else
                    {
                        v1280 = heightViewPort_93ADC <= v1089;
                        v1095 = heightViewPort_93ADC - v1089;
                    }
                }
            }
            else if (v1284)
            {
                v76 = heightViewPort_93ADC - v1174;
                ySum = heightViewPort_93ADC - v1174;
                if (v1280)
                {
                    v1089 = heightViewPort_93ADC - v1174;
                }
                else
                {
                    v27 = __OFSUB__(v76, v1089);
                    v77 = v76 - v1089;
                    v1280 = (v77 < 0) ^ v27 | (v77 == 0);
                    v1095 = v77;
                }
            }
            v75 = (uint32*)&unk_93AE0;
            do
            {
                *v75 = v69;
                v69 += v1079;
                v75[1] = v70;
                v70 += v1083;
                v75[2] = v71;
                v71 += v1102;
                v75[3] = v72;
                v72 += v1113;
                v75[4] = v73;
                v73 += v1124;
                v75 += 5;
                --v1089;
            } while (v1089);
            v74 = v1097;
            goto LABEL_150;
        }
    }
}

void DrawTriangle_729A3_72EB3_semi(Type_RenderPoint* pnt1, Type_RenderPoint* pnt2, Type_RenderPoint* pnt3)//2439A3_ // draw textured triangle
{
    Type_RenderPoint* sortPnt1; // esi
    Type_RenderPoint* sortPnt2; // edi
    Type_RenderPoint* sortPnt3; // ecx
  //int32 v6; // eax
  //int32 v7; // ebx
  //int32 v8; // edx
  //int v9; // eax
  //int v10; // ebx
  //int v11; // ebx
  //int v12; // ebx
    int v13; // eax
    int v14; // ebx
    _BOOL1 v15; // zf
    char v16; // cc
    int v17; // ebx
    int v18; // ebx
    int v19; // eax
    int v20; // ebx
    int v21; // ecx
    int v22; // edx
    int v23; // esi
    int v24; // ebx
    _DWORD* v25; // edi
    int v26; // edi
    _BOOL1 v27; // of
    int v28; // edi
    unsigned int v29; // eax
    int v30; // eax
    int v31; // ebx
    _BOOL1 v32; // zf
    int v33; // ebx
    int v34; // ebx
    int v35; // eax
    int v36; // ebx
    int v37; // ecx
    int v38; // edx
    int v39; // ebx
    _DWORD* v40; // edi
    int v41; // edi
    int v42; // edi
    int v43; // eax
    int v44; // ebx
    _BOOL1 v45; // zf
    int v46; // ebx
    int v47; // eax
    int v48; // ebx
    int v49; // esi
    int v50; // ebx
    _DWORD* v51; // edi
    int v52; // edi
    int v53; // edi
    int v54; // eax
    int v55; // ebx
    int v56; // ebx
    _DWORD* v57; // edi
    int v58; // edi
    int v59; // edi
    int v60; // eax
    int v61; // ebx
    int v62; // ebx
    int v63; // ebx
    int v64; // eax
    int v65; // ebx
    _BOOL1 v66; // zf
    int v67; // ebx
    int v68; // ebx
    int v69; // eax
    int v70; // ebx
    int v71; // ecx
    int v72; // edx
    int v73; // esi
    int v74; // eax
    _DWORD* v75; // edi
    int v76; // edi
    int v77; // edi
    int v78; // eax
    int v79; // ebx
    _BOOL1 v80; // zf
    int v81; // ebx
    int v82; // ebx
    int v83; // eax
    int v84; // ebx
    int v85; // ecx
    int v86; // edx
    int v87; // eax
    _DWORD* v88; // edi
    int v89; // edi
    int v90; // edi
    int v91; // eax
    int v92; // ebx
    _BOOL1 v93; // zf
    int v94; // ebx
    int v95; // eax
    int v96; // ebx
    int v97; // esi
    int v98; // eax
    _DWORD* v99; // edi
    int v100; // edi
    int v101; // edi
    int v102; // eax
    int v103; // ebx
    int v104; // eax
    _DWORD* v105; // edi
    int v106; // edi
    int v107; // edi
    int v108; // eax
    int v109; // ebx
    int v110; // ebx
    int v111; // eax
    int v112; // ebx
    int v113; // ecx
    int v114; // edx
    int v115; // esi
    int v116; // edi
    _DWORD* v117; // edi
    int v118; // ebx
    int v119; // eax
    int v120; // ebx
    int v121; // ecx
    int v122; // edx
    int v123; // edi
    _DWORD* v124; // edi
    int v125; // eax
    int v126; // ebx
    int v127; // esi
    int v128; // edi
    _DWORD* v129; // edi
    int v130; // eax
    int v131; // ebx
    int v132; // edi
    _DWORD* v133; // edi
    int v134; // eax
    int v135; // ebx
    int v136; // ebx
    int v137; // eax
    int v138; // ebx
    int v139; // ecx
    int v140; // edx
    int v141; // esi
    int v142; // edi
    _DWORD* v143; // edi
    int v144; // ebx
    int v145; // eax
    int v146; // ebx
    int v147; // ecx
    int v148; // edx
    int v149; // edi
    _DWORD* v150; // edi
    int v151; // eax
    int v152; // ebx
    int v153; // esi
    int v154; // edi
    _DWORD* v155; // edi
    int v156; // eax
    int v157; // ebx
    int v158; // edi
    _DWORD* v159; // edi
    unsigned __int16* v160; // esi
    char* v161; // edx
    char v162; // al
    int v163; // ebx
    signed int v164; // ecx
    char* v165; // edi
    _WORD* i; // esi
    int v167; // ecx
    _BYTE* v168; // edi
    unsigned int v169; // eax
    __int16 v170; // bx
    _BOOL1 v171; // cf
    __int16 v172; // bx
    __int16 v173; // bx
    char v174; // ah
    __int16 v175; // cx
    __int16 v176; // bx
    char v177; // ah
    __int16 v178; // cx
    __int16 v179; // bx
    char v180; // ah
    __int16 v181; // cx
    __int16 v182; // bx
    char v183; // ah
    __int16 v184; // cx
    __int16 v185; // bx
    char v186; // ah
    __int16 v187; // cx
    __int16 v188; // bx
    char v189; // ah
    __int16 v190; // cx
    __int16 v191; // bx
    char v192; // ah
    __int16 v193; // cx
    __int16 v194; // bx
    char v195; // ah
    __int16 v196; // cx
    __int16 v197; // bx
    char v198; // ah
    __int16 v199; // cx
    __int16 v200; // bx
    char v201; // ah
    __int16 v202; // cx
    __int16 v203; // bx
    char v204; // ah
    __int16 v205; // cx
    __int16 v206; // bx
    char v207; // ah
    __int16 v208; // cx
    __int16 v209; // bx
    char v210; // ah
    __int16 v211; // cx
    __int16 v212; // bx
    char v213; // ah
    __int16 v214; // cx
    __int16 v215; // bx
    char v216; // ah
    __int16 v217; // cx
    unsigned __int16* v218; // esi
    int v219; // eax
    int v220; // ebx
    int v221; // ecx
    _BYTE* v222; // edi
    int v223; // eax
    unsigned int v224; // eax
    int v225; // edx
    unsigned int v226; // eax
    int v227; // esi
    char v228; // al
    int v229; // edx
    __int16 v230; // cx
    char v231; // al
    int v232; // edx
    __int16 v233; // cx
    char v234; // al
    int v235; // edx
    __int16 v236; // cx
    char v237; // al
    int v238; // edx
    __int16 v239; // cx
    char v240; // al
    int v241; // edx
    __int16 v242; // cx
    char v243; // al
    int v244; // edx
    __int16 v245; // cx
    char v246; // al
    int v247; // edx
    __int16 v248; // cx
    char v249; // al
    int v250; // edx
    __int16 v251; // cx
    char v252; // al
    int v253; // edx
    __int16 v254; // cx
    char v255; // al
    int v256; // edx
    __int16 v257; // cx
    char v258; // al
    int v259; // edx
    __int16 v260; // cx
    char v261; // al
    int v262; // edx
    __int16 v263; // cx
    char v264; // al
    int v265; // edx
    __int16 v266; // cx
    char v267; // al
    int v268; // edx
    __int16 v269; // cx
    char v270; // al
    int v271; // edx
    __int16 v272; // cx
    char v273; // al
    unsigned __int16* v274; // esi
    int v275; // eax
    int v276; // ebx
    int v277; // ecx
    _BYTE* v278; // edi
    int v279; // eax
    unsigned int v280; // eax
    int v281; // edx
    unsigned int v282; // eax
    int v283; // esi
    char v284; // al
    int v285; // edx
    __int16 v286; // cx
    char v287; // al
    int v288; // edx
    __int16 v289; // cx
    char v290; // al
    int v291; // edx
    __int16 v292; // cx
    char v293; // al
    int v294; // edx
    __int16 v295; // cx
    char v296; // al
    int v297; // edx
    __int16 v298; // cx
    char v299; // al
    int v300; // edx
    __int16 v301; // cx
    char v302; // al
    int v303; // edx
    __int16 v304; // cx
    char v305; // al
    int v306; // edx
    __int16 v307; // cx
    char v308; // al
    int v309; // edx
    __int16 v310; // cx
    char v311; // al
    int v312; // edx
    __int16 v313; // cx
    char v314; // al
    int v315; // edx
    __int16 v316; // cx
    char v317; // al
    int v318; // edx
    __int16 v319; // cx
    char v320; // al
    int v321; // edx
    __int16 v322; // cx
    char v323; // al
    int v324; // edx
    __int16 v325; // cx
    char v326; // al
    int v327; // edx
    __int16 v328; // cx
    char v329; // al
    _WORD* j; // esi
    int v331; // ecx
    _BYTE* v332; // edi
    unsigned int v333; // eax
    __int16 v334; // bx
    __int16 v335; // bx
    __int16 v336; // bx
    __int16 v337; // cx
    __int16 v338; // bx
    __int16 v339; // cx
    __int16 v340; // bx
    __int16 v341; // cx
    __int16 v342; // bx
    __int16 v343; // cx
    __int16 v344; // bx
    __int16 v345; // cx
    __int16 v346; // bx
    __int16 v347; // cx
    __int16 v348; // bx
    __int16 v349; // cx
    __int16 v350; // bx
    __int16 v351; // cx
    __int16 v352; // bx
    __int16 v353; // cx
    __int16 v354; // bx
    __int16 v355; // cx
    __int16 v356; // bx
    __int16 v357; // cx
    __int16 v358; // bx
    __int16 v359; // cx
    __int16 v360; // bx
    __int16 v361; // cx
    __int16 v362; // bx
    __int16 v363; // cx
    __int16 v364; // bx
    __int16 v365; // cx
    unsigned int textPointer; // eax
    int v367; // ebx
    char* v368; // esi
    int temp93AE0_Y1_1; // ecx
    uint8* v370; // edi
    int textIndex; // ecx
    int v372; // edx
    int v373; // ecx
    __int16 v374; // cx
    __int16 v375; // bp
    _BYTE* v376; // edi
    int v377; // ebp
    unsigned int v378; // eax
    int v379; // ebx
    char* v380; // esi
    int v381; // ecx
    uint8* v382; // edi
    int v383; // ecx
    int v384; // edx
    int v385; // ecx
    __int16 v386; // cx
    __int16 v387; // bp
    _BYTE* v388; // edi
    int v389; // ebp
    unsigned __int16* v390; // esi
    int v391; // eax
    int v392; // ebx
    int v393; // ecx
    _BYTE* v394; // edi
    int v395; // eax
    unsigned int v396; // eax
    int v397; // edx
    unsigned int v398; // eax
    int v399; // esi
    int v400; // edx
    __int16 v401; // cx
    int v402; // edx
    __int16 v403; // cx
    int v404; // edx
    __int16 v405; // cx
    int v406; // edx
    __int16 v407; // cx
    int v408; // edx
    __int16 v409; // cx
    int v410; // edx
    __int16 v411; // cx
    int v412; // edx
    __int16 v413; // cx
    int v414; // edx
    __int16 v415; // cx
    int v416; // edx
    __int16 v417; // cx
    int v418; // edx
    __int16 v419; // cx
    int v420; // edx
    __int16 v421; // cx
    int v422; // edx
    __int16 v423; // cx
    int v424; // edx
    __int16 v425; // cx
    int v426; // edx
    __int16 v427; // cx
    int v428; // edx
    __int16 v429; // cx
    unsigned __int16* v430; // esi
    int v431; // eax
    int v432; // ebx
    int v433; // ecx
    _BYTE* v434; // edi
    int v435; // eax
    unsigned int v436; // eax
    int v437; // edx
    unsigned int v438; // eax
    int v439; // esi
    int v440; // edx
    __int16 v441; // cx
    int v442; // edx
    __int16 v443; // cx
    int v444; // edx
    __int16 v445; // cx
    int v446; // edx
    __int16 v447; // cx
    int v448; // edx
    __int16 v449; // cx
    int v450; // edx
    __int16 v451; // cx
    int v452; // edx
    __int16 v453; // cx
    int v454; // edx
    __int16 v455; // cx
    int v456; // edx
    __int16 v457; // cx
    int v458; // edx
    __int16 v459; // cx
    int v460; // edx
    __int16 v461; // cx
    int v462; // edx
    __int16 v463; // cx
    int v464; // edx
    __int16 v465; // cx
    int v466; // edx
    __int16 v467; // cx
    int v468; // edx
    __int16 v469; // cx
    unsigned __int16* v470; // esi
    int v471; // eax
    int v472; // ebx
    int v473; // ecx
    _BYTE* v474; // edi
    int v475; // eax
    unsigned int v476; // eax
    int v477; // edx
    unsigned int v478; // eax
    int v479; // esi
    int v480; // edx
    __int16 v481; // cx
    int v482; // edx
    __int16 v483; // cx
    int v484; // edx
    __int16 v485; // cx
    int v486; // edx
    __int16 v487; // cx
    int v488; // edx
    __int16 v489; // cx
    int v490; // edx
    __int16 v491; // cx
    int v492; // edx
    __int16 v493; // cx
    int v494; // edx
    __int16 v495; // cx
    int v496; // edx
    __int16 v497; // cx
    int v498; // edx
    __int16 v499; // cx
    int v500; // edx
    __int16 v501; // cx
    int v502; // edx
    __int16 v503; // cx
    int v504; // edx
    __int16 v505; // cx
    int v506; // edx
    __int16 v507; // cx
    int v508; // edx
    __int16 v509; // cx
    unsigned __int16* v510; // esi
    int v511; // eax
    int v512; // ebx
    int v513; // ecx
    _BYTE* v514; // edi
    int v515; // eax
    unsigned int v516; // eax
    int v517; // edx
    unsigned int v518; // eax
    int v519; // esi
    int v520; // edx
    __int16 v521; // cx
    int v522; // edx
    __int16 v523; // cx
    int v524; // edx
    __int16 v525; // cx
    int v526; // edx
    __int16 v527; // cx
    int v528; // edx
    __int16 v529; // cx
    int v530; // edx
    __int16 v531; // cx
    int v532; // edx
    __int16 v533; // cx
    int v534; // edx
    __int16 v535; // cx
    int v536; // edx
    __int16 v537; // cx
    int v538; // edx
    __int16 v539; // cx
    int v540; // edx
    __int16 v541; // cx
    int v542; // edx
    __int16 v543; // cx
    int v544; // edx
    __int16 v545; // cx
    int v546; // edx
    __int16 v547; // cx
    int v548; // edx
    __int16 v549; // cx
    unsigned __int16* v550; // esi
    int v551; // eax
    int v552; // ebx
    int v553; // ecx
    _BYTE* v554; // edi
    int v555; // eax
    unsigned int v556; // eax
    int v557; // edx
    unsigned int v558; // eax
    int v559; // esi
    int v560; // edx
    __int16 v561; // cx
    int v562; // edx
    __int16 v563; // cx
    int v564; // edx
    __int16 v565; // cx
    int v566; // edx
    __int16 v567; // cx
    int v568; // edx
    __int16 v569; // cx
    int v570; // edx
    __int16 v571; // cx
    int v572; // edx
    __int16 v573; // cx
    int v574; // edx
    __int16 v575; // cx
    int v576; // edx
    __int16 v577; // cx
    int v578; // edx
    __int16 v579; // cx
    int v580; // edx
    __int16 v581; // cx
    int v582; // edx
    __int16 v583; // cx
    int v584; // edx
    __int16 v585; // cx
    int v586; // edx
    __int16 v587; // cx
    int v588; // edx
    __int16 v589; // cx
    unsigned __int16* v590; // esi
    _BYTE* v591; // edx
    int v592; // eax
    int v593; // ebx
    int v594; // ecx
    _BYTE* k; // edi
    __int16 v596; // cx
    __int16 v597; // cx
    __int16 v598; // cx
    __int16 v599; // cx
    __int16 v600; // cx
    __int16 v601; // cx
    __int16 v602; // cx
    __int16 v603; // cx
    __int16 v604; // cx
    __int16 v605; // cx
    __int16 v606; // cx
    __int16 v607; // cx
    __int16 v608; // cx
    __int16 v609; // cx
    __int16 v610; // cx
    unsigned __int16* v611; // esi
    _BYTE* v612; // edx
    int v613; // eax
    int v614; // ebx
    int v615; // ecx
    _BYTE* m; // edi
    __int16 v617; // cx
    __int16 v618; // cx
    __int16 v619; // cx
    __int16 v620; // cx
    __int16 v621; // cx
    __int16 v622; // cx
    __int16 v623; // cx
    __int16 v624; // cx
    __int16 v625; // cx
    __int16 v626; // cx
    __int16 v627; // cx
    __int16 v628; // cx
    __int16 v629; // cx
    __int16 v630; // cx
    __int16 v631; // cx
    unsigned __int16* v632; // esi
    int v633; // edx
    int v634; // ecx
    _BYTE* v635; // edi
    unsigned int v636; // eax
    __int16 v637; // bx
    unsigned __int16 v638; // bx
    __int16 v639; // bx
    __int16 v640; // cx
    __int16 v641; // bx
    __int16 v642; // cx
    __int16 v643; // bx
    __int16 v644; // cx
    __int16 v645; // bx
    __int16 v646; // cx
    __int16 v647; // bx
    __int16 v648; // cx
    __int16 v649; // bx
    __int16 v650; // cx
    __int16 v651; // bx
    __int16 v652; // cx
    __int16 v653; // bx
    __int16 v654; // cx
    __int16 v655; // bx
    __int16 v656; // cx
    __int16 v657; // bx
    __int16 v658; // cx
    __int16 v659; // bx
    __int16 v660; // cx
    __int16 v661; // bx
    __int16 v662; // cx
    __int16 v663; // bx
    __int16 v664; // cx
    __int16 v665; // bx
    __int16 v666; // cx
    __int16 v667; // bx
    __int16 v668; // cx
    unsigned __int16* v669; // esi
    int v670; // edx
    int v671; // ecx
    _BYTE* v672; // edi
    unsigned int v673; // eax
    __int16 v674; // bx
    unsigned __int16 v675; // bx
    __int16 v676; // bx
    __int16 v677; // cx
    __int16 v678; // bx
    __int16 v679; // cx
    __int16 v680; // bx
    __int16 v681; // cx
    __int16 v682; // bx
    __int16 v683; // cx
    __int16 v684; // bx
    __int16 v685; // cx
    __int16 v686; // bx
    __int16 v687; // cx
    __int16 v688; // bx
    __int16 v689; // cx
    __int16 v690; // bx
    __int16 v691; // cx
    __int16 v692; // bx
    __int16 v693; // cx
    __int16 v694; // bx
    __int16 v695; // cx
    __int16 v696; // bx
    __int16 v697; // cx
    __int16 v698; // bx
    __int16 v699; // cx
    __int16 v700; // bx
    __int16 v701; // cx
    __int16 v702; // bx
    __int16 v703; // cx
    __int16 v704; // bx
    __int16 v705; // cx
    unsigned __int16* v706; // esi
    int v707; // eax
    int v708; // ebx
    int v709; // ecx
    _BYTE* v710; // edi
    int v711; // eax
    unsigned int v712; // eax
    int v713; // edx
    unsigned int v714; // eax
    int v715; // esi
    int v716; // edx
    __int16 v717; // cx
    int v718; // edx
    __int16 v719; // cx
    int v720; // edx
    __int16 v721; // cx
    int v722; // edx
    __int16 v723; // cx
    int v724; // edx
    __int16 v725; // cx
    int v726; // edx
    __int16 v727; // cx
    int v728; // edx
    __int16 v729; // cx
    int v730; // edx
    __int16 v731; // cx
    int v732; // edx
    __int16 v733; // cx
    int v734; // edx
    __int16 v735; // cx
    int v736; // edx
    __int16 v737; // cx
    int v738; // edx
    __int16 v739; // cx
    int v740; // edx
    __int16 v741; // cx
    int v742; // edx
    __int16 v743; // cx
    int v744; // edx
    __int16 v745; // cx
    unsigned __int16* v746; // esi
    int v747; // eax
    int v748; // ebx
    int v749; // ecx
    _BYTE* v750; // edi
    int v751; // eax
    unsigned int v752; // eax
    int v753; // edx
    unsigned int v754; // eax
    int v755; // esi
    int v756; // edx
    __int16 v757; // cx
    int v758; // edx
    __int16 v759; // cx
    int v760; // edx
    __int16 v761; // cx
    int v762; // edx
    __int16 v763; // cx
    int v764; // edx
    __int16 v765; // cx
    int v766; // edx
    __int16 v767; // cx
    int v768; // edx
    __int16 v769; // cx
    int v770; // edx
    __int16 v771; // cx
    int v772; // edx
    __int16 v773; // cx
    int v774; // edx
    __int16 v775; // cx
    int v776; // edx
    __int16 v777; // cx
    int v778; // edx
    __int16 v779; // cx
    int v780; // edx
    __int16 v781; // cx
    int v782; // edx
    __int16 v783; // cx
    int v784; // edx
    __int16 v785; // cx
    unsigned __int16* v786; // esi
    unsigned int v787; // eax
    int v788; // ebx
    int v789; // ecx
    _BYTE* v790; // edi
    int v791; // ecx
    int v792; // edx
    int v793; // ecx
    int v794; // esi
    int v795; // edx
    int v796; // ecx
    int v797; // edx
    int v798; // ecx
    int v799; // edx
    int v800; // ecx
    int v801; // edx
    int v802; // ecx
    int v803; // edx
    int v804; // ecx
    int v805; // edx
    int v806; // ecx
    int v807; // edx
    int v808; // ecx
    int v809; // edx
    int v810; // ecx
    int v811; // edx
    int v812; // ecx
    int v813; // edx
    int v814; // ecx
    int v815; // edx
    int v816; // ecx
    int v817; // edx
    int v818; // ecx
    int v819; // edx
    int v820; // ecx
    int v821; // edx
    int v822; // ecx
    int v823; // edx
    int v824; // ecx
    unsigned __int16* v825; // esi
    unsigned int v826; // eax
    int v827; // ebx
    int v828; // ecx
    _BYTE* v829; // edi
    int v830; // ecx
    int v831; // edx
    int v832; // ecx
    int v833; // esi
    int v834; // edx
    int v835; // ecx
    int v836; // edx
    int v837; // ecx
    int v838; // edx
    int v839; // ecx
    int v840; // edx
    int v841; // ecx
    int v842; // edx
    int v843; // ecx
    int v844; // edx
    int v845; // ecx
    int v846; // edx
    int v847; // ecx
    int v848; // edx
    int v849; // ecx
    int v850; // edx
    int v851; // ecx
    int v852; // edx
    int v853; // ecx
    int v854; // edx
    int v855; // ecx
    int v856; // edx
    int v857; // ecx
    int v858; // edx
    int v859; // ecx
    int v860; // edx
    int v861; // ecx
    int v862; // edx
    int v863; // ecx
    unsigned __int16* v864; // esi
    int v865; // eax
    int v866; // ebx
    int v867; // ecx
    _BYTE* v868; // edi
    int v869; // eax
    unsigned int v870; // eax
    int v871; // edx
    unsigned int v872; // eax
    int v873; // esi
    int v874; // edx
    __int16 v875; // cx
    int v876; // edx
    __int16 v877; // cx
    int v878; // edx
    __int16 v879; // cx
    int v880; // edx
    __int16 v881; // cx
    int v882; // edx
    __int16 v883; // cx
    int v884; // edx
    __int16 v885; // cx
    int v886; // edx
    __int16 v887; // cx
    int v888; // edx
    __int16 v889; // cx
    int v890; // edx
    __int16 v891; // cx
    int v892; // edx
    __int16 v893; // cx
    int v894; // edx
    __int16 v895; // cx
    int v896; // edx
    __int16 v897; // cx
    int v898; // edx
    __int16 v899; // cx
    int v900; // edx
    __int16 v901; // cx
    int v902; // edx
    __int16 v903; // cx
    unsigned __int16* v904; // esi
    int v905; // eax
    int v906; // ebx
    int v907; // ecx
    _BYTE* v908; // edi
    int v909; // eax
    unsigned int v910; // eax
    int v911; // edx
    unsigned int v912; // eax
    int v913; // esi
    int v914; // edx
    __int16 v915; // cx
    int v916; // edx
    __int16 v917; // cx
    int v918; // edx
    __int16 v919; // cx
    int v920; // edx
    __int16 v921; // cx
    int v922; // edx
    __int16 v923; // cx
    int v924; // edx
    __int16 v925; // cx
    int v926; // edx
    __int16 v927; // cx
    int v928; // edx
    __int16 v929; // cx
    int v930; // edx
    __int16 v931; // cx
    int v932; // edx
    __int16 v933; // cx
    int v934; // edx
    __int16 v935; // cx
    int v936; // edx
    __int16 v937; // cx
    int v938; // edx
    __int16 v939; // cx
    int v940; // edx
    __int16 v941; // cx
    int v942; // edx
    __int16 v943; // cx
    unsigned __int16* v944; // esi
    unsigned int v945; // eax
    int v946; // ebx
    int v947; // ecx
    _BYTE* v948; // edi
    int v949; // ecx
    int v950; // edx
    int v951; // ecx
    int v952; // esi
    int v953; // edx
    int v954; // ecx
    int v955; // edx
    int v956; // ecx
    int v957; // edx
    int v958; // ecx
    int v959; // edx
    int v960; // ecx
    int v961; // edx
    int v962; // ecx
    int v963; // edx
    int v964; // ecx
    int v965; // edx
    int v966; // ecx
    int v967; // edx
    int v968; // ecx
    int v969; // edx
    int v970; // ecx
    int v971; // edx
    int v972; // ecx
    int v973; // edx
    int v974; // ecx
    int v975; // edx
    int v976; // ecx
    int v977; // edx
    int v978; // ecx
    int v979; // edx
    int v980; // ecx
    int v981; // edx
    int v982; // ecx
    unsigned __int16* v983; // esi
    unsigned int v984; // eax
    int v985; // ebx
    int v986; // ecx
    _BYTE* v987; // edi
    int v988; // ecx
    int v989; // edx
    int v990; // ecx
    int v991; // esi
    int v992; // edx
    int v993; // ecx
    int v994; // edx
    int v995; // ecx
    int v996; // edx
    int v997; // ecx
    int v998; // edx
    int v999; // ecx
    int v1000; // edx
    int v1001; // ecx
    int v1002; // edx
    int v1003; // ecx
    int v1004; // edx
    int v1005; // ecx
    int v1006; // edx
    int v1007; // ecx
    int v1008; // edx
    int v1009; // ecx
    int v1010; // edx
    int v1011; // ecx
    int v1012; // edx
    int v1013; // ecx
    int v1014; // edx
    int v1015; // ecx
    int v1016; // edx
    int v1017; // ecx
    int v1018; // edx
    int v1019; // ecx
    int v1020; // edx
    int v1021; // ecx
    unsigned __int16* v1022; // esi
    unsigned int v1023; // eax
    int v1024; // ebx
    int v1025; // ecx
    char* v1026; // edi
    int v1027; // ecx
    int v1028; // edx
    int v1029; // ecx
    int v1030; // esi
    char v1031; // al
    int v1032; // edx
    int v1033; // ecx
    char v1034; // al
    int v1035; // edx
    int v1036; // ecx
    char v1037; // al
    int v1038; // edx
    int v1039; // ecx
    char v1040; // al
    int v1041; // edx
    int v1042; // ecx
    char v1043; // al
    int v1044; // edx
    int v1045; // ecx
    char v1046; // al
    int v1047; // edx
    int v1048; // ecx
    char v1049; // al
    int v1050; // edx
    int v1051; // ecx
    char v1052; // al
    int v1053; // edx
    int v1054; // ecx
    char v1055; // al
    int v1056; // edx
    int v1057; // ecx
    char v1058; // al
    int v1059; // edx
    int v1060; // ecx
    char v1061; // al
    int v1062; // edx
    int v1063; // ecx
    char v1064; // al
    int v1065; // edx
    int v1066; // ecx
    char v1067; // al
    int v1068; // edx
    int v1069; // ecx
    char v1070; // al
    int v1071; // edx
    int v1072; // ecx
    char v1073; // al
    int v1074; // edx
    int v1075; // ecx
    char v1076; // al
    uint8* actScrPtr; // [esp+0h] [ebp-88h]
    int v1078; // [esp+4h] [ebp-84h]
    int v1079; // [esp+4h] [ebp-84h]
    int v1080; // [esp+4h] [ebp-84h]
    int v1081; // [esp+4h] [ebp-84h]
    int v1082; // [esp+8h] [ebp-80h]
    int v1083; // [esp+8h] [ebp-80h]
    int v1084; // [esp+8h] [ebp-80h]
    int v1085; // [esp+8h] [ebp-80h]
    int v1086; // [esp+Ch] [ebp-7Ch]
    int v1087; // [esp+Ch] [ebp-7Ch]
    int v1088; // [esp+10h] [ebp-78h]
    int v1089; // [esp+10h] [ebp-78h]
    int v1090; // [esp+10h] [ebp-78h]
    int v1091; // [esp+10h] [ebp-78h]
    int diffPnt2Pnt1Var1; // [esp+14h] [ebp-74h]
    int v1093; // [esp+14h] [ebp-74h]
    int v1094; // [esp+18h] [ebp-70h]
    int v1095; // [esp+18h] [ebp-70h]
    int v1096; // [esp+1Ch] [ebp-6Ch]
    int v1097; // [esp+1Ch] [ebp-6Ch]
    int ySum; // [esp+20h] [ebp-68h]
    int scaledU; // [esp+24h] [ebp-64h]
    int v1100; // [esp+28h] [ebp-60h]
    int v1101; // [esp+28h] [ebp-60h]
    int v1102; // [esp+28h] [ebp-60h]
    int v1103; // [esp+28h] [ebp-60h]
    int v1104; // [esp+28h] [ebp-60h]
    int v1105; // [esp+28h] [ebp-60h]
    int v1106; // [esp+28h] [ebp-60h]
    int v1107; // [esp+28h] [ebp-60h]
    int v1108; // [esp+2Ch] [ebp-5Ch]
    int v1109; // [esp+2Ch] [ebp-5Ch]
    int scaledV; // [esp+30h] [ebp-58h]
    int v1111; // [esp+34h] [ebp-54h]
    int v1112; // [esp+34h] [ebp-54h]
    int v1113; // [esp+34h] [ebp-54h]
    int v1114; // [esp+34h] [ebp-54h]
    int v1115; // [esp+34h] [ebp-54h]
    int v1116; // [esp+34h] [ebp-54h]
    int v1117; // [esp+34h] [ebp-54h]
    int v1118; // [esp+34h] [ebp-54h]
    int v1119; // [esp+38h] [ebp-50h]
    int v1120; // [esp+38h] [ebp-50h]
    int scaledZ; // [esp+3Ch] [ebp-4Ch]
    int v1122; // [esp+40h] [ebp-48h]
    int v1123; // [esp+40h] [ebp-48h]
    int v1124; // [esp+40h] [ebp-48h]
    int v1125; // [esp+40h] [ebp-48h]
    int v1126; // [esp+40h] [ebp-48h]
    int v1127; // [esp+40h] [ebp-48h]
    int v1128; // [esp+40h] [ebp-48h]
    int v1129; // [esp+40h] [ebp-48h]
    int v1130; // [esp+44h] [ebp-44h]
    int v1131; // [esp+44h] [ebp-44h]
    int v1132; // [esp+48h] [ebp-40h]
    int v1133; // [esp+48h] [ebp-40h]
    int v1134; // [esp+48h] [ebp-40h]
    int v1135; // [esp+48h] [ebp-40h]
    int v1136; // [esp+48h] [ebp-40h]
    int v1137; // [esp+48h] [ebp-40h]
    int v1138; // [esp+48h] [ebp-40h]
    int v1139; // [esp+48h] [ebp-40h]
    int v1140; // [esp+48h] [ebp-40h]
    int v1141; // [esp+48h] [ebp-40h]
    int v1142; // [esp+48h] [ebp-40h]
    int v1143; // [esp+48h] [ebp-40h]
    int v1144; // [esp+48h] [ebp-40h]
    int v1145; // [esp+48h] [ebp-40h]
    int v1146; // [esp+48h] [ebp-40h]
    int v1147; // [esp+48h] [ebp-40h]
    int v1148; // [esp+4Ch] [ebp-3Ch]
    int v1149; // [esp+4Ch] [ebp-3Ch]
    int v1150; // [esp+4Ch] [ebp-3Ch]
    int v1151; // [esp+4Ch] [ebp-3Ch]
    int v1152; // [esp+4Ch] [ebp-3Ch]
    int v1153; // [esp+4Ch] [ebp-3Ch]
    int v1154; // [esp+4Ch] [ebp-3Ch]
    int v1155; // [esp+4Ch] [ebp-3Ch]
    int v1156; // [esp+4Ch] [ebp-3Ch]
    int v1157; // [esp+4Ch] [ebp-3Ch]
    int v1158; // [esp+4Ch] [ebp-3Ch]
    int v1159; // [esp+4Ch] [ebp-3Ch]
    int v1160; // [esp+4Ch] [ebp-3Ch]
    int v1161; // [esp+4Ch] [ebp-3Ch]
    int v1162; // [esp+4Ch] [ebp-3Ch]
    int v1163; // [esp+4Ch] [ebp-3Ch]
    int v1164; // [esp+4Ch] [ebp-3Ch]
    int v1165; // [esp+4Ch] [ebp-3Ch]
    int v1166; // [esp+50h] [ebp-38h]
    int v1167; // [esp+50h] [ebp-38h]
    int v1168; // [esp+50h] [ebp-38h]
    int v1169; // [esp+50h] [ebp-38h]
    int v1170; // [esp+50h] [ebp-38h]
    int v1171; // [esp+50h] [ebp-38h]
    int v1172; // [esp+50h] [ebp-38h]
    int v1173; // [esp+54h] [ebp-34h]
    int v1174; // [esp+54h] [ebp-34h]
    int v1175; // [esp+54h] [ebp-34h]
    int v1176; // [esp+54h] [ebp-34h]
    int v1177; // [esp+58h] [ebp-30h]
    int v1178; // [esp+58h] [ebp-30h]
    int v1179; // [esp+58h] [ebp-30h]
    int v1180; // [esp+58h] [ebp-30h]
    int v1181; // [esp+58h] [ebp-30h]
    int v1182; // [esp+58h] [ebp-30h]
    int v1183; // [esp+58h] [ebp-30h]
    int v1184; // [esp+58h] [ebp-30h]
    int v1185; // [esp+58h] [ebp-30h]
    int v1186; // [esp+58h] [ebp-30h]
    int v1187; // [esp+58h] [ebp-30h]
    int v1188; // [esp+58h] [ebp-30h]
    int v1189; // [esp+58h] [ebp-30h]
    int v1190; // [esp+58h] [ebp-30h]
    int v1191; // [esp+58h] [ebp-30h]
    int v1192; // [esp+58h] [ebp-30h]
    int v1193; // [esp+58h] [ebp-30h]
    int v1194; // [esp+58h] [ebp-30h]
    int v1195; // [esp+58h] [ebp-30h]
    int v1196; // [esp+58h] [ebp-30h]
    int v1197; // [esp+58h] [ebp-30h]
    int v1198; // [esp+58h] [ebp-30h]
    int v1199; // [esp+58h] [ebp-30h]
    int v1200; // [esp+58h] [ebp-30h]
    int v1201; // [esp+58h] [ebp-30h]
    int v1202; // [esp+58h] [ebp-30h]
    int v1203; // [esp+58h] [ebp-30h]
    int v1204; // [esp+58h] [ebp-30h]
    int v1205; // [esp+58h] [ebp-30h]
    int v1206; // [esp+58h] [ebp-30h]
    int v1207; // [esp+58h] [ebp-30h]
    int v1208; // [esp+58h] [ebp-30h]
    int v1209; // [esp+58h] [ebp-30h]
    int v1210; // [esp+58h] [ebp-30h]
    int v1211; // [esp+58h] [ebp-30h]
    int v1212; // [esp+58h] [ebp-30h]
    int v1213; // [esp+58h] [ebp-30h]
    int v1214; // [esp+58h] [ebp-30h]
    int v1215; // [esp+58h] [ebp-30h]
    int v1216; // [esp+58h] [ebp-30h]
    int v1217; // [esp+58h] [ebp-30h]
    int v1218; // [esp+58h] [ebp-30h]
    int v1219; // [esp+58h] [ebp-30h]
    int v1220; // [esp+58h] [ebp-30h]
    int v1221; // [esp+58h] [ebp-30h]
    int v1222; // [esp+58h] [ebp-30h]
    int v1223; // [esp+58h] [ebp-30h]
    int v1224; // [esp+58h] [ebp-30h]
    int v1225; // [esp+58h] [ebp-30h]
    int v1226; // [esp+58h] [ebp-30h]
    int v1227; // [esp+58h] [ebp-30h]
    int v1228; // [esp+58h] [ebp-30h]
    int v1229; // [esp+58h] [ebp-30h]
    int v1230; // [esp+58h] [ebp-30h]
    int v1231; // [esp+58h] [ebp-30h]
    int v1232; // [esp+58h] [ebp-30h]
    int v1233; // [esp+58h] [ebp-30h]
    int v1234; // [esp+58h] [ebp-30h]
    int v1235; // [esp+58h] [ebp-30h]
    int v1236; // [esp+58h] [ebp-30h]
    int v1237; // [esp+58h] [ebp-30h]
    int v1238; // [esp+58h] [ebp-30h]
    int v1239; // [esp+58h] [ebp-30h]
    int v1240; // [esp+58h] [ebp-30h]
    int v1241; // [esp+58h] [ebp-30h]
    int v1242; // [esp+58h] [ebp-30h]
    int v1243; // [esp+58h] [ebp-30h]
    int v1244; // [esp+58h] [ebp-30h]
    int v1245; // [esp+58h] [ebp-30h]
    int v1246; // [esp+58h] [ebp-30h]
    int v1247; // [esp+58h] [ebp-30h]
    int v1248; // [esp+58h] [ebp-30h]
    int v1249; // [esp+58h] [ebp-30h]
    int v1250; // [esp+58h] [ebp-30h]
    int v1251; // [esp+58h] [ebp-30h]
    int v1252; // [esp+58h] [ebp-30h]
    int v1253; // [esp+58h] [ebp-30h]
    int v1254; // [esp+58h] [ebp-30h]
    int v1255; // [esp+58h] [ebp-30h]
    int v1256; // [esp+58h] [ebp-30h]
    unsigned __int16* v1257; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1258; // [esp+5Ch] [ebp-2Ch]
    char* v1259; // [esp+5Ch] [ebp-2Ch]
    char* v1260; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1261; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1262; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1263; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1264; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1265; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1266; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1267; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1268; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1269; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1270; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1271; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1272; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1273; // [esp+5Ch] [ebp-2Ch]
    unsigned __int16* v1274; // [esp+5Ch] [ebp-2Ch]
    char v1275; // [esp+62h] [ebp-26h]
    char v1276; // [esp+62h] [ebp-26h]
    char v1277; // [esp+62h] [ebp-26h]
    char v1278; // [esp+62h] [ebp-26h]
    char v1279; // [esp+63h] [ebp-25h]
    char v1280; // [esp+63h] [ebp-25h]
    _BOOL1 v1281; // [esp+63h] [ebp-25h]
    _BOOL1 v1282; // [esp+63h] [ebp-25h]
    _BOOL1 pnt3Var1After; // [esp+64h] [ebp-24h]
    _BOOL1 v1284; // [esp+64h] [ebp-24h]

  //  adress 2439A3_
  //debug
#ifdef debug1
  /*if (compare_index_729A7 == 0x240c)
  {
      compare_index_729A7++;
      compare_index_729A7--;
  }
  //add_compare(0x2439A7, true, true);
  add_compare(0x2439A7, true, true, -1, false, 1000000, 0x2400);
  uint8 origbyte20;
  uint8 remakebyte20;
  int comp20 = compare_with_sequence("002439C2-FFFFFFF4", (uint8_t*)&a1[1], 0x28A1E0, compare_index_729A7, 0x4, 0x4, &origbyte20, &remakebyte20, 0, 0);
  compare_index_729A7++;*/
#endif debug1
  //debug

  //fix
    v16 = 0;
    v27 = 0;
    v1022 = 0;
    scaledU = 0;
    scaledV = 0;
    //fix

    sortPnt1 = pnt1;
    sortPnt2 = pnt2;
    sortPnt3 = pnt3;
    //v6 = pnt1->var_1;
    //v7 = pnt2->var_1;
    //v8 = pnt3->var_1;
    if (pnt1->y_1 == pnt2->y_1)
    {
        if (pnt1->y_1 == pnt3->y_1)
            return;
        if (pnt1->y_1 >= pnt3->y_1)
        {
            if (pnt1->x_0 <= pnt2->x_0)
                return;
            sortPnt1 = pnt3;
            sortPnt2 = pnt1;
            sortPnt3 = pnt2;
            goto LABEL_225;
        }
        if (pnt2->x_0 <= pnt1->x_0)
            return;
        goto LABEL_268;
    }
    if (pnt1->y_1 <= pnt2->y_1)
    {
        if (pnt1->y_1 != pnt3->y_1)
        {
            if (pnt1->y_1 >= pnt3->y_1)
            {
                sortPnt1 = pnt3;
                sortPnt2 = pnt1;
                sortPnt3 = pnt2;
            LABEL_24:
                //v9 = sortPnt1->var_1;
                v1173 = sortPnt1->y_1;
                if (sortPnt1->y_1 >= 0)
                {
                    if (sortPnt1->y_1 >= heightViewPort_93ADC)
                        return;
                    actScrPtr = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * sortPnt1->y_1;
                    v1275 = 0;
                }
                else
                {
                    actScrPtr = beginPrevLineFrame_93AC8;
                    v1275 = 1;
                }
                //v10 = sortPnt3->var_1;
                pnt3Var1After = sortPnt3->y_1 > heightViewPort_93ADC;
                v1088 = sortPnt3->y_1 - sortPnt1->y_1;
                ySum = sortPnt3->y_1 - sortPnt1->y_1;
                //v11 = sortPnt2->var_1;
                v1279 = sortPnt2->y_1 > heightViewPort_93ADC;
                //v12 = sortPnt2->var_1 - sortPnt1->var_1;
                diffPnt2Pnt1Var1 = sortPnt2->y_1 - sortPnt1->y_1;
                v1078 = ((sortPnt3->x_0 - sortPnt1->x_0) << 16) / v1088;
                if (((sortPnt2->x_0 - sortPnt1->x_0) << 16) / (sortPnt2->y_1 - sortPnt1->y_1) > v1078)
                {
                    v1082 = ((sortPnt2->x_0 - sortPnt1->x_0) << 16) / (sortPnt2->y_1 - sortPnt1->y_1);
                    v1086 = ((sortPnt3->x_0 - sortPnt2->x_0) << 16) / (sortPnt3->y_1 - sortPnt2->y_1);
                    v1094 = sortPnt3->y_1 - sortPnt2->y_1;
                    v1096 = sortPnt2->x_0 << 16;
                    switch (byte_967E1)
                    {
                    case 0:
                    case 14:
                    case 15:
                        v54 = sortPnt1->x_0 << 16;
                        v55 = v54;
                        if (!v1275)
                        {
                            if (pnt3Var1After)
                            {
                                v58 = heightViewPort_93ADC - v1173;
                                ySum = heightViewPort_93ADC - v1173;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC - v1173;
                                }
                                else
                                {
                                    v27 = __OFSUB__(v58, diffPnt2Pnt1Var1);
                                    v59 = v58 - diffPnt2Pnt1Var1;
                                    v1279 = (v59 < 0) ^ v27 | (v59 == 0);
                                    v1094 = v59;
                                }
                            }
                            goto LABEL_116;
                        }
                        v16 = ySum <= -v1173;
                        ySum += v1173;
                        if (!v16)
                        {
                            v1138 = -v1173;
                            if (-v1173 - diffPnt2Pnt1Var1 >= 0)
                            {
                                v1094 -= v1138 - diffPnt2Pnt1Var1;
                                v1139 = v1138 - diffPnt2Pnt1Var1;
                                v54 += v1078 * v1139 + diffPnt2Pnt1Var1 * v1078;
                                v56 = v1086 * v1139 + v1096;
                                if (pnt3Var1After)
                                {
                                    v1094 = heightViewPort_93ADC;
                                    ySum = heightViewPort_93ADC;
                                }
                                v57 = (uint32*)&unk_93AE0;
                            LABEL_119:
                                if (v1279)
                                {
                                    v29 = (unsigned __int8)byte_967E1;
                                    switch (byte_967E1)
                                    {
                                    case 0:
                                        goto LABEL_309;
                                    case 1:
                                        goto LABEL_322;
                                    case 2:
                                        goto LABEL_351;
                                    case 3:
                                        goto LABEL_382;
                                    case 4:
                                        goto LABEL_445;
                                    case 5:
                                        goto LABEL_474;
                                    case 6:
                                        goto LABEL_503;
                                    case 7:
                                    case 11:
                                        goto LABEL_564;
                                    case 8:
                                        goto LABEL_595;
                                    case 9:
                                    case 10:
                                        goto LABEL_658;
                                    case 12:
                                        goto LABEL_721;
                                    case 13:
                                        goto LABEL_752;
                                    case 14:
                                        goto LABEL_783;
                                    case 15:
                                        goto LABEL_812;
                                    case 16:
                                        goto LABEL_841;
                                    case 17:
                                        goto LABEL_870;
                                    case 18:
                                        goto LABEL_899;
                                    case 19:
                                        goto LABEL_930;
                                    case 20:
                                        goto LABEL_961;
                                    case 21:
                                        goto LABEL_992;
                                    case 22:
                                        goto LABEL_1023;
                                    case 23:
                                        goto LABEL_1086;
                                    case 24:
                                        goto LABEL_1149;
                                    case 25:
                                        goto LABEL_1212;
                                    case 26:
                                        goto LABEL_1275;
                                    }
                                }
                                do
                                {
                                    *v57 = v54;
                                    v54 += v1078;
                                    v57[1] = v56;
                                    v56 += v1086;
                                    v57 += 5;
                                    --v1094;
                                } while (v1094);
                                v29 = (unsigned __int8)byte_967E1;
                                switch (byte_967E1)
                                {
                                case 0:
                                    goto LABEL_309;
                                case 1:
                                    goto LABEL_322;
                                case 2:
                                    goto LABEL_351;
                                case 3:
                                    goto LABEL_382;
                                case 4:
                                    goto LABEL_445;
                                case 5:
                                    goto LABEL_474;
                                case 6:
                                    goto LABEL_503;
                                case 7:
                                case 11:
                                    goto LABEL_564;
                                case 8:
                                    goto LABEL_595;
                                case 9:
                                case 10:
                                    goto LABEL_658;
                                case 12:
                                    goto LABEL_721;
                                case 13:
                                    goto LABEL_752;
                                case 14:
                                    goto LABEL_783;
                                case 15:
                                    goto LABEL_812;
                                case 16:
                                    goto LABEL_841;
                                case 17:
                                    goto LABEL_870;
                                case 18:
                                    goto LABEL_899;
                                case 19:
                                    goto LABEL_930;
                                case 20:
                                    goto LABEL_961;
                                case 21:
                                    goto LABEL_992;
                                case 22:
                                    goto LABEL_1023;
                                case 23:
                                    goto LABEL_1086;
                                case 24:
                                    goto LABEL_1149;
                                case 25:
                                    goto LABEL_1212;
                                case 26:
                                    goto LABEL_1275;
                                }
                            }
                            diffPnt2Pnt1Var1 += v1173;
                            v54 += v1078 * v1138;
                            v55 += v1138 * v1082;
                            if (pnt3Var1After)
                            {
                                ySum = heightViewPort_93ADC;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC;
                                }
                                else
                                {
                                    v1279 = heightViewPort_93ADC <= diffPnt2Pnt1Var1;
                                    v1094 = heightViewPort_93ADC - diffPnt2Pnt1Var1;
                                }
                            }
                        LABEL_116:
                            v57 = (uint32*)&unk_93AE0;
                            do
                            {
                                *v57 = v54;
                                v54 += v1078;
                                v57[1] = v55;
                                v55 += v1082;
                                v57 += 5;
                                --diffPnt2Pnt1Var1;
                            } while (diffPnt2Pnt1Var1);
                            v56 = v1096;
                            goto LABEL_119;
                        }
                        return;
                    case 1:
                    case 4:
                    case 16:
                    case 17:
                        v43 = (sortPnt2->y_1 - sortPnt1->y_1) * (__int64)(sortPnt1->x_0 - sortPnt3->x_0) / v1088;
                        v44 = sortPnt2->x_0 - sortPnt1->x_0;
                        v45 = v43 + v44 == 0;
                        v16 = (v43 + v44 < 0) ^ __OFADD__(v43, v44);
                        v46 = v43 + v44;
                        if (v16)
                            return;
                        if (!v45)
                            scaledZ = (int)(sortPnt2->z_4 + diffPnt2Pnt1Var1 * (__int64)(sortPnt1->z_4 - sortPnt3->z_4) / v1088 - sortPnt1->z_4) / (v46 + 1);
                        v1123 = (sortPnt3->z_4 - sortPnt1->z_4) / v1088;
                        v47 = sortPnt1->x_0 << 16;
                        v48 = v47;
                        v49 = sortPnt1->z_4;
                        if (!v1275)
                        {
                            if (pnt3Var1After)
                            {
                                v52 = heightViewPort_93ADC - v1173;
                                ySum = heightViewPort_93ADC - v1173;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC - v1173;
                                }
                                else
                                {
                                    v27 = __OFSUB__(v52, diffPnt2Pnt1Var1);
                                    v53 = v52 - diffPnt2Pnt1Var1;
                                    v1279 = (v53 < 0) ^ v27 | (v53 == 0);
                                    v1094 = v53;
                                }
                            }
                            goto LABEL_95;
                        }
                        v16 = ySum <= -v1173;
                        ySum += v1173;
                        if (!v16)
                        {
                            v1136 = -v1173;
                            if (-v1173 - diffPnt2Pnt1Var1 >= 0)
                            {
                                v1094 -= v1136 - diffPnt2Pnt1Var1;
                                v1137 = v1136 - diffPnt2Pnt1Var1;
                                v47 += v1078 * v1137 + diffPnt2Pnt1Var1 * v1078;
                                v50 = v1086 * v1137 + v1096;
                                v49 += v1137 * v1123 + diffPnt2Pnt1Var1 * v1123;
                                if (pnt3Var1After)
                                {
                                    v1094 = heightViewPort_93ADC;
                                    ySum = heightViewPort_93ADC;
                                }
                                v51 = (uint32*)&unk_93AE0;
                            LABEL_98:
                                if (v1279)
                                {
                                    v29 = (unsigned __int8)byte_967E1;
                                    switch (byte_967E1)
                                    {
                                    case 0:
                                        goto LABEL_309;
                                    case 1:
                                        goto LABEL_322;
                                    case 2:
                                        goto LABEL_351;
                                    case 3:
                                        goto LABEL_382;
                                    case 4:
                                        goto LABEL_445;
                                    case 5:
                                        goto LABEL_474;
                                    case 6:
                                        goto LABEL_503;
                                    case 7:
                                    case 11:
                                        goto LABEL_564;
                                    case 8:
                                        goto LABEL_595;
                                    case 9:
                                    case 10:
                                        goto LABEL_658;
                                    case 12:
                                        goto LABEL_721;
                                    case 13:
                                        goto LABEL_752;
                                    case 14:
                                        goto LABEL_783;
                                    case 15:
                                        goto LABEL_812;
                                    case 16:
                                        goto LABEL_841;
                                    case 17:
                                        goto LABEL_870;
                                    case 18:
                                        goto LABEL_899;
                                    case 19:
                                        goto LABEL_930;
                                    case 20:
                                        goto LABEL_961;
                                    case 21:
                                        goto LABEL_992;
                                    case 22:
                                        goto LABEL_1023;
                                    case 23:
                                        goto LABEL_1086;
                                    case 24:
                                        goto LABEL_1149;
                                    case 25:
                                        goto LABEL_1212;
                                    case 26:
                                        goto LABEL_1275;
                                    }
                                }
                                do
                                {
                                    *v51 = v47;
                                    v47 += v1078;
                                    v51[1] = v50;
                                    v50 += v1086;
                                    v51[4] = v49;
                                    v49 += v1123;
                                    v51 += 5;
                                    --v1094;
                                } while (v1094);
                                v29 = (unsigned __int8)byte_967E1;
                                switch (byte_967E1)
                                {
                                case 0:
                                    goto LABEL_309;
                                case 1:
                                    goto LABEL_322;
                                case 2:
                                    goto LABEL_351;
                                case 3:
                                    goto LABEL_382;
                                case 4:
                                    goto LABEL_445;
                                case 5:
                                    goto LABEL_474;
                                case 6:
                                    goto LABEL_503;
                                case 7:
                                case 11:
                                    goto LABEL_564;
                                case 8:
                                    goto LABEL_595;
                                case 9:
                                case 10:
                                    goto LABEL_658;
                                case 12:
                                    goto LABEL_721;
                                case 13:
                                    goto LABEL_752;
                                case 14:
                                    goto LABEL_783;
                                case 15:
                                    goto LABEL_812;
                                case 16:
                                    goto LABEL_841;
                                case 17:
                                    goto LABEL_870;
                                case 18:
                                    goto LABEL_899;
                                case 19:
                                    goto LABEL_930;
                                case 20:
                                    goto LABEL_961;
                                case 21:
                                    goto LABEL_992;
                                case 22:
                                    goto LABEL_1023;
                                case 23:
                                    goto LABEL_1086;
                                case 24:
                                    goto LABEL_1149;
                                case 25:
                                    goto LABEL_1212;
                                case 26:
                                    goto LABEL_1275;
                                }
                            }
                            diffPnt2Pnt1Var1 += v1173;
                            v47 += v1078 * v1136;
                            v48 += v1136 * v1082;
                            v49 += v1136 * v1123;
                            if (pnt3Var1After)
                            {
                                ySum = heightViewPort_93ADC;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC;
                                }
                                else
                                {
                                    v1279 = heightViewPort_93ADC <= diffPnt2Pnt1Var1;
                                    v1094 = heightViewPort_93ADC - diffPnt2Pnt1Var1;
                                }
                            }
                        LABEL_95:
                            v51 = (uint32*)&unk_93AE0;
                            do
                            {
                                *v51 = v47;
                                v47 += v1078;
                                v51[1] = v48;
                                v48 += v1082;
                                v51[4] = v49;
                                v49 += v1123;
                                v51 += 5;
                                --diffPnt2Pnt1Var1;
                            } while (diffPnt2Pnt1Var1);
                            v50 = v1096;
                            goto LABEL_98;
                        }
                        return;
                    case 2:
                    case 3:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 18:
                    case 19:
                    case 22:
                    case 23:
                        v30 = (sortPnt2->y_1 - sortPnt1->y_1) * (__int64)(sortPnt1->x_0 - sortPnt3->x_0) / v1088;
                        v31 = sortPnt2->x_0 - sortPnt1->x_0;
                        v32 = v30 + v31 == 0;
                        v16 = (v30 + v31 < 0) ^ __OFADD__(v30, v31);
                        v33 = v30 + v31;
                        if (v16)
                            return;
                        if (!v32)
                        {
                            v34 = v33 + 1;
                            scaledU = (int)(sortPnt2->u_2 + diffPnt2Pnt1Var1 * (__int64)(sortPnt1->u_2 - sortPnt3->u_2) / v1088 - sortPnt1->u_2) / v34;
                            scaledV = (int)(sortPnt2->v_3 + diffPnt2Pnt1Var1 * (__int64)(sortPnt1->v_3 - sortPnt3->v_3) / v1088 - sortPnt1->v_3) / v34;
                        }
                        v1101 = (sortPnt3->u_2 - sortPnt1->u_2) / v1088;
                        v1112 = (sortPnt3->v_3 - sortPnt1->v_3) / v1088;
                        v35 = sortPnt1->x_0 << 16;
                        v36 = v35;
                        v37 = sortPnt1->u_2;
                        v38 = sortPnt1->v_3;
                        if (!v1275)
                        {
                            if (pnt3Var1After)
                            {
                                v41 = heightViewPort_93ADC - v1173;
                                ySum = heightViewPort_93ADC - v1173;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC - v1173;
                                }
                                else
                                {
                                    v27 = __OFSUB__(v41, diffPnt2Pnt1Var1);
                                    v42 = v41 - diffPnt2Pnt1Var1;
                                    v1279 = (v42 < 0) ^ v27 | (v42 == 0);
                                    v1094 = v42;
                                }
                            }
                            goto LABEL_71;
                        }
                        v16 = ySum <= -v1173;
                        ySum += v1173;
                        if (!v16)
                        {
                            v1134 = -v1173;
                            if (-v1173 - diffPnt2Pnt1Var1 >= 0)
                            {
                                v1094 -= v1134 - diffPnt2Pnt1Var1;
                                v1135 = v1134 - diffPnt2Pnt1Var1;
                                v35 += v1078 * v1135 + diffPnt2Pnt1Var1 * v1078;
                                v39 = v1086 * v1135 + v1096;
                                v37 += v1135 * v1101 + diffPnt2Pnt1Var1 * v1101;
                                v38 += v1135 * v1112 + diffPnt2Pnt1Var1 * v1112;
                                if (pnt3Var1After)
                                {
                                    v1094 = heightViewPort_93ADC;
                                    ySum = heightViewPort_93ADC;
                                }
                                v40 = (uint32*)&unk_93AE0;
                            LABEL_74:
                                if (v1279)
                                {
                                    v29 = (unsigned __int8)byte_967E1;
                                    switch (byte_967E1)
                                    {
                                    case 0:
                                        goto LABEL_309;
                                    case 1:
                                        goto LABEL_322;
                                    case 2:
                                        goto LABEL_351;
                                    case 3:
                                        goto LABEL_382;
                                    case 4:
                                        goto LABEL_445;
                                    case 5:
                                        goto LABEL_474;
                                    case 6:
                                        goto LABEL_503;
                                    case 7:
                                    case 11:
                                        goto LABEL_564;
                                    case 8:
                                        goto LABEL_595;
                                    case 9:
                                    case 10:
                                        goto LABEL_658;
                                    case 12:
                                        goto LABEL_721;
                                    case 13:
                                        goto LABEL_752;
                                    case 14:
                                        goto LABEL_783;
                                    case 15:
                                        goto LABEL_812;
                                    case 16:
                                        goto LABEL_841;
                                    case 17:
                                        goto LABEL_870;
                                    case 18:
                                        goto LABEL_899;
                                    case 19:
                                        goto LABEL_930;
                                    case 20:
                                        goto LABEL_961;
                                    case 21:
                                        goto LABEL_992;
                                    case 22:
                                        goto LABEL_1023;
                                    case 23:
                                        goto LABEL_1086;
                                    case 24:
                                        goto LABEL_1149;
                                    case 25:
                                        goto LABEL_1212;
                                    case 26:
                                        goto LABEL_1275;
                                    }
                                }
                                do
                                {
                                    *v40 = v35;
                                    v35 += v1078;
                                    v40[1] = v39;
                                    v39 += v1086;
                                    v40[2] = v37;
                                    v37 += v1101;
                                    v40[3] = v38;
                                    v38 += v1112;
                                    v40 += 5;
                                    --v1094;
                                } while (v1094);
                                v29 = (unsigned __int8)byte_967E1;
                                switch (byte_967E1)
                                {
                                case 0:
                                    goto LABEL_309;
                                case 1:
                                    goto LABEL_322;
                                case 2:
                                    goto LABEL_351;
                                case 3:
                                    goto LABEL_382;
                                case 4:
                                    goto LABEL_445;
                                case 5:
                                    goto LABEL_474;
                                case 6:
                                    goto LABEL_503;
                                case 7:
                                case 11:
                                    goto LABEL_564;
                                case 8:
                                    goto LABEL_595;
                                case 9:
                                case 10:
                                    goto LABEL_658;
                                case 12:
                                    goto LABEL_721;
                                case 13:
                                    goto LABEL_752;
                                case 14:
                                    goto LABEL_783;
                                case 15:
                                    goto LABEL_812;
                                case 16:
                                    goto LABEL_841;
                                case 17:
                                    goto LABEL_870;
                                case 18:
                                    goto LABEL_899;
                                case 19:
                                    goto LABEL_930;
                                case 20:
                                    goto LABEL_961;
                                case 21:
                                    goto LABEL_992;
                                case 22:
                                    goto LABEL_1023;
                                case 23:
                                    goto LABEL_1086;
                                case 24:
                                    goto LABEL_1149;
                                case 25:
                                    goto LABEL_1212;
                                case 26:
                                    goto LABEL_1275;
                                }
                            }
                            diffPnt2Pnt1Var1 += v1173;
                            v35 += v1078 * v1134;
                            v36 += v1134 * v1082;
                            v37 += v1134 * v1101;
                            v38 += v1134 * v1112;
                            if (pnt3Var1After)
                            {
                                ySum = heightViewPort_93ADC;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC;
                                }
                                else
                                {
                                    v1279 = heightViewPort_93ADC <= diffPnt2Pnt1Var1;
                                    v1094 = heightViewPort_93ADC - diffPnt2Pnt1Var1;
                                }
                            }
                        LABEL_71:
                            v40 = (uint32*)&unk_93AE0;
                            do
                            {
                                *v40 = v35;
                                v35 += v1078;
                                v40[1] = v36;
                                v36 += v1082;
                                v40[2] = v37;
                                v37 += v1101;
                                v40[3] = v38;
                                v38 += v1112;
                                v40 += 5;
                                --diffPnt2Pnt1Var1;
                            } while (diffPnt2Pnt1Var1);
                            v39 = v1096;
                            goto LABEL_74;
                        }
                        return;
                    case 5:
                    case 6:
                    case 20:
                    case 21:
                    case 24:
                    case 25:
                    case 26:
                        v13 = (sortPnt2->y_1 - sortPnt1->y_1) * (__int64)(sortPnt1->x_0 - sortPnt3->x_0) / v1088;
                        v14 = sortPnt2->x_0 - sortPnt1->x_0;
                        v15 = v13 + v14 == 0;
                        v16 = (v13 + v14 < 0) ^ __OFADD__(v13, v14);
                        v17 = v13 + v14;
                        if (v16)
                            return;
                        if (!v15)
                        {
                            v18 = v17 + 1;
                            scaledU = (int)(sortPnt2->u_2 + diffPnt2Pnt1Var1 * (__int64)(sortPnt1->u_2 - sortPnt3->u_2) / v1088 - sortPnt1->u_2) / v18;
                            scaledV = (int)(sortPnt2->v_3 + diffPnt2Pnt1Var1 * (__int64)(sortPnt1->v_3 - sortPnt3->v_3) / v1088 - sortPnt1->v_3) / v18;
                            scaledZ = (int)(sortPnt2->z_4 + diffPnt2Pnt1Var1 * (__int64)(sortPnt1->z_4 - sortPnt3->z_4) / v1088 - sortPnt1->z_4) / v18;
                        }
                        v1100 = (sortPnt3->u_2 - sortPnt1->u_2) / v1088;
                        v1111 = (sortPnt3->v_3 - sortPnt1->v_3) / v1088;
                        v1122 = (sortPnt3->z_4 - sortPnt1->z_4) / v1088;
                        v19 = sortPnt1->x_0 << 16;
                        v20 = v19;
                        v21 = sortPnt1->u_2;
                        v22 = sortPnt1->v_3;
                        v23 = sortPnt1->z_4;
                        if (!v1275)
                        {
                            if (pnt3Var1After)
                            {
                                v26 = heightViewPort_93ADC - v1173;
                                ySum = heightViewPort_93ADC - v1173;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC - v1173;
                                }
                                else
                                {
                                    v27 = __OFSUB__(v26, diffPnt2Pnt1Var1);
                                    v28 = v26 - diffPnt2Pnt1Var1;
                                    v1279 = (v28 < 0) ^ v27 | (v28 == 0);
                                    v1094 = v28;
                                }
                            }
                            goto LABEL_47;
                        }
                        v16 = ySum <= -v1173;
                        ySum += v1173;
                        if (!v16)
                        {
                            v1132 = -v1173;
                            if (-v1173 - diffPnt2Pnt1Var1 >= 0)
                            {
                                v1094 -= v1132 - diffPnt2Pnt1Var1;
                                v1133 = v1132 - diffPnt2Pnt1Var1;
                                v19 += v1078 * v1133 + diffPnt2Pnt1Var1 * v1078;
                                v24 = v1086 * v1133 + v1096;
                                v21 += v1133 * v1100 + diffPnt2Pnt1Var1 * v1100;
                                v22 += v1133 * v1111 + diffPnt2Pnt1Var1 * v1111;
                                v23 += v1133 * v1122 + diffPnt2Pnt1Var1 * v1122;
                                if (pnt3Var1After)
                                {
                                    v1094 = heightViewPort_93ADC;
                                    ySum = heightViewPort_93ADC;
                                }
                                v25 = (uint32*)&unk_93AE0;
                            LABEL_50:
                                if (v1279)
                                {
                                    v29 = (unsigned __int8)byte_967E1;
                                    switch (byte_967E1)
                                    {
                                    case 0:
                                        goto LABEL_309;
                                    case 1:
                                        goto LABEL_322;
                                    case 2:
                                        goto LABEL_351;
                                    case 3:
                                        goto LABEL_382;
                                    case 4:
                                        goto LABEL_445;
                                    case 5:
                                        goto LABEL_474;
                                    case 6:
                                        goto LABEL_503;
                                    case 7:
                                    case 11:
                                        goto LABEL_564;
                                    case 8:
                                        goto LABEL_595;
                                    case 9:
                                    case 10:
                                        goto LABEL_658;
                                    case 12:
                                        goto LABEL_721;
                                    case 13:
                                        goto LABEL_752;
                                    case 14:
                                        goto LABEL_783;
                                    case 15:
                                        goto LABEL_812;
                                    case 16:
                                        goto LABEL_841;
                                    case 17:
                                        goto LABEL_870;
                                    case 18:
                                        goto LABEL_899;
                                    case 19:
                                        goto LABEL_930;
                                    case 20:
                                        goto LABEL_961;
                                    case 21:
                                        goto LABEL_992;
                                    case 22:
                                        goto LABEL_1023;
                                    case 23:
                                        goto LABEL_1086;
                                    case 24:
                                        goto LABEL_1149;
                                    case 25:
                                        goto LABEL_1212;
                                    case 26:
                                        goto LABEL_1275;
                                    }
                                }
                                do
                                {
                                    *v25 = v19;
                                    v19 += v1078;
                                    v25[1] = v24;
                                    v24 += v1086;
                                    v25[2] = v21;
                                    v21 += v1100;
                                    v25[3] = v22;
                                    v22 += v1111;
                                    v25[4] = v23;
                                    v23 += v1122;
                                    v25 += 5;
                                    --v1094;
                                } while (v1094);
                                v29 = (unsigned __int8)byte_967E1;
                                switch (byte_967E1)
                                {
                                case 0:
                                    goto LABEL_309;
                                case 1:
                                    goto LABEL_322;
                                case 2:
                                    goto LABEL_351;
                                case 3:
                                    goto LABEL_382;
                                case 4:
                                    goto LABEL_445;
                                case 5:
                                    goto LABEL_474;
                                case 6:
                                    goto LABEL_503;
                                case 7:
                                case 11:
                                    goto LABEL_564;
                                case 8:
                                    goto LABEL_595;
                                case 9:
                                case 10:
                                    goto LABEL_658;
                                case 12:
                                    goto LABEL_721;
                                case 13:
                                    goto LABEL_752;
                                case 14:
                                    goto LABEL_783;
                                case 15:
                                    goto LABEL_812;
                                case 16:
                                    goto LABEL_841;
                                case 17:
                                    goto LABEL_870;
                                case 18:
                                    goto LABEL_899;
                                case 19:
                                    goto LABEL_930;
                                case 20:
                                    goto LABEL_961;
                                case 21:
                                    goto LABEL_992;
                                case 22:
                                    goto LABEL_1023;
                                case 23:
                                    goto LABEL_1086;
                                case 24:
                                    goto LABEL_1149;
                                case 25:
                                    goto LABEL_1212;
                                case 26:
                                    goto LABEL_1275;
                                }
                            }
                            diffPnt2Pnt1Var1 += v1173;
                            v19 += v1078 * v1132;
                            v20 += v1132 * v1082;
                            v21 += v1132 * v1100;
                            v22 += v1132 * v1111;
                            v23 += v1132 * v1122;
                            if (pnt3Var1After)
                            {
                                ySum = heightViewPort_93ADC;
                                if (v1279)
                                {
                                    diffPnt2Pnt1Var1 = heightViewPort_93ADC;
                                }
                                else
                                {
                                    v1279 = heightViewPort_93ADC <= diffPnt2Pnt1Var1;
                                    v1094 = heightViewPort_93ADC - diffPnt2Pnt1Var1;
                                }
                            }
                        LABEL_47:
                            v25 = (uint32*)&unk_93AE0;
                            do
                            {
                                *v25 = v19;
                                v19 += v1078;
                                v25[1] = v20;
                                v20 += v1082;
                                v25[2] = v21;
                                v21 += v1100;
                                v25[3] = v22;
                                v22 += v1111;
                                v25[4] = v23;
                                v23 += v1122;
                                v25 += 5;
                                --diffPnt2Pnt1Var1;
                            } while (diffPnt2Pnt1Var1);
                            v24 = v1096;
                            goto LABEL_50;
                        }
                        break;
                    }
                }
                return;
            }
            if (pnt2->y_1 != pnt3->y_1)
            {
                if (pnt2->y_1 <= pnt3->y_1)
                    goto LABEL_24;
                goto LABEL_124;
            }
            if (pnt2->x_0 <= pnt3->x_0)
                return;
        LABEL_225:
            v108 = sortPnt1->y_1;
            v1175 = v108;
            if (v108 >= 0)
            {
                if (v108 >= heightViewPort_93ADC)
                    return;
                actScrPtr = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * v108;
                v1277 = 0;
            }
            else
            {
                actScrPtr = beginPrevLineFrame_93AC8;
                v1277 = 1;
            }
            v109 = sortPnt3->y_1;
            v1281 = v109 > heightViewPort_93ADC;
            v1090 = v109 - v108;
            ySum = v109 - v108;
            v1080 = ((sortPnt3->x_0 - sortPnt1->x_0) << 16) / (v109 - v108);
            v1084 = ((sortPnt2->x_0 - sortPnt1->x_0) << 16) / (v109 - v108);
            switch (byte_967E1)
            {
            case 0:
            case 14:
            case 15:
                v130 = sortPnt1->x_0 << 16;
                v131 = v130;
                if (v1277)
                {
                    v132 = -v1175;
                    v1090 += v1175;
                    v16 = ySum <= -v1175;
                    ySum += v1175;
                    if (v16)
                        return;
                    v130 += v1080 * v132;
                    v131 += v132 * v1084;
                    if (v1281)
                    {
                        ySum = heightViewPort_93ADC;
                        v1090 = heightViewPort_93ADC;
                    }
                }
                else if (v1281)
                {
                    ySum = heightViewPort_93ADC - v1175;
                    v1090 = heightViewPort_93ADC - v1175;
                }
                v133 = (uint32*)&unk_93AE0;
                do
                {
                    *v133 = v130;
                    v130 += v1080;
                    v133[1] = v131;
                    v131 += v1084;
                    v133 += 5;
                    --v1090;
                } while (v1090);
                v29 = (unsigned __int8)byte_967E1;
                switch (byte_967E1)
                {
                case 0:
                    goto LABEL_309;
                case 1:
                    goto LABEL_322;
                case 2:
                    goto LABEL_351;
                case 3:
                    goto LABEL_382;
                case 4:
                    goto LABEL_445;
                case 5:
                    goto LABEL_474;
                case 6:
                    goto LABEL_503;
                case 7:
                case 11:
                    goto LABEL_564;
                case 8:
                    goto LABEL_595;
                case 9:
                case 10:
                    goto LABEL_658;
                case 12:
                    goto LABEL_721;
                case 13:
                    goto LABEL_752;
                case 14:
                    goto LABEL_783;
                case 15:
                    goto LABEL_812;
                case 16:
                    goto LABEL_841;
                case 17:
                    goto LABEL_870;
                case 18:
                    goto LABEL_899;
                case 19:
                    goto LABEL_930;
                case 20:
                    goto LABEL_961;
                case 21:
                    goto LABEL_992;
                case 22:
                    goto LABEL_1023;
                case 23:
                    goto LABEL_1086;
                case 24:
                    goto LABEL_1149;
                case 25:
                    goto LABEL_1212;
                case 26:
                    goto LABEL_1275;
                }
            case 1:
            case 4:
            case 16:
            case 17:
                scaledZ = (sortPnt2->z_4 - sortPnt3->z_4) / (sortPnt2->x_0 - sortPnt3->x_0);
                v1127 = (sortPnt3->z_4 - sortPnt1->z_4) / ySum;
                v125 = sortPnt1->x_0 << 16;
                v126 = v125;
                v127 = sortPnt1->z_4;
                if (v1277)
                {
                    v128 = -v1175;
                    v1090 += v1175;
                    v16 = ySum <= -v1175;
                    ySum += v1175;
                    if (v16)
                        return;
                    v125 += v1080 * v128;
                    v126 += v128 * v1084;
                    v127 += v128 * v1127;
                    if (v1281)
                    {
                        ySum = heightViewPort_93ADC;
                        v1090 = heightViewPort_93ADC;
                    }
                }
                else if (v1281)
                {
                    ySum = heightViewPort_93ADC - v1175;
                    v1090 = heightViewPort_93ADC - v1175;
                }
                v129 = (uint32*)&unk_93AE0;
                do
                {
                    *v129 = v125;
                    v125 += v1080;
                    v129[1] = v126;
                    v126 += v1084;
                    v129[4] = v127;
                    v127 += v1127;
                    v129 += 5;
                    --v1090;
                } while (v1090);
                v29 = (unsigned __int8)byte_967E1;
                switch (byte_967E1)
                {
                case 0:
                    goto LABEL_309;
                case 1:
                    goto LABEL_322;
                case 2:
                    goto LABEL_351;
                case 3:
                    goto LABEL_382;
                case 4:
                    goto LABEL_445;
                case 5:
                    goto LABEL_474;
                case 6:
                    goto LABEL_503;
                case 7:
                case 11:
                    goto LABEL_564;
                case 8:
                    goto LABEL_595;
                case 9:
                case 10:
                    goto LABEL_658;
                case 12:
                    goto LABEL_721;
                case 13:
                    goto LABEL_752;
                case 14:
                    goto LABEL_783;
                case 15:
                    goto LABEL_812;
                case 16:
                    goto LABEL_841;
                case 17:
                    goto LABEL_870;
                case 18:
                    goto LABEL_899;
                case 19:
                    goto LABEL_930;
                case 20:
                    goto LABEL_961;
                case 21:
                    goto LABEL_992;
                case 22:
                    goto LABEL_1023;
                case 23:
                    goto LABEL_1086;
                case 24:
                    goto LABEL_1149;
                case 25:
                    goto LABEL_1212;
                case 26:
                    goto LABEL_1275;
                }
            case 2:
            case 3:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 18:
            case 19:
            case 22:
            case 23:
                v118 = sortPnt2->x_0 - sortPnt3->x_0;
                scaledU = (sortPnt2->u_2 - sortPnt3->u_2) / v118;
                scaledV = (sortPnt2->v_3 - sortPnt3->v_3) / v118;
                v1105 = (sortPnt3->u_2 - sortPnt1->u_2) / ySum;
                v1116 = (sortPnt3->v_3 - sortPnt1->v_3) / ySum;
                v119 = sortPnt1->x_0 << 16;
                v120 = v119;
                v121 = sortPnt1->u_2;
                v122 = sortPnt1->v_3;
                if (v1277)
                {
                    v123 = -v1175;
                    v1090 += v1175;
                    v16 = ySum <= -v1175;
                    ySum += v1175;
                    if (v16)
                        return;
                    v119 += v1080 * v123;
                    v120 += v123 * v1084;
                    v121 += v123 * v1105;
                    v122 += v123 * v1116;
                    if (v1281)
                    {
                        ySum = heightViewPort_93ADC;
                        v1090 = heightViewPort_93ADC;
                    }
                }
                else if (v1281)
                {
                    ySum = heightViewPort_93ADC - v1175;
                    v1090 = heightViewPort_93ADC - v1175;
                }
                v124 = (uint32*)&unk_93AE0;
                do
                {
                    *v124 = v119;
                    v119 += v1080;
                    v124[1] = v120;
                    v120 += v1084;
                    v124[2] = v121;
                    v121 += v1105;
                    v124[3] = v122;
                    v122 += v1116;
                    v124 += 5;
                    --v1090;
                } while (v1090);
                v29 = (unsigned __int8)byte_967E1;
                switch (byte_967E1)
                {
                case 0:
                    goto LABEL_309;
                case 1:
                    goto LABEL_322;
                case 2:
                    goto LABEL_351;
                case 3:
                    goto LABEL_382;
                case 4:
                    goto LABEL_445;
                case 5:
                    goto LABEL_474;
                case 6:
                    goto LABEL_503;
                case 7:
                case 11:
                    goto LABEL_564;
                case 8:
                    goto LABEL_595;
                case 9:
                case 10:
                    goto LABEL_658;
                case 12:
                    goto LABEL_721;
                case 13:
                    goto LABEL_752;
                case 14:
                    goto LABEL_783;
                case 15:
                    goto LABEL_812;
                case 16:
                    goto LABEL_841;
                case 17:
                    goto LABEL_870;
                case 18:
                    goto LABEL_899;
                case 19:
                    goto LABEL_930;
                case 20:
                    goto LABEL_961;
                case 21:
                    goto LABEL_992;
                case 22:
                    goto LABEL_1023;
                case 23:
                    goto LABEL_1086;
                case 24:
                    goto LABEL_1149;
                case 25:
                    goto LABEL_1212;
                case 26:
                    goto LABEL_1275;
                }
            case 5:
            case 6:
            case 20:
            case 21:
            case 24:
            case 25:
            case 26:
                v110 = sortPnt2->x_0 - sortPnt3->x_0;
                scaledU = (sortPnt2->u_2 - sortPnt3->u_2) / v110;
                scaledV = (sortPnt2->v_3 - sortPnt3->v_3) / v110;
                scaledZ = (sortPnt2->z_4 - sortPnt3->z_4) / v110;
                v1104 = (sortPnt3->u_2 - sortPnt1->u_2) / ySum;
                v1115 = (sortPnt3->v_3 - sortPnt1->v_3) / ySum;
                v1126 = (sortPnt3->z_4 - sortPnt1->z_4) / ySum;
                v111 = sortPnt1->x_0 << 16;
                v112 = v111;
                v113 = sortPnt1->u_2;
                v114 = sortPnt1->v_3;
                v115 = sortPnt1->z_4;
                if (v1277)
                {
                    v116 = -v1175;
                    v1090 += v1175;
                    v16 = ySum <= -v1175;
                    ySum += v1175;
                    if (v16)
                        return;
                    v111 += v1080 * v116;
                    v112 += v116 * v1084;
                    v113 += v116 * v1104;
                    v114 += v116 * v1115;
                    v115 += v116 * v1126;
                    if (v1281)
                    {
                        ySum = heightViewPort_93ADC;
                        v1090 = heightViewPort_93ADC;
                    }
                }
                else if (v1281)
                {
                    ySum = heightViewPort_93ADC - v1175;
                    v1090 = heightViewPort_93ADC - v1175;
                }
                v117 = (uint32*)&unk_93AE0;
                do
                {
                    *v117 = v111;
                    v111 += v1080;
                    v117[1] = v112;
                    v112 += v1084;
                    v117[2] = v113;
                    v113 += v1104;
                    v117[3] = v114;
                    v114 += v1115;
                    v117[4] = v115;
                    v115 += v1126;
                    v117 += 5;
                    --v1090;
                } while (v1090);
                v29 = (unsigned __int8)byte_967E1;
                switch (byte_967E1)
                {
                case 0:
                    goto LABEL_309;
                case 1:
                    goto LABEL_322;
                case 2:
                    goto LABEL_351;
                case 3:
                    goto LABEL_382;
                case 4:
                    goto LABEL_445;
                case 5:
                    goto LABEL_474;
                case 6:
                    goto LABEL_503;
                case 7:
                case 11:
                    goto LABEL_564;
                case 8:
                    goto LABEL_595;
                case 9:
                case 10:
                    goto LABEL_658;
                case 12:
                    goto LABEL_721;
                case 13:
                    goto LABEL_752;
                case 14:
                    goto LABEL_783;
                case 15:
                    goto LABEL_812;
                case 16:
                    goto LABEL_841;
                case 17:
                    goto LABEL_870;
                case 18:
                    goto LABEL_899;
                case 19:
                    goto LABEL_930;
                case 20:
                    goto LABEL_961;
                case 21:
                    goto LABEL_992;
                case 22:
                    goto LABEL_1023;
                case 23:
                    goto LABEL_1086;
                case 24:
                    goto LABEL_1149;
                case 25:
                    goto LABEL_1212;
                case 26:
                    goto LABEL_1275;
                }
            }
        }
        if (pnt1->x_0 <= pnt3->x_0)
            return;
        sortPnt1 = pnt3;
        sortPnt2 = pnt1;
        sortPnt3 = pnt2;
    LABEL_268:
        v134 = sortPnt1->y_1;
        v1176 = v134;
        if (v134 >= 0)
        {
            if (v134 >= heightViewPort_93ADC)
                return;
            actScrPtr = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * v134;
            v1278 = 0;
        }
        else
        {
            actScrPtr = beginPrevLineFrame_93AC8;
            v1278 = 1;
        }
        v135 = sortPnt3->y_1;
        v1282 = v135 > heightViewPort_93ADC;
        v1091 = v135 - v134;
        ySum = v135 - v134;
        v1081 = ((sortPnt3->x_0 - sortPnt1->x_0) << 16) / (v135 - v134);
        v1085 = ((sortPnt3->x_0 - sortPnt2->x_0) << 16) / (v135 - v134);
        switch (byte_967E1)
        {
        case 0:
        case 14:
        case 15:
            v156 = sortPnt1->x_0 << 16;
            v157 = sortPnt2->x_0 << 16;
            if (v1278)
            {
                v158 = -v1176;
                v1091 += v1176;
                v16 = ySum <= -v1176;
                ySum += v1176;
                if (v16)
                    return;
                v156 += v1081 * v158;
                v157 += v158 * v1085;
                if (v1282)
                {
                    ySum = heightViewPort_93ADC;
                    v1091 = heightViewPort_93ADC;
                }
            }
            else if (v1282)
            {
                ySum = heightViewPort_93ADC - v1176;
                v1091 = heightViewPort_93ADC - v1176;
            }
            v159 = (uint32*)&unk_93AE0;
            do
            {
                *v159 = v156;
                v156 += v1081;
                v159[1] = v157;
                v157 += v1085;
                v159 += 5;
                --v1091;
            } while (v1091);
            v29 = (unsigned __int8)byte_967E1;
            switch (byte_967E1)
            {
            case 0:
                goto LABEL_309;
            case 1:
                goto LABEL_322;
            case 2:
                goto LABEL_351;
            case 3:
                goto LABEL_382;
            case 4:
                goto LABEL_445;
            case 5:
                goto LABEL_474;
            case 6:
                goto LABEL_503;
            case 7:
            case 11:
                goto LABEL_564;
            case 8:
                goto LABEL_595;
            case 9:
            case 10:
                goto LABEL_658;
            case 12:
                goto LABEL_721;
            case 13:
                goto LABEL_752;
            case 14:
                goto LABEL_783;
            case 15:
                goto LABEL_812;
            case 16:
                goto LABEL_841;
            case 17:
                goto LABEL_870;
            case 18:
                goto LABEL_899;
            case 19:
                goto LABEL_930;
            case 20:
                goto LABEL_961;
            case 21:
                goto LABEL_992;
            case 22:
                goto LABEL_1023;
            case 23:
                goto LABEL_1086;
            case 24:
                goto LABEL_1149;
            case 25:
                goto LABEL_1212;
            case 26:
                goto LABEL_1275;
            }
        case 1:
        case 4:
        case 16:
        case 17:
            scaledZ = (sortPnt2->z_4 - sortPnt1->z_4) / (sortPnt2->x_0 - sortPnt1->x_0);
            v1129 = (sortPnt3->z_4 - sortPnt1->z_4) / ySum;
            v151 = sortPnt1->x_0 << 16;
            v152 = sortPnt2->x_0 << 16;
            v153 = sortPnt1->z_4;
            if (v1278)
            {
                v154 = -v1176;
                v1091 += v1176;
                v16 = ySum <= -v1176;
                ySum += v1176;
                if (v16)
                    return;
                v151 += v1081 * v154;
                v152 += v154 * v1085;
                v153 += v154 * v1129;
                if (v1282)
                {
                    ySum = heightViewPort_93ADC;
                    v1091 = heightViewPort_93ADC;
                }
            }
            else if (v1282)
            {
                ySum = heightViewPort_93ADC - v1176;
                v1091 = heightViewPort_93ADC - v1176;
            }
            v155 = (uint32*)&unk_93AE0;
            do
            {
                *v155 = v151;
                v151 += v1081;
                v155[1] = v152;
                v152 += v1085;
                v155[4] = v153;
                v153 += v1129;
                v155 += 5;
                --v1091;
            } while (v1091);
            v29 = (unsigned __int8)byte_967E1;
            switch (byte_967E1)
            {
            case 0:
                goto LABEL_309;
            case 1:
                goto LABEL_322;
            case 2:
                goto LABEL_351;
            case 3:
                goto LABEL_382;
            case 4:
                goto LABEL_445;
            case 5:
                goto LABEL_474;
            case 6:
                goto LABEL_503;
            case 7:
            case 11:
                goto LABEL_564;
            case 8:
                goto LABEL_595;
            case 9:
            case 10:
                goto LABEL_658;
            case 12:
                goto LABEL_721;
            case 13:
                goto LABEL_752;
            case 14:
                goto LABEL_783;
            case 15:
                goto LABEL_812;
            case 16:
                goto LABEL_841;
            case 17:
                goto LABEL_870;
            case 18:
                goto LABEL_899;
            case 19:
                goto LABEL_930;
            case 20:
                goto LABEL_961;
            case 21:
                goto LABEL_992;
            case 22:
                goto LABEL_1023;
            case 23:
                goto LABEL_1086;
            case 24:
                goto LABEL_1149;
            case 25:
                goto LABEL_1212;
            case 26:
                goto LABEL_1275;
            }
        case 2:
        case 3:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 18:
        case 19:
        case 22:
        case 23:
            v144 = sortPnt2->x_0 - sortPnt1->x_0;
            scaledU = (sortPnt2->u_2 - sortPnt1->u_2) / v144;
            scaledV = (sortPnt2->v_3 - sortPnt1->v_3) / v144;
            v1107 = (sortPnt3->u_2 - sortPnt1->u_2) / ySum;
            v1118 = (sortPnt3->v_3 - sortPnt1->v_3) / ySum;
            v145 = sortPnt1->x_0 << 16;
            v146 = sortPnt2->x_0 << 16;
            v147 = sortPnt1->u_2;
            v148 = sortPnt1->v_3;
            if (v1278)
            {
                v149 = -v1176;
                v1091 += v1176;
                v16 = ySum <= -v1176;
                ySum += v1176;
                if (v16)
                    return;
                v145 += v1081 * v149;
                v146 += v149 * v1085;
                v147 += v149 * v1107;
                v148 += v149 * v1118;
                if (v1282)
                {
                    ySum = heightViewPort_93ADC;
                    v1091 = heightViewPort_93ADC;
                }
            }
            else if (v1282)
            {
                ySum = heightViewPort_93ADC - v1176;
                v1091 = heightViewPort_93ADC - v1176;
            }
            v150 = (uint32*)&unk_93AE0;
            do
            {
                *v150 = v145;
                v145 += v1081;
                v150[1] = v146;
                v146 += v1085;
                v150[2] = v147;
                v147 += v1107;
                v150[3] = v148;
                v148 += v1118;
                v150 += 5;
                --v1091;
            } while (v1091);
            v29 = (unsigned __int8)byte_967E1;
            switch (byte_967E1)
            {
            case 0:
                goto LABEL_309;
            case 1:
                goto LABEL_322;
            case 2:
                goto LABEL_351;
            case 3:
                goto LABEL_382;
            case 4:
                goto LABEL_445;
            case 5:
                goto LABEL_474;
            case 6:
                goto LABEL_503;
            case 7:
            case 11:
                goto LABEL_564;
            case 8:
                goto LABEL_595;
            case 9:
            case 10:
                goto LABEL_658;
            case 12:
                goto LABEL_721;
            case 13:
                goto LABEL_752;
            case 14:
                goto LABEL_783;
            case 15:
                goto LABEL_812;
            case 16:
                goto LABEL_841;
            case 17:
                goto LABEL_870;
            case 18:
                goto LABEL_899;
            case 19:
                goto LABEL_930;
            case 20:
                goto LABEL_961;
            case 21:
                goto LABEL_992;
            case 22:
                goto LABEL_1023;
            case 23:
                goto LABEL_1086;
            case 24:
                goto LABEL_1149;
            case 25:
                goto LABEL_1212;
            case 26:
                goto LABEL_1275;
            }
        case 5:
        case 6:
        case 20:
        case 21:
        case 24:
        case 25:
        case 26:
            v136 = sortPnt2->x_0 - sortPnt1->x_0;
            scaledU = (sortPnt2->u_2 - sortPnt1->u_2) / v136;
            scaledV = (sortPnt2->v_3 - sortPnt1->v_3) / v136;
            scaledZ = (sortPnt2->z_4 - sortPnt1->z_4) / v136;
            v1106 = (sortPnt3->u_2 - sortPnt1->u_2) / ySum;
            v1117 = (sortPnt3->v_3 - sortPnt1->v_3) / ySum;
            v1128 = (sortPnt3->z_4 - sortPnt1->z_4) / ySum;
            v137 = sortPnt1->x_0 << 16;
            v138 = sortPnt2->x_0 << 16;
            v139 = sortPnt1->u_2;
            v140 = sortPnt1->v_3;
            v141 = sortPnt1->z_4;
            if (v1278)
            {
                v142 = -v1176;
                v1091 += v1176;
                v16 = ySum <= -v1176;
                ySum += v1176;
                if (v16)
                    return;
                v137 += v1081 * v142;
                v138 += v142 * v1085;
                v139 += v142 * v1106;
                v140 += v142 * v1117;
                v141 += v142 * v1128;
                if (v1282)
                {
                    ySum = heightViewPort_93ADC;
                    v1091 = heightViewPort_93ADC;
                }
            }
            else if (v1282)
            {
                ySum = heightViewPort_93ADC - v1176;
                v1091 = heightViewPort_93ADC - v1176;
            }
            v143 = (uint32*)&unk_93AE0;
            do
            {
                *v143 = v137;
                v137 += v1081;
                v143[1] = v138;
                v138 += v1085;
                v143[2] = v139;
                v139 += v1106;
                v143[3] = v140;
                v140 += v1117;
                v143[4] = v141;
                v141 += v1128;
                v143 += 5;
                --v1091;
            } while (v1091);
            break;
        }
        v29 = (unsigned __int8)byte_967E1;
        switch (byte_967E1)
        {
        case 0:
        LABEL_309:
            v160 = (unsigned __int16*)&unk_93AE0;
            v161 = (char*)actScrPtr;
            v162 = byte_967E0;
            HIWORD(v163) = 0;
            while (1)
            {
                LOWORD(v163) = v160[1];
                v164 = v160[3];
                v161 += pitchViewPort_93AD4;
                if ((v163 & 0x8000u) == 0)
                    break;
                if ((__int16)v164 > 0)
                {
                    if (v164 > widthViewPort_93AD8)
                        v164 = widthViewPort_93AD8;
                    v165 = v161;
                LABEL_319:
                    memset(v165, v162, v164);
                }
            LABEL_320:
                v160 += 10;
                if (!--ySum)
                    return;
            }
            if (v164 > widthViewPort_93AD8)
                v164 = widthViewPort_93AD8;
            v16 = (__int16)v164 <= (__int16)v163;
            LOWORD(v164) = v164 - v163;
            if (v16)
                goto LABEL_320;
            v165 = &v161[v163];
            goto LABEL_319;
        case 1:
        LABEL_322:
            for (i = (uint16*)&unk_93AE0; ; i += 10)
            {
                LOWORD(v29) = i[1];
                v167 = (unsigned __int16)i[3];
                v168 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v29 & 0x8000u) == 0)
                    break;
                if ((__int16)v167 > 0)
                {
                    v169 = scaledZ * (unsigned __int16)-(__int16)v29;
                    v170 = v169;
                    v29 = v169 >> 8;
                    v171 = __CFADD__(i[8], v170);
                    v172 = i[8] + v170;
                    BYTE1(v29) += *((_BYTE*)i + 18) + v171;
                    if (v167 > widthViewPort_93AD8)
                        LOWORD(v167) = widthViewPort_93AD8;
                    v29 = (unsigned __int16)v29;
                LABEL_332:
                    while (1)
                    {
                        *v168 = BYTE1(v29);
                        v171 = __CFADD__((_WORD)scaledZ, v172);
                        v173 = scaledZ + v172;
                        v174 = BYTE2(scaledZ) + v171 + BYTE1(v29);
                        v175 = v167 - 1;
                        if (!v175)
                            break;
                        v168[1] = v174;
                        v171 = __CFADD__((_WORD)scaledZ, v173);
                        v176 = scaledZ + v173;
                        v177 = BYTE2(scaledZ) + v171 + v174;
                        v178 = v175 - 1;
                        if (!v178)
                            break;
                        v168[2] = v177;
                        v171 = __CFADD__((_WORD)scaledZ, v176);
                        v179 = scaledZ + v176;
                        v180 = BYTE2(scaledZ) + v171 + v177;
                        v181 = v178 - 1;
                        if (!v181)
                            break;
                        v168[3] = v180;
                        v171 = __CFADD__((_WORD)scaledZ, v179);
                        v182 = scaledZ + v179;
                        v183 = BYTE2(scaledZ) + v171 + v180;
                        v184 = v181 - 1;
                        if (!v184)
                            break;
                        v168[4] = v183;
                        v171 = __CFADD__((_WORD)scaledZ, v182);
                        v185 = scaledZ + v182;
                        v186 = BYTE2(scaledZ) + v171 + v183;
                        v187 = v184 - 1;
                        if (!v187)
                            break;
                        v168[5] = v186;
                        v171 = __CFADD__((_WORD)scaledZ, v185);
                        v188 = scaledZ + v185;
                        v189 = BYTE2(scaledZ) + v171 + v186;
                        v190 = v187 - 1;
                        if (!v190)
                            break;
                        v168[6] = v189;
                        v171 = __CFADD__((_WORD)scaledZ, v188);
                        v191 = scaledZ + v188;
                        v192 = BYTE2(scaledZ) + v171 + v189;
                        v193 = v190 - 1;
                        if (!v193)
                            break;
                        v168[7] = v192;
                        v171 = __CFADD__((_WORD)scaledZ, v191);
                        v194 = scaledZ + v191;
                        v195 = BYTE2(scaledZ) + v171 + v192;
                        v196 = v193 - 1;
                        if (!v196)
                            break;
                        v168[8] = v195;
                        v171 = __CFADD__((_WORD)scaledZ, v194);
                        v197 = scaledZ + v194;
                        v198 = BYTE2(scaledZ) + v171 + v195;
                        v199 = v196 - 1;
                        if (!v199)
                            break;
                        v168[9] = v198;
                        v171 = __CFADD__((_WORD)scaledZ, v197);
                        v200 = scaledZ + v197;
                        v201 = BYTE2(scaledZ) + v171 + v198;
                        v202 = v199 - 1;
                        if (!v202)
                            break;
                        v168[10] = v201;
                        v171 = __CFADD__((_WORD)scaledZ, v200);
                        v203 = scaledZ + v200;
                        v204 = BYTE2(scaledZ) + v171 + v201;
                        v205 = v202 - 1;
                        if (!v205)
                            break;
                        v168[11] = v204;
                        v171 = __CFADD__((_WORD)scaledZ, v203);
                        v206 = scaledZ + v203;
                        v207 = BYTE2(scaledZ) + v171 + v204;
                        v208 = v205 - 1;
                        if (!v208)
                            break;
                        v168[12] = v207;
                        v171 = __CFADD__((_WORD)scaledZ, v206);
                        v209 = scaledZ + v206;
                        v210 = BYTE2(scaledZ) + v171 + v207;
                        v211 = v208 - 1;
                        if (!v211)
                            break;
                        v168[13] = v210;
                        v171 = __CFADD__((_WORD)scaledZ, v209);
                        v212 = scaledZ + v209;
                        v213 = BYTE2(scaledZ) + v171 + v210;
                        v214 = v211 - 1;
                        if (!v214)
                            break;
                        v168[14] = v213;
                        v171 = __CFADD__((_WORD)scaledZ, v212);
                        v215 = scaledZ + v212;
                        v216 = BYTE2(scaledZ) + v171 + v213;
                        v217 = v214 - 1;
                        if (!v217)
                            break;
                        v168[15] = v216;
                        v171 = __CFADD__((_WORD)scaledZ, v215);
                        v172 = scaledZ + v215;
                        BYTE1(v29) = BYTE2(scaledZ) + v171 + v216;
                        LOWORD(v167) = v217 - 1;
                        if (!(_WORD)v167)
                            break;
                        v168 += 16;
                    }
                }
            LABEL_349:
                if (!--ySum)
                    return;
            }
            if (v167 > widthViewPort_93AD8)
                LOWORD(v167) = widthViewPort_93AD8;
            v16 = (__int16)v167 <= (__int16)v29;
            LOWORD(v167) = v167 - v29;
            if (v16)
                goto LABEL_349;
            v168 += v29;
            v29 = (unsigned __int8)byte_967E0;
            v172 = i[8];
            BYTE1(v29) = *((_BYTE*)i + 18);
            goto LABEL_332;
        case 2:
        LABEL_351:
            v218 = (unsigned __int16*)&unk_93AE0;
            v1148 = scaledV << 16;
            HIWORD(v219) = 0;
            HIWORD(v220) = 0;
            while (1)
            {
                LOWORD(v219) = v218[1];
                v221 = v218[3];
                v222 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v219 & 0x8000u) == 0)
                    break;
                if ((__int16)v221 > 0)
                {
                    v223 = (unsigned __int16)-(__int16)v219;
                    v225 = __ROL4__(*((_DWORD*)v218 + 3) + scaledV * v223, 16);
                    BYTE1(v220) = v225;
                    v224 = *((_DWORD*)v218 + 2) + scaledU * v223;
                    LOWORD(v225) = v224;
                    v226 = v224 >> 8;
                    LOBYTE(v220) = BYTE1(v226);
                    if (v221 > widthViewPort_93AD8)
                        LOWORD(v221) = widthViewPort_93AD8;
                    v219 = (unsigned __int16)v226;
                LABEL_361:
                    v1257 = v218;
                    v227 = (int)actTexture_93AD0;
                    while (1)
                    {
                        v228 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v225);
                        LOWORD(v225) = scaledU + v225;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        *v222 = v228;
                        v171 = __CFADD__(v1148, v225);
                        v229 = v1148 + v225;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v230 = v221 - 1;
                        if (!v230)
                            break;
                        v231 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v229);
                        LOWORD(v229) = scaledU + v229;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[1] = v231;
                        v171 = __CFADD__(v1148, v229);
                        v232 = v1148 + v229;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v233 = v230 - 1;
                        if (!v233)
                            break;
                        v234 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v232);
                        LOWORD(v232) = scaledU + v232;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[2] = v234;
                        v171 = __CFADD__(v1148, v232);
                        v235 = v1148 + v232;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v236 = v233 - 1;
                        if (!v236)
                            break;
                        v237 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v235);
                        LOWORD(v235) = scaledU + v235;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[3] = v237;
                        v171 = __CFADD__(v1148, v235);
                        v238 = v1148 + v235;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v239 = v236 - 1;
                        if (!v239)
                            break;
                        v240 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v238);
                        LOWORD(v238) = scaledU + v238;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[4] = v240;
                        v171 = __CFADD__(v1148, v238);
                        v241 = v1148 + v238;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v242 = v239 - 1;
                        if (!v242)
                            break;
                        v243 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v241);
                        LOWORD(v241) = scaledU + v241;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[5] = v243;
                        v171 = __CFADD__(v1148, v241);
                        v244 = v1148 + v241;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v245 = v242 - 1;
                        if (!v245)
                            break;
                        v246 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v244);
                        LOWORD(v244) = scaledU + v244;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[6] = v246;
                        v171 = __CFADD__(v1148, v244);
                        v247 = v1148 + v244;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v248 = v245 - 1;
                        if (!v248)
                            break;
                        v249 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v247);
                        LOWORD(v247) = scaledU + v247;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[7] = v249;
                        v171 = __CFADD__(v1148, v247);
                        v250 = v1148 + v247;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v251 = v248 - 1;
                        if (!v251)
                            break;
                        v252 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v250);
                        LOWORD(v250) = scaledU + v250;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[8] = v252;
                        v171 = __CFADD__(v1148, v250);
                        v253 = v1148 + v250;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v254 = v251 - 1;
                        if (!v254)
                            break;
                        v255 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v253);
                        LOWORD(v253) = scaledU + v253;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[9] = v255;
                        v171 = __CFADD__(v1148, v253);
                        v256 = v1148 + v253;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v257 = v254 - 1;
                        if (!v257)
                            break;
                        v258 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v256);
                        LOWORD(v256) = scaledU + v256;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[10] = v258;
                        v171 = __CFADD__(v1148, v256);
                        v259 = v1148 + v256;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v260 = v257 - 1;
                        if (!v260)
                            break;
                        v261 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v259);
                        LOWORD(v259) = scaledU + v259;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[11] = v261;
                        v171 = __CFADD__(v1148, v259);
                        v262 = v1148 + v259;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v263 = v260 - 1;
                        if (!v263)
                            break;
                        v264 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v262);
                        LOWORD(v262) = scaledU + v262;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[12] = v264;
                        v171 = __CFADD__(v1148, v262);
                        v265 = v1148 + v262;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v266 = v263 - 1;
                        if (!v266)
                            break;
                        v267 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v265);
                        LOWORD(v265) = scaledU + v265;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[13] = v267;
                        v171 = __CFADD__(v1148, v265);
                        v268 = v1148 + v265;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v269 = v266 - 1;
                        if (!v269)
                            break;
                        v270 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v268);
                        LOWORD(v268) = scaledU + v268;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[14] = v270;
                        v171 = __CFADD__(v1148, v268);
                        v271 = v1148 + v268;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        v272 = v269 - 1;
                        if (!v272)
                            break;
                        v273 = *(_BYTE*)(v220 + v227);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v271);
                        LOWORD(v271) = scaledU + v271;
                        LOBYTE(v220) = BYTE2(scaledU) + v171 + v220;
                        v222[15] = v273;
                        v171 = __CFADD__(v1148, v271);
                        v225 = v1148 + v271;
                        BYTE1(v220) += BYTE2(scaledV) + v171;
                        LOWORD(v221) = v272 - 1;
                        if (!(_WORD)v221)
                            break;
                        v222 += 16;
                    }
                    v218 = v1257;
                }
            LABEL_380:
                v218 += 10;
                if (!--ySum)
                    return;
            }
            if (v221 > widthViewPort_93AD8)
                LOWORD(v221) = widthViewPort_93AD8;
            v16 = (__int16)v221 <= (__int16)v219;
            LOWORD(v221) = v221 - v219;
            if (v16)
                goto LABEL_380;
            v222 += v219;
            v225 = __ROL4__(*((_DWORD*)v218 + 3), 16);
            BYTE1(v220) = v225;
            LOWORD(v225) = v218[4];
            LOBYTE(v220) = *((_BYTE*)v218 + 10);
            goto LABEL_361;
        case 3:
        LABEL_382:
            v274 = (unsigned __int16*)&unk_93AE0;
            v1149 = scaledV << 16;
            HIWORD(v275) = 0;
            HIWORD(v276) = 0;
            while (1)
            {
                LOWORD(v275) = v274[1];
                v277 = v274[3];
                v278 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v275 & 0x8000u) == 0)
                    break;
                if ((__int16)v277 > 0)
                {
                    v279 = (unsigned __int16)-(__int16)v275;
                    v281 = __ROL4__(*((_DWORD*)v274 + 3) + scaledV * v279, 16);
                    BYTE1(v276) = v281;
                    v280 = *((_DWORD*)v274 + 2) + scaledU * v279;
                    LOWORD(v281) = v280;
                    v282 = v280 >> 8;
                    LOBYTE(v276) = BYTE1(v282);
                    if (v277 > widthViewPort_93AD8)
                        LOWORD(v277) = widthViewPort_93AD8;
                    v275 = (unsigned __int16)v282;
                LABEL_392:
                    v1258 = v274;
                    v283 = (int)actTexture_93AD0;
                    while (1)
                    {
                        v284 = *(_BYTE*)(v276 + v283);
                        if (v284)
                            *v278 = v284;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v281);
                        LOWORD(v281) = scaledU + v281;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v281);
                        v285 = v1149 + v281;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v286 = v277 - 1;
                        if (!v286)
                            break;
                        v287 = *(_BYTE*)(v276 + v283);
                        if (v287)
                            v278[1] = v287;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v285);
                        LOWORD(v285) = scaledU + v285;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v285);
                        v288 = v1149 + v285;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v289 = v286 - 1;
                        if (!v289)
                            break;
                        v290 = *(_BYTE*)(v276 + v283);
                        if (v290)
                            v278[2] = v290;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v288);
                        LOWORD(v288) = scaledU + v288;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v288);
                        v291 = v1149 + v288;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v292 = v289 - 1;
                        if (!v292)
                            break;
                        v293 = *(_BYTE*)(v276 + v283);
                        if (v293)
                            v278[3] = v293;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v291);
                        LOWORD(v291) = scaledU + v291;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v291);
                        v294 = v1149 + v291;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v295 = v292 - 1;
                        if (!v295)
                            break;
                        v296 = *(_BYTE*)(v276 + v283);
                        if (v296)
                            v278[4] = v296;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v294);
                        LOWORD(v294) = scaledU + v294;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v294);
                        v297 = v1149 + v294;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v298 = v295 - 1;
                        if (!v298)
                            break;
                        v299 = *(_BYTE*)(v276 + v283);
                        if (v299)
                            v278[5] = v299;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v297);
                        LOWORD(v297) = scaledU + v297;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v297);
                        v300 = v1149 + v297;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v301 = v298 - 1;
                        if (!v301)
                            break;
                        v302 = *(_BYTE*)(v276 + v283);
                        if (v302)
                            v278[6] = v302;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v300);
                        LOWORD(v300) = scaledU + v300;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v300);
                        v303 = v1149 + v300;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v304 = v301 - 1;
                        if (!v304)
                            break;
                        v305 = *(_BYTE*)(v276 + v283);
                        if (v305)
                            v278[7] = v305;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v303);
                        LOWORD(v303) = scaledU + v303;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v303);
                        v306 = v1149 + v303;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v307 = v304 - 1;
                        if (!v307)
                            break;
                        v308 = *(_BYTE*)(v276 + v283);
                        if (v308)
                            v278[8] = v308;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v306);
                        LOWORD(v306) = scaledU + v306;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v306);
                        v309 = v1149 + v306;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v310 = v307 - 1;
                        if (!v310)
                            break;
                        v311 = *(_BYTE*)(v276 + v283);
                        if (v311)
                            v278[9] = v311;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v309);
                        LOWORD(v309) = scaledU + v309;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v309);
                        v312 = v1149 + v309;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v313 = v310 - 1;
                        if (!v313)
                            break;
                        v314 = *(_BYTE*)(v276 + v283);
                        if (v314)
                            v278[10] = v314;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v312);
                        LOWORD(v312) = scaledU + v312;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v312);
                        v315 = v1149 + v312;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v316 = v313 - 1;
                        if (!v316)
                            break;
                        v317 = *(_BYTE*)(v276 + v283);
                        if (v317)
                            v278[11] = v317;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v315);
                        LOWORD(v315) = scaledU + v315;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v315);
                        v318 = v1149 + v315;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v319 = v316 - 1;
                        if (!v319)
                            break;
                        v320 = *(_BYTE*)(v276 + v283);
                        if (v320)
                            v278[12] = v320;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v318);
                        LOWORD(v318) = scaledU + v318;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v318);
                        v321 = v1149 + v318;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v322 = v319 - 1;
                        if (!v322)
                            break;
                        v323 = *(_BYTE*)(v276 + v283);
                        if (v323)
                            v278[13] = v323;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v321);
                        LOWORD(v321) = scaledU + v321;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v321);
                        v324 = v1149 + v321;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v325 = v322 - 1;
                        if (!v325)
                            break;
                        v326 = *(_BYTE*)(v276 + v283);
                        if (v326)
                            v278[14] = v326;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v324);
                        LOWORD(v324) = scaledU + v324;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v324);
                        v327 = v1149 + v324;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        v328 = v325 - 1;
                        if (!v328)
                            break;
                        v329 = *(_BYTE*)(v276 + v283);
                        if (v329)
                            v278[15] = v329;
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v327);
                        LOWORD(v327) = scaledU + v327;
                        LOBYTE(v276) = BYTE2(scaledU) + v171 + v276;
                        v171 = __CFADD__(v1149, v327);
                        v281 = v1149 + v327;
                        BYTE1(v276) += BYTE2(scaledV) + v171;
                        LOWORD(v277) = v328 - 1;
                        if (!(_WORD)v277)
                            break;
                        v278 += 16;
                    }
                    v274 = v1258;
                }
            LABEL_443:
                v274 += 10;
                if (!--ySum)
                    return;
            }
            if (v277 > widthViewPort_93AD8)
                LOWORD(v277) = widthViewPort_93AD8;
            v16 = (__int16)v277 <= (__int16)v275;
            LOWORD(v277) = v277 - v275;
            if (v16)
                goto LABEL_443;
            v278 += v275;
            v281 = __ROL4__(*((_DWORD*)v274 + 3), 16);
            BYTE1(v276) = v281;
            LOWORD(v281) = v274[4];
            LOBYTE(v276) = *((_BYTE*)v274 + 10);
            goto LABEL_392;
        case 4:
        LABEL_445:
            for (j = (uint16*)&unk_93AE0; ; j += 10)
            {
                LOWORD(v29) = j[1];
                v331 = (unsigned __int16)j[3];
                v332 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v29 & 0x8000u) == 0)
                    break;
                if ((__int16)v331 > 0)
                {
                    v333 = scaledZ * (unsigned __int16)-(__int16)v29;
                    v334 = v333;
                    v29 = v333 >> 8;
                    v171 = __CFADD__(j[8], v334);
                    v335 = j[8] + v334;
                    BYTE1(v29) += *((_BYTE*)j + 18) + v171;
                    if (v331 > widthViewPort_93AD8)
                        LOWORD(v331) = widthViewPort_93AD8;
                    v29 = (unsigned __int16)v29;
                    LOBYTE(v29) = byte_967E0;
                LABEL_455:
                    while (1)
                    {
                        *v332 = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v335);
                        v336 = scaledZ + v335;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v337 = v331 - 1;
                        if (!v337)
                            break;
                        v332[1] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v336);
                        v338 = scaledZ + v336;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v339 = v337 - 1;
                        if (!v339)
                            break;
                        v332[2] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v338);
                        v340 = scaledZ + v338;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v341 = v339 - 1;
                        if (!v341)
                            break;
                        v332[3] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v340);
                        v342 = scaledZ + v340;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v343 = v341 - 1;
                        if (!v343)
                            break;
                        v332[4] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v342);
                        v344 = scaledZ + v342;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v345 = v343 - 1;
                        if (!v345)
                            break;
                        v332[5] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v344);
                        v346 = scaledZ + v344;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v347 = v345 - 1;
                        if (!v347)
                            break;
                        v332[6] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v346);
                        v348 = scaledZ + v346;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v349 = v347 - 1;
                        if (!v349)
                            break;
                        v332[7] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v348);
                        v350 = scaledZ + v348;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v351 = v349 - 1;
                        if (!v351)
                            break;
                        v332[8] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v350);
                        v352 = scaledZ + v350;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v353 = v351 - 1;
                        if (!v353)
                            break;
                        v332[9] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v352);
                        v354 = scaledZ + v352;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v355 = v353 - 1;
                        if (!v355)
                            break;
                        v332[10] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v354);
                        v356 = scaledZ + v354;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v357 = v355 - 1;
                        if (!v357)
                            break;
                        v332[11] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v356);
                        v358 = scaledZ + v356;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v359 = v357 - 1;
                        if (!v359)
                            break;
                        v332[12] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v358);
                        v360 = scaledZ + v358;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v361 = v359 - 1;
                        if (!v361)
                            break;
                        v332[13] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v360);
                        v362 = scaledZ + v360;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v363 = v361 - 1;
                        if (!v363)
                            break;
                        v332[14] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v362);
                        v364 = scaledZ + v362;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v365 = v363 - 1;
                        if (!v365)
                            break;
                        v332[15] = strPal.fog_B7934_B7924[v29];
                        v171 = __CFADD__((_WORD)scaledZ, v364);
                        v335 = scaledZ + v364;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        LOWORD(v331) = v365 - 1;
                        if (!(_WORD)v331)
                            break;
                        v332 += 16;
                    }
                }
            LABEL_472:
                if (!--ySum)
                    return;
            }
            if (v331 > widthViewPort_93AD8)
                LOWORD(v331) = widthViewPort_93AD8;
            v16 = (__int16)v331 <= (__int16)v29;
            LOWORD(v331) = v331 - v29;
            if (v16)
                goto LABEL_472;
            v332 += v29;
            v29 = (unsigned __int8)byte_967E0;
            v335 = j[8];
            BYTE1(v29) = *((_BYTE*)j + 18);
            goto LABEL_455;
        case 5:
        LABEL_474:
            v1259 = (char*)&unk_93AE0;
            v1150 = scaledV << 16;
            v1166 = scaledZ << 16;
            HIWORD(textPointer) = 0;
            HIWORD(v367) = 0;
            while (1)
            {
                //adress 0x245FFB_
                //debug
#ifdef debug1
            //if (compare_index_245FFB == 0x1d3)
            /*if (compare_index_245FFB == 0x1D0)
            {
                compare_index_245FFB++;
                compare_index_245FFB--;
            }
            add_compare(0x245FFB, true, true);
            compare_index_245FFB++;*/
#endif debug1
            //debug

                v368 = v1259;
                v1259 += 20;
                LOWORD(textPointer) = *((_WORD*)v368 + 1);
                temp93AE0_Y1_1 = *((unsigned __int16*)v368 + 3);
                v370 = pitchViewPort_93AD4 + actScrPtr;
                actScrPtr += pitchViewPort_93AD4;
                if ((textPointer & 0x8000u) == 0)
                    break;
                if ((__int16)temp93AE0_Y1_1 > 0)
                {
                    textIndex = (unsigned __int16)-(__int16)textPointer;
                    v372 = __ROL4__(*((_DWORD*)v368 + 3) + scaledV * textIndex, 16);
                    BYTE1(v367) = v372;
                    LOWORD(v372) = *((_WORD*)v368 + 4) + scaledU * textIndex;
                    textPointer = (unsigned int)(*((_DWORD*)v368 + 2) + scaledU * textIndex) >> 8;
                    LOBYTE(v367) = (unsigned int)(*((_DWORD*)v368 + 2) + scaledU * textIndex) >> 16;
                    v373 = __ROL4__(*((_DWORD*)v368 + 4) + scaledZ * textIndex, 16);
                    BYTE1(textPointer) = v373;
                    LOWORD(v373) = *((_WORD*)v368 + 3);
                    textPointer = (unsigned __int16)textPointer;
                    if ((__int16)v373 > (__int16)widthViewPort_93AD8)
                        LOWORD(v373) = widthViewPort_93AD8;
                LABEL_484:
                    v376 = (_BYTE*)(dword_74F95_754A5[v373 & 0xF] + v370);
                    v377 = (int)actTexture_93AD0;
                    switch (v373 & 0xF)
                    {
                    case 0:
                        goto LABEL_485;
                    case 1:
                        goto LABEL_500;
                    case 2:
                        goto LABEL_499;
                    case 3:
                        goto LABEL_498;
                    case 4:
                        goto LABEL_497;
                    case 5:
                        goto LABEL_496;
                    case 6:
                        goto LABEL_495;
                    case 7:
                        goto LABEL_494;
                    case 8:
                        goto LABEL_493;
                    case 9:
                        goto LABEL_492;
                    case 0xA:
                        goto LABEL_491;
                    case 0xB:
                        goto LABEL_490;
                    case 0xC:
                        goto LABEL_489;
                    case 0xD:
                        goto LABEL_488;
                    case 0xE:
                        goto LABEL_487;
                    case 0xF:
                        while (1)
                        {
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[1] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_487:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[2] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_488:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[3] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_489:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[4] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_490:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[5] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_491:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[6] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_492:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[7] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_493:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[8] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_494:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[9] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_495:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[10] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_496:
                            //adress 0x24629B_ 
                            //debug
                            /*#ifdef debug1
                                              if (compare_index_24629B == 0xa5)
                                              {
                                                  compare_index_24629B++;
                                                  compare_index_24629B--;
                                              }
                            add_compare(0x24629B, true, true);
                            compare_index_24629B++;
                            #endif debug1*/
                            //debug
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[11] = strPal.fog_B7934_B7924[textPointer];//here
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_497:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[12] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_498:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[13] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_499:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[14] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        LABEL_500:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            v376[15] = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                            v376 += 16;
                            v16 = (__int16)v373 <= 16;
                            LOWORD(v373) = v373 - 16;
                            if (v16)
                                break;
                        LABEL_485:
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v372);
                            LOWORD(v372) = scaledU + v372;
                            LOBYTE(textPointer) = *(_BYTE*)(v367 + v377);
                            LOBYTE(v367) = BYTE2(scaledU) + v171 + v367;
                            v171 = __CFADD__(v1150, v372);
                            v372 += v1150;
                            BYTE1(v367) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1166, v373);
                            v373 += v1166;
                            *v376 = strPal.fog_B7934_B7924[textPointer];
                            BYTE1(textPointer) += BYTE2(scaledZ) + v171;
                        }
                        break;
                    }
                }
            LABEL_501:
                if (!--ySum)
                    return;
            }
            if (temp93AE0_Y1_1 > widthViewPort_93AD8)
                LOWORD(temp93AE0_Y1_1) = widthViewPort_93AD8;
            v16 = (__int16)temp93AE0_Y1_1 <= (__int16)textPointer;
            v374 = temp93AE0_Y1_1 - textPointer;
            if (v16)
                goto LABEL_501;
            v370 += textPointer;
            LOBYTE(v367) = v368[10];
            v372 = __ROL4__(*((_DWORD*)v368 + 3), 16);
            v375 = v374;
            BYTE1(v367) = v372;
            LOWORD(v372) = *((_WORD*)v368 + 4);
            v373 = __ROL4__(*((_DWORD*)v368 + 4), 16);
            BYTE1(textPointer) = v373;
            LOWORD(v373) = v375;
            goto LABEL_484;
        case 6:
        LABEL_503:
            v1260 = (char*)&unk_93AE0;
            v1151 = scaledV << 16;
            v1167 = scaledZ << 16;
            HIWORD(v378) = 0;
            HIWORD(v379) = 0;
            while (1)
            {
                v380 = v1260;
                v1260 += 20;
                LOWORD(v378) = *((_WORD*)v380 + 1);
                v381 = *((unsigned __int16*)v380 + 3);
                v382 = pitchViewPort_93AD4 + actScrPtr;
                actScrPtr += pitchViewPort_93AD4;
                if ((v378 & 0x8000u) == 0)
                    break;
                if ((__int16)v381 > 0)
                {
                    v383 = (unsigned __int16)-(__int16)v378;
                    v384 = __ROL4__(*((_DWORD*)v380 + 3) + scaledV * v383, 16);
                    BYTE1(v379) = v384;
                    LOWORD(v384) = *((_WORD*)v380 + 4) + scaledU * v383;
                    v378 = (unsigned int)(*((_DWORD*)v380 + 2) + scaledU * v383) >> 8;
                    LOBYTE(v379) = (unsigned int)(*((_DWORD*)v380 + 2) + scaledU * v383) >> 16;
                    v385 = __ROL4__(*((_DWORD*)v380 + 4) + scaledZ * v383, 16);
                    BYTE1(v378) = v385;
                    LOWORD(v385) = *((_WORD*)v380 + 3);
                    v378 = (unsigned __int16)v378;
                    if ((__int16)v385 > (__int16)widthViewPort_93AD8)
                        LOWORD(v385) = widthViewPort_93AD8;
                LABEL_513:
                    v388 = (_BYTE*)(dword_74F95_754A5[v385 & 0xF] + v382);
                    v389 = (int)actTexture_93AD0;
                    switch (v385 & 0xF)
                    {
                    case 0:
                        goto LABEL_514;
                    case 1:
                        goto LABEL_559;
                    case 2:
                        goto LABEL_556;
                    case 3:
                        goto LABEL_553;
                    case 4:
                        goto LABEL_550;
                    case 5:
                        goto LABEL_547;
                    case 6:
                        goto LABEL_544;
                    case 7:
                        goto LABEL_541;
                    case 8:
                        goto LABEL_538;
                    case 9:
                        goto LABEL_535;
                    case 0xA:
                        goto LABEL_532;
                    case 0xB:
                        goto LABEL_529;
                    case 0xC:
                        goto LABEL_526;
                    case 0xD:
                        goto LABEL_523;
                    case 0xE:
                        goto LABEL_520;
                    case 0xF:
                        while (1)
                        {
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[1] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_520:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[2] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_523:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[3] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_526:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[4] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_529:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[5] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_532:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[6] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_535:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[7] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_538:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[8] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_541:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[9] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_544:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[10] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_547:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[11] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_550:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[12] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_553:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[13] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_556:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[14] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        LABEL_559:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                v388[15] = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                            v388 += 16;
                            v16 = (__int16)v385 <= 16;
                            LOWORD(v385) = v385 - 16;
                            if (v16)
                                break;
                        LABEL_514:
                            LOBYTE(v378) = *(_BYTE*)(v379 + v389);
                            if ((_BYTE)v378)
                                *v388 = strPal.fog_B7934_B7924[v378];
                            v171 = __CFADD__((_WORD)scaledU, (_WORD)v384);
                            LOWORD(v384) = scaledU + v384;
                            LOBYTE(v379) = BYTE2(scaledU) + v171 + v379;
                            v171 = __CFADD__(v1151, v384);
                            v384 += v1151;
                            BYTE1(v379) += BYTE2(scaledV) + v171;
                            v171 = __CFADD__(v1167, v385);
                            v385 += v1167;
                            BYTE1(v378) += BYTE2(scaledZ) + v171;
                        }
                        break;
                    }
                }
            LABEL_562:
                if (!--ySum)
                    return;
            }
            if (v381 > widthViewPort_93AD8)
                LOWORD(v381) = widthViewPort_93AD8;
            v16 = (__int16)v381 <= (__int16)v378;
            v386 = v381 - v378;
            if (v16)
                goto LABEL_562;
            v382 += v378;
            LOBYTE(v379) = v380[10];
            v384 = __ROL4__(*((_DWORD*)v380 + 3), 16);
            v387 = v386;
            BYTE1(v379) = v384;
            LOWORD(v384) = *((_WORD*)v380 + 4);
            v385 = __ROL4__(*((_DWORD*)v380 + 4), 16);
            BYTE1(v378) = v385;
            LOWORD(v385) = v387;
            goto LABEL_513;
        case 7:
        case 11:
        LABEL_564:
            //adress 0x24674B_
            //debug
#ifdef debug1
            if (compare_index_24674B == 0)
            {
                compare_index_24674B++;
                compare_index_24674B--;
            }
            //add_compare(0x24674B, true, true);
            compare_index_24674B++;
#endif debug1
            //debug
            v390 = (unsigned __int16*)&unk_93AE0;
            v1152 = scaledV << 16;
            HIWORD(v391) = 0;
            HIWORD(v392) = 0;
            while (1)
            {
                LOWORD(v391) = v390[1];
                v393 = v390[3];
                v394 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v391 & 0x8000u) == 0)
                    break;
                if ((__int16)v393 > 0)
                {
                    v395 = (unsigned __int16)-(__int16)v391;
                    v397 = __ROL4__(*((_DWORD*)v390 + 3) + scaledV * v395, 16);
                    BYTE1(v392) = v397;
                    v396 = *((_DWORD*)v390 + 2) + scaledU * v395;
                    LOWORD(v397) = v396;
                    v398 = v396 >> 8;
                    LOBYTE(v392) = BYTE1(v398);
                    if (v393 > widthViewPort_93AD8)
                        LOWORD(v393) = widthViewPort_93AD8;
                    v391 = (unsigned __int16)v398;
                LABEL_574:
                    v1261 = v390;
                    v399 = (int)actTexture_93AD0;
                    BYTE1(v391) = byte_967E0;
                    while (1)
                    {
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v397);
                        LOWORD(v397) = scaledU + v397;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v397);
                        v400 = v1152 + v397;
                        *v394 = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v401 = v393 - 1;
                        if (!v401)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v400);
                        LOWORD(v400) = scaledU + v400;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v400);
                        v402 = v1152 + v400;
                        v394[1] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v403 = v401 - 1;
                        if (!v403)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v402);
                        LOWORD(v402) = scaledU + v402;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v402);
                        v404 = v1152 + v402;
                        v394[2] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v405 = v403 - 1;
                        if (!v405)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v404);
                        LOWORD(v404) = scaledU + v404;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v404);
                        v406 = v1152 + v404;
                        v394[3] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v407 = v405 - 1;
                        if (!v407)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v406);
                        LOWORD(v406) = scaledU + v406;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v406);
                        v408 = v1152 + v406;
                        v394[4] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v409 = v407 - 1;
                        if (!v409)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v408);
                        LOWORD(v408) = scaledU + v408;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v408);
                        v410 = v1152 + v408;
                        v394[5] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v411 = v409 - 1;
                        if (!v411)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v410);
                        LOWORD(v410) = scaledU + v410;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v410);
                        v412 = v1152 + v410;
                        v394[6] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v413 = v411 - 1;
                        if (!v413)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v412);
                        LOWORD(v412) = scaledU + v412;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v412);
                        v414 = v1152 + v412;
                        v394[7] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v415 = v413 - 1;
                        if (!v415)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v414);
                        LOWORD(v414) = scaledU + v414;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v414);
                        v416 = v1152 + v414;
                        v394[8] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v417 = v415 - 1;
                        if (!v417)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v416);
                        LOWORD(v416) = scaledU + v416;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v416);
                        v418 = v1152 + v416;
                        v394[9] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v419 = v417 - 1;
                        if (!v419)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v418);
                        LOWORD(v418) = scaledU + v418;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v418);
                        v420 = v1152 + v418;
                        v394[10] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v421 = v419 - 1;
                        if (!v421)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v420);
                        LOWORD(v420) = scaledU + v420;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v420);
                        v422 = v1152 + v420;
                        v394[11] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v423 = v421 - 1;
                        if (!v423)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v422);
                        LOWORD(v422) = scaledU + v422;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v422);
                        v424 = v1152 + v422;
                        v394[12] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v425 = v423 - 1;
                        if (!v425)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v424);
                        LOWORD(v424) = scaledU + v424;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v424);
                        v426 = v1152 + v424;
                        v394[13] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v427 = v425 - 1;
                        if (!v427)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v426);
                        LOWORD(v426) = scaledU + v426;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v426);
                        v428 = v1152 + v426;
                        v394[14] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        v429 = v427 - 1;
                        if (!v429)
                            break;
                        LOBYTE(v391) = *(_BYTE*)(v392 + v399);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v428);
                        LOWORD(v428) = scaledU + v428;
                        LOBYTE(v392) = BYTE2(scaledU) + v171 + v392;
                        v171 = __CFADD__(v1152, v428);
                        v397 = v1152 + v428;
                        v394[15] = strPal.fog_B7934_B7924[v391];
                        BYTE1(v392) += BYTE2(scaledV) + v171;
                        LOWORD(v393) = v429 - 1;
                        if (!(_WORD)v393)
                            break;
                        v394 += 16;
                    }
                    v390 = v1261;
                }
            LABEL_593:
                v390 += 10;
                if (!--ySum)
                    return;
            }
            if (v393 > widthViewPort_93AD8)
                LOWORD(v393) = widthViewPort_93AD8;
            v16 = (__int16)v393 <= (__int16)v391;
            LOWORD(v393) = v393 - v391;
            if (v16)
                goto LABEL_593;
            v394 += v391;
            v397 = __ROL4__(*((_DWORD*)v390 + 3), 16);
            BYTE1(v392) = v397;
            LOWORD(v397) = v390[4];
            LOBYTE(v392) = *((_BYTE*)v390 + 10);
            goto LABEL_574;
        case 8:
        LABEL_595:
            v430 = (unsigned __int16*)&unk_93AE0;
            v1153 = scaledV << 16;
            HIWORD(v431) = 0;
            HIWORD(v432) = 0;
            while (1)
            {
                LOWORD(v431) = v430[1];
                v433 = v430[3];
                v434 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v431 & 0x8000u) == 0)
                    break;
                if ((__int16)v433 > 0)
                {
                    v435 = (unsigned __int16)-(__int16)v431;
                    v437 = __ROL4__(*((_DWORD*)v430 + 3) + scaledV * v435, 16);
                    BYTE1(v432) = v437;
                    v436 = *((_DWORD*)v430 + 2) + scaledU * v435;
                    LOWORD(v437) = v436;
                    v438 = v436 >> 8;
                    LOBYTE(v432) = BYTE1(v438);
                    if (v433 > widthViewPort_93AD8)
                        LOWORD(v433) = widthViewPort_93AD8;
                    v431 = (unsigned __int16)v438;
                LABEL_605:
                    v1262 = v430;
                    v439 = (int)actTexture_93AD0;
                    BYTE1(v431) = byte_967E0;
                    while (1)
                    {
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v437);
                        LOWORD(v437) = scaledU + v437;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            *v434 = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v437);
                        v440 = v1153 + v437;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v441 = v433 - 1;
                        if (!v441)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v440);
                        LOWORD(v440) = scaledU + v440;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[1] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v440);
                        v442 = v1153 + v440;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v443 = v441 - 1;
                        if (!v443)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v442);
                        LOWORD(v442) = scaledU + v442;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[2] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v442);
                        v444 = v1153 + v442;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v445 = v443 - 1;
                        if (!v445)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v444);
                        LOWORD(v444) = scaledU + v444;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[3] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v444);
                        v446 = v1153 + v444;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v447 = v445 - 1;
                        if (!v447)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v446);
                        LOWORD(v446) = scaledU + v446;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[4] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v446);
                        v448 = v1153 + v446;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v449 = v447 - 1;
                        if (!v449)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v448);
                        LOWORD(v448) = scaledU + v448;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[5] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v448);
                        v450 = v1153 + v448;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v451 = v449 - 1;
                        if (!v451)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v450);
                        LOWORD(v450) = scaledU + v450;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[6] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v450);
                        v452 = v1153 + v450;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v453 = v451 - 1;
                        if (!v453)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v452);
                        LOWORD(v452) = scaledU + v452;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[7] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v452);
                        v454 = v1153 + v452;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v455 = v453 - 1;
                        if (!v455)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v454);
                        LOWORD(v454) = scaledU + v454;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[8] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v454);
                        v456 = v1153 + v454;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v457 = v455 - 1;
                        if (!v457)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v456);
                        LOWORD(v456) = scaledU + v456;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[9] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v456);
                        v458 = v1153 + v456;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v459 = v457 - 1;
                        if (!v459)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v458);
                        LOWORD(v458) = scaledU + v458;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[10] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v458);
                        v460 = v1153 + v458;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v461 = v459 - 1;
                        if (!v461)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v460);
                        LOWORD(v460) = scaledU + v460;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[11] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v460);
                        v462 = v1153 + v460;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v463 = v461 - 1;
                        if (!v463)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v462);
                        LOWORD(v462) = scaledU + v462;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[12] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v462);
                        v464 = v1153 + v462;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v465 = v463 - 1;
                        if (!v465)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v464);
                        LOWORD(v464) = scaledU + v464;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[13] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v464);
                        v466 = v1153 + v464;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v467 = v465 - 1;
                        if (!v467)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v466);
                        LOWORD(v466) = scaledU + v466;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[14] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v466);
                        v468 = v1153 + v466;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        v469 = v467 - 1;
                        if (!v469)
                            break;
                        LOBYTE(v431) = *(_BYTE*)(v432 + v439);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v468);
                        LOWORD(v468) = scaledU + v468;
                        LOBYTE(v432) = BYTE2(scaledU) + v171 + v432;
                        if ((_BYTE)v431)
                            v434[15] = strPal.fog_B7934_B7924[v431];
                        v171 = __CFADD__(v1153, v468);
                        v437 = v1153 + v468;
                        BYTE1(v432) += BYTE2(scaledV) + v171;
                        LOWORD(v433) = v469 - 1;
                        if (!(_WORD)v433)
                            break;
                        v434 += 16;
                    }
                    v430 = v1262;
                }
            LABEL_656:
                v430 += 10;
                if (!--ySum)
                    return;
            }
            if (v433 > widthViewPort_93AD8)
                LOWORD(v433) = widthViewPort_93AD8;
            v16 = (__int16)v433 <= (__int16)v431;
            LOWORD(v433) = v433 - v431;
            if (v16)
                goto LABEL_656;
            v434 += v431;
            v437 = __ROL4__(*((_DWORD*)v430 + 3), 16);
            BYTE1(v432) = v437;
            LOWORD(v437) = v430[4];
            LOBYTE(v432) = *((_BYTE*)v430 + 10);
            goto LABEL_605;
        case 9:
        case 10:
        LABEL_658:
            v470 = (unsigned __int16*)&unk_93AE0;
            v1154 = scaledV << 16;
            HIWORD(v471) = 0;
            HIWORD(v472) = 0;
            while (1)
            {
                LOWORD(v471) = v470[1];
                v473 = v470[3];
                v474 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v471 & 0x8000u) == 0)
                    break;
                if ((__int16)v473 > 0)
                {
                    v475 = (unsigned __int16)-(__int16)v471;
                    v477 = __ROL4__(*((_DWORD*)v470 + 3) + scaledV * v475, 16);
                    BYTE1(v472) = v477;
                    v476 = *((_DWORD*)v470 + 2) + scaledU * v475;
                    LOWORD(v477) = v476;
                    v478 = v476 >> 8;
                    LOBYTE(v472) = BYTE1(v478);
                    if (v473 > widthViewPort_93AD8)
                        LOWORD(v473) = widthViewPort_93AD8;
                    v471 = (unsigned __int16)v478;
                LABEL_668:
                    v1263 = v470;
                    v479 = (int)actTexture_93AD0;
                    while (1)
                    {
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v477);
                        LOWORD(v477) = scaledU + v477;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = *v474;
                            *v474 = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v477);
                        v480 = v1154 + v477;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v481 = v473 - 1;
                        if (!v481)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v480);
                        LOWORD(v480) = scaledU + v480;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[1];
                            v474[1] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v480);
                        v482 = v1154 + v480;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v483 = v481 - 1;
                        if (!v483)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v482);
                        LOWORD(v482) = scaledU + v482;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[2];
                            v474[2] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v482);
                        v484 = v1154 + v482;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v485 = v483 - 1;
                        if (!v485)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v484);
                        LOWORD(v484) = scaledU + v484;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[3];
                            v474[3] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v484);
                        v486 = v1154 + v484;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v487 = v485 - 1;
                        if (!v487)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v486);
                        LOWORD(v486) = scaledU + v486;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[4];
                            v474[4] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v486);
                        v488 = v1154 + v486;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v489 = v487 - 1;
                        if (!v489)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v488);
                        LOWORD(v488) = scaledU + v488;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[5];
                            v474[5] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v488);
                        v490 = v1154 + v488;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v491 = v489 - 1;
                        if (!v491)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v490);
                        LOWORD(v490) = scaledU + v490;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[6];
                            v474[6] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v490);
                        v492 = v1154 + v490;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v493 = v491 - 1;
                        if (!v493)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v492);
                        LOWORD(v492) = scaledU + v492;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[7];
                            v474[7] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v492);
                        v494 = v1154 + v492;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v495 = v493 - 1;
                        if (!v495)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v494);
                        LOWORD(v494) = scaledU + v494;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[8];
                            v474[8] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v494);
                        v496 = v1154 + v494;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v497 = v495 - 1;
                        if (!v497)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v496);
                        LOWORD(v496) = scaledU + v496;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[9];
                            v474[9] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v496);
                        v498 = v1154 + v496;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v499 = v497 - 1;
                        if (!v499)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v498);
                        LOWORD(v498) = scaledU + v498;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[10];
                            v474[10] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v498);
                        v500 = v1154 + v498;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v501 = v499 - 1;
                        if (!v501)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v500);
                        LOWORD(v500) = scaledU + v500;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[11];
                            v474[11] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v500);
                        v502 = v1154 + v500;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v503 = v501 - 1;
                        if (!v503)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v502);
                        LOWORD(v502) = scaledU + v502;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[12];
                            v474[12] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v502);
                        v504 = v1154 + v502;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v505 = v503 - 1;
                        if (!v505)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v504);
                        LOWORD(v504) = scaledU + v504;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[13];
                            v474[13] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v504);
                        v506 = v1154 + v504;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v507 = v505 - 1;
                        if (!v507)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v506);
                        LOWORD(v506) = scaledU + v506;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[14];
                            v474[14] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v506);
                        v508 = v1154 + v506;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        v509 = v507 - 1;
                        if (!v509)
                            break;
                        BYTE1(v471) = *(_BYTE*)(v472 + v479);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v508);
                        LOWORD(v508) = scaledU + v508;
                        LOBYTE(v472) = BYTE2(scaledU) + v171 + v472;
                        if (BYTE1(v471))
                        {
                            LOBYTE(v471) = v474[15];
                            v474[15] = strPal.fog_B7934_B7924[v471];
                        }
                        v171 = __CFADD__(v1154, v508);
                        v477 = v1154 + v508;
                        BYTE1(v472) += BYTE2(scaledV) + v171;
                        LOWORD(v473) = v509 - 1;
                        if (!(_WORD)v473)
                            break;
                        v474 += 16;
                    }
                    v470 = v1263;
                }
            LABEL_719:
                v470 += 10;
                if (!--ySum)
                    return;
            }
            if (v473 > widthViewPort_93AD8)
                LOWORD(v473) = widthViewPort_93AD8;
            v16 = (__int16)v473 <= (__int16)v471;
            LOWORD(v473) = v473 - v471;
            if (v16)
                goto LABEL_719;
            v474 += v471;
            v477 = __ROL4__(*((_DWORD*)v470 + 3), 16);
            BYTE1(v472) = v477;
            LOWORD(v477) = v470[4];
            LOBYTE(v472) = *((_BYTE*)v470 + 10);
            goto LABEL_668;
        case 12:
        LABEL_721:
            v510 = (unsigned __int16*)&unk_93AE0;
            v1155 = scaledV << 16;
            HIWORD(v511) = 0;
            HIWORD(v512) = 0;
            while (1)
            {
                LOWORD(v511) = v510[1];
                v513 = v510[3];
                v514 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v511 & 0x8000u) == 0)
                    break;
                if ((__int16)v513 > 0)
                {
                    v515 = (unsigned __int16)-(__int16)v511;
                    v517 = __ROL4__(*((_DWORD*)v510 + 3) + scaledV * v515, 16);
                    BYTE1(v512) = v517;
                    v516 = *((_DWORD*)v510 + 2) + scaledU * v515;
                    LOWORD(v517) = v516;
                    v518 = v516 >> 8;
                    LOBYTE(v512) = BYTE1(v518);
                    if (v513 > widthViewPort_93AD8)
                        LOWORD(v513) = widthViewPort_93AD8;
                    v511 = (unsigned __int16)v518;
                LABEL_731:
                    v1264 = v510;
                    v519 = (int)actTexture_93AD0;
                    LOBYTE(v511) = byte_967E0;
                    while (1)
                    {
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v517);
                        LOWORD(v517) = scaledU + v517;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v517);
                        v520 = v1155 + v517;
                        *v514 = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v521 = v513 - 1;
                        if (!v521)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v520);
                        LOWORD(v520) = scaledU + v520;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v520);
                        v522 = v1155 + v520;
                        v514[1] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v523 = v521 - 1;
                        if (!v523)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v522);
                        LOWORD(v522) = scaledU + v522;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v522);
                        v524 = v1155 + v522;
                        v514[2] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v525 = v523 - 1;
                        if (!v525)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v524);
                        LOWORD(v524) = scaledU + v524;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v524);
                        v526 = v1155 + v524;
                        v514[3] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v527 = v525 - 1;
                        if (!v527)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v526);
                        LOWORD(v526) = scaledU + v526;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v526);
                        v528 = v1155 + v526;
                        v514[4] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v529 = v527 - 1;
                        if (!v529)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v528);
                        LOWORD(v528) = scaledU + v528;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v528);
                        v530 = v1155 + v528;
                        v514[5] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v531 = v529 - 1;
                        if (!v531)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v530);
                        LOWORD(v530) = scaledU + v530;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v530);
                        v532 = v1155 + v530;
                        v514[6] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v533 = v531 - 1;
                        if (!v533)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v532);
                        LOWORD(v532) = scaledU + v532;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v532);
                        v534 = v1155 + v532;
                        v514[7] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v535 = v533 - 1;
                        if (!v535)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v534);
                        LOWORD(v534) = scaledU + v534;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v534);
                        v536 = v1155 + v534;
                        v514[8] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v537 = v535 - 1;
                        if (!v537)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v536);
                        LOWORD(v536) = scaledU + v536;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v536);
                        v538 = v1155 + v536;
                        v514[9] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v539 = v537 - 1;
                        if (!v539)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v538);
                        LOWORD(v538) = scaledU + v538;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v538);
                        v540 = v1155 + v538;
                        v514[10] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v541 = v539 - 1;
                        if (!v541)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v540);
                        LOWORD(v540) = scaledU + v540;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v540);
                        v542 = v1155 + v540;
                        v514[11] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v543 = v541 - 1;
                        if (!v543)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v542);
                        LOWORD(v542) = scaledU + v542;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v542);
                        v544 = v1155 + v542;
                        v514[12] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v545 = v543 - 1;
                        if (!v545)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v544);
                        LOWORD(v544) = scaledU + v544;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v544);
                        v546 = v1155 + v544;
                        v514[13] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v547 = v545 - 1;
                        if (!v547)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v546);
                        LOWORD(v546) = scaledU + v546;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v546);
                        v548 = v1155 + v546;
                        v514[14] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        v549 = v547 - 1;
                        if (!v549)
                            break;
                        BYTE1(v511) = *(_BYTE*)(v512 + v519);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v548);
                        LOWORD(v548) = scaledU + v548;
                        LOBYTE(v512) = BYTE2(scaledU) + v171 + v512;
                        v171 = __CFADD__(v1155, v548);
                        v517 = v1155 + v548;
                        v514[15] = strPal.byte_BB934_BB924[v511];
                        BYTE1(v512) += BYTE2(scaledV) + v171;
                        LOWORD(v513) = v549 - 1;
                        if (!(_WORD)v513)
                            break;
                        v514 += 16;
                    }
                    v510 = v1264;
                }
            LABEL_750:
                v510 += 10;
                if (!--ySum)
                    return;
            }
            if (v513 > widthViewPort_93AD8)
                LOWORD(v513) = widthViewPort_93AD8;
            v16 = (__int16)v513 <= (__int16)v511;
            LOWORD(v513) = v513 - v511;
            if (v16)
                goto LABEL_750;
            v514 += v511;
            v517 = __ROL4__(*((_DWORD*)v510 + 3), 16);
            BYTE1(v512) = v517;
            LOWORD(v517) = v510[4];
            LOBYTE(v512) = *((_BYTE*)v510 + 10);
            goto LABEL_731;
        case 13:
        LABEL_752:
            v550 = (unsigned __int16*)&unk_93AE0;
            v1156 = scaledV << 16;
            HIWORD(v551) = 0;
            HIWORD(v552) = 0;
            while (1)
            {
                LOWORD(v551) = v550[1];
                v553 = v550[3];
                v554 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v551 & 0x8000u) == 0)
                    break;
                if ((__int16)v553 > 0)
                {
                    v555 = (unsigned __int16)-(__int16)v551;
                    v557 = __ROL4__(*((_DWORD*)v550 + 3) + scaledV * v555, 16);
                    BYTE1(v552) = v557;
                    v556 = *((_DWORD*)v550 + 2) + scaledU * v555;
                    LOWORD(v557) = v556;
                    v558 = v556 >> 8;
                    LOBYTE(v552) = BYTE1(v558);
                    if (v553 > widthViewPort_93AD8)
                        LOWORD(v553) = widthViewPort_93AD8;
                    v551 = (unsigned __int16)v558;
                LABEL_762:
                    v1265 = v550;
                    v559 = (int)actTexture_93AD0;
                    BYTE1(v551) = byte_967E0;
                    while (1)
                    {
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v557);
                        LOWORD(v557) = scaledU + v557;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v557);
                        v560 = v1156 + v557;
                        *v554 = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v561 = v553 - 1;
                        if (!v561)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v560);
                        LOWORD(v560) = scaledU + v560;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v560);
                        v562 = v1156 + v560;
                        v554[1] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v563 = v561 - 1;
                        if (!v563)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v562);
                        LOWORD(v562) = scaledU + v562;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v562);
                        v564 = v1156 + v562;
                        v554[2] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v565 = v563 - 1;
                        if (!v565)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v564);
                        LOWORD(v564) = scaledU + v564;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v564);
                        v566 = v1156 + v564;
                        v554[3] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v567 = v565 - 1;
                        if (!v567)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v566);
                        LOWORD(v566) = scaledU + v566;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v566);
                        v568 = v1156 + v566;
                        v554[4] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v569 = v567 - 1;
                        if (!v569)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v568);
                        LOWORD(v568) = scaledU + v568;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v568);
                        v570 = v1156 + v568;
                        v554[5] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v571 = v569 - 1;
                        if (!v571)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v570);
                        LOWORD(v570) = scaledU + v570;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v570);
                        v572 = v1156 + v570;
                        v554[6] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v573 = v571 - 1;
                        if (!v573)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v572);
                        LOWORD(v572) = scaledU + v572;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v572);
                        v574 = v1156 + v572;
                        v554[7] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v575 = v573 - 1;
                        if (!v575)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v574);
                        LOWORD(v574) = scaledU + v574;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v574);
                        v576 = v1156 + v574;
                        v554[8] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v577 = v575 - 1;
                        if (!v577)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v576);
                        LOWORD(v576) = scaledU + v576;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v576);
                        v578 = v1156 + v576;
                        v554[9] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v579 = v577 - 1;
                        if (!v579)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v578);
                        LOWORD(v578) = scaledU + v578;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v578);
                        v580 = v1156 + v578;
                        v554[10] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v581 = v579 - 1;
                        if (!v581)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v580);
                        LOWORD(v580) = scaledU + v580;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v580);
                        v582 = v1156 + v580;
                        v554[11] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v583 = v581 - 1;
                        if (!v583)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v582);
                        LOWORD(v582) = scaledU + v582;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v582);
                        v584 = v1156 + v582;
                        v554[12] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v585 = v583 - 1;
                        if (!v585)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v584);
                        LOWORD(v584) = scaledU + v584;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v584);
                        v586 = v1156 + v584;
                        v554[13] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v587 = v585 - 1;
                        if (!v587)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v586);
                        LOWORD(v586) = scaledU + v586;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v586);
                        v588 = v1156 + v586;
                        v554[14] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        v589 = v587 - 1;
                        if (!v589)
                            break;
                        LOBYTE(v551) = *(_BYTE*)(v552 + v559);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v588);
                        LOWORD(v588) = scaledU + v588;
                        LOBYTE(v552) = BYTE2(scaledU) + v171 + v552;
                        v171 = __CFADD__(v1156, v588);
                        v557 = v1156 + v588;
                        v554[15] = strPal.byte_BB934_BB924[v551];
                        BYTE1(v552) += BYTE2(scaledV) + v171;
                        LOWORD(v553) = v589 - 1;
                        if (!(_WORD)v553)
                            break;
                        v554 += 16;
                    }
                    v550 = v1265;
                }
            LABEL_781:
                v550 += 10;
                if (!--ySum)
                    return;
            }
            if (v553 > widthViewPort_93AD8)
                LOWORD(v553) = widthViewPort_93AD8;
            v16 = (__int16)v553 <= (__int16)v551;
            LOWORD(v553) = v553 - v551;
            if (v16)
                goto LABEL_781;
            v554 += v551;
            v557 = __ROL4__(*((_DWORD*)v550 + 3), 16);
            BYTE1(v552) = v557;
            LOWORD(v557) = v550[4];
            LOBYTE(v552) = *((_BYTE*)v550 + 10);
            goto LABEL_762;
        case 14:
        LABEL_783:
            v590 = (unsigned __int16*)&unk_93AE0;
            v591 = (_BYTE*)actScrPtr;
            HIWORD(v592) = 0;
            BYTE1(v592) = byte_967E0;
            HIWORD(v593) = 0;
            while (1)
            {
                LOWORD(v593) = v590[1];
                v594 = v590[3];
                v591 += pitchViewPort_93AD4;
                if ((v593 & 0x8000u) == 0)
                    break;
                if ((__int16)v594 > 0)
                {
                    if (v594 > widthViewPort_93AD8)
                        LOWORD(v594) = widthViewPort_93AD8;
                LABEL_793:
                    for (k = v591; ; k += 16)
                    {
                        LOBYTE(v592) = *k;
                        *k = strPal.byte_BB934_BB924[v592];
                        v596 = v594 - 1;
                        if (!v596)
                            break;
                        LOBYTE(v592) = k[1];
                        k[1] = strPal.byte_BB934_BB924[v592];
                        v597 = v596 - 1;
                        if (!v597)
                            break;
                        LOBYTE(v592) = k[2];
                        k[2] = strPal.byte_BB934_BB924[v592];
                        v598 = v597 - 1;
                        if (!v598)
                            break;
                        LOBYTE(v592) = k[3];
                        k[3] = strPal.byte_BB934_BB924[v592];
                        v599 = v598 - 1;
                        if (!v599)
                            break;
                        LOBYTE(v592) = k[4];
                        k[4] = strPal.byte_BB934_BB924[v592];
                        v600 = v599 - 1;
                        if (!v600)
                            break;
                        LOBYTE(v592) = k[5];
                        k[5] = strPal.byte_BB934_BB924[v592];
                        v601 = v600 - 1;
                        if (!v601)
                            break;
                        LOBYTE(v592) = k[6];
                        k[6] = strPal.byte_BB934_BB924[v592];
                        v602 = v601 - 1;
                        if (!v602)
                            break;
                        LOBYTE(v592) = k[7];
                        k[7] = strPal.byte_BB934_BB924[v592];
                        v603 = v602 - 1;
                        if (!v603)
                            break;
                        LOBYTE(v592) = k[8];
                        k[8] = strPal.byte_BB934_BB924[v592];
                        v604 = v603 - 1;
                        if (!v604)
                            break;
                        LOBYTE(v592) = k[9];
                        k[9] = strPal.byte_BB934_BB924[v592];
                        v605 = v604 - 1;
                        if (!v605)
                            break;
                        LOBYTE(v592) = k[10];
                        k[10] = strPal.byte_BB934_BB924[v592];
                        v606 = v605 - 1;
                        if (!v606)
                            break;
                        LOBYTE(v592) = k[11];
                        k[11] = strPal.byte_BB934_BB924[v592];
                        v607 = v606 - 1;
                        if (!v607)
                            break;
                        LOBYTE(v592) = k[12];
                        k[12] = strPal.byte_BB934_BB924[v592];
                        v608 = v607 - 1;
                        if (!v608)
                            break;
                        LOBYTE(v592) = k[13];
                        k[13] = strPal.byte_BB934_BB924[v592];
                        v609 = v608 - 1;
                        if (!v609)
                            break;
                        LOBYTE(v592) = k[14];
                        k[14] = strPal.byte_BB934_BB924[v592];
                        v610 = v609 - 1;
                        if (!v610)
                            break;
                        LOBYTE(v592) = k[15];
                        k[15] = strPal.byte_BB934_BB924[v592];
                        LOWORD(v594) = v610 - 1;
                        if (!(_WORD)v594)
                            break;
                    }
                }
            LABEL_810:
                v590 += 10;
                if (!--ySum)
                    return;
            }
            if (v594 > widthViewPort_93AD8)
                LOWORD(v594) = widthViewPort_93AD8;
            v16 = (__int16)v594 <= (__int16)v593;
            LOWORD(v594) = v594 - v593;
            if (v16)
                goto LABEL_810;
            k = &v591[v593];
            goto LABEL_793;
        case 15:
        LABEL_812:
            v611 = (unsigned __int16*)&unk_93AE0;
            v612 = (_BYTE*)actScrPtr;
            v613 = (unsigned __int8)byte_967E0;
            HIWORD(v614) = 0;
            while (1)
            {
                LOWORD(v614) = v611[1];
                v615 = v611[3];
                v612 += pitchViewPort_93AD4;
                if ((v614 & 0x8000u) == 0)
                    break;
                if ((__int16)v615 > 0)
                {
                    if (v615 > widthViewPort_93AD8)
                        LOWORD(v615) = widthViewPort_93AD8;
                LABEL_822:
                    for (m = v612; ; m += 16)
                    {
                        BYTE1(v613) = *m;
                        *m = strPal.byte_BB934_BB924[v613];
                        v617 = v615 - 1;
                        if (!v617)
                            break;
                        BYTE1(v613) = m[1];
                        m[1] = strPal.byte_BB934_BB924[v613];
                        v618 = v617 - 1;
                        if (!v618)
                            break;
                        BYTE1(v613) = m[2];
                        m[2] = strPal.byte_BB934_BB924[v613];
                        v619 = v618 - 1;
                        if (!v619)
                            break;
                        BYTE1(v613) = m[3];
                        m[3] = strPal.byte_BB934_BB924[v613];
                        v620 = v619 - 1;
                        if (!v620)
                            break;
                        BYTE1(v613) = m[4];
                        m[4] = strPal.byte_BB934_BB924[v613];
                        v621 = v620 - 1;
                        if (!v621)
                            break;
                        BYTE1(v613) = m[5];
                        m[5] = strPal.byte_BB934_BB924[v613];
                        v622 = v621 - 1;
                        if (!v622)
                            break;
                        BYTE1(v613) = m[6];
                        m[6] = strPal.byte_BB934_BB924[v613];
                        v623 = v622 - 1;
                        if (!v623)
                            break;
                        BYTE1(v613) = m[7];
                        m[7] = strPal.byte_BB934_BB924[v613];
                        v624 = v623 - 1;
                        if (!v624)
                            break;
                        BYTE1(v613) = m[8];
                        m[8] = strPal.byte_BB934_BB924[v613];
                        v625 = v624 - 1;
                        if (!v625)
                            break;
                        BYTE1(v613) = m[9];
                        m[9] = strPal.byte_BB934_BB924[v613];
                        v626 = v625 - 1;
                        if (!v626)
                            break;
                        BYTE1(v613) = m[10];
                        m[10] = strPal.byte_BB934_BB924[v613];
                        v627 = v626 - 1;
                        if (!v627)
                            break;
                        BYTE1(v613) = m[11];
                        m[11] = strPal.byte_BB934_BB924[v613];
                        v628 = v627 - 1;
                        if (!v628)
                            break;
                        BYTE1(v613) = m[12];
                        m[12] = strPal.byte_BB934_BB924[v613];
                        v629 = v628 - 1;
                        if (!v629)
                            break;
                        BYTE1(v613) = m[13];
                        m[13] = strPal.byte_BB934_BB924[v613];
                        v630 = v629 - 1;
                        if (!v630)
                            break;
                        BYTE1(v613) = m[14];
                        m[14] = strPal.byte_BB934_BB924[v613];
                        v631 = v630 - 1;
                        if (!v631)
                            break;
                        BYTE1(v613) = m[15];
                        m[15] = strPal.byte_BB934_BB924[v613];
                        LOWORD(v615) = v631 - 1;
                        if (!(_WORD)v615)
                            break;
                    }
                }
            LABEL_839:
                v611 += 10;
                if (!--ySum)
                    return;
            }
            if (v615 > widthViewPort_93AD8)
                LOWORD(v615) = widthViewPort_93AD8;
            v16 = (__int16)v615 <= (__int16)v614;
            LOWORD(v615) = v615 - v614;
            if (v16)
                goto LABEL_839;
            m = &v612[v614];
            goto LABEL_822;
        case 16:
        LABEL_841:
            v632 = (unsigned __int16*)&unk_93AE0;
            HIWORD(v633) = 0;
            while (1)
            {
                LOWORD(v29) = v632[1];
                v634 = v632[3];
                v635 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v29 & 0x8000u) == 0)
                    break;
                if ((__int16)v634 > 0)
                {
                    v636 = scaledZ * (unsigned __int16)-(__int16)v29;
                    v637 = v636;
                    v29 = v636 >> 8;
                    v171 = __CFADD__(v632[8], v637);
                    v638 = v632[8] + v637;
                    BYTE1(v29) += *((_BYTE*)v632 + 18) + v171;
                    if (v634 > widthViewPort_93AD8)
                        LOWORD(v634) = widthViewPort_93AD8;
                    v29 = (unsigned __int16)v29;
                    LOBYTE(v29) = byte_967E0;
                LABEL_851:
                    while (1)
                    {
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = *v635;
                        *v635 = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v638);
                        v639 = scaledZ + v638;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v640 = v634 - 1;
                        if (!v640)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[1];
                        v635[1] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v639);
                        v641 = scaledZ + v639;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v642 = v640 - 1;
                        if (!v642)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[2];
                        v635[2] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v641);
                        v643 = scaledZ + v641;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v644 = v642 - 1;
                        if (!v644)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[3];
                        v635[3] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v643);
                        v645 = scaledZ + v643;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v646 = v644 - 1;
                        if (!v646)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[4];
                        v635[4] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v645);
                        v647 = scaledZ + v645;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v648 = v646 - 1;
                        if (!v648)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[5];
                        v635[5] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v647);
                        v649 = scaledZ + v647;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v650 = v648 - 1;
                        if (!v650)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[6];
                        v635[6] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v649);
                        v651 = scaledZ + v649;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v652 = v650 - 1;
                        if (!v652)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[7];
                        v635[7] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v651);
                        v653 = scaledZ + v651;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v654 = v652 - 1;
                        if (!v654)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[8];
                        v635[8] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v653);
                        v655 = scaledZ + v653;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v656 = v654 - 1;
                        if (!v656)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[9];
                        v635[9] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v655);
                        v657 = scaledZ + v655;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v658 = v656 - 1;
                        if (!v658)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[10];
                        v635[10] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v657);
                        v659 = scaledZ + v657;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v660 = v658 - 1;
                        if (!v660)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[11];
                        v635[11] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v659);
                        v661 = scaledZ + v659;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v662 = v660 - 1;
                        if (!v662)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[12];
                        v635[12] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v661);
                        v663 = scaledZ + v661;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v664 = v662 - 1;
                        if (!v664)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[13];
                        v635[13] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v663);
                        v665 = scaledZ + v663;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v666 = v664 - 1;
                        if (!v666)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[14];
                        v635[14] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v665);
                        v667 = scaledZ + v665;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v668 = v666 - 1;
                        if (!v668)
                            break;
                        BYTE1(v633) = strPal.fog_B7934_B7924[v29];
                        LOBYTE(v633) = v635[15];
                        v635[15] = strPal.byte_BB934_BB924[v633];
                        v171 = __CFADD__((_WORD)scaledZ, v667);
                        v638 = scaledZ + v667;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        LOWORD(v634) = v668 - 1;
                        if (!(_WORD)v634)
                            break;
                        v635 += 16;
                    }
                }
            LABEL_868:
                v632 += 10;
                if (!--ySum)
                    return;
            }
            if (v634 > widthViewPort_93AD8)
                LOWORD(v634) = widthViewPort_93AD8;
            v16 = (__int16)v634 <= (__int16)v29;
            LOWORD(v634) = v634 - v29;
            if (v16)
                goto LABEL_868;
            v635 += v29;
            v29 = (unsigned __int8)byte_967E0;
            v638 = v632[8];
            BYTE1(v29) = *((_BYTE*)v632 + 18);
            goto LABEL_851;
        case 17:
        LABEL_870:
            v669 = (unsigned __int16*)&unk_93AE0;
            HIWORD(v670) = 0;
            while (1)
            {
                LOWORD(v29) = v669[1];
                v671 = v669[3];
                v672 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v29 & 0x8000u) == 0)
                    break;
                if ((__int16)v671 > 0)
                {
                    v673 = scaledZ * (unsigned __int16)-(__int16)v29;
                    v674 = v673;
                    v29 = v673 >> 8;
                    v171 = __CFADD__(v669[8], v674);
                    v675 = v669[8] + v674;
                    BYTE1(v29) += *((_BYTE*)v669 + 18) + v171;
                    if (v671 > widthViewPort_93AD8)
                        LOWORD(v671) = widthViewPort_93AD8;
                    v29 = (unsigned __int16)v29;
                    LOBYTE(v29) = byte_967E0;
                LABEL_880:
                    while (1)
                    {
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = *v672;
                        *v672 = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v675);
                        v676 = scaledZ + v675;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v677 = v671 - 1;
                        if (!v677)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[1];
                        v672[1] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v676);
                        v678 = scaledZ + v676;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v679 = v677 - 1;
                        if (!v679)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[2];
                        v672[2] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v678);
                        v680 = scaledZ + v678;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v681 = v679 - 1;
                        if (!v681)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[3];
                        v672[3] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v680);
                        v682 = scaledZ + v680;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v683 = v681 - 1;
                        if (!v683)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[4];
                        v672[4] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v682);
                        v684 = scaledZ + v682;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v685 = v683 - 1;
                        if (!v685)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[5];
                        v672[5] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v684);
                        v686 = scaledZ + v684;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v687 = v685 - 1;
                        if (!v687)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[6];
                        v672[6] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v686);
                        v688 = scaledZ + v686;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v689 = v687 - 1;
                        if (!v689)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[7];
                        v672[7] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v688);
                        v690 = scaledZ + v688;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v691 = v689 - 1;
                        if (!v691)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[8];
                        v672[8] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v690);
                        v692 = scaledZ + v690;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v693 = v691 - 1;
                        if (!v693)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[9];
                        v672[9] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v692);
                        v694 = scaledZ + v692;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v695 = v693 - 1;
                        if (!v695)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[10];
                        v672[10] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v694);
                        v696 = scaledZ + v694;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v697 = v695 - 1;
                        if (!v697)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[11];
                        v672[11] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v696);
                        v698 = scaledZ + v696;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v699 = v697 - 1;
                        if (!v699)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[12];
                        v672[12] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v698);
                        v700 = scaledZ + v698;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v701 = v699 - 1;
                        if (!v701)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[13];
                        v672[13] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v700);
                        v702 = scaledZ + v700;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v703 = v701 - 1;
                        if (!v703)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[14];
                        v672[14] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v702);
                        v704 = scaledZ + v702;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        v705 = v703 - 1;
                        if (!v705)
                            break;
                        LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
                        BYTE1(v670) = v672[15];
                        v672[15] = strPal.byte_BB934_BB924[v670];
                        v171 = __CFADD__((_WORD)scaledZ, v704);
                        v675 = scaledZ + v704;
                        BYTE1(v29) += BYTE2(scaledZ) + v171;
                        LOWORD(v671) = v705 - 1;
                        if (!(_WORD)v671)
                            break;
                        v672 += 16;
                    }
                }
            LABEL_897:
                v669 += 10;
                if (!--ySum)
                    return;
            }
            if (v671 > widthViewPort_93AD8)
                LOWORD(v671) = widthViewPort_93AD8;
            v16 = (__int16)v671 <= (__int16)v29;
            LOWORD(v671) = v671 - v29;
            if (v16)
                goto LABEL_897;
            v672 += v29;
            v29 = (unsigned __int8)byte_967E0;
            v675 = v669[8];
            BYTE1(v29) = *((_BYTE*)v669 + 18);
            goto LABEL_880;
        case 18:
        LABEL_899:
            v706 = (unsigned __int16*)&unk_93AE0;
            v1157 = scaledV << 16;
            HIWORD(v707) = 0;
            HIWORD(v708) = 0;
            while (1)
            {
                LOWORD(v707) = v706[1];
                v709 = v706[3];
                v710 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v707 & 0x8000u) == 0)
                    break;
                if ((__int16)v709 > 0)
                {
                    v711 = (unsigned __int16)-(__int16)v707;
                    v713 = __ROL4__(*((_DWORD*)v706 + 3) + scaledV * v711, 16);
                    BYTE1(v708) = v713;
                    v712 = *((_DWORD*)v706 + 2) + scaledU * v711;
                    LOWORD(v713) = v712;
                    v714 = v712 >> 8;
                    LOBYTE(v708) = BYTE1(v714);
                    if (v709 > widthViewPort_93AD8)
                        LOWORD(v709) = widthViewPort_93AD8;
                    v707 = (unsigned __int16)v714;
                LABEL_909:
                    v1266 = v706;
                    v715 = (int)actTexture_93AD0;
                    while (1)
                    {
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v713);
                        LOWORD(v713) = scaledU + v713;
                        LOBYTE(v707) = *v710;
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v713);
                        v716 = v1157 + v713;
                        *v710 = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v717 = v709 - 1;
                        if (!v717)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v716);
                        LOWORD(v716) = scaledU + v716;
                        LOBYTE(v707) = v710[1];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v716);
                        v718 = v1157 + v716;
                        v710[1] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v719 = v717 - 1;
                        if (!v719)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v718);
                        LOWORD(v718) = scaledU + v718;
                        LOBYTE(v707) = v710[2];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v718);
                        v720 = v1157 + v718;
                        v710[2] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v721 = v719 - 1;
                        if (!v721)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v720);
                        LOWORD(v720) = scaledU + v720;
                        LOBYTE(v707) = v710[3];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v720);
                        v722 = v1157 + v720;
                        v710[3] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v723 = v721 - 1;
                        if (!v723)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v722);
                        LOWORD(v722) = scaledU + v722;
                        LOBYTE(v707) = v710[4];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v722);
                        v724 = v1157 + v722;
                        v710[4] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v725 = v723 - 1;
                        if (!v725)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v724);
                        LOWORD(v724) = scaledU + v724;
                        LOBYTE(v707) = v710[5];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v724);
                        v726 = v1157 + v724;
                        v710[5] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v727 = v725 - 1;
                        if (!v727)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v726);
                        LOWORD(v726) = scaledU + v726;
                        LOBYTE(v707) = v710[6];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v726);
                        v728 = v1157 + v726;
                        v710[6] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v729 = v727 - 1;
                        if (!v729)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v728);
                        LOWORD(v728) = scaledU + v728;
                        LOBYTE(v707) = v710[7];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v728);
                        v730 = v1157 + v728;
                        v710[7] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v731 = v729 - 1;
                        if (!v731)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v730);
                        LOWORD(v730) = scaledU + v730;
                        LOBYTE(v707) = v710[8];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v730);
                        v732 = v1157 + v730;
                        v710[8] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v733 = v731 - 1;
                        if (!v733)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v732);
                        LOWORD(v732) = scaledU + v732;
                        LOBYTE(v707) = v710[9];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v732);
                        v734 = v1157 + v732;
                        v710[9] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v735 = v733 - 1;
                        if (!v735)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v734);
                        LOWORD(v734) = scaledU + v734;
                        LOBYTE(v707) = v710[10];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v734);
                        v736 = v1157 + v734;
                        v710[10] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v737 = v735 - 1;
                        if (!v737)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v736);
                        LOWORD(v736) = scaledU + v736;
                        LOBYTE(v707) = v710[11];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v736);
                        v738 = v1157 + v736;
                        v710[11] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v739 = v737 - 1;
                        if (!v739)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v738);
                        LOWORD(v738) = scaledU + v738;
                        LOBYTE(v707) = v710[12];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v738);
                        v740 = v1157 + v738;
                        v710[12] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v741 = v739 - 1;
                        if (!v741)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v740);
                        LOWORD(v740) = scaledU + v740;
                        LOBYTE(v707) = v710[13];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v740);
                        v742 = v1157 + v740;
                        v710[13] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v743 = v741 - 1;
                        if (!v743)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v742);
                        LOWORD(v742) = scaledU + v742;
                        LOBYTE(v707) = v710[14];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v742);
                        v744 = v1157 + v742;
                        v710[14] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        v745 = v743 - 1;
                        if (!v745)
                            break;
                        BYTE1(v707) = *(_BYTE*)(v708 + v715);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v744);
                        LOWORD(v744) = scaledU + v744;
                        LOBYTE(v707) = v710[15];
                        LOBYTE(v708) = BYTE2(scaledU) + v171 + v708;
                        v171 = __CFADD__(v1157, v744);
                        v713 = v1157 + v744;
                        v710[15] = strPal.byte_BB934_BB924[v707];
                        BYTE1(v708) += BYTE2(scaledV) + v171;
                        LOWORD(v709) = v745 - 1;
                        if (!(_WORD)v709)
                            break;
                        v710 += 16;
                    }
                    v706 = v1266;
                }
            LABEL_928:
                v706 += 10;
                if (!--ySum)
                    return;
            }
            if (v709 > widthViewPort_93AD8)
                LOWORD(v709) = widthViewPort_93AD8;
            v16 = (__int16)v709 <= (__int16)v707;
            LOWORD(v709) = v709 - v707;
            if (v16)
                goto LABEL_928;
            v710 += v707;
            v713 = __ROL4__(*((_DWORD*)v706 + 3), 16);
            BYTE1(v708) = v713;
            LOWORD(v713) = v706[4];
            LOBYTE(v708) = *((_BYTE*)v706 + 10);
            goto LABEL_909;
        case 19:
        LABEL_930:
            v746 = (unsigned __int16*)&unk_93AE0;
            v1158 = scaledV << 16;
            HIWORD(v747) = 0;
            HIWORD(v748) = 0;
            while (1)
            {
                LOWORD(v747) = v746[1];
                v749 = v746[3];
                v750 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v747 & 0x8000u) == 0)
                    break;
                if ((__int16)v749 > 0)
                {
                    v751 = (unsigned __int16)-(__int16)v747;
                    v753 = __ROL4__(*((_DWORD*)v746 + 3) + scaledV * v751, 16);
                    BYTE1(v748) = v753;
                    v752 = *((_DWORD*)v746 + 2) + scaledU * v751;
                    LOWORD(v753) = v752;
                    v754 = v752 >> 8;
                    LOBYTE(v748) = BYTE1(v754);
                    if (v749 > widthViewPort_93AD8)
                        LOWORD(v749) = widthViewPort_93AD8;
                    v747 = (unsigned __int16)v754;
                LABEL_940:
                    v1267 = v746;
                    v755 = (int)actTexture_93AD0;
                    while (1)
                    {
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v753);
                        LOWORD(v753) = scaledU + v753;
                        BYTE1(v747) = *v750;
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v753);
                        v756 = v1158 + v753;
                        *v750 = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v757 = v749 - 1;
                        if (!v757)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v756);
                        LOWORD(v756) = scaledU + v756;
                        BYTE1(v747) = v750[1];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v756);
                        v758 = v1158 + v756;
                        v750[1] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v759 = v757 - 1;
                        if (!v759)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v758);
                        LOWORD(v758) = scaledU + v758;
                        BYTE1(v747) = v750[2];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v758);
                        v760 = v1158 + v758;
                        v750[2] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v761 = v759 - 1;
                        if (!v761)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v760);
                        LOWORD(v760) = scaledU + v760;
                        BYTE1(v747) = v750[3];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v760);
                        v762 = v1158 + v760;
                        v750[3] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v763 = v761 - 1;
                        if (!v763)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v762);
                        LOWORD(v762) = scaledU + v762;
                        BYTE1(v747) = v750[4];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v762);
                        v764 = v1158 + v762;
                        v750[4] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v765 = v763 - 1;
                        if (!v765)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v764);
                        LOWORD(v764) = scaledU + v764;
                        BYTE1(v747) = v750[5];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v764);
                        v766 = v1158 + v764;
                        v750[5] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v767 = v765 - 1;
                        if (!v767)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v766);
                        LOWORD(v766) = scaledU + v766;
                        BYTE1(v747) = v750[6];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v766);
                        v768 = v1158 + v766;
                        v750[6] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v769 = v767 - 1;
                        if (!v769)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v768);
                        LOWORD(v768) = scaledU + v768;
                        BYTE1(v747) = v750[7];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v768);
                        v770 = v1158 + v768;
                        v750[7] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v771 = v769 - 1;
                        if (!v771)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v770);
                        LOWORD(v770) = scaledU + v770;
                        BYTE1(v747) = v750[8];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v770);
                        v772 = v1158 + v770;
                        v750[8] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v773 = v771 - 1;
                        if (!v773)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v772);
                        LOWORD(v772) = scaledU + v772;
                        BYTE1(v747) = v750[9];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v772);
                        v774 = v1158 + v772;
                        v750[9] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v775 = v773 - 1;
                        if (!v775)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v774);
                        LOWORD(v774) = scaledU + v774;
                        BYTE1(v747) = v750[10];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v774);
                        v776 = v1158 + v774;
                        v750[10] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v777 = v775 - 1;
                        if (!v777)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v776);
                        LOWORD(v776) = scaledU + v776;
                        BYTE1(v747) = v750[11];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v776);
                        v778 = v1158 + v776;
                        v750[11] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v779 = v777 - 1;
                        if (!v779)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v778);
                        LOWORD(v778) = scaledU + v778;
                        BYTE1(v747) = v750[12];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v778);
                        v780 = v1158 + v778;
                        v750[12] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v781 = v779 - 1;
                        if (!v781)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v780);
                        LOWORD(v780) = scaledU + v780;
                        BYTE1(v747) = v750[13];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v780);
                        v782 = v1158 + v780;
                        v750[13] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v783 = v781 - 1;
                        if (!v783)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v782);
                        LOWORD(v782) = scaledU + v782;
                        BYTE1(v747) = v750[14];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v782);
                        v784 = v1158 + v782;
                        v750[14] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        v785 = v783 - 1;
                        if (!v785)
                            break;
                        LOBYTE(v747) = *(_BYTE*)(v748 + v755);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v784);
                        LOWORD(v784) = scaledU + v784;
                        BYTE1(v747) = v750[15];
                        LOBYTE(v748) = BYTE2(scaledU) + v171 + v748;
                        v171 = __CFADD__(v1158, v784);
                        v753 = v1158 + v784;
                        v750[15] = strPal.byte_BB934_BB924[v747];
                        BYTE1(v748) += BYTE2(scaledV) + v171;
                        LOWORD(v749) = v785 - 1;
                        if (!(_WORD)v749)
                            break;
                        v750 += 16;
                    }
                    v746 = v1267;
                }
            LABEL_959:
                v746 += 10;
                if (!--ySum)
                    return;
            }
            if (v749 > widthViewPort_93AD8)
                LOWORD(v749) = widthViewPort_93AD8;
            v16 = (__int16)v749 <= (__int16)v747;
            LOWORD(v749) = v749 - v747;
            if (v16)
                goto LABEL_959;
            v750 += v747;
            v753 = __ROL4__(*((_DWORD*)v746 + 3), 16);
            BYTE1(v748) = v753;
            LOWORD(v753) = v746[4];
            LOBYTE(v748) = *((_BYTE*)v746 + 10);
            goto LABEL_940;
        case 20:
        LABEL_961:
            v786 = (unsigned __int16*)&unk_93AE0;
            v1159 = scaledV << 16;
            v1168 = scaledZ << 16;
            HIWORD(v787) = 0;
            HIWORD(v788) = 0;
            while (1)
            {
                LOWORD(v787) = v786[1];
                v789 = v786[3];
                v790 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v787 & 0x8000u) == 0)
                    break;
                if ((__int16)v789 > 0)
                {
                    if (v789 > widthViewPort_93AD8)
                        v789 = widthViewPort_93AD8;
                    v1177 = v789;
                    v791 = (unsigned __int16)-(__int16)v787;
                    v792 = __ROL4__(*((_DWORD*)v786 + 3) + scaledV * v791, 16);
                    BYTE1(v788) = v792;
                    LOWORD(v792) = v786[4] + scaledU * v791;
                    v787 = (unsigned int)(*((_DWORD*)v786 + 2) + scaledU * v791) >> 8;
                    LOBYTE(v788) = (unsigned int)(*((_DWORD*)v786 + 2) + scaledU * v791) >> 16;
                    v793 = __ROL4__(*((_DWORD*)v786 + 4) + scaledZ * v791, 16);
                    v787 = (unsigned __int16)v787;
                LABEL_971:
                    v1268 = v786;
                    v794 = (int)actTexture_93AD0;
                    while (1)
                    {
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v792);
                        LOWORD(v792) = scaledU + v792;
                        BYTE1(v787) = v793;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v792);
                        v795 = v1159 + v792;
                        LOBYTE(v787) = *v790;
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v793);
                        v796 = v1168 + v793;
                        *v790 = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v796) = BYTE2(scaledZ) + v171 + v796;
                        v1178 = v1177 - 1;
                        if (!v1178)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v795);
                        LOWORD(v795) = scaledU + v795;
                        BYTE1(v787) = v796;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v795);
                        v797 = v1159 + v795;
                        LOBYTE(v787) = v790[1];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v796);
                        v798 = v1168 + v796;
                        v790[1] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v798) = BYTE2(scaledZ) + v171 + v798;
                        v1179 = v1178 - 1;
                        if (!v1179)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v797);
                        LOWORD(v797) = scaledU + v797;
                        BYTE1(v787) = v798;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v797);
                        v799 = v1159 + v797;
                        LOBYTE(v787) = v790[2];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v798);
                        v800 = v1168 + v798;
                        v790[2] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v800) = BYTE2(scaledZ) + v171 + v800;
                        v1180 = v1179 - 1;
                        if (!v1180)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v799);
                        LOWORD(v799) = scaledU + v799;
                        BYTE1(v787) = v800;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v799);
                        v801 = v1159 + v799;
                        LOBYTE(v787) = v790[3];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v800);
                        v802 = v1168 + v800;
                        v790[3] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v802) = BYTE2(scaledZ) + v171 + v802;
                        v1181 = v1180 - 1;
                        if (!v1181)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v801);
                        LOWORD(v801) = scaledU + v801;
                        BYTE1(v787) = v802;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v801);
                        v803 = v1159 + v801;
                        LOBYTE(v787) = v790[4];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v802);
                        v804 = v1168 + v802;
                        v790[4] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v804) = BYTE2(scaledZ) + v171 + v804;
                        v1182 = v1181 - 1;
                        if (!v1182)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v803);
                        LOWORD(v803) = scaledU + v803;
                        BYTE1(v787) = v804;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v803);
                        v805 = v1159 + v803;
                        LOBYTE(v787) = v790[5];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v804);
                        v806 = v1168 + v804;
                        v790[5] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v806) = BYTE2(scaledZ) + v171 + v806;
                        v1183 = v1182 - 1;
                        if (!v1183)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v805);
                        LOWORD(v805) = scaledU + v805;
                        BYTE1(v787) = v806;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v805);
                        v807 = v1159 + v805;
                        LOBYTE(v787) = v790[6];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v806);
                        v808 = v1168 + v806;
                        v790[6] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v808) = BYTE2(scaledZ) + v171 + v808;
                        v1184 = v1183 - 1;
                        if (!v1184)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v807);
                        LOWORD(v807) = scaledU + v807;
                        BYTE1(v787) = v808;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v807);
                        v809 = v1159 + v807;
                        LOBYTE(v787) = v790[7];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v808);
                        v810 = v1168 + v808;
                        v790[7] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v810) = BYTE2(scaledZ) + v171 + v810;
                        v1185 = v1184 - 1;
                        if (!v1185)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v809);
                        LOWORD(v809) = scaledU + v809;
                        BYTE1(v787) = v810;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v809);
                        v811 = v1159 + v809;
                        LOBYTE(v787) = v790[8];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v810);
                        v812 = v1168 + v810;
                        v790[8] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v812) = BYTE2(scaledZ) + v171 + v812;
                        v1186 = v1185 - 1;
                        if (!v1186)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v811);
                        LOWORD(v811) = scaledU + v811;
                        BYTE1(v787) = v812;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v811);
                        v813 = v1159 + v811;
                        LOBYTE(v787) = v790[9];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v812);
                        v814 = v1168 + v812;
                        v790[9] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v814) = BYTE2(scaledZ) + v171 + v814;
                        v1187 = v1186 - 1;
                        if (!v1187)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v813);
                        LOWORD(v813) = scaledU + v813;
                        BYTE1(v787) = v814;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v813);
                        v815 = v1159 + v813;
                        LOBYTE(v787) = v790[10];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v814);
                        v816 = v1168 + v814;
                        v790[10] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v816) = BYTE2(scaledZ) + v171 + v816;
                        v1188 = v1187 - 1;
                        if (!v1188)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v815);
                        LOWORD(v815) = scaledU + v815;
                        BYTE1(v787) = v816;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v815);
                        v817 = v1159 + v815;
                        LOBYTE(v787) = v790[11];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v816);
                        v818 = v1168 + v816;
                        v790[11] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v818) = BYTE2(scaledZ) + v171 + v818;
                        v1189 = v1188 - 1;
                        if (!v1189)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v817);
                        LOWORD(v817) = scaledU + v817;
                        BYTE1(v787) = v818;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v817);
                        v819 = v1159 + v817;
                        LOBYTE(v787) = v790[12];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v818);
                        v820 = v1168 + v818;
                        v790[12] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v820) = BYTE2(scaledZ) + v171 + v820;
                        v1190 = v1189 - 1;
                        if (!v1190)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v819);
                        LOWORD(v819) = scaledU + v819;
                        BYTE1(v787) = v820;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v819);
                        v821 = v1159 + v819;
                        LOBYTE(v787) = v790[13];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v820);
                        v822 = v1168 + v820;
                        v790[13] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v822) = BYTE2(scaledZ) + v171 + v822;
                        v1191 = v1190 - 1;
                        if (!v1191)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v821);
                        LOWORD(v821) = scaledU + v821;
                        BYTE1(v787) = v822;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v821);
                        v823 = v1159 + v821;
                        LOBYTE(v787) = v790[14];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v822);
                        v824 = v1168 + v822;
                        v790[14] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v824) = BYTE2(scaledZ) + v171 + v824;
                        v1192 = v1191 - 1;
                        if (!v1192)
                            break;
                        LOBYTE(v787) = *(_BYTE*)(v788 + v794);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v823);
                        LOWORD(v823) = scaledU + v823;
                        BYTE1(v787) = v824;
                        LOBYTE(v788) = BYTE2(scaledU) + v171 + v788;
                        BYTE1(v787) = strPal.fog_B7934_B7924[v787];
                        v171 = __CFADD__(v1159, v823);
                        v792 = v1159 + v823;
                        LOBYTE(v787) = v790[15];
                        BYTE1(v788) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1168, v824);
                        v793 = v1168 + v824;
                        v790[15] = strPal.byte_BB934_BB924[v787];
                        LOBYTE(v793) = BYTE2(scaledZ) + v171 + v793;
                        v1177 = v1192 - 1;
                        if (!v1177)
                            break;
                        v790 += 16;
                    }
                    v786 = v1268;
                }
            LABEL_990:
                v786 += 10;
                if (!--ySum)
                    return;
            }
            if (v789 > widthViewPort_93AD8)
                v789 = widthViewPort_93AD8;
            v16 = (__int16)v789 <= (__int16)v787;
            LOWORD(v789) = v789 - v787;
            if (v16)
                goto LABEL_990;
            v790 += v787;
            v792 = __ROL4__(*((_DWORD*)v786 + 3), 16);
            BYTE1(v788) = v792;
            LOWORD(v792) = v786[4];
            LOBYTE(v788) = *((_BYTE*)v786 + 10);
            v1177 = v789;
            v793 = __ROL4__(*((_DWORD*)v786 + 4), 16);
            goto LABEL_971;
        case 21:
        LABEL_992:
            v825 = (unsigned __int16*)&unk_93AE0;
            v1160 = scaledV << 16;
            v1169 = scaledZ << 16;
            HIWORD(v826) = 0;
            HIWORD(v827) = 0;
            while (1)
            {
                LOWORD(v826) = v825[1];
                v828 = v825[3];
                v829 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v826 & 0x8000u) == 0)
                    break;
                if ((__int16)v828 > 0)
                {
                    if (v828 > widthViewPort_93AD8)
                        v828 = widthViewPort_93AD8;
                    v1193 = v828;
                    v830 = (unsigned __int16)-(__int16)v826;
                    v831 = __ROL4__(*((_DWORD*)v825 + 3) + scaledV * v830, 16);
                    BYTE1(v827) = v831;
                    LOWORD(v831) = v825[4] + scaledU * v830;
                    v826 = (unsigned int)(*((_DWORD*)v825 + 2) + scaledU * v830) >> 8;
                    LOBYTE(v827) = (unsigned int)(*((_DWORD*)v825 + 2) + scaledU * v830) >> 16;
                    v832 = __ROL4__(*((_DWORD*)v825 + 4) + scaledZ * v830, 16);
                    v826 = (unsigned __int16)v826;
                LABEL_1002:
                    v1269 = v825;
                    v833 = (int)actTexture_93AD0;
                    while (1)
                    {
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v831);
                        LOWORD(v831) = scaledU + v831;
                        BYTE1(v826) = v832;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v831);
                        v834 = v1160 + v831;
                        BYTE1(v826) = *v829;
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v832);
                        v835 = v1169 + v832;
                        *v829 = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v835) = BYTE2(scaledZ) + v171 + v835;
                        v1194 = v1193 - 1;
                        if (!v1194)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v834);
                        LOWORD(v834) = scaledU + v834;
                        BYTE1(v826) = v835;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v834);
                        v836 = v1160 + v834;
                        BYTE1(v826) = v829[1];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v835);
                        v837 = v1169 + v835;
                        v829[1] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v837) = BYTE2(scaledZ) + v171 + v837;
                        v1195 = v1194 - 1;
                        if (!v1195)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v836);
                        LOWORD(v836) = scaledU + v836;
                        BYTE1(v826) = v837;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v836);
                        v838 = v1160 + v836;
                        BYTE1(v826) = v829[2];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v837);
                        v839 = v1169 + v837;
                        v829[2] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v839) = BYTE2(scaledZ) + v171 + v839;
                        v1196 = v1195 - 1;
                        if (!v1196)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v838);
                        LOWORD(v838) = scaledU + v838;
                        BYTE1(v826) = v839;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v838);
                        v840 = v1160 + v838;
                        BYTE1(v826) = v829[3];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v839);
                        v841 = v1169 + v839;
                        v829[3] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v841) = BYTE2(scaledZ) + v171 + v841;
                        v1197 = v1196 - 1;
                        if (!v1197)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v840);
                        LOWORD(v840) = scaledU + v840;
                        BYTE1(v826) = v841;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v840);
                        v842 = v1160 + v840;
                        BYTE1(v826) = v829[4];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v841);
                        v843 = v1169 + v841;
                        v829[4] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v843) = BYTE2(scaledZ) + v171 + v843;
                        v1198 = v1197 - 1;
                        if (!v1198)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v842);
                        LOWORD(v842) = scaledU + v842;
                        BYTE1(v826) = v843;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v842);
                        v844 = v1160 + v842;
                        BYTE1(v826) = v829[5];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v843);
                        v845 = v1169 + v843;
                        v829[5] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v845) = BYTE2(scaledZ) + v171 + v845;
                        v1199 = v1198 - 1;
                        if (!v1199)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v844);
                        LOWORD(v844) = scaledU + v844;
                        BYTE1(v826) = v845;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v844);
                        v846 = v1160 + v844;
                        BYTE1(v826) = v829[6];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v845);
                        v847 = v1169 + v845;
                        v829[6] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v847) = BYTE2(scaledZ) + v171 + v847;
                        v1200 = v1199 - 1;
                        if (!v1200)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v846);
                        LOWORD(v846) = scaledU + v846;
                        BYTE1(v826) = v847;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v846);
                        v848 = v1160 + v846;
                        BYTE1(v826) = v829[7];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v847);
                        v849 = v1169 + v847;
                        v829[7] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v849) = BYTE2(scaledZ) + v171 + v849;
                        v1201 = v1200 - 1;
                        if (!v1201)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v848);
                        LOWORD(v848) = scaledU + v848;
                        BYTE1(v826) = v849;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v848);
                        v850 = v1160 + v848;
                        BYTE1(v826) = v829[8];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v849);
                        v851 = v1169 + v849;
                        v829[8] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v851) = BYTE2(scaledZ) + v171 + v851;
                        v1202 = v1201 - 1;
                        if (!v1202)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v850);
                        LOWORD(v850) = scaledU + v850;
                        BYTE1(v826) = v851;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v850);
                        v852 = v1160 + v850;
                        BYTE1(v826) = v829[9];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v851);
                        v853 = v1169 + v851;
                        v829[9] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v853) = BYTE2(scaledZ) + v171 + v853;
                        v1203 = v1202 - 1;
                        if (!v1203)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v852);
                        LOWORD(v852) = scaledU + v852;
                        BYTE1(v826) = v853;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v852);
                        v854 = v1160 + v852;
                        BYTE1(v826) = v829[10];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v853);
                        v855 = v1169 + v853;
                        v829[10] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v855) = BYTE2(scaledZ) + v171 + v855;
                        v1204 = v1203 - 1;
                        if (!v1204)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v854);
                        LOWORD(v854) = scaledU + v854;
                        BYTE1(v826) = v855;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v854);
                        v856 = v1160 + v854;
                        BYTE1(v826) = v829[11];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v855);
                        v857 = v1169 + v855;
                        v829[11] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v857) = BYTE2(scaledZ) + v171 + v857;
                        v1205 = v1204 - 1;
                        if (!v1205)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v856);
                        LOWORD(v856) = scaledU + v856;
                        BYTE1(v826) = v857;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v856);
                        v858 = v1160 + v856;
                        BYTE1(v826) = v829[12];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v857);
                        v859 = v1169 + v857;
                        v829[12] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v859) = BYTE2(scaledZ) + v171 + v859;
                        v1206 = v1205 - 1;
                        if (!v1206)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v858);
                        LOWORD(v858) = scaledU + v858;
                        BYTE1(v826) = v859;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v858);
                        v860 = v1160 + v858;
                        BYTE1(v826) = v829[13];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v859);
                        v861 = v1169 + v859;
                        v829[13] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v861) = BYTE2(scaledZ) + v171 + v861;
                        v1207 = v1206 - 1;
                        if (!v1207)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v860);
                        LOWORD(v860) = scaledU + v860;
                        BYTE1(v826) = v861;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v860);
                        v862 = v1160 + v860;
                        BYTE1(v826) = v829[14];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v861);
                        v863 = v1169 + v861;
                        v829[14] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v863) = BYTE2(scaledZ) + v171 + v863;
                        v1208 = v1207 - 1;
                        if (!v1208)
                            break;
                        LOBYTE(v826) = *(_BYTE*)(v827 + v833);
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v862);
                        LOWORD(v862) = scaledU + v862;
                        BYTE1(v826) = v863;
                        LOBYTE(v827) = BYTE2(scaledU) + v171 + v827;
                        LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
                        v171 = __CFADD__(v1160, v862);
                        v831 = v1160 + v862;
                        BYTE1(v826) = v829[15];
                        BYTE1(v827) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1169, v863);
                        v832 = v1169 + v863;
                        v829[15] = strPal.byte_BB934_BB924[v826];
                        LOBYTE(v832) = BYTE2(scaledZ) + v171 + v832;
                        v1193 = v1208 - 1;
                        if (!v1193)
                            break;
                        v829 += 16;
                    }
                    v825 = v1269;
                }
            LABEL_1021:
                v825 += 10;
                if (!--ySum)
                    return;
            }
            if (v828 > widthViewPort_93AD8)
                v828 = widthViewPort_93AD8;
            v16 = (__int16)v828 <= (__int16)v826;
            LOWORD(v828) = v828 - v826;
            if (v16)
                goto LABEL_1021;
            v829 += v826;
            v831 = __ROL4__(*((_DWORD*)v825 + 3), 16);
            BYTE1(v827) = v831;
            LOWORD(v831) = v825[4];
            LOBYTE(v827) = *((_BYTE*)v825 + 10);
            v1193 = v828;
            v832 = __ROL4__(*((_DWORD*)v825 + 4), 16);
            goto LABEL_1002;
        case 22:
        LABEL_1023:
            v864 = (unsigned __int16*)&unk_93AE0;
            v1161 = scaledV << 16;
            HIWORD(v865) = 0;
            HIWORD(v866) = 0;
            while (1)
            {
                LOWORD(v865) = v864[1];
                v867 = v864[3];
                v868 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v865 & 0x8000u) == 0)
                    break;
                if ((__int16)v867 > 0)
                {
                    v869 = (unsigned __int16)-(__int16)v865;
                    v871 = __ROL4__(*((_DWORD*)v864 + 3) + scaledV * v869, 16);
                    BYTE1(v866) = v871;
                    v870 = *((_DWORD*)v864 + 2) + scaledU * v869;
                    LOWORD(v871) = v870;
                    v872 = v870 >> 8;
                    LOBYTE(v866) = BYTE1(v872);
                    if (v867 > widthViewPort_93AD8)
                        LOWORD(v867) = widthViewPort_93AD8;
                    v865 = (unsigned __int16)v872;
                LABEL_1033:
                    v1270 = v864;
                    v873 = (int)actTexture_93AD0;
                    while (1)
                    {
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = *v868;
                            *v868 = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v871);
                        LOWORD(v871) = scaledU + v871;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v871);
                        v874 = v1161 + v871;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v875 = v867 - 1;
                        if (!v875)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[1];
                            v868[1] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v874);
                        LOWORD(v874) = scaledU + v874;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v874);
                        v876 = v1161 + v874;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v877 = v875 - 1;
                        if (!v877)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[2];
                            v868[2] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v876);
                        LOWORD(v876) = scaledU + v876;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v876);
                        v878 = v1161 + v876;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v879 = v877 - 1;
                        if (!v879)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[3];
                            v868[3] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v878);
                        LOWORD(v878) = scaledU + v878;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v878);
                        v880 = v1161 + v878;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v881 = v879 - 1;
                        if (!v881)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[4];
                            v868[4] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v880);
                        LOWORD(v880) = scaledU + v880;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v880);
                        v882 = v1161 + v880;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v883 = v881 - 1;
                        if (!v883)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[5];
                            v868[5] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v882);
                        LOWORD(v882) = scaledU + v882;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v882);
                        v884 = v1161 + v882;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v885 = v883 - 1;
                        if (!v885)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[6];
                            v868[6] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v884);
                        LOWORD(v884) = scaledU + v884;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v884);
                        v886 = v1161 + v884;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v887 = v885 - 1;
                        if (!v887)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[7];
                            v868[7] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v886);
                        LOWORD(v886) = scaledU + v886;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v886);
                        v888 = v1161 + v886;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v889 = v887 - 1;
                        if (!v889)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[8];
                            v868[8] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v888);
                        LOWORD(v888) = scaledU + v888;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v888);
                        v890 = v1161 + v888;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v891 = v889 - 1;
                        if (!v891)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[9];
                            v868[9] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v890);
                        LOWORD(v890) = scaledU + v890;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v890);
                        v892 = v1161 + v890;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v893 = v891 - 1;
                        if (!v893)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[10];
                            v868[10] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v892);
                        LOWORD(v892) = scaledU + v892;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v892);
                        v894 = v1161 + v892;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v895 = v893 - 1;
                        if (!v895)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[11];
                            v868[11] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v894);
                        LOWORD(v894) = scaledU + v894;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v894);
                        v896 = v1161 + v894;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v897 = v895 - 1;
                        if (!v897)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[12];
                            v868[12] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v896);
                        LOWORD(v896) = scaledU + v896;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v896);
                        v898 = v1161 + v896;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v899 = v897 - 1;
                        if (!v899)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[13];
                            v868[13] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v898);
                        LOWORD(v898) = scaledU + v898;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v898);
                        v900 = v1161 + v898;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v901 = v899 - 1;
                        if (!v901)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[14];
                            v868[14] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v900);
                        LOWORD(v900) = scaledU + v900;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v900);
                        v902 = v1161 + v900;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        v903 = v901 - 1;
                        if (!v903)
                            break;
                        BYTE1(v865) = *(_BYTE*)(v866 + v873);
                        if (BYTE1(v865))
                        {
                            LOBYTE(v865) = v868[15];
                            v868[15] = strPal.byte_BB934_BB924[v865];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v902);
                        LOWORD(v902) = scaledU + v902;
                        LOBYTE(v866) = BYTE2(scaledU) + v171 + v866;
                        v171 = __CFADD__(v1161, v902);
                        v871 = v1161 + v902;
                        BYTE1(v866) += BYTE2(scaledV) + v171;
                        LOWORD(v867) = v903 - 1;
                        if (!(_WORD)v867)
                            break;
                        v868 += 16;
                    }
                    v864 = v1270;
                }
            LABEL_1084:
                v864 += 10;
                if (!--ySum)
                    return;
            }
            if (v867 > widthViewPort_93AD8)
                LOWORD(v867) = widthViewPort_93AD8;
            v16 = (__int16)v867 <= (__int16)v865;
            LOWORD(v867) = v867 - v865;
            if (v16)
                goto LABEL_1084;
            v868 += v865;
            v871 = __ROL4__(*((_DWORD*)v864 + 3), 16);
            BYTE1(v866) = v871;
            LOWORD(v871) = v864[4];
            LOBYTE(v866) = *((_BYTE*)v864 + 10);
            goto LABEL_1033;
        case 23:
        LABEL_1086:
            v904 = (unsigned __int16*)&unk_93AE0;
            v1162 = scaledV << 16;
            HIWORD(v905) = 0;
            HIWORD(v906) = 0;
            while (1)
            {
                LOWORD(v905) = v904[1];
                v907 = v904[3];
                v908 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v905 & 0x8000u) == 0)
                    break;
                if ((__int16)v907 > 0)
                {
                    v909 = (unsigned __int16)-(__int16)v905;
                    v911 = __ROL4__(*((_DWORD*)v904 + 3) + scaledV * v909, 16);
                    BYTE1(v906) = v911;
                    v910 = *((_DWORD*)v904 + 2) + scaledU * v909;
                    LOWORD(v911) = v910;
                    v912 = v910 >> 8;
                    LOBYTE(v906) = BYTE1(v912);
                    if (v907 > widthViewPort_93AD8)
                        LOWORD(v907) = widthViewPort_93AD8;
                    v905 = (unsigned __int16)v912;
                LABEL_1096:
                    v1271 = v904;
                    v913 = (int)actTexture_93AD0;
                    while (1)
                    {
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = *v908;
                            *v908 = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v911);
                        LOWORD(v911) = scaledU + v911;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v911);
                        v914 = v1162 + v911;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v915 = v907 - 1;
                        if (!v915)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[1];
                            v908[1] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v914);
                        LOWORD(v914) = scaledU + v914;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v914);
                        v916 = v1162 + v914;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v917 = v915 - 1;
                        if (!v917)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[2];
                            v908[2] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v916);
                        LOWORD(v916) = scaledU + v916;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v916);
                        v918 = v1162 + v916;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v919 = v917 - 1;
                        if (!v919)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[3];
                            v908[3] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v918);
                        LOWORD(v918) = scaledU + v918;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v918);
                        v920 = v1162 + v918;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v921 = v919 - 1;
                        if (!v921)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[4];
                            v908[4] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v920);
                        LOWORD(v920) = scaledU + v920;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v920);
                        v922 = v1162 + v920;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v923 = v921 - 1;
                        if (!v923)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[5];
                            v908[5] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v922);
                        LOWORD(v922) = scaledU + v922;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v922);
                        v924 = v1162 + v922;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v925 = v923 - 1;
                        if (!v925)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[6];
                            v908[6] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v924);
                        LOWORD(v924) = scaledU + v924;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v924);
                        v926 = v1162 + v924;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v927 = v925 - 1;
                        if (!v927)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[7];
                            v908[7] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v926);
                        LOWORD(v926) = scaledU + v926;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v926);
                        v928 = v1162 + v926;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v929 = v927 - 1;
                        if (!v929)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[8];
                            v908[8] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v928);
                        LOWORD(v928) = scaledU + v928;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v928);
                        v930 = v1162 + v928;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v931 = v929 - 1;
                        if (!v931)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[9];
                            v908[9] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v930);
                        LOWORD(v930) = scaledU + v930;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v930);
                        v932 = v1162 + v930;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v933 = v931 - 1;
                        if (!v933)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[10];
                            v908[10] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v932);
                        LOWORD(v932) = scaledU + v932;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v932);
                        v934 = v1162 + v932;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v935 = v933 - 1;
                        if (!v935)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[11];
                            v908[11] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v934);
                        LOWORD(v934) = scaledU + v934;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v934);
                        v936 = v1162 + v934;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v937 = v935 - 1;
                        if (!v937)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[12];
                            v908[12] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v936);
                        LOWORD(v936) = scaledU + v936;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v936);
                        v938 = v1162 + v936;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v939 = v937 - 1;
                        if (!v939)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[13];
                            v908[13] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v938);
                        LOWORD(v938) = scaledU + v938;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v938);
                        v940 = v1162 + v938;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v941 = v939 - 1;
                        if (!v941)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[14];
                            v908[14] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v940);
                        LOWORD(v940) = scaledU + v940;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v940);
                        v942 = v1162 + v940;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        v943 = v941 - 1;
                        if (!v943)
                            break;
                        LOBYTE(v905) = *(_BYTE*)(v906 + v913);
                        if ((_BYTE)v905)
                        {
                            BYTE1(v905) = v908[15];
                            v908[15] = strPal.byte_BB934_BB924[v905];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v942);
                        LOWORD(v942) = scaledU + v942;
                        LOBYTE(v906) = BYTE2(scaledU) + v171 + v906;
                        v171 = __CFADD__(v1162, v942);
                        v911 = v1162 + v942;
                        BYTE1(v906) += BYTE2(scaledV) + v171;
                        LOWORD(v907) = v943 - 1;
                        if (!(_WORD)v907)
                            break;
                        v908 += 16;
                    }
                    v904 = v1271;
                }
            LABEL_1147:
                v904 += 10;
                if (!--ySum)
                    return;
            }
            if (v907 > widthViewPort_93AD8)
                LOWORD(v907) = widthViewPort_93AD8;
            v16 = (__int16)v907 <= (__int16)v905;
            LOWORD(v907) = v907 - v905;
            if (v16)
                goto LABEL_1147;
            v908 += v905;
            v911 = __ROL4__(*((_DWORD*)v904 + 3), 16);
            BYTE1(v906) = v911;
            LOWORD(v911) = v904[4];
            LOBYTE(v906) = *((_BYTE*)v904 + 10);
            goto LABEL_1096;
        case 24:
        LABEL_1149:
            v944 = (unsigned __int16*)&unk_93AE0;
            v1163 = scaledV << 16;
            v1170 = scaledZ << 16;
            HIWORD(v945) = 0;
            HIWORD(v946) = 0;
            while (1)
            {
                LOWORD(v945) = v944[1];
                v947 = v944[3];
                v948 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v945 & 0x8000u) == 0)
                    break;
                if ((__int16)v947 > 0)
                {
                    if (v947 > widthViewPort_93AD8)
                        v947 = widthViewPort_93AD8;
                    v1209 = v947;
                    v949 = (unsigned __int16)-(__int16)v945;
                    v950 = __ROL4__(*((_DWORD*)v944 + 3) + scaledV * v949, 16);
                    BYTE1(v946) = v950;
                    LOWORD(v950) = v944[4] + scaledU * v949;
                    v945 = (unsigned int)(*((_DWORD*)v944 + 2) + scaledU * v949) >> 8;
                    LOBYTE(v946) = (unsigned int)(*((_DWORD*)v944 + 2) + scaledU * v949) >> 16;
                    v951 = __ROL4__(*((_DWORD*)v944 + 4) + scaledZ * v949, 16);
                    v945 = (unsigned __int16)v945;
                LABEL_1159:
                    v1272 = v944;
                    v952 = (int)actTexture_93AD0;
                    while (1)
                    {
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v951;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = *v948;
                            *v948 = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v950);
                        LOWORD(v950) = scaledU + v950;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v950);
                        v953 = v1163 + v950;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v951);
                        v954 = v1170 + v951;
                        LOBYTE(v954) = BYTE2(scaledZ) + v171 + v954;
                        v1210 = v1209 - 1;
                        if (!v1210)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v954;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[1];
                            v948[1] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v953);
                        LOWORD(v953) = scaledU + v953;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v953);
                        v955 = v1163 + v953;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v954);
                        v956 = v1170 + v954;
                        LOBYTE(v956) = BYTE2(scaledZ) + v171 + v956;
                        v1211 = v1210 - 1;
                        if (!v1211)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v956;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[2];
                            v948[2] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v955);
                        LOWORD(v955) = scaledU + v955;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v955);
                        v957 = v1163 + v955;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v956);
                        v958 = v1170 + v956;
                        LOBYTE(v958) = BYTE2(scaledZ) + v171 + v958;
                        v1212 = v1211 - 1;
                        if (!v1212)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v958;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[3];
                            v948[3] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v957);
                        LOWORD(v957) = scaledU + v957;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v957);
                        v959 = v1163 + v957;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v958);
                        v960 = v1170 + v958;
                        LOBYTE(v960) = BYTE2(scaledZ) + v171 + v960;
                        v1213 = v1212 - 1;
                        if (!v1213)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v960;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[4];
                            v948[4] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v959);
                        LOWORD(v959) = scaledU + v959;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v959);
                        v961 = v1163 + v959;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v960);
                        v962 = v1170 + v960;
                        LOBYTE(v962) = BYTE2(scaledZ) + v171 + v962;
                        v1214 = v1213 - 1;
                        if (!v1214)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v962;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[5];
                            v948[5] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v961);
                        LOWORD(v961) = scaledU + v961;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v961);
                        v963 = v1163 + v961;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v962);
                        v964 = v1170 + v962;
                        LOBYTE(v964) = BYTE2(scaledZ) + v171 + v964;
                        v1215 = v1214 - 1;
                        if (!v1215)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v964;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[6];
                            v948[6] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v963);
                        LOWORD(v963) = scaledU + v963;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v963);
                        v965 = v1163 + v963;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v964);
                        v966 = v1170 + v964;
                        LOBYTE(v966) = BYTE2(scaledZ) + v171 + v966;
                        v1216 = v1215 - 1;
                        if (!v1216)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v966;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[7];
                            v948[7] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v965);
                        LOWORD(v965) = scaledU + v965;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v965);
                        v967 = v1163 + v965;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v966);
                        v968 = v1170 + v966;
                        LOBYTE(v968) = BYTE2(scaledZ) + v171 + v968;
                        v1217 = v1216 - 1;
                        if (!v1217)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v968;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[8];
                            v948[8] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v967);
                        LOWORD(v967) = scaledU + v967;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v967);
                        v969 = v1163 + v967;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v968);
                        v970 = v1170 + v968;
                        LOBYTE(v970) = BYTE2(scaledZ) + v171 + v970;
                        v1218 = v1217 - 1;
                        if (!v1218)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v970;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[9];
                            v948[9] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v969);
                        LOWORD(v969) = scaledU + v969;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v969);
                        v971 = v1163 + v969;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v970);
                        v972 = v1170 + v970;
                        LOBYTE(v972) = BYTE2(scaledZ) + v171 + v972;
                        v1219 = v1218 - 1;
                        if (!v1219)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v972;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[10];
                            v948[10] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v971);
                        LOWORD(v971) = scaledU + v971;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v971);
                        v973 = v1163 + v971;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v972);
                        v974 = v1170 + v972;
                        LOBYTE(v974) = BYTE2(scaledZ) + v171 + v974;
                        v1220 = v1219 - 1;
                        if (!v1220)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v974;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[11];
                            v948[11] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v973);
                        LOWORD(v973) = scaledU + v973;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v973);
                        v975 = v1163 + v973;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v974);
                        v976 = v1170 + v974;
                        LOBYTE(v976) = BYTE2(scaledZ) + v171 + v976;
                        v1221 = v1220 - 1;
                        if (!v1221)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v976;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[12];
                            v948[12] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v975);
                        LOWORD(v975) = scaledU + v975;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v975);
                        v977 = v1163 + v975;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v976);
                        v978 = v1170 + v976;
                        LOBYTE(v978) = BYTE2(scaledZ) + v171 + v978;
                        v1222 = v1221 - 1;
                        if (!v1222)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v978;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[13];
                            v948[13] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v977);
                        LOWORD(v977) = scaledU + v977;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v977);
                        v979 = v1163 + v977;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v978);
                        v980 = v1170 + v978;
                        LOBYTE(v980) = BYTE2(scaledZ) + v171 + v980;
                        v1223 = v1222 - 1;
                        if (!v1223)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v980;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[14];
                            v948[14] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v979);
                        LOWORD(v979) = scaledU + v979;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v979);
                        v981 = v1163 + v979;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v980);
                        v982 = v1170 + v980;
                        LOBYTE(v982) = BYTE2(scaledZ) + v171 + v982;
                        v1224 = v1223 - 1;
                        if (!v1224)
                            break;
                        LOBYTE(v945) = *(_BYTE*)(v946 + v952);
                        if ((_BYTE)v945)
                        {
                            BYTE1(v945) = v982;
                            BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                            LOBYTE(v945) = v948[15];
                            v948[15] = strPal.byte_BB934_BB924[v945];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v981);
                        LOWORD(v981) = scaledU + v981;
                        LOBYTE(v946) = BYTE2(scaledU) + v171 + v946;
                        v171 = __CFADD__(v1163, v981);
                        v950 = v1163 + v981;
                        BYTE1(v946) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1170, v982);
                        v951 = v1170 + v982;
                        LOBYTE(v951) = BYTE2(scaledZ) + v171 + v951;
                        v1209 = v1224 - 1;
                        if (!v1209)
                            break;
                        v948 += 16;
                    }
                    v944 = v1272;
                }
            LABEL_1210:
                v944 += 10;
                if (!--ySum)
                    return;
            }
            if (v947 > widthViewPort_93AD8)
                v947 = widthViewPort_93AD8;
            v16 = (__int16)v947 <= (__int16)v945;
            LOWORD(v947) = v947 - v945;
            if (v16)
                goto LABEL_1210;
            v948 += v945;
            v950 = __ROL4__(*((_DWORD*)v944 + 3), 16);
            BYTE1(v946) = v950;
            LOWORD(v950) = v944[4];
            LOBYTE(v946) = *((_BYTE*)v944 + 10);
            v1209 = v947;
            v951 = __ROL4__(*((_DWORD*)v944 + 4), 16);
            goto LABEL_1159;
        case 25:
        LABEL_1212:
            v983 = (unsigned __int16*)&unk_93AE0;
            v1164 = scaledV << 16;
            v1171 = scaledZ << 16;
            HIWORD(v984) = 0;
            HIWORD(v985) = 0;
            while (1)
            {
                LOWORD(v984) = v983[1];
                v986 = v983[3];
                v987 = (_BYTE*)(pitchViewPort_93AD4 + actScrPtr);
                actScrPtr += pitchViewPort_93AD4;
                if ((v984 & 0x8000u) == 0)
                    break;
                if ((__int16)v986 > 0)
                {
                    if (v986 > widthViewPort_93AD8)
                        v986 = widthViewPort_93AD8;
                    v1225 = v986;
                    v988 = (unsigned __int16)-(__int16)v984;
                    v989 = __ROL4__(*((_DWORD*)v983 + 3) + scaledV * v988, 16);
                    BYTE1(v985) = v989;
                    LOWORD(v989) = v983[4] + scaledU * v988;
                    v984 = (unsigned int)(*((_DWORD*)v983 + 2) + scaledU * v988) >> 8;
                    LOBYTE(v985) = (unsigned int)(*((_DWORD*)v983 + 2) + scaledU * v988) >> 16;
                    v990 = __ROL4__(*((_DWORD*)v983 + 4) + scaledZ * v988, 16);
                    v984 = (unsigned __int16)v984;
                LABEL_1222:
                    v1273 = v983;
                    v991 = (int)actTexture_93AD0;
                    while (1)
                    {
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v990;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = *v987;
                            *v987 = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v989);
                        LOWORD(v989) = scaledU + v989;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v989);
                        v992 = v1164 + v989;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v990);
                        v993 = v1171 + v990;
                        LOBYTE(v993) = BYTE2(scaledZ) + v171 + v993;
                        v1226 = v1225 - 1;
                        if (!v1226)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v993;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[1];
                            v987[1] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v992);
                        LOWORD(v992) = scaledU + v992;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v992);
                        v994 = v1164 + v992;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v993);
                        v995 = v1171 + v993;
                        LOBYTE(v995) = BYTE2(scaledZ) + v171 + v995;
                        v1227 = v1226 - 1;
                        if (!v1227)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v995;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[2];
                            v987[2] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v994);
                        LOWORD(v994) = scaledU + v994;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v994);
                        v996 = v1164 + v994;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v995);
                        v997 = v1171 + v995;
                        LOBYTE(v997) = BYTE2(scaledZ) + v171 + v997;
                        v1228 = v1227 - 1;
                        if (!v1228)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v997;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[3];
                            v987[3] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v996);
                        LOWORD(v996) = scaledU + v996;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v996);
                        v998 = v1164 + v996;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v997);
                        v999 = v1171 + v997;
                        LOBYTE(v999) = BYTE2(scaledZ) + v171 + v999;
                        v1229 = v1228 - 1;
                        if (!v1229)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v999;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[4];
                            v987[4] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v998);
                        LOWORD(v998) = scaledU + v998;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v998);
                        v1000 = v1164 + v998;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v999);
                        v1001 = v1171 + v999;
                        LOBYTE(v1001) = BYTE2(scaledZ) + v171 + v1001;
                        v1230 = v1229 - 1;
                        if (!v1230)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1001;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[5];
                            v987[5] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1000);
                        LOWORD(v1000) = scaledU + v1000;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1000);
                        v1002 = v1164 + v1000;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1001);
                        v1003 = v1171 + v1001;
                        LOBYTE(v1003) = BYTE2(scaledZ) + v171 + v1003;
                        v1231 = v1230 - 1;
                        if (!v1231)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1003;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[6];
                            v987[6] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1002);
                        LOWORD(v1002) = scaledU + v1002;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1002);
                        v1004 = v1164 + v1002;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1003);
                        v1005 = v1171 + v1003;
                        LOBYTE(v1005) = BYTE2(scaledZ) + v171 + v1005;
                        v1232 = v1231 - 1;
                        if (!v1232)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1005;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[7];
                            v987[7] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1004);
                        LOWORD(v1004) = scaledU + v1004;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1004);
                        v1006 = v1164 + v1004;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1005);
                        v1007 = v1171 + v1005;
                        LOBYTE(v1007) = BYTE2(scaledZ) + v171 + v1007;
                        v1233 = v1232 - 1;
                        if (!v1233)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1007;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[8];
                            v987[8] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1006);
                        LOWORD(v1006) = scaledU + v1006;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1006);
                        v1008 = v1164 + v1006;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1007);
                        v1009 = v1171 + v1007;
                        LOBYTE(v1009) = BYTE2(scaledZ) + v171 + v1009;
                        v1234 = v1233 - 1;
                        if (!v1234)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1009;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[9];
                            v987[9] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1008);
                        LOWORD(v1008) = scaledU + v1008;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1008);
                        v1010 = v1164 + v1008;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1009);
                        v1011 = v1171 + v1009;
                        LOBYTE(v1011) = BYTE2(scaledZ) + v171 + v1011;
                        v1235 = v1234 - 1;
                        if (!v1235)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1011;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[10];
                            v987[10] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1010);
                        LOWORD(v1010) = scaledU + v1010;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1010);
                        v1012 = v1164 + v1010;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1011);
                        v1013 = v1171 + v1011;
                        LOBYTE(v1013) = BYTE2(scaledZ) + v171 + v1013;
                        v1236 = v1235 - 1;
                        if (!v1236)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1013;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[11];
                            v987[11] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1012);
                        LOWORD(v1012) = scaledU + v1012;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1012);
                        v1014 = v1164 + v1012;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1013);
                        v1015 = v1171 + v1013;
                        LOBYTE(v1015) = BYTE2(scaledZ) + v171 + v1015;
                        v1237 = v1236 - 1;
                        if (!v1237)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1015;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[12];
                            v987[12] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1014);
                        LOWORD(v1014) = scaledU + v1014;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1014);
                        v1016 = v1164 + v1014;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1015);
                        v1017 = v1171 + v1015;
                        LOBYTE(v1017) = BYTE2(scaledZ) + v171 + v1017;
                        v1238 = v1237 - 1;
                        if (!v1238)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1017;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[13];
                            v987[13] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1016);
                        LOWORD(v1016) = scaledU + v1016;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1016);
                        v1018 = v1164 + v1016;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1017);
                        v1019 = v1171 + v1017;
                        LOBYTE(v1019) = BYTE2(scaledZ) + v171 + v1019;
                        v1239 = v1238 - 1;
                        if (!v1239)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1019;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[14];
                            v987[14] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1018);
                        LOWORD(v1018) = scaledU + v1018;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1018);
                        v1020 = v1164 + v1018;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1019);
                        v1021 = v1171 + v1019;
                        LOBYTE(v1021) = BYTE2(scaledZ) + v171 + v1021;
                        v1240 = v1239 - 1;
                        if (!v1240)
                            break;
                        LOBYTE(v984) = *(_BYTE*)(v985 + v991);
                        if ((_BYTE)v984)
                        {
                            BYTE1(v984) = v1021;
                            LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                            BYTE1(v984) = v987[15];
                            v987[15] = strPal.byte_BB934_BB924[v984];
                        }
                        v171 = __CFADD__((_WORD)scaledU, (_WORD)v1020);
                        LOWORD(v1020) = scaledU + v1020;
                        LOBYTE(v985) = BYTE2(scaledU) + v171 + v985;
                        v171 = __CFADD__(v1164, v1020);
                        v989 = v1164 + v1020;
                        BYTE1(v985) += BYTE2(scaledV) + v171;
                        v171 = __CFADD__(v1171, v1021);
                        v990 = v1171 + v1021;
                        LOBYTE(v990) = BYTE2(scaledZ) + v171 + v990;
                        v1225 = v1240 - 1;
                        if (!v1225)
                            break;
                        v987 += 16;
                    }
                    v983 = v1273;
                }
            LABEL_1273:
                v983 += 10;
                if (!--ySum)
                    return;
            }
            if (v986 > widthViewPort_93AD8)
                v986 = widthViewPort_93AD8;
            v16 = (__int16)v986 <= (__int16)v984;
            LOWORD(v986) = v986 - v984;
            if (v16)
                goto LABEL_1273;
            v987 += v984;
            v989 = __ROL4__(*((_DWORD*)v983 + 3), 16);
            BYTE1(v985) = v989;
            LOWORD(v989) = v983[4];
            LOBYTE(v985) = *((_BYTE*)v983 + 10);
            v1225 = v986;
            v990 = __ROL4__(*((_DWORD*)v983 + 4), 16);
            goto LABEL_1222;
        case 26:
        LABEL_1275:
            v1022 = (unsigned __int16*)&unk_93AE0;
            v1165 = scaledV << 16;
            v1172 = scaledZ << 16;
            HIWORD(v1023) = 0;
            HIWORD(v1024) = 0;
            break;
        }
        while (1)
        {
            LOWORD(v1023) = v1022[1];
            v1025 = v1022[3];
            v1026 = (char*)(pitchViewPort_93AD4 + actScrPtr);
            actScrPtr += pitchViewPort_93AD4;
            if ((v1023 & 0x8000u) == 0)
                break;
            if ((__int16)v1025 > 0)
            {
                if (v1025 > widthViewPort_93AD8)
                    v1025 = widthViewPort_93AD8;
                v1241 = v1025;
                v1027 = (unsigned __int16)-(__int16)v1023;
                v1028 = __ROL4__(*((_DWORD*)v1022 + 3) + scaledV * v1027, 16);
                BYTE1(v1024) = v1028;
                LOWORD(v1028) = v1022[4] + scaledU * v1027;
                v1023 = (unsigned int)(*((_DWORD*)v1022 + 2) + scaledU * v1027) >> 8;
                LOBYTE(v1024) = (unsigned int)(*((_DWORD*)v1022 + 2) + scaledU * v1027) >> 16;
                v1029 = __ROL4__(*((_DWORD*)v1022 + 4) + scaledZ * v1027, 16);
                v1023 = (unsigned __int16)v1023;
            LABEL_1285:
                v1274 = v1022;
                v1030 = (int)actTexture_93AD0;
                while (1)
                {
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1028);
                    LOWORD(v1028) = scaledU + v1028;
                    BYTE1(v1023) = v1029;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1031 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = *v1026;
                        v1031 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1028);
                    v1032 = v1165 + v1028;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1029);
                    v1033 = v1172 + v1029;
                    *v1026 = v1031;
                    LOBYTE(v1033) = BYTE2(scaledZ) + v171 + v1033;
                    v1242 = v1241 - 1;
                    if (!v1242)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1032);
                    LOWORD(v1032) = scaledU + v1032;
                    BYTE1(v1023) = v1033;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1034 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[1];
                        v1034 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1032);
                    v1035 = v1165 + v1032;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1033);
                    v1036 = v1172 + v1033;
                    v1026[1] = v1034;
                    LOBYTE(v1036) = BYTE2(scaledZ) + v171 + v1036;
                    v1243 = v1242 - 1;
                    if (!v1243)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1035);
                    LOWORD(v1035) = scaledU + v1035;
                    BYTE1(v1023) = v1036;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1037 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[2];
                        v1037 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1035);
                    v1038 = v1165 + v1035;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1036);
                    v1039 = v1172 + v1036;
                    v1026[2] = v1037;
                    LOBYTE(v1039) = BYTE2(scaledZ) + v171 + v1039;
                    v1244 = v1243 - 1;
                    if (!v1244)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1038);
                    LOWORD(v1038) = scaledU + v1038;
                    BYTE1(v1023) = v1039;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1040 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[3];
                        v1040 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1038);
                    v1041 = v1165 + v1038;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1039);
                    v1042 = v1172 + v1039;
                    v1026[3] = v1040;
                    LOBYTE(v1042) = BYTE2(scaledZ) + v171 + v1042;
                    v1245 = v1244 - 1;
                    if (!v1245)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1041);
                    LOWORD(v1041) = scaledU + v1041;
                    BYTE1(v1023) = v1042;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1043 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[4];
                        v1043 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1041);
                    v1044 = v1165 + v1041;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1042);
                    v1045 = v1172 + v1042;
                    v1026[4] = v1043;
                    LOBYTE(v1045) = BYTE2(scaledZ) + v171 + v1045;
                    v1246 = v1245 - 1;
                    if (!v1246)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1044);
                    LOWORD(v1044) = scaledU + v1044;
                    BYTE1(v1023) = v1045;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1046 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[5];
                        v1046 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1044);
                    v1047 = v1165 + v1044;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1045);
                    v1048 = v1172 + v1045;
                    v1026[5] = v1046;
                    LOBYTE(v1048) = BYTE2(scaledZ) + v171 + v1048;
                    v1247 = v1246 - 1;
                    if (!v1247)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1047);
                    LOWORD(v1047) = scaledU + v1047;
                    BYTE1(v1023) = v1048;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1049 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[6];
                        v1049 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1047);
                    v1050 = v1165 + v1047;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1048);
                    v1051 = v1172 + v1048;
                    v1026[6] = v1049;
                    LOBYTE(v1051) = BYTE2(scaledZ) + v171 + v1051;
                    v1248 = v1247 - 1;
                    if (!v1248)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1050);
                    LOWORD(v1050) = scaledU + v1050;
                    BYTE1(v1023) = v1051;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1052 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[7];
                        v1052 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1050);
                    v1053 = v1165 + v1050;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1051);
                    v1054 = v1172 + v1051;
                    v1026[7] = v1052;
                    LOBYTE(v1054) = BYTE2(scaledZ) + v171 + v1054;
                    v1249 = v1248 - 1;
                    if (!v1249)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1053);
                    LOWORD(v1053) = scaledU + v1053;
                    BYTE1(v1023) = v1054;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1055 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[8];
                        v1055 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1053);
                    v1056 = v1165 + v1053;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1054);
                    v1057 = v1172 + v1054;
                    v1026[8] = v1055;
                    LOBYTE(v1057) = BYTE2(scaledZ) + v171 + v1057;
                    v1250 = v1249 - 1;
                    if (!v1250)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1056);
                    LOWORD(v1056) = scaledU + v1056;
                    BYTE1(v1023) = v1057;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1058 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[9];
                        v1058 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1056);
                    v1059 = v1165 + v1056;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1057);
                    v1060 = v1172 + v1057;
                    v1026[9] = v1058;
                    LOBYTE(v1060) = BYTE2(scaledZ) + v171 + v1060;
                    v1251 = v1250 - 1;
                    if (!v1251)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1059);
                    LOWORD(v1059) = scaledU + v1059;
                    BYTE1(v1023) = v1060;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1061 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[10];
                        v1061 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1059);
                    v1062 = v1165 + v1059;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1060);
                    v1063 = v1172 + v1060;
                    v1026[10] = v1061;
                    LOBYTE(v1063) = BYTE2(scaledZ) + v171 + v1063;
                    v1252 = v1251 - 1;
                    if (!v1252)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1062);
                    LOWORD(v1062) = scaledU + v1062;
                    BYTE1(v1023) = v1063;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1064 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[11];
                        v1064 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1062);
                    v1065 = v1165 + v1062;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1063);
                    v1066 = v1172 + v1063;
                    v1026[11] = v1064;
                    LOBYTE(v1066) = BYTE2(scaledZ) + v171 + v1066;
                    v1253 = v1252 - 1;
                    if (!v1253)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1065);
                    LOWORD(v1065) = scaledU + v1065;
                    BYTE1(v1023) = v1066;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1067 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[12];
                        v1067 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1065);
                    v1068 = v1165 + v1065;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1066);
                    v1069 = v1172 + v1066;
                    v1026[12] = v1067;
                    LOBYTE(v1069) = BYTE2(scaledZ) + v171 + v1069;
                    v1254 = v1253 - 1;
                    if (!v1254)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1068);
                    LOWORD(v1068) = scaledU + v1068;
                    BYTE1(v1023) = v1069;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1070 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[13];
                        v1070 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1068);
                    v1071 = v1165 + v1068;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1069);
                    v1072 = v1172 + v1069;
                    v1026[13] = v1070;
                    LOBYTE(v1072) = BYTE2(scaledZ) + v171 + v1072;
                    v1255 = v1254 - 1;
                    if (!v1255)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1071);
                    LOWORD(v1071) = scaledU + v1071;
                    BYTE1(v1023) = v1072;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1073 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[14];
                        v1073 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1071);
                    v1074 = v1165 + v1071;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1072);
                    v1075 = v1172 + v1072;
                    v1026[14] = v1073;
                    LOBYTE(v1075) = BYTE2(scaledZ) + v171 + v1075;
                    v1256 = v1255 - 1;
                    if (!v1256)
                        break;
                    LOBYTE(v1023) = *(_BYTE*)(v1024 + v1030);
                    v171 = __CFADD__((_WORD)scaledU, (_WORD)v1074);
                    LOWORD(v1074) = scaledU + v1074;
                    BYTE1(v1023) = v1075;
                    LOBYTE(v1024) = BYTE2(scaledU) + v171 + v1024;
                    if ((unsigned __int8)v1023 >= 0xCu)
                    {
                        v1076 = strPal.fog_B7934_B7924[v1023];
                    }
                    else
                    {
                        LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
                        BYTE1(v1023) = v1026[15];
                        v1076 = strPal.byte_BB934_BB924[v1023];
                    }
                    v171 = __CFADD__(v1165, v1074);
                    v1028 = v1165 + v1074;
                    BYTE1(v1024) += BYTE2(scaledV) + v171;
                    v171 = __CFADD__(v1172, v1075);
                    v1029 = v1172 + v1075;
                    v1026[15] = v1076;
                    LOBYTE(v1029) = BYTE2(scaledZ) + v171 + v1029;
                    v1241 = v1256 - 1;
                    if (!v1241)
                        break;
                    v1026 += 16;
                }
                v1022 = v1274;
            }
        LABEL_1352:
            v1022 += 10;
            if (!--ySum)
                return;
        }
        if (v1025 > widthViewPort_93AD8)
            v1025 = widthViewPort_93AD8;
        v16 = (__int16)v1025 <= (__int16)v1023;
        LOWORD(v1025) = v1025 - v1023;
        if (v16)
            goto LABEL_1352;
        v1026 += v1023;
        v1028 = __ROL4__(*((_DWORD*)v1022 + 3), 16);
        BYTE1(v1024) = v1028;
        LOWORD(v1028) = v1022[4];
        LOBYTE(v1024) = *((_BYTE*)v1022 + 10);
        v1241 = v1025;
        v1029 = __ROL4__(*((_DWORD*)v1022 + 4), 16);
        goto LABEL_1285;
    }
    if (pnt1->y_1 == pnt3->y_1)
    {
        if (pnt3->x_0 <= pnt1->x_0)
            return;
        sortPnt1 = pnt2;
        sortPnt2 = pnt3;
        sortPnt3 = pnt1;
        goto LABEL_225;
    }
    if (pnt1->y_1 < pnt3->y_1)
    {
        sortPnt1 = pnt2;
        sortPnt2 = pnt3;
        sortPnt3 = pnt1;
        goto LABEL_124;
    }
    if (pnt2->y_1 == pnt3->y_1)
    {
        if (pnt3->x_0 <= pnt2->x_0)
            return;
        sortPnt1 = pnt2;
        sortPnt2 = pnt3;
        sortPnt3 = pnt1;
        goto LABEL_268;
    }
    if (pnt2->y_1 < pnt3->y_1)
    {
        sortPnt1 = pnt2;
        sortPnt2 = pnt3;
        sortPnt3 = pnt1;
        goto LABEL_24;
    }
    sortPnt1 = pnt3;
    sortPnt2 = pnt1;
    sortPnt3 = pnt2;
LABEL_124:
    v60 = sortPnt1->y_1;
    v1174 = v60;
    if (v60 >= 0)
    {
        if (v60 >= heightViewPort_93ADC)
            return;
        actScrPtr = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * v60;
        v1276 = 0;
    }
    else
    {
        actScrPtr = beginPrevLineFrame_93AC8;
        v1276 = 1;
    }
    v61 = sortPnt3->y_1;
    v1280 = v61 > heightViewPort_93ADC;
    v1089 = v61 - v60;
    v62 = sortPnt2->y_1;
    v1284 = v62 > heightViewPort_93ADC;
    v63 = v62 - v60;
    v1093 = v63;
    ySum = v63;
    v1079 = ((sortPnt3->x_0 - sortPnt1->x_0) << 16) / v1089;
    if (((sortPnt2->x_0 - sortPnt1->x_0) << 16) / v63 > v1079)
    {
        v1083 = ((sortPnt2->x_0 - sortPnt1->x_0) << 16) / v63;
        v1087 = ((sortPnt2->x_0 - sortPnt3->x_0) << 16) / (sortPnt2->y_1 - sortPnt3->y_1);
        v1095 = sortPnt2->y_1 - sortPnt3->y_1;
        v1097 = sortPnt3->x_0 << 16;
        switch (byte_967E1)
        {
        case 0:
        case 14:
        case 15:
            v102 = sortPnt1->x_0 << 16;
            v103 = v102;
            if (v1276)
            {
                v16 = ySum <= -v1174;
                ySum += v1174;
                if (v16)
                    return;
                v1146 = -v1174;
                if (-v1174 - v1089 >= 0)
                {
                    v1147 = v1146 - v1089;
                    v1095 -= v1147;
                    v104 = v1087 * v1147 + v1097;
                    v103 += v1147 * v1083 + v1089 * v1083;
                    if (v1284)
                    {
                        v1095 = heightViewPort_93ADC;
                        ySum = heightViewPort_93ADC;
                    }
                    v105 = (uint32*)&unk_93AE0;
                LABEL_219:
                    if (v1280)
                    {
                        v29 = (unsigned __int8)byte_967E1;
                        switch (byte_967E1)
                        {
                        case 0:
                            goto LABEL_309;
                        case 1:
                            goto LABEL_322;
                        case 2:
                            goto LABEL_351;
                        case 3:
                            goto LABEL_382;
                        case 4:
                            goto LABEL_445;
                        case 5:
                            goto LABEL_474;
                        case 6:
                            goto LABEL_503;
                        case 7:
                        case 11:
                            goto LABEL_564;
                        case 8:
                            goto LABEL_595;
                        case 9:
                        case 10:
                            goto LABEL_658;
                        case 12:
                            goto LABEL_721;
                        case 13:
                            goto LABEL_752;
                        case 14:
                            goto LABEL_783;
                        case 15:
                            goto LABEL_812;
                        case 16:
                            goto LABEL_841;
                        case 17:
                            goto LABEL_870;
                        case 18:
                            goto LABEL_899;
                        case 19:
                            goto LABEL_930;
                        case 20:
                            goto LABEL_961;
                        case 21:
                            goto LABEL_992;
                        case 22:
                            goto LABEL_1023;
                        case 23:
                            goto LABEL_1086;
                        case 24:
                            goto LABEL_1149;
                        case 25:
                            goto LABEL_1212;
                        case 26:
                            goto LABEL_1275;
                        }
                    }
                    do
                    {
                        *v105 = v104;
                        v104 += v1087;
                        v105[1] = v103;
                        v103 += v1083;
                        v105 += 5;
                        --v1095;
                    } while (v1095);
                    v29 = (unsigned __int8)byte_967E1;
                    switch (byte_967E1)
                    {
                    case 0:
                        goto LABEL_309;
                    case 1:
                        goto LABEL_322;
                    case 2:
                        goto LABEL_351;
                    case 3:
                        goto LABEL_382;
                    case 4:
                        goto LABEL_445;
                    case 5:
                        goto LABEL_474;
                    case 6:
                        goto LABEL_503;
                    case 7:
                    case 11:
                        goto LABEL_564;
                    case 8:
                        goto LABEL_595;
                    case 9:
                    case 10:
                        goto LABEL_658;
                    case 12:
                        goto LABEL_721;
                    case 13:
                        goto LABEL_752;
                    case 14:
                        goto LABEL_783;
                    case 15:
                        goto LABEL_812;
                    case 16:
                        goto LABEL_841;
                    case 17:
                        goto LABEL_870;
                    case 18:
                        goto LABEL_899;
                    case 19:
                        goto LABEL_930;
                    case 20:
                        goto LABEL_961;
                    case 21:
                        goto LABEL_992;
                    case 22:
                        goto LABEL_1023;
                    case 23:
                        goto LABEL_1086;
                    case 24:
                        goto LABEL_1149;
                    case 25:
                        goto LABEL_1212;
                    case 26:
                        goto LABEL_1275;
                    }
                }
                v1089 += v1174;
                v102 += v1079 * v1146;
                v103 += v1146 * v1083;
                if (v1284)
                {
                    ySum = heightViewPort_93ADC;
                    if (v1280)
                    {
                        v1089 = heightViewPort_93ADC;
                    }
                    else
                    {
                        v1280 = heightViewPort_93ADC <= v1089;
                        v1095 = heightViewPort_93ADC - v1089;
                    }
                }
            }
            else if (v1284)
            {
                v106 = heightViewPort_93ADC - v1174;
                ySum = heightViewPort_93ADC - v1174;
                if (v1280)
                {
                    v1089 = heightViewPort_93ADC - v1174;
                }
                else
                {
                    v27 = __OFSUB__(v106, v1089);
                    v107 = v106 - v1089;
                    v1280 = (v107 < 0) ^ v27 | (v107 == 0);
                    v1095 = v107;
                }
            }
            v105 = (uint32*)&unk_93AE0;
            do
            {
                *v105 = v102;
                v102 += v1079;
                v105[1] = v103;
                v103 += v1083;
                v105 += 5;
                --v1089;
            } while (v1089);
            v104 = v1097;
            goto LABEL_219;
        case 1:
        case 4:
        case 16:
        case 17:
            v91 = v1089 * (__int64)(sortPnt2->x_0 - sortPnt1->x_0) / v63;
            v92 = sortPnt1->x_0 - sortPnt3->x_0;
            v93 = v91 + v92 == 0;
            v16 = (v91 + v92 < 0) ^ __OFADD__(v91, v92);
            v94 = v91 + v92;
            if (v16)
                return;
            if (!v93)
                scaledZ = (int)(sortPnt1->z_4 + v1089 * (__int64)(sortPnt2->z_4 - sortPnt1->z_4) / v1093 - sortPnt3->z_4) / (v94 + 1);
            v1125 = (sortPnt3->z_4 - sortPnt1->z_4) / v1089;
            v1131 = (sortPnt2->z_4 - sortPnt3->z_4) / v1095;
            v95 = sortPnt1->x_0 << 16;
            v96 = v95;
            v97 = sortPnt1->z_4;
            if (v1276)
            {
                v16 = ySum <= -v1174;
                ySum += v1174;
                if (v16)
                    return;
                v1144 = -v1174;
                if (-v1174 - v1089 >= 0)
                {
                    v1145 = v1144 - v1089;
                    v1095 -= v1145;
                    v98 = v1087 * v1145 + v1097;
                    v96 += v1145 * v1083 + v1089 * v1083;
                    v97 += v1145 * v1131 + v1089 * v1125;
                    if (v1284)
                    {
                        v1095 = heightViewPort_93ADC;
                        ySum = heightViewPort_93ADC;
                    }
                    v99 = (uint32*)&unk_93AE0;
                LABEL_198:
                    if (v1280)
                    {
                        v29 = (unsigned __int8)byte_967E1;
                        switch (byte_967E1)
                        {
                        case 0:
                            goto LABEL_309;
                        case 1:
                            goto LABEL_322;
                        case 2:
                            goto LABEL_351;
                        case 3:
                            goto LABEL_382;
                        case 4:
                            goto LABEL_445;
                        case 5:
                            goto LABEL_474;
                        case 6:
                            goto LABEL_503;
                        case 7:
                        case 11:
                            goto LABEL_564;
                        case 8:
                            goto LABEL_595;
                        case 9:
                        case 10:
                            goto LABEL_658;
                        case 12:
                            goto LABEL_721;
                        case 13:
                            goto LABEL_752;
                        case 14:
                            goto LABEL_783;
                        case 15:
                            goto LABEL_812;
                        case 16:
                            goto LABEL_841;
                        case 17:
                            goto LABEL_870;
                        case 18:
                            goto LABEL_899;
                        case 19:
                            goto LABEL_930;
                        case 20:
                            goto LABEL_961;
                        case 21:
                            goto LABEL_992;
                        case 22:
                            goto LABEL_1023;
                        case 23:
                            goto LABEL_1086;
                        case 24:
                            goto LABEL_1149;
                        case 25:
                            goto LABEL_1212;
                        case 26:
                            goto LABEL_1275;
                        }
                    }
                    do
                    {
                        *v99 = v98;
                        v98 += v1087;
                        v99[1] = v96;
                        v96 += v1083;
                        v99[4] = v97;
                        v97 += v1131;
                        v99 += 5;
                        --v1095;
                    } while (v1095);
                    v29 = (unsigned __int8)byte_967E1;
                    switch (byte_967E1)
                    {
                    case 0:
                        goto LABEL_309;
                    case 1:
                        goto LABEL_322;
                    case 2:
                        goto LABEL_351;
                    case 3:
                        goto LABEL_382;
                    case 4:
                        goto LABEL_445;
                    case 5:
                        goto LABEL_474;
                    case 6:
                        goto LABEL_503;
                    case 7:
                    case 11:
                        goto LABEL_564;
                    case 8:
                        goto LABEL_595;
                    case 9:
                    case 10:
                        goto LABEL_658;
                    case 12:
                        goto LABEL_721;
                    case 13:
                        goto LABEL_752;
                    case 14:
                        goto LABEL_783;
                    case 15:
                        goto LABEL_812;
                    case 16:
                        goto LABEL_841;
                    case 17:
                        goto LABEL_870;
                    case 18:
                        goto LABEL_899;
                    case 19:
                        goto LABEL_930;
                    case 20:
                        goto LABEL_961;
                    case 21:
                        goto LABEL_992;
                    case 22:
                        goto LABEL_1023;
                    case 23:
                        goto LABEL_1086;
                    case 24:
                        goto LABEL_1149;
                    case 25:
                        goto LABEL_1212;
                    case 26:
                        goto LABEL_1275;
                    }
                }
                v1089 += v1174;
                v95 += v1079 * v1144;
                v96 += v1144 * v1083;
                v97 += v1144 * v1125;
                if (v1284)
                {
                    ySum = heightViewPort_93ADC;
                    if (v1280)
                    {
                        v1089 = heightViewPort_93ADC;
                    }
                    else
                    {
                        v1280 = heightViewPort_93ADC <= v1089;
                        v1095 = heightViewPort_93ADC - v1089;
                    }
                }
            }
            else if (v1284)
            {
                v100 = heightViewPort_93ADC - v1174;
                ySum = heightViewPort_93ADC - v1174;
                if (v1280)
                {
                    v1089 = heightViewPort_93ADC - v1174;
                }
                else
                {
                    v27 = __OFSUB__(v100, v1089);
                    v101 = v100 - v1089;
                    v1280 = (v101 < 0) ^ v27 | (v101 == 0);
                    v1095 = v101;
                }
            }
            v99 = (uint32*)&unk_93AE0;
            do
            {
                *v99 = v95;
                v95 += v1079;
                v99[1] = v96;
                v96 += v1083;
                v99[4] = v97;
                v97 += v1125;
                v99 += 5;
                --v1089;
            } while (v1089);
            v98 = v1097;
            goto LABEL_198;
        case 2:
        case 3:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 18:
        case 19:
        case 22:
        case 23:
            v78 = v1089 * (__int64)(sortPnt2->x_0 - sortPnt1->x_0) / v63;
            v79 = sortPnt1->x_0 - sortPnt3->x_0;
            v80 = v78 + v79 == 0;
            v16 = (v78 + v79 < 0) ^ __OFADD__(v78, v79);
            v81 = v78 + v79;
            if (v16)
                return;
            if (!v80)
            {
                v82 = v81 + 1;
                scaledU = (int)(sortPnt1->u_2 + v1089 * (__int64)(sortPnt2->u_2 - sortPnt1->u_2) / v1093 - sortPnt3->u_2) / v82;
                scaledV = (int)(sortPnt1->v_3 + v1089 * (__int64)(sortPnt2->v_3 - sortPnt1->v_3) / v1093 - sortPnt3->v_3) / v82;
            }
            v1103 = (sortPnt3->u_2 - sortPnt1->u_2) / v1089;
            v1114 = (sortPnt3->v_3 - sortPnt1->v_3) / v1089;
            v1109 = (sortPnt2->u_2 - sortPnt3->u_2) / v1095;
            v1120 = (sortPnt2->v_3 - sortPnt3->v_3) / v1095;
            v83 = sortPnt1->x_0 << 16;
            v84 = v83;
            v85 = sortPnt1->u_2;
            v86 = sortPnt1->v_3;
            if (v1276)
            {
                v16 = ySum <= -v1174;
                ySum += v1174;
                if (v16)
                    return;
                v1142 = -v1174;
                if (-v1174 - v1089 >= 0)
                {
                    v1143 = v1142 - v1089;
                    v1095 -= v1143;
                    v87 = v1087 * v1143 + v1097;
                    v84 += v1143 * v1083 + v1089 * v1083;
                    v85 += v1143 * v1109 + v1089 * v1103;
                    v86 += v1143 * v1120 + v1089 * v1114;
                    if (v1284)
                    {
                        v1095 = heightViewPort_93ADC;
                        ySum = heightViewPort_93ADC;
                    }
                    v88 = (uint32*)&unk_93AE0;
                LABEL_174:
                    if (v1280)
                    {
                        v29 = (unsigned __int8)byte_967E1;
                        switch (byte_967E1)
                        {
                        case 0:
                            goto LABEL_309;
                        case 1:
                            goto LABEL_322;
                        case 2:
                            goto LABEL_351;
                        case 3:
                            goto LABEL_382;
                        case 4:
                            goto LABEL_445;
                        case 5:
                            goto LABEL_474;
                        case 6:
                            goto LABEL_503;
                        case 7:
                        case 11:
                            goto LABEL_564;
                        case 8:
                            goto LABEL_595;
                        case 9:
                        case 10:
                            goto LABEL_658;
                        case 12:
                            goto LABEL_721;
                        case 13:
                            goto LABEL_752;
                        case 14:
                            goto LABEL_783;
                        case 15:
                            goto LABEL_812;
                        case 16:
                            goto LABEL_841;
                        case 17:
                            goto LABEL_870;
                        case 18:
                            goto LABEL_899;
                        case 19:
                            goto LABEL_930;
                        case 20:
                            goto LABEL_961;
                        case 21:
                            goto LABEL_992;
                        case 22:
                            goto LABEL_1023;
                        case 23:
                            goto LABEL_1086;
                        case 24:
                            goto LABEL_1149;
                        case 25:
                            goto LABEL_1212;
                        case 26:
                            goto LABEL_1275;
                        }
                    }
                    do
                    {
                        *v88 = v87;
                        v87 += v1087;
                        v88[1] = v84;
                        v84 += v1083;
                        v88[2] = v85;
                        v85 += v1109;
                        v88[3] = v86;
                        v86 += v1120;
                        v88 += 5;
                        --v1095;
                    } while (v1095);
                    v29 = (unsigned __int8)byte_967E1;
                    switch (byte_967E1)
                    {
                    case 0:
                        goto LABEL_309;
                    case 1:
                        goto LABEL_322;
                    case 2:
                        goto LABEL_351;
                    case 3:
                        goto LABEL_382;
                    case 4:
                        goto LABEL_445;
                    case 5:
                        goto LABEL_474;
                    case 6:
                        goto LABEL_503;
                    case 7:
                    case 11:
                        goto LABEL_564;
                    case 8:
                        goto LABEL_595;
                    case 9:
                    case 10:
                        goto LABEL_658;
                    case 12:
                        goto LABEL_721;
                    case 13:
                        goto LABEL_752;
                    case 14:
                        goto LABEL_783;
                    case 15:
                        goto LABEL_812;
                    case 16:
                        goto LABEL_841;
                    case 17:
                        goto LABEL_870;
                    case 18:
                        goto LABEL_899;
                    case 19:
                        goto LABEL_930;
                    case 20:
                        goto LABEL_961;
                    case 21:
                        goto LABEL_992;
                    case 22:
                        goto LABEL_1023;
                    case 23:
                        goto LABEL_1086;
                    case 24:
                        goto LABEL_1149;
                    case 25:
                        goto LABEL_1212;
                    case 26:
                        goto LABEL_1275;
                    }
                }
                v1089 += v1174;
                v83 += v1079 * v1142;
                v84 += v1142 * v1083;
                v85 += v1142 * v1103;
                v86 += v1142 * v1114;
                if (v1284)
                {
                    ySum = heightViewPort_93ADC;
                    if (v1280)
                    {
                        v1089 = heightViewPort_93ADC;
                    }
                    else
                    {
                        v1280 = heightViewPort_93ADC <= v1089;
                        v1095 = heightViewPort_93ADC - v1089;
                    }
                }
            }
            else if (v1284)
            {
                v89 = heightViewPort_93ADC - v1174;
                ySum = heightViewPort_93ADC - v1174;
                if (v1280)
                {
                    v1089 = heightViewPort_93ADC - v1174;
                }
                else
                {
                    v27 = __OFSUB__(v89, v1089);
                    v90 = v89 - v1089;
                    v1280 = (v90 < 0) ^ v27 | (v90 == 0);
                    v1095 = v90;
                }
            }
            v88 = (uint32*)&unk_93AE0;
            do
            {
                v88[0] = v83;
                v83 += v1079;
                v88[1] = v84;
                v84 += v1083;
                v88[2] = v85;
                v85 += v1103;
                v88[3] = v86;
                v86 += v1114;
                v88 += 5;
                --v1089;
            } while (v1089);
            v87 = v1097;
            goto LABEL_174;
        case 5:
        case 6:
        case 20:
        case 21:
        case 24:
        case 25:
        case 26:
            v64 = v1089 * (__int64)(sortPnt2->x_0 - sortPnt1->x_0) / v63;
            v65 = sortPnt1->x_0 - sortPnt3->x_0;
            v66 = v64 + v65 == 0;
            v16 = (v64 + v65 < 0) ^ __OFADD__(v64, v65);
            v67 = v64 + v65;
            if (v16)
                return;
            if (!v66)
            {
                v68 = v67 + 1;
                scaledU = (int)(sortPnt1->u_2 + v1089 * (__int64)(sortPnt2->u_2 - sortPnt1->u_2) / v1093 - sortPnt3->u_2) / v68;
                scaledV = (int)(sortPnt1->v_3 + v1089 * (__int64)(sortPnt2->v_3 - sortPnt1->v_3) / v1093 - sortPnt3->v_3) / v68;
                v64 = (int)(sortPnt1->z_4 + v1089 * (__int64)(sortPnt2->z_4 - sortPnt1->z_4) / v1093 - sortPnt3->z_4) / v68;
            }
            scaledZ = v64;
            v1102 = (sortPnt3->u_2 - sortPnt1->u_2) / v1089;
            v1113 = (sortPnt3->v_3 - sortPnt1->v_3) / v1089;
            v1124 = (sortPnt3->z_4 - sortPnt1->z_4) / v1089;
            v1108 = (sortPnt2->u_2 - sortPnt3->u_2) / v1095;
            v1119 = (sortPnt2->v_3 - sortPnt3->v_3) / v1095;
            v1130 = (sortPnt2->z_4 - sortPnt3->z_4) / v1095;
            v69 = sortPnt1->x_0 << 16;
            v70 = v69;
            v71 = sortPnt1->u_2;
            v72 = sortPnt1->v_3;
            v73 = sortPnt1->z_4;
            if (v1276)
            {
                v16 = ySum <= -v1174;
                ySum += v1174;
                if (v16)
                    return;
                v1140 = -v1174;
                if (-v1174 - v1089 >= 0)
                {
                    v1141 = v1140 - v1089;
                    v1095 -= v1141;
                    v74 = v1087 * v1141 + v1097;
                    v70 += v1141 * v1083 + v1089 * v1083;
                    v71 += v1141 * v1108 + v1089 * v1102;
                    v72 += v1141 * v1119 + v1089 * v1113;
                    v73 += v1141 * v1130 + v1089 * v1124;
                    if (v1284)
                    {
                        v1095 = heightViewPort_93ADC;
                        ySum = heightViewPort_93ADC;
                    }
                    v75 = (uint32*)&unk_93AE0;
                LABEL_150:
                    if (v1280)
                    {
                        v29 = (unsigned __int8)byte_967E1;
                        switch (byte_967E1)
                        {
                        case 0:
                            goto LABEL_309;
                        case 1:
                            goto LABEL_322;
                        case 2:
                            goto LABEL_351;
                        case 3:
                            goto LABEL_382;
                        case 4:
                            goto LABEL_445;
                        case 5:
                            goto LABEL_474;
                        case 6:
                            goto LABEL_503;
                        case 7:
                        case 11:
                            goto LABEL_564;
                        case 8:
                            goto LABEL_595;
                        case 9:
                        case 10:
                            goto LABEL_658;
                        case 12:
                            goto LABEL_721;
                        case 13:
                            goto LABEL_752;
                        case 14:
                            goto LABEL_783;
                        case 15:
                            goto LABEL_812;
                        case 16:
                            goto LABEL_841;
                        case 17:
                            goto LABEL_870;
                        case 18:
                            goto LABEL_899;
                        case 19:
                            goto LABEL_930;
                        case 20:
                            goto LABEL_961;
                        case 21:
                            goto LABEL_992;
                        case 22:
                            goto LABEL_1023;
                        case 23:
                            goto LABEL_1086;
                        case 24:
                            goto LABEL_1149;
                        case 25:
                            goto LABEL_1212;
                        case 26:
                            goto LABEL_1275;
                        }
                    }
                    do
                    {
                        *v75 = v74;
                        v74 += v1087;
                        v75[1] = v70;
                        v70 += v1083;
                        v75[2] = v71;
                        v71 += v1108;
                        v75[3] = v72;
                        v72 += v1119;
                        v75[4] = v73;
                        v73 += v1130;
                        v75 += 5;
                        --v1095;
                    } while (v1095);
                    v29 = (unsigned __int8)byte_967E1;
                    switch (byte_967E1)
                    {
                    case 0:
                        goto LABEL_309;
                    case 1:
                        goto LABEL_322;
                    case 2:
                        goto LABEL_351;
                    case 3:
                        goto LABEL_382;
                    case 4:
                        goto LABEL_445;
                    case 5:
                        goto LABEL_474;
                    case 6:
                        goto LABEL_503;
                    case 7:
                    case 11:
                        goto LABEL_564;
                    case 8:
                        goto LABEL_595;
                    case 9:
                    case 10:
                        goto LABEL_658;
                    case 12:
                        goto LABEL_721;
                    case 13:
                        goto LABEL_752;
                    case 14:
                        goto LABEL_783;
                    case 15:
                        goto LABEL_812;
                    case 16:
                        goto LABEL_841;
                    case 17:
                        goto LABEL_870;
                    case 18:
                        goto LABEL_899;
                    case 19:
                        goto LABEL_930;
                    case 20:
                        goto LABEL_961;
                    case 21:
                        goto LABEL_992;
                    case 22:
                        goto LABEL_1023;
                    case 23:
                        goto LABEL_1086;
                    case 24:
                        goto LABEL_1149;
                    case 25:
                        goto LABEL_1212;
                    case 26:
                        goto LABEL_1275;
                    }
                }
                v1089 += v1174;
                v69 += v1079 * v1140;
                v70 += v1140 * v1083;
                v71 += v1140 * v1102;
                v72 += v1140 * v1113;
                v73 += v1140 * v1124;
                if (v1284)
                {
                    ySum = heightViewPort_93ADC;
                    if (v1280)
                    {
                        v1089 = heightViewPort_93ADC;
                    }
                    else
                    {
                        v1280 = heightViewPort_93ADC <= v1089;
                        v1095 = heightViewPort_93ADC - v1089;
                    }
                }
            }
            else if (v1284)
            {
                v76 = heightViewPort_93ADC - v1174;
                ySum = heightViewPort_93ADC - v1174;
                if (v1280)
                {
                    v1089 = heightViewPort_93ADC - v1174;
                }
                else
                {
                    v27 = __OFSUB__(v76, v1089);
                    v77 = v76 - v1089;
                    v1280 = (v77 < 0) ^ v27 | (v77 == 0);
                    v1095 = v77;
                }
            }
            v75 = (uint32*)&unk_93AE0;
            do
            {
                v75[0] = v69;
                v69 += v1079;
                v75[1] = v70;
                v70 += v1083;
                v75[2] = v71;
                v71 += v1102;
                v75[3] = v72;
                v72 += v1113;
                v75[4] = v73;
                v73 += v1124;
                v75 += 5;
                --v1089;
            } while (v1089);
            v74 = v1097;
            goto LABEL_150;
        }
    }
}

int test_index = 0;
int tempCount;
//SYNCHRONIZED WITH REMC2
void DrawTriangle_729A3_72EB3(Type_RenderPoint* pnt1, Type_RenderPoint* pnt2, Type_RenderPoint* pnt3)//2439A3_ // draw textured triangle
{
    Type_RenderPoint* sortPnt1; // esi
    Type_RenderPoint* sortPnt2; // edi
    Type_RenderPoint* sortPnt3; // ecx
  //int32 v6; // eax
  //int32 v7; // ebx
  //int32 v8; // edx
  //int v9; // eax
  //int v10; // ebx
  //int v11; // ebx
  //int v12; // ebx
  int pnt21YxPnt13XdPnt31Y; // eax
  int diffSortPnt2Pnt1X; // ebx
  //bool bool15; // zf
  bool bool16; // cc
  //int v17; // ebx
  int v18; // ebx
  int xSum; // eax
  int ySum; // ebx
  int uSum; // ecx
  int vSum; // edx
  int zSum; // esi
  int ySumB; // ebx
  //_DWORD *v25; // edi
  //int v25x;
  //int v26; // edi
  _BOOL1 v27; // of
  int v28; // edi
  unsigned int v29; // eax
  int v30; // eax
  int v31; // ebx
  _BOOL1 v32; // zf
  int v33; // ebx
  int v34; // ebx
  //int v35; // eax
  //int v36; // ebx
  //int v37; // ecx
  //int v38; // edx
  //int v39; // ebx
  //_DWORD *v40; // edi
  //int v40x;
  int v41; // edi
  int v42; // edi
  int v43; // eax
  int v44; // ebx
  _BOOL1 v45; // zf
  int v46; // ebx
  //int x47; // eax
  //int v48; // ebx
  //int v49; // esi
  //int v50; // ebx
  //_DWORD *v51; // edi
  //int v51x;
  int v52; // edi
  int v53; // edi
  //int v54; // eax
  //int v55; // ebx
  //int v56; // ebx
  //_DWORD *v57; // edi
  int addIndexY;
  int v58; // edi
  int v59; // edi
  //int v60; // eax
  //int v61; // ebx
  //int v62; // ebx
  //int v63; // ebx
  int v64; // eax
  int v65; // ebx
  //_BOOL1 v66; // zf
  int v67; // ebx
  int v68; // ebx
  int v69; // eax
  int v70; // ebx
  int v71; // ecx
  int v72; // edx
  int v73; // esi
  int v74; // eax
  //_DWORD *v75; // edi
  int v75x;
  int v76; // edi
  int v77; // edi
  int v78; // eax
  int v79; // ebx
  _BOOL1 v80; // zf
  int v81; // ebx
  int v82; // ebx
  int v83; // eax
  int v84; // ebx
  int v85; // ecx
  int v86; // edx
  int v87; // eax
  //_DWORD *v88; // edi
  int v88x;
  int v89; // edi
  int v90; // edi
  int v91; // eax
  int v92; // ebx
  _BOOL1 v93; // zf
  int v94; // ebx
  int v95; // eax
  int v96; // ebx
  int v97; // esi
  int v98; // eax
  //_DWORD *v99; // edi
  int v99x;
  int v100; // edi
  int v101; // edi
  int v102; // eax
  int v103; // ebx
  int v104; // eax
  //_DWORD *v105; // edi
  int v105x;
  int v106; // edi
  int v107; // edi
  //int v108; // eax
  //int v109; // ebx
  int v110; // ebx
  //int v111; // eax
  //int v112; // ebx
  //int v113; // ecx
  //int v114; // edx
  //int v115; // esi
  int v116; // edi
  //_DWORD *v117; // edi
  //int v117x;
  int v118; // ebx
  //int v119; // eax
  //int v120; // ebx
  //int v121; // ecx
  //int v122; // edx
  int v123; // edi
  //_DWORD *v124; // edi
  //int v124x;
  //int v125; // eax
  //int v126; // ebx
  //int v127; // esi
  int v128; // edi
  //_DWORD *v129; // edi
  //int v129x;
  //int v130; // eax
  //int v131; // ebx
  int v132; // edi
  //_DWORD *v133; // edi
  //int v133x;
  //int v134; // eax
  //int v135; // ebx
  int v136; // ebx
  //int v137; // eax
  //int v138; // ebx
  //int v139; // ecx
  //int v140; // edx
  //int v141; // esi
  int v142; // edi
  //_DWORD *v143; // edi
  //int v143x;
  int v144; // ebx
  //int v145; // eax
  //int v146; // ebx
  //int v147; // ecx
  //int v148; // edx
  int v149; // edi
  //_DWORD *v150; // edi
  //int v150x;
  //int v151; // eax
  //int v152; // ebx
  //int v153; // esi
  int v154; // edi
  //_DWORD *v155; // edi
  //int v155x;
  //int v156; // eax
  //int v157; // ebx
  int v158; // edi
  //_DWORD *v159; // edi
  //int v159x;
  //unsigned __int16 *v160; // esi
  int v160x;
  uint8* tempScrPtr; // edx
  char v162; // al
  int v163; // ebx
  signed int v164; // ecx
  uint8* tempScrPtr2; // edi
  //_WORD *i; // esi
  int ix;
  int v167; // ecx
  //_BYTE *v168; // edi
  uint8* tempScrPtr4;
  unsigned int v169; // eax
  __int16 v170; // bx
  bool v171; // cf
  __int16 v172; // bx
  __int16 v173; // bx
  char v174; // ah
  __int16 v175; // cx
  __int16 v176; // bx
  char v177; // ah
  __int16 v178; // cx
  __int16 v179; // bx
  char v180; // ah
  __int16 v181; // cx
  __int16 v182; // bx
  char v183; // ah
  __int16 v184; // cx
  __int16 v185; // bx
  char v186; // ah
  __int16 v187; // cx
  __int16 v188; // bx
  char v189; // ah
  __int16 v190; // cx
  __int16 v191; // bx
  char v192; // ah
  __int16 v193; // cx
  __int16 v194; // bx
  char v195; // ah
  __int16 v196; // cx
  __int16 v197; // bx
  char v198; // ah
  __int16 v199; // cx
  __int16 v200; // bx
  char v201; // ah
  __int16 v202; // cx
  __int16 v203; // bx
  char v204; // ah
  __int16 v205; // cx
  __int16 v206; // bx
  char v207; // ah
  __int16 v208; // cx
  __int16 v209; // bx
  char v210; // ah
  __int16 v211; // cx
  __int16 v212; // bx
  char v213; // ah
  __int16 v214; // cx
  __int16 v215; // bx
  char v216; // ah
  __int16 v217; // cx
  //unsigned __int16 *v218; // esi
  int v218x;
  int v219; // eax
  int v220; // ebx
  int v221; // ecx
  uint8* tempScrPtr5; // edi
  int v223; // eax
  unsigned int v224; // eax
  int v225; // edx
  unsigned int v226; // eax
  int v227; // esi
  char v228; // al
  int v229; // edx
  __int16 v230; // cx
  char v231; // al
  int v232; // edx
  __int16 v233; // cx
  char v234; // al
  int v235; // edx
  __int16 v236; // cx
  char v237; // al
  int v238; // edx
  __int16 v239; // cx
  char v240; // al
  int v241; // edx
  __int16 v242; // cx
  char v243; // al
  int v244; // edx
  __int16 v245; // cx
  char v246; // al
  int v247; // edx
  __int16 v248; // cx
  char v249; // al
  int v250; // edx
  __int16 v251; // cx
  char v252; // al
  int v253; // edx
  __int16 v254; // cx
  char v255; // al
  int v256; // edx
  __int16 v257; // cx
  char v258; // al
  int v259; // edx
  __int16 v260; // cx
  char v261; // al
  int v262; // edx
  __int16 v263; // cx
  char v264; // al
  int v265; // edx
  __int16 v266; // cx
  char v267; // al
  int v268; // edx
  __int16 v269; // cx
  char v270; // al
  int v271; // edx
  __int16 v272; // cx
  char v273; // al
  //unsigned __int16 *v274; // esi
  int v274x;
  int v275; // eax
  int v276; // ebx
  int v277; // ecx
  uint8* tempScrPtr6; // edi
  int v279; // eax
  unsigned int v280; // eax
  int v281; // edx
  unsigned int v282; // eax
  int v283; // esi
  char v284; // al
  int v285; // edx
  __int16 v286; // cx
  char v287; // al
  int v288; // edx
  __int16 v289; // cx
  char v290; // al
  int v291; // edx
  __int16 v292; // cx
  char v293; // al
  int v294; // edx
  __int16 v295; // cx
  char v296; // al
  int v297; // edx
  __int16 v298; // cx
  char v299; // al
  int v300; // edx
  __int16 v301; // cx
  char v302; // al
  int v303; // edx
  __int16 v304; // cx
  char v305; // al
  int v306; // edx
  __int16 v307; // cx
  char v308; // al
  int v309; // edx
  __int16 v310; // cx
  char v311; // al
  int v312; // edx
  __int16 v313; // cx
  char v314; // al
  int v315; // edx
  __int16 v316; // cx
  char v317; // al
  int v318; // edx
  __int16 v319; // cx
  char v320; // al
  int v321; // edx
  __int16 v322; // cx
  char v323; // al
  int v324; // edx
  __int16 v325; // cx
  char v326; // al
  int v327; // edx
  __int16 v328; // cx
  char v329; // al
  //_WORD *j; // esi
  int jx;
  int v331; // ecx
  uint8* tempScrPtr7; // edi
  unsigned int v333; // eax
  __int16 v334; // bx
  __int16 v335; // bx
  __int16 v336; // bx
  __int16 v337; // cx
  __int16 v338; // bx
  __int16 v339; // cx
  __int16 v340; // bx
  __int16 v341; // cx
  __int16 v342; // bx
  __int16 v343; // cx
  __int16 v344; // bx
  __int16 v345; // cx
  __int16 v346; // bx
  __int16 v347; // cx
  __int16 v348; // bx
  __int16 v349; // cx
  __int16 v350; // bx
  __int16 v351; // cx
  __int16 v352; // bx
  __int16 v353; // cx
  __int16 v354; // bx
  __int16 v355; // cx
  __int16 v356; // bx
  __int16 v357; // cx
  __int16 v358; // bx
  __int16 v359; // cx
  __int16 v360; // bx
  __int16 v361; // cx
  __int16 v362; // bx
  __int16 v363; // cx
  __int16 v364; // bx
  __int16 v365; // cx
  Type_dword_0x0_0 textPixel; // eax
  Type_dword_0x0_0 textPos; // ebx
  //char *v368; // esi
  int16 temp93AE0_Y1_1; // ecx
  uint8* tempScrPtr3; // edi
  int textIndex; // ecx
  Type_dword_0x0_0 preTextPos; // edx
  un16_32 tempScrPosX; // ecx
  //__int16 v374; // cx
  //__int16 v375; // bp
  uint8* tempScrPtr3plus; // edi
  uint8* tempTexture; // ebp
  unsigned int v378; // eax
  int v379; // ebx
  //char *v380; // esi
  int v380x;
  int v381; // ecx
  uint8* tempScrPtr8; // edi
  int v383; // ecx
  int v384; // edx
  int v385; // ecx
  __int16 v386; // cx
  __int16 v387; // bp
  uint8* tempScrPtr8plus; // edi
  int v389; // ebp
  //unsigned __int16 *v390; // esi
  int v390x;
  int v391; // eax
  int v392; // ebx
  int v393; // ecx
  uint8* tempScrPtr9; // edi
  int v395; // eax
  unsigned int v396; // eax
  int v397; // edx
  unsigned int v398; // eax
  int v399; // esi
  int v400; // edx
  __int16 v401; // cx
  int v402; // edx
  __int16 v403; // cx
  int v404; // edx
  __int16 v405; // cx
  int v406; // edx
  __int16 v407; // cx
  int v408; // edx
  __int16 v409; // cx
  int v410; // edx
  __int16 v411; // cx
  int v412; // edx
  __int16 v413; // cx
  int v414; // edx
  __int16 v415; // cx
  int v416; // edx
  __int16 v417; // cx
  int v418; // edx
  __int16 v419; // cx
  int v420; // edx
  __int16 v421; // cx
  int v422; // edx
  __int16 v423; // cx
  int v424; // edx
  __int16 v425; // cx
  int v426; // edx
  __int16 v427; // cx
  int v428; // edx
  __int16 v429; // cx
  //unsigned __int16 *v430; // esi
  int v430x;
  int v431; // eax
  int v432; // ebx
  int v433; // ecx
  uint8* tempScrPtr10; // edi
  int v435; // eax
  unsigned int v436; // eax
  int v437; // edx
  unsigned int v438; // eax
  int v439; // esi
  int v440; // edx
  __int16 v441; // cx
  int v442; // edx
  __int16 v443; // cx
  int v444; // edx
  __int16 v445; // cx
  int v446; // edx
  __int16 v447; // cx
  int v448; // edx
  __int16 v449; // cx
  int v450; // edx
  __int16 v451; // cx
  int v452; // edx
  __int16 v453; // cx
  int v454; // edx
  __int16 v455; // cx
  int v456; // edx
  __int16 v457; // cx
  int v458; // edx
  __int16 v459; // cx
  int v460; // edx
  __int16 v461; // cx
  int v462; // edx
  __int16 v463; // cx
  int v464; // edx
  __int16 v465; // cx
  int v466; // edx
  __int16 v467; // cx
  int v468; // edx
  __int16 v469; // cx
  //unsigned __int16 *v470; // esi
  int v470x;
  int v471; // eax
  int v472; // ebx
  int v473; // ecx
  uint8* tempScrPtr11; // edi
  int v475; // eax
  unsigned int v476; // eax
  int v477; // edx
  unsigned int v478; // eax
  int v479; // esi
  int v480; // edx
  __int16 v481; // cx
  int v482; // edx
  __int16 v483; // cx
  int v484; // edx
  __int16 v485; // cx
  int v486; // edx
  __int16 v487; // cx
  int v488; // edx
  __int16 v489; // cx
  int v490; // edx
  __int16 v491; // cx
  int v492; // edx
  __int16 v493; // cx
  int v494; // edx
  __int16 v495; // cx
  int v496; // edx
  __int16 v497; // cx
  int v498; // edx
  __int16 v499; // cx
  int v500; // edx
  __int16 v501; // cx
  int v502; // edx
  __int16 v503; // cx
  int v504; // edx
  __int16 v505; // cx
  int v506; // edx
  __int16 v507; // cx
  int v508; // edx
  __int16 v509; // cx
  //unsigned __int16 *v510; // esi
  int v510x;
  int v511; // eax
  int v512; // ebx
  int v513; // ecx
  uint8* tempScrPtr12; // edi
  int v515; // eax
  unsigned int v516; // eax
  int v517; // edx
  unsigned int v518; // eax
  int v519; // esi
  int v520; // edx
  __int16 v521; // cx
  int v522; // edx
  __int16 v523; // cx
  int v524; // edx
  __int16 v525; // cx
  int v526; // edx
  __int16 v527; // cx
  int v528; // edx
  __int16 v529; // cx
  int v530; // edx
  __int16 v531; // cx
  int v532; // edx
  __int16 v533; // cx
  int v534; // edx
  __int16 v535; // cx
  int v536; // edx
  __int16 v537; // cx
  int v538; // edx
  __int16 v539; // cx
  int v540; // edx
  __int16 v541; // cx
  int v542; // edx
  __int16 v543; // cx
  int v544; // edx
  __int16 v545; // cx
  int v546; // edx
  __int16 v547; // cx
  int v548; // edx
  __int16 v549; // cx
  //unsigned __int16 *v550; // esi
  int v550x;
  int v551; // eax
  int v552; // ebx
  int v553; // ecx
  uint8* tempScrPtr13; // edi
  int v555; // eax
  unsigned int v556; // eax
  int v557; // edx
  unsigned int v558; // eax
  int v559; // esi
  int v560; // edx
  __int16 v561; // cx
  int v562; // edx
  __int16 v563; // cx
  int v564; // edx
  __int16 v565; // cx
  int v566; // edx
  __int16 v567; // cx
  int v568; // edx
  __int16 v569; // cx
  int v570; // edx
  __int16 v571; // cx
  int v572; // edx
  __int16 v573; // cx
  int v574; // edx
  __int16 v575; // cx
  int v576; // edx
  __int16 v577; // cx
  int v578; // edx
  __int16 v579; // cx
  int v580; // edx
  __int16 v581; // cx
  int v582; // edx
  __int16 v583; // cx
  int v584; // edx
  __int16 v585; // cx
  int v586; // edx
  __int16 v587; // cx
  int v588; // edx
  __int16 v589; // cx
  //unsigned __int16 *v590; // esi
  int v590x;
  uint8* tempScrPtr14; // edx
  int v592; // eax
  int v593; // ebx
  int v594; // ecx
  uint8* tempScrPtr14plus; // edi
  __int16 v596; // cx
  __int16 v597; // cx
  __int16 v598; // cx
  __int16 v599; // cx
  __int16 v600; // cx
  __int16 v601; // cx
  __int16 v602; // cx
  __int16 v603; // cx
  __int16 v604; // cx
  __int16 v605; // cx
  __int16 v606; // cx
  __int16 v607; // cx
  __int16 v608; // cx
  __int16 v609; // cx
  __int16 v610; // cx
  //unsigned __int16 *v611; // esi
  int v611x;
  uint8* tempScrPtr15; // edx
  int v613; // eax
  int v614; // ebx
  int v615; // ecx
  uint8* tempScrPtr15plus; // edi
  __int16 v617; // cx
  __int16 v618; // cx
  __int16 v619; // cx
  __int16 v620; // cx
  __int16 v621; // cx
  __int16 v622; // cx
  __int16 v623; // cx
  __int16 v624; // cx
  __int16 v625; // cx
  __int16 v626; // cx
  __int16 v627; // cx
  __int16 v628; // cx
  __int16 v629; // cx
  __int16 v630; // cx
  __int16 v631; // cx
  //unsigned __int16 *v632; // esi
  int v632x;
  int v633; // edx
  int v634; // ecx
  uint8* tempScrPtr16; // edi
  unsigned int v636; // eax
  __int16 v637; // bx
  unsigned __int16 v638; // bx
  __int16 v639; // bx
  __int16 v640; // cx
  __int16 v641; // bx
  __int16 v642; // cx
  __int16 v643; // bx
  __int16 v644; // cx
  __int16 v645; // bx
  __int16 v646; // cx
  __int16 v647; // bx
  __int16 v648; // cx
  __int16 v649; // bx
  __int16 v650; // cx
  __int16 v651; // bx
  __int16 v652; // cx
  __int16 v653; // bx
  __int16 v654; // cx
  __int16 v655; // bx
  __int16 v656; // cx
  __int16 v657; // bx
  __int16 v658; // cx
  __int16 v659; // bx
  __int16 v660; // cx
  __int16 v661; // bx
  __int16 v662; // cx
  __int16 v663; // bx
  __int16 v664; // cx
  __int16 v665; // bx
  __int16 v666; // cx
  __int16 v667; // bx
  __int16 v668; // cx
  //unsigned __int16 *v669; // esi
  int v669x;
  int v670; // edx
  int v671; // ecx
  uint8* tempScrPtr17; // edi
  unsigned int v673; // eax
  __int16 v674; // bx
  unsigned __int16 v675; // bx
  __int16 v676; // bx
  __int16 v677; // cx
  __int16 v678; // bx
  __int16 v679; // cx
  __int16 v680; // bx
  __int16 v681; // cx
  __int16 v682; // bx
  __int16 v683; // cx
  __int16 v684; // bx
  __int16 v685; // cx
  __int16 v686; // bx
  __int16 v687; // cx
  __int16 v688; // bx
  __int16 v689; // cx
  __int16 v690; // bx
  __int16 v691; // cx
  __int16 v692; // bx
  __int16 v693; // cx
  __int16 v694; // bx
  __int16 v695; // cx
  __int16 v696; // bx
  __int16 v697; // cx
  __int16 v698; // bx
  __int16 v699; // cx
  __int16 v700; // bx
  __int16 v701; // cx
  __int16 v702; // bx
  __int16 v703; // cx
  __int16 v704; // bx
  __int16 v705; // cx
  //unsigned __int16 *v706; // esi
  int v706x;
  int v707; // eax
  int v708; // ebx
  int v709; // ecx
  uint8* tempScrPtr18; // edi
  int v711; // eax
  unsigned int v712; // eax
  int v713; // edx
  unsigned int v714; // eax
  int v715; // esi
  int v716; // edx
  __int16 v717; // cx
  int v718; // edx
  __int16 v719; // cx
  int v720; // edx
  __int16 v721; // cx
  int v722; // edx
  __int16 v723; // cx
  int v724; // edx
  __int16 v725; // cx
  int v726; // edx
  __int16 v727; // cx
  int v728; // edx
  __int16 v729; // cx
  int v730; // edx
  __int16 v731; // cx
  int v732; // edx
  __int16 v733; // cx
  int v734; // edx
  __int16 v735; // cx
  int v736; // edx
  __int16 v737; // cx
  int v738; // edx
  __int16 v739; // cx
  int v740; // edx
  __int16 v741; // cx
  int v742; // edx
  __int16 v743; // cx
  int v744; // edx
  __int16 v745; // cx
  //unsigned __int16 *v746; // esi
  int v746x;
  int v747; // eax
  int v748; // ebx
  int v749; // ecx
  uint8* tempScrPtr19; // edi
  int v751; // eax
  unsigned int v752; // eax
  int v753; // edx
  unsigned int v754; // eax
  int v755; // esi
  int v756; // edx
  __int16 v757; // cx
  int v758; // edx
  __int16 v759; // cx
  int v760; // edx
  __int16 v761; // cx
  int v762; // edx
  __int16 v763; // cx
  int v764; // edx
  __int16 v765; // cx
  int v766; // edx
  __int16 v767; // cx
  int v768; // edx
  __int16 v769; // cx
  int v770; // edx
  __int16 v771; // cx
  int v772; // edx
  __int16 v773; // cx
  int v774; // edx
  __int16 v775; // cx
  int v776; // edx
  __int16 v777; // cx
  int v778; // edx
  __int16 v779; // cx
  int v780; // edx
  __int16 v781; // cx
  int v782; // edx
  __int16 v783; // cx
  int v784; // edx
  __int16 v785; // cx
  //unsigned __int16 *v786; // esi
  int v786x;
  unsigned int v787; // eax
  int v788; // ebx
  int v789; // ecx
  uint8* tempScrPtr20; // edi
  int v791; // ecx
  int v792; // edx
  int v793; // ecx
  int v794; // esi
  int v795; // edx
  int v796; // ecx
  int v797; // edx
  int v798; // ecx
  int v799; // edx
  int v800; // ecx
  int v801; // edx
  int v802; // ecx
  int v803; // edx
  int v804; // ecx
  int v805; // edx
  int v806; // ecx
  int v807; // edx
  int v808; // ecx
  int v809; // edx
  int v810; // ecx
  int v811; // edx
  int v812; // ecx
  int v813; // edx
  int v814; // ecx
  int v815; // edx
  int v816; // ecx
  int v817; // edx
  int v818; // ecx
  int v819; // edx
  int v820; // ecx
  int v821; // edx
  int v822; // ecx
  int v823; // edx
  int v824; // ecx
  //unsigned __int16 *v825; // esi
  int v825x;
  unsigned int v826; // eax
  int v827; // ebx
  int v828; // ecx
  uint8* tempScrPtr21; // edi
  int v830; // ecx
  int v831; // edx
  int v832; // ecx
  int v833; // esi
  int v834; // edx
  int v835; // ecx
  int v836; // edx
  int v837; // ecx
  int v838; // edx
  int v839; // ecx
  int v840; // edx
  int v841; // ecx
  int v842; // edx
  int v843; // ecx
  int v844; // edx
  int v845; // ecx
  int v846; // edx
  int v847; // ecx
  int v848; // edx
  int v849; // ecx
  int v850; // edx
  int v851; // ecx
  int v852; // edx
  int v853; // ecx
  int v854; // edx
  int v855; // ecx
  int v856; // edx
  int v857; // ecx
  int v858; // edx
  int v859; // ecx
  int v860; // edx
  int v861; // ecx
  int v862; // edx
  int v863; // ecx
  //unsigned __int16 *v864; // esi
  int v864x;
  int v865; // eax
  int v866; // ebx
  int v867; // ecx
  uint8* tempScrPtr22; // edi
  int v869; // eax
  unsigned int v870; // eax
  int v871; // edx
  unsigned int v872; // eax
  int v873; // esi
  int v874; // edx
  __int16 v875; // cx
  int v876; // edx
  __int16 v877; // cx
  int v878; // edx
  __int16 v879; // cx
  int v880; // edx
  __int16 v881; // cx
  int v882; // edx
  __int16 v883; // cx
  int v884; // edx
  __int16 v885; // cx
  int v886; // edx
  __int16 v887; // cx
  int v888; // edx
  __int16 v889; // cx
  int v890; // edx
  __int16 v891; // cx
  int v892; // edx
  __int16 v893; // cx
  int v894; // edx
  __int16 v895; // cx
  int v896; // edx
  __int16 v897; // cx
  int v898; // edx
  __int16 v899; // cx
  int v900; // edx
  __int16 v901; // cx
  int v902; // edx
  __int16 v903; // cx
  //unsigned __int16 *v904; // esi
  int v904x;
  int v905; // eax
  int v906; // ebx
  int v907; // ecx
  uint8* tempScrPtr23; // edi
  int v909; // eax
  unsigned int v910; // eax
  int v911; // edx
  unsigned int v912; // eax
  int v913; // esi
  int v914; // edx
  __int16 v915; // cx
  int v916; // edx
  __int16 v917; // cx
  int v918; // edx
  __int16 v919; // cx
  int v920; // edx
  __int16 v921; // cx
  int v922; // edx
  __int16 v923; // cx
  int v924; // edx
  __int16 v925; // cx
  int v926; // edx
  __int16 v927; // cx
  int v928; // edx
  __int16 v929; // cx
  int v930; // edx
  __int16 v931; // cx
  int v932; // edx
  __int16 v933; // cx
  int v934; // edx
  __int16 v935; // cx
  int v936; // edx
  __int16 v937; // cx
  int v938; // edx
  __int16 v939; // cx
  int v940; // edx
  __int16 v941; // cx
  int v942; // edx
  __int16 v943; // cx
  //unsigned __int16 *v944; // esi
  int v944x;
  unsigned int v945; // eax
  int v946; // ebx
  int v947; // ecx
  uint8* tempScrPtr24; // edi
  int v949; // ecx
  int v950; // edx
  int v951; // ecx
  int v952; // esi
  int v953; // edx
  int v954; // ecx
  int v955; // edx
  int v956; // ecx
  int v957; // edx
  int v958; // ecx
  int v959; // edx
  int v960; // ecx
  int v961; // edx
  int v962; // ecx
  int v963; // edx
  int v964; // ecx
  int v965; // edx
  int v966; // ecx
  int v967; // edx
  int v968; // ecx
  int v969; // edx
  int v970; // ecx
  int v971; // edx
  int v972; // ecx
  int v973; // edx
  int v974; // ecx
  int v975; // edx
  int v976; // ecx
  int v977; // edx
  int v978; // ecx
  int v979; // edx
  int v980; // ecx
  int v981; // edx
  int v982; // ecx
  //unsigned __int16 *v983; // esi
  int v983x;
  unsigned int v984; // eax
  int v985; // ebx
  int v986; // ecx
  uint8* tempScrPtr25; // edi
  int v988; // ecx
  int v989; // edx
  int v990; // ecx
  int v991; // esi
  int v992; // edx
  int v993; // ecx
  int v994; // edx
  int v995; // ecx
  int v996; // edx
  int v997; // ecx
  int v998; // edx
  int v999; // ecx
  int v1000; // edx
  int v1001; // ecx
  int v1002; // edx
  int v1003; // ecx
  int v1004; // edx
  int v1005; // ecx
  int v1006; // edx
  int v1007; // ecx
  int v1008; // edx
  int v1009; // ecx
  int v1010; // edx
  int v1011; // ecx
  int v1012; // edx
  int v1013; // ecx
  int v1014; // edx
  int v1015; // ecx
  int v1016; // edx
  int v1017; // ecx
  int v1018; // edx
  int v1019; // ecx
  int v1020; // edx
  int v1021; // ecx
  //unsigned __int16 *v1022; // esi
  int v1022x;
  unsigned int v1023; // eax
  int v1024; // ebx
  int v1025; // ecx
  uint8* tempScrPtr26; // edi
  int v1027; // ecx
  int v1028; // edx
  int v1029; // ecx
  int v1030; // esi
  char v1031; // al
  int v1032; // edx
  int v1033; // ecx
  char v1034; // al
  int v1035; // edx
  int v1036; // ecx
  char v1037; // al
  int v1038; // edx
  int v1039; // ecx
  char v1040; // al
  int v1041; // edx
  int v1042; // ecx
  char v1043; // al
  int v1044; // edx
  int v1045; // ecx
  char v1046; // al
  int v1047; // edx
  int v1048; // ecx
  char v1049; // al
  int v1050; // edx
  int v1051; // ecx
  char v1052; // al
  int v1053; // edx
  int v1054; // ecx
  char v1055; // al
  int v1056; // edx
  int v1057; // ecx
  char v1058; // al
  int v1059; // edx
  int v1060; // ecx
  char v1061; // al
  int v1062; // edx
  int v1063; // ecx
  char v1064; // al
  int v1065; // edx
  int v1066; // ecx
  char v1067; // al
  int v1068; // edx
  int v1069; // ecx
  char v1070; // al
  int v1071; // edx
  int v1072; // ecx
  char v1073; // al
  int v1074; // edx
  int v1075; // ecx
  char v1076; // al
  uint8* actScrPtr; // [esp+0h] [ebp-88h]
  int divSPnt3SPnt1XY; // [esp+4h] [ebp-84h]
  int v1079; // [esp+4h] [ebp-84h]
  //int v1080; // [esp+4h] [ebp-84h]
  //int v1081; // [esp+4h] [ebp-84h]
  int divSPnt2SPnt1XY; // [esp+8h] [ebp-80h]
  //int divSPnt2SPnt1XY; // [esp+8h] [ebp-80h]
  //int v1084; // [esp+8h] [ebp-80h]
  //int v1085; // [esp+8h] [ebp-80h]
  int divSPnt3SPnt2XY; // [esp+Ch] [ebp-7Ch]
  int divPnt2Pnt3XY; // [esp+Ch] [ebp-7Ch]
  int diffSPnt3SPnt1Y; // [esp+10h] [ebp-78h]
  //int v1089; // [esp+10h] [ebp-78h]
  //int v1090; // [esp+10h] [ebp-78h]
  //int v1091; // [esp+10h] [ebp-78h]
  int diffSPnt2SPnt1Y; // [esp+14h] [ebp-74h]
  //int v1093; // [esp+14h] [ebp-74h]
  int diffSPnt3SPnt2Y; // [esp+18h] [ebp-70h]
  int diffPnt2Pnt3Y; // [esp+18h] [ebp-70h]
  //int v1096; // [esp+1Ch] [ebp-6Ch]
  //int v1097; // [esp+1Ch] [ebp-6Ch]
  int ySum_C; // [esp+20h] [ebp-68h]
  Type_dword_0x0_0 scaledU; // [esp+24h] [ebp-64h]
  int divPnt3Pnt1UY; // [esp+28h] [ebp-60h]
  int divSPnt3SPnt2UY; // [esp+28h] [ebp-60h]
  int divSPnt3SPnt1UY; // [esp+28h] [ebp-60h]
  int v1103; // [esp+28h] [ebp-60h]
  //int v1104; // [esp+28h] [ebp-60h]
  //int v1105; // [esp+28h] [ebp-60h]
  //int v1106; // [esp+28h] [ebp-60h]
  //int v1107; // [esp+28h] [ebp-60h]
  int divSPnt2SPnt3UY; // [esp+2Ch] [ebp-5Ch]
  int v1109; // [esp+2Ch] [ebp-5Ch]
  Type_dword_0x0_0 scaledV; // [esp+30h] [ebp-58h]
  int divPnt3Pnt1VY; // [esp+34h] [ebp-54h]
  int divSPnt3SPnt2VY; // [esp+34h] [ebp-54h]
  int divSPnt3SPnt1VY; // [esp+34h] [ebp-54h]
  int v1114; // [esp+34h] [ebp-54h]
  //int v1115; // [esp+34h] [ebp-54h]
  //int v1116; // [esp+34h] [ebp-54h]
  //int v1117; // [esp+34h] [ebp-54h]
  //int v1118; // [esp+34h] [ebp-54h]
  int divSPnt2SPnt3VY; // [esp+38h] [ebp-50h]
  int v1120; // [esp+38h] [ebp-50h]
  Type_dword_0x0_0 scaledZ; // [esp+3Ch] [ebp-4Ch]
  int divPnt3Pnt1ZY; // [esp+40h] [ebp-48h]
  //int v1123; // [esp+40h] [ebp-48h]
  int divSPnt3SPnt1ZY; // [esp+40h] [ebp-48h]
  int v1125; // [esp+40h] [ebp-48h]
  //int v1126; // [esp+40h] [ebp-48h]
  //int v1127; // [esp+40h] [ebp-48h]
  //int v1128; // [esp+40h] [ebp-48h]
  //int v1129; // [esp+40h] [ebp-48h]
  int divSPnt2SPnt3ZY; // [esp+44h] [ebp-44h]
  int v1131; // [esp+44h] [ebp-44h]
  //int v1132; // [esp+48h] [ebp-40h]
  int v1133; // [esp+48h] [ebp-40h]
  int v1134; // [esp+48h] [ebp-40h]
  int v1135; // [esp+48h] [ebp-40h]
  int v1136; // [esp+48h] [ebp-40h]
  int v1137; // [esp+48h] [ebp-40h]
  //int v1138; // [esp+48h] [ebp-40h]
  int v1139; // [esp+48h] [ebp-40h]
  int v1140; // [esp+48h] [ebp-40h]
  int v1141; // [esp+48h] [ebp-40h]
  int v1142; // [esp+48h] [ebp-40h]
  int v1143; // [esp+48h] [ebp-40h]
  int v1144; // [esp+48h] [ebp-40h]
  int v1145; // [esp+48h] [ebp-40h]
  //int v1146; // [esp+48h] [ebp-40h]
  int v1147; // [esp+48h] [ebp-40h]
  int v1148; // [esp+4Ch] [ebp-3Ch]
  int v1149; // [esp+4Ch] [ebp-3Ch]
  Type_dword_0x0_0 scaledVB; // [esp+4Ch] [ebp-3Ch]
  int v1151; // [esp+4Ch] [ebp-3Ch]
  int v1152; // [esp+4Ch] [ebp-3Ch]
  int v1153; // [esp+4Ch] [ebp-3Ch]
  int v1154; // [esp+4Ch] [ebp-3Ch]
  int v1155; // [esp+4Ch] [ebp-3Ch]
  int v1156; // [esp+4Ch] [ebp-3Ch]
  int v1157; // [esp+4Ch] [ebp-3Ch]
  int v1158; // [esp+4Ch] [ebp-3Ch]
  int v1159; // [esp+4Ch] [ebp-3Ch]
  int v1160; // [esp+4Ch] [ebp-3Ch]
  int v1161; // [esp+4Ch] [ebp-3Ch]
  int v1162; // [esp+4Ch] [ebp-3Ch]
  int v1163; // [esp+4Ch] [ebp-3Ch]
  int v1164; // [esp+4Ch] [ebp-3Ch]
  int v1165; // [esp+4Ch] [ebp-3Ch]
  int scaledZB; // [esp+50h] [ebp-38h]
  int v1167; // [esp+50h] [ebp-38h]
  int v1168; // [esp+50h] [ebp-38h]
  int v1169; // [esp+50h] [ebp-38h]
  int v1170; // [esp+50h] [ebp-38h]
  int v1171; // [esp+50h] [ebp-38h]
  int v1172; // [esp+50h] [ebp-38h]
  //int v1173; // [esp+54h] [ebp-34h]
  //int v1174; // [esp+54h] [ebp-34h]
  //int v1175; // [esp+54h] [ebp-34h]
  int v1176; // [esp+54h] [ebp-34h]
  int v1177; // [esp+58h] [ebp-30h]
  int v1178; // [esp+58h] [ebp-30h]
  int v1179; // [esp+58h] [ebp-30h]
  int v1180; // [esp+58h] [ebp-30h]
  int v1181; // [esp+58h] [ebp-30h]
  int v1182; // [esp+58h] [ebp-30h]
  int v1183; // [esp+58h] [ebp-30h]
  int v1184; // [esp+58h] [ebp-30h]
  int v1185; // [esp+58h] [ebp-30h]
  int v1186; // [esp+58h] [ebp-30h]
  int v1187; // [esp+58h] [ebp-30h]
  int v1188; // [esp+58h] [ebp-30h]
  int v1189; // [esp+58h] [ebp-30h]
  int v1190; // [esp+58h] [ebp-30h]
  int v1191; // [esp+58h] [ebp-30h]
  int v1192; // [esp+58h] [ebp-30h]
  int v1193; // [esp+58h] [ebp-30h]
  int v1194; // [esp+58h] [ebp-30h]
  int v1195; // [esp+58h] [ebp-30h]
  int v1196; // [esp+58h] [ebp-30h]
  int v1197; // [esp+58h] [ebp-30h]
  int v1198; // [esp+58h] [ebp-30h]
  int v1199; // [esp+58h] [ebp-30h]
  int v1200; // [esp+58h] [ebp-30h]
  int v1201; // [esp+58h] [ebp-30h]
  int v1202; // [esp+58h] [ebp-30h]
  int v1203; // [esp+58h] [ebp-30h]
  int v1204; // [esp+58h] [ebp-30h]
  int v1205; // [esp+58h] [ebp-30h]
  int v1206; // [esp+58h] [ebp-30h]
  int v1207; // [esp+58h] [ebp-30h]
  int v1208; // [esp+58h] [ebp-30h]
  int v1209; // [esp+58h] [ebp-30h]
  int v1210; // [esp+58h] [ebp-30h]
  int v1211; // [esp+58h] [ebp-30h]
  int v1212; // [esp+58h] [ebp-30h]
  int v1213; // [esp+58h] [ebp-30h]
  int v1214; // [esp+58h] [ebp-30h]
  int v1215; // [esp+58h] [ebp-30h]
  int v1216; // [esp+58h] [ebp-30h]
  int v1217; // [esp+58h] [ebp-30h]
  int v1218; // [esp+58h] [ebp-30h]
  int v1219; // [esp+58h] [ebp-30h]
  int v1220; // [esp+58h] [ebp-30h]
  int v1221; // [esp+58h] [ebp-30h]
  int v1222; // [esp+58h] [ebp-30h]
  int v1223; // [esp+58h] [ebp-30h]
  int v1224; // [esp+58h] [ebp-30h]
  int v1225; // [esp+58h] [ebp-30h]
  int v1226; // [esp+58h] [ebp-30h]
  int v1227; // [esp+58h] [ebp-30h]
  int v1228; // [esp+58h] [ebp-30h]
  int v1229; // [esp+58h] [ebp-30h]
  int v1230; // [esp+58h] [ebp-30h]
  int v1231; // [esp+58h] [ebp-30h]
  int v1232; // [esp+58h] [ebp-30h]
  int v1233; // [esp+58h] [ebp-30h]
  int v1234; // [esp+58h] [ebp-30h]
  int v1235; // [esp+58h] [ebp-30h]
  int v1236; // [esp+58h] [ebp-30h]
  int v1237; // [esp+58h] [ebp-30h]
  int v1238; // [esp+58h] [ebp-30h]
  int v1239; // [esp+58h] [ebp-30h]
  int v1240; // [esp+58h] [ebp-30h]
  int v1241; // [esp+58h] [ebp-30h]
  int v1242; // [esp+58h] [ebp-30h]
  int v1243; // [esp+58h] [ebp-30h]
  int v1244; // [esp+58h] [ebp-30h]
  int v1245; // [esp+58h] [ebp-30h]
  int v1246; // [esp+58h] [ebp-30h]
  int v1247; // [esp+58h] [ebp-30h]
  int v1248; // [esp+58h] [ebp-30h]
  int v1249; // [esp+58h] [ebp-30h]
  int v1250; // [esp+58h] [ebp-30h]
  int v1251; // [esp+58h] [ebp-30h]
  int v1252; // [esp+58h] [ebp-30h]
  int v1253; // [esp+58h] [ebp-30h]
  int v1254; // [esp+58h] [ebp-30h]
  int v1255; // [esp+58h] [ebp-30h]
  int v1256; // [esp+58h] [ebp-30h]
  //unsigned __int16 *v1257; // [esp+5Ch] [ebp-2Ch]
  int v1257x;
  //unsigned __int16 *v1258; // [esp+5Ch] [ebp-2Ch]
  int v1258x;
  //char *v1259; // [esp+5Ch] [ebp-2Ch]
  int v1259y;
  //char *v1260; // [esp+5Ch] [ebp-2Ch]
  int v1260x;
  //unsigned __int16 *v1261; // [esp+5Ch] [ebp-2Ch]
  int v1261x;
  //unsigned __int16 *v1262; // [esp+5Ch] [ebp-2Ch]
  int v1262x;
  //unsigned __int16 *v1263; // [esp+5Ch] [ebp-2Ch]
  int v1263x;
  //unsigned __int16 *v1264; // [esp+5Ch] [ebp-2Ch]
  int v1264x;
  //unsigned __int16 *v1265; // [esp+5Ch] [ebp-2Ch]
  int v1265x;
  //unsigned __int16 *v1266; // [esp+5Ch] [ebp-2Ch]
  int v1266x;
  //unsigned __int16 *v1267; // [esp+5Ch] [ebp-2Ch]
  int v1267x;
  //unsigned __int16 *v1268; // [esp+5Ch] [ebp-2Ch]
  int v1268x;
  //unsigned __int16 *v1269; // [esp+5Ch] [ebp-2Ch]
  int v1269x;
  //unsigned __int16 *v1270; // [esp+5Ch] [ebp-2Ch]
  int v1270x;
  //unsigned __int16 *v1271; // [esp+5Ch] [ebp-2Ch]
  int v1271x;
  //unsigned __int16 *v1272; // [esp+5Ch] [ebp-2Ch]
  int v1272x;
  //unsigned __int16 *v1273; // [esp+5Ch] [ebp-2Ch]
  int v1273x;
  //unsigned __int16 *v1274; // [esp+5Ch] [ebp-2Ch]
  int v1274x;
  bool sPnt1NotInView; // [esp+62h] [ebp-26h]
  //char v1276; // [esp+62h] [ebp-26h]
  char v1277; // [esp+62h] [ebp-26h]
  char v1278; // [esp+62h] [ebp-26h]
  bool sPnt2YAfterScr; // [esp+63h] [ebp-25h]
  //char v1280; // [esp+63h] [ebp-25h]
  _BOOL1 v1281; // [esp+63h] [ebp-25h]
  _BOOL1 v1282; // [esp+63h] [ebp-25h]
  bool sPnt3YAfterScr; // [esp+64h] [ebp-24h]
  //_BOOL1 sPnt2YAfterScr; // [esp+64h] [ebp-24h]

//  adress 2439A3_
//debug
#ifdef debug1
  if (compare_index_729A7 == 0xce3)
  {
      compare_index_729A7++;
      compare_index_729A7--;
  }
  #ifdef COMPARE_WITH
  CompareWith((char*)"fullframeTra1", 0, 12, (uint8*)pnt1);
  CompareWith((char*)"fullframeTr", 0, 320 * 200, (uint8*)begWscreen_2ECFF4_2ECFE4);
  #endif

  // dword_B5CA8_B5C98 273CA8

          uint8_t origbyte20 = 0;
          uint8_t remakebyte20 = 0;
          char buffer1[500];
          sprintf(buffer1, "%08X-00273CA8", 0x2439A7);
          //int comp20 = compare_with_sequence(buffer1, (uint8_t*)&dword_B5CA8_B5C98, 0x2439A7, compare_index_729A7 - 0, 4, 4, &origbyte20, &remakebyte20, 0, true);
  
  
  //add_compare(0x2439A7, true, true);
  //add_compare(0x2439A7, true, true, -1, false, 1000000, 0x2400);
  //uint8 origbyte20;
  //uint8 remakebyte20;
  //int comp20 = compare_with_sequence("002439C2-FFFFFFF4", (uint8_t*)&pnt1->y_1, 0x28A1E0, compare_index_729A7, 0x4, 0x4, &origbyte20, &remakebyte20, 0, 0);
  compare_index_729A7++;
#endif debug1

  //pnt1->var_0 = 0;
  //pnt1->var_1 = 0;

  //pnt1->var_1 = 0x80;
  //pnt2->var_1 = 0x80;
  //DrawTriangle_729A3_72EB3_semi(pnt1, pnt2, pnt3);

  //debug

  //fix
  bool16 = false;
  v27 = 0;
  v1022x = 0;
  scaledU.dword = 0;
  scaledV.dword = 0;
  scaledZ.dword = 0;
  //v51x = 0;
  addIndexY = 0;
  v390x = 0;

  Type_dword_0x0_0 tempU;
  Type_dword_0x0_0 tempV;
  Type_dword_0x0_0 tempZ;
  //fix

  sortPnt1 = pnt1;
  sortPnt2 = pnt2;
  sortPnt3 = pnt3;

  bool boolLabel24 = false;
  bool boolLabel124 = false;
  bool boolLabel225 = false;
  bool boolLabel268 = false;

  if (pnt1->y_1 == pnt2->y_1)
  {
      if (pnt1->y_1 == pnt3->y_1)
          return;
      if (pnt1->y_1 >= pnt3->y_1)
      {
          if (pnt1->x_0 <= pnt2->x_0)
              return;
          sortPnt1 = pnt3;
          sortPnt2 = pnt1;
          sortPnt3 = pnt2;
          boolLabel225 = true;
      }
      else
      {
          if (pnt2->x_0 <= pnt1->x_0)
              return;
          boolLabel268 = true;
      }
  }
  else if (pnt1->y_1 <= pnt2->y_1)
    {
        if (pnt1->y_1 != pnt3->y_1)
        {
            if (pnt1->y_1 >= pnt3->y_1)
            {
                sortPnt1 = pnt3;
                sortPnt2 = pnt1;
                sortPnt3 = pnt2;
                boolLabel24 = true;
            }
            else if(pnt2->y_1 != pnt3->y_1)
            {
                if (pnt2->y_1 <= pnt3->y_1)
                    boolLabel24 = true;
                else
                    boolLabel124 = true;
            }
            else if (pnt2->x_0 <= pnt3->x_0)
                return;
            else
                boolLabel225 = true;
        }
        else if (pnt1->x_0 <= pnt3->x_0)
            return;
        else
        {
            sortPnt1 = pnt3;
            sortPnt2 = pnt1;
            sortPnt3 = pnt2;
            boolLabel268 = true;
        }
    }
  else if (pnt1->y_1 == pnt3->y_1)
          {
              if (pnt3->x_0 <= pnt1->x_0)
                  return;
                sortPnt1 = pnt2;
                sortPnt2 = pnt3;
                sortPnt3 = pnt1;
                boolLabel225 = true;
          }
  else if (pnt1->y_1 < pnt3->y_1)
    {
        sortPnt1 = pnt2;
        sortPnt2 = pnt3;
        sortPnt3 = pnt1;
        boolLabel124 = true;
    }
  else if (pnt2->y_1 == pnt3->y_1)
    {
        if (pnt3->x_0 <= pnt2->x_0)
            return;
        sortPnt1 = pnt2;
        sortPnt2 = pnt3;
        sortPnt3 = pnt1;
        boolLabel268 = true;
    }
  else if (pnt2->y_1 < pnt3->y_1)
    {
        sortPnt1 = pnt2;
        sortPnt2 = pnt3;
        sortPnt3 = pnt1;
        boolLabel24 = true;
    }
  else
    {
        sortPnt1 = pnt3;
        sortPnt2 = pnt1;
        sortPnt3 = pnt2;
        boolLabel124 = true;
    }
 

  //LABEL_24:
  if(boolLabel24)
  {
  //LABEL_24:
      //v9 = sortPnt1->var_1;
      //v1173 = sortPnt1->var_1;
      if (sortPnt1->y_1 >= 0)
      {
          if (sortPnt1->y_1 >= heightViewPort_93ADC)
              return;
          actScrPtr = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * sortPnt1->y_1;
          sPnt1NotInView = false;
      }
      else
      {
          actScrPtr = beginPrevLineFrame_93AC8;
          sPnt1NotInView = true;
      }
      //v10 = sortPnt3->var_1;
      sPnt3YAfterScr = sortPnt3->y_1 > heightViewPort_93ADC;
      diffSPnt3SPnt1Y = sortPnt3->y_1 - sortPnt1->y_1;
      ySum_C = sortPnt3->y_1 - sortPnt1->y_1;
      //v11 = sortPnt2->var_1;
      sPnt2YAfterScr = sortPnt2->y_1 > heightViewPort_93ADC;
      //v12 = sortPnt2->var_1 - sortPnt1->var_1;
      diffSPnt2SPnt1Y = sortPnt2->y_1 - sortPnt1->y_1;
      divSPnt3SPnt1XY = ((sortPnt3->x_0 - sortPnt1->x_0) << 16) / diffSPnt3SPnt1Y;
      if (((sortPnt2->x_0 - sortPnt1->x_0) << 16) / (sortPnt2->y_1 - sortPnt1->y_1) > divSPnt3SPnt1XY)
      {
          divSPnt2SPnt1XY = ((sortPnt2->x_0 - sortPnt1->x_0) << 16) / (sortPnt2->y_1 - sortPnt1->y_1);
          divSPnt3SPnt2XY = ((sortPnt3->x_0 - sortPnt2->x_0) << 16) / (sortPnt3->y_1 - sortPnt2->y_1);
          diffSPnt3SPnt2Y = sortPnt3->y_1 - sortPnt2->y_1;
          //v1096 = sortPnt2->var_0 << 16;
          switch (byte_967E1)
          {
          case 0:
          case 14:
          case 15:
              xSum = sortPnt1->x_0 << 16;
              ySum = xSum;
              if (!sPnt1NotInView)
              {
                  if (sPnt3YAfterScr)
                  {
                      v58 = heightViewPort_93ADC - sortPnt1->y_1;
                      ySum_C = heightViewPort_93ADC - sortPnt1->y_1;
                      if (sPnt2YAfterScr)
                      {
                          diffSPnt2SPnt1Y = heightViewPort_93ADC - sortPnt1->y_1;
                      }
                      else
                      {
                          v27 = __OFSUB__(v58, diffSPnt2SPnt1Y);
                          v59 = v58 - diffSPnt2SPnt1Y;
                          sPnt2YAfterScr = (v59 < 0) ^ v27 | (v59 == 0);
                          diffSPnt3SPnt2Y = v59;
                      }
                  }
                  goto LABEL_116;
              }
              bool16 = ySum_C <= -sortPnt1->y_1;
              ySum_C += sortPnt1->y_1;
              if (!bool16)
              {
                  //v1138 = -sortPnt1->y_1;
                  if (-sortPnt1->y_1 - diffSPnt2SPnt1Y >= 0)
                  {
                      diffSPnt3SPnt2Y -= -sortPnt1->y_1 - diffSPnt2SPnt1Y;
                      v1139 = -sortPnt1->y_1 - diffSPnt2SPnt1Y;
                      xSum += divSPnt3SPnt1XY * v1139 + diffSPnt2SPnt1Y * divSPnt3SPnt1XY;
                      ySumB = divSPnt3SPnt2XY * v1139 + (sortPnt2->x_0 << 16);
                      if (sPnt3YAfterScr)
                      {
                          diffSPnt3SPnt2Y = heightViewPort_93ADC;
                          ySum_C = heightViewPort_93ADC;
                      }
                      //v57 = (uint32*)&unk_93AE0;
                      addIndexY = 0;
                  LABEL_119:
                      if (sPnt2YAfterScr)
                      {
                          v29 = (unsigned __int8)byte_967E1;
                          switch (byte_967E1)
                          {
                          case 0:
                              goto LABEL_309;
                          case 1:
                              goto LABEL_322;
                          case 2:
                              goto LABEL_351;
                          case 3:
                              goto LABEL_382;
                          case 4:
                              goto LABEL_445;
                          case 5:
                              goto LABEL_474;
                          case 6:
                              goto LABEL_503;
                          case 7:
                          case 11:
                              goto LABEL_564;
                          case 8:
                              goto LABEL_595;
                          case 9:
                          case 10:
                              goto LABEL_658;
                          case 12:
                              goto LABEL_721;
                          case 13:
                              goto LABEL_752;
                          case 14:
                              goto LABEL_783;
                          case 15:
                              goto LABEL_812;
                          case 16:
                              goto LABEL_841;
                          case 17:
                              goto LABEL_870;
                          case 18:
                              goto LABEL_899;
                          case 19:
                              goto LABEL_930;
                          case 20:
                              goto LABEL_961;
                          case 21:
                              goto LABEL_992;
                          case 22:
                              goto LABEL_1023;
                          case 23:
                              goto LABEL_1086;
                          case 24:
                              goto LABEL_1149;
                          case 25:
                              goto LABEL_1212;
                          case 26:
                              goto LABEL_1275;
                          }
                      }
                      for (; diffSPnt3SPnt2Y > 0; addIndexY++)
                      {
                          unk_93AE0[addIndexY].x_0.a32 = xSum;
                          xSum += divSPnt3SPnt1XY;
                          unk_93AE0[addIndexY].y_1.a32 = ySumB;
                          ySumB += divSPnt3SPnt2XY;
                          //v57 += 5;
                          //addIndexY++;
                          diffSPnt3SPnt2Y--;
                      } //while (diffSPnt3SPnt2Y);
                      v29 = (unsigned __int8)byte_967E1;
                      switch (byte_967E1)
                      {
                      case 0:
                          goto LABEL_309;
                      case 1:
                          goto LABEL_322;
                      case 2:
                          goto LABEL_351;
                      case 3:
                          goto LABEL_382;
                      case 4:
                          goto LABEL_445;
                      case 5:
                          goto LABEL_474;
                      case 6:
                          goto LABEL_503;
                      case 7:
                      case 11:
                          goto LABEL_564;
                      case 8:
                          goto LABEL_595;
                      case 9:
                      case 10:
                          goto LABEL_658;
                      case 12:
                          goto LABEL_721;
                      case 13:
                          goto LABEL_752;
                      case 14:
                          goto LABEL_783;
                      case 15:
                          goto LABEL_812;
                      case 16:
                          goto LABEL_841;
                      case 17:
                          goto LABEL_870;
                      case 18:
                          goto LABEL_899;
                      case 19:
                          goto LABEL_930;
                      case 20:
                          goto LABEL_961;
                      case 21:
                          goto LABEL_992;
                      case 22:
                          goto LABEL_1023;
                      case 23:
                          goto LABEL_1086;
                      case 24:
                          goto LABEL_1149;
                      case 25:
                          goto LABEL_1212;
                      case 26:
                          goto LABEL_1275;
                      }
                  }
                  diffSPnt2SPnt1Y += sortPnt1->y_1;
                  xSum += divSPnt3SPnt1XY * -sortPnt1->y_1;
                  ySum += -sortPnt1->y_1 * divSPnt2SPnt1XY;
                  if (sPnt3YAfterScr)
                  {
                      ySum_C = heightViewPort_93ADC;
                      if (sPnt2YAfterScr)
                      {
                          diffSPnt2SPnt1Y = heightViewPort_93ADC;
                      }
                      else
                      {
                          sPnt2YAfterScr = heightViewPort_93ADC <= diffSPnt2SPnt1Y;
                          diffSPnt3SPnt2Y = heightViewPort_93ADC - diffSPnt2SPnt1Y;
                      }
                  }
              LABEL_116:
                  //v57 = (uint32*)&unk_93AE0;
                  for (addIndexY = 0; diffSPnt2SPnt1Y > 0; addIndexY++)
                  {
                      unk_93AE0[addIndexY].x_0.a32 = xSum;
                      xSum += divSPnt3SPnt1XY;
                      unk_93AE0[addIndexY].y_1.a32 = ySum;
                      ySum += divSPnt2SPnt1XY;
                      //v57 += 5;
                      //addIndexY++;
                      diffSPnt2SPnt1Y--;
                  } //while (diffSPnt2SPnt1Y);
                  ySumB = (sortPnt2->x_0 << 16);
                  goto LABEL_119;
              }
              return;
          case 1:
          case 4:
          case 16:
          case 17:
              v43 = (sortPnt2->y_1 - sortPnt1->y_1) * (__int64)(sortPnt1->x_0 - sortPnt3->x_0) / diffSPnt3SPnt1Y;
              v44 = sortPnt2->x_0 - sortPnt1->x_0;
              v45 = v43 + v44 == 0;
              bool16 = (v43 + v44 < 0) ^ __OFADD__(v43, v44);
              v46 = v43 + v44;
              if (bool16)
                  return;
              if (!v45)
                  scaledZ.dword = (int)(sortPnt2->z_4 + diffSPnt2SPnt1Y * (__int64)(sortPnt1->z_4 - sortPnt3->z_4) / diffSPnt3SPnt1Y - sortPnt1->z_4) / (v46 + 1);
              divSPnt3SPnt1ZY = (sortPnt3->z_4 - sortPnt1->z_4) / diffSPnt3SPnt1Y;
              xSum = sortPnt1->x_0 << 16;
              ySum = xSum;
              zSum = sortPnt1->z_4;
              if (!sPnt1NotInView)
              {
                  if (sPnt3YAfterScr)
                  {
                      v52 = heightViewPort_93ADC - sortPnt1->y_1;
                      ySum_C = heightViewPort_93ADC - sortPnt1->y_1;
                      if (sPnt2YAfterScr)
                      {
                          diffSPnt2SPnt1Y = heightViewPort_93ADC - sortPnt1->y_1;
                      }
                      else
                      {
                          v27 = __OFSUB__(v52, diffSPnt2SPnt1Y);
                          v53 = v52 - diffSPnt2SPnt1Y;
                          sPnt2YAfterScr = (v53 < 0) ^ v27 | (v53 == 0);
                          diffSPnt3SPnt2Y = v53;
                      }
                  }
                  goto LABEL_95;
              }
              bool16 = ySum_C <= -sortPnt1->y_1;
              ySum_C += sortPnt1->y_1;
              if (!bool16)
              {
                  v1136 = -sortPnt1->y_1;
                  if (-sortPnt1->y_1 - diffSPnt2SPnt1Y >= 0)
                  {
                      diffSPnt3SPnt2Y -= v1136 - diffSPnt2SPnt1Y;
                      v1137 = v1136 - diffSPnt2SPnt1Y;
                      xSum += v1137 * divSPnt3SPnt1XY + diffSPnt2SPnt1Y * divSPnt3SPnt1XY;
                      ySumB = v1137 * divSPnt3SPnt2XY + (sortPnt2->x_0 << 16);
                      zSum += v1137 * divSPnt3SPnt1ZY + diffSPnt2SPnt1Y * divSPnt3SPnt1ZY;
                      if (sPnt3YAfterScr)
                      {
                          diffSPnt3SPnt2Y = heightViewPort_93ADC;
                          ySum_C = heightViewPort_93ADC;
                      }
                      //v51 = (uint32*)&unk_93AE0;
                      addIndexY = 0;
                  LABEL_98:
                      if (sPnt2YAfterScr)
                      {
                          v29 = (unsigned __int8)byte_967E1;
                          switch (byte_967E1)
                          {
                          case 0:
                              goto LABEL_309;
                          case 1:
                              goto LABEL_322;
                          case 2:
                              goto LABEL_351;
                          case 3:
                              goto LABEL_382;
                          case 4:
                              goto LABEL_445;
                          case 5:
                              goto LABEL_474;
                          case 6:
                              goto LABEL_503;
                          case 7:
                          case 11:
                              goto LABEL_564;
                          case 8:
                              goto LABEL_595;
                          case 9:
                          case 10:
                              goto LABEL_658;
                          case 12:
                              goto LABEL_721;
                          case 13:
                              goto LABEL_752;
                          case 14:
                              goto LABEL_783;
                          case 15:
                              goto LABEL_812;
                          case 16:
                              goto LABEL_841;
                          case 17:
                              goto LABEL_870;
                          case 18:
                              goto LABEL_899;
                          case 19:
                              goto LABEL_930;
                          case 20:
                              goto LABEL_961;
                          case 21:
                              goto LABEL_992;
                          case 22:
                              goto LABEL_1023;
                          case 23:
                              goto LABEL_1086;
                          case 24:
                              goto LABEL_1149;
                          case 25:
                              goto LABEL_1212;
                          case 26:
                              goto LABEL_1275;
                          }
                      }
                      for (; diffSPnt3SPnt2Y > 0; addIndexY++)
                      {
                          unk_93AE0[addIndexY].x_0.a32 = xSum;
                          xSum += divSPnt3SPnt1XY;
                          unk_93AE0[addIndexY].y_1.a32 = ySumB;
                          ySumB += divSPnt3SPnt2XY;
                          unk_93AE0[addIndexY].z_4.a32 = zSum;
                          zSum += divSPnt3SPnt1ZY;
                          //v51 += 5;
                          //addIndexY++;
                          diffSPnt3SPnt2Y--;
                      } //while (diffSPnt3SPnt2Y);
                      v29 = (unsigned __int8)byte_967E1;
                      switch (byte_967E1)
                      {
                      case 0:
                          goto LABEL_309;
                      case 1:
                          goto LABEL_322;
                      case 2:
                          goto LABEL_351;
                      case 3:
                          goto LABEL_382;
                      case 4:
                          goto LABEL_445;
                      case 5:
                          goto LABEL_474;
                      case 6:
                          goto LABEL_503;
                      case 7:
                      case 11:
                          goto LABEL_564;
                      case 8:
                          goto LABEL_595;
                      case 9:
                      case 10:
                          goto LABEL_658;
                      case 12:
                          goto LABEL_721;
                      case 13:
                          goto LABEL_752;
                      case 14:
                          goto LABEL_783;
                      case 15:
                          goto LABEL_812;
                      case 16:
                          goto LABEL_841;
                      case 17:
                          goto LABEL_870;
                      case 18:
                          goto LABEL_899;
                      case 19:
                          goto LABEL_930;
                      case 20:
                          goto LABEL_961;
                      case 21:
                          goto LABEL_992;
                      case 22:
                          goto LABEL_1023;
                      case 23:
                          goto LABEL_1086;
                      case 24:
                          goto LABEL_1149;
                      case 25:
                          goto LABEL_1212;
                      case 26:
                          goto LABEL_1275;
                      }
                  }
                  diffSPnt2SPnt1Y += sortPnt1->y_1;
                  xSum += v1136 * divSPnt3SPnt1XY;
                  ySum += v1136 * divSPnt2SPnt1XY;
                  zSum += v1136 * divSPnt3SPnt1ZY;
                  if (sPnt3YAfterScr)
                  {
                      ySum_C = heightViewPort_93ADC;
                      if (sPnt2YAfterScr)
                      {
                          diffSPnt2SPnt1Y = heightViewPort_93ADC;
                      }
                      else
                      {
                          sPnt2YAfterScr = heightViewPort_93ADC <= diffSPnt2SPnt1Y;
                          diffSPnt3SPnt2Y = heightViewPort_93ADC - diffSPnt2SPnt1Y;
                      }
                  }
              LABEL_95:
                  //v51 = (uint32*)&unk_93AE0;
                  for (addIndexY = 0; diffSPnt2SPnt1Y > 0; addIndexY++)
                  {
                      unk_93AE0[addIndexY].x_0.a32 = xSum;
                      xSum += divSPnt3SPnt1XY;
                      unk_93AE0[addIndexY].y_1.a32 = ySum;
                      ySum += divSPnt2SPnt1XY;
                      unk_93AE0[addIndexY].z_4.a32 = zSum;
                      zSum += divSPnt3SPnt1ZY;
                      //v51 += 5;
                      //addIndexY++;
                      diffSPnt2SPnt1Y--;
                  } //while (diffSPnt2SPnt1Y);
                  ySumB = (sortPnt2->x_0 << 16);
                  goto LABEL_98;
              }
              return;
          case 2:
          case 3:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 18:
          case 19:
          case 22:
          case 23:
              v30 = (sortPnt2->y_1 - sortPnt1->y_1) * (__int64)(sortPnt1->x_0 - sortPnt3->x_0) / diffSPnt3SPnt1Y;
              v31 = sortPnt2->x_0 - sortPnt1->x_0;
              v32 = v30 + v31 == 0;
              bool16 = (v30 + v31 < 0) ^ __OFADD__(v30, v31);
              v33 = v30 + v31;
              if (bool16)
                  return;
              if (!v32)
              {
                  v34 = v33 + 1;
                  scaledU.dword = (int)(sortPnt2->u_2 + diffSPnt2SPnt1Y * (__int64)(sortPnt1->u_2 - sortPnt3->u_2) / diffSPnt3SPnt1Y - sortPnt1->u_2) / v34;
                  scaledV.dword = (int)(sortPnt2->v_3 + diffSPnt2SPnt1Y * (__int64)(sortPnt1->v_3 - sortPnt3->v_3) / diffSPnt3SPnt1Y - sortPnt1->v_3) / v34;
              }
              divSPnt3SPnt2UY = (sortPnt3->u_2 - sortPnt1->u_2) / diffSPnt3SPnt1Y;
              divSPnt3SPnt2VY = (sortPnt3->v_3 - sortPnt1->v_3) / diffSPnt3SPnt1Y;
              xSum = sortPnt1->x_0 << 16;
              ySum = xSum;
              uSum = sortPnt1->u_2;
              vSum = sortPnt1->v_3;
              if (!sPnt1NotInView)
              {
                  if (sPnt3YAfterScr)
                  {
                      v41 = heightViewPort_93ADC - sortPnt1->y_1;
                      ySum_C = heightViewPort_93ADC - sortPnt1->y_1;
                      if (sPnt2YAfterScr)
                      {
                          diffSPnt2SPnt1Y = heightViewPort_93ADC - sortPnt1->y_1;
                      }
                      else
                      {
                          v27 = __OFSUB__(v41, diffSPnt2SPnt1Y);
                          v42 = v41 - diffSPnt2SPnt1Y;
                          sPnt2YAfterScr = (v42 < 0) ^ v27 | (v42 == 0);
                          diffSPnt3SPnt2Y = v42;
                      }
                  }
                  goto LABEL_71;
              }
              bool16 = ySum_C <= -sortPnt1->y_1;
              ySum_C += sortPnt1->y_1;
              if (!bool16)
              {
                  v1134 = -sortPnt1->y_1;
                  if (-sortPnt1->y_1 - diffSPnt2SPnt1Y >= 0)
                  {
                      diffSPnt3SPnt2Y -= v1134 - diffSPnt2SPnt1Y;
                      v1135 = v1134 - diffSPnt2SPnt1Y;
                      xSum += divSPnt3SPnt1XY * v1135 + diffSPnt2SPnt1Y * divSPnt3SPnt1XY;
                      ySumB = divSPnt3SPnt2XY * v1135 + (sortPnt2->x_0 << 16);
                      uSum += v1135 * divSPnt3SPnt2UY + diffSPnt2SPnt1Y * divSPnt3SPnt2UY;
                      vSum += v1135 * divSPnt3SPnt2VY + diffSPnt2SPnt1Y * divSPnt3SPnt2VY;
                      if (sPnt3YAfterScr)
                      {
                          diffSPnt3SPnt2Y = heightViewPort_93ADC;
                          ySum_C = heightViewPort_93ADC;
                      }
                      //v40 = (uint32*)&unk_93AE0;
                      addIndexY = 0;
                  LABEL_74:
                      if (sPnt2YAfterScr)
                      {
                          v29 = (unsigned __int8)byte_967E1;
                          switch (byte_967E1)
                          {
                          case 0:
                              goto LABEL_309;
                          case 1:
                              goto LABEL_322;
                          case 2:
                              goto LABEL_351;
                          case 3:
                              goto LABEL_382;
                          case 4:
                              goto LABEL_445;
                          case 5:
                              goto LABEL_474;
                          case 6:
                              goto LABEL_503;
                          case 7:
                          case 11:
                              goto LABEL_564;
                          case 8:
                              goto LABEL_595;
                          case 9:
                          case 10:
                              goto LABEL_658;
                          case 12:
                              goto LABEL_721;
                          case 13:
                              goto LABEL_752;
                          case 14:
                              goto LABEL_783;
                          case 15:
                              goto LABEL_812;
                          case 16:
                              goto LABEL_841;
                          case 17:
                              goto LABEL_870;
                          case 18:
                              goto LABEL_899;
                          case 19:
                              goto LABEL_930;
                          case 20:
                              goto LABEL_961;
                          case 21:
                              goto LABEL_992;
                          case 22:
                              goto LABEL_1023;
                          case 23:
                              goto LABEL_1086;
                          case 24:
                              goto LABEL_1149;
                          case 25:
                              goto LABEL_1212;
                          case 26:
                              goto LABEL_1275;
                          }
                      }
                      for (; diffSPnt3SPnt2Y > 0; addIndexY++)
                      {
                          unk_93AE0[addIndexY].x_0.a32 = xSum;
                          xSum += divSPnt3SPnt1XY;
                          unk_93AE0[addIndexY].y_1.a32 = ySumB;
                          ySumB += divSPnt3SPnt2XY;
                          unk_93AE0[addIndexY].u_2.a32 = uSum;
                          uSum += divSPnt3SPnt2UY;
                          unk_93AE0[addIndexY].v_3.a32 = vSum;
                          vSum += divSPnt3SPnt2VY;
                          //v40 += 5;
                          //addIndexY++;
                          diffSPnt3SPnt2Y--;
                      } //while (diffSPnt3SPnt2Y);
                      v29 = (unsigned __int8)byte_967E1;
                      switch (byte_967E1)
                      {
                      case 0:
                          goto LABEL_309;
                      case 1:
                          goto LABEL_322;
                      case 2:
                          goto LABEL_351;
                      case 3:
                          goto LABEL_382;
                      case 4:
                          goto LABEL_445;
                      case 5:
                          goto LABEL_474;
                      case 6:
                          goto LABEL_503;
                      case 7:
                      case 11:
                          goto LABEL_564;
                      case 8:
                          goto LABEL_595;
                      case 9:
                      case 10:
                          goto LABEL_658;
                      case 12:
                          goto LABEL_721;
                      case 13:
                          goto LABEL_752;
                      case 14:
                          goto LABEL_783;
                      case 15:
                          goto LABEL_812;
                      case 16:
                          goto LABEL_841;
                      case 17:
                          goto LABEL_870;
                      case 18:
                          goto LABEL_899;
                      case 19:
                          goto LABEL_930;
                      case 20:
                          goto LABEL_961;
                      case 21:
                          goto LABEL_992;
                      case 22:
                          goto LABEL_1023;
                      case 23:
                          goto LABEL_1086;
                      case 24:
                          goto LABEL_1149;
                      case 25:
                          goto LABEL_1212;
                      case 26:
                          goto LABEL_1275;
                      }
                  }
                  diffSPnt2SPnt1Y += sortPnt1->y_1;
                  xSum += v1134 * divSPnt3SPnt1XY;
                  ySum += v1134 * divSPnt2SPnt1XY;
                  uSum += v1134 * divSPnt3SPnt2UY;
                  vSum += v1134 * divSPnt3SPnt2VY;
                  if (sPnt3YAfterScr)
                  {
                      ySum_C = heightViewPort_93ADC;
                      if (sPnt2YAfterScr)
                      {
                          diffSPnt2SPnt1Y = heightViewPort_93ADC;
                      }
                      else
                      {
                          sPnt2YAfterScr = heightViewPort_93ADC <= diffSPnt2SPnt1Y;
                          diffSPnt3SPnt2Y = heightViewPort_93ADC - diffSPnt2SPnt1Y;
                      }
                  }
              LABEL_71:
                  //v40 = (uint32*)&unk_93AE0;
                  for (addIndexY = 0; diffSPnt2SPnt1Y > 0; addIndexY++)
                  {
                      unk_93AE0[addIndexY].x_0.a32 = xSum;
                      xSum += divSPnt3SPnt1XY;
                      unk_93AE0[addIndexY].y_1.a32 = ySum;
                      ySum += divSPnt2SPnt1XY;
                      unk_93AE0[addIndexY].u_2.a32 = uSum;
                      uSum += divSPnt3SPnt2UY;
                      unk_93AE0[addIndexY].v_3.a32 = vSum;
                      vSum += divSPnt3SPnt2VY;
                      //v40 += 5;
                      //addIndexY++;
                      diffSPnt2SPnt1Y--;
                  } //while (diffSPnt2SPnt1Y);
                  ySumB = (sortPnt2->x_0 << 16);
                  goto LABEL_74;
              }
              return;
          case 5:
          case 6:
          case 20:
          case 21:
          case 24:
          case 25:
          case 26:
              pnt21YxPnt13XdPnt31Y = (sortPnt2->y_1 - sortPnt1->y_1) * (sortPnt1->x_0 - sortPnt3->x_0) / diffSPnt3SPnt1Y;
              diffSortPnt2Pnt1X = sortPnt2->x_0 - sortPnt1->x_0;
              //v15 = pnt21_1xPnt13_0dPnt31_1 + diffPnt2Pnt1CVar0 == 0;
              bool16 = (pnt21YxPnt13XdPnt31Y + diffSortPnt2Pnt1X < 0) ^ __OFADD__(pnt21YxPnt13XdPnt31Y, diffSortPnt2Pnt1X);
              //v17 = pnt21_1xPnt13_0dPnt31_1 + diffPnt2Pnt1CVar0;
              if (bool16)
                  return;
              if (pnt21YxPnt13XdPnt31Y + diffSortPnt2Pnt1X)
              {
                  v18 = pnt21YxPnt13XdPnt31Y + diffSortPnt2Pnt1X + 1;
                  scaledU.dword = (int)(sortPnt2->u_2 + diffSPnt2SPnt1Y * (sortPnt1->u_2 - sortPnt3->u_2) / diffSPnt3SPnt1Y - sortPnt1->u_2) / v18;
                  scaledV.dword = (int)(sortPnt2->v_3 + diffSPnt2SPnt1Y * (sortPnt1->v_3 - sortPnt3->v_3) / diffSPnt3SPnt1Y - sortPnt1->v_3) / v18;
                  scaledZ.dword = (int)(sortPnt2->z_4 + diffSPnt2SPnt1Y * (sortPnt1->z_4 - sortPnt3->z_4) / diffSPnt3SPnt1Y - sortPnt1->z_4) / v18;
              }
              divPnt3Pnt1UY = (sortPnt3->u_2 - sortPnt1->u_2) / diffSPnt3SPnt1Y;
              divPnt3Pnt1VY = (sortPnt3->v_3 - sortPnt1->v_3) / diffSPnt3SPnt1Y;
              divPnt3Pnt1ZY = (sortPnt3->z_4 - sortPnt1->z_4) / diffSPnt3SPnt1Y;
              xSum = sortPnt1->x_0 << 16;
              ySum = xSum;
              uSum = sortPnt1->u_2;
              vSum = sortPnt1->v_3;
              zSum = sortPnt1->z_4;
              if (!sPnt1NotInView)
              {
                  if (sPnt3YAfterScr)
                  {
                      //v26 = heightViewPort_93ADC - sortPnt1->y_1;
                      ySum_C = heightViewPort_93ADC - sortPnt1->y_1;
                      if (sPnt2YAfterScr)
                      {
                          diffSPnt2SPnt1Y = heightViewPort_93ADC - sortPnt1->y_1;
                      }
                      else
                      {
                          v27 = __OFSUB__(heightViewPort_93ADC - sortPnt1->y_1, diffSPnt2SPnt1Y);
                          v28 = heightViewPort_93ADC - sortPnt1->y_1 - diffSPnt2SPnt1Y;
                          sPnt2YAfterScr = (v28 < 0) ^ v27 | (v28 == 0);
                          diffSPnt3SPnt2Y = v28;
                      }
                  }
                  goto LABEL_47;
              }
              bool16 = ySum_C <= -sortPnt1->y_1;
              ySum_C += sortPnt1->y_1;
              if (!bool16)
              {
                  //v1132 = -sortPnt1->y_1;
                  if (-sortPnt1->y_1 - diffSPnt2SPnt1Y >= 0)
                  {
                      diffSPnt3SPnt2Y -= -sortPnt1->y_1 - diffSPnt2SPnt1Y;
                      v1133 = -sortPnt1->y_1 - diffSPnt2SPnt1Y;
                      xSum += v1133 * divSPnt3SPnt1XY + diffSPnt2SPnt1Y * divSPnt3SPnt1XY;
                      ySumB = v1133 * divSPnt3SPnt2XY + (sortPnt2->x_0 << 16);
                      uSum += v1133 * divPnt3Pnt1UY + diffSPnt2SPnt1Y * divPnt3Pnt1UY;
                      vSum += v1133 * divPnt3Pnt1VY + diffSPnt2SPnt1Y * divPnt3Pnt1VY;
                      zSum += v1133 * divPnt3Pnt1ZY + diffSPnt2SPnt1Y * divPnt3Pnt1ZY;
                      if (sPnt3YAfterScr)
                      {
                          diffSPnt3SPnt2Y = heightViewPort_93ADC;
                          ySum_C = heightViewPort_93ADC;
                      }
                      //v25 = (uint32*)&unk_93AE0;
                      addIndexY = 0;
                  LABEL_50:
                      if (sPnt2YAfterScr)
                      {
                          v29 = byte_967E1;
                          switch (byte_967E1)
                          {
                          case 0:
                              goto LABEL_309;
                          case 1:
                              goto LABEL_322;
                          case 2:
                              goto LABEL_351;
                          case 3:
                              goto LABEL_382;
                          case 4:
                              goto LABEL_445;
                          case 5:
                              goto LABEL_474;
                          case 6:
                              goto LABEL_503;
                          case 7:
                          case 11:
                              goto LABEL_564;
                          case 8:
                              goto LABEL_595;
                          case 9:
                          case 10:
                              goto LABEL_658;
                          case 12:
                              goto LABEL_721;
                          case 13:
                              goto LABEL_752;
                          case 14:
                              goto LABEL_783;
                          case 15:
                              goto LABEL_812;
                          case 16:
                              goto LABEL_841;
                          case 17:
                              goto LABEL_870;
                          case 18:
                              goto LABEL_899;
                          case 19:
                              goto LABEL_930;
                          case 20:
                              goto LABEL_961;
                          case 21:
                              goto LABEL_992;
                          case 22:
                              goto LABEL_1023;
                          case 23:
                              goto LABEL_1086;
                          case 24:
                              goto LABEL_1149;
                          case 25:
                              goto LABEL_1212;
                          case 26:
                              goto LABEL_1275;
                          }
                      }
                      for(; diffSPnt3SPnt2Y; addIndexY++)
                      {
                          unk_93AE0[addIndexY].x_0.a32 = xSum;
                          xSum += divSPnt3SPnt1XY;
                          unk_93AE0[addIndexY].y_1.a32 = ySumB;
                          ySumB += divSPnt3SPnt2XY;
                          unk_93AE0[addIndexY].u_2.a32 = uSum;
                          uSum += divPnt3Pnt1UY;
                          unk_93AE0[addIndexY].v_3.a32 = vSum;
                          vSum += divPnt3Pnt1VY;
                          unk_93AE0[addIndexY].z_4.a32 = zSum;
                          zSum += divPnt3Pnt1ZY;
                          //v25x++;
                          diffSPnt3SPnt2Y--;
                      } //while (diffSPnt3SPnt2Y);
                      //v29 = (unsigned __int8)byte_967E1;
                      switch (byte_967E1)
                      {
                      case 0:
                          goto LABEL_309;
                      case 1:
                          goto LABEL_322;
                      case 2:
                          goto LABEL_351;
                      case 3:
                          goto LABEL_382;
                      case 4:
                          goto LABEL_445;
                      case 5:
                          goto LABEL_474;
                      case 6:
                          goto LABEL_503;
                      case 7:
                      case 11:
                          goto LABEL_564;
                      case 8:
                          goto LABEL_595;
                      case 9:
                      case 10:
                          goto LABEL_658;
                      case 12:
                          goto LABEL_721;
                      case 13:
                          goto LABEL_752;
                      case 14:
                          goto LABEL_783;
                      case 15:
                          goto LABEL_812;
                      case 16:
                          goto LABEL_841;
                      case 17:
                          goto LABEL_870;
                      case 18:
                          goto LABEL_899;
                      case 19:
                          goto LABEL_930;
                      case 20:
                          goto LABEL_961;
                      case 21:
                          goto LABEL_992;
                      case 22:
                          goto LABEL_1023;
                      case 23:
                          goto LABEL_1086;
                      case 24:
                          goto LABEL_1149;
                      case 25:
                          goto LABEL_1212;
                      case 26:
                          goto LABEL_1275;
                      }
                  }
                  diffSPnt2SPnt1Y += sortPnt1->y_1;
                  xSum -= sortPnt1->y_1 * divSPnt3SPnt1XY;
                  ySum -= sortPnt1->y_1 * divSPnt2SPnt1XY;
                  uSum -= sortPnt1->y_1 * divPnt3Pnt1UY;
                  vSum -= sortPnt1->y_1 * divPnt3Pnt1VY;
                  zSum -= sortPnt1->y_1 * divPnt3Pnt1ZY;
                  if (sPnt3YAfterScr)
                  {
                      ySum_C = heightViewPort_93ADC;
                      if (sPnt2YAfterScr)
                      {
                          diffSPnt2SPnt1Y = heightViewPort_93ADC;
                      }
                      else
                      {
                          sPnt2YAfterScr = heightViewPort_93ADC <= diffSPnt2SPnt1Y;
                          diffSPnt3SPnt2Y = heightViewPort_93ADC - diffSPnt2SPnt1Y;
                      }
                  }
              LABEL_47:
                  //v25 = (uint32*)&unk_93AE0;
                  for(addIndexY = 0; diffSPnt2SPnt1Y > 0; addIndexY++)
                  {
                      unk_93AE0[addIndexY].x_0.a32 = xSum;
                      xSum += divSPnt3SPnt1XY;
                      unk_93AE0[addIndexY].y_1.a32 = ySum;
                      ySum += divSPnt2SPnt1XY;
                      unk_93AE0[addIndexY].u_2.a32 = uSum;
                      uSum += divPnt3Pnt1UY;
                      unk_93AE0[addIndexY].v_3.a32 = vSum;
                      vSum += divPnt3Pnt1VY;
                      unk_93AE0[addIndexY].z_4.a32 = zSum;
                      zSum += divPnt3Pnt1ZY;                      
                      diffSPnt2SPnt1Y--;
                  } //while (diffSPnt2SPnt1Y);
                  ySumB = (sortPnt2->x_0 << 16);
                  goto LABEL_50;
              }
              break;
          }
      }
      return;
  }

  //LABEL_225:
  if(boolLabel225){
  //LABEL_225:
      //v108 = sortPnt1->var_1;
      //v1175 = sortPnt1->var_1;
      if (sortPnt1->y_1 >= 0)
      {
          if (sortPnt1->y_1 >= heightViewPort_93ADC)
              return;
          actScrPtr = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * sortPnt1->y_1;
          v1277 = 0;
      }
      else
      {
          actScrPtr = beginPrevLineFrame_93AC8;
          v1277 = 1;
      }
      //v109 = sortPnt3->var_1;
      v1281 = sortPnt3->y_1 > heightViewPort_93ADC;
      diffSPnt3SPnt1Y = sortPnt3->y_1 - sortPnt1->y_1;
      ySum_C = sortPnt3->y_1 - sortPnt1->y_1;
      divSPnt3SPnt1XY = ((sortPnt3->x_0 - sortPnt1->x_0) << 16) / (sortPnt3->y_1 - sortPnt1->y_1);
      divSPnt2SPnt1XY = ((sortPnt2->x_0 - sortPnt1->x_0) << 16) / (sortPnt3->y_1 - sortPnt1->y_1);
      switch (byte_967E1)
      {
      case 0:
      case 14:
      case 15:
          xSum = sortPnt1->x_0 << 16;
          ySum = xSum;
          if (v1277)
          {
              v132 = -sortPnt1->y_1;
              diffSPnt3SPnt1Y += sortPnt1->y_1;
              bool16 = ySum_C <= -sortPnt1->y_1;
              ySum_C += sortPnt1->y_1;
              if (bool16)
                  return;
              xSum += v132 * divSPnt3SPnt1XY;
              ySum += v132 * divSPnt2SPnt1XY;
              if (v1281)
              {
                  ySum_C = heightViewPort_93ADC;
                  diffSPnt3SPnt1Y = heightViewPort_93ADC;
              }
          }
          else if (v1281)
          {
              ySum_C = heightViewPort_93ADC - sortPnt1->y_1;
              diffSPnt3SPnt1Y = heightViewPort_93ADC - sortPnt1->y_1;
          }
          //v133 = (uint32*)&unk_93AE0;
          for (addIndexY = 0; diffSPnt3SPnt1Y > 0; addIndexY++)
          {
              unk_93AE0[addIndexY].x_0.a32 = xSum;
              xSum += divSPnt3SPnt1XY;
              unk_93AE0[addIndexY].y_1.a32 = ySum;
              ySum += divSPnt2SPnt1XY;
              //v133 += 5;
              //addIndexY++;
              diffSPnt3SPnt1Y--;
          } //while (v1090);
          v29 = (unsigned __int8)byte_967E1;
          switch (byte_967E1)
          {
          case 0:
              goto LABEL_309;
          case 1:
              goto LABEL_322;
          case 2:
              goto LABEL_351;
          case 3:
              goto LABEL_382;
          case 4:
              goto LABEL_445;
          case 5:
              goto LABEL_474;
          case 6:
              goto LABEL_503;
          case 7:
          case 11:
              goto LABEL_564;
          case 8:
              goto LABEL_595;
          case 9:
          case 10:
              goto LABEL_658;
          case 12:
              goto LABEL_721;
          case 13:
              goto LABEL_752;
          case 14:
              goto LABEL_783;
          case 15:
              goto LABEL_812;
          case 16:
              goto LABEL_841;
          case 17:
              goto LABEL_870;
          case 18:
              goto LABEL_899;
          case 19:
              goto LABEL_930;
          case 20:
              goto LABEL_961;
          case 21:
              goto LABEL_992;
          case 22:
              goto LABEL_1023;
          case 23:
              goto LABEL_1086;
          case 24:
              goto LABEL_1149;
          case 25:
              goto LABEL_1212;
          case 26:
              goto LABEL_1275;
          }
      case 1:
      case 4:
      case 16:
      case 17:
          scaledZ.dword = (sortPnt2->z_4 - sortPnt3->z_4) / (sortPnt2->x_0 - sortPnt3->x_0);
          divSPnt3SPnt1ZY = (sortPnt3->z_4 - sortPnt1->z_4) / ySum_C;
          xSum = sortPnt1->x_0 << 16;
          ySum = xSum;
          zSum = sortPnt1->z_4;
          if (v1277)
          {
              v128 = -sortPnt1->y_1;
              diffSPnt3SPnt1Y += sortPnt1->y_1;
              bool16 = ySum_C <= -sortPnt1->y_1;
              ySum_C += sortPnt1->y_1;
              if (bool16)
                  return;
              xSum += v128 * divSPnt3SPnt1XY;
              ySum += v128 * divSPnt2SPnt1XY;
              zSum += v128 * divSPnt3SPnt1ZY;
              if (v1281)
              {
                  ySum_C = heightViewPort_93ADC;
                  diffSPnt3SPnt1Y = heightViewPort_93ADC;
              }
          }
          else if (v1281)
          {
              ySum_C = heightViewPort_93ADC - sortPnt1->y_1;
              diffSPnt3SPnt1Y = heightViewPort_93ADC - sortPnt1->y_1;
          }
          //v129 = (uint32*)&unk_93AE0;
          for (addIndexY = 0; diffSPnt3SPnt1Y > 0; addIndexY++)
          {
              unk_93AE0[addIndexY].x_0.a32 = xSum;
              xSum += divSPnt3SPnt1XY;
              unk_93AE0[addIndexY].y_1.a32 = ySum;
              ySum += divSPnt2SPnt1XY;
              unk_93AE0[addIndexY].z_4.a32 = zSum;
              zSum += divSPnt3SPnt1ZY;
              //v129 += 5;
              //addIndexY++;
              diffSPnt3SPnt1Y--;
          } //while (v1090);
          v29 = (unsigned __int8)byte_967E1;
          switch (byte_967E1)
          {
          case 0:
              goto LABEL_309;
          case 1:
              goto LABEL_322;
          case 2:
              goto LABEL_351;
          case 3:
              goto LABEL_382;
          case 4:
              goto LABEL_445;
          case 5:
              goto LABEL_474;
          case 6:
              goto LABEL_503;
          case 7:
          case 11:
              goto LABEL_564;
          case 8:
              goto LABEL_595;
          case 9:
          case 10:
              goto LABEL_658;
          case 12:
              goto LABEL_721;
          case 13:
              goto LABEL_752;
          case 14:
              goto LABEL_783;
          case 15:
              goto LABEL_812;
          case 16:
              goto LABEL_841;
          case 17:
              goto LABEL_870;
          case 18:
              goto LABEL_899;
          case 19:
              goto LABEL_930;
          case 20:
              goto LABEL_961;
          case 21:
              goto LABEL_992;
          case 22:
              goto LABEL_1023;
          case 23:
              goto LABEL_1086;
          case 24:
              goto LABEL_1149;
          case 25:
              goto LABEL_1212;
          case 26:
              goto LABEL_1275;
          }
      case 2:
      case 3:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 18:
      case 19:
      case 22:
      case 23:
          v118 = sortPnt2->x_0 - sortPnt3->x_0;
          scaledU.dword = (sortPnt2->u_2 - sortPnt3->u_2) / v118;
          scaledV.dword = (sortPnt2->v_3 - sortPnt3->v_3) / v118;
          divSPnt3SPnt1UY = (sortPnt3->u_2 - sortPnt1->u_2) / ySum_C;
          divSPnt3SPnt1VY = (sortPnt3->v_3 - sortPnt1->v_3) / ySum_C;
          xSum = sortPnt1->x_0 << 16;
          ySum = xSum;
          uSum = sortPnt1->u_2;
          vSum = sortPnt1->v_3;
          if (v1277)
          {
              v123 = -sortPnt1->y_1;
              diffSPnt3SPnt1Y += sortPnt1->y_1;
              bool16 = ySum_C <= -sortPnt1->y_1;
              ySum_C += sortPnt1->y_1;
              if (bool16)
                  return;
              xSum += v123 * divSPnt3SPnt1XY;
              ySum += v123 * divSPnt2SPnt1XY;
              uSum += v123 * divSPnt3SPnt1UY;
              vSum += v123 * divSPnt3SPnt1VY;
              if (v1281)
              {
                  ySum_C = heightViewPort_93ADC;
                  diffSPnt3SPnt1Y = heightViewPort_93ADC;
              }
          }
          else if (v1281)
          {
              ySum_C = heightViewPort_93ADC - sortPnt1->y_1;
              diffSPnt3SPnt1Y = heightViewPort_93ADC - sortPnt1->y_1;
          }
          //v124 = (uint32*)&unk_93AE0;
          for (addIndexY = 0; diffSPnt3SPnt1Y > 0; addIndexY++)
          {
              unk_93AE0[addIndexY].x_0.a32 = xSum;
              xSum += divSPnt3SPnt1XY;
              unk_93AE0[addIndexY].y_1.a32 = ySum;
              ySum += divSPnt2SPnt1XY;
              unk_93AE0[addIndexY].u_2.a32 = uSum;
              uSum += divSPnt3SPnt1UY;
              unk_93AE0[addIndexY].v_3.a32 = vSum;
              vSum += divSPnt3SPnt1VY;
              //v124 += 5;
              //addIndexY++;
              diffSPnt3SPnt1Y--;
          } //while (v1090);
          v29 = (unsigned __int8)byte_967E1;
          switch (byte_967E1)
          {
          case 0:
              goto LABEL_309;
          case 1:
              goto LABEL_322;
          case 2:
              goto LABEL_351;
          case 3:
              goto LABEL_382;
          case 4:
              goto LABEL_445;
          case 5:
              goto LABEL_474;
          case 6:
              goto LABEL_503;
          case 7:
          case 11:
              goto LABEL_564;
          case 8:
              goto LABEL_595;
          case 9:
          case 10:
              goto LABEL_658;
          case 12:
              goto LABEL_721;
          case 13:
              goto LABEL_752;
          case 14:
              goto LABEL_783;
          case 15:
              goto LABEL_812;
          case 16:
              goto LABEL_841;
          case 17:
              goto LABEL_870;
          case 18:
              goto LABEL_899;
          case 19:
              goto LABEL_930;
          case 20:
              goto LABEL_961;
          case 21:
              goto LABEL_992;
          case 22:
              goto LABEL_1023;
          case 23:
              goto LABEL_1086;
          case 24:
              goto LABEL_1149;
          case 25:
              goto LABEL_1212;
          case 26:
              goto LABEL_1275;
          }
      case 5:
      case 6:
      case 20:
      case 21:
      case 24:
      case 25:
      case 26:
          v110 = sortPnt2->x_0 - sortPnt3->x_0;
          scaledU.dword = (sortPnt2->u_2 - sortPnt3->u_2) / v110;
          scaledV.dword = (sortPnt2->v_3 - sortPnt3->v_3) / v110;
          scaledZ.dword = (sortPnt2->z_4 - sortPnt3->z_4) / v110;
          divSPnt3SPnt1UY = (sortPnt3->u_2 - sortPnt1->u_2) / ySum_C;
          divSPnt3SPnt1VY = (sortPnt3->v_3 - sortPnt1->v_3) / ySum_C;
          divSPnt3SPnt1ZY = (sortPnt3->z_4 - sortPnt1->z_4) / ySum_C;
          xSum = sortPnt1->x_0 << 16;
          ySum = xSum;
          uSum = sortPnt1->u_2;
          vSum = sortPnt1->v_3;
          zSum = sortPnt1->z_4;
          if (v1277)
          {
              v116 = -sortPnt1->y_1;
              diffSPnt3SPnt1Y += sortPnt1->y_1;
              bool16 = ySum_C <= -sortPnt1->y_1;
              ySum_C += sortPnt1->y_1;
              if (bool16)
                  return;
              xSum += v116 * divSPnt3SPnt1XY;
              ySum += v116 * divSPnt2SPnt1XY;
              uSum += v116 * divSPnt3SPnt1UY;
              vSum += v116 * divSPnt3SPnt1VY;
              zSum += v116 * divSPnt3SPnt1ZY;
              if (v1281)
              {
                  ySum_C = heightViewPort_93ADC;
                  diffSPnt3SPnt1Y = heightViewPort_93ADC;
              }
          }
          else if (v1281)
          {
              ySum_C = heightViewPort_93ADC - sortPnt1->y_1;
              diffSPnt3SPnt1Y = heightViewPort_93ADC - sortPnt1->y_1;
          }
          //v117 = (uint32*)&unk_93AE0;
          for (addIndexY = 0; diffSPnt3SPnt1Y > 0; addIndexY++)
          {
              unk_93AE0[addIndexY].x_0.a32 = xSum;
              xSum += divSPnt3SPnt1XY;
              unk_93AE0[addIndexY].y_1.a32 = ySum;
              ySum += divSPnt2SPnt1XY;
              unk_93AE0[addIndexY].u_2.a32 = uSum;
              uSum += divSPnt3SPnt1UY;
              unk_93AE0[addIndexY].v_3.a32 = vSum;
              vSum += divSPnt3SPnt1VY;
              unk_93AE0[addIndexY].z_4.a32 = zSum;
              zSum += divSPnt3SPnt1ZY;
              //v117 += 5;
              //addIndexY++;
              diffSPnt3SPnt1Y--;
          } //while (v1090);
          v29 = (unsigned __int8)byte_967E1;
          switch (byte_967E1)
          {
          case 0:
              goto LABEL_309;
          case 1:
              goto LABEL_322;
          case 2:
              goto LABEL_351;
          case 3:
              goto LABEL_382;
          case 4:
              goto LABEL_445;
          case 5:
              goto LABEL_474;
          case 6:
              goto LABEL_503;
          case 7:
          case 11:
              goto LABEL_564;
          case 8:
              goto LABEL_595;
          case 9:
          case 10:
              goto LABEL_658;
          case 12:
              goto LABEL_721;
          case 13:
              goto LABEL_752;
          case 14:
              goto LABEL_783;
          case 15:
              goto LABEL_812;
          case 16:
              goto LABEL_841;
          case 17:
              goto LABEL_870;
          case 18:
              goto LABEL_899;
          case 19:
              goto LABEL_930;
          case 20:
              goto LABEL_961;
          case 21:
              goto LABEL_992;
          case 22:
              goto LABEL_1023;
          case 23:
              goto LABEL_1086;
          case 24:
              goto LABEL_1149;
          case 25:
              goto LABEL_1212;
          case 26:
              goto LABEL_1275;
          }
      }
  }

  //LABEL_268:
  if(boolLabel268){
//LABEL_268:
    //v134 = sortPnt1->y_1;
    v1176 = sortPnt1->y_1;
    if (sortPnt1->y_1 >= 0 )
    {
      if (sortPnt1->y_1 >= heightViewPort_93ADC )
        return;
      actScrPtr = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * sortPnt1->y_1;
      v1278 = 0;
    }
    else
    {
      actScrPtr = beginPrevLineFrame_93AC8;
      v1278 = 1;
    }
    //v135 = sortPnt3->y_1;
    v1282 = sortPnt3->y_1 > heightViewPort_93ADC;
    diffSPnt3SPnt1Y = sortPnt3->y_1 - sortPnt1->y_1;
    ySum_C = sortPnt3->y_1 - sortPnt1->y_1;
    divSPnt3SPnt1XY = ((sortPnt3->x_0 - sortPnt1->x_0) << 16) / (sortPnt3->y_1 - sortPnt1->y_1);
    divSPnt3SPnt2XY = ((sortPnt3->x_0 - sortPnt2->x_0) << 16) / (sortPnt3->y_1 - sortPnt1->y_1);
    switch ( byte_967E1 )
    {
      case 0:
      case 14:
      case 15:
        xSum = sortPnt1->x_0 << 16;
        ySum = sortPnt2->x_0 << 16;
        if ( v1278 )
        {
          v158 = -v1176;
          diffSPnt3SPnt1Y += v1176;
          bool16 = ySum_C <= -v1176;
          ySum_C += v1176;
          if (bool16)
            return;
          xSum += v158 * divSPnt3SPnt1XY;
          ySum += v158 * divSPnt3SPnt2XY;
          if ( v1282 )
          {
            ySum_C = heightViewPort_93ADC;
            diffSPnt3SPnt1Y = heightViewPort_93ADC;
          }
        }
        else if ( v1282 )
        {
            ySum_C = heightViewPort_93ADC - v1176;
            diffSPnt3SPnt1Y = heightViewPort_93ADC - v1176;
        }
        //v159 = (uint32*)&unk_93AE0;
        for (addIndexY = 0; diffSPnt3SPnt1Y > 0; addIndexY++)
        {
          unk_93AE0[addIndexY].x_0.a32 = xSum;
          xSum += divSPnt3SPnt1XY;
          unk_93AE0[addIndexY].y_1.a32 = ySum;
          ySum += divSPnt3SPnt2XY;
          //v159 += 5;
          //addIndexY++;
          diffSPnt3SPnt1Y--;
        }
        //while ( v1091 );
        v29 = (unsigned __int8)byte_967E1;
        switch ( byte_967E1 )
        {
          case 0:
            goto LABEL_309;
          case 1:
            goto LABEL_322;
          case 2:
            goto LABEL_351;
          case 3:
            goto LABEL_382;
          case 4:
            goto LABEL_445;
          case 5:
            goto LABEL_474;
          case 6:
            goto LABEL_503;
          case 7:
          case 11:
            goto LABEL_564;
          case 8:
            goto LABEL_595;
          case 9:
          case 10:
            goto LABEL_658;
          case 12:
            goto LABEL_721;
          case 13:
            goto LABEL_752;
          case 14:
            goto LABEL_783;
          case 15:
            goto LABEL_812;
          case 16:
            goto LABEL_841;
          case 17:
            goto LABEL_870;
          case 18:
            goto LABEL_899;
          case 19:
            goto LABEL_930;
          case 20:
            goto LABEL_961;
          case 21:
            goto LABEL_992;
          case 22:
            goto LABEL_1023;
          case 23:
            goto LABEL_1086;
          case 24:
            goto LABEL_1149;
          case 25:
            goto LABEL_1212;
          case 26:
            goto LABEL_1275;
        }
      case 1:
      case 4:
      case 16:
      case 17:
        scaledZ.dword = (sortPnt2->z_4 - sortPnt1->z_4) / (sortPnt2->x_0 - sortPnt1->x_0);
        divSPnt3SPnt1ZY = (sortPnt3->z_4 - sortPnt1->z_4) / ySum_C;
        xSum = sortPnt1->x_0 << 16;
        ySum = sortPnt2->x_0 << 16;
        zSum = sortPnt1->z_4;
        if ( v1278 )
        {
          v154 = -v1176;
          diffSPnt3SPnt1Y += v1176;
          bool16 = ySum_C <= -v1176;
          ySum_C += v1176;
          if (bool16)
            return;
          xSum += v154 * divSPnt3SPnt1XY;
          ySum += v154 * divSPnt3SPnt2XY;
          zSum += v154 * divSPnt3SPnt1ZY;
          if ( v1282 )
          {
            ySum_C = heightViewPort_93ADC;
            diffSPnt3SPnt1Y = heightViewPort_93ADC;
          }
        }
        else if ( v1282 )
        {
          ySum_C = heightViewPort_93ADC - v1176;
          diffSPnt3SPnt1Y = heightViewPort_93ADC - v1176;
        }
        //v155 = (uint32*)&unk_93AE0;
        for (addIndexY = 0; diffSPnt3SPnt1Y > 0; addIndexY++)
        {
          unk_93AE0[addIndexY].x_0.a32 = xSum;
          xSum += divSPnt3SPnt1XY;
          unk_93AE0[addIndexY].y_1.a32 = ySum;
          ySum += divSPnt3SPnt2XY;
          unk_93AE0[addIndexY].z_4.a32 = zSum;
          zSum += divSPnt3SPnt1ZY;
          //v155 += 5;
          //addIndexY++;
          diffSPnt3SPnt1Y--;
        }
        //while ( v1091 );
        v29 = (unsigned __int8)byte_967E1;
        switch ( byte_967E1 )
        {
          case 0:
            goto LABEL_309;
          case 1:
            goto LABEL_322;
          case 2:
            goto LABEL_351;
          case 3:
            goto LABEL_382;
          case 4:
            goto LABEL_445;
          case 5:
            goto LABEL_474;
          case 6:
            goto LABEL_503;
          case 7:
          case 11:
            goto LABEL_564;
          case 8:
            goto LABEL_595;
          case 9:
          case 10:
            goto LABEL_658;
          case 12:
            goto LABEL_721;
          case 13:
            goto LABEL_752;
          case 14:
            goto LABEL_783;
          case 15:
            goto LABEL_812;
          case 16:
            goto LABEL_841;
          case 17:
            goto LABEL_870;
          case 18:
            goto LABEL_899;
          case 19:
            goto LABEL_930;
          case 20:
            goto LABEL_961;
          case 21:
            goto LABEL_992;
          case 22:
            goto LABEL_1023;
          case 23:
            goto LABEL_1086;
          case 24:
            goto LABEL_1149;
          case 25:
            goto LABEL_1212;
          case 26:
            goto LABEL_1275;
        }
      case 2:
      case 3:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 18:
      case 19:
      case 22:
      case 23:
        v144 = sortPnt2->x_0 - sortPnt1->x_0;
        scaledU.dword = (sortPnt2->u_2 - sortPnt1->u_2) / v144;
        scaledV.dword = (sortPnt2->v_3 - sortPnt1->v_3) / v144;
        divSPnt3SPnt1UY = (sortPnt3->u_2 - sortPnt1->u_2) / ySum_C;
        divSPnt3SPnt1VY = (sortPnt3->v_3 - sortPnt1->v_3) / ySum_C;
        xSum = sortPnt1->x_0 << 16;
        ySum = sortPnt2->x_0 << 16;
        uSum = sortPnt1->u_2;
        vSum = sortPnt1->v_3;
        if ( v1278 )
        {
          v149 = -v1176;
          diffSPnt3SPnt1Y += v1176;
          bool16 = ySum_C <= -v1176;
          ySum_C += v1176;
          if (bool16)
            return;
          xSum += v149 * divSPnt3SPnt1XY;
          ySum += v149 * divSPnt3SPnt2XY;
          uSum += v149 * divSPnt3SPnt1UY;
          vSum += v149 * divSPnt3SPnt1VY;
          if ( v1282 )
          {
            ySum_C = heightViewPort_93ADC;
            diffSPnt3SPnt1Y = heightViewPort_93ADC;
          }
        }
        else if ( v1282 )
        {
          ySum_C = heightViewPort_93ADC - v1176;
          diffSPnt3SPnt1Y = heightViewPort_93ADC - v1176;
        }
        //v150 = (uint32*)&unk_93AE0;
        for (addIndexY = 0; diffSPnt3SPnt1Y > 0; addIndexY++)
        {
          unk_93AE0[addIndexY].x_0.a32 = xSum;
          xSum += divSPnt3SPnt1XY;
          unk_93AE0[addIndexY].y_1.a32 = ySum;
          ySum += divSPnt3SPnt2XY;
          unk_93AE0[addIndexY].u_2.a32 = uSum;
          uSum += divSPnt3SPnt1UY;
          unk_93AE0[addIndexY].v_3.a32 = vSum;
          vSum += divSPnt3SPnt1VY;
          //v150 += 5;
          //addIndexY++;
          diffSPnt3SPnt1Y--;
        }
        //while ( v1091 );
        v29 = (unsigned __int8)byte_967E1;
        switch ( byte_967E1 )
        {
          case 0:
            goto LABEL_309;
          case 1:
            goto LABEL_322;
          case 2:
            goto LABEL_351;
          case 3:
            goto LABEL_382;
          case 4:
            goto LABEL_445;
          case 5:
            goto LABEL_474;
          case 6:
            goto LABEL_503;
          case 7:
          case 11:
            goto LABEL_564;
          case 8:
            goto LABEL_595;
          case 9:
          case 10:
            goto LABEL_658;
          case 12:
            goto LABEL_721;
          case 13:
            goto LABEL_752;
          case 14:
            goto LABEL_783;
          case 15:
            goto LABEL_812;
          case 16:
            goto LABEL_841;
          case 17:
            goto LABEL_870;
          case 18:
            goto LABEL_899;
          case 19:
            goto LABEL_930;
          case 20:
            goto LABEL_961;
          case 21:
            goto LABEL_992;
          case 22:
            goto LABEL_1023;
          case 23:
            goto LABEL_1086;
          case 24:
            goto LABEL_1149;
          case 25:
            goto LABEL_1212;
          case 26:
            goto LABEL_1275;
        }
      case 5:
      case 6:
      case 20:
      case 21:
      case 24:
      case 25:
      case 26:
        v136 = sortPnt2->x_0 - sortPnt1->x_0;
        scaledU.dword = (sortPnt2->u_2 - sortPnt1->u_2) / v136;
        scaledV.dword = (sortPnt2->v_3 - sortPnt1->v_3) / v136;
        scaledZ.dword = (sortPnt2->z_4 - sortPnt1->z_4) / v136;
        divSPnt3SPnt1UY = (sortPnt3->u_2 - sortPnt1->u_2) / ySum_C;
        divSPnt3SPnt1VY = (sortPnt3->v_3 - sortPnt1->v_3) / ySum_C;
        divSPnt3SPnt1ZY = (sortPnt3->z_4 - sortPnt1->z_4) / ySum_C;
        xSum = sortPnt1->x_0 << 16;
        ySum = sortPnt2->x_0 << 16;
        uSum = sortPnt1->u_2;
        vSum = sortPnt1->v_3;
        zSum = sortPnt1->z_4;
        if ( v1278 )
        {
          v142 = -v1176;
          diffSPnt3SPnt1Y += v1176;
          bool16 = ySum_C <= -v1176;
          ySum_C += v1176;
          if (bool16)
            return;
          xSum += v142 * divSPnt3SPnt1XY;
          ySum += v142 * divSPnt3SPnt2XY;
          uSum += v142 * divSPnt3SPnt1UY;
          vSum += v142 * divSPnt3SPnt1VY;
          zSum += v142 * divSPnt3SPnt1ZY;
          if ( v1282 )
          {
            ySum_C = heightViewPort_93ADC;
            diffSPnt3SPnt1Y = heightViewPort_93ADC;
          }
        }
        else if ( v1282 )
        {
          ySum_C = heightViewPort_93ADC - v1176;
          diffSPnt3SPnt1Y = heightViewPort_93ADC - v1176;
        }
        //v143 = (uint32*)&unk_93AE0;
        for (addIndexY = 0; diffSPnt3SPnt1Y > 0; addIndexY++)
        {
          unk_93AE0[addIndexY].x_0.a32 = xSum;
          xSum += divSPnt3SPnt1XY;
          unk_93AE0[addIndexY].y_1.a32 = ySum;
          ySum += divSPnt3SPnt2XY;
          unk_93AE0[addIndexY].u_2.a32 = uSum;
          uSum += divSPnt3SPnt1UY;
          unk_93AE0[addIndexY].v_3.a32 = vSum;
          vSum += divSPnt3SPnt1VY;
          unk_93AE0[addIndexY].z_4.a32 = zSum;
          zSum += divSPnt3SPnt1ZY;
          //v143 += 5;
          //addIndexY++;
          diffSPnt3SPnt1Y--;
        }
        //while ( v1091 );
        break;
    }
    v29 = (unsigned __int8)byte_967E1;
    switch ( byte_967E1 )
    {
      case 0:
LABEL_309:
        //v160 = (unsigned __int16 *)&unk_93AE0;
        v160x = 0;
        tempScrPtr = actScrPtr;
        v162 = byte_967E0;
        HIWORD(v163) = 0;
        while ( 1 )
        {
          LOWORD(v163) = unk_93AE0[v160x].x_0.a16[1];
          v164 = unk_93AE0[v160x].y_1.a16[1];
          tempScrPtr += pitchViewPort_93AD4;
          if ( (v163 & 0x8000u) == 0 )
            break;
          if ( (__int16)v164 > 0 )
          {
            if ( v164 > widthViewPort_93AD8 )
              v164 = widthViewPort_93AD8;
            tempScrPtr2 = tempScrPtr;
LABEL_319:
            memset(tempScrPtr2, v162, v164);
          }
LABEL_320:
          //v160 += 10;
          v160x++;
          if ( !--ySum_C )
            return;
        }
        if ( v164 > widthViewPort_93AD8 )
          v164 = widthViewPort_93AD8;
        bool16 = (__int16)v164 <= (__int16)v163;
        LOWORD(v164) = v164 - v163;
        if (bool16)
          goto LABEL_320;
        tempScrPtr2 = &tempScrPtr[v163];
        goto LABEL_319;
      case 1:
LABEL_322:
        //for ( i = (uint16*)&unk_93AE0; ; i += 10 )
        for (ix = 0; ; ix++)
        {
          LOWORD(v29) = unk_93AE0[ix].x_0.a16[1];
          v167 = unk_93AE0[ix].y_1.a16[1];
          //v168 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;

          tempScrPtr4 = actScrPtr;
          if ( (v29 & 0x8000u) == 0 )
            break;
          if ( (__int16)v167 > 0 )
          {
            v169 = scaledZ.dword * (unsigned __int16)-(__int16)v29;
            v170 = v169;
            v29 = v169 >> 8;
            v171 = __CFADD__(unk_93AE0[ix].z_4.a16[0], v170);
            v172 = unk_93AE0[ix].z_4.a16[0] + v170;
            BYTE1(v29) += unk_93AE0[ix].z_4.a16[1] + v171;
            if ( v167 > widthViewPort_93AD8 )
              LOWORD(v167) = widthViewPort_93AD8;
            v29 = (unsigned __int16)v29;
LABEL_332:
            while ( 1 )
            {
              tempScrPtr4[0] = BYTE1(v29);
              v171 = __CFADD__((_WORD)scaledZ.dword, v172);
              v173 = scaledZ.dword + v172;
              v174 = BYTE2(scaledZ.dword) + v171 + BYTE1(v29);
              v175 = v167 - 1;
              if ( !v175 )
                break;
              tempScrPtr4[1] = v174;
              v171 = __CFADD__((_WORD)scaledZ.dword, v173);
              v176 = scaledZ.dword + v173;
              v177 = BYTE2(scaledZ.dword) + v171 + v174;
              v178 = v175 - 1;
              if ( !v178 )
                break;
              tempScrPtr4[2] = v177;
              v171 = __CFADD__((_WORD)scaledZ.dword, v176);
              v179 = scaledZ.dword + v176;
              v180 = BYTE2(scaledZ.dword) + v171 + v177;
              v181 = v178 - 1;
              if ( !v181 )
                break;
              tempScrPtr4[3] = v180;
              v171 = __CFADD__((_WORD)scaledZ.dword, v179);
              v182 = scaledZ.dword + v179;
              v183 = BYTE2(scaledZ.dword) + v171 + v180;
              v184 = v181 - 1;
              if ( !v184 )
                break;
              tempScrPtr4[4] = v183;
              v171 = __CFADD__((_WORD)scaledZ.dword, v182);
              v185 = scaledZ.dword + v182;
              v186 = BYTE2(scaledZ.dword) + v171 + v183;
              v187 = v184 - 1;
              if ( !v187 )
                break;
              tempScrPtr4[5] = v186;
              v171 = __CFADD__((_WORD)scaledZ.dword, v185);
              v188 = scaledZ.dword + v185;
              v189 = BYTE2(scaledZ.dword) + v171 + v186;
              v190 = v187 - 1;
              if ( !v190 )
                break;
              tempScrPtr4[6] = v189;
              v171 = __CFADD__((_WORD)scaledZ.dword, v188);
              v191 = scaledZ.dword + v188;
              v192 = BYTE2(scaledZ.dword) + v171 + v189;
              v193 = v190 - 1;
              if ( !v193 )
                break;
              tempScrPtr4[7] = v192;
              v171 = __CFADD__((_WORD)scaledZ.dword, v191);
              v194 = scaledZ.dword + v191;
              v195 = BYTE2(scaledZ.dword) + v171 + v192;
              v196 = v193 - 1;
              if ( !v196 )
                break;
              tempScrPtr4[8] = v195;
              v171 = __CFADD__((_WORD)scaledZ.dword, v194);
              v197 = scaledZ.dword + v194;
              v198 = BYTE2(scaledZ.dword) + v171 + v195;
              v199 = v196 - 1;
              if ( !v199 )
                break;
              tempScrPtr4[9] = v198;
              v171 = __CFADD__((_WORD)scaledZ.dword, v197);
              v200 = scaledZ.dword + v197;
              v201 = BYTE2(scaledZ.dword) + v171 + v198;
              v202 = v199 - 1;
              if ( !v202 )
                break;
              tempScrPtr4[10] = v201;
              v171 = __CFADD__((_WORD)scaledZ.dword, v200);
              v203 = scaledZ.dword + v200;
              v204 = BYTE2(scaledZ.dword) + v171 + v201;
              v205 = v202 - 1;
              if ( !v205 )
                break;
              tempScrPtr4[11] = v204;
              v171 = __CFADD__((_WORD)scaledZ.dword, v203);
              v206 = scaledZ.dword + v203;
              v207 = BYTE2(scaledZ.dword) + v171 + v204;
              v208 = v205 - 1;
              if ( !v208 )
                break;
              tempScrPtr4[12] = v207;
              v171 = __CFADD__((_WORD)scaledZ.dword, v206);
              v209 = scaledZ.dword + v206;
              v210 = BYTE2(scaledZ.dword) + v171 + v207;
              v211 = v208 - 1;
              if ( !v211 )
                break;
              tempScrPtr4[13] = v210;
              v171 = __CFADD__((_WORD)scaledZ.dword, v209);
              v212 = scaledZ.dword + v209;
              v213 = BYTE2(scaledZ.dword) + v171 + v210;
              v214 = v211 - 1;
              if ( !v214 )
                break;
              tempScrPtr4[14] = v213;
              v171 = __CFADD__((_WORD)scaledZ.dword, v212);
              v215 = scaledZ.dword + v212;
              v216 = BYTE2(scaledZ.dword) + v171 + v213;
              v217 = v214 - 1;
              if ( !v217 )
                break;
              tempScrPtr4[15] = v216;
              v171 = __CFADD__((_WORD)scaledZ.dword, v215);
              v172 = scaledZ.dword + v215;
              BYTE1(v29) = BYTE2(scaledZ.dword) + v171 + v216;
              LOWORD(v167) = v217 - 1;
              if ( !(_WORD)v167 )
                break;
              tempScrPtr4 += 16;
            }
          }
LABEL_349:
          if ( !--ySum_C )
            return;
        }
        if ( v167 > widthViewPort_93AD8 )
          LOWORD(v167) = widthViewPort_93AD8;
        bool16 = (__int16)v167 <= (__int16)v29;
        LOWORD(v167) = v167 - v29;
        if (bool16)
          goto LABEL_349;
        tempScrPtr4 += v29;
        v29 = (unsigned __int8)byte_967E0;
        v172 = unk_93AE0[ix].z_4.a16[0];
        BYTE1(v29) = unk_93AE0[ix].z_4.a16[1];
        goto LABEL_332;
      case 2:
LABEL_351:
        //v218 = (unsigned __int16 *)&unk_93AE0;
        v218x = 0;
        v1148 = scaledV.dword << 16;
        HIWORD(v219) = 0;
        HIWORD(v220) = 0;
        while ( 1 )
        {
          LOWORD(v219) = unk_93AE0[v218x].x_0.a16[1];
          v221 = unk_93AE0[v218x].y_1.a16[1];
          //v222 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr5 = actScrPtr;
          if ( (v219 & 0x8000u) == 0 )
            break;
          if ( (__int16)v221 > 0 )
          {
            v223 = (unsigned __int16)-(__int16)v219;
            v225 = __ROL4_16__(unk_93AE0[v218x].v_3.a32 + scaledV.dword * v223);
            BYTE1(v220) = v225;
            v224 = unk_93AE0[v218x].u_2.a32 + scaledU.dword * v223;
            LOWORD(v225) = v224;
            v226 = v224 >> 8;
            LOBYTE(v220) = BYTE1(v226);
            if ( v221 > widthViewPort_93AD8 )
              LOWORD(v221) = widthViewPort_93AD8;
            v219 = (unsigned __int16)v226;
LABEL_361:
            v1257x = v218x;
            v227 = (int)actTexture_93AD0;
            while ( 1 )
            {
              v228 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v225);
              LOWORD(v225) = scaledU.dword + v225;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[0] = v228;
              v171 = __CFADD__(v1148, v225);
              v229 = v1148 + v225;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v230 = v221 - 1;
              if ( !v230 )
                break;
              v231 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v229);
              LOWORD(v229) = scaledU.dword + v229;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[1] = v231;
              v171 = __CFADD__(v1148, v229);
              v232 = v1148 + v229;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v233 = v230 - 1;
              if ( !v233 )
                break;
              v234 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v232);
              LOWORD(v232) = scaledU.dword + v232;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[2] = v234;
              v171 = __CFADD__(v1148, v232);
              v235 = v1148 + v232;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v236 = v233 - 1;
              if ( !v236 )
                break;
              v237 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v235);
              LOWORD(v235) = scaledU.dword + v235;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[3] = v237;
              v171 = __CFADD__(v1148, v235);
              v238 = v1148 + v235;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v239 = v236 - 1;
              if ( !v239 )
                break;
              v240 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v238);
              LOWORD(v238) = scaledU.dword + v238;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[4] = v240;
              v171 = __CFADD__(v1148, v238);
              v241 = v1148 + v238;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v242 = v239 - 1;
              if ( !v242 )
                break;
              v243 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v241);
              LOWORD(v241) = scaledU.dword + v241;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[5] = v243;
              v171 = __CFADD__(v1148, v241);
              v244 = v1148 + v241;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v245 = v242 - 1;
              if ( !v245 )
                break;
              v246 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v244);
              LOWORD(v244) = scaledU.dword + v244;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[6] = v246;
              v171 = __CFADD__(v1148, v244);
              v247 = v1148 + v244;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v248 = v245 - 1;
              if ( !v248 )
                break;
              v249 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v247);
              LOWORD(v247) = scaledU.dword + v247;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[7] = v249;
              v171 = __CFADD__(v1148, v247);
              v250 = v1148 + v247;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v251 = v248 - 1;
              if ( !v251 )
                break;
              v252 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v250);
              LOWORD(v250) = scaledU.dword + v250;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[8] = v252;
              v171 = __CFADD__(v1148, v250);
              v253 = v1148 + v250;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v254 = v251 - 1;
              if ( !v254 )
                break;
              v255 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v253);
              LOWORD(v253) = scaledU.dword + v253;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[9] = v255;
              v171 = __CFADD__(v1148, v253);
              v256 = v1148 + v253;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v257 = v254 - 1;
              if ( !v257 )
                break;
              v258 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v256);
              LOWORD(v256) = scaledU.dword + v256;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[10] = v258;
              v171 = __CFADD__(v1148, v256);
              v259 = v1148 + v256;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v260 = v257 - 1;
              if ( !v260 )
                break;
              v261 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v259);
              LOWORD(v259) = scaledU.dword + v259;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[11] = v261;
              v171 = __CFADD__(v1148, v259);
              v262 = v1148 + v259;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v263 = v260 - 1;
              if ( !v263 )
                break;
              v264 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v262);
              LOWORD(v262) = scaledU.dword + v262;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[12] = v264;
              v171 = __CFADD__(v1148, v262);
              v265 = v1148 + v262;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v266 = v263 - 1;
              if ( !v266 )
                break;
              v267 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v265);
              LOWORD(v265) = scaledU.dword + v265;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[13] = v267;
              v171 = __CFADD__(v1148, v265);
              v268 = v1148 + v265;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v269 = v266 - 1;
              if ( !v269 )
                break;
              v270 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v268);
              LOWORD(v268) = scaledU.dword + v268;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[14] = v270;
              v171 = __CFADD__(v1148, v268);
              v271 = v1148 + v268;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              v272 = v269 - 1;
              if ( !v272 )
                break;
              v273 = *(_BYTE *)(v220 + v227);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v271);
              LOWORD(v271) = scaledU.dword + v271;
              LOBYTE(v220) = BYTE2(scaledU.dword) + v171 + v220;
              tempScrPtr5[15] = v273;
              v171 = __CFADD__(v1148, v271);
              v225 = v1148 + v271;
              BYTE1(v220) += BYTE2(scaledV.dword) + v171;
              LOWORD(v221) = v272 - 1;
              if ( !(_WORD)v221 )
                break;
              tempScrPtr5 += 16;
            }
            v218x = v1257x;
          }
LABEL_380:
          //v218 += 10;
          v218x++;
          if ( !--ySum_C )
            return;
        }
        if ( v221 > widthViewPort_93AD8 )
          LOWORD(v221) = widthViewPort_93AD8;
        bool16 = (__int16)v221 <= (__int16)v219;
        LOWORD(v221) = v221 - v219;
        if (bool16)
          goto LABEL_380;
        tempScrPtr5 += v219;
        v225 = __ROL4_16__(unk_93AE0[v218x].v_3.a32);
        BYTE1(v220) = v225;
        LOWORD(v225) = unk_93AE0[v218x].u_2.a16[0];
        LOBYTE(v220) = unk_93AE0[v218x].u_2.a16[1];
        goto LABEL_361;
      case 3:
LABEL_382:
        //v274 = (unsigned __int16 *)&unk_93AE0;
        v274x = 0;
        v1149 = scaledV.dword << 16;
        HIWORD(v275) = 0;
        HIWORD(v276) = 0;
        while ( 1 )
        {
          LOWORD(v275) = unk_93AE0[v274x].x_0.a16[1];
          v277 = unk_93AE0[v274x].y_1.a16[1];
          //v278 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr6 = actScrPtr;
          if ( (v275 & 0x8000u) == 0 )
            break;
          if ( (__int16)v277 > 0 )
          {
            v279 = (unsigned __int16)-(__int16)v275;
            v281 = __ROL4_16__(unk_93AE0[v274x].v_3.a32 + scaledV.dword * v279);
            BYTE1(v276) = v281;
            v280 = unk_93AE0[v274x].u_2.a32 + scaledU.dword * v279;
            LOWORD(v281) = v280;
            v282 = v280 >> 8;
            LOBYTE(v276) = BYTE1(v282);
            if ( v277 > widthViewPort_93AD8 )
              LOWORD(v277) = widthViewPort_93AD8;
            v275 = (unsigned __int16)v282;
LABEL_392:
            v1258x = v274x;
            v283 = (int)actTexture_93AD0;
            while ( 1 )
            {
              v284 = *(_BYTE *)(v276 + v283);
              if ( v284 )
                  tempScrPtr6[0] = v284;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v281);
              LOWORD(v281) = scaledU.dword + v281;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v281);
              v285 = v1149 + v281;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v286 = v277 - 1;
              if ( !v286 )
                break;
              v287 = *(_BYTE *)(v276 + v283);
              if ( v287 )
                  tempScrPtr6[1] = v287;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v285);
              LOWORD(v285) = scaledU.dword + v285;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v285);
              v288 = v1149 + v285;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v289 = v286 - 1;
              if ( !v289 )
                break;
              v290 = *(_BYTE *)(v276 + v283);
              if ( v290 )
                  tempScrPtr6[2] = v290;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v288);
              LOWORD(v288) = scaledU.dword + v288;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v288);
              v291 = v1149 + v288;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v292 = v289 - 1;
              if ( !v292 )
                break;
              v293 = *(_BYTE *)(v276 + v283);
              if ( v293 )
                  tempScrPtr6[3] = v293;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v291);
              LOWORD(v291) = scaledU.dword + v291;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v291);
              v294 = v1149 + v291;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v295 = v292 - 1;
              if ( !v295 )
                break;
              v296 = *(_BYTE *)(v276 + v283);
              if ( v296 )
                  tempScrPtr6[4] = v296;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v294);
              LOWORD(v294) = scaledU.dword + v294;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v294);
              v297 = v1149 + v294;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v298 = v295 - 1;
              if ( !v298 )
                break;
              v299 = *(_BYTE *)(v276 + v283);
              if ( v299 )
                  tempScrPtr6[5] = v299;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v297);
              LOWORD(v297) = scaledU.dword + v297;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v297);
              v300 = v1149 + v297;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v301 = v298 - 1;
              if ( !v301 )
                break;
              v302 = *(_BYTE *)(v276 + v283);
              if ( v302 )
                  tempScrPtr6[6] = v302;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v300);
              LOWORD(v300) = scaledU.dword + v300;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v300);
              v303 = v1149 + v300;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v304 = v301 - 1;
              if ( !v304 )
                break;
              v305 = *(_BYTE *)(v276 + v283);
              if ( v305 )
                  tempScrPtr6[7] = v305;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v303);
              LOWORD(v303) = scaledU.dword + v303;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v303);
              v306 = v1149 + v303;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v307 = v304 - 1;
              if ( !v307 )
                break;
              v308 = *(_BYTE *)(v276 + v283);
              if ( v308 )
                  tempScrPtr6[8] = v308;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v306);
              LOWORD(v306) = scaledU.dword + v306;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v306);
              v309 = v1149 + v306;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v310 = v307 - 1;
              if ( !v310 )
                break;
              v311 = *(_BYTE *)(v276 + v283);
              if ( v311 )
                  tempScrPtr6[9] = v311;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v309);
              LOWORD(v309) = scaledU.dword + v309;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v309);
              v312 = v1149 + v309;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v313 = v310 - 1;
              if ( !v313 )
                break;
              v314 = *(_BYTE *)(v276 + v283);
              if ( v314 )
                  tempScrPtr6[10] = v314;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v312);
              LOWORD(v312) = scaledU.dword + v312;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v312);
              v315 = v1149 + v312;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v316 = v313 - 1;
              if ( !v316 )
                break;
              v317 = *(_BYTE *)(v276 + v283);
              if ( v317 )
                  tempScrPtr6[11] = v317;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v315);
              LOWORD(v315) = scaledU.dword + v315;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v315);
              v318 = v1149 + v315;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v319 = v316 - 1;
              if ( !v319 )
                break;
              v320 = *(_BYTE *)(v276 + v283);
              if ( v320 )
                  tempScrPtr6[12] = v320;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v318);
              LOWORD(v318) = scaledU.dword + v318;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v318);
              v321 = v1149 + v318;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v322 = v319 - 1;
              if ( !v322 )
                break;
              v323 = *(_BYTE *)(v276 + v283);
              if ( v323 )
                  tempScrPtr6[13] = v323;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v321);
              LOWORD(v321) = scaledU.dword + v321;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v321);
              v324 = v1149 + v321;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v325 = v322 - 1;
              if ( !v325 )
                break;
              v326 = *(_BYTE *)(v276 + v283);
              if ( v326 )
                  tempScrPtr6[14] = v326;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v324);
              LOWORD(v324) = scaledU.dword + v324;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v324);
              v327 = v1149 + v324;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              v328 = v325 - 1;
              if ( !v328 )
                break;
              v329 = *(_BYTE *)(v276 + v283);
              if ( v329 )
                  tempScrPtr6[15] = v329;
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v327);
              LOWORD(v327) = scaledU.dword + v327;
              LOBYTE(v276) = BYTE2(scaledU.dword) + v171 + v276;
              v171 = __CFADD__(v1149, v327);
              v281 = v1149 + v327;
              BYTE1(v276) += BYTE2(scaledV.dword) + v171;
              LOWORD(v277) = v328 - 1;
              if ( !(_WORD)v277 )
                break;
              tempScrPtr6 += 16;
            }
            v274x = v1258x;
          }
LABEL_443:
          //v274 += 10;
          v274x++;
          if ( !--ySum_C )
            return;
        }
        if ( v277 > widthViewPort_93AD8 )
          LOWORD(v277) = widthViewPort_93AD8;
        bool16 = (__int16)v277 <= (__int16)v275;
        LOWORD(v277) = v277 - v275;
        if (bool16)
          goto LABEL_443;
        tempScrPtr6 += v275;
        v281 = __ROL4_16__(unk_93AE0[v274x].v_3.a32);
        BYTE1(v276) = v281;
        LOWORD(v281) = unk_93AE0[v274x].u_2.a16[0];
        LOBYTE(v276) = unk_93AE0[v274x].u_2.a16[1];
        goto LABEL_392;
      case 4:
LABEL_445:
        //for ( j = (uint16*)&unk_93AE0; ; j += 10 )
          for (jx = 0; ; jx++)
        {
          LOWORD(v29) = unk_93AE0[jx].x_0.a16[1];
          v331 = unk_93AE0[jx].y_1.a16[1];
          //v332 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr7 = actScrPtr;
          if ( (v29 & 0x8000u) == 0 )
            break;
          if ( (__int16)v331 > 0 )
          {
            v333 = scaledZ.dword * (unsigned __int16)-(__int16)v29;
            v334 = v333;
            v29 = v333 >> 8;
            v171 = __CFADD__(unk_93AE0[jx].z_4.a16[0], v334);
            v335 = unk_93AE0[jx].z_4.a16[0] + v334;
            BYTE1(v29) += unk_93AE0[jx].z_4.a16[1] + v171;
            if ( v331 > widthViewPort_93AD8 )
              LOWORD(v331) = widthViewPort_93AD8;
            v29 = (unsigned __int16)v29;
            LOBYTE(v29) = byte_967E0;
LABEL_455:
            while ( 1 )
            {
                tempScrPtr7[0] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v335);
              v336 = scaledZ.dword + v335;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v337 = v331 - 1;
              if ( !v337 )
                break;
              tempScrPtr7[1] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v336);
              v338 = scaledZ.dword + v336;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v339 = v337 - 1;
              if ( !v339 )
                break;
              tempScrPtr7[2] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v338);
              v340 = scaledZ.dword + v338;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v341 = v339 - 1;
              if ( !v341 )
                break;
              tempScrPtr7[3] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v340);
              v342 = scaledZ.dword + v340;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v343 = v341 - 1;
              if ( !v343 )
                break;
              tempScrPtr7[4] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v342);
              v344 = scaledZ.dword + v342;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v345 = v343 - 1;
              if ( !v345 )
                break;
              tempScrPtr7[5] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v344);
              v346 = scaledZ.dword + v344;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v347 = v345 - 1;
              if ( !v347 )
                break;
              tempScrPtr7[6] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v346);
              v348 = scaledZ.dword + v346;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v349 = v347 - 1;
              if ( !v349 )
                break;
              tempScrPtr7[7] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v348);
              v350 = scaledZ.dword + v348;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v351 = v349 - 1;
              if ( !v351 )
                break;
              tempScrPtr7[8] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v350);
              v352 = scaledZ.dword + v350;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v353 = v351 - 1;
              if ( !v353 )
                break;
              tempScrPtr7[9] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v352);
              v354 = scaledZ.dword + v352;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v355 = v353 - 1;
              if ( !v355 )
                break;
              tempScrPtr7[10] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v354);
              v356 = scaledZ.dword + v354;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v357 = v355 - 1;
              if ( !v357 )
                break;
              tempScrPtr7[11] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v356);
              v358 = scaledZ.dword + v356;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v359 = v357 - 1;
              if ( !v359 )
                break;
              tempScrPtr7[12] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v358);
              v360 = scaledZ.dword + v358;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v361 = v359 - 1;
              if ( !v361 )
                break;
              tempScrPtr7[13] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v360);
              v362 = scaledZ.dword + v360;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v363 = v361 - 1;
              if ( !v363 )
                break;
              tempScrPtr7[14] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v362);
              v364 = scaledZ.dword + v362;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v365 = v363 - 1;
              if ( !v365 )
                break;
              tempScrPtr7[15] = strPal.fog_B7934_B7924[v29];
              v171 = __CFADD__((_WORD)scaledZ.dword, v364);
              v335 = scaledZ.dword + v364;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              LOWORD(v331) = v365 - 1;
              if ( !(_WORD)v331 )
                break;
              tempScrPtr7 += 16;
            }
          }
LABEL_472:
          if ( !--ySum_C )
            return;
        }
        if ( v331 > widthViewPort_93AD8 )
          LOWORD(v331) = widthViewPort_93AD8;
        bool16 = (__int16)v331 <= (__int16)v29;
        LOWORD(v331) = v331 - v29;
        if (bool16)
          goto LABEL_472;
        tempScrPtr7 += v29;
        v29 = (unsigned __int8)byte_967E0;
        v335 = unk_93AE0[jx].z_4.a16[0];
        BYTE1(v29) = unk_93AE0[jx].z_4.a16[1];
        goto LABEL_455;
      case 5:
LABEL_474:
        //v1259 = (char *)&unk_93AE0;
        v1259y = 0;
        scaledVB.dword = scaledV.dword << 16;
        scaledZB = scaledZ.dword << 16;
        textPixel.word[1] = 0;
        textPos.word[1] = 0;
        while ( 1 )
        {
            //adress 0x245FFB_
            //debug
#ifdef debug1
            //if (compare_index_245FFB == 0x1d3)
            /*if (compare_index_245FFB == 0x1D0)
            {
                compare_index_245FFB++;
                compare_index_245FFB--;
            }
            add_compare(0x245FFB, true, true);
            compare_index_245FFB++;*/
#endif debug1
            //debug

          //v368 = (char*)&unk_93AE0[v1259x];
          //v1259x++;
          //v368 = v1259;
          //v1259 += 20;
          textPixel.word[0] = unk_93AE0[v1259y].x_0.a16[1];
          temp93AE0_Y1_1 = unk_93AE0[v1259y].y_1.a16[1];
          //v370 = pitchViewPort_93AD4 + actScrPtr;
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr3 = actScrPtr;
          if ((textPixel.dword & 0x8000u) == 0)
              break;
          if (temp93AE0_Y1_1 > 0)
          {
              textIndex = ((uint16)-textPixel.word[0]);
              tempU.dword = unk_93AE0[v1259y].u_2.a32 + scaledU.dword * textIndex;
              tempV.dword = unk_93AE0[v1259y].v_3.a32 + scaledV.dword * textIndex;
              tempZ.dword = unk_93AE0[v1259y].z_4.a32 + scaledZ.dword * textIndex;
              
              preTextPos.word[0] = tempU.word[0];
              preTextPos.word[1] = tempV.word[0];
              textPos.byte[0] = tempU.byte[2];//text posX
              textPos.byte[1] = tempV.byte[2];//text posY
              textPixel.byte[0] = tempU.byte[1];
              textPixel.byte[1] = tempZ.byte[2];
              textPixel.word[1] = 0;
              tempScrPosX.a16[0] = unk_93AE0[v1259y].y_1.a16[1];
              tempScrPosX.a16[1] = tempZ.word[0];              
              if (tempScrPosX.a16[0] > widthViewPort_93AD8)
                  tempScrPosX.a16[0] = widthViewPort_93AD8;
LABEL_484:
              tempScrPtr3plus = &tempScrPtr3[dword_74F95_754A5[tempScrPosX.a16[0] & 0xF]];
              tempTexture = actTexture_93AD0;

			  int index = 16 - tempScrPosX.a16[0] & 0xF;
			  while (1)
			  {
				  for (;index < 16; index++)
				  {
					  index %= 16;
					  textPixel.byte[0] = tempTexture[textPos.dword];//original pixel
                      textPos.byte[0] += scaledU.byte[2] + (scaledU.word[0] > uint16(scaledU.word[0] + preTextPos.word[0]));
					  textPos.byte[1] += scaledV.byte[2] + (scaledVB.dword > uint32(scaledVB.dword + preTextPos.dword));//texture y
					  preTextPos.word[0] += scaledU.word[0];
					  preTextPos.word[1] += scaledVB.word[1];
					  tempScrPtr3plus[index] = strPal.fog_B7934_B7924[textPixel.dword];//pixel with fog
					  textPixel.byte[1] += scaledZ.byte[2] + (scaledZB > uint32(scaledZB + tempScrPosX.a32));//z axis
					  tempScrPosX.a32 += scaledZB;
				  }
				  index = 0;
				  tempScrPtr3plus += 16;
				  if (tempScrPosX.a16[0] <= 16)
				  {
					  tempScrPosX.a16[0] -= 16;
					  break;
				  }
				  tempScrPosX.a16[0] -= 16;
			  }
          }
LABEL_501:
          if ( !--ySum_C )
            return;
          v1259y++;
        }
        if ( temp93AE0_Y1_1 > widthViewPort_93AD8 )
            temp93AE0_Y1_1 = widthViewPort_93AD8;
        //bool16 = temp93AE0_Y1_1 <= textPixel.word[0];
        //v374 = temp93AE0_Y1_1 - textPixel.dword;
        if (temp93AE0_Y1_1 <= textPixel.word[0])
          goto LABEL_501;
        tempScrPtr3 += textPixel.dword;
        textPos.byte[0] = unk_93AE0[v1259y].u_2.a16[1]; // U
        textPos.byte[1] = unk_93AE0[v1259y].v_3.a16[1]; // V
        preTextPos.word[0] = unk_93AE0[v1259y].u_2.a16[0];
        preTextPos.word[1] = unk_93AE0[v1259y].v_3.a16[0];    
        tempScrPosX.a16[0] = temp93AE0_Y1_1 - textPixel.dword;
        tempScrPosX.a16[1] = unk_93AE0[v1259y].z_4.a16[0];
        textPixel.byte[1] = unk_93AE0[v1259y].z_4.a16[1];        
        goto LABEL_484;
      case 6:
LABEL_503:
        //v1260 = (char *)&unk_93AE0;
        v1260x = 0;
        v1151 = scaledV.dword << 16;
        v1167 = scaledZ.dword << 16;
        HIWORD(v378) = 0;
        HIWORD(v379) = 0;
        while ( 1 )
        {
          v380x = v1260x;
          //v1260 += 20;
          v1260x++;
          LOWORD(v378) = unk_93AE0[v380x].x_0.a16[1];
          v381 = unk_93AE0[v380x].y_1.a16[1];
          //v382 = pitchViewPort_93AD4 + actScrPtr;
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr8 = actScrPtr;
          if ( (v378 & 0x8000u) == 0 )
            break;
          if ( (__int16)v381 > 0 )
          {
            v383 = (unsigned __int16)-(__int16)v378;
            v384 = __ROL4_16__(unk_93AE0[v380x].v_3.a32 + scaledV.dword * v383);
            BYTE1(v379) = v384;
            LOWORD(v384) = unk_93AE0[v380x].u_2.a16[0] + scaledU.dword * v383;
            v378 = (unsigned int)(unk_93AE0[v380x].u_2.a32 + scaledU.dword * v383) >> 8;
            LOBYTE(v379) = (unsigned int)(unk_93AE0[v380x].u_2.a32 + scaledU.dword * v383) >> 16;
            v385 = __ROL4_16__(unk_93AE0[v380x].z_4.a32 + scaledZ.dword * v383);
            BYTE1(v378) = v385;
            LOWORD(v385) = unk_93AE0[v380x].y_1.a16[1];
            v378 = (unsigned __int16)v378;
            if ( (__int16)v385 > (__int16)widthViewPort_93AD8 )
              LOWORD(v385) = widthViewPort_93AD8;
LABEL_513:
            tempScrPtr8plus = &tempScrPtr8[dword_74F95_754A5[v385 & 0xF]];
            v389 = (int)actTexture_93AD0;
            switch ( v385 & 0xF )
            {
              case 0:
                goto LABEL_514;
              case 1:
                goto LABEL_559;
              case 2:
                goto LABEL_556;
              case 3:
                goto LABEL_553;
              case 4:
                goto LABEL_550;
              case 5:
                goto LABEL_547;
              case 6:
                goto LABEL_544;
              case 7:
                goto LABEL_541;
              case 8:
                goto LABEL_538;
              case 9:
                goto LABEL_535;
              case 0xA:
                goto LABEL_532;
              case 0xB:
                goto LABEL_529;
              case 0xC:
                goto LABEL_526;
              case 0xD:
                goto LABEL_523;
              case 0xE:
                goto LABEL_520;
              case 0xF:
                while ( 1 )
                {
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[1] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_520:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[2] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_523:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[3] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_526:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[4] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_529:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[5] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_532:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[6] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_535:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[7] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_538:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[8] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_541:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[9] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_544:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[10] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_547:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[11] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_550:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[12] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_553:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[13] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_556:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[14] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
LABEL_559:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[15] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
                  tempScrPtr8plus += 16;
                  bool16 = (__int16)v385 <= 16;
                  LOWORD(v385) = v385 - 16;
                  if (bool16)
                    break;
LABEL_514:
                  LOBYTE(v378) = *(_BYTE *)(v379 + v389);
                  if ( (_BYTE)v378 )
                      tempScrPtr8plus[0] = strPal.fog_B7934_B7924[v378];
                  v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v384);
                  LOWORD(v384) = scaledU.dword + v384;
                  LOBYTE(v379) = BYTE2(scaledU.dword) + v171 + v379;
                  v171 = __CFADD__(v1151, v384);
                  v384 += v1151;
                  BYTE1(v379) += BYTE2(scaledV.dword) + v171;
                  v171 = __CFADD__(v1167, v385);
                  v385 += v1167;
                  BYTE1(v378) += BYTE2(scaledZ.dword) + v171;
                }
                break;
            }
          }
LABEL_562:
          if ( !--ySum_C )
            return;
        }
        if ( v381 > widthViewPort_93AD8 )
          LOWORD(v381) = widthViewPort_93AD8;
        bool16 = (__int16)v381 <= (__int16)v378;
        v386 = v381 - v378;
        if (bool16)
          goto LABEL_562;
        tempScrPtr8 += v378;
        LOBYTE(v379) = unk_93AE0[v380x].u_2.a16[1];
        v384 = __ROL4_16__(unk_93AE0[v380x].v_3.a32);
        v387 = v386;
        BYTE1(v379) = v384;
        LOWORD(v384) = unk_93AE0[v380x].u_2.a16[0];
        v385 = __ROL4_16__(unk_93AE0[v380x].z_4.a32);
        BYTE1(v378) = v385;
        LOWORD(v385) = v387;
        goto LABEL_513;
      case 7:
      case 11:
LABEL_564:
//adress 0x24674B_
//debug
#ifdef debug1
          if (compare_index_24674B == 0)
          {
              compare_index_24674B++;
              compare_index_24674B--;
          }
          //add_compare(0x24674B, true, true);
          compare_index_24674B++;
#endif debug1
//debug
        //v390 = (unsigned __int16 *)&unk_93AE0;
        v390x = 0;
        v1152 = scaledV.dword << 16;
        HIWORD(v391) = 0;
        HIWORD(v392) = 0;
        while ( 1 )
        {            
          LOWORD(v391) = unk_93AE0[v390x].x_0.a16[1];
          v393 = unk_93AE0[v390x].y_1.a16[1];
          //v394 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr9 = actScrPtr;
          if ( (v391 & 0x8000u) == 0 )
            break;
          if ( (__int16)v393 > 0 )
          {
            v395 = (unsigned __int16)-(__int16)v391;
            v397 = __ROL4_16__(unk_93AE0[v390x].v_3.a32 + scaledV.dword * v395);
            BYTE1(v392) = v397;
            v396 = unk_93AE0[v390x].u_2.a32 + scaledU.dword * v395;
            LOWORD(v397) = v396;
            v398 = v396 >> 8;
            LOBYTE(v392) = BYTE1(v398);
            if ( v393 > widthViewPort_93AD8 )
              LOWORD(v393) = widthViewPort_93AD8;
            v391 = (unsigned __int16)v398;
LABEL_574:
            v1261x = v390x;
            v399 = (int)actTexture_93AD0;
            BYTE1(v391) = byte_967E0;
            while ( 1 )
            {
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v397);
              LOWORD(v397) = scaledU.dword + v397;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v397);
              v400 = v1152 + v397;
              tempScrPtr9[0] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v401 = v393 - 1;
              if ( !v401 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v400);
              LOWORD(v400) = scaledU.dword + v400;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v400);
              v402 = v1152 + v400;
              tempScrPtr9[1] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v403 = v401 - 1;
              if ( !v403 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v402);
              LOWORD(v402) = scaledU.dword + v402;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v402);
              v404 = v1152 + v402;
              tempScrPtr9[2] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v405 = v403 - 1;
              if ( !v405 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v404);
              LOWORD(v404) = scaledU.dword + v404;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v404);
              v406 = v1152 + v404;
              tempScrPtr9[3] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v407 = v405 - 1;
              if ( !v407 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v406);
              LOWORD(v406) = scaledU.dword + v406;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v406);
              v408 = v1152 + v406;
              tempScrPtr9[4] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v409 = v407 - 1;
              if ( !v409 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v408);
              LOWORD(v408) = scaledU.dword + v408;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v408);
              v410 = v1152 + v408;
              tempScrPtr9[5] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v411 = v409 - 1;
              if ( !v411 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v410);
              LOWORD(v410) = scaledU.dword + v410;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v410);
              v412 = v1152 + v410;
              tempScrPtr9[6] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v413 = v411 - 1;
              if ( !v413 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v412);
              LOWORD(v412) = scaledU.dword + v412;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v412);
              v414 = v1152 + v412;
              tempScrPtr9[7] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v415 = v413 - 1;
              if ( !v415 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v414);
              LOWORD(v414) = scaledU.dword + v414;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v414);
              v416 = v1152 + v414;
              tempScrPtr9[8] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v417 = v415 - 1;
              if ( !v417 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v416);
              LOWORD(v416) = scaledU.dword + v416;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v416);
              v418 = v1152 + v416;
              tempScrPtr9[9] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v419 = v417 - 1;
              if ( !v419 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v418);
              LOWORD(v418) = scaledU.dword + v418;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v418);
              v420 = v1152 + v418;
              tempScrPtr9[10] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v421 = v419 - 1;
              if ( !v421 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v420);
              LOWORD(v420) = scaledU.dword + v420;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v420);
              v422 = v1152 + v420;
              tempScrPtr9[11] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v423 = v421 - 1;
              if ( !v423 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v422);
              LOWORD(v422) = scaledU.dword + v422;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v422);
              v424 = v1152 + v422;
              tempScrPtr9[12] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v425 = v423 - 1;
              if ( !v425 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v424);
              LOWORD(v424) = scaledU.dword + v424;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v424);
              v426 = v1152 + v424;
              tempScrPtr9[13] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v427 = v425 - 1;
              if ( !v427 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v426);
              LOWORD(v426) = scaledU.dword + v426;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v426);
              v428 = v1152 + v426;
              tempScrPtr9[14] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              v429 = v427 - 1;
              if ( !v429 )
                break;
              LOBYTE(v391) = *(_BYTE *)(v392 + v399);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v428);
              LOWORD(v428) = scaledU.dword + v428;
              LOBYTE(v392) = BYTE2(scaledU.dword) + v171 + v392;
              v171 = __CFADD__(v1152, v428);
              v397 = v1152 + v428;
              tempScrPtr9[15] = strPal.fog_B7934_B7924[v391];
              BYTE1(v392) += BYTE2(scaledV.dword) + v171;
              LOWORD(v393) = v429 - 1;
              if ( !(_WORD)v393 )
                break;
              tempScrPtr9 += 16;
            }
            v390x = v1261x;
          }
LABEL_593:
          //v390 += 10;
          v390x++;
          if ( !--ySum_C )
            return;
        }
        if ( v393 > widthViewPort_93AD8 )
          LOWORD(v393) = widthViewPort_93AD8;
        bool16 = (__int16)v393 <= (__int16)v391;
        LOWORD(v393) = v393 - v391;
        if (bool16)
          goto LABEL_593;
        tempScrPtr9 += v391;
        v397 = __ROL4_16__(unk_93AE0[v390x].v_3.a32);
        BYTE1(v392) = v397;
        LOWORD(v397) = unk_93AE0[v390x].u_2.a16[0];
        LOBYTE(v392) = unk_93AE0[v390x].u_2.a16[1];
        goto LABEL_574;
      case 8:
LABEL_595:
        //v430 = (unsigned __int16 *)&unk_93AE0;
        v430x = 0;
        v1153 = scaledV.dword << 16;
        HIWORD(v431) = 0;
        HIWORD(v432) = 0;
        while ( 1 )
        {
          LOWORD(v431) = unk_93AE0[v390x].x_0.a16[1];
          v433 = unk_93AE0[v430x].y_1.a16[1];
          //v434 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr10 = actScrPtr;
          if ( (v431 & 0x8000u) == 0 )
            break;
          if ( (__int16)v433 > 0 )
          {
            v435 = (unsigned __int16)-(__int16)v431;
            v437 = __ROL4_16__(unk_93AE0[v430x].v_3.a32 + scaledV.dword * v435);
            BYTE1(v432) = v437;
            v436 = unk_93AE0[v430x].u_2.a32 + scaledU.dword * v435;
            LOWORD(v437) = v436;
            v438 = v436 >> 8;
            LOBYTE(v432) = BYTE1(v438);
            if ( v433 > widthViewPort_93AD8 )
              LOWORD(v433) = widthViewPort_93AD8;
            v431 = (unsigned __int16)v438;
LABEL_605:
            v1262x = v430x;
            v439 = (int)actTexture_93AD0;
            BYTE1(v431) = byte_967E0;
            while ( 1 )
            {
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v437);
              LOWORD(v437) = scaledU.dword + v437;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[0] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v437);
              v440 = v1153 + v437;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v441 = v433 - 1;
              if ( !v441 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v440);
              LOWORD(v440) = scaledU.dword + v440;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[1] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v440);
              v442 = v1153 + v440;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v443 = v441 - 1;
              if ( !v443 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v442);
              LOWORD(v442) = scaledU.dword + v442;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[2] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v442);
              v444 = v1153 + v442;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v445 = v443 - 1;
              if ( !v445 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v444);
              LOWORD(v444) = scaledU.dword + v444;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[3] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v444);
              v446 = v1153 + v444;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v447 = v445 - 1;
              if ( !v447 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v446);
              LOWORD(v446) = scaledU.dword + v446;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[4] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v446);
              v448 = v1153 + v446;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v449 = v447 - 1;
              if ( !v449 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v448);
              LOWORD(v448) = scaledU.dword + v448;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[5] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v448);
              v450 = v1153 + v448;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v451 = v449 - 1;
              if ( !v451 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v450);
              LOWORD(v450) = scaledU.dword + v450;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[6] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v450);
              v452 = v1153 + v450;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v453 = v451 - 1;
              if ( !v453 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v452);
              LOWORD(v452) = scaledU.dword + v452;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[7] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v452);
              v454 = v1153 + v452;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v455 = v453 - 1;
              if ( !v455 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v454);
              LOWORD(v454) = scaledU.dword + v454;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[8] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v454);
              v456 = v1153 + v454;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v457 = v455 - 1;
              if ( !v457 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v456);
              LOWORD(v456) = scaledU.dword + v456;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[9] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v456);
              v458 = v1153 + v456;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v459 = v457 - 1;
              if ( !v459 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v458);
              LOWORD(v458) = scaledU.dword + v458;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[10] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v458);
              v460 = v1153 + v458;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v461 = v459 - 1;
              if ( !v461 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v460);
              LOWORD(v460) = scaledU.dword + v460;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[11] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v460);
              v462 = v1153 + v460;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v463 = v461 - 1;
              if ( !v463 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v462);
              LOWORD(v462) = scaledU.dword + v462;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[12] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v462);
              v464 = v1153 + v462;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v465 = v463 - 1;
              if ( !v465 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v464);
              LOWORD(v464) = scaledU.dword + v464;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[13] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v464);
              v466 = v1153 + v464;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v467 = v465 - 1;
              if ( !v467 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v466);
              LOWORD(v466) = scaledU.dword + v466;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[14] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v466);
              v468 = v1153 + v466;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              v469 = v467 - 1;
              if ( !v469 )
                break;
              LOBYTE(v431) = *(_BYTE *)(v432 + v439);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v468);
              LOWORD(v468) = scaledU.dword + v468;
              LOBYTE(v432) = BYTE2(scaledU.dword) + v171 + v432;
              if ( (_BYTE)v431 )
                  tempScrPtr10[15] = strPal.fog_B7934_B7924[v431];
              v171 = __CFADD__(v1153, v468);
              v437 = v1153 + v468;
              BYTE1(v432) += BYTE2(scaledV.dword) + v171;
              LOWORD(v433) = v469 - 1;
              if ( !(_WORD)v433 )
                break;
              tempScrPtr10 += 16;
            }
            v430x = v1262x;
          }
LABEL_656:
          //v430 += 10;
          v430x++;
          if ( !--ySum_C )
            return;
        }
        if ( v433 > widthViewPort_93AD8 )
          LOWORD(v433) = widthViewPort_93AD8;
        bool16 = (__int16)v433 <= (__int16)v431;
        LOWORD(v433) = v433 - v431;
        if (bool16)
          goto LABEL_656;
        tempScrPtr10 += v431;
        v437 = __ROL4_16__(unk_93AE0[v430x].v_3.a32);
        BYTE1(v432) = v437;
        LOWORD(v437) = unk_93AE0[v430x].u_2.a32;
        LOBYTE(v432) = unk_93AE0[v430x].u_2.a16[1];
        goto LABEL_605;
      case 9:
      case 10:
LABEL_658:
        //v470 = (unsigned __int16 *)&unk_93AE0;
        v470x = 0;
        v1154 = scaledV.dword << 16;
        HIWORD(v471) = 0;
        HIWORD(v472) = 0;
        while ( 1 )
        {
          LOWORD(v471) = unk_93AE0[v470x].x_0.a16[1];
          v473 = unk_93AE0[v470x].y_1.a16[1];
          //v474 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr11 = actScrPtr;
          if ( (v471 & 0x8000u) == 0 )
            break;
          if ( (__int16)v473 > 0 )
          {
            v475 = (unsigned __int16)-(__int16)v471;
            v477 = __ROL4_16__(unk_93AE0[v470x].v_3.a32 + scaledV.dword * v475);
            BYTE1(v472) = v477;
            v476 = unk_93AE0[v470x].u_2.a32 + scaledU.dword * v475;
            LOWORD(v477) = v476;
            v478 = v476 >> 8;
            LOBYTE(v472) = BYTE1(v478);
            if ( v473 > widthViewPort_93AD8 )
              LOWORD(v473) = widthViewPort_93AD8;
            v471 = (unsigned __int16)v478;
LABEL_668:
            v1263x = v470x;
            v479 = (int)actTexture_93AD0;
            while ( 1 )
            {
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v477);
              LOWORD(v477) = scaledU.dword + v477;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[0];
                tempScrPtr11[0] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v477);
              v480 = v1154 + v477;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v481 = v473 - 1;
              if ( !v481 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v480);
              LOWORD(v480) = scaledU.dword + v480;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[1];
                tempScrPtr11[1] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v480);
              v482 = v1154 + v480;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v483 = v481 - 1;
              if ( !v483 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v482);
              LOWORD(v482) = scaledU.dword + v482;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[2];
                tempScrPtr11[2] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v482);
              v484 = v1154 + v482;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v485 = v483 - 1;
              if ( !v485 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v484);
              LOWORD(v484) = scaledU.dword + v484;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[3];
                tempScrPtr11[3] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v484);
              v486 = v1154 + v484;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v487 = v485 - 1;
              if ( !v487 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v486);
              LOWORD(v486) = scaledU.dword + v486;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[4];
                tempScrPtr11[4] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v486);
              v488 = v1154 + v486;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v489 = v487 - 1;
              if ( !v489 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v488);
              LOWORD(v488) = scaledU.dword + v488;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[5];
                tempScrPtr11[5] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v488);
              v490 = v1154 + v488;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v491 = v489 - 1;
              if ( !v491 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v490);
              LOWORD(v490) = scaledU.dword + v490;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[6];
                tempScrPtr11[6] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v490);
              v492 = v1154 + v490;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v493 = v491 - 1;
              if ( !v493 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v492);
              LOWORD(v492) = scaledU.dword + v492;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[7];
                tempScrPtr11[7] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v492);
              v494 = v1154 + v492;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v495 = v493 - 1;
              if ( !v495 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v494);
              LOWORD(v494) = scaledU.dword + v494;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[8];
                tempScrPtr11[8] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v494);
              v496 = v1154 + v494;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v497 = v495 - 1;
              if ( !v497 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v496);
              LOWORD(v496) = scaledU.dword + v496;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[9];
                tempScrPtr11[9] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v496);
              v498 = v1154 + v496;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v499 = v497 - 1;
              if ( !v499 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v498);
              LOWORD(v498) = scaledU.dword + v498;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[10];
                tempScrPtr11[10] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v498);
              v500 = v1154 + v498;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v501 = v499 - 1;
              if ( !v501 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v500);
              LOWORD(v500) = scaledU.dword + v500;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[11];
                tempScrPtr11[11] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v500);
              v502 = v1154 + v500;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v503 = v501 - 1;
              if ( !v503 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v502);
              LOWORD(v502) = scaledU.dword + v502;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[12];
                tempScrPtr11[12] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v502);
              v504 = v1154 + v502;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v505 = v503 - 1;
              if ( !v505 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v504);
              LOWORD(v504) = scaledU.dword + v504;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[13];
                tempScrPtr11[13] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v504);
              v506 = v1154 + v504;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v507 = v505 - 1;
              if ( !v507 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v506);
              LOWORD(v506) = scaledU.dword + v506;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[14];
                tempScrPtr11[14] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v506);
              v508 = v1154 + v506;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              v509 = v507 - 1;
              if ( !v509 )
                break;
              BYTE1(v471) = *(_BYTE *)(v472 + v479);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v508);
              LOWORD(v508) = scaledU.dword + v508;
              LOBYTE(v472) = BYTE2(scaledU.dword) + v171 + v472;
              if ( BYTE1(v471) )
              {
                LOBYTE(v471) = tempScrPtr11[15];
                tempScrPtr11[15] = strPal.fog_B7934_B7924[v471];
              }
              v171 = __CFADD__(v1154, v508);
              v477 = v1154 + v508;
              BYTE1(v472) += BYTE2(scaledV.dword) + v171;
              LOWORD(v473) = v509 - 1;
              if ( !(_WORD)v473 )
                break;
              tempScrPtr11 += 16;
            }
            v470x = v1263x;
          }
LABEL_719:
          //v470 += 10;
          v470x++;
          if ( !--ySum_C )
            return;
        }
        if ( v473 > widthViewPort_93AD8 )
          LOWORD(v473) = widthViewPort_93AD8;
        bool16 = (__int16)v473 <= (__int16)v471;
        LOWORD(v473) = v473 - v471;
        if (bool16)
          goto LABEL_719;
        tempScrPtr11 += v471;
        v477 = __ROL4_16__(unk_93AE0[v470x].v_3.a32);
        BYTE1(v472) = v477;
        LOWORD(v477) = unk_93AE0[v470x].u_2.a32;
        LOBYTE(v472) = unk_93AE0[v470x].u_2.a16[1];
        goto LABEL_668;
      case 12:
LABEL_721:
        //v510 = (unsigned __int16 *)&unk_93AE0;
        v510x = 0;
        v1155 = scaledV.dword << 16;
        HIWORD(v511) = 0;
        HIWORD(v512) = 0;
        while ( 1 )
        {
          LOWORD(v511) = unk_93AE0[v510x].x_0.a16[1];
          v513 = unk_93AE0[v510x].y_1.a16[1];
          //v514 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr12 = actScrPtr;
          if ( (v511 & 0x8000u) == 0 )
            break;
          if ( (__int16)v513 > 0 )
          {
            v515 = (unsigned __int16)-(__int16)v511;
            v517 = __ROL4_16__(unk_93AE0[v510x].v_3.a32 + scaledV.dword * v515);
            BYTE1(v512) = v517;
            v516 = unk_93AE0[v510x].u_2.a32 + scaledU.dword * v515;
            LOWORD(v517) = v516;
            v518 = v516 >> 8;
            LOBYTE(v512) = BYTE1(v518);
            if ( v513 > widthViewPort_93AD8 )
              LOWORD(v513) = widthViewPort_93AD8;
            v511 = (unsigned __int16)v518;
LABEL_731:
            v1264x = v510x;
            v519 = (int)actTexture_93AD0;
            LOBYTE(v511) = byte_967E0;
            while ( 1 )
            {
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v517);
              LOWORD(v517) = scaledU.dword + v517;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v517);
              v520 = v1155 + v517;
              tempScrPtr12[0] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v521 = v513 - 1;
              if ( !v521 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v520);
              LOWORD(v520) = scaledU.dword + v520;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v520);
              v522 = v1155 + v520;
              tempScrPtr12[1] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v523 = v521 - 1;
              if ( !v523 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v522);
              LOWORD(v522) = scaledU.dword + v522;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v522);
              v524 = v1155 + v522;
              tempScrPtr12[2] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v525 = v523 - 1;
              if ( !v525 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v524);
              LOWORD(v524) = scaledU.dword + v524;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v524);
              v526 = v1155 + v524;
              tempScrPtr12[3] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v527 = v525 - 1;
              if ( !v527 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v526);
              LOWORD(v526) = scaledU.dword + v526;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v526);
              v528 = v1155 + v526;
              tempScrPtr12[4] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v529 = v527 - 1;
              if ( !v529 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v528);
              LOWORD(v528) = scaledU.dword + v528;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v528);
              v530 = v1155 + v528;
              tempScrPtr12[5] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v531 = v529 - 1;
              if ( !v531 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v530);
              LOWORD(v530) = scaledU.dword + v530;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v530);
              v532 = v1155 + v530;
              tempScrPtr12[6] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v533 = v531 - 1;
              if ( !v533 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v532);
              LOWORD(v532) = scaledU.dword + v532;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v532);
              v534 = v1155 + v532;
              tempScrPtr12[7] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v535 = v533 - 1;
              if ( !v535 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v534);
              LOWORD(v534) = scaledU.dword + v534;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v534);
              v536 = v1155 + v534;
              tempScrPtr12[8] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v537 = v535 - 1;
              if ( !v537 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v536);
              LOWORD(v536) = scaledU.dword + v536;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v536);
              v538 = v1155 + v536;
              tempScrPtr12[9] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v539 = v537 - 1;
              if ( !v539 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v538);
              LOWORD(v538) = scaledU.dword + v538;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v538);
              v540 = v1155 + v538;
              tempScrPtr12[10] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v541 = v539 - 1;
              if ( !v541 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v540);
              LOWORD(v540) = scaledU.dword + v540;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v540);
              v542 = v1155 + v540;
              tempScrPtr12[11] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v543 = v541 - 1;
              if ( !v543 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v542);
              LOWORD(v542) = scaledU.dword + v542;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v542);
              v544 = v1155 + v542;
              tempScrPtr12[12] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v545 = v543 - 1;
              if ( !v545 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v544);
              LOWORD(v544) = scaledU.dword + v544;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v544);
              v546 = v1155 + v544;
              tempScrPtr12[13] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v547 = v545 - 1;
              if ( !v547 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v546);
              LOWORD(v546) = scaledU.dword + v546;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v546);
              v548 = v1155 + v546;
              tempScrPtr12[14] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              v549 = v547 - 1;
              if ( !v549 )
                break;
              BYTE1(v511) = *(_BYTE *)(v512 + v519);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v548);
              LOWORD(v548) = scaledU.dword + v548;
              LOBYTE(v512) = BYTE2(scaledU.dword) + v171 + v512;
              v171 = __CFADD__(v1155, v548);
              v517 = v1155 + v548;
              tempScrPtr12[15] = strPal.byte_BB934_BB924[v511];
              BYTE1(v512) += BYTE2(scaledV.dword) + v171;
              LOWORD(v513) = v549 - 1;
              if ( !(_WORD)v513 )
                break;
              tempScrPtr12 += 16;
            }
            v510x = v1264x;
          }
LABEL_750:
          //v510 += 10;
          v510x++;
          if ( !--ySum_C )
            return;
        }
        if ( v513 > widthViewPort_93AD8 )
          LOWORD(v513) = widthViewPort_93AD8;
        bool16 = (__int16)v513 <= (__int16)v511;
        LOWORD(v513) = v513 - v511;
        if (bool16)
          goto LABEL_750;
        tempScrPtr12 += v511;
        v517 = __ROL4_16__(unk_93AE0[v510x].v_3.a32);
        BYTE1(v512) = v517;
        LOWORD(v517) = unk_93AE0[v510x].u_2.a32;
        LOBYTE(v512) = unk_93AE0[v510x].u_2.a16[1];
        goto LABEL_731;
      case 13:
LABEL_752:
        //v550 = (unsigned __int16 *)&unk_93AE0;
        v550x = 0;
        v1156 = scaledV.dword << 16;
        HIWORD(v551) = 0;
        HIWORD(v552) = 0;
        while ( 1 )
        {
          LOWORD(v551) = unk_93AE0[v550x].x_0.a16[1];
          v553 = unk_93AE0[v550x].v_3.a16[1];
          //v554 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr13 = actScrPtr;
          if ( (v551 & 0x8000u) == 0 )
            break;
          if ( (__int16)v553 > 0 )
          {
            v555 = (unsigned __int16)-(__int16)v551;
            v557 = __ROL4_16__(unk_93AE0[v550x].v_3.a32 + scaledV.dword * v555);
            BYTE1(v552) = v557;
            v556 = unk_93AE0[v550x].u_2.a32 + scaledU.dword * v555;
            LOWORD(v557) = v556;
            v558 = v556 >> 8;
            LOBYTE(v552) = BYTE1(v558);
            if ( v553 > widthViewPort_93AD8 )
              LOWORD(v553) = widthViewPort_93AD8;
            v551 = (unsigned __int16)v558;
LABEL_762:
            v1265x = v550x;
            v559 = (int)actTexture_93AD0;
            BYTE1(v551) = byte_967E0;
            while ( 1 )
            {
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v557);
              LOWORD(v557) = scaledU.dword + v557;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v557);
              v560 = v1156 + v557;
              tempScrPtr13[0] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v561 = v553 - 1;
              if ( !v561 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v560);
              LOWORD(v560) = scaledU.dword + v560;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v560);
              v562 = v1156 + v560;
              tempScrPtr13[1] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v563 = v561 - 1;
              if ( !v563 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v562);
              LOWORD(v562) = scaledU.dword + v562;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v562);
              v564 = v1156 + v562;
              tempScrPtr13[2] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v565 = v563 - 1;
              if ( !v565 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v564);
              LOWORD(v564) = scaledU.dword + v564;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v564);
              v566 = v1156 + v564;
              tempScrPtr13[3] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v567 = v565 - 1;
              if ( !v567 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v566);
              LOWORD(v566) = scaledU.dword + v566;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v566);
              v568 = v1156 + v566;
              tempScrPtr13[4] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v569 = v567 - 1;
              if ( !v569 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v568);
              LOWORD(v568) = scaledU.dword + v568;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v568);
              v570 = v1156 + v568;
              tempScrPtr13[5] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v571 = v569 - 1;
              if ( !v571 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v570);
              LOWORD(v570) = scaledU.dword + v570;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v570);
              v572 = v1156 + v570;
              tempScrPtr13[6] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v573 = v571 - 1;
              if ( !v573 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v572);
              LOWORD(v572) = scaledU.dword + v572;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v572);
              v574 = v1156 + v572;
              tempScrPtr13[7] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v575 = v573 - 1;
              if ( !v575 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v574);
              LOWORD(v574) = scaledU.dword + v574;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v574);
              v576 = v1156 + v574;
              tempScrPtr13[8] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v577 = v575 - 1;
              if ( !v577 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v576);
              LOWORD(v576) = scaledU.dword + v576;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v576);
              v578 = v1156 + v576;
              tempScrPtr13[9] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v579 = v577 - 1;
              if ( !v579 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v578);
              LOWORD(v578) = scaledU.dword + v578;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v578);
              v580 = v1156 + v578;
              tempScrPtr13[10] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v581 = v579 - 1;
              if ( !v581 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v580);
              LOWORD(v580) = scaledU.dword + v580;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v580);
              v582 = v1156 + v580;
              tempScrPtr13[11] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v583 = v581 - 1;
              if ( !v583 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v582);
              LOWORD(v582) = scaledU.dword + v582;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v582);
              v584 = v1156 + v582;
              tempScrPtr13[12] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v585 = v583 - 1;
              if ( !v585 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v584);
              LOWORD(v584) = scaledU.dword + v584;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v584);
              v586 = v1156 + v584;
              tempScrPtr13[13] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v587 = v585 - 1;
              if ( !v587 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v586);
              LOWORD(v586) = scaledU.dword + v586;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v586);
              v588 = v1156 + v586;
              tempScrPtr13[14] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              v589 = v587 - 1;
              if ( !v589 )
                break;
              LOBYTE(v551) = *(_BYTE *)(v552 + v559);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v588);
              LOWORD(v588) = scaledU.dword + v588;
              LOBYTE(v552) = BYTE2(scaledU.dword) + v171 + v552;
              v171 = __CFADD__(v1156, v588);
              v557 = v1156 + v588;
              tempScrPtr13[15] = strPal.byte_BB934_BB924[v551];
              BYTE1(v552) += BYTE2(scaledV.dword) + v171;
              LOWORD(v553) = v589 - 1;
              if ( !(_WORD)v553 )
                break;
              tempScrPtr13 += 16;
            }
            v550x = v1265x;
          }
LABEL_781:
          //v550 += 10;
          v550x++;
          if ( !--ySum_C )
            return;
        }
        if ( v553 > widthViewPort_93AD8 )
          LOWORD(v553) = widthViewPort_93AD8;
        bool16 = (__int16)v553 <= (__int16)v551;
        LOWORD(v553) = v553 - v551;
        if (bool16)
          goto LABEL_781;
        tempScrPtr13 += v551;
        v557 = __ROL4_16__(unk_93AE0[v550x].v_3.a32);
        BYTE1(v552) = v557;
        LOWORD(v557) = unk_93AE0[v550x].u_2.a32;
        LOBYTE(v552) = unk_93AE0[v550x].u_2.a16[1];
        goto LABEL_762;
      case 14:
LABEL_783:
        //v590 = (unsigned __int16 *)&unk_93AE0;
        v590x = 0;
        tempScrPtr14 = actScrPtr;
        HIWORD(v592) = 0;
        BYTE1(v592) = byte_967E0;
        HIWORD(v593) = 0;
        while ( 1 )
        {
          LOWORD(v593) = unk_93AE0[v590x].x_0.a16[1];
          v594 = unk_93AE0[v590x].y_1.a16[1];
          tempScrPtr14 += pitchViewPort_93AD4;
          if ( (v593 & 0x8000u) == 0 )
            break;
          if ( (__int16)v594 > 0 )
          {
            if ( v594 > widthViewPort_93AD8 )
              LOWORD(v594) = widthViewPort_93AD8;
LABEL_793:
            for (tempScrPtr14plus = tempScrPtr14; ; tempScrPtr14plus += 16 )
            {
              LOBYTE(v592) = tempScrPtr14plus[0];
              tempScrPtr14plus[0] = strPal.byte_BB934_BB924[v592];
              v596 = v594 - 1;
              if ( !v596 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[1];
              tempScrPtr14plus[1] = strPal.byte_BB934_BB924[v592];
              v597 = v596 - 1;
              if ( !v597 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[2];
              tempScrPtr14plus[2] = strPal.byte_BB934_BB924[v592];
              v598 = v597 - 1;
              if ( !v598 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[3];
              tempScrPtr14plus[3] = strPal.byte_BB934_BB924[v592];
              v599 = v598 - 1;
              if ( !v599 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[4];
              tempScrPtr14plus[4] = strPal.byte_BB934_BB924[v592];
              v600 = v599 - 1;
              if ( !v600 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[5];
              tempScrPtr14plus[5] = strPal.byte_BB934_BB924[v592];
              v601 = v600 - 1;
              if ( !v601 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[6];
              tempScrPtr14plus[6] = strPal.byte_BB934_BB924[v592];
              v602 = v601 - 1;
              if ( !v602 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[7];
              tempScrPtr14plus[7] = strPal.byte_BB934_BB924[v592];
              v603 = v602 - 1;
              if ( !v603 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[8];
              tempScrPtr14plus[8] = strPal.byte_BB934_BB924[v592];
              v604 = v603 - 1;
              if ( !v604 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[9];
              tempScrPtr14plus[9] = strPal.byte_BB934_BB924[v592];
              v605 = v604 - 1;
              if ( !v605 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[10];
              tempScrPtr14plus[10] = strPal.byte_BB934_BB924[v592];
              v606 = v605 - 1;
              if ( !v606 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[11];
              tempScrPtr14plus[11] = strPal.byte_BB934_BB924[v592];
              v607 = v606 - 1;
              if ( !v607 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[12];
              tempScrPtr14plus[12] = strPal.byte_BB934_BB924[v592];
              v608 = v607 - 1;
              if ( !v608 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[13];
              tempScrPtr14plus[13] = strPal.byte_BB934_BB924[v592];
              v609 = v608 - 1;
              if ( !v609 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[14];
              tempScrPtr14plus[14] = strPal.byte_BB934_BB924[v592];
              v610 = v609 - 1;
              if ( !v610 )
                break;
              LOBYTE(v592) = tempScrPtr14plus[15];
              tempScrPtr14plus[15] = strPal.byte_BB934_BB924[v592];
              LOWORD(v594) = v610 - 1;
              if ( !(_WORD)v594 )
                break;
            }
          }
LABEL_810:
          //v590 += 10;
          v590x++;
          if ( !--ySum_C )
            return;
        }
        if ( v594 > widthViewPort_93AD8 )
          LOWORD(v594) = widthViewPort_93AD8;
        bool16 = (__int16)v594 <= (__int16)v593;
        LOWORD(v594) = v594 - v593;
        if (bool16)
          goto LABEL_810;
        tempScrPtr14plus = &tempScrPtr14[v593];
        goto LABEL_793;
      case 15:
LABEL_812:
        //v611 = (unsigned __int16 *)&unk_93AE0;
        v611x = 0;
        tempScrPtr15 = actScrPtr;
        v613 = (unsigned __int8)byte_967E0;
        HIWORD(v614) = 0;
        while ( 1 )
        {
          LOWORD(v614) = unk_93AE0[v611x].x_0.a16[1];
          v615 = unk_93AE0[v611x].y_1.a16[1];
          tempScrPtr15 += pitchViewPort_93AD4;
          if ( (v614 & 0x8000u) == 0 )
            break;
          if ( (__int16)v615 > 0 )
          {
            if ( v615 > widthViewPort_93AD8 )
              LOWORD(v615) = widthViewPort_93AD8;
LABEL_822:
            for (tempScrPtr15plus = tempScrPtr15; ; tempScrPtr15plus += 16 )
            {
              BYTE1(v613) = tempScrPtr15plus[0];
              tempScrPtr15plus[0] = strPal.byte_BB934_BB924[v613];
              v617 = v615 - 1;
              if ( !v617 )
                break;
              BYTE1(v613) = tempScrPtr15plus[1];
              tempScrPtr15plus[1] = strPal.byte_BB934_BB924[v613];
              v618 = v617 - 1;
              if ( !v618 )
                break;
              BYTE1(v613) = tempScrPtr15plus[2];
              tempScrPtr15plus[2] = strPal.byte_BB934_BB924[v613];
              v619 = v618 - 1;
              if ( !v619 )
                break;
              BYTE1(v613) = tempScrPtr15plus[3];
              tempScrPtr15plus[3] = strPal.byte_BB934_BB924[v613];
              v620 = v619 - 1;
              if ( !v620 )
                break;
              BYTE1(v613) = tempScrPtr15plus[4];
              tempScrPtr15plus[4] = strPal.byte_BB934_BB924[v613];
              v621 = v620 - 1;
              if ( !v621 )
                break;
              BYTE1(v613) = tempScrPtr15plus[5];
              tempScrPtr15plus[5] = strPal.byte_BB934_BB924[v613];
              v622 = v621 - 1;
              if ( !v622 )
                break;
              BYTE1(v613) = tempScrPtr15plus[6];
              tempScrPtr15plus[6] = strPal.byte_BB934_BB924[v613];
              v623 = v622 - 1;
              if ( !v623 )
                break;
              BYTE1(v613) = tempScrPtr15plus[7];
              tempScrPtr15plus[7] = strPal.byte_BB934_BB924[v613];
              v624 = v623 - 1;
              if ( !v624 )
                break;
              BYTE1(v613) = tempScrPtr15plus[8];
              tempScrPtr15plus[8] = strPal.byte_BB934_BB924[v613];
              v625 = v624 - 1;
              if ( !v625 )
                break;
              BYTE1(v613) = tempScrPtr15plus[9];
              tempScrPtr15plus[9] = strPal.byte_BB934_BB924[v613];
              v626 = v625 - 1;
              if ( !v626 )
                break;
              BYTE1(v613) = tempScrPtr15plus[10];
              tempScrPtr15plus[10] = strPal.byte_BB934_BB924[v613];
              v627 = v626 - 1;
              if ( !v627 )
                break;
              BYTE1(v613) = tempScrPtr15plus[11];
              tempScrPtr15plus[11] = strPal.byte_BB934_BB924[v613];
              v628 = v627 - 1;
              if ( !v628 )
                break;
              BYTE1(v613) = tempScrPtr15plus[12];
              tempScrPtr15plus[12] = strPal.byte_BB934_BB924[v613];
              v629 = v628 - 1;
              if ( !v629 )
                break;
              BYTE1(v613) = tempScrPtr15plus[13];
              tempScrPtr15plus[13] = strPal.byte_BB934_BB924[v613];
              v630 = v629 - 1;
              if ( !v630 )
                break;
              BYTE1(v613) = tempScrPtr15plus[14];
              tempScrPtr15plus[14] = strPal.byte_BB934_BB924[v613];
              v631 = v630 - 1;
              if ( !v631 )
                break;
              BYTE1(v613) = tempScrPtr15plus[15];
              tempScrPtr15plus[15] = strPal.byte_BB934_BB924[v613];
              LOWORD(v615) = v631 - 1;
              if ( !(_WORD)v615 )
                break;
            }
          }
LABEL_839:
          //v611 += 10;
          v611x++;
          if ( !--ySum_C )
            return;
        }
        if ( v615 > widthViewPort_93AD8 )
          LOWORD(v615) = widthViewPort_93AD8;
        bool16 = (__int16)v615 <= (__int16)v614;
        LOWORD(v615) = v615 - v614;
        if (bool16)
          goto LABEL_839;
        tempScrPtr15plus = &tempScrPtr15[v614];
        goto LABEL_822;
      case 16:
LABEL_841:
        //v632 = (unsigned __int16 *)&unk_93AE0;
        v632x = 0;
        HIWORD(v633) = 0;
        while ( 1 )
        {
          LOWORD(v29) = unk_93AE0[v632x].x_0.a16[1];
          v634 = unk_93AE0[v632x].y_1.a16[1];
          //v635 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr16 = actScrPtr;
          if ( (v29 & 0x8000u) == 0 )
            break;
          if ( (__int16)v634 > 0 )
          {
            v636 = scaledZ.dword * (unsigned __int16)-(__int16)v29;
            v637 = v636;
            v29 = v636 >> 8;
            v171 = __CFADD__(unk_93AE0[v632x].z_4.a16[0], v637);
            v638 = unk_93AE0[v632x].z_4.a16[0] + v637;
            BYTE1(v29) += unk_93AE0[v632x].z_4.a16[1] + v171;
            if ( v634 > widthViewPort_93AD8 )
              LOWORD(v634) = widthViewPort_93AD8;
            v29 = (unsigned __int16)v29;
            LOBYTE(v29) = byte_967E0;
LABEL_851:
            while ( 1 )
            {
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[0];
              tempScrPtr16[0] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v638);
              v639 = scaledZ.dword + v638;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v640 = v634 - 1;
              if ( !v640 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[1];
              tempScrPtr16[1] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v639);
              v641 = scaledZ.dword + v639;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v642 = v640 - 1;
              if ( !v642 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[2];
              tempScrPtr16[2] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v641);
              v643 = scaledZ.dword + v641;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v644 = v642 - 1;
              if ( !v644 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[3];
              tempScrPtr16[3] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v643);
              v645 = scaledZ.dword + v643;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v646 = v644 - 1;
              if ( !v646 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[4];
              tempScrPtr16[4] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v645);
              v647 = scaledZ.dword + v645;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v648 = v646 - 1;
              if ( !v648 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[5];
              tempScrPtr16[5] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v647);
              v649 = scaledZ.dword + v647;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v650 = v648 - 1;
              if ( !v650 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[6];
              tempScrPtr16[6] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v649);
              v651 = scaledZ.dword + v649;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v652 = v650 - 1;
              if ( !v652 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[7];
              tempScrPtr16[7] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v651);
              v653 = scaledZ.dword + v651;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v654 = v652 - 1;
              if ( !v654 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[8];
              tempScrPtr16[8] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v653);
              v655 = scaledZ.dword + v653;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v656 = v654 - 1;
              if ( !v656 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[9];
              tempScrPtr16[9] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v655);
              v657 = scaledZ.dword + v655;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v658 = v656 - 1;
              if ( !v658 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[10];
              tempScrPtr16[10] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v657);
              v659 = scaledZ.dword + v657;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v660 = v658 - 1;
              if ( !v660 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[11];
              tempScrPtr16[11] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v659);
              v661 = scaledZ.dword + v659;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v662 = v660 - 1;
              if ( !v662 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[12];
              tempScrPtr16[12] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v661);
              v663 = scaledZ.dword + v661;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v664 = v662 - 1;
              if ( !v664 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[13];
              tempScrPtr16[13] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v663);
              v665 = scaledZ.dword + v663;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v666 = v664 - 1;
              if ( !v666 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[14];
              tempScrPtr16[14] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v665);
              v667 = scaledZ.dword + v665;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v668 = v666 - 1;
              if ( !v668 )
                break;
              BYTE1(v633) = strPal.fog_B7934_B7924[v29];
              LOBYTE(v633) = tempScrPtr16[15];
              tempScrPtr16[15] = strPal.byte_BB934_BB924[v633];
              v171 = __CFADD__((_WORD)scaledZ.dword, v667);
              v638 = scaledZ.dword + v667;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              LOWORD(v634) = v668 - 1;
              if ( !(_WORD)v634 )
                break;
              tempScrPtr16 += 16;
            }
          }
LABEL_868:
          //v632 += 10;
          v632x++;
          if ( !--ySum_C )
            return;
        }
        if ( v634 > widthViewPort_93AD8 )
          LOWORD(v634) = widthViewPort_93AD8;
        bool16 = (__int16)v634 <= (__int16)v29;
        LOWORD(v634) = v634 - v29;
        if (bool16)
          goto LABEL_868;
        tempScrPtr16 += v29;
        v29 = (unsigned __int8)byte_967E0;
        v638 = unk_93AE0[v632x].z_4.a16[0];
        BYTE1(v29) = unk_93AE0[v632x].z_4.a16[1];
        goto LABEL_851;
      case 17:
LABEL_870:
        //v669 = (unsigned __int16 *)&unk_93AE0;
        v669x = 0;
        HIWORD(v670) = 0;
        while ( 1 )
        {
          LOWORD(v29) = unk_93AE0[v669x].x_0.a16[1];
          v671 = unk_93AE0[v669x].y_1.a16[1];
          //v672 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr17 = actScrPtr;
          if ( (v29 & 0x8000u) == 0 )
            break;
          if ( (__int16)v671 > 0 )
          {
            v673 = scaledZ.dword * (unsigned __int16)-(__int16)v29;
            v674 = v673;
            v29 = v673 >> 8;
            v171 = __CFADD__(unk_93AE0[v669x].z_4.a16[0], v674);
            v675 = unk_93AE0[v669x].z_4.a16[0] + v674;
            BYTE1(v29) += unk_93AE0[v669x].z_4.a16[1] + v171;
            if ( v671 > widthViewPort_93AD8 )
              LOWORD(v671) = widthViewPort_93AD8;
            v29 = (unsigned __int16)v29;
            LOBYTE(v29) = byte_967E0;
LABEL_880:
            while ( 1 )
            {
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[0];
              tempScrPtr17[0] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v675);
              v676 = scaledZ.dword + v675;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v677 = v671 - 1;
              if ( !v677 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[1];
              tempScrPtr17[1] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v676);
              v678 = scaledZ.dword + v676;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v679 = v677 - 1;
              if ( !v679 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[2];
              tempScrPtr17[2] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v678);
              v680 = scaledZ.dword + v678;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v681 = v679 - 1;
              if ( !v681 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[3];
              tempScrPtr17[3] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v680);
              v682 = scaledZ.dword + v680;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v683 = v681 - 1;
              if ( !v683 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[4];
              tempScrPtr17[4] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v682);
              v684 = scaledZ.dword + v682;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v685 = v683 - 1;
              if ( !v685 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[5];
              tempScrPtr17[5] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v684);
              v686 = scaledZ.dword + v684;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v687 = v685 - 1;
              if ( !v687 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[6];
              tempScrPtr17[6] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v686);
              v688 = scaledZ.dword + v686;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v689 = v687 - 1;
              if ( !v689 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[7];
              tempScrPtr17[7] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v688);
              v690 = scaledZ.dword + v688;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v691 = v689 - 1;
              if ( !v691 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[8];
              tempScrPtr17[8] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v690);
              v692 = scaledZ.dword + v690;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v693 = v691 - 1;
              if ( !v693 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[9];
              tempScrPtr17[9] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v692);
              v694 = scaledZ.dword + v692;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v695 = v693 - 1;
              if ( !v695 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[10];
              tempScrPtr17[10] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v694);
              v696 = scaledZ.dword + v694;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v697 = v695 - 1;
              if ( !v697 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[11];
              tempScrPtr17[11] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v696);
              v698 = scaledZ.dword + v696;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v699 = v697 - 1;
              if ( !v699 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[12];
              tempScrPtr17[12] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v698);
              v700 = scaledZ.dword + v698;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v701 = v699 - 1;
              if ( !v701 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[13];
              tempScrPtr17[13] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v700);
              v702 = scaledZ.dword + v700;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v703 = v701 - 1;
              if ( !v703 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[14];
              tempScrPtr17[14] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v702);
              v704 = scaledZ.dword + v702;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              v705 = v703 - 1;
              if ( !v705 )
                break;
              LOBYTE(v670) = strPal.fog_B7934_B7924[v29];
              BYTE1(v670) = tempScrPtr17[15];
              tempScrPtr17[15] = strPal.byte_BB934_BB924[v670];
              v171 = __CFADD__((_WORD)scaledZ.dword, v704);
              v675 = scaledZ.dword + v704;
              BYTE1(v29) += BYTE2(scaledZ.dword) + v171;
              LOWORD(v671) = v705 - 1;
              if ( !(_WORD)v671 )
                break;
              tempScrPtr17 += 16;
            }
          }
LABEL_897:
          //v669 += 10;
          v669x++;
          if ( !--ySum_C )
            return;
        }
        if ( v671 > widthViewPort_93AD8 )
          LOWORD(v671) = widthViewPort_93AD8;
        bool16 = (__int16)v671 <= (__int16)v29;
        LOWORD(v671) = v671 - v29;
        if (bool16)
          goto LABEL_897;
        tempScrPtr17 += v29;
        v29 = (unsigned __int8)byte_967E0;
        v675 = unk_93AE0[v669x].z_4.a16[0];
        BYTE1(v29) = unk_93AE0[v669x].z_4.a16[1];
        goto LABEL_880;
      case 18:
LABEL_899:
        //v706 = (unsigned __int16 *)&unk_93AE0;
        v706x = 0;
        v1157 = scaledV.dword << 16;
        HIWORD(v707) = 0;
        HIWORD(v708) = 0;
        while ( 1 )
        {
          LOWORD(v707) = unk_93AE0[v706x].x_0.a16[1];
          v709 = unk_93AE0[v706x].y_1.a16[1];
          //v710 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr18 = actScrPtr;
          if ( (v707 & 0x8000u) == 0 )
            break;
          if ( (__int16)v709 > 0 )
          {
            v711 = (unsigned __int16)-(__int16)v707;
            v713 = __ROL4_16__(unk_93AE0[v706x].v_3.a32 + scaledV.dword * v711);
            BYTE1(v708) = v713;
            v712 = unk_93AE0[v706x].u_2.a32 + scaledU.dword * v711;
            LOWORD(v713) = v712;
            v714 = v712 >> 8;
            LOBYTE(v708) = BYTE1(v714);
            if ( v709 > widthViewPort_93AD8 )
              LOWORD(v709) = widthViewPort_93AD8;
            v707 = (unsigned __int16)v714;
LABEL_909:
            v1266x = v706x;
            v715 = (int)actTexture_93AD0;
            while ( 1 )
            {
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v713);
              LOWORD(v713) = scaledU.dword + v713;
              LOBYTE(v707) = tempScrPtr18[0];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v713);
              v716 = v1157 + v713;
              tempScrPtr18[0] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v717 = v709 - 1;
              if ( !v717 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v716);
              LOWORD(v716) = scaledU.dword + v716;
              LOBYTE(v707) = tempScrPtr18[1];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v716);
              v718 = v1157 + v716;
              tempScrPtr18[1] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v719 = v717 - 1;
              if ( !v719 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v718);
              LOWORD(v718) = scaledU.dword + v718;
              LOBYTE(v707) = tempScrPtr18[2];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v718);
              v720 = v1157 + v718;
              tempScrPtr18[2] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v721 = v719 - 1;
              if ( !v721 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v720);
              LOWORD(v720) = scaledU.dword + v720;
              LOBYTE(v707) = tempScrPtr18[3];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v720);
              v722 = v1157 + v720;
              tempScrPtr18[3] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v723 = v721 - 1;
              if ( !v723 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v722);
              LOWORD(v722) = scaledU.dword + v722;
              LOBYTE(v707) = tempScrPtr18[4];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v722);
              v724 = v1157 + v722;
              tempScrPtr18[4] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v725 = v723 - 1;
              if ( !v725 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v724);
              LOWORD(v724) = scaledU.dword + v724;
              LOBYTE(v707) = tempScrPtr18[5];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v724);
              v726 = v1157 + v724;
              tempScrPtr18[5] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v727 = v725 - 1;
              if ( !v727 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v726);
              LOWORD(v726) = scaledU.dword + v726;
              LOBYTE(v707) = tempScrPtr18[6];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v726);
              v728 = v1157 + v726;
              tempScrPtr18[6] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v729 = v727 - 1;
              if ( !v729 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v728);
              LOWORD(v728) = scaledU.dword + v728;
              LOBYTE(v707) = tempScrPtr18[7];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v728);
              v730 = v1157 + v728;
              tempScrPtr18[7] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v731 = v729 - 1;
              if ( !v731 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v730);
              LOWORD(v730) = scaledU.dword + v730;
              LOBYTE(v707) = tempScrPtr18[8];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v730);
              v732 = v1157 + v730;
              tempScrPtr18[8] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v733 = v731 - 1;
              if ( !v733 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v732);
              LOWORD(v732) = scaledU.dword + v732;
              LOBYTE(v707) = tempScrPtr18[9];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v732);
              v734 = v1157 + v732;
              tempScrPtr18[9] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v735 = v733 - 1;
              if ( !v735 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v734);
              LOWORD(v734) = scaledU.dword + v734;
              LOBYTE(v707) = tempScrPtr18[10];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v734);
              v736 = v1157 + v734;
              tempScrPtr18[10] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v737 = v735 - 1;
              if ( !v737 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v736);
              LOWORD(v736) = scaledU.dword + v736;
              LOBYTE(v707) = tempScrPtr18[11];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v736);
              v738 = v1157 + v736;
              tempScrPtr18[11] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v739 = v737 - 1;
              if ( !v739 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v738);
              LOWORD(v738) = scaledU.dword + v738;
              LOBYTE(v707) = tempScrPtr18[12];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v738);
              v740 = v1157 + v738;
              tempScrPtr18[12] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v741 = v739 - 1;
              if ( !v741 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v740);
              LOWORD(v740) = scaledU.dword + v740;
              LOBYTE(v707) = tempScrPtr18[13];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v740);
              v742 = v1157 + v740;
              tempScrPtr18[13] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v743 = v741 - 1;
              if ( !v743 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v742);
              LOWORD(v742) = scaledU.dword + v742;
              LOBYTE(v707) = tempScrPtr18[14];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v742);
              v744 = v1157 + v742;
              tempScrPtr18[14] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              v745 = v743 - 1;
              if ( !v745 )
                break;
              BYTE1(v707) = *(_BYTE *)(v708 + v715);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v744);
              LOWORD(v744) = scaledU.dword + v744;
              LOBYTE(v707) = tempScrPtr18[15];
              LOBYTE(v708) = BYTE2(scaledU.dword) + v171 + v708;
              v171 = __CFADD__(v1157, v744);
              v713 = v1157 + v744;
              tempScrPtr18[15] = strPal.byte_BB934_BB924[v707];
              BYTE1(v708) += BYTE2(scaledV.dword) + v171;
              LOWORD(v709) = v745 - 1;
              if ( !(_WORD)v709 )
                break;
              tempScrPtr18 += 16;              
            }
            v706x = v1266x;
          }
LABEL_928:
          //v706 += 10;
          v706x++;
          if ( !--ySum_C )
            return;
        }
        if ( v709 > widthViewPort_93AD8 )
          LOWORD(v709) = widthViewPort_93AD8;
        bool16 = (__int16)v709 <= (__int16)v707;
        LOWORD(v709) = v709 - v707;
        if (bool16)
          goto LABEL_928;
        tempScrPtr18 += v707;
        v713 = __ROL4_16__(unk_93AE0[v706x].v_3.a32);
        BYTE1(v708) = v713;
        LOWORD(v713) = unk_93AE0[v706x].u_2.a16[0];
        LOBYTE(v708) = unk_93AE0[v706x].u_2.a16[1];
        goto LABEL_909;
      case 19:
LABEL_930:
        //v746 = (unsigned __int16 *)&unk_93AE0;
        v746x = 0;
        v1158 = scaledV.dword << 16;
        HIWORD(v747) = 0;
        HIWORD(v748) = 0;
        while ( 1 )
        {
          LOWORD(v747) = unk_93AE0[v746x].x_0.a16[1];
          v749 = unk_93AE0[v746x].y_1.a16[1];
          //v750 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr19 = actScrPtr;
          if ( (v747 & 0x8000u) == 0 )
            break;
          if ( (__int16)v749 > 0 )
          {
            v751 = (unsigned __int16)-(__int16)v747;
            v753 = __ROL4_16__(unk_93AE0[v746x].v_3.a32 + scaledV.dword * v751);
            BYTE1(v748) = v753;
            v752 = unk_93AE0[v746x].u_2.a32 + scaledU.dword * v751;
            LOWORD(v753) = v752;
            v754 = v752 >> 8;
            LOBYTE(v748) = BYTE1(v754);
            if ( v749 > widthViewPort_93AD8 )
              LOWORD(v749) = widthViewPort_93AD8;
            v747 = (unsigned __int16)v754;
LABEL_940:
            v1267x = v746x;
            v755 = (int)actTexture_93AD0;
            while ( 1 )
            {
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v753);
              LOWORD(v753) = scaledU.dword + v753;
              BYTE1(v747) = tempScrPtr19[0];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v753);
              v756 = v1158 + v753;
              tempScrPtr19[0] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v757 = v749 - 1;
              if ( !v757 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v756);
              LOWORD(v756) = scaledU.dword + v756;
              BYTE1(v747) = tempScrPtr19[1];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v756);
              v758 = v1158 + v756;
              tempScrPtr19[1] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v759 = v757 - 1;
              if ( !v759 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v758);
              LOWORD(v758) = scaledU.dword + v758;
              BYTE1(v747) = tempScrPtr19[2];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v758);
              v760 = v1158 + v758;
              tempScrPtr19[2] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v761 = v759 - 1;
              if ( !v761 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v760);
              LOWORD(v760) = scaledU.dword + v760;
              BYTE1(v747) = tempScrPtr19[3];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v760);
              v762 = v1158 + v760;
              tempScrPtr19[3] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v763 = v761 - 1;
              if ( !v763 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v762);
              LOWORD(v762) = scaledU.dword + v762;
              BYTE1(v747) = tempScrPtr19[4];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v762);
              v764 = v1158 + v762;
              tempScrPtr19[4] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v765 = v763 - 1;
              if ( !v765 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v764);
              LOWORD(v764) = scaledU.dword + v764;
              BYTE1(v747) = tempScrPtr19[5];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v764);
              v766 = v1158 + v764;
              tempScrPtr19[5] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v767 = v765 - 1;
              if ( !v767 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v766);
              LOWORD(v766) = scaledU.dword + v766;
              BYTE1(v747) = tempScrPtr19[6];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v766);
              v768 = v1158 + v766;
              tempScrPtr19[6] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v769 = v767 - 1;
              if ( !v769 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v768);
              LOWORD(v768) = scaledU.dword + v768;
              BYTE1(v747) = tempScrPtr19[7];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v768);
              v770 = v1158 + v768;
              tempScrPtr19[7] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v771 = v769 - 1;
              if ( !v771 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v770);
              LOWORD(v770) = scaledU.dword + v770;
              BYTE1(v747) = tempScrPtr19[8];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v770);
              v772 = v1158 + v770;
              tempScrPtr19[8] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v773 = v771 - 1;
              if ( !v773 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v772);
              LOWORD(v772) = scaledU.dword + v772;
              BYTE1(v747) = tempScrPtr19[9];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v772);
              v774 = v1158 + v772;
              tempScrPtr19[9] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v775 = v773 - 1;
              if ( !v775 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v774);
              LOWORD(v774) = scaledU.dword + v774;
              BYTE1(v747) = tempScrPtr19[10];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v774);
              v776 = v1158 + v774;
              tempScrPtr19[10] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v777 = v775 - 1;
              if ( !v777 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v776);
              LOWORD(v776) = scaledU.dword + v776;
              BYTE1(v747) = tempScrPtr19[11];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v776);
              v778 = v1158 + v776;
              tempScrPtr19[11] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v779 = v777 - 1;
              if ( !v779 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v778);
              LOWORD(v778) = scaledU.dword + v778;
              BYTE1(v747) = tempScrPtr19[12];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v778);
              v780 = v1158 + v778;
              tempScrPtr19[12] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v781 = v779 - 1;
              if ( !v781 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v780);
              LOWORD(v780) = scaledU.dword + v780;
              BYTE1(v747) = tempScrPtr19[13];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v780);
              v782 = v1158 + v780;
              tempScrPtr19[13] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v783 = v781 - 1;
              if ( !v783 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v782);
              LOWORD(v782) = scaledU.dword + v782;
              BYTE1(v747) = tempScrPtr19[14];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v782);
              v784 = v1158 + v782;
              tempScrPtr19[14] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              v785 = v783 - 1;
              if ( !v785 )
                break;
              LOBYTE(v747) = *(_BYTE *)(v748 + v755);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v784);
              LOWORD(v784) = scaledU.dword + v784;
              BYTE1(v747) = tempScrPtr19[15];
              LOBYTE(v748) = BYTE2(scaledU.dword) + v171 + v748;
              v171 = __CFADD__(v1158, v784);
              v753 = v1158 + v784;
              tempScrPtr19[15] = strPal.byte_BB934_BB924[v747];
              BYTE1(v748) += BYTE2(scaledV.dword) + v171;
              LOWORD(v749) = v785 - 1;
              if ( !(_WORD)v749 )
                break;
              tempScrPtr19 += 16;
            }
            v746x = v1267x;
          }
LABEL_959:
          //v746 += 10;
          v746x++;
          if ( !--ySum_C )
            return;
        }
        if ( v749 > widthViewPort_93AD8 )
          LOWORD(v749) = widthViewPort_93AD8;
        bool16 = (__int16)v749 <= (__int16)v747;
        LOWORD(v749) = v749 - v747;
        if (bool16)
          goto LABEL_959;
        tempScrPtr19 += v747;
        v753 = __ROL4_16__(unk_93AE0[v746x].v_3.a32);
        BYTE1(v748) = v753;
        LOWORD(v753) = unk_93AE0[v746x].u_2.a16[0];
        LOBYTE(v748) = unk_93AE0[v746x].u_2.a16[1];
        goto LABEL_940;
      case 20:
LABEL_961:
        //v786 = (unsigned __int16 *)&unk_93AE0;
        v786x = 0;
        v1159 = scaledV.dword << 16;
        v1168 = scaledZ.dword << 16;
        HIWORD(v787) = 0;
        HIWORD(v788) = 0;
        while ( 1 )
        {
          LOWORD(v787) = unk_93AE0[v786x].x_0.a16[1];
          v789 = unk_93AE0[v786x].y_1.a16[1];
          //v790 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr20 = actScrPtr;
          if ( (v787 & 0x8000u) == 0 )
            break;
          if ( (__int16)v789 > 0 )
          {
            if ( v789 > widthViewPort_93AD8 )
              v789 = widthViewPort_93AD8;
            v1177 = v789;
            v791 = (unsigned __int16)-(__int16)v787;
            v792 = __ROL4_16__(unk_93AE0[v786x].v_3.a32 + scaledV.dword * v791);
            BYTE1(v788) = v792;
            LOWORD(v792) = unk_93AE0[v786x].u_2.a16[0] + scaledU.dword * v791;
            v787 = (unsigned int)(unk_93AE0[v786x].u_2.a32 + scaledU.dword * v791) >> 8;
            LOBYTE(v788) = (unsigned int)(unk_93AE0[v786x].u_2.a32 + scaledU.dword * v791) >> 16;
            v793 = __ROL4_16__(unk_93AE0[v786x].z_4.a32 + scaledZ.dword * v791);
            v787 = (unsigned __int16)v787;
LABEL_971:
            v1268x = v786x;
            v794 = (int)actTexture_93AD0;
            while ( 1 )
            {
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v792);
              LOWORD(v792) = scaledU.dword + v792;
              BYTE1(v787) = v793;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v792);
              v795 = v1159 + v792;
              LOBYTE(v787) = tempScrPtr20[0];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v793);
              v796 = v1168 + v793;
              tempScrPtr20[0] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v796) = BYTE2(scaledZ.dword) + v171 + v796;
              v1178 = v1177 - 1;
              if ( !v1178 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v795);
              LOWORD(v795) = scaledU.dword + v795;
              BYTE1(v787) = v796;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v795);
              v797 = v1159 + v795;
              LOBYTE(v787) = tempScrPtr20[1];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v796);
              v798 = v1168 + v796;
              tempScrPtr20[1] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v798) = BYTE2(scaledZ.dword) + v171 + v798;
              v1179 = v1178 - 1;
              if ( !v1179 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v797);
              LOWORD(v797) = scaledU.dword + v797;
              BYTE1(v787) = v798;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v797);
              v799 = v1159 + v797;
              LOBYTE(v787) = tempScrPtr20[2];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v798);
              v800 = v1168 + v798;
              tempScrPtr20[2] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v800) = BYTE2(scaledZ.dword) + v171 + v800;
              v1180 = v1179 - 1;
              if ( !v1180 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v799);
              LOWORD(v799) = scaledU.dword + v799;
              BYTE1(v787) = v800;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v799);
              v801 = v1159 + v799;
              LOBYTE(v787) = tempScrPtr20[3];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v800);
              v802 = v1168 + v800;
              tempScrPtr20[3] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v802) = BYTE2(scaledZ.dword) + v171 + v802;
              v1181 = v1180 - 1;
              if ( !v1181 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v801);
              LOWORD(v801) = scaledU.dword + v801;
              BYTE1(v787) = v802;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v801);
              v803 = v1159 + v801;
              LOBYTE(v787) = tempScrPtr20[4];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v802);
              v804 = v1168 + v802;
              tempScrPtr20[4] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v804) = BYTE2(scaledZ.dword) + v171 + v804;
              v1182 = v1181 - 1;
              if ( !v1182 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v803);
              LOWORD(v803) = scaledU.dword + v803;
              BYTE1(v787) = v804;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v803);
              v805 = v1159 + v803;
              LOBYTE(v787) = tempScrPtr20[5];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v804);
              v806 = v1168 + v804;
              tempScrPtr20[5] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v806) = BYTE2(scaledZ.dword) + v171 + v806;
              v1183 = v1182 - 1;
              if ( !v1183 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v805);
              LOWORD(v805) = scaledU.dword + v805;
              BYTE1(v787) = v806;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v805);
              v807 = v1159 + v805;
              LOBYTE(v787) = tempScrPtr20[6];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v806);
              v808 = v1168 + v806;
              tempScrPtr20[6] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v808) = BYTE2(scaledZ.dword) + v171 + v808;
              v1184 = v1183 - 1;
              if ( !v1184 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v807);
              LOWORD(v807) = scaledU.dword + v807;
              BYTE1(v787) = v808;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v807);
              v809 = v1159 + v807;
              LOBYTE(v787) = tempScrPtr20[7];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v808);
              v810 = v1168 + v808;
              tempScrPtr20[7] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v810) = BYTE2(scaledZ.dword) + v171 + v810;
              v1185 = v1184 - 1;
              if ( !v1185 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v809);
              LOWORD(v809) = scaledU.dword + v809;
              BYTE1(v787) = v810;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v809);
              v811 = v1159 + v809;
              LOBYTE(v787) = tempScrPtr20[8];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v810);
              v812 = v1168 + v810;
              tempScrPtr20[8] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v812) = BYTE2(scaledZ.dword) + v171 + v812;
              v1186 = v1185 - 1;
              if ( !v1186 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v811);
              LOWORD(v811) = scaledU.dword + v811;
              BYTE1(v787) = v812;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v811);
              v813 = v1159 + v811;
              LOBYTE(v787) = tempScrPtr20[9];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v812);
              v814 = v1168 + v812;
              tempScrPtr20[9] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v814) = BYTE2(scaledZ.dword) + v171 + v814;
              v1187 = v1186 - 1;
              if ( !v1187 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v813);
              LOWORD(v813) = scaledU.dword + v813;
              BYTE1(v787) = v814;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v813);
              v815 = v1159 + v813;
              LOBYTE(v787) = tempScrPtr20[10];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v814);
              v816 = v1168 + v814;
              tempScrPtr20[10] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v816) = BYTE2(scaledZ.dword) + v171 + v816;
              v1188 = v1187 - 1;
              if ( !v1188 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v815);
              LOWORD(v815) = scaledU.dword + v815;
              BYTE1(v787) = v816;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v815);
              v817 = v1159 + v815;
              LOBYTE(v787) = tempScrPtr20[11];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v816);
              v818 = v1168 + v816;
              tempScrPtr20[11] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v818) = BYTE2(scaledZ.dword) + v171 + v818;
              v1189 = v1188 - 1;
              if ( !v1189 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v817);
              LOWORD(v817) = scaledU.dword + v817;
              BYTE1(v787) = v818;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v817);
              v819 = v1159 + v817;
              LOBYTE(v787) = tempScrPtr20[12];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v818);
              v820 = v1168 + v818;
              tempScrPtr20[12] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v820) = BYTE2(scaledZ.dword) + v171 + v820;
              v1190 = v1189 - 1;
              if ( !v1190 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v819);
              LOWORD(v819) = scaledU.dword + v819;
              BYTE1(v787) = v820;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v819);
              v821 = v1159 + v819;
              LOBYTE(v787) = tempScrPtr20[13];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v820);
              v822 = v1168 + v820;
              tempScrPtr20[13] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v822) = BYTE2(scaledZ.dword) + v171 + v822;
              v1191 = v1190 - 1;
              if ( !v1191 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v821);
              LOWORD(v821) = scaledU.dword + v821;
              BYTE1(v787) = v822;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v821);
              v823 = v1159 + v821;
              LOBYTE(v787) = tempScrPtr20[14];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v822);
              v824 = v1168 + v822;
              tempScrPtr20[14] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v824) = BYTE2(scaledZ.dword) + v171 + v824;
              v1192 = v1191 - 1;
              if ( !v1192 )
                break;
              LOBYTE(v787) = *(_BYTE *)(v788 + v794);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v823);
              LOWORD(v823) = scaledU.dword + v823;
              BYTE1(v787) = v824;
              LOBYTE(v788) = BYTE2(scaledU.dword) + v171 + v788;
              BYTE1(v787) = strPal.fog_B7934_B7924[v787];
              v171 = __CFADD__(v1159, v823);
              v792 = v1159 + v823;
              LOBYTE(v787) = tempScrPtr20[15];
              BYTE1(v788) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1168, v824);
              v793 = v1168 + v824;
              tempScrPtr20[15] = strPal.byte_BB934_BB924[v787];
              LOBYTE(v793) = BYTE2(scaledZ.dword) + v171 + v793;
              v1177 = v1192 - 1;
              if ( !v1177 )
                break;
              tempScrPtr20 += 16;
            }
            v786x = v1268x;
          }
LABEL_990:
          //v786 += 10;
          v786x++;
          if ( !--ySum_C )
            return;
        }
        if ( v789 > widthViewPort_93AD8 )
          v789 = widthViewPort_93AD8;
        bool16 = (__int16)v789 <= (__int16)v787;
        LOWORD(v789) = v789 - v787;
        if (bool16)
          goto LABEL_990;
        tempScrPtr20 += v787;
        v792 = __ROL4_16__(unk_93AE0[v786x].v_3.a32);
        BYTE1(v788) = v792;
        LOWORD(v792) = unk_93AE0[v786x].u_2.a16[0];
        LOBYTE(v788) = unk_93AE0[v786x].u_2.a16[1];
        v1177 = v789;
        v793 = __ROL4_16__(unk_93AE0[v786x].z_4.a32);
        goto LABEL_971;
      case 21:
LABEL_992:
        //v825 = (unsigned __int16 *)&unk_93AE0;
        v825x = 0;
        v1160 = scaledV.dword << 16;
        v1169 = scaledZ.dword << 16;
        HIWORD(v826) = 0;
        HIWORD(v827) = 0;
        while ( 1 )
        {
          LOWORD(v826) = unk_93AE0[v825x].x_0.a16[1];
          v828 = unk_93AE0[v825x].y_1.a16[1];
          //v829 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr21 = actScrPtr;
          if ( (v826 & 0x8000u) == 0 )
            break;
          if ( (__int16)v828 > 0 )
          {
            if ( v828 > widthViewPort_93AD8 )
              v828 = widthViewPort_93AD8;
            v1193 = v828;
            v830 = (unsigned __int16)-(__int16)v826;
            v831 = __ROL4_16__(unk_93AE0[v825x].v_3.a32 + scaledV.dword * v830);
            BYTE1(v827) = v831;
            LOWORD(v831) = unk_93AE0[v825x].u_2.a16[0] + scaledU.dword * v830;
            v826 = (unsigned int)(unk_93AE0[v825x].u_2.a32 + scaledU.dword * v830) >> 8;
            LOBYTE(v827) = (unsigned int)(unk_93AE0[v825x].u_2.a32 + scaledU.dword * v830) >> 16;
            v832 = __ROL4_16__(unk_93AE0[v825x].z_4.a32 + scaledZ.dword * v830);
            v826 = (unsigned __int16)v826;
LABEL_1002:
            v1269x = v825x;
            v833 = (int)actTexture_93AD0;
            while ( 1 )
            {
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v831);
              LOWORD(v831) = scaledU.dword + v831;
              BYTE1(v826) = v832;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v831);
              v834 = v1160 + v831;
              BYTE1(v826) = tempScrPtr21[0];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v832);
              v835 = v1169 + v832;
              tempScrPtr21[0] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v835) = BYTE2(scaledZ.dword) + v171 + v835;
              v1194 = v1193 - 1;
              if ( !v1194 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v834);
              LOWORD(v834) = scaledU.dword + v834;
              BYTE1(v826) = v835;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v834);
              v836 = v1160 + v834;
              BYTE1(v826) = tempScrPtr21[1];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v835);
              v837 = v1169 + v835;
              tempScrPtr21[1] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v837) = BYTE2(scaledZ.dword) + v171 + v837;
              v1195 = v1194 - 1;
              if ( !v1195 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v836);
              LOWORD(v836) = scaledU.dword + v836;
              BYTE1(v826) = v837;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v836);
              v838 = v1160 + v836;
              BYTE1(v826) = tempScrPtr21[2];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v837);
              v839 = v1169 + v837;
              tempScrPtr21[2] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v839) = BYTE2(scaledZ.dword) + v171 + v839;
              v1196 = v1195 - 1;
              if ( !v1196 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v838);
              LOWORD(v838) = scaledU.dword + v838;
              BYTE1(v826) = v839;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v838);
              v840 = v1160 + v838;
              BYTE1(v826) = tempScrPtr21[3];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v839);
              v841 = v1169 + v839;
              tempScrPtr21[3] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v841) = BYTE2(scaledZ.dword) + v171 + v841;
              v1197 = v1196 - 1;
              if ( !v1197 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v840);
              LOWORD(v840) = scaledU.dword + v840;
              BYTE1(v826) = v841;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v840);
              v842 = v1160 + v840;
              BYTE1(v826) = tempScrPtr21[4];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v841);
              v843 = v1169 + v841;
              tempScrPtr21[4] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v843) = BYTE2(scaledZ.dword) + v171 + v843;
              v1198 = v1197 - 1;
              if ( !v1198 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v842);
              LOWORD(v842) = scaledU.dword + v842;
              BYTE1(v826) = v843;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v842);
              v844 = v1160 + v842;
              BYTE1(v826) = tempScrPtr21[5];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v843);
              v845 = v1169 + v843;
              tempScrPtr21[5] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v845) = BYTE2(scaledZ.dword) + v171 + v845;
              v1199 = v1198 - 1;
              if ( !v1199 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v844);
              LOWORD(v844) = scaledU.dword + v844;
              BYTE1(v826) = v845;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v844);
              v846 = v1160 + v844;
              BYTE1(v826) = tempScrPtr21[6];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v845);
              v847 = v1169 + v845;
              tempScrPtr21[6] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v847) = BYTE2(scaledZ.dword) + v171 + v847;
              v1200 = v1199 - 1;
              if ( !v1200 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v846);
              LOWORD(v846) = scaledU.dword + v846;
              BYTE1(v826) = v847;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v846);
              v848 = v1160 + v846;
              BYTE1(v826) = tempScrPtr21[7];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v847);
              v849 = v1169 + v847;
              tempScrPtr21[7] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v849) = BYTE2(scaledZ.dword) + v171 + v849;
              v1201 = v1200 - 1;
              if ( !v1201 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v848);
              LOWORD(v848) = scaledU.dword + v848;
              BYTE1(v826) = v849;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v848);
              v850 = v1160 + v848;
              BYTE1(v826) = tempScrPtr21[8];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v849);
              v851 = v1169 + v849;
              tempScrPtr21[8] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v851) = BYTE2(scaledZ.dword) + v171 + v851;
              v1202 = v1201 - 1;
              if ( !v1202 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v850);
              LOWORD(v850) = scaledU.dword + v850;
              BYTE1(v826) = v851;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v850);
              v852 = v1160 + v850;
              BYTE1(v826) = tempScrPtr21[9];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v851);
              v853 = v1169 + v851;
              tempScrPtr21[9] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v853) = BYTE2(scaledZ.dword) + v171 + v853;
              v1203 = v1202 - 1;
              if ( !v1203 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v852);
              LOWORD(v852) = scaledU.dword + v852;
              BYTE1(v826) = v853;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v852);
              v854 = v1160 + v852;
              BYTE1(v826) = tempScrPtr21[10];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v853);
              v855 = v1169 + v853;
              tempScrPtr21[10] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v855) = BYTE2(scaledZ.dword) + v171 + v855;
              v1204 = v1203 - 1;
              if ( !v1204 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v854);
              LOWORD(v854) = scaledU.dword + v854;
              BYTE1(v826) = v855;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v854);
              v856 = v1160 + v854;
              BYTE1(v826) = tempScrPtr21[11];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v855);
              v857 = v1169 + v855;
              tempScrPtr21[11] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v857) = BYTE2(scaledZ.dword) + v171 + v857;
              v1205 = v1204 - 1;
              if ( !v1205 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v856);
              LOWORD(v856) = scaledU.dword + v856;
              BYTE1(v826) = v857;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v856);
              v858 = v1160 + v856;
              BYTE1(v826) = tempScrPtr21[12];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v857);
              v859 = v1169 + v857;
              tempScrPtr21[12] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v859) = BYTE2(scaledZ.dword) + v171 + v859;
              v1206 = v1205 - 1;
              if ( !v1206 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v858);
              LOWORD(v858) = scaledU.dword + v858;
              BYTE1(v826) = v859;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v858);
              v860 = v1160 + v858;
              BYTE1(v826) = tempScrPtr21[13];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v859);
              v861 = v1169 + v859;
              tempScrPtr21[13] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v861) = BYTE2(scaledZ.dword) + v171 + v861;
              v1207 = v1206 - 1;
              if ( !v1207 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v860);
              LOWORD(v860) = scaledU.dword + v860;
              BYTE1(v826) = v861;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v860);
              v862 = v1160 + v860;
              BYTE1(v826) = tempScrPtr21[14];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v861);
              v863 = v1169 + v861;
              tempScrPtr21[14] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v863) = BYTE2(scaledZ.dword) + v171 + v863;
              v1208 = v1207 - 1;
              if ( !v1208 )
                break;
              LOBYTE(v826) = *(_BYTE *)(v827 + v833);
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v862);
              LOWORD(v862) = scaledU.dword + v862;
              BYTE1(v826) = v863;
              LOBYTE(v827) = BYTE2(scaledU.dword) + v171 + v827;
              LOBYTE(v826) = strPal.fog_B7934_B7924[v826];
              v171 = __CFADD__(v1160, v862);
              v831 = v1160 + v862;
              BYTE1(v826) = tempScrPtr21[15];
              BYTE1(v827) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1169, v863);
              v832 = v1169 + v863;
              tempScrPtr21[15] = strPal.byte_BB934_BB924[v826];
              LOBYTE(v832) = BYTE2(scaledZ.dword) + v171 + v832;
              v1193 = v1208 - 1;
              if ( !v1193 )
                break;
              tempScrPtr21 += 16;
            }
            v825x = v1269x;
          }
LABEL_1021:
          //v825 += 10;
          v825x++;
          if ( !--ySum_C )
            return;
        }
        if ( v828 > widthViewPort_93AD8 )
          v828 = widthViewPort_93AD8;
        bool16 = (__int16)v828 <= (__int16)v826;
        LOWORD(v828) = v828 - v826;
        if (bool16)
          goto LABEL_1021;
        tempScrPtr21 += v826;
        v831 = __ROL4_16__(unk_93AE0[v825x].v_3.a32);
        BYTE1(v827) = v831;
        LOWORD(v831) = unk_93AE0[v825x].u_2.a16[0];
        LOBYTE(v827) = unk_93AE0[v825x].u_2.a16[1];
        v1193 = v828;
        v832 = __ROL4_16__(unk_93AE0[v825x].z_4.a32);
        goto LABEL_1002;
      case 22:
LABEL_1023:
        //v864 = (unsigned __int16 *)&unk_93AE0;
        v864x = 0;
        v1161 = scaledV.dword << 16;
        HIWORD(v865) = 0;
        HIWORD(v866) = 0;
        while ( 1 )
        {
          LOWORD(v865) = unk_93AE0[v864x].x_0.a16[1];
          v867 = unk_93AE0[v864x].y_1.a16[1];
          //v868 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr22 = actScrPtr;
          if ( (v865 & 0x8000u) == 0 )
            break;
          if ( (__int16)v867 > 0 )
          {
            v869 = (unsigned __int16)-(__int16)v865;
            v871 = __ROL4_16__(unk_93AE0[v864x].v_3.a32 + scaledV.dword * v869);
            BYTE1(v866) = v871;
            v870 = unk_93AE0[v864x].u_2.a32 + scaledU.dword * v869;
            LOWORD(v871) = v870;
            v872 = v870 >> 8;
            LOBYTE(v866) = BYTE1(v872);
            if ( v867 > widthViewPort_93AD8 )
              LOWORD(v867) = widthViewPort_93AD8;
            v865 = (unsigned __int16)v872;
LABEL_1033:
            v1270x = v864x;
            v873 = (int)actTexture_93AD0;
            while ( 1 )
            {
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[0];
                tempScrPtr22[0] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v871);
              LOWORD(v871) = scaledU.dword + v871;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v871);
              v874 = v1161 + v871;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v875 = v867 - 1;
              if ( !v875 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[1];
                tempScrPtr22[1] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v874);
              LOWORD(v874) = scaledU.dword + v874;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v874);
              v876 = v1161 + v874;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v877 = v875 - 1;
              if ( !v877 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[2];
                tempScrPtr22[2] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v876);
              LOWORD(v876) = scaledU.dword + v876;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v876);
              v878 = v1161 + v876;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v879 = v877 - 1;
              if ( !v879 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[3];
                tempScrPtr22[3] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v878);
              LOWORD(v878) = scaledU.dword + v878;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v878);
              v880 = v1161 + v878;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v881 = v879 - 1;
              if ( !v881 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[4];
                tempScrPtr22[4] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v880);
              LOWORD(v880) = scaledU.dword + v880;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v880);
              v882 = v1161 + v880;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v883 = v881 - 1;
              if ( !v883 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[5];
                tempScrPtr22[5] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v882);
              LOWORD(v882) = scaledU.dword + v882;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v882);
              v884 = v1161 + v882;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v885 = v883 - 1;
              if ( !v885 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[6];
                tempScrPtr22[6] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v884);
              LOWORD(v884) = scaledU.dword + v884;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v884);
              v886 = v1161 + v884;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v887 = v885 - 1;
              if ( !v887 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[7];
                tempScrPtr22[7] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v886);
              LOWORD(v886) = scaledU.dword + v886;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v886);
              v888 = v1161 + v886;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v889 = v887 - 1;
              if ( !v889 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[8];
                tempScrPtr22[8] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v888);
              LOWORD(v888) = scaledU.dword + v888;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v888);
              v890 = v1161 + v888;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v891 = v889 - 1;
              if ( !v891 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[9];
                tempScrPtr22[9] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v890);
              LOWORD(v890) = scaledU.dword + v890;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v890);
              v892 = v1161 + v890;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v893 = v891 - 1;
              if ( !v893 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[10];
                tempScrPtr22[10] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v892);
              LOWORD(v892) = scaledU.dword + v892;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v892);
              v894 = v1161 + v892;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v895 = v893 - 1;
              if ( !v895 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[11];
                tempScrPtr22[11] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v894);
              LOWORD(v894) = scaledU.dword + v894;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v894);
              v896 = v1161 + v894;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v897 = v895 - 1;
              if ( !v897 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[12];
                tempScrPtr22[12] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v896);
              LOWORD(v896) = scaledU.dword + v896;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v896);
              v898 = v1161 + v896;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v899 = v897 - 1;
              if ( !v899 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[13];
                tempScrPtr22[13] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v898);
              LOWORD(v898) = scaledU.dword + v898;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v898);
              v900 = v1161 + v898;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v901 = v899 - 1;
              if ( !v901 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[14];
                tempScrPtr22[14] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v900);
              LOWORD(v900) = scaledU.dword + v900;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v900);
              v902 = v1161 + v900;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              v903 = v901 - 1;
              if ( !v903 )
                break;
              BYTE1(v865) = *(_BYTE *)(v866 + v873);
              if ( BYTE1(v865) )
              {
                LOBYTE(v865) = tempScrPtr22[15];
                tempScrPtr22[15] = strPal.byte_BB934_BB924[v865];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v902);
              LOWORD(v902) = scaledU.dword + v902;
              LOBYTE(v866) = BYTE2(scaledU.dword) + v171 + v866;
              v171 = __CFADD__(v1161, v902);
              v871 = v1161 + v902;
              BYTE1(v866) += BYTE2(scaledV.dword) + v171;
              LOWORD(v867) = v903 - 1;
              if ( !(_WORD)v867 )
                break;
              tempScrPtr22 += 16;
            }
            v864x = v1270x;
          }
LABEL_1084:
          //v864 += 10;
          v864x++;
          if ( !--ySum_C )
            return;
        }
        if ( v867 > widthViewPort_93AD8 )
          LOWORD(v867) = widthViewPort_93AD8;
        bool16 = (__int16)v867 <= (__int16)v865;
        LOWORD(v867) = v867 - v865;
        if (bool16)
          goto LABEL_1084;
        tempScrPtr22 += v865;
        v871 = __ROL4_16__(unk_93AE0[v864x].v_3.a32);
        BYTE1(v866) = v871;
        LOWORD(v871) = unk_93AE0[v864x].u_2.a16[0];
        LOBYTE(v866) = unk_93AE0[v864x].u_2.a16[1];
        goto LABEL_1033;
      case 23:
LABEL_1086:
        //v904 = (unsigned __int16 *)&unk_93AE0;
        v904x = 0;
        v1162 = scaledV.dword << 16;
        HIWORD(v905) = 0;
        HIWORD(v906) = 0;
        while ( 1 )
        {
          LOWORD(v905) = unk_93AE0[v904x].x_0.a16[1];
          v907 = unk_93AE0[v904x].y_1.a16[1];
          //v908 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr23 = actScrPtr;
          if ( (v905 & 0x8000u) == 0 )
            break;
          if ( (__int16)v907 > 0 )
          {
            v909 = (unsigned __int16)-(__int16)v905;
            v911 = __ROL4_16__(unk_93AE0[v904x].v_3.a32 + scaledV.dword * v909);
            BYTE1(v906) = v911;
            v910 = unk_93AE0[v904x].u_2.a32 + scaledU.dword * v909;
            LOWORD(v911) = v910;
            v912 = v910 >> 8;
            LOBYTE(v906) = BYTE1(v912);
            if ( v907 > widthViewPort_93AD8 )
              LOWORD(v907) = widthViewPort_93AD8;
            v905 = (unsigned __int16)v912;
LABEL_1096:
            v1271x = v904x;
            v913 = (int)actTexture_93AD0;
            while ( 1 )
            {
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[0];
                tempScrPtr23[0] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v911);
              LOWORD(v911) = scaledU.dword + v911;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v911);
              v914 = v1162 + v911;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v915 = v907 - 1;
              if ( !v915 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[1];
                tempScrPtr23[1] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v914);
              LOWORD(v914) = scaledU.dword + v914;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v914);
              v916 = v1162 + v914;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v917 = v915 - 1;
              if ( !v917 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[2];
                tempScrPtr23[2] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v916);
              LOWORD(v916) = scaledU.dword + v916;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v916);
              v918 = v1162 + v916;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v919 = v917 - 1;
              if ( !v919 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[3];
                tempScrPtr23[3] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v918);
              LOWORD(v918) = scaledU.dword + v918;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v918);
              v920 = v1162 + v918;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v921 = v919 - 1;
              if ( !v921 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[4];
                tempScrPtr23[4] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v920);
              LOWORD(v920) = scaledU.dword + v920;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v920);
              v922 = v1162 + v920;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v923 = v921 - 1;
              if ( !v923 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[5];
                tempScrPtr23[5] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v922);
              LOWORD(v922) = scaledU.dword + v922;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v922);
              v924 = v1162 + v922;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v925 = v923 - 1;
              if ( !v925 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[6];
                tempScrPtr23[6] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v924);
              LOWORD(v924) = scaledU.dword + v924;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v924);
              v926 = v1162 + v924;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v927 = v925 - 1;
              if ( !v927 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[7];
                tempScrPtr23[7] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v926);
              LOWORD(v926) = scaledU.dword + v926;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v926);
              v928 = v1162 + v926;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v929 = v927 - 1;
              if ( !v929 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[8];
                tempScrPtr23[8] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v928);
              LOWORD(v928) = scaledU.dword + v928;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v928);
              v930 = v1162 + v928;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v931 = v929 - 1;
              if ( !v931 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[9];
                tempScrPtr23[9] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v930);
              LOWORD(v930) = scaledU.dword + v930;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v930);
              v932 = v1162 + v930;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v933 = v931 - 1;
              if ( !v933 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[10];
                tempScrPtr23[10] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v932);
              LOWORD(v932) = scaledU.dword + v932;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v932);
              v934 = v1162 + v932;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v935 = v933 - 1;
              if ( !v935 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[11];
                tempScrPtr23[11] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v934);
              LOWORD(v934) = scaledU.dword + v934;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v934);
              v936 = v1162 + v934;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v937 = v935 - 1;
              if ( !v937 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[12];
                tempScrPtr23[12] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v936);
              LOWORD(v936) = scaledU.dword + v936;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v936);
              v938 = v1162 + v936;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v939 = v937 - 1;
              if ( !v939 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[13];
                tempScrPtr23[13] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v938);
              LOWORD(v938) = scaledU.dword + v938;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v938);
              v940 = v1162 + v938;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v941 = v939 - 1;
              if ( !v941 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[14];
                tempScrPtr23[14] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v940);
              LOWORD(v940) = scaledU.dword + v940;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v940);
              v942 = v1162 + v940;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              v943 = v941 - 1;
              if ( !v943 )
                break;
              LOBYTE(v905) = *(_BYTE *)(v906 + v913);
              if ( (_BYTE)v905 )
              {
                BYTE1(v905) = tempScrPtr23[15];
                tempScrPtr23[15] = strPal.byte_BB934_BB924[v905];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v942);
              LOWORD(v942) = scaledU.dword + v942;
              LOBYTE(v906) = BYTE2(scaledU.dword) + v171 + v906;
              v171 = __CFADD__(v1162, v942);
              v911 = v1162 + v942;
              BYTE1(v906) += BYTE2(scaledV.dword) + v171;
              LOWORD(v907) = v943 - 1;
              if ( !(_WORD)v907 )
                break;
              tempScrPtr23 += 16;
            }
            v904x = v1271x;
          }
LABEL_1147:
          //v904 += 10;
          v904x++;
          if ( !--ySum_C )
            return;
        }
        if ( v907 > widthViewPort_93AD8 )
          LOWORD(v907) = widthViewPort_93AD8;
        bool16 = (__int16)v907 <= (__int16)v905;
        LOWORD(v907) = v907 - v905;
        if (bool16)
          goto LABEL_1147;
        tempScrPtr23 += v905;
        v911 = __ROL4_16__(unk_93AE0[v904x].v_3.a32);
        BYTE1(v906) = v911;
        LOWORD(v911) = unk_93AE0[v904x].u_2.a16[0];
        LOBYTE(v906) = unk_93AE0[v904x].u_2.a16[1];
        goto LABEL_1096;
      case 24:
LABEL_1149:
        //v944 = (unsigned __int16 *)&unk_93AE0;
        v1163 = scaledV.dword << 16;
        v1170 = scaledZ.dword << 16;
        HIWORD(v945) = 0;
        HIWORD(v946) = 0;
        while ( 1 )
        {
          LOWORD(v945) = unk_93AE0[v944x].x_0.a16[1];
          v947 = unk_93AE0[v944x].y_1.a16[1];
          //v948 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr24 = actScrPtr;
          if ( (v945 & 0x8000u) == 0 )
            break;
          if ( (__int16)v947 > 0 )
          {
            if ( v947 > widthViewPort_93AD8 )
              v947 = widthViewPort_93AD8;
            v1209 = v947;
            v949 = (unsigned __int16)-(__int16)v945;
            v950 = __ROL4_16__(unk_93AE0[v944x].v_3.a32 + scaledV.dword * v949);
            BYTE1(v946) = v950;
            LOWORD(v950) = unk_93AE0[v944x].u_2.a16[0] + scaledU.dword * v949;
            v945 = (unsigned int)(unk_93AE0[v944x].u_2.a32 + scaledU.dword * v949) >> 8;
            LOBYTE(v946) = (unsigned int)(unk_93AE0[v944x].u_2.a32 + scaledU.dword * v949) >> 16;
            v951 = __ROL4_16__(unk_93AE0[v944x].z_4.a32 + scaledZ.dword * v949);
            v945 = (unsigned __int16)v945;
LABEL_1159:
            v1272x = v944x;
            v952 = (int)actTexture_93AD0;
            while ( 1 )
            {
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v951;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[0];
                tempScrPtr24[0] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v950);
              LOWORD(v950) = scaledU.dword + v950;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v950);
              v953 = v1163 + v950;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v951);
              v954 = v1170 + v951;
              LOBYTE(v954) = BYTE2(scaledZ.dword) + v171 + v954;
              v1210 = v1209 - 1;
              if ( !v1210 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v954;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[1];
                tempScrPtr24[1] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v953);
              LOWORD(v953) = scaledU.dword + v953;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v953);
              v955 = v1163 + v953;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v954);
              v956 = v1170 + v954;
              LOBYTE(v956) = BYTE2(scaledZ.dword) + v171 + v956;
              v1211 = v1210 - 1;
              if ( !v1211 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v956;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[2];
                tempScrPtr24[2] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v955);
              LOWORD(v955) = scaledU.dword + v955;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v955);
              v957 = v1163 + v955;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v956);
              v958 = v1170 + v956;
              LOBYTE(v958) = BYTE2(scaledZ.dword) + v171 + v958;
              v1212 = v1211 - 1;
              if ( !v1212 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v958;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[3];
                tempScrPtr24[3] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v957);
              LOWORD(v957) = scaledU.dword + v957;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v957);
              v959 = v1163 + v957;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v958);
              v960 = v1170 + v958;
              LOBYTE(v960) = BYTE2(scaledZ.dword) + v171 + v960;
              v1213 = v1212 - 1;
              if ( !v1213 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v960;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[4];
                tempScrPtr24[4] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v959);
              LOWORD(v959) = scaledU.dword + v959;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v959);
              v961 = v1163 + v959;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v960);
              v962 = v1170 + v960;
              LOBYTE(v962) = BYTE2(scaledZ.dword) + v171 + v962;
              v1214 = v1213 - 1;
              if ( !v1214 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v962;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[5];
                tempScrPtr24[5] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v961);
              LOWORD(v961) = scaledU.dword + v961;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v961);
              v963 = v1163 + v961;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v962);
              v964 = v1170 + v962;
              LOBYTE(v964) = BYTE2(scaledZ.dword) + v171 + v964;
              v1215 = v1214 - 1;
              if ( !v1215 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v964;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[6];
                tempScrPtr24[6] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v963);
              LOWORD(v963) = scaledU.dword + v963;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v963);
              v965 = v1163 + v963;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v964);
              v966 = v1170 + v964;
              LOBYTE(v966) = BYTE2(scaledZ.dword) + v171 + v966;
              v1216 = v1215 - 1;
              if ( !v1216 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v966;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[7];
                tempScrPtr24[7] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v965);
              LOWORD(v965) = scaledU.dword + v965;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v965);
              v967 = v1163 + v965;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v966);
              v968 = v1170 + v966;
              LOBYTE(v968) = BYTE2(scaledZ.dword) + v171 + v968;
              v1217 = v1216 - 1;
              if ( !v1217 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v968;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[8];
                tempScrPtr24[8] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v967);
              LOWORD(v967) = scaledU.dword + v967;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v967);
              v969 = v1163 + v967;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v968);
              v970 = v1170 + v968;
              LOBYTE(v970) = BYTE2(scaledZ.dword) + v171 + v970;
              v1218 = v1217 - 1;
              if ( !v1218 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v970;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[9];
                tempScrPtr24[9] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v969);
              LOWORD(v969) = scaledU.dword + v969;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v969);
              v971 = v1163 + v969;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v970);
              v972 = v1170 + v970;
              LOBYTE(v972) = BYTE2(scaledZ.dword) + v171 + v972;
              v1219 = v1218 - 1;
              if ( !v1219 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v972;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[10];
                tempScrPtr24[10] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v971);
              LOWORD(v971) = scaledU.dword + v971;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v971);
              v973 = v1163 + v971;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v972);
              v974 = v1170 + v972;
              LOBYTE(v974) = BYTE2(scaledZ.dword) + v171 + v974;
              v1220 = v1219 - 1;
              if ( !v1220 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v974;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[11];
                tempScrPtr24[11] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v973);
              LOWORD(v973) = scaledU.dword + v973;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v973);
              v975 = v1163 + v973;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v974);
              v976 = v1170 + v974;
              LOBYTE(v976) = BYTE2(scaledZ.dword) + v171 + v976;
              v1221 = v1220 - 1;
              if ( !v1221 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v976;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[12];
                tempScrPtr24[12] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v975);
              LOWORD(v975) = scaledU.dword + v975;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v975);
              v977 = v1163 + v975;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v976);
              v978 = v1170 + v976;
              LOBYTE(v978) = BYTE2(scaledZ.dword) + v171 + v978;
              v1222 = v1221 - 1;
              if ( !v1222 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v978;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[13];
                tempScrPtr24[13] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v977);
              LOWORD(v977) = scaledU.dword + v977;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v977);
              v979 = v1163 + v977;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v978);
              v980 = v1170 + v978;
              LOBYTE(v980) = BYTE2(scaledZ.dword) + v171 + v980;
              v1223 = v1222 - 1;
              if ( !v1223 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v980;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[14];
                tempScrPtr24[14] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v979);
              LOWORD(v979) = scaledU.dword + v979;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v979);
              v981 = v1163 + v979;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v980);
              v982 = v1170 + v980;
              LOBYTE(v982) = BYTE2(scaledZ.dword) + v171 + v982;
              v1224 = v1223 - 1;
              if ( !v1224 )
                break;
              LOBYTE(v945) = *(_BYTE *)(v946 + v952);
              if ( (_BYTE)v945 )
              {
                BYTE1(v945) = v982;
                BYTE1(v945) = strPal.fog_B7934_B7924[v945];
                LOBYTE(v945) = tempScrPtr24[15];
                tempScrPtr24[15] = strPal.byte_BB934_BB924[v945];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v981);
              LOWORD(v981) = scaledU.dword + v981;
              LOBYTE(v946) = BYTE2(scaledU.dword) + v171 + v946;
              v171 = __CFADD__(v1163, v981);
              v950 = v1163 + v981;
              BYTE1(v946) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1170, v982);
              v951 = v1170 + v982;
              LOBYTE(v951) = BYTE2(scaledZ.dword) + v171 + v951;
              v1209 = v1224 - 1;
              if ( !v1209 )
                break;
              tempScrPtr24 += 16;
            }
            v944x = v1272x;
          }
LABEL_1210:
          //v944 += 10;
          v944x++;
          if ( !--ySum_C )
            return;
        }
        if ( v947 > widthViewPort_93AD8 )
          v947 = widthViewPort_93AD8;
        bool16 = (__int16)v947 <= (__int16)v945;
        LOWORD(v947) = v947 - v945;
        if (bool16)
          goto LABEL_1210;
        tempScrPtr24 += v945;
        v950 = __ROL4_16__(unk_93AE0[v944x].v_3.a32);
        BYTE1(v946) = v950;
        LOWORD(v950) = unk_93AE0[v944x].u_2.a16[0];
        LOBYTE(v946) = unk_93AE0[v944x].u_2.a16[1];
        v1209 = v947;
        v951 = __ROL4_16__(unk_93AE0[v944x].z_4.a32);
        goto LABEL_1159;
      case 25:
LABEL_1212:
        //v983 = (unsigned __int16 *)&unk_93AE0;
        v983x = 0;
        v1164 = scaledV.dword << 16;
        v1171 = scaledZ.dword << 16;
        HIWORD(v984) = 0;
        HIWORD(v985) = 0;
        while ( 1 )
        {
          LOWORD(v984) = unk_93AE0[v983x].x_0.a16[1];
          v986 = unk_93AE0[v983x].y_1.a16[1];
          //v987 = (_BYTE *)(pitchViewPort_93AD4 + actScrPtr);
          actScrPtr += pitchViewPort_93AD4;
          tempScrPtr25 = actScrPtr;
          if ( (v984 & 0x8000u) == 0 )
            break;
          if ( (__int16)v986 > 0 )
          {
            if ( v986 > widthViewPort_93AD8 )
              v986 = widthViewPort_93AD8;
            v1225 = v986;
            v988 = (unsigned __int16)-(__int16)v984;
            v989 = __ROL4_16__(unk_93AE0[v983x].v_3.a32 + scaledV.dword * v988);
            BYTE1(v985) = v989;
            LOWORD(v989) = unk_93AE0[v983x].u_2.a16[0] + scaledU.dword * v988;
            v984 = (unsigned int)(unk_93AE0[v983x].u_2.a32 + scaledU.dword * v988) >> 8;
            LOBYTE(v985) = (unsigned int)(unk_93AE0[v983x].u_2.a32 + scaledU.dword * v988) >> 16;
            v990 = __ROL4_16__(unk_93AE0[v983x].z_4.a32 + scaledZ.dword * v988);
            v984 = (unsigned __int16)v984;
LABEL_1222:
            v1273x = v983x;
            v991 = (int)actTexture_93AD0;
            while ( 1 )
            {
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v990;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[0];
                tempScrPtr25[0] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v989);
              LOWORD(v989) = scaledU.dword + v989;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v989);
              v992 = v1164 + v989;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v990);
              v993 = v1171 + v990;
              LOBYTE(v993) = BYTE2(scaledZ.dword) + v171 + v993;
              v1226 = v1225 - 1;
              if ( !v1226 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v993;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[1];
                tempScrPtr25[1] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v992);
              LOWORD(v992) = scaledU.dword + v992;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v992);
              v994 = v1164 + v992;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v993);
              v995 = v1171 + v993;
              LOBYTE(v995) = BYTE2(scaledZ.dword) + v171 + v995;
              v1227 = v1226 - 1;
              if ( !v1227 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v995;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[2];
                tempScrPtr25[2] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v994);
              LOWORD(v994) = scaledU.dword + v994;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v994);
              v996 = v1164 + v994;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v995);
              v997 = v1171 + v995;
              LOBYTE(v997) = BYTE2(scaledZ.dword) + v171 + v997;
              v1228 = v1227 - 1;
              if ( !v1228 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v997;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[3];
                tempScrPtr25[3] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v996);
              LOWORD(v996) = scaledU.dword + v996;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v996);
              v998 = v1164 + v996;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v997);
              v999 = v1171 + v997;
              LOBYTE(v999) = BYTE2(scaledZ.dword) + v171 + v999;
              v1229 = v1228 - 1;
              if ( !v1229 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v999;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[4];
                tempScrPtr25[4] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v998);
              LOWORD(v998) = scaledU.dword + v998;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v998);
              v1000 = v1164 + v998;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v999);
              v1001 = v1171 + v999;
              LOBYTE(v1001) = BYTE2(scaledZ.dword) + v171 + v1001;
              v1230 = v1229 - 1;
              if ( !v1230 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1001;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[5];
                tempScrPtr25[5] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1000);
              LOWORD(v1000) = scaledU.dword + v1000;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v1000);
              v1002 = v1164 + v1000;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v1001);
              v1003 = v1171 + v1001;
              LOBYTE(v1003) = BYTE2(scaledZ.dword) + v171 + v1003;
              v1231 = v1230 - 1;
              if ( !v1231 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1003;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[6];
                tempScrPtr25[6] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1002);
              LOWORD(v1002) = scaledU.dword + v1002;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v1002);
              v1004 = v1164 + v1002;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v1003);
              v1005 = v1171 + v1003;
              LOBYTE(v1005) = BYTE2(scaledZ.dword) + v171 + v1005;
              v1232 = v1231 - 1;
              if ( !v1232 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1005;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[7];
                tempScrPtr25[7] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1004);
              LOWORD(v1004) = scaledU.dword + v1004;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v1004);
              v1006 = v1164 + v1004;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v1005);
              v1007 = v1171 + v1005;
              LOBYTE(v1007) = BYTE2(scaledZ.dword) + v171 + v1007;
              v1233 = v1232 - 1;
              if ( !v1233 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1007;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[8];
                tempScrPtr25[8] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1006);
              LOWORD(v1006) = scaledU.dword + v1006;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v1006);
              v1008 = v1164 + v1006;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v1007);
              v1009 = v1171 + v1007;
              LOBYTE(v1009) = BYTE2(scaledZ.dword) + v171 + v1009;
              v1234 = v1233 - 1;
              if ( !v1234 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1009;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[9];
                tempScrPtr25[9] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1008);
              LOWORD(v1008) = scaledU.dword + v1008;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v1008);
              v1010 = v1164 + v1008;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v1009);
              v1011 = v1171 + v1009;
              LOBYTE(v1011) = BYTE2(scaledZ.dword) + v171 + v1011;
              v1235 = v1234 - 1;
              if ( !v1235 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1011;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[10];
                tempScrPtr25[10] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1010);
              LOWORD(v1010) = scaledU.dword + v1010;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v1010);
              v1012 = v1164 + v1010;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v1011);
              v1013 = v1171 + v1011;
              LOBYTE(v1013) = BYTE2(scaledZ.dword) + v171 + v1013;
              v1236 = v1235 - 1;
              if ( !v1236 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1013;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[11];
                tempScrPtr25[11] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1012);
              LOWORD(v1012) = scaledU.dword + v1012;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v1012);
              v1014 = v1164 + v1012;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v1013);
              v1015 = v1171 + v1013;
              LOBYTE(v1015) = BYTE2(scaledZ.dword) + v171 + v1015;
              v1237 = v1236 - 1;
              if ( !v1237 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1015;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[12];
                tempScrPtr25[12] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1014);
              LOWORD(v1014) = scaledU.dword + v1014;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v1014);
              v1016 = v1164 + v1014;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v1015);
              v1017 = v1171 + v1015;
              LOBYTE(v1017) = BYTE2(scaledZ.dword) + v171 + v1017;
              v1238 = v1237 - 1;
              if ( !v1238 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1017;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[13];
                tempScrPtr25[13] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1016);
              LOWORD(v1016) = scaledU.dword + v1016;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v1016);
              v1018 = v1164 + v1016;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v1017);
              v1019 = v1171 + v1017;
              LOBYTE(v1019) = BYTE2(scaledZ.dword) + v171 + v1019;
              v1239 = v1238 - 1;
              if ( !v1239 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1019;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[14];
                tempScrPtr25[14] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1018);
              LOWORD(v1018) = scaledU.dword + v1018;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v1018);
              v1020 = v1164 + v1018;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v1019);
              v1021 = v1171 + v1019;
              LOBYTE(v1021) = BYTE2(scaledZ.dword) + v171 + v1021;
              v1240 = v1239 - 1;
              if ( !v1240 )
                break;
              LOBYTE(v984) = *(_BYTE *)(v985 + v991);
              if ( (_BYTE)v984 )
              {
                BYTE1(v984) = v1021;
                LOBYTE(v984) = strPal.fog_B7934_B7924[v984];
                BYTE1(v984) = tempScrPtr25[15];
                tempScrPtr25[15] = strPal.byte_BB934_BB924[v984];
              }
              v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1020);
              LOWORD(v1020) = scaledU.dword + v1020;
              LOBYTE(v985) = BYTE2(scaledU.dword) + v171 + v985;
              v171 = __CFADD__(v1164, v1020);
              v989 = v1164 + v1020;
              BYTE1(v985) += BYTE2(scaledV.dword) + v171;
              v171 = __CFADD__(v1171, v1021);
              v990 = v1171 + v1021;
              LOBYTE(v990) = BYTE2(scaledZ.dword) + v171 + v990;
              v1225 = v1240 - 1;
              if ( !v1225 )
                break;
              tempScrPtr25 += 16;
            }
            v983x = v1273x;
          }
LABEL_1273:
          //v983 += 10;
          v983x++;
          if ( !--ySum_C )
            return;
        }
        if ( v986 > widthViewPort_93AD8 )
          v986 = widthViewPort_93AD8;
        bool16 = (__int16)v986 <= (__int16)v984;
        LOWORD(v986) = v986 - v984;
        if (bool16)
          goto LABEL_1273;
        tempScrPtr25 += v984;
        v989 = __ROL4_16__(unk_93AE0[v983x].v_3.a32);
        BYTE1(v985) = v989;
        LOWORD(v989) = unk_93AE0[v983x].u_2.a16[0];
        LOBYTE(v985) = unk_93AE0[v983x].u_2.a16[1];
        v1225 = v986;
        v990 = __ROL4_16__(unk_93AE0[v983x].z_4.a32);
        goto LABEL_1222;
      case 26:
LABEL_1275:
        //v1022 = (unsigned __int16 *)&unk_93AE0;
        v1022x = 0;
        v1165 = scaledV.dword << 16;
        v1172 = scaledZ.dword << 16;
        HIWORD(v1023) = 0;
        HIWORD(v1024) = 0;
        break;
    }
    while ( 1 )
    {
      LOWORD(v1023) = unk_93AE0[v1022x].x_0.a16[1];
      v1025 = unk_93AE0[v1022x].y_1.a16[1];
      //v1026 = (char *)(pitchViewPort_93AD4 + actScrPtr);
      actScrPtr += pitchViewPort_93AD4;
      tempScrPtr26 = actScrPtr;
      if ( (v1023 & 0x8000u) == 0 )
        break;
      if ( (__int16)v1025 > 0 )
      {
        if ( v1025 > widthViewPort_93AD8 )
          v1025 = widthViewPort_93AD8;
        v1241 = v1025;
        v1027 = (unsigned __int16)-(__int16)v1023;
        v1028 = __ROL4_16__(unk_93AE0[v1022x].v_3.a32 + scaledV.dword * v1027);
        BYTE1(v1024) = v1028;
        LOWORD(v1028) = unk_93AE0[v1022x].u_2.a16[0] + scaledU.dword * v1027;
        v1023 = (unsigned int)(unk_93AE0[v1022x].u_2.a32 + scaledU.dword * v1027) >> 8;
        LOBYTE(v1024) = (unsigned int)(unk_93AE0[v1022x].u_2.a32 + scaledU.dword * v1027) >> 16;
        v1029 = __ROL4_16__(unk_93AE0[v1022x].z_4.a32 + scaledZ.dword * v1027);
        v1023 = (unsigned __int16)v1023;
LABEL_1285:
        v1274x = v1022x;
        v1030 = (int)actTexture_93AD0;
        while ( 1 )
        {
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1028);
          LOWORD(v1028) = scaledU.dword + v1028;
          BYTE1(v1023) = v1029;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1031 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[0];
            v1031 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1028);
          v1032 = v1165 + v1028;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1029);
          v1033 = v1172 + v1029;
          tempScrPtr26[0] = v1031;
          LOBYTE(v1033) = BYTE2(scaledZ.dword) + v171 + v1033;
          v1242 = v1241 - 1;
          if ( !v1242 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1032);
          LOWORD(v1032) = scaledU.dword + v1032;
          BYTE1(v1023) = v1033;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1034 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[1];
            v1034 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1032);
          v1035 = v1165 + v1032;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1033);
          v1036 = v1172 + v1033;
          tempScrPtr26[1] = v1034;
          LOBYTE(v1036) = BYTE2(scaledZ.dword) + v171 + v1036;
          v1243 = v1242 - 1;
          if ( !v1243 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1035);
          LOWORD(v1035) = scaledU.dword + v1035;
          BYTE1(v1023) = v1036;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1037 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[2];
            v1037 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1035);
          v1038 = v1165 + v1035;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1036);
          v1039 = v1172 + v1036;
          tempScrPtr26[2] = v1037;
          LOBYTE(v1039) = BYTE2(scaledZ.dword) + v171 + v1039;
          v1244 = v1243 - 1;
          if ( !v1244 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1038);
          LOWORD(v1038) = scaledU.dword + v1038;
          BYTE1(v1023) = v1039;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1040 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[3];
            v1040 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1038);
          v1041 = v1165 + v1038;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1039);
          v1042 = v1172 + v1039;
          tempScrPtr26[3] = v1040;
          LOBYTE(v1042) = BYTE2(scaledZ.dword) + v171 + v1042;
          v1245 = v1244 - 1;
          if ( !v1245 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1041);
          LOWORD(v1041) = scaledU.dword + v1041;
          BYTE1(v1023) = v1042;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1043 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[4];
            v1043 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1041);
          v1044 = v1165 + v1041;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1042);
          v1045 = v1172 + v1042;
          tempScrPtr26[4] = v1043;
          LOBYTE(v1045) = BYTE2(scaledZ.dword) + v171 + v1045;
          v1246 = v1245 - 1;
          if ( !v1246 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1044);
          LOWORD(v1044) = scaledU.dword + v1044;
          BYTE1(v1023) = v1045;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1046 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[5];
            v1046 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1044);
          v1047 = v1165 + v1044;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1045);
          v1048 = v1172 + v1045;
          tempScrPtr26[5] = v1046;
          LOBYTE(v1048) = BYTE2(scaledZ.dword) + v171 + v1048;
          v1247 = v1246 - 1;
          if ( !v1247 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1047);
          LOWORD(v1047) = scaledU.dword + v1047;
          BYTE1(v1023) = v1048;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1049 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[6];
            v1049 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1047);
          v1050 = v1165 + v1047;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1048);
          v1051 = v1172 + v1048;
          tempScrPtr26[6] = v1049;
          LOBYTE(v1051) = BYTE2(scaledZ.dword) + v171 + v1051;
          v1248 = v1247 - 1;
          if ( !v1248 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1050);
          LOWORD(v1050) = scaledU.dword + v1050;
          BYTE1(v1023) = v1051;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1052 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[7];
            v1052 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1050);
          v1053 = v1165 + v1050;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1051);
          v1054 = v1172 + v1051;
          tempScrPtr26[7] = v1052;
          LOBYTE(v1054) = BYTE2(scaledZ.dword) + v171 + v1054;
          v1249 = v1248 - 1;
          if ( !v1249 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1053);
          LOWORD(v1053) = scaledU.dword + v1053;
          BYTE1(v1023) = v1054;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1055 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[8];
            v1055 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1053);
          v1056 = v1165 + v1053;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1054);
          v1057 = v1172 + v1054;
          tempScrPtr26[8] = v1055;
          LOBYTE(v1057) = BYTE2(scaledZ.dword) + v171 + v1057;
          v1250 = v1249 - 1;
          if ( !v1250 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1056);
          LOWORD(v1056) = scaledU.dword + v1056;
          BYTE1(v1023) = v1057;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1058 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[9];
            v1058 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1056);
          v1059 = v1165 + v1056;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1057);
          v1060 = v1172 + v1057;
          tempScrPtr26[9] = v1058;
          LOBYTE(v1060) = BYTE2(scaledZ.dword) + v171 + v1060;
          v1251 = v1250 - 1;
          if ( !v1251 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1059);
          LOWORD(v1059) = scaledU.dword + v1059;
          BYTE1(v1023) = v1060;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1061 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[10];
            v1061 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1059);
          v1062 = v1165 + v1059;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1060);
          v1063 = v1172 + v1060;
          tempScrPtr26[10] = v1061;
          LOBYTE(v1063) = BYTE2(scaledZ.dword) + v171 + v1063;
          v1252 = v1251 - 1;
          if ( !v1252 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1062);
          LOWORD(v1062) = scaledU.dword + v1062;
          BYTE1(v1023) = v1063;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1064 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[11];
            v1064 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1062);
          v1065 = v1165 + v1062;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1063);
          v1066 = v1172 + v1063;
          tempScrPtr26[11] = v1064;
          LOBYTE(v1066) = BYTE2(scaledZ.dword) + v171 + v1066;
          v1253 = v1252 - 1;
          if ( !v1253 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1065);
          LOWORD(v1065) = scaledU.dword + v1065;
          BYTE1(v1023) = v1066;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1067 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[12];
            v1067 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1065);
          v1068 = v1165 + v1065;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1066);
          v1069 = v1172 + v1066;
          tempScrPtr26[12] = v1067;
          LOBYTE(v1069) = BYTE2(scaledZ.dword) + v171 + v1069;
          v1254 = v1253 - 1;
          if ( !v1254 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1068);
          LOWORD(v1068) = scaledU.dword + v1068;
          BYTE1(v1023) = v1069;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1070 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[13];
            v1070 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1068);
          v1071 = v1165 + v1068;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1069);
          v1072 = v1172 + v1069;
          tempScrPtr26[13] = v1070;
          LOBYTE(v1072) = BYTE2(scaledZ.dword) + v171 + v1072;
          v1255 = v1254 - 1;
          if ( !v1255 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1071);
          LOWORD(v1071) = scaledU.dword + v1071;
          BYTE1(v1023) = v1072;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1073 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[14];
            v1073 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1071);
          v1074 = v1165 + v1071;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1072);
          v1075 = v1172 + v1072;
          tempScrPtr26[14] = v1073;
          LOBYTE(v1075) = BYTE2(scaledZ.dword) + v171 + v1075;
          v1256 = v1255 - 1;
          if ( !v1256 )
            break;
          LOBYTE(v1023) = *(_BYTE *)(v1024 + v1030);
          v171 = __CFADD__((_WORD)scaledU.dword, (_WORD)v1074);
          LOWORD(v1074) = scaledU.dword + v1074;
          BYTE1(v1023) = v1075;
          LOBYTE(v1024) = BYTE2(scaledU.dword) + v171 + v1024;
          if ( (unsigned __int8)v1023 >= 0xCu )
          {
            v1076 = strPal.fog_B7934_B7924[v1023];
          }
          else
          {
            LOBYTE(v1023) = strPal.fog_B7934_B7924[v1023];
            BYTE1(v1023) = tempScrPtr26[15];
            v1076 = strPal.byte_BB934_BB924[v1023];
          }
          v171 = __CFADD__(v1165, v1074);
          v1028 = v1165 + v1074;
          BYTE1(v1024) += BYTE2(scaledV.dword) + v171;
          v171 = __CFADD__(v1172, v1075);
          v1029 = v1172 + v1075;
          tempScrPtr26[15] = v1076;
          LOBYTE(v1029) = BYTE2(scaledZ.dword) + v171 + v1029;
          v1241 = v1256 - 1;
          if ( !v1241 )
            break;
          tempScrPtr26 += 16;
        }
        v1022x = v1274x;
      }
LABEL_1352:
      //v1022 += 10;
      v1022x++;
      if ( !--ySum_C )
        return;
    }
    if ( v1025 > widthViewPort_93AD8 )
      v1025 = widthViewPort_93AD8;
    bool16 = (__int16)v1025 <= (__int16)v1023;
    LOWORD(v1025) = v1025 - v1023;
    if (bool16)
      goto LABEL_1352;
    tempScrPtr26 += v1023;
    v1028 = __ROL4_16__(unk_93AE0[v1022x].v_3.a32);
    BYTE1(v1024) = v1028;
    LOWORD(v1028) = unk_93AE0[v1022x].u_2.a16[0];
    LOBYTE(v1024) = unk_93AE0[v1022x].u_2.a16[1];
    v1241 = v1025;
    v1029 = __ROL4_16__(unk_93AE0[v1022x].z_4.a32);
    goto LABEL_1285;
  }

  //LABEL_124:
  if(boolLabel124) {
//LABEL_124:
//v60 = sortPnt1->y_1;
//v1174 = sortPnt1->y_1;
if (sortPnt1->y_1 >= 0)
{
    if (sortPnt1->y_1 >= heightViewPort_93ADC)
        return;
    actScrPtr = beginPrevLineFrame_93AC8 + pitchViewPort_93AD4 * sortPnt1->y_1;
    sPnt1NotInView = false;
}
else
{
    actScrPtr = beginPrevLineFrame_93AC8;
    sPnt1NotInView = true;
}
//v61 = sortPnt3->y_1;
sPnt3YAfterScr = sortPnt3->y_1 > heightViewPort_93ADC;
diffSPnt3SPnt1Y = sortPnt3->y_1 - sortPnt1->y_1;
//v62 = sortPnt2->y_1;
sPnt2YAfterScr = sortPnt2->y_1 > heightViewPort_93ADC;
//v63 = sortPnt2->y_1 - sortPnt1->y_1;
//v1093 = sortPnt2->y_1 - sortPnt1->y_1;
ySum_C = sortPnt2->y_1 - sortPnt1->y_1;
divSPnt3SPnt1XY = ((sortPnt3->x_0 - sortPnt1->x_0) << 16) / diffSPnt3SPnt1Y;
if (((sortPnt2->x_0 - sortPnt1->x_0) << 16) / (sortPnt2->y_1 - sortPnt1->y_1) > divSPnt3SPnt1XY)
{
    divSPnt2SPnt1XY = ((sortPnt2->x_0 - sortPnt1->x_0) << 16) / (sortPnt2->y_1 - sortPnt1->y_1);
    divPnt2Pnt3XY = ((sortPnt2->x_0 - sortPnt3->x_0) << 16) / (sortPnt2->y_1 - sortPnt3->y_1);
    diffPnt2Pnt3Y = sortPnt2->y_1 - sortPnt3->y_1;
    //v1097 = sortPnt3->x_0 << 16;
    switch (byte_967E1)
    {
    case 0:
    case 14:
    case 15:
        v102 = sortPnt1->x_0 << 16;
        v103 = v102;
        if (sPnt1NotInView)
        {
            //bool16 = ySum <= -sortPnt1->y_1;
            ySum_C += sortPnt1->y_1;
            if (ySum_C <= -sortPnt1->y_1)
                return;
            //v1146 = -sortPnt1->y_1;
            if (-sortPnt1->y_1 - diffSPnt3SPnt1Y >= 0)
            {
                v1147 = -sortPnt1->y_1 - diffSPnt3SPnt1Y;
                diffPnt2Pnt3Y -= v1147;
                v104 = divPnt2Pnt3XY * v1147 + sortPnt3->x_0 << 16;
                v103 += v1147 * divSPnt2SPnt1XY + diffSPnt3SPnt1Y * divSPnt2SPnt1XY;
                if (sPnt2YAfterScr)
                {
                    diffPnt2Pnt3Y = heightViewPort_93ADC;
                    ySum_C = heightViewPort_93ADC;
                }
                //v105 = (uint32*)&unk_93AE0;
                v105x = 0;
            LABEL_219:
                if (sPnt3YAfterScr)
                {
                    v29 = (unsigned __int8)byte_967E1;
                    switch (byte_967E1)
                    {
                    case 0:
                        goto LABEL_309;
                    case 1:
                        goto LABEL_322;
                    case 2:
                        goto LABEL_351;
                    case 3:
                        goto LABEL_382;
                    case 4:
                        goto LABEL_445;
                    case 5:
                        goto LABEL_474;
                    case 6:
                        goto LABEL_503;
                    case 7:
                    case 11:
                        goto LABEL_564;
                    case 8:
                        goto LABEL_595;
                    case 9:
                    case 10:
                        goto LABEL_658;
                    case 12:
                        goto LABEL_721;
                    case 13:
                        goto LABEL_752;
                    case 14:
                        goto LABEL_783;
                    case 15:
                        goto LABEL_812;
                    case 16:
                        goto LABEL_841;
                    case 17:
                        goto LABEL_870;
                    case 18:
                        goto LABEL_899;
                    case 19:
                        goto LABEL_930;
                    case 20:
                        goto LABEL_961;
                    case 21:
                        goto LABEL_992;
                    case 22:
                        goto LABEL_1023;
                    case 23:
                        goto LABEL_1086;
                    case 24:
                        goto LABEL_1149;
                    case 25:
                        goto LABEL_1212;
                    case 26:
                        goto LABEL_1275;
                    }
                }
                do
                {
                    unk_93AE0[v105x].x_0.a32 = v104;
                    v104 += divPnt2Pnt3XY;
                    unk_93AE0[v105x].y_1.a32 = v103;
                    v103 += divSPnt2SPnt1XY;
                    //v105 += 5;
                    v105x++;
                    diffPnt2Pnt3Y--;
                } while (diffPnt2Pnt3Y);
                v29 = (unsigned __int8)byte_967E1;
                switch (byte_967E1)
                {
                case 0:
                    goto LABEL_309;
                case 1:
                    goto LABEL_322;
                case 2:
                    goto LABEL_351;
                case 3:
                    goto LABEL_382;
                case 4:
                    goto LABEL_445;
                case 5:
                    goto LABEL_474;
                case 6:
                    goto LABEL_503;
                case 7:
                case 11:
                    goto LABEL_564;
                case 8:
                    goto LABEL_595;
                case 9:
                case 10:
                    goto LABEL_658;
                case 12:
                    goto LABEL_721;
                case 13:
                    goto LABEL_752;
                case 14:
                    goto LABEL_783;
                case 15:
                    goto LABEL_812;
                case 16:
                    goto LABEL_841;
                case 17:
                    goto LABEL_870;
                case 18:
                    goto LABEL_899;
                case 19:
                    goto LABEL_930;
                case 20:
                    goto LABEL_961;
                case 21:
                    goto LABEL_992;
                case 22:
                    goto LABEL_1023;
                case 23:
                    goto LABEL_1086;
                case 24:
                    goto LABEL_1149;
                case 25:
                    goto LABEL_1212;
                case 26:
                    goto LABEL_1275;
                }
            }
            diffSPnt3SPnt1Y += sortPnt1->y_1;
            v102 += divSPnt3SPnt1XY * -sortPnt1->y_1;
            v103 += -sortPnt1->y_1 * divSPnt2SPnt1XY;
            if (sPnt2YAfterScr)
            {
                ySum_C = heightViewPort_93ADC;
                if (sPnt3YAfterScr)
                {
                    diffSPnt3SPnt1Y = heightViewPort_93ADC;
                }
                else
                {
                    sPnt3YAfterScr = heightViewPort_93ADC <= diffSPnt3SPnt1Y;
                    diffPnt2Pnt3Y = heightViewPort_93ADC - diffSPnt3SPnt1Y;
                }
            }
        }
        else if (sPnt2YAfterScr)
        {
            v106 = heightViewPort_93ADC - sortPnt1->y_1;
            ySum_C = heightViewPort_93ADC - sortPnt1->y_1;
            if (sPnt3YAfterScr)
            {
                diffSPnt3SPnt1Y = heightViewPort_93ADC - sortPnt1->y_1;
            }
            else
            {
                v27 = __OFSUB__(v106, diffSPnt3SPnt1Y);
                v107 = v106 - diffSPnt3SPnt1Y;
                sPnt3YAfterScr = (v107 < 0) ^ v27 | (v107 == 0);
                diffPnt2Pnt3Y = v107;
            }
        }
        //v105 = (uint32*)&unk_93AE0;
        v105x = 0;
        do
        {
            unk_93AE0[v105x].x_0.a32 = v102;
            v102 += divSPnt3SPnt1XY;
            unk_93AE0[v105x].y_1.a32 = v103;
            v103 += divSPnt2SPnt1XY;
            //v105 += 5;
            v105x++;
            diffSPnt3SPnt1Y--;
        } while (diffSPnt3SPnt1Y);
        v104 = sortPnt3->x_0 << 16;
        goto LABEL_219;
    case 1:
    case 4:
    case 16:
    case 17:
        v91 = diffSPnt3SPnt1Y * (__int64)(sortPnt2->x_0 - sortPnt1->x_0) / (sortPnt2->y_1 - sortPnt1->y_1);
        v92 = sortPnt1->x_0 - sortPnt3->x_0;
        v93 = v91 + v92 == 0;
        bool16 = (v91 + v92 < 0) ^ __OFADD__(v91, v92);
        v94 = v91 + v92;
        if (bool16)
            return;
        if (!v93)
            scaledZ.dword = (int)(sortPnt1->z_4 + diffSPnt3SPnt1Y * (__int64)(sortPnt2->z_4 - sortPnt1->z_4) / (sortPnt2->y_1 - sortPnt1->y_1) - sortPnt3->z_4) / (v94 + 1);
        v1125 = (sortPnt3->z_4 - sortPnt1->z_4) / diffSPnt3SPnt1Y;
        v1131 = (sortPnt2->z_4 - sortPnt3->z_4) / diffPnt2Pnt3Y;
        v95 = sortPnt1->x_0 << 16;
        v96 = v95;
        v97 = sortPnt1->z_4;
        if (sPnt1NotInView)
        {
            bool16 = ySum_C <= -sortPnt1->y_1;
            ySum_C += sortPnt1->y_1;
            if (bool16)
                return;
            v1144 = -sortPnt1->y_1;
            if (-sortPnt1->y_1 - diffSPnt3SPnt1Y >= 0)
            {
                v1145 = v1144 - diffSPnt3SPnt1Y;
                diffPnt2Pnt3Y -= v1145;
                v98 = divPnt2Pnt3XY * v1145 + sortPnt3->x_0 << 16;
                v96 += v1145 * divSPnt2SPnt1XY + diffSPnt3SPnt1Y * divSPnt2SPnt1XY;
                v97 += v1145 * v1131 + diffSPnt3SPnt1Y * v1125;
                if (sPnt2YAfterScr)
                {
                    diffPnt2Pnt3Y = heightViewPort_93ADC;
                    ySum_C = heightViewPort_93ADC;
                }
                //v99 = (uint32*)&unk_93AE0;
                v99x = 0;
            LABEL_198:
                if (sPnt3YAfterScr)
                {
                    v29 = (unsigned __int8)byte_967E1;
                    switch (byte_967E1)
                    {
                    case 0:
                        goto LABEL_309;
                    case 1:
                        goto LABEL_322;
                    case 2:
                        goto LABEL_351;
                    case 3:
                        goto LABEL_382;
                    case 4:
                        goto LABEL_445;
                    case 5:
                        goto LABEL_474;
                    case 6:
                        goto LABEL_503;
                    case 7:
                    case 11:
                        goto LABEL_564;
                    case 8:
                        goto LABEL_595;
                    case 9:
                    case 10:
                        goto LABEL_658;
                    case 12:
                        goto LABEL_721;
                    case 13:
                        goto LABEL_752;
                    case 14:
                        goto LABEL_783;
                    case 15:
                        goto LABEL_812;
                    case 16:
                        goto LABEL_841;
                    case 17:
                        goto LABEL_870;
                    case 18:
                        goto LABEL_899;
                    case 19:
                        goto LABEL_930;
                    case 20:
                        goto LABEL_961;
                    case 21:
                        goto LABEL_992;
                    case 22:
                        goto LABEL_1023;
                    case 23:
                        goto LABEL_1086;
                    case 24:
                        goto LABEL_1149;
                    case 25:
                        goto LABEL_1212;
                    case 26:
                        goto LABEL_1275;
                    }
                }
                do
                {
                    unk_93AE0[v99x].x_0.a32 = v98;
                    v98 += divPnt2Pnt3XY;
                    unk_93AE0[v99x].y_1.a32 = v96;
                    v96 += divSPnt2SPnt1XY;
                    unk_93AE0[v99x].z_4.a32 = v97;
                    v97 += v1131;
                    //v99 += 5;
                    v99x++;
                    diffPnt2Pnt3Y--;
                } while (diffPnt2Pnt3Y);
                v29 = (unsigned __int8)byte_967E1;
                switch (byte_967E1)
                {
                case 0:
                    goto LABEL_309;
                case 1:
                    goto LABEL_322;
                case 2:
                    goto LABEL_351;
                case 3:
                    goto LABEL_382;
                case 4:
                    goto LABEL_445;
                case 5:
                    goto LABEL_474;
                case 6:
                    goto LABEL_503;
                case 7:
                case 11:
                    goto LABEL_564;
                case 8:
                    goto LABEL_595;
                case 9:
                case 10:
                    goto LABEL_658;
                case 12:
                    goto LABEL_721;
                case 13:
                    goto LABEL_752;
                case 14:
                    goto LABEL_783;
                case 15:
                    goto LABEL_812;
                case 16:
                    goto LABEL_841;
                case 17:
                    goto LABEL_870;
                case 18:
                    goto LABEL_899;
                case 19:
                    goto LABEL_930;
                case 20:
                    goto LABEL_961;
                case 21:
                    goto LABEL_992;
                case 22:
                    goto LABEL_1023;
                case 23:
                    goto LABEL_1086;
                case 24:
                    goto LABEL_1149;
                case 25:
                    goto LABEL_1212;
                case 26:
                    goto LABEL_1275;
                }
            }
            diffSPnt3SPnt1Y += sortPnt1->y_1;
            v95 += divSPnt3SPnt1XY * v1144;
            v96 += v1144 * divSPnt2SPnt1XY;
            v97 += v1144 * v1125;
            if (sPnt2YAfterScr)
            {
                ySum_C = heightViewPort_93ADC;
                if (sPnt3YAfterScr)
                {
                    diffSPnt3SPnt1Y = heightViewPort_93ADC;
                }
                else
                {
                    sPnt3YAfterScr = heightViewPort_93ADC <= diffSPnt3SPnt1Y;
                    diffPnt2Pnt3Y = heightViewPort_93ADC - diffSPnt3SPnt1Y;
                }
            }
        }
        else if (sPnt2YAfterScr)
        {
            v100 = heightViewPort_93ADC - sortPnt1->y_1;
            ySum_C = heightViewPort_93ADC - sortPnt1->y_1;
            if (sPnt3YAfterScr)
            {
                diffSPnt3SPnt1Y = heightViewPort_93ADC - sortPnt1->y_1;
            }
            else
            {
                v27 = __OFSUB__(v100, diffSPnt3SPnt1Y);
                v101 = v100 - diffSPnt3SPnt1Y;
                sPnt3YAfterScr = (v101 < 0) ^ v27 | (v101 == 0);
                diffPnt2Pnt3Y = v101;
            }
        }
        //v99 = (uint32*)&unk_93AE0;
        v99x = 0;
        do
        {
            unk_93AE0[v99x].x_0.a32 = v95;
            v95 += divSPnt3SPnt1XY;
            unk_93AE0[v99x].y_1.a32 = v96;
            v96 += divSPnt2SPnt1XY;
            unk_93AE0[v99x].z_4.a32 = v97;
            v97 += v1125;
            //v99 += 5;
            v99x++;
            diffSPnt3SPnt1Y--;
        } while (diffSPnt3SPnt1Y);
        v98 = sortPnt3->x_0 << 16;
        goto LABEL_198;
    case 2:
    case 3:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 18:
    case 19:
    case 22:
    case 23:
        v78 = diffSPnt3SPnt1Y * (__int64)(sortPnt2->x_0 - sortPnt1->x_0) / (sortPnt2->y_1 - sortPnt1->y_1);
        v79 = sortPnt1->x_0 - sortPnt3->x_0;
        v80 = v78 + v79 == 0;
        bool16 = (v78 + v79 < 0) ^ __OFADD__(v78, v79);
        v81 = v78 + v79;
        if (bool16)
            return;
        if (!v80)
        {
            v82 = v81 + 1;
            scaledU.dword = (int)(sortPnt1->u_2 + diffSPnt3SPnt1Y * (__int64)(sortPnt2->u_2 - sortPnt1->u_2) / (sortPnt2->y_1 - sortPnt1->y_1) - sortPnt3->u_2) / v82;
            scaledV.dword = (int)(sortPnt1->v_3 + diffSPnt3SPnt1Y * (__int64)(sortPnt2->v_3 - sortPnt1->v_3) / (sortPnt2->y_1 - sortPnt1->y_1) - sortPnt3->v_3) / v82;
        }
        v1103 = (sortPnt3->u_2 - sortPnt1->u_2) / diffSPnt3SPnt1Y;
        v1114 = (sortPnt3->v_3 - sortPnt1->v_3) / diffSPnt3SPnt1Y;
        v1109 = (sortPnt2->u_2 - sortPnt3->u_2) / diffPnt2Pnt3Y;
        v1120 = (sortPnt2->v_3 - sortPnt3->v_3) / diffPnt2Pnt3Y;
        v83 = sortPnt1->x_0 << 16;
        v84 = v83;
        v85 = sortPnt1->u_2;
        v86 = sortPnt1->v_3;
        if (sPnt1NotInView)
        {
            bool16 = ySum_C <= -sortPnt1->y_1;
            ySum_C += sortPnt1->y_1;
            if (bool16)
                return;
            v1142 = -sortPnt1->y_1;
            if (-sortPnt1->y_1 - diffSPnt3SPnt1Y >= 0)
            {
                v1143 = v1142 - diffSPnt3SPnt1Y;
                diffPnt2Pnt3Y -= v1143;
                v87 = divPnt2Pnt3XY * v1143 + sortPnt3->x_0 << 16;
                v84 += v1143 * divSPnt2SPnt1XY + diffSPnt3SPnt1Y * divSPnt2SPnt1XY;
                v85 += v1143 * v1109 + diffSPnt3SPnt1Y * v1103;
                v86 += v1143 * v1120 + diffSPnt3SPnt1Y * v1114;
                if (sPnt2YAfterScr)
                {
                    diffPnt2Pnt3Y = heightViewPort_93ADC;
                    ySum_C = heightViewPort_93ADC;
                }
                //v88 = (uint32*)&unk_93AE0;
                v88x = 0;
            LABEL_174:
                if (sPnt3YAfterScr)
                {
                    v29 = (unsigned __int8)byte_967E1;
                    switch (byte_967E1)
                    {
                    case 0:
                        goto LABEL_309;
                    case 1:
                        goto LABEL_322;
                    case 2:
                        goto LABEL_351;
                    case 3:
                        goto LABEL_382;
                    case 4:
                        goto LABEL_445;
                    case 5:
                        goto LABEL_474;
                    case 6:
                        goto LABEL_503;
                    case 7:
                    case 11:
                        goto LABEL_564;
                    case 8:
                        goto LABEL_595;
                    case 9:
                    case 10:
                        goto LABEL_658;
                    case 12:
                        goto LABEL_721;
                    case 13:
                        goto LABEL_752;
                    case 14:
                        goto LABEL_783;
                    case 15:
                        goto LABEL_812;
                    case 16:
                        goto LABEL_841;
                    case 17:
                        goto LABEL_870;
                    case 18:
                        goto LABEL_899;
                    case 19:
                        goto LABEL_930;
                    case 20:
                        goto LABEL_961;
                    case 21:
                        goto LABEL_992;
                    case 22:
                        goto LABEL_1023;
                    case 23:
                        goto LABEL_1086;
                    case 24:
                        goto LABEL_1149;
                    case 25:
                        goto LABEL_1212;
                    case 26:
                        goto LABEL_1275;
                    }
                }
                do
                {
                    unk_93AE0[v88x].x_0.a32 = v87;
                    v87 += divPnt2Pnt3XY;
                    unk_93AE0[v88x].y_1.a32 = v84;
                    v84 += divSPnt2SPnt1XY;
                    unk_93AE0[v88x].u_2.a32 = v85;
                    v85 += v1109;
                    unk_93AE0[v88x].v_3.a32 = v86;
                    v86 += v1120;
                    //v88 += 5;
                    v88x++;
                    diffPnt2Pnt3Y--;
                } while (diffPnt2Pnt3Y);
                v29 = (unsigned __int8)byte_967E1;
                switch (byte_967E1)
                {
                case 0:
                    goto LABEL_309;
                case 1:
                    goto LABEL_322;
                case 2:
                    goto LABEL_351;
                case 3:
                    goto LABEL_382;
                case 4:
                    goto LABEL_445;
                case 5:
                    goto LABEL_474;
                case 6:
                    goto LABEL_503;
                case 7:
                case 11:
                    goto LABEL_564;
                case 8:
                    goto LABEL_595;
                case 9:
                case 10:
                    goto LABEL_658;
                case 12:
                    goto LABEL_721;
                case 13:
                    goto LABEL_752;
                case 14:
                    goto LABEL_783;
                case 15:
                    goto LABEL_812;
                case 16:
                    goto LABEL_841;
                case 17:
                    goto LABEL_870;
                case 18:
                    goto LABEL_899;
                case 19:
                    goto LABEL_930;
                case 20:
                    goto LABEL_961;
                case 21:
                    goto LABEL_992;
                case 22:
                    goto LABEL_1023;
                case 23:
                    goto LABEL_1086;
                case 24:
                    goto LABEL_1149;
                case 25:
                    goto LABEL_1212;
                case 26:
                    goto LABEL_1275;
                }
            }
            diffSPnt3SPnt1Y += sortPnt1->y_1;
            v83 += divSPnt3SPnt1XY * v1142;
            v84 += v1142 * divSPnt2SPnt1XY;
            v85 += v1142 * v1103;
            v86 += v1142 * v1114;
            if (sPnt2YAfterScr)
            {
                ySum_C = heightViewPort_93ADC;
                if (sPnt3YAfterScr)
                {
                    diffSPnt3SPnt1Y = heightViewPort_93ADC;
                }
                else
                {
                    sPnt3YAfterScr = heightViewPort_93ADC <= diffSPnt3SPnt1Y;
                    diffPnt2Pnt3Y = heightViewPort_93ADC - diffSPnt3SPnt1Y;
                }
            }
        }
        else if (sPnt2YAfterScr)
        {
            v89 = heightViewPort_93ADC - sortPnt1->y_1;
            ySum_C = heightViewPort_93ADC - sortPnt1->y_1;
            if (sPnt3YAfterScr)
            {
                diffSPnt3SPnt1Y = heightViewPort_93ADC - sortPnt1->y_1;
            }
            else
            {
                v27 = __OFSUB__(v89, diffSPnt3SPnt1Y);
                v90 = v89 - diffSPnt3SPnt1Y;
                sPnt3YAfterScr = (v90 < 0) ^ v27 | (v90 == 0);
                diffPnt2Pnt3Y = v90;
            }
        }
        //v88 = (uint32*)&unk_93AE0;
        v88x = 0;
        do
        {
            unk_93AE0[v88x].x_0.a32 = v83;
            v83 += divSPnt3SPnt1XY;
            unk_93AE0[v88x].y_1.a32 = v84;
            v84 += divSPnt2SPnt1XY;
            unk_93AE0[v88x].u_2.a32 = v85;
            v85 += v1103;
            unk_93AE0[v88x].v_3.a32 = v86;
            v86 += v1114;
            //v88 += 5;
            v88x++;
            diffSPnt3SPnt1Y--;
        } while (diffSPnt3SPnt1Y);
        v87 = sortPnt3->x_0 << 16;
        goto LABEL_174;
    case 5:
    case 6:
    case 20:
    case 21:
    case 24:
    case 25:
    case 26:
        v64 = diffSPnt3SPnt1Y * (__int64)(sortPnt2->x_0 - sortPnt1->x_0) / (sortPnt2->y_1 - sortPnt1->y_1);
        v65 = sortPnt1->x_0 - sortPnt3->x_0;
        //v66 = v64 + v65 == 0;
        //bool16 = (v64 + v65 < 0) ^ __OFADD__(v64, v65);
        v67 = v64 + v65;
        if ((v64 + v65 < 0) ^ __OFADD__(v64, v65))
            return;
        if (v64 + v65)
        {
            v68 = v67 + 1;
            scaledU.dword = (int)(sortPnt1->u_2 + diffSPnt3SPnt1Y * (__int64)(sortPnt2->u_2 - sortPnt1->u_2) / (sortPnt2->y_1 - sortPnt1->y_1) - sortPnt3->u_2) / v68;
            scaledV.dword = (int)(sortPnt1->v_3 + diffSPnt3SPnt1Y * (__int64)(sortPnt2->v_3 - sortPnt1->v_3) / (sortPnt2->y_1 - sortPnt1->y_1) - sortPnt3->v_3) / v68;
            v64 = (int)(sortPnt1->z_4 + diffSPnt3SPnt1Y * (__int64)(sortPnt2->z_4 - sortPnt1->z_4) / (sortPnt2->y_1 - sortPnt1->y_1) - sortPnt3->z_4) / v68;
        }
        scaledZ.dword = v64;
        divSPnt3SPnt1UY = (sortPnt3->u_2 - sortPnt1->u_2) / diffSPnt3SPnt1Y;
        divSPnt3SPnt1VY = (sortPnt3->v_3 - sortPnt1->v_3) / diffSPnt3SPnt1Y;
        divSPnt3SPnt1ZY = (sortPnt3->z_4 - sortPnt1->z_4) / diffSPnt3SPnt1Y;
        divSPnt2SPnt3UY = (sortPnt2->u_2 - sortPnt3->u_2) / diffPnt2Pnt3Y;
        divSPnt2SPnt3VY = (sortPnt2->v_3 - sortPnt3->v_3) / diffPnt2Pnt3Y;
        divSPnt2SPnt3ZY = (sortPnt2->z_4 - sortPnt3->z_4) / diffPnt2Pnt3Y;
        v69 = sortPnt1->x_0 << 16;
        v70 = v69;
        v71 = sortPnt1->u_2;
        v72 = sortPnt1->v_3;
        v73 = sortPnt1->z_4;
        if (sPnt1NotInView)
        {
            bool16 = ySum_C <= -sortPnt1->y_1;
            ySum_C += sortPnt1->y_1;
            if (bool16)
                return;
            v1140 = -sortPnt1->y_1;
            if (-sortPnt1->y_1 - diffSPnt3SPnt1Y >= 0)
            {
                v1141 = v1140 - diffSPnt3SPnt1Y;
                diffPnt2Pnt3Y -= v1141;
                v74 = divPnt2Pnt3XY * v1141 + sortPnt3->x_0 << 16;
                v70 += v1141 * divSPnt2SPnt1XY + diffSPnt3SPnt1Y * divSPnt2SPnt1XY;
                v71 += v1141 * divSPnt2SPnt3UY + diffSPnt3SPnt1Y * divSPnt3SPnt1UY;
                v72 += v1141 * divSPnt2SPnt3VY + diffSPnt3SPnt1Y * divSPnt3SPnt1VY;
                v73 += v1141 * divSPnt2SPnt3ZY + diffSPnt3SPnt1Y * divSPnt3SPnt1ZY;
                if (sPnt2YAfterScr)
                {
                    diffPnt2Pnt3Y = heightViewPort_93ADC;
                    ySum_C = heightViewPort_93ADC;
                }
                //v75 = (uint32*)&unk_93AE0;
                v75x = 0;
            LABEL_150:
                if (sPnt3YAfterScr)
                {
                    v29 = (unsigned __int8)byte_967E1;
                    switch (byte_967E1)
                    {
                    case 0:
                        goto LABEL_309;
                    case 1:
                        goto LABEL_322;
                    case 2:
                        goto LABEL_351;
                    case 3:
                        goto LABEL_382;
                    case 4:
                        goto LABEL_445;
                    case 5:
                        goto LABEL_474;
                    case 6:
                        goto LABEL_503;
                    case 7:
                    case 11:
                        goto LABEL_564;
                    case 8:
                        goto LABEL_595;
                    case 9:
                    case 10:
                        goto LABEL_658;
                    case 12:
                        goto LABEL_721;
                    case 13:
                        goto LABEL_752;
                    case 14:
                        goto LABEL_783;
                    case 15:
                        goto LABEL_812;
                    case 16:
                        goto LABEL_841;
                    case 17:
                        goto LABEL_870;
                    case 18:
                        goto LABEL_899;
                    case 19:
                        goto LABEL_930;
                    case 20:
                        goto LABEL_961;
                    case 21:
                        goto LABEL_992;
                    case 22:
                        goto LABEL_1023;
                    case 23:
                        goto LABEL_1086;
                    case 24:
                        goto LABEL_1149;
                    case 25:
                        goto LABEL_1212;
                    case 26:
                        goto LABEL_1275;
                    }
                }
                do
                {
                    unk_93AE0[v75x].x_0.a32 = v74;
                    v74 += divPnt2Pnt3XY;
                    unk_93AE0[v75x].y_1.a32 = v70;
                    v70 += divSPnt2SPnt1XY;
                    unk_93AE0[v75x].u_2.a32 = v71;
                    v71 += divSPnt2SPnt3UY;
                    unk_93AE0[v75x].v_3.a32 = v72;
                    v72 += divSPnt2SPnt3VY;
                    unk_93AE0[v75x].z_4.a32 = v73;
                    v73 += divSPnt2SPnt3ZY;
                    //v75 += 5;
                    v75x++;
                    diffPnt2Pnt3Y--;
                } while (diffPnt2Pnt3Y);
                v29 = (unsigned __int8)byte_967E1;
                switch (byte_967E1)
                {
                case 0:
                    goto LABEL_309;
                case 1:
                    goto LABEL_322;
                case 2:
                    goto LABEL_351;
                case 3:
                    goto LABEL_382;
                case 4:
                    goto LABEL_445;
                case 5:
                    goto LABEL_474;
                case 6:
                    goto LABEL_503;
                case 7:
                case 11:
                    goto LABEL_564;
                case 8:
                    goto LABEL_595;
                case 9:
                case 10:
                    goto LABEL_658;
                case 12:
                    goto LABEL_721;
                case 13:
                    goto LABEL_752;
                case 14:
                    goto LABEL_783;
                case 15:
                    goto LABEL_812;
                case 16:
                    goto LABEL_841;
                case 17:
                    goto LABEL_870;
                case 18:
                    goto LABEL_899;
                case 19:
                    goto LABEL_930;
                case 20:
                    goto LABEL_961;
                case 21:
                    goto LABEL_992;
                case 22:
                    goto LABEL_1023;
                case 23:
                    goto LABEL_1086;
                case 24:
                    goto LABEL_1149;
                case 25:
                    goto LABEL_1212;
                case 26:
                    goto LABEL_1275;
                }
            }
            diffSPnt3SPnt1Y += sortPnt1->y_1;
            v69 += divSPnt3SPnt1XY * v1140;
            v70 += v1140 * divSPnt2SPnt1XY;
            v71 += v1140 * divSPnt3SPnt1UY;
            v72 += v1140 * divSPnt3SPnt1VY;
            v73 += v1140 * divSPnt3SPnt1ZY;
            if (sPnt2YAfterScr)
            {
                ySum_C = heightViewPort_93ADC;
                if (sPnt3YAfterScr)
                {
                    diffSPnt3SPnt1Y = heightViewPort_93ADC;
                }
                else
                {
                    sPnt3YAfterScr = heightViewPort_93ADC <= diffSPnt3SPnt1Y;
                    diffPnt2Pnt3Y = heightViewPort_93ADC - diffSPnt3SPnt1Y;
                }
            }
        }
        else if (sPnt2YAfterScr)
        {
            v76 = heightViewPort_93ADC - sortPnt1->y_1;
            ySum_C = heightViewPort_93ADC - sortPnt1->y_1;
            if (sPnt3YAfterScr)
            {
                diffSPnt3SPnt1Y = heightViewPort_93ADC - sortPnt1->y_1;
            }
            else
            {
                v27 = __OFSUB__(v76, diffSPnt3SPnt1Y);
                v77 = v76 - diffSPnt3SPnt1Y;
                sPnt3YAfterScr = (v77 < 0) ^ v27 | (v77 == 0);
                diffPnt2Pnt3Y = v77;
            }
        }
        //v75 = (uint32*)&unk_93AE0;
        v75x = 0;
        do
        {
            unk_93AE0[v75x].x_0.a32 = v69;
            v69 += divSPnt3SPnt1XY;
            unk_93AE0[v75x].y_1.a32 = v70;
            v70 += divSPnt2SPnt1XY;
            unk_93AE0[v75x].u_2.a32 = v71;
            v71 += divSPnt3SPnt1UY;
            unk_93AE0[v75x].v_3.a32 = v72;
            v72 += divSPnt3SPnt1VY;
            unk_93AE0[v75x].z_4.a32 = v73;
            v73 += divSPnt3SPnt1ZY;
            //v75 += 5;
            v75x++;
            diffSPnt3SPnt1Y--;
        } while (diffSPnt3SPnt1Y);
        v74 = sortPnt3->x_0 << 16;
        goto LABEL_150;
    }
}
  }

}

//SYNCHRONIZED WITH REMC2
void SetViewPort2_79495_799A5(uint8* beginFrame, uint8* beginPointer, int pitch, int viewPortWidth, int viewPortHeight)
{
	if (pitch)
		pitchViewPort_93AD4 = pitch;
	if (beginFrame)
	{
		beginFrame_93ACC = beginFrame;
		beginPrevLineFrame_93AC8 = beginFrame - pitchViewPort_93AD4;
	}
	if (beginPointer)
		actTexture_93AD0 = beginPointer;
	if (viewPortHeight)
		heightViewPort_93ADC = viewPortHeight;
	if (viewPortWidth)
		widthViewPort_93AD8 = viewPortWidth;
}

//----- (00079906) --------------------------------------------------------
void sub_79906(uint16 a1[2][256])
{
  _BYTE *v1; // ecx
  _BYTE *v2; // edx
  int v3; // [esp-30h] [ebp-3Ch]
  int v4; // [esp-30h] [ebp-3Ch]
  int v5; // [esp-30h] [ebp-3Ch]
  int v6; // [esp-30h] [ebp-3Ch]
  int v7; // [esp-30h] [ebp-3Ch]
  int v8; // [esp-30h] [ebp-3Ch]
  int v9; // [esp-30h] [ebp-3Ch]
  int v10; // [esp-30h] [ebp-3Ch]
  int v11; // [esp-30h] [ebp-3Ch]
  int savedregs; // [esp+Ch] [ebp+0h] BYREF

  sub_61A1C_61F2C(0);
  v1 = (_BYTE *)blurBuffer_AE404_AE3F4;
  v2 = (_BYTE *)begWscreen_2ECFF4_2ECFE4;
  v3 = sub_79A70_79F80(0, begWscreen_2ECFF4_2ECFE4, blurBuffer_AE404_AE3F4, a1);
  sub_61A1C_61F2C(1);
  v4 = sub_79A70_79F80(v3, v2, v1, a1);
  sub_61A1C_61F2C(2);
  v5 = sub_79A70_79F80(v4, v2, v1, a1);
  sub_61A1C_61F2C(3);
  v6 = sub_79A70_79F80(v5, v2, v1, a1);
  sub_61A1C_61F2C(4);
  v7 = sub_79A70_79F80(v6, v2, v1, a1);
  sub_61A1C_61F2C(5);
  v8 = sub_79A70_79F80(v7, v2, v1, a1);
  sub_61A1C_61F2C(6);
  v9 = sub_79A70_79F80(v8, v2, v1, a1);
  sub_61A1C_61F2C(7);
  v10 = sub_79A70_79F80(v9, v2, v1, a1);
  sub_61A1C_61F2C(8);
  v11 = sub_79A70_79F80(v10, v2, v1, a1);
  sub_61A1C_61F2C(9);
  sub_79A70_79F80(v11, v2, v1, a1);
}
// AE404: using guessed type int blurBuffer_AE404_AE3F4;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (00079A1B) --------------------------------------------------------
void sub_79A1B(uint16 a1[2][256])//24AA1B
{
  /*sub_61A1C_61F2C(0);
  int v3 = sub_79A70_79F80(0, begWscreen_2ECFF4_2ECFE4, blurBuffer_AE404_AE3F4, a1);
  sub_61A1C_61F2C(1);
  sub_79A70_79F80(v3, begWscreen_2ECFF4_2ECFE4, blurBuffer_AE404_AE3F4, a1);
  */
  sub_79A70_79F80(begWscreen_2ECFF4_2ECFE4, blurBuffer_AE404_AE3F4, a1,320*200);

  VGA_Blit(tempScreenBuffer_A0000);
}
// AE404: using guessed type int blurBuffer_AE404_AE3F4;
// 12EFF4: using guessed type int dword_12EFF4;

void sub_79A70_79F80(uint8* a2, uint8* a3, uint16 a6[2][256], int scrSize)//24AA70
{
	for (int i = 0; i < scrSize * 2; i += 2)
	{
		((uint16*)tempScreenBuffer_A0000)[i] = a6[1][a2[0]] + a6[0][a3[0]];
		((uint16*)tempScreenBuffer_A0000)[i + 1] = a6[1][a2[1]] + a6[0][a3[1]];
		a3 += 2;
		a2 += 2;
	}
}

//SYNCHRONIZED WITH REMC1
int sub_79A70_79F80(int result,_BYTE *a2,_BYTE *a3,uint16 a6[2][256])//24AA70
{
  //int *v6; // edi
  int v7; // eax

  //fix
  uint32 a5_4 = 0x1000;
  //fix

  //v6 = (int *)tempScreenBuffer_A0000;
  int v6x = 0;
  do
  {
    //LOBYTE(a4) = a3[1];
    LOWORD(result) = a6[0][a3[1]];
    //LOBYTE(a4) = a2[1];
    LOWORD(result) = a6[1][a2[1]] + result;
    v7 = result << 16;
    //LOBYTE(a4) = a3[0];
    LOWORD(v7) = a6[0][a3[0]];
    //LOBYTE(a4) = a2[0];
    LOWORD(v7) = a6[1][a2[0]] + v7;
    tempScreenBuffer_A0000[v6x] = v7;
    //LOBYTE(a4) = a3[3];
    LOWORD(v7) = a6[0][a3[3]];
    //LOBYTE(a4) = a2[3];
    LOWORD(v7) = a6[1][a2[3]] + v7;
    v7 <<= 16;
    //LOBYTE(a4) = a3[2];
    LOWORD(v7) = a6[0][a3[2]];
    //LOBYTE(a4) = a2[2];
    LOWORD(v7) = a6[1][a2[2]] + v7;
    tempScreenBuffer_A0000[v6x+1] = v7;
    //LOBYTE(a4) = a3[5];
    LOWORD(v7) = a6[0][a3[5]];
    //LOBYTE(a4) = a2[5];
    LOWORD(v7) = a6[1][a2[5]] + v7;
    v7 <<= 16;
    //LOBYTE(a4) = a3[4];
    LOWORD(v7) = a6[0][a3[4]];
    //LOBYTE(a4) = a2[4];
    LOWORD(v7) = a6[1][a2[4]] + v7;
    tempScreenBuffer_A0000[v6x+2] = v7;
    //LOBYTE(a4) = a3[7];
    LOWORD(v7) = a6[0][a3[7]];
    //LOBYTE(a4) = a2[7];
    LOWORD(v7) = a6[1][a2[7]] + v7;
    result = v7 << 16;
    //LOBYTE(a4) = a3[6];
    LOWORD(result) = a6[0][a3[6]];
    //LOBYTE(a4) = a2[6];
    LOWORD(result) = a6[1][a2[6]] + result;
    tempScreenBuffer_A0000[v6x+3] = result;
    a3 += 8;
    a2 += 8;
    v6x += 4;
  }
  while ( (a5_4)-- != 1 );
  return result;
}

//----- (00079B2D) --------------------------------------------------------
void sub_79B2D()
{
  char *v0; // edi
  char *v1; // esi
  int v2; // edx
  char *v3; // esi
  char *v4; // esi
  char *v5; // edi
  int v6; // edx
  char *v7; // esi
  char *v8; // esi
  char *v9; // edi
  int v10; // edx
  char *v11; // edi
  int v12; // edx
  char *v13; // edi
  int v14; // edx

  if ( !byte_9AD96 )
    sub_5BDF8_5C308();
  sub_61A1C_61F2C(0);
  v0 = (char *)&tempScreenBuffer_A0000[51200];
  v1 = (char *)begWscreen_2ECFF4_2ECFE4;
  v2 = 11;
  do
  {
    qmemcpy(v0, v1, 0x280u);
    v1 += 1280;
    v0 += 1280;
    --v2;
  }
  while ( v2 );
  qmemcpy(v0, v1, 0x100u);
  v3 = v1 + 256;
  sub_61A1C_61F2C(1);
  qmemcpy(tempScreenBuffer_A0000, v3, 0x180u);
  v4 = v3 + 1024;
  v5 = (char *)&tempScreenBuffer_A0000[1024];
  v6 = 50;
  do
  {
    qmemcpy(v5, v4, 0x280u);
    v4 += 1280;
    v5 += 1280;
    --v6;
  }
  while ( v6 );
  qmemcpy(v5, v4, 0x200u);
  v7 = v4 + 512;
  sub_61A1C_61F2C(2);
  qmemcpy(tempScreenBuffer_A0000, v7, 0x80u);
  v8 = v7 + 768;
  v9 = (char *)&tempScreenBuffer_A0000[768];
  v10 = 51;
  do
  {
    qmemcpy(v9, v8, 0x280u);
    v8 += 1280;
    v9 += 1280;
    --v10;
  }
  while ( v10 );
  sub_61A1C_61F2C(3);
  v11 = (char *)&tempScreenBuffer_A0000[512];
  v12 = 51;
  do
  {
    qmemcpy(v11, v8, 0x280u);
    v8 += 1280;
    v11 += 1280;
    --v12;
  }
  while ( v12 );
  sub_61A1C_61F2C(4);
  v13 = (char *)&tempScreenBuffer_A0000[256];
  v14 = 34;
  do
  {
    qmemcpy(v13, v8, 0x280u);
    v8 += 1280;
    v13 += 1280;
    --v14;
  }
  while ( v14 );
  if ( !byte_9AD96 )
    sub_5BE50_5C360();
}
// 9AD96: using guessed type char byte_9AD96;
// 12EFF4: using guessed type int dword_12EFF4;

//----- (0007B444) --------------------------------------------------------
int sub_7B444()
{
  return dword_A0CA8;
}
// A0CA8: using guessed type int dword_A0CA8;

// nfuncs=1665 queued=1390 decompiled=1390 lumina nreq=0 worse=0 better=0
// ALL OK, 1390 function(s) have been successfully decompiled


